uint64_t sub_10017CE70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CHWorkoutDetailHeartRateTableViewCell *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  CHWorkoutDetailHeartRateTableViewCell *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  id v81;
  void *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char v88;
  char *v89;
  char v90;
  void (*v91)(char *, uint64_t);
  CHWorkoutDetailHeartRateTableViewCell *v92;
  CHWorkoutDetailHeartRateTableViewCell *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  CHWorkoutDetailHeartRateTableViewCell *v98;
  CHWorkoutDetailHeartRateTableViewCell **v99;
  char isUniquelyReferenced_nonNull_native;
  CHWorkoutDetailHeartRateTableViewCell *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  uint64_t v118;
  CHWorkoutDetailHeartRateTableViewCell *v119;
  CHWorkoutDetailHeartRateTableViewCell *v120;
  CHWorkoutDetailHeartRateTableViewCell *v121;
  CHWorkoutDetailHeartRateTableViewCell *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL8 v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  CHWorkoutDetailHeartRateTableViewCell **v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t i;
  uint64_t *v149;
  uint64_t v150;
  _QWORD v151[6];
  CHWorkoutDetailHeartRateTableViewCell *v152;

  v149 = a1;
  v3 = type metadata accessor for Date(0);
  v146 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v144 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v5);
  v137 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v145 = (char *)&v136 - v8;
  v9 = *(_QWORD *)(a2 + 8);
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v10 = *(_QWORD *)(a2 + 8);
    else
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + 8));
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = sub_10001E724(0, (unint64_t *)&unk_100828960, _HKFitnessFriendAchievement_ptr);
    v13 = sub_10001E6E4(&qword_1008235C0, (unint64_t *)&unk_100828960, _HKFitnessFriendAchievement_ptr);
    v14 = Set.Iterator.init(_cocoa:)(v151, v11, v12, v13);
    v9 = v151[0];
    v141 = v151[1];
    v15 = v151[2];
    v16 = v151[3];
    v17 = v151[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(v9 + 32);
    v19 = *(_QWORD *)(v9 + 56);
    v141 = v9 + 56;
    v20 = ~v18;
    v21 = -v18;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v17 = v22 & v19;
    swift_bridgeObjectRetain(v9);
    v15 = v20;
    v16 = 0;
  }
  v136 = v15;
  v139 = v9 & 0x7FFFFFFFFFFFFFFFLL;
  v140 = (unint64_t)(v15 + 64) >> 6;
  v138 = (char *)&type metadata for Swift.AnyObject + 8;
  v147 = v9;
  for (i = v3; ; v3 = i)
  {
    if (v9 < 0)
    {
      v42 = __CocoaSet.Iterator.next()(v14);
      if (!v42)
        return sub_100133140(v9);
      v43 = v42;
      v150 = v42;
      v44 = sub_10001E724(0, (unint64_t *)&unk_100828960, _HKFitnessFriendAchievement_ptr);
      swift_unknownObjectRetain(v43);
      swift_dynamicCast(&v152, &v150, v138, v44, 7);
      v45 = v152;
      swift_unknownObjectRelease(v43);
      v41 = v16;
      v39 = v17;
      if (!v45)
        return sub_100133140(v9);
    }
    else
    {
      if (v17)
      {
        v39 = (v17 - 1) & v17;
        v40 = __clz(__rbit64(v17)) | (v16 << 6);
        v41 = v16;
      }
      else
      {
        v46 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_64;
        if (v46 >= v140)
          return sub_100133140(v9);
        v47 = *(_QWORD *)(v141 + 8 * v46);
        v41 = v16 + 1;
        if (!v47)
        {
          v41 = v16 + 2;
          if (v16 + 2 >= v140)
            return sub_100133140(v9);
          v47 = *(_QWORD *)(v141 + 8 * v41);
          if (!v47)
          {
            v41 = v16 + 3;
            if (v16 + 3 >= v140)
              return sub_100133140(v9);
            v47 = *(_QWORD *)(v141 + 8 * v41);
            if (!v47)
            {
              v41 = v16 + 4;
              if (v16 + 4 >= v140)
                return sub_100133140(v9);
              v47 = *(_QWORD *)(v141 + 8 * v41);
              if (!v47)
              {
                v48 = v16 + 5;
                while (v140 != v48)
                {
                  v47 = *(_QWORD *)(v141 + 8 * v48++);
                  if (v47)
                  {
                    v41 = v48 - 1;
                    goto LABEL_33;
                  }
                }
                return sub_100133140(v9);
              }
            }
          }
        }
LABEL_33:
        v39 = (v47 - 1) & v47;
        v40 = __clz(__rbit64(v47)) + (v41 << 6);
      }
      v45 = (CHWorkoutDetailHeartRateTableViewCell *)*(id *)(*(_QWORD *)(v9 + 48) + 8 * v40);
      if (!v45)
        return sub_100133140(v9);
    }
    v49 = -[CHWorkoutDetailHeartRateTableViewCell templateUniqueName](v45, "templateUniqueName", v136);
    if (!v49)
      goto LABEL_65;
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v9 = v52;

    v60 = *v149;
    if (!*(_QWORD *)(*v149 + 16))
      break;
    v61 = sub_100438F74(v51, v9);
    if ((v53 & 1) == 0)
      break;
    v62 = *(_QWORD *)(v60 + 56) + 16 * v61;
    v64 = *(void **)v62;
    v63 = *(_QWORD *)(v62 + 8);
    v142 = v41;
    v143 = v63;
    v65 = v64;
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, v66, v67, v68, v69, v70, v71, v72);
    v73 = -[CHWorkoutDetailHeartRateTableViewCell completedDate](v65, "completedDate");
    if (!v73)
      goto LABEL_67;
    v74 = v73;
    v75 = v144;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v73);

    v77 = v145;
    v76 = v146;
    v78 = *(void (**)(char *, char *, uint64_t))(v146 + 32);
    v78(v145, v75, v3);
    v9 = *(_QWORD *)(v76 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v9)(v77, 0, 1, v3);
    v79 = v3;
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
    if (v80(v77, 1, v79) == 1)
      goto LABEL_68;
    v81 = -[CHWorkoutDetailHeartRateTableViewCell completedDate](v45, "completedDate");
    if (!v81)
      goto LABEL_69;
    v82 = v81;
    v83 = v144;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

    v84 = v137;
    v85 = v83;
    v86 = i;
    v78(v137, v85, i);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v9)(v84, 0, 1, v86);
    if (v80(v84, 1, v86) == 1)
      goto LABEL_70;
    v87 = v145;
    v88 = static Date.> infix(_:_:)(v145, v84);
    v89 = v84;
    v90 = v88;
    v91 = *(void (**)(char *, uint64_t))(v146 + 8);
    v91(v89, v86);
    v91(v87, v86);
    if ((v90 & 1) != 0)
      v92 = v65;
    else
      v92 = v45;
    v93 = v92;
    v94 = -[CHWorkoutDetailHeartRateTableViewCell templateUniqueName](v45, "templateUniqueName");
    if (!v94)
      goto LABEL_71;
    v95 = v94;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v9 = v97;

    v3 = v143 + 1;
    if (__OFADD__(v143, 1))
      goto LABEL_63;
    v98 = v93;
    v99 = (CHWorkoutDetailHeartRateTableViewCell **)v149;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v149);
    v152 = *v99;
    *v99 = (CHWorkoutDetailHeartRateTableViewCell *)0x8000000000000000;
    sub_1003FEDBC((uint64_t)v98, v3, v96, v9, isUniquelyReferenced_nonNull_native);
    v101 = *v99;
    *v99 = v152;

    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, v102, v103, v104, v105, v106, v107, v108);
    swift_bridgeObjectRelease(v101, v109, v110, v111, v112, v113, v114, v115);
    v16 = v142;
LABEL_13:
    v17 = v39;
    v9 = v147;
  }
  v16 = v41;
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, v53, v54, v55, v56, v57, v58, v59);
  v116 = -[CHWorkoutDetailHeartRateTableViewCell templateUniqueName](v45, "templateUniqueName");
  if (!v116)
    goto LABEL_66;
  v117 = v116;
  v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
  v120 = v119;

  v121 = v45;
  v9 = (uint64_t)v149;
  v3 = swift_isUniquelyReferenced_nonNull_native(*v149);
  v152 = *(CHWorkoutDetailHeartRateTableViewCell **)v9;
  v122 = v152;
  *(_QWORD *)v9 = 0x8000000000000000;
  v124 = sub_100438F74(v118, (uint64_t)v120);
  v125 = *(_QWORD *)v122->cellPadding;
  v126 = (v123 & 1) == 0;
  v127 = v125 + v126;
  if (!__OFADD__(v125, v126))
  {
    v9 = v123;
    if (*(_QWORD *)v122->cellInset < v127)
    {
      sub_1003F8430(v127, v3);
      v128 = sub_100438F74(v118, (uint64_t)v120);
      if ((v9 & 1) != (v129 & 1))
        goto LABEL_72;
      v124 = v128;
      v3 = (uint64_t)v152;
      if ((v9 & 1) == 0)
        goto LABEL_56;
LABEL_11:
      v23 = *(_QWORD *)(v3 + 56) + 16 * v124;

      *(_QWORD *)v23 = v121;
      *(_QWORD *)(v23 + 8) = 1;
LABEL_12:
      v24 = (CHWorkoutDetailHeartRateTableViewCell *)*v149;
      *v149 = v3;

      swift_bridgeObjectRelease(v120, v25, v26, v27, v28, v29, v30, v31);
      swift_bridgeObjectRelease(v24, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_13;
    }
    if ((v3 & 1) != 0)
    {
      v3 = (uint64_t)v152;
      if ((v123 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      sub_100401388();
      v3 = (uint64_t)v152;
      if ((v9 & 1) != 0)
        goto LABEL_11;
    }
LABEL_56:
    *(_QWORD *)(v3 + 8 * (v124 >> 6) + 64) |= 1 << v124;
    v130 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v124);
    *v130 = v118;
    v130[1] = (uint64_t)v120;
    v131 = (CHWorkoutDetailHeartRateTableViewCell **)(*(_QWORD *)(v3 + 56) + 16 * v124);
    *v131 = v121;
    v131[1] = (CHWorkoutDetailHeartRateTableViewCell *)1;
    v132 = *(_QWORD *)(v3 + 16);
    v133 = __OFADD__(v132, 1);
    v134 = v132 + 1;
    if (v133)
      goto LABEL_62;
    *(_QWORD *)(v3 + 16) = v134;
    swift_bridgeObjectRetain(v120);
    goto LABEL_12;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v146 + 56))(v145, 1, 1, v3);
LABEL_68:
  __break(1u);
LABEL_69:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v9)(v137, 1, 1, i);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

id sub_10017D62C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHAwardsDataProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10017D718()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v2 = v1[3];
  v3 = v1[4];
  sub_100016804(v1, v2);
  return dispatch thunk of AAUIAwardsDataProviding.activate()(v2, v3);
}

uint64_t sub_10017D76C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v4 = v3[3];
  v5 = v3[4];
  sub_100016804(v3, v4);
  return dispatch thunk of AAUIAwardsDataProviding.activate(isFitnessPlusSubscriber:)(a1, v4, v5);
}

uint64_t sub_10017D7D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t ObjectType;

  v5 = *v2;
  ObjectType = swift_getObjectType(a1);
  return sub_10017DB20(a1, v5, ObjectType, a2);
}

uint64_t sub_10017D810(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v6 = v5[3];
  v7 = v5[4];
  sub_100016804(v5, v6);
  return dispatch thunk of AAUIAwardsDataProviding.remove(observer:)(a1, a2, v6, v7);
}

uint64_t sub_10017D874(uint64_t a1, uint64_t a2)
{
  return sub_10017DA3C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.topThreeAchievements());
}

uint64_t sub_10017D880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017D8B0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievementCount(forSection:));
}

uint64_t sub_10017D88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017D8B0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.topAchievement(forSection:));
}

uint64_t sub_10017D898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017D8B0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievementStack(forSection:));
}

uint64_t sub_10017D8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017D8B0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievements(forSection:));
}

uint64_t sub_10017D8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (_QWORD *)(*v4 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v8 = v7[3];
  v9 = v7[4];
  sub_100016804(v7, v8);
  return a4(a1, v8, v9);
}

uint64_t sub_10017D910()
{
  void **v0;
  void *v1;
  NSString v2;
  id v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "achievementsForWorkoutIdentifier:", v2);

  v4 = sub_10017DAE4();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

uint64_t sub_10017D978()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v2 = v1[3];
  v3 = v1[4];
  sub_100016804(v1, v2);
  return dispatch thunk of AAUIAwardsDataProviding.mostRecentSection()(v2, v3);
}

uint64_t sub_10017D9CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v4 = v3[3];
  v5 = v3[4];
  sub_100016804(v3, v4);
  return dispatch thunk of AAUIAwardsDataProviding.sections(atIndex:)(a1, v4, v5);
}

uint64_t sub_10017DA30(uint64_t a1, uint64_t a2)
{
  return sub_10017DA3C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.otherSections());
}

uint64_t sub_10017DA3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(*v3 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v6 = v5[3];
  v7 = v5[4];
  sub_100016804(v5, v6);
  return a3(v6, v7);
}

uint64_t sub_10017DA8C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v4 = v3[3];
  v5 = v3[4];
  sub_100016804(v3, v4);
  return dispatch thunk of AAUIAwardsDataProviding.shouldShowProgressBar(for:)(a1, v4, v5) & 1;
}

unint64_t sub_10017DAE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10082BBF0;
  if (!qword_10082BBF0)
  {
    v1 = objc_opt_self(ACHAchievement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10082BBF0);
  }
  return result;
}

uint64_t sub_10017DB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a2 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24);
  v7 = *(_QWORD *)(a2 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 32);
  sub_100016804((_QWORD *)(a2 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), v6);
  return dispatch thunk of AAUIAwardsDataProviding.add(observer:)(a1, a4, v6, v7);
}

id sub_10017DB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  objc_class *v7;
  id v8;
  id v9;
  objc_super v11;
  _QWORD v12[5];

  v12[3] = a3;
  v12[4] = a4;
  v6 = sub_10004C480(v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v6, a1, a3);
  v7 = (objc_class *)type metadata accessor for CHAwardsDataProvider();
  v8 = objc_allocWithZone(v7);
  sub_1000252E0((uint64_t)v12, (uint64_t)v8 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v11.receiver = v8;
  v11.super_class = v7;
  v9 = objc_msgSendSuper2(&v11, "init");
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v12);
  return v9;
}

double sub_10017DC0C()
{
  return sub_10035DDA4(0x2Au);
}

char *sub_10017DC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  id v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  NSString v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  objc_super v25;

  swift_getObjectType(v3);
  v6 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  v7 = objc_allocWithZone((Class)UIView);
  v8 = v3;
  v9 = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v6] = v9;
  v10 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView;
  v11 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AchievementCellContentView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v10] = v11;
  v12 = *(void **)&v11[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
  *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementBadgeView] = v12;
  v13 = v12;

  if (a3)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v14 = 0;
  }
  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for AchievementsListTableViewCell();
  v15 = (char *)objc_msgSendSuper2(&v25, "initWithStyle:reuseIdentifier:", a1, v14);

  v16 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  v17 = *(void **)&v15[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView];
  v18 = v15;
  v19 = v17;
  v20 = sub_100032478();
  objc_msgSend(v19, "setBackgroundColor:", v20);

  v21 = objc_msgSend(*(id *)&v15[v16], "layer");
  objc_msgSend(v21, "setCornerRadius:", sub_10003249C());

  v22 = *(void **)&v15[v16];
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v18[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView]);
  v23 = objc_msgSend(v18, "contentView");
  objc_msgSend(v23, "addSubview:", v22);

  sub_10017DEC0();
  return v18;
}

void sub_10017DEC0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  Class isa;

  v1 = v0;
  swift_getObjectType(v0);
  v38 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = sub_100047110((uint64_t *)&unk_100828340);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100624C80;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView];
  v5 = objc_msgSend(v4, "topAnchor");
  v6 = objc_msgSend(v0, "contentView");
  v7 = objc_msgSend(v6, "topAnchor");

  v8 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v7, sub_100032C24());
  *(_QWORD *)(v3 + 32) = v8;
  v9 = objc_msgSend(v4, "leadingAnchor");
  v10 = objc_msgSend(v0, "contentView");
  v11 = objc_msgSend(v10, "leadingAnchor");

  sub_100032C24();
  v13 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v11, v12);

  *(_QWORD *)(v3 + 40) = v13;
  v14 = objc_msgSend(v4, "trailingAnchor");
  v15 = objc_msgSend(v0, "contentView");
  v16 = objc_msgSend(v15, "trailingAnchor");

  sub_100032C24();
  v18 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v16, -v17);

  *(_QWORD *)(v3 + 48) = v18;
  v19 = objc_msgSend(v4, "bottomAnchor");
  v20 = objc_msgSend(v0, "contentView");
  v21 = objc_msgSend(v20, "bottomAnchor");

  sub_100032C24();
  v23 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v21, -v22);

  *(_QWORD *)(v3 + 56) = v23;
  v24 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView];
  v25 = objc_msgSend(v24, "topAnchor");
  v26 = objc_msgSend(v4, "topAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v3 + 64) = v27;
  v28 = objc_msgSend(v24, "bottomAnchor");
  v29 = objc_msgSend(v4, "bottomAnchor");
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v3 + 72) = v30;
  v31 = objc_msgSend(v24, "leadingAnchor");
  v32 = objc_msgSend(v4, "leadingAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v3 + 80) = v33;
  v34 = objc_msgSend(v24, "trailingAnchor");
  v35 = objc_msgSend(v4, "trailingAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

  *(_QWORD *)(v3 + 88) = v36;
  specialized Array._endMutation()(v37);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v38, "activateConstraints:", isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

}

id sub_10017E3F0()
{
  return sub_100111F3C(type metadata accessor for AchievementsListTableViewCell);
}

uint64_t type metadata accessor for AchievementsListTableViewCell()
{
  return objc_opt_self(_TtC10FitnessApp29AchievementsListTableViewCell);
}

void sub_10017E464()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;

  v0 = (void *)objc_opt_self(UIImage);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "__systemImageNamedSwift:", v1);

  if (v2)
  {
    if (qword_10081D618 != -1)
      swift_once(&qword_10081D618, sub_10017E580);
    v3 = objc_msgSend(v2, "imageWithSymbolConfiguration:", qword_100823608);

  }
  else
  {
    v3 = 0;
  }
  qword_1008235F8 = (uint64_t)v3;
}

id sub_10017E53C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  qword_100823600 = (uint64_t)result;
  return result;
}

id sub_10017E580()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(_UIImageSymbolConfiguration), "_configurationWithPointSize:", 13.0);
  qword_100823608 = (uint64_t)result;
  return result;
}

char *sub_10017E5BC(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  char *v28;
  void *v29;
  uint64_t v30;
  char *v31;
  objc_super v33;

  v9 = &v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView;
  v11 = objc_allocWithZone((Class)UIImageView);
  v12 = v4;
  v13 = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v4[v10] = v13;
  v14 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView;
  v15 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, "setAxis:", 1);
  v16 = (void *)UIStackView.withAlignment(_:)(1);

  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v12[v14] = v16;
  v17 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel;
  v18 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, "setLineBreakMode:", 0);
  objc_msgSend(v18, "setNumberOfLines:", 0);
  if (qword_10081D610 != -1)
    swift_once(&qword_10081D610, sub_10017E53C);
  v19 = (void *)UILabel.withFont(_:)(qword_100823600);

  v20 = (void *)objc_opt_self(UIColor);
  v21 = objc_msgSend(v20, "labelColor");
  v22 = (void *)UILabel.withTextColor(_:)();

  objc_msgSend(v22, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v12[v17] = v22;
  v23 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel;
  v24 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v24, "setLineBreakMode:", 0);
  objc_msgSend(v24, "setNumberOfLines:", 0);
  objc_msgSend(v24, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v12[v23] = v24;
  v25 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView;
  v26 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v27 = objc_msgSend(v20, "tertiaryLabelColor");
  objc_msgSend(v26, "setTintColor:", v27);

  if (qword_10081D608 != -1)
    swift_once(&qword_10081D608, sub_10017E464);
  objc_msgSend(v26, "setImage:", qword_1008235F8);
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v12[v25] = v26;

  v33.receiver = v12;
  v33.super_class = (Class)type metadata accessor for AchievementCellContentView();
  v28 = (char *)objc_msgSendSuper2(&v33, "initWithFrame:", a1, a2, a3, a4);
  v29 = *(void **)&v28[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView];
  v30 = *(_QWORD *)&v28[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel];
  v31 = v28;
  objc_msgSend(v29, "addArrangedSubview:", v30);
  objc_msgSend(v29, "addArrangedSubview:", *(_QWORD *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel]);
  objc_msgSend(v31, "addSubview:", *(_QWORD *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView]);
  objc_msgSend(v31, "addSubview:", v29);
  objc_msgSend(v31, "addSubview:", *(_QWORD *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView]);
  sub_10017E9E8();

  return v31;
}

void sub_10017E9E8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  Class isa;

  v1 = v0;
  v45 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = sub_100047110((uint64_t *)&unk_100828340);
  v3 = swift_allocObject(v2, 136, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100628960;
  v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
  v5 = objc_msgSend(v4, "topAnchor");
  v6 = objc_msgSend(v1, "topAnchor");
  v7 = objc_msgSend(v5, "constraintGreaterThanOrEqualToAnchor:constant:", v6, 16.0);

  *(_QWORD *)(v3 + 32) = v7;
  v8 = objc_msgSend(v4, "leadingAnchor");
  v9 = objc_msgSend(v1, "leadingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, 16.0);

  *(_QWORD *)(v3 + 40) = v10;
  v11 = objc_msgSend(v4, "centerYAnchor");
  v12 = objc_msgSend(v1, "centerYAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v3 + 48) = v13;
  v14 = objc_msgSend(v4, "bottomAnchor");
  v15 = objc_msgSend(v1, "bottomAnchor");
  v16 = objc_msgSend(v14, "constraintLessThanOrEqualToAnchor:constant:", v15, -16.0);

  *(_QWORD *)(v3 + 56) = v16;
  v17 = objc_msgSend(v4, "heightAnchor");
  v18 = objc_msgSend(v17, "constraintEqualToConstant:", 62.0);

  *(_QWORD *)(v3 + 64) = v18;
  v19 = objc_msgSend(v4, "widthAnchor");
  v20 = objc_msgSend(v19, "constraintEqualToConstant:", 62.0);

  *(_QWORD *)(v3 + 72) = v20;
  v21 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView];
  v22 = objc_msgSend(v21, "topAnchor");
  v23 = objc_msgSend(v1, "topAnchor");
  v24 = objc_msgSend(v22, "constraintGreaterThanOrEqualToAnchor:constant:", v23, 16.0);

  *(_QWORD *)(v3 + 80) = v24;
  v25 = objc_msgSend(v21, "leadingAnchor");
  v26 = objc_msgSend(v4, "trailingAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 8.0);

  *(_QWORD *)(v3 + 88) = v27;
  v28 = objc_msgSend(v21, "centerYAnchor");
  v29 = objc_msgSend(v4, "centerYAnchor");
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v3 + 96) = v30;
  v31 = objc_msgSend(v21, "trailingAnchor");
  v32 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView];
  v33 = objc_msgSend(v32, "leadingAnchor");
  v34 = objc_msgSend(v31, "constraintLessThanOrEqualToAnchor:", v33);

  *(_QWORD *)(v3 + 104) = v34;
  v35 = objc_msgSend(v21, "bottomAnchor");
  v36 = objc_msgSend(v1, "bottomAnchor");
  v37 = objc_msgSend(v35, "constraintLessThanOrEqualToAnchor:constant:", v36, -16.0);

  *(_QWORD *)(v3 + 112) = v37;
  v38 = objc_msgSend(v32, "centerYAnchor");
  v39 = objc_msgSend(v1, "centerYAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v3 + 120) = v40;
  v41 = objc_msgSend(v32, "trailingAnchor");
  v42 = objc_msgSend(v1, "trailingAnchor");
  v43 = objc_msgSend(v41, "constraintEqualToAnchor:constant:", v42, -16.0);

  *(_QWORD *)(v3 + 128) = v43;
  specialized Array._endMutation()(v44);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v45, "activateConstraints:", isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

}

void sub_10017EFA4(void *a1, void *a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSString v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  CHWorkoutDetailHeartRateTableViewCell *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  unint64_t v24;
  const char *v25;
  CHWorkoutDetailHeartRateTableViewCell *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  CHWorkoutDetailHeartRateTableViewCell *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  CHWorkoutDetailHeartRateTableViewCell *v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  const char *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  NSString *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  id v67;
  NSString *v68;
  id v69;
  CHWorkoutDetailHeartRateTableViewCell *v70;
  void *v71;
  id v72;
  NSString v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  Class isa;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  const char *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  CHWorkoutDetailHeartRateTableViewCell *v103;
  void *v104;
  id v105;
  uint64_t v106;
  char *v107;
  void *v108;
  int64x2_t *v109;
  void *v110;
  id v111;
  id v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  void **v120;
  unsigned int v121;
  __CFString **v122;
  uint64_t v123;
  CHWorkoutDetailHeartRateTableViewCell *v124;
  CHWorkoutDetailHeartRateTableViewCell *v125;
  Swift::String v126;
  Swift::String v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  CHWorkoutDetailHeartRateTableViewCell *v135;
  NSString v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  uint64_t v144;
  void *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[2];
  _QWORD v154[2];
  char v155[112];
  void **aBlock;
  uint64_t v157;
  uint64_t (*v158)(uint64_t);
  void *v159;
  uint64_t (*v160)();
  int64x2_t *v161;

  v4 = v3;
  v152 = type metadata accessor for DispatchWorkItemFlags(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for DispatchQoS(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v146 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel];
  v15 = objc_msgSend(a3, "titleForAchievement:", a1, v12);
  v16 = v15;
  if (v15)
  {
    v17 = v11;
    v18 = v4;
    v19 = v10;
    v20 = a2;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v23 = v22;

    aBlock = (void **)v21;
    v157 = (uint64_t)v23;
    v154[0] = 10;
    v154[1] = 0xE100000000000000;
    v153[0] = 32;
    v153[1] = 0xE100000000000000;
    v24 = sub_100038CA0();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v154, v153, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v24, v24, v24);
    v26 = (CHWorkoutDetailHeartRateTableViewCell *)v25;
    swift_bridgeObjectRelease(v23, v25, v27, v28, v29, v30, v31, v32);
    v16 = String._bridgeToObjectiveC()();
    v33 = v26;
    a2 = v20;
    v10 = v19;
    v4 = v18;
    v11 = v17;
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  objc_msgSend(v14, "setText:", v16);

  v41 = objc_msgSend(a3, "achievedShortDescriptionForAchievement:", a1);
  if (v41)
  {
    v42 = v41;
    v145 = a2;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v45 = v44;

    if (v43 == 0xD000000000000026 && v45 == (CHWorkoutDetailHeartRateTableViewCell *)0x8000000100688560)
    {
      swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)0x8000000100688560, v46, v47, v48, v49, v50, v51, v52);
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, 0xD000000000000026, 0x8000000100688560, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v45, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      v60 = sub_100047110((uint64_t *)&unk_10082EDA0);
      inited = swift_initStackObject(v60, v155);
      *(_OWORD *)(inited + 16) = xmmword_100620BC0;
      *(_QWORD *)(inited + 32) = NSFontAttributeName;
      v62 = qword_10081D610;
      v63 = NSFontAttributeName;
      if (v62 != -1)
        swift_once(&qword_10081D610, sub_10017E53C);
      v64 = (void *)qword_100823600;
      v65 = sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
      *(_QWORD *)(inited + 40) = v64;
      *(_QWORD *)(inited + 64) = v65;
      *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
      v66 = (void *)objc_opt_self(UIColor);
      v67 = v64;
      v68 = NSForegroundColorAttributeName;
      v69 = objc_msgSend(v66, "secondaryLabelColor");
      *(_QWORD *)(inited + 104) = sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
      *(_QWORD *)(inited + 80) = v69;
      v70 = (CHWorkoutDetailHeartRateTableViewCell *)sub_100038C84(inited);
      v71 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel];
      v72 = objc_allocWithZone((Class)NSAttributedString);
      v73 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45, v74, v75, v76, v77, v78, v79, v80);
      type metadata accessor for Key(0);
      sub_1000083D8((unint64_t *)&qword_10081E850, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1006226C0);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v70, v82, v83, v84, v85, v86, v87, v88);
      v89 = objc_msgSend(v72, "initWithString:attributes:", v73, isa);

      objc_msgSend(v71, "setAttributedText:", v89);
    }
    a2 = v145;
  }
  v90 = objc_msgSend(a1, "template");
  v91 = objc_msgSend(v90, "uniqueName");

  if (v91)
  {
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v101 = v100;

  }
  else
  {
    v99 = 0;
    v101 = 0;
  }
  v102 = (uint64_t *)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  v103 = *(CHWorkoutDetailHeartRateTableViewCell **)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName
                                                      + 8];
  *v102 = v99;
  v102[1] = v101;
  swift_bridgeObjectRelease(v103, v92, v93, v94, v95, v96, v97, v98);
  if (objc_msgSend(a2, "hasCachedThumbnailImageForAchievement:size:", a1, 62.0, 62.0))
  {
    v104 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
    v105 = objc_msgSend(a2, "thumbnailImageForAchievement:size:", a1, 62.0, 62.0);
    objc_msgSend(v104, "setImage:", v105);

    v106 = v102[1];
    if (!v106)
      return;
  }
  else
  {
    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v107 = v146;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v146, enum case for DispatchQoS.QoSClass.userInitiated(_:), v10);
    v108 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v107, v10);
    v109 = (int64x2_t *)swift_allocObject(&unk_10078A408, 56, 7);
    v109[1].i64[0] = (uint64_t)a2;
    v109[1].i64[1] = (uint64_t)a1;
    v109[2] = vdupq_n_s64(0x404F000000000000uLL);
    v109[3].i64[0] = (uint64_t)v4;
    v160 = sub_10017FC98;
    v161 = v109;
    aBlock = _NSConcreteStackBlock;
    v157 = 1107296256;
    v158 = sub_10002D0F8;
    v159 = &unk_10078A420;
    v110 = _Block_copy(&aBlock);
    v111 = a2;
    v112 = a1;
    v113 = v4;
    v114 = v147;
    static DispatchQoS.unspecified.getter(v113);
    v154[0] = &_swiftEmptyArrayStorage;
    v115 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v116 = sub_100047110(&qword_100828C80);
    v117 = sub_10002FB08();
    v118 = v150;
    v119 = v152;
    dispatch thunk of SetAlgebra.init<A>(_:)(v154, v116, v117, v152, v115);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v114, v118, v110);
    _Block_release(v110);

    (*(void (**)(char *, uint64_t))(v151 + 8))(v118, v119);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v114, v149);
    swift_release(v161);
    v106 = v102[1];
    if (!v106)
      return;
  }
  v120 = (void **)*v102;
  v121 = objc_msgSend(a1, "unearned", swift_bridgeObjectRetain(v106).n128_f64[0]);
  v122 = &off_10077A870;
  if (!v121)
    v122 = &off_10077A868;
  v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v122);
  v125 = v124;
  aBlock = v120;
  v157 = v106;
  v126._countAndFlagsBits = 95;
  v126._object = (void *)0xE100000000000000;
  String.append(_:)(v126);
  v127._countAndFlagsBits = v123;
  v127._object = v125;
  String.append(_:)(v127);
  swift_bridgeObjectRelease(v125, v128, v129, v130, v131, v132, v133, v134);
  v135 = (CHWorkoutDetailHeartRateTableViewCell *)v157;
  v136 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v135, v137, v138, v139, v140, v141, v142, v143);
  objc_msgSend(v4, "setAccessibilityIdentifier:", v136);

}

uint64_t sub_10017F784(void *a1, void *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a1, "thumbnailImageForAchievement:size:", a2, a3, a4);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = swift_allocObject(&unk_10078A458, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16);
  v18 = (_QWORD *)swift_allocObject(&unk_10078A480, 40, 7);
  v18[2] = v17;
  v18[3] = a2;
  v18[4] = v14;
  aBlock[4] = sub_10017FD00;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_10078A498;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  v21 = a2;
  v22 = v14;
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v24 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100047110(&qword_100828C80);
  v26 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v8, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v28);
}

void sub_10017F9F4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  _BYTE v21[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName);
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName + 8);
    swift_bridgeObjectRetain(v8);

  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = objc_msgSend(a2, "template");
  v11 = objc_msgSend(v10, "uniqueName");

  if (!v11)
  {
    if (!v8)
      goto LABEL_18;
LABEL_14:
    swift_bridgeObjectRelease(v8);
    return;
  }
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  if (!v8)
  {
    if (v14)
    {
      swift_bridgeObjectRelease(v14);
      return;
    }
    goto LABEL_18;
  }
  if (!v14)
    goto LABEL_14;
  if (v9 == v12 && v8 == v14)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, v12, v14, 0);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v14);
    if ((v16 & 1) == 0)
      return;
  }
LABEL_18:
  swift_beginAccess(v5, &v20, 0, 0);
  v17 = swift_unknownObjectWeakLoadStrong(v5);
  if (v17)
  {
    v18 = (void *)v17;
    v19 = *(id *)(v17 + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView);

    objc_msgSend(v19, "setImage:", a3);
  }
}

id sub_10017FBA0()
{
  return sub_100111F3C(type metadata accessor for AchievementCellContentView);
}

uint64_t type metadata accessor for AchievementCellContentView()
{
  return objc_opt_self(_TtC10FitnessApp26AchievementCellContentView);
}

unint64_t sub_10017FC48()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_10017FC64()
{
  id *v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10017FC98()
{
  uint64_t v0;

  return sub_10017F784(*(void **)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_10017FCA8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017FCCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10017FD00()
{
  uint64_t v0;

  sub_10017F9F4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_10017FD0C()
{
  char *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;

  v1 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  v2 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v1] = v2;
  v3 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView;
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AchievementCellContentView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v3] = v4;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/AchievementsListTableViewCell.swift", 46, 2, 30, 0);
  __break(1u);
}

void sub_10017FDF8()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView;
  v4 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v3] = v4;
  v5 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView;
  v6 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, "setAxis:", 1);
  v7 = (void *)UIStackView.withAlignment(_:)(1);

  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v5] = v7;
  v8 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel;
  v9 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, "setLineBreakMode:", 0);
  objc_msgSend(v9, "setNumberOfLines:", 0);
  if (qword_10081D610 != -1)
    swift_once(&qword_10081D610, sub_10017E53C);
  v10 = (void *)UILabel.withFont(_:)(qword_100823600);

  v11 = (void *)objc_opt_self(UIColor);
  v12 = objc_msgSend(v11, "labelColor");
  v13 = (void *)UILabel.withTextColor(_:)();

  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v8] = v13;
  v14 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel;
  v15 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, "setLineBreakMode:", 0);
  objc_msgSend(v15, "setNumberOfLines:", 0);
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v14] = v15;
  v16 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView;
  v17 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v18 = objc_msgSend(v11, "tertiaryLabelColor");
  objc_msgSend(v17, "setTintColor:", v18);

  if (qword_10081D608 != -1)
    swift_once(&qword_10081D608, sub_10017E464);
  objc_msgSend(v17, "setImage:", qword_1008235F8);
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v16] = v17;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/AchievementsListTableViewCell.swift", 46, 2, 112, 0);
  __break(1u);
}

uint64_t sub_100180120@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v2 = v1;
  v98 = a1;
  v87 = type metadata accessor for SleepingSampleChartLollipopView(0);
  v94 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v95 = v3;
  v97 = (uint64_t)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v92);
  v93 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_1008236A8);
  __chkstk_darwin(v5);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100823760);
  __chkstk_darwin(v8);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100823768);
  __chkstk_darwin(v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100047110(&qword_100823770);
  __chkstk_darwin(v83);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100047110(&qword_100823778);
  __chkstk_darwin(v84);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100047110(&qword_100823780);
  __chkstk_darwin(v85);
  v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100047110(&qword_100823788);
  __chkstk_darwin(v86);
  v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100047110(&qword_100823790);
  __chkstk_darwin(v90);
  v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100047110(&qword_100823798);
  v89 = *(_QWORD *)(v91 - 8);
  v24 = __chkstk_darwin(v91);
  v88 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.leading.getter(v24);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v26 = &v10[*(int *)(sub_100047110(&qword_1008237A0) + 44)];
  v96 = v2;
  v27 = sub_100180810(v2, v26);
  v28 = static Alignment.center.getter(v27);
  sub_1003EB23C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v28, v29);
  v30 = sub_10001BE90((uint64_t)v10, &qword_100823760);
  v31 = static Edge.Set.top.getter(v30);
  v32 = v31;
  v33 = static Edge.Set.horizontal.getter(v31);
  v34 = Edge.Set.init(rawValue:)(0);
  v35 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v35 & v32) != v32)
    v34 = Edge.Set.init(rawValue:)(v34 | v32);
  v36 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    LOBYTE(v34) = Edge.Set.init(rawValue:)(v34 | v33);
  v37 = EdgeInsets.init(_all:)(4.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100021CC0((uint64_t)v13, (uint64_t)v15, &qword_100823768);
  v44 = &v15[*(int *)(v83 + 36)];
  *v44 = v34;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_10001BE90((uint64_t)v13, &qword_100823768);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = EdgeInsets.init(_all:)(2.0);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  sub_100021CC0((uint64_t)v15, (uint64_t)v17, &qword_100823770);
  v54 = &v17[*(int *)(v84 + 36)];
  *v54 = v46;
  *((double *)v54 + 1) = v47;
  *((_QWORD *)v54 + 2) = v49;
  *((_QWORD *)v54 + 3) = v51;
  *((_QWORD *)v54 + 4) = v53;
  v54[40] = 0;
  v55 = sub_10001BE90((uint64_t)v15, &qword_100823770);
  v56 = static Color.black.getter(v55);
  sub_100021CC0((uint64_t)v17, (uint64_t)v19, &qword_100823778);
  *(_QWORD *)&v19[*(int *)(v85 + 36)] = v56;
  sub_10001BE90((uint64_t)v17, &qword_100823778);
  v57 = v96;
  sub_100021CC0(v96 + *(int *)(v87 + 28), (uint64_t)v7, &qword_1008236A8);
  v58 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v7, 1, v58) == 1)
  {
    sub_10001BE90((uint64_t)v7, &qword_1008236A8);
    v60 = static Color.gray.getter(v59);
    v61 = v60;
  }
  else
  {
    v61 = *(_QWORD *)&v7[*(int *)(v58 + 24)];
    swift_retain(v61);
    v60 = sub_100011F54((uint64_t)v7, type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
  }
  v62 = static Edge.Set.all.getter(v60);
  sub_100021CC0((uint64_t)v19, (uint64_t)v21, &qword_100823780);
  v63 = &v21[*(int *)(v86 + 36)];
  *(_QWORD *)v63 = v61;
  v63[8] = v62;
  sub_10001BE90((uint64_t)v19, &qword_100823780);
  v64 = v93;
  v65 = &v93[*(int *)(v92 + 20)];
  v66 = enum case for RoundedCornerStyle.continuous(_:);
  v67 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 104))(v65, v66, v67);
  __asm { FMOV            V0.2D, #8.0 }
  *v64 = _Q0;
  v73 = v90;
  v74 = (uint64_t)&v23[*(int *)(v90 + 36)];
  sub_10004F8C8((uint64_t)v64, v74, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v74 + *(int *)(sub_100047110(&qword_100821238) + 36)) = 256;
  sub_100021CC0((uint64_t)v21, (uint64_t)v23, &qword_100823788);
  sub_100011F54((uint64_t)v64, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10001BE90((uint64_t)v21, &qword_100823788);
  v75 = v97;
  sub_10004F8C8(v57, v97, type metadata accessor for SleepingSampleChartLollipopView);
  v76 = *(unsigned __int8 *)(v94 + 80);
  v77 = (v76 + 16) & ~v76;
  v78 = swift_allocObject(&unk_10078A4D8, v77 + v95, v76 | 7);
  sub_1001822D0(v75, v78 + v77);
  v79 = sub_100182340();
  v80 = v88;
  View.onTapGesture(count:perform:)(1, sub_100182314, v78, v73, v79);
  swift_release(v78);
  sub_10001BE90((uint64_t)v23, &qword_100823790);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v89 + 32))(v98, v80, v91);
}

uint64_t sub_100180810@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OpaqueTypeConformance2;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;

  v76 = a1;
  v88 = a2;
  v3 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v3);
  v81 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100047110(&qword_100823808);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v91 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100047110(&qword_100823810);
  v92 = *(_QWORD *)(v84 - 8);
  v6 = __chkstk_darwin(v84);
  v80 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v82 = (char *)&v69 - v8;
  v87 = type metadata accessor for AttributedString(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v89 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100047110(&qword_100823818);
  v78 = *(_QWORD *)(v79 - 8);
  v10 = __chkstk_darwin(v79);
  v77 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v90 = (char *)&v69 - v12;
  sub_100180DE8(a1, (uint64_t)&v93);
  v13 = v93;
  v14 = v94;
  v75 = v94;
  v15 = v95;
  v16 = v96;
  v17 = v97;
  v18 = v98;
  v20 = static Font.caption2.getter(v19);
  KeyPath = swift_getKeyPath(&unk_100628A98);
  v93 = v13;
  v94 = v14;
  v95 = v15;
  v96 = v16;
  v97 = v17;
  LOBYTE(v98) = v18;
  v99 = KeyPath;
  v100 = v20;
  v22 = static Font.Weight.medium.getter();
  v23 = sub_100047110(&qword_100823820);
  v24 = sub_10018258C();
  View.fontWeight(_:)(*(_QWORD *)&v22, 0, v23, v24);
  swift_release(v13);
  sub_100116B88(v75, v15, v16, v17);
  swift_release(v20);
  swift_release(KeyPath);
  v25 = type metadata accessor for SleepingSampleChartLollipopView(0);
  v26 = v76;
  v27 = v89;
  v28 = sub_1004BF7F4(v76 + *(int *)(v25 + 24), v89);
  v71 = static VerticalAlignment.center.getter(v28);
  v29 = sub_100180FE0(v27, v26, (uint64_t)&v93);
  v31 = v93;
  v30 = v94;
  v73 = v93;
  LOBYTE(v15) = v95;
  v72 = v95;
  v32 = v96;
  v33 = v97;
  v74 = v96;
  v76 = v97;
  v34 = v98;
  v35 = v99;
  v75 = v98;
  v36 = v100;
  v70 = v101;
  v37 = v102;
  v38 = static Font.body.getter(v29);
  v39 = swift_getKeyPath(&unk_100628A98);
  v93 = v71;
  v94 = 0;
  LOBYTE(v95) = 0;
  v96 = v31;
  v97 = v30;
  LOBYTE(v98) = v15;
  v99 = v32;
  v100 = v33;
  v101 = v34;
  v102 = v35;
  v103 = v36;
  v104 = v70;
  v105 = v37;
  v106 = v39;
  v107 = v38;
  v40 = v39;
  v41 = static Font.Weight.medium.getter();
  v42 = sub_100047110(&qword_100823860);
  v43 = sub_10018268C();
  View.fontWeight(_:)(*(_QWORD *)&v41, 0, v42, v43);
  sub_1000E4458(v73, v30, v72);
  swift_bridgeObjectRelease(v74);
  sub_100182728(v76, v75, v35, v36);
  swift_release(v38);
  swift_release(v40);
  v44 = enum case for Font.Design.rounded(_:);
  v45 = type metadata accessor for Font.Design(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 104))(v81, v44, v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
  v93 = v42;
  v94 = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v49 = v80;
  v50 = v83;
  v51 = v91;
  View.fontDesign(_:)(v47, v83, OpaqueTypeConformance2);
  sub_10001BE90(v47, &qword_10081F2F8);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v51, v50);
  v52 = v92;
  v53 = v82;
  v54 = v84;
  (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v82, v49, v84);
  v55 = v78;
  v56 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
  v57 = v77;
  v58 = v90;
  v59 = v79;
  v56(v77, v90, v79);
  v60 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v61 = v49;
  v62 = v49;
  v63 = v54;
  v60(v61, v53, v54);
  v64 = v88;
  v56(v88, v57, v59);
  v65 = sub_100047110(&qword_100823880);
  v60(&v64[*(int *)(v65 + 48)], v62, v63);
  v66 = *(void (**)(char *, uint64_t))(v92 + 8);
  v66(v53, v63);
  v67 = *(void (**)(char *, uint64_t))(v55 + 8);
  v67(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v89, v87);
  v66(v62, v63);
  return ((uint64_t (*)(char *, uint64_t))v67)(v57, v59);
}

double sub_100180DE8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = type metadata accessor for SleepingSampleDataType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = SleepingSampleViewModel.dataType.getter(v6);
  v10 = SleepingSampleDataType.preferredImage.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for SleepingSampleChartLollipopView(0) + 32)) == 1)
  {
    v11 = LocalizedStringKey.init(stringLiteral:)(0x654220746867694ELL, 0xEC00000065726F66);
    v26 = Text.init(_:tableName:bundle:comment:)(v11);
    v27 = v12;
    v28 = v13 & 1;
    v29 = v14;
    v30 = 0;
  }
  else
  {
    v15 = LocalizedStringKey.init(stringLiteral:)(0x664120746867694ELL, 0xEB00000000726574);
    v26 = Text.init(_:tableName:bundle:comment:)(v15);
    v27 = v17;
    v28 = v16 & 1;
    v29 = v18;
    v30 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v26, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  v23 = v35;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v22;
  *(_BYTE *)(a2 + 40) = v23;
  swift_retain(v10);
  sub_100116B48(v19, v20, v21, v22);
  sub_100116B88(v19, v20, v21, v22);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

double sub_100180FE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  Swift::String_optional v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __n128 v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  double result;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String_optional v53;

  v6 = type metadata accessor for Text.Scale(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SleepingSampleDataType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1);
  v51 = Text.init(_:)(v14);
  v52 = v16;
  v18 = v17;
  v50 = v19;
  v20 = SleepingSampleViewModel.dataType.getter(v51);
  v21 = (void *)SleepingSampleViewModel.preferredAggregateValueUnit.getter(v20);
  v22 = SleepingSampleDataType.localizedUnitString(for:)((HKUnit)v21);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!v22.value._object)
    goto LABEL_5;
  v23 = type metadata accessor for SleepingSampleChartLollipopView(0);
  if ((sub_1004BFEBC(a2 + *(int *)(v23 + 24)) & 1) == 0)
  {
    swift_bridgeObjectRelease(v22.value._object);
LABEL_5:
    v33 = 0;
    v35 = 0;
    v39 = 0;
    v37 = 0;
    goto LABEL_6;
  }
  v53 = v22;
  v24 = sub_100038CA0();
  v25 = Text.init<A>(_:)(&v53, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v46 = v28;
  v31 = v30 & 1;
  v32 = v47;
  static Text.Scale.secondary.getter();
  v33 = Text.textScale(_:isEnabled:)(v32, 1, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_1000E4458(v25, v27, v31);
  v40 = swift_bridgeObjectRelease(v46);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v32, v49, v40);
LABEL_6:
  v41 = v50;
  v42 = v50 & 1;
  v44 = v51;
  v43 = v52;
  *(_QWORD *)a3 = v51;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v41 & 1;
  *(_QWORD *)(a3 + 24) = v43;
  *(_QWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 40) = v35;
  *(_QWORD *)(a3 + 48) = v39;
  *(_QWORD *)(a3 + 56) = v37;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  sub_1000E439C(v44, v18, v41 & 1);
  swift_bridgeObjectRetain(v43);
  sub_100182758(v33, v35, v39, v37);
  sub_100182728(v33, v35, v39, v37);
  sub_1000E4458(v44, v18, v42);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v43).n128_u64[0];
  return result;
}

double sub_10018127C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  double result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepingSampleChartLollipopView(0) + 36));
  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  swift_retain(*v1);
  swift_retain(v3);
  v5 = sub_100047110(&qword_100820FF8);
  Binding.wrappedValue.getter(v5);
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v7 = (v11 & 1) == 0;
  Binding.wrappedValue.setter(&v7, v5);
  swift_release(v3);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100181338(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  if (qword_10081D6F0 != -1)
    a1 = swift_once(&qword_10081D6F0, sub_1001BE6AC);
  v1 = qword_10086A078;
  result = static VerticalAlignment.bottom.getter(a1);
  *(_QWORD *)&xmmword_100869F38 = v1;
  *((_QWORD *)&xmmword_100869F38 + 1) = result;
  return result;
}

_QWORD *sub_100181390(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for SleepingSampleViewModel(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DayIndex(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100047110(&qword_1008236A8);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
      v20 = *(int *)(v15 + 20);
      v21 = &v13[v20];
      v22 = &v14[v20];
      v23 = type metadata accessor for BaselineRelativeValue(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      v24 = *(int *)(v15 + 24);
      v25 = *(_QWORD *)&v14[v24];
      *(_QWORD *)&v13[v24] = v25;
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v16 + 56);
      v27 = swift_retain(v25);
      v26(v13, 0, 1, v15, v27);
    }
    v28 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v32;
    v29[16] = v30[16];
    v33 = a3[10];
    v34 = *(void **)((char *)a2 + v33);
    *(_QWORD *)((char *)a1 + v33) = v34;
    swift_retain(v31);
    swift_retain(v32);
    v35 = v34;
  }
  return a1;
}

void sub_100181564(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for BaselineRelativeValue(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    swift_release(*(_QWORD *)(v7 + *(int *)(v8 + 24)));
  }
  v12 = (_QWORD *)(a1 + a2[9]);
  swift_release(*v12);
  swift_release(v12[1]);

}

uint64_t sub_100181670(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;

  v6 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100047110(&qword_1008236A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
    v18 = *(int *)(v14 + 20);
    v19 = &v12[v18];
    v20 = &v13[v18];
    v21 = type metadata accessor for BaselineRelativeValue(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = *(int *)(v14 + 24);
    v23 = *(_QWORD *)&v13[v22];
    *(_QWORD *)&v12[v22] = v23;
    v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56);
    v25 = swift_retain(v23);
    v24(v12, 0, 1, v14, v25);
  }
  v26 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  v30 = v28[1];
  *(_QWORD *)v27 = *v28;
  *(_QWORD *)(v27 + 8) = v30;
  *(_BYTE *)(v27 + 16) = *((_BYTE *)v28 + 16);
  v31 = a3[10];
  v32 = *(void **)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v32;
  swift_retain(v29);
  swift_retain(v30);
  v33 = v32;
  return a1;
}

uint64_t sub_100181818(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v41 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v12, v13, v41);
      v42 = *(int *)(v14 + 20);
      v43 = &v12[v42];
      v44 = &v13[v42];
      v45 = type metadata accessor for BaselineRelativeValue(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
      v46 = *(int *)(v14 + 24);
      v47 = *(_QWORD *)&v13[v46];
      v48 = *(_QWORD *)&v12[v46];
      *(_QWORD *)&v12[v46] = v47;
      swift_retain(v47);
      swift_release(v48);
      goto LABEL_7;
    }
    sub_100011F54((uint64_t)v12, type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v28 = sub_100047110(&qword_1008236A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v12, v13, v19);
  v20 = *(int *)(v14 + 20);
  v21 = &v12[v20];
  v22 = &v13[v20];
  v23 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = *(int *)(v14 + 24);
  v25 = *(_QWORD *)&v13[v24];
  *(_QWORD *)&v12[v24] = v25;
  v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56);
  v27 = swift_retain(v25);
  v26(v12, 0, 1, v14, v27);
LABEL_7:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)(a1 + v29);
  v33 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)(a1 + v29) = v33;
  swift_retain(v33);
  swift_release(v32);
  v34 = *(_QWORD *)(v31 + 8);
  v35 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v30 + 8) = v34;
  swift_retain(v34);
  swift_release(v35);
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v36 = a3[10];
  v37 = *(void **)(a2 + v36);
  v38 = *(void **)(a1 + v36);
  *(_QWORD *)(a1 + v36) = v37;
  v39 = v37;

  return a1;
}

uint64_t sub_100181A84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100047110(&qword_1008236A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v12, v13, v17);
    v18 = *(int *)(v14 + 20);
    v19 = &v12[v18];
    v20 = &v13[v18];
    v21 = type metadata accessor for BaselineRelativeValue(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_QWORD *)&v12[*(int *)(v14 + 24)] = *(_QWORD *)&v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v22 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100181C18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v33 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v12, v13, v33);
      v34 = *(int *)(v14 + 20);
      v35 = &v12[v34];
      v36 = &v13[v34];
      v37 = type metadata accessor for BaselineRelativeValue(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
      v38 = *(int *)(v14 + 24);
      v39 = *(_QWORD *)&v12[v38];
      *(_QWORD *)&v12[v38] = *(_QWORD *)&v13[v38];
      swift_release(v39);
      goto LABEL_7;
    }
    sub_100011F54((uint64_t)v12, type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = sub_100047110(&qword_1008236A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v12, v13, v19);
  v20 = *(int *)(v14 + 20);
  v21 = &v12[v20];
  v22 = &v13[v20];
  v23 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  *(_QWORD *)&v12[*(int *)(v14 + 24)] = *(_QWORD *)&v13[*(int *)(v14 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v25 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_release(v28);
  v29 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_release(v29);
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  v30 = a3[10];
  v31 = *(void **)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);

  return a1;
}

uint64_t sub_100181E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100181E68);
}

uint64_t sub_100181E68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = type metadata accessor for SleepingSampleViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for DayIndex(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100047110(&qword_1008236A8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_100181F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100181F48);
}

uint64_t sub_100181F48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for SleepingSampleViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for DayIndex(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100047110(&qword_1008236A8);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SleepingSampleChartLollipopView(uint64_t a1)
{
  uint64_t result;

  result = qword_100823708;
  if (!qword_100823708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SleepingSampleChartLollipopView);
  return result;
}

void sub_100182054(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for SleepingSampleViewModel(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_100628A00;
    v4 = type metadata accessor for DayIndex(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10018211C(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_100628A18;
        v8[5] = &unk_100628A30;
        v8[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_10018211C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100823718)
  {
    v2 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100823718);
  }
}

uint64_t sub_100182170(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD73C, 1);
}

uint64_t sub_100182180()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = (int *)type metadata accessor for SleepingSampleChartLollipopView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for SleepingSampleViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = v0 + v4 + v1[6];
  v9 = type metadata accessor for DayIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + v4 + v1[7];
  v11 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    v13 = v10 + *(int *)(v11 + 20);
    v14 = type metadata accessor for BaselineRelativeValue(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_release(*(_QWORD *)(v10 + *(int *)(v11 + 24)));
  }
  v15 = (_QWORD *)(v6 + v1[9]);
  swift_release(*v15);
  swift_release(v15[1]);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001822D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleChartLollipopView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_100182314()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepingSampleChartLollipopView(0) - 8) + 80);
  return sub_10018127C(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_100182340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008237A8;
  if (!qword_1008237A8)
  {
    v1 = sub_100007050(&qword_100823790);
    sub_1001823C4();
    sub_100028384(&qword_100823800, &qword_100821238, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008237A8);
  }
  return result;
}

unint64_t sub_1001823C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008237B0;
  if (!qword_1008237B0)
  {
    v1 = sub_100007050(&qword_100823788);
    sub_100182448();
    sub_100028384(&qword_1008237F0, &qword_1008237F8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008237B0);
  }
  return result;
}

unint64_t sub_100182448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008237B8;
  if (!qword_1008237B8)
  {
    v1 = sub_100007050(&qword_100823780);
    sub_1000F4518(&qword_1008237C0, &qword_100823778, (void (*)(void))sub_1001824E4);
    sub_100028384(&qword_1008237E0, &qword_1008237E8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008237B8);
  }
  return result;
}

uint64_t sub_1001824E4()
{
  return sub_1000F4518(&qword_1008237C8, &qword_100823770, (void (*)(void))sub_100182500);
}

unint64_t sub_100182500()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008237D0;
  if (!qword_1008237D0)
  {
    v1 = sub_100007050(&qword_100823768);
    sub_100028384(&qword_1008237D8, &qword_100823760, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008237D0);
  }
  return result;
}

unint64_t sub_10018258C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823828;
  if (!qword_100823828)
  {
    v1 = sub_100007050(&qword_100823820);
    sub_100182610();
    sub_100028384(&qword_100823850, &qword_100823858, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823828);
  }
  return result;
}

unint64_t sub_100182610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823830;
  if (!qword_100823830)
  {
    v1 = sub_100007050(&qword_100823838);
    sub_100028384(&qword_100823840, &qword_100823848, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100823830);
  }
  return result;
}

unint64_t sub_10018268C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823868;
  if (!qword_100823868)
  {
    v1 = sub_100007050(&qword_100823860);
    sub_100028384(&qword_100823870, &qword_100823878, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100028384(&qword_100823850, &qword_100823858, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823868);
  }
  return result;
}

double sub_100182728(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000E4458(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

double sub_100182758(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_1000E439C(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100182788()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_100823790);
  v1[1] = sub_100182340();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
}

ValueMetadata *type metadata accessor for CardBackground()
{
  return &type metadata for CardBackground;
}

uint64_t sub_1001827E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD780, 1);
}

double sub_1001827F4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100822188);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100620BC0;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  v8 = Color.init(_:red:green:blue:opacity:)(v5, 0.145098039, 0.145098039, 0.145098039, 1.0);
  *(_QWORD *)(v7 + 32) = Gradient.Stop.init(color:location:)(v8, 0.0);
  *(_QWORD *)(v7 + 40) = v9;
  v10 = sub_100032490();
  v11 = Color.init(uiColor:)(v10);
  *(_QWORD *)(v7 + 48) = Gradient.Stop.init(color:location:)(v11, 0.5);
  *(_QWORD *)(v7 + 56) = v12;
  v13 = Gradient.init(stops:)(v7);
  v14 = static UnitPoint.topTrailing.getter();
  v16 = v15;
  v17 = static UnitPoint.bottomLeading.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v22, v13, v14, v16, v17, v18);
  result = *(double *)v22;
  v20 = v22[1];
  *(_OWORD *)a1 = v22[0];
  *(_OWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 32) = v23;
  return result;
}

unint64_t sub_10018294C()
{
  unint64_t result;

  result = qword_100823888;
  if (!qword_100823888)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_100823888);
  }
  return result;
}

void sub_100182990(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F660;
}

uint64_t sub_1001829A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  uint64_t result;
  uint64_t v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CHWorkoutDetailHeartRateTableViewCell *v74;

  v73 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - v8;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v49 = a1;
    else
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)a1, v50, v51, v52, v53, v54, v55, v56);
    if (!((unint64_t)a2 >> 62))
    {
LABEL_3:
      if (v10 == *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_4;
LABEL_31:
      v41 = 0;
      return v41 & 1;
    }
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
  }
  if (a2 < 0)
    v57 = a2;
  else
    v57 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v58 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)a2, v59, v60, v61, v62, v63, v64, v65);
  if (v10 != v58)
    goto LABEL_31;
LABEL_4:
  v11 = &_swiftEmptyArrayStorage;
  if (!v10)
  {
    v14 = &_swiftEmptyArrayStorage;
LABEL_22:
    v33 = sub_10014889C((uint64_t)v11);
    swift_bridgeObjectRelease(v11, v34, v35, v36, v37, v38, v39, v40);
    swift_bridgeObjectRetain(v33);
    v41 = sub_100182ED8(v14, v33);
    swift_bridgeObjectRelease(v14, v42, v43, v44, v45, v46, v47, v48);
    swift_bridgeObjectRelease_n(v33, 2);
    return v41 & 1;
  }
  v71 = a1;
  v74 = &_swiftEmptyArrayStorage;
  result = sub_1001216CC(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v67 = v10 & ~(v10 >> 63);
    v68 = v6;
    v72 = v10;
    v13 = 0;
    v14 = v74;
    v15 = v71;
    v69 = v71 & 0xC000000000000001;
    v70 = a2;
    do
    {
      if (v69)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v15);
      else
        v16 = *(id *)(v15 + 8 * v13 + 32);
      v17 = v16;
      v18 = objc_msgSend(v16, "UUID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      v74 = v14;
      v20 = *(_QWORD *)v14->cellPadding;
      v19 = *(_QWORD *)v14->cellInset;
      if (v20 >= v19 >> 1)
      {
        sub_1001216CC(v19 > 1, v20 + 1, 1);
        v14 = v74;
      }
      ++v13;
      *(_QWORD *)v14->cellPadding = v20 + 1;
      v21 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v22 = *(_QWORD *)(v4 + 72);
      v23 = (char *)v14 + v21 + v22 * v20;
      v24 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v24(v23, v9, v73);
      v15 = v71;
    }
    while (v72 != v13);
    v74 = &_swiftEmptyArrayStorage;
    sub_1001216CC(0, v67, 0);
    v25 = 0;
    v11 = v74;
    v26 = v70;
    v71 = v70 & 0xC000000000000001;
    v27 = v68;
    do
    {
      if (v71)
        v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v26);
      else
        v28 = *(id *)(v26 + 8 * v25 + 32);
      v29 = v28;
      v30 = objc_msgSend(v28, "UUID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v74 = v11;
      v32 = *(_QWORD *)v11->cellPadding;
      v31 = *(_QWORD *)v11->cellInset;
      if (v32 >= v31 >> 1)
      {
        sub_1001216CC(v31 > 1, v32 + 1, 1);
        v11 = v74;
      }
      ++v25;
      *(_QWORD *)v11->cellPadding = v32 + 1;
      v24((char *)v11 + v21 + v22 * v32, v27, v73);
      v26 = v70;
    }
    while (v72 != v25);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

void sub_100182D20(void *a1)
{
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  NSString v4;

  v2 = type metadata accessor for ActivityTileSectionHeader();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v2);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "registerClass:forHeaderFooterViewReuseIdentifier:", ObjCClassFromMetadata, v4);

  __asm { BR              X8; loc_100182E58 }
}

uint64_t sub_100182ED8(CHWorkoutDetailHeartRateTableViewCell *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - v10;
  v12 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)a1->cellPadding;
  v44 = v2;
  v45 = a1;
  if (v42)
  {
    v15 = (char *)a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v16 = *(_QWORD *)(v6 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v48 = a2 + 56;
    v18 = swift_bridgeObjectRetain(a1);
    v19 = 0;
    v40 = v15;
    v41 = v14;
    v49 = v6;
    v47 = v17;
    while (1)
    {
      v46 = v19;
      ((void (*)(char *, char *, uint64_t, __n128))v17)(v14, &v15[v16 * v19], v5, v18);
      v20 = 1;
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v43)(v14, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v14, v5);
      if (!*(_QWORD *)(a2 + 16)
        || (v28 = *(_QWORD *)(a2 + 40),
            v29 = sub_1001831D8((unint64_t *)&qword_100828330, (uint64_t)&protocol conformance descriptor for UUID), v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v5, v29), v31 = -1 << *(_BYTE *)(a2 + 32), v32 = v30 & ~v31, ((*(_QWORD *)(v48 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0))
      {
        v37 = *(void (**)(char *, uint64_t))(v49 + 8);
LABEL_15:
        v37(v11, v5);
        v20 = 0;
        break;
      }
      v33 = a2;
      ++v46;
      v34 = ~v31;
      while (1)
      {
        v47(v8, *(_QWORD *)(v33 + 48) + v32 * v16, v5);
        v35 = sub_1001831D8((unint64_t *)&unk_10082E6B0, (uint64_t)&protocol conformance descriptor for UUID);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v11, v5, v35);
        v37 = *(void (**)(char *, uint64_t))(v49 + 8);
        v37(v8, v5);
        if ((v36 & 1) != 0)
          break;
        v32 = (v32 + 1) & v34;
        if (((*(_QWORD *)(v48 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
          goto LABEL_15;
      }
      v37(v11, v5);
      v17 = v47;
      v19 = v46;
      a2 = v33;
      v15 = v40;
      v14 = v41;
      v6 = v49;
      if (v46 == v42)
        goto LABEL_13;
    }
  }
  else
  {
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v18 = swift_bridgeObjectRetain(a1);
LABEL_13:
    v20 = 1;
    v43(v14, 1, 1, v5, v18);
  }
  swift_bridgeObjectRelease(v45, v21, v22, v23, v24, v25, v26, v27);
  return v20;
}

uint64_t sub_1001831D8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HistoryDayViewSection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryDayViewSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1001832F4 + 4 * byte_100628B50[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100183328 + 4 * asc_100628B4B[v4]))();
}

uint64_t sub_100183328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100183330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100183338);
  return result;
}

uint64_t sub_100183344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018334CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100183350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100183358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HistoryDayViewSection()
{
  return &type metadata for HistoryDayViewSection;
}

unint64_t sub_100183378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008238F0;
  if (!qword_1008238F0)
  {
    v1 = sub_100007050(&qword_1008238F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008238F0);
  }
  return result;
}

unint64_t sub_1001833C8()
{
  unint64_t result;

  result = qword_100823900;
  if (!qword_100823900)
  {
    result = swift_getWitnessTable(&unk_100628C20, &type metadata for HistoryDayViewSection);
    atomic_store(result, (unint64_t *)&qword_100823900);
  }
  return result;
}

Swift::Int sub_100183460()
{
  uint64_t v0;
  Swift::UInt64 v1;
  _OWORD v3[4];
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  Hasher.init()(v3);
  Hasher._combine(_:)(*(_QWORD *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_sessionCount));
  if ((*(_QWORD *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration);
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  v7 = v3[2];
  v8 = v3[3];
  v9 = v4;
  v5 = v3[0];
  v6 = v3[1];
  return Hasher.finalize()();
}

id sub_100183510()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MindfulnessSessionsStatistics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MindfulnessSessionsStatistics()
{
  return objc_opt_self(CHMindfulnessSessionsStatistics);
}

Swift::Int sub_100183560@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result;

  result = sub_100183460();
  *a1 = result;
  return result;
}

void *sub_1001836F0()
{
  return &protocol witness table for Int;
}

uint64_t destroy for FriendSuggestionSectionView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[2]);
}

uint64_t *_s10FitnessApp27FriendSuggestionSectionViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for FriendSuggestionSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t *assignWithTake for FriendSuggestionSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendSuggestionSectionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendSuggestionSectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendSuggestionSectionView()
{
  return &type metadata for FriendSuggestionSectionView;
}

uint64_t sub_1001838A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD850, 1);
}

void sub_1001838B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double (*v30)(char *, uint64_t);
  char *v31;
  __n128 v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  __n128 v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, __n128);
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t KeyPath;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char v100[16];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v85 = a3;
  v84 = a2;
  v83 = a1;
  v79 = a4;
  v4 = type metadata accessor for ScrollIndicatorVisibility(0);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  __chkstk_darwin(v4);
  v80 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100823948);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v81 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100047110(&qword_100823950);
  v95 = *(_QWORD *)(v97 - 8);
  v8 = __chkstk_darwin(v97);
  v96 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v90 = (char *)&v78 - v11;
  __chkstk_darwin(v10);
  v99 = (char *)&v78 - v12;
  v13 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v13);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Font.TextStyle(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x800000010068C960);
  v21 = Text.init(_:tableName:bundle:comment:)(v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Font.TextStyle.footnote(_:), v16);
  v28 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v15, 1, 1, v28);
  v29 = static Font.system(_:design:weight:)(v19, v15, 0, 1);
  sub_100184224((uint64_t)v15);
  v30 = *(double (**)(char *, uint64_t))(v17 + 8);
  v31 = v80;
  v32.n128_f64[0] = v30(v19, v16);
  v89 = Text.font(_:)(v29, v21, v23, v27, v25, v32);
  v88 = v33;
  v35 = v34;
  v98 = v36;
  v37 = v29;
  v38 = v81;
  swift_release(v37);
  sub_1000E4458(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  v82 = static Edge.Set.bottom.getter(v39);
  v40.n128_f64[0] = EdgeInsets.init(_all:)(10.0);
  v41 = v40.n128_u64[0];
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v87 = static Color.secondary.getter(v40);
  KeyPath = swift_getKeyPath(&unk_100628D40);
  v49 = static Axis.Set.horizontal.getter(v48);
  v101 = v83;
  v102 = v84;
  v103 = v85;
  v50 = sub_100047110(&qword_100823958);
  v51 = sub_100028384(&qword_100823960, &qword_100823958, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v52 = ScrollView.init(_:showsIndicators:content:)(v49, 1, sub_10018426C, v100, v50, v51);
  v53 = static ScrollIndicatorVisibility.hidden.getter(v52);
  v54 = static Axis.Set.vertical.getter(v53);
  v56 = static Axis.Set.horizontal.getter(v55);
  v57 = Axis.Set.init(rawValue:)(0);
  v58 = Axis.Set.init(rawValue:)(v57);
  if (Axis.Set.init(rawValue:)(v58 & v54) != v54)
    v57 = Axis.Set.init(rawValue:)(v57 | v54);
  v59 = Axis.Set.init(rawValue:)(v57);
  if (Axis.Set.init(rawValue:)(v59 & v56) != v56)
    v57 = Axis.Set.init(rawValue:)(v57 | v56);
  v60 = v35 & 1;
  v61 = sub_100028384(&qword_100823968, &qword_100823948, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v62 = v90;
  v63 = v92;
  View.scrollIndicators(_:axes:)(v31, v57, v92, v61);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v31, v94);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v38, v63);
  v64 = v95;
  v65 = v99;
  v66 = v97;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v99, v62, v97);
  v67 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v68 = v96;
  v67(v96, v65, v66);
  v69 = v89;
  v70 = v79;
  v71 = v88;
  *v79 = v89;
  v70[1] = v71;
  *((_BYTE *)v70 + 16) = v60;
  v70[3] = v98;
  *((_BYTE *)v70 + 32) = v82;
  v70[5] = v41;
  v70[6] = v43;
  v70[7] = v45;
  v70[8] = v47;
  *((_BYTE *)v70 + 72) = 0;
  v72 = KeyPath;
  v73 = v87;
  v70[10] = KeyPath;
  v70[11] = v73;
  v74 = sub_100047110(&qword_100823970);
  v67((char *)v70 + *(int *)(v74 + 48), v68, v66);
  LOBYTE(v67) = v60;
  sub_1000E439C(v69, v71, v60);
  v75 = *(void (**)(char *, uint64_t, __n128))(v64 + 8);
  v76 = v98;
  swift_bridgeObjectRetain(v98);
  swift_retain(v72);
  v77 = swift_retain(v73);
  v75(v99, v66, v77);
  ((void (*)(char *, uint64_t))v75)(v68, v66);
  sub_1000E4458(v69, v71, (char)v67);
  swift_release(v73);
  swift_release(v72);
  swift_bridgeObjectRelease(v76);
}

uint64_t sub_100183E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = sub_100047110(&qword_100823978);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  *(_QWORD *)a4 = static VerticalAlignment.center.getter(v13);
  *(_QWORD *)(a4 + 8) = 0x4024000000000000;
  *(_BYTE *)(a4 + 16) = 0;
  if (a1)
  {
    v16 = a4 + *(int *)(sub_100047110(&qword_100823980) + 44);
    KeyPath = swift_getKeyPath(&unk_100628D70);
    v18 = swift_getKeyPath(&unk_100628D98);
    swift_retain(a1);
    static Published.subscript.getter(&v31, v19, KeyPath, v18);
    swift_release(a1);
    swift_release(KeyPath);
    swift_release(v18);
    v20 = swift_getKeyPath(&unk_100628DC0);
    v21 = (_QWORD *)swift_allocObject(&unk_10078A720, 40, 7);
    v21[2] = a1;
    v21[3] = a2;
    v21[4] = a3;
    swift_retain(a1);
    swift_retain(a3);
    v22 = sub_100047110(&qword_100823988);
    v23 = sub_100028384(&qword_100823990, &qword_100823988, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = sub_1001842B8();
    v25 = sub_1001842FC();
    ForEach<>.init(_:id:content:)(&v31, v20, sub_1001842AC, v21, v22, &type metadata for FriendSuggestionItemView, v23, v24, v25);
    v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v26(v15, v12, v8);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v16, v15, v8);
  }
  else
  {
    v28 = type metadata accessor for ReachableContactsDataSource(0);
    v29 = sub_1000083D8(&qword_10081EDD0, type metadata accessor for ReachableContactsDataSource, (uint64_t)&unk_1006491AC);
    result = EnvironmentObject.error()(0, a2, v28, v29);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001840B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v11 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  swift_retain(a2);
  v12 = v5;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13 = EnvironmentObject.init()(v10, v11);
  v15 = v14;
  v16 = type metadata accessor for ActivitySharingFriendDetailAlertCoordinator(0);
  v17 = sub_1000083D8((unint64_t *)&qword_10082EF70, type metadata accessor for ActivitySharingFriendDetailAlertCoordinator, (uint64_t)&unk_10063E438);
  result = EnvironmentObject.init()(v16, v17);
  *a3 = v13;
  a3[1] = v15;
  a3[2] = result;
  a3[3] = v19;
  a3[4] = a2;
  a3[5] = (uint64_t)v12;
  a3[6] = v6;
  a3[7] = v7;
  a3[8] = v20;
  a3[9] = v8;
  a3[10] = v9;
  return result;
}

void sub_1001841C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v7 = sub_100047110(&qword_100823940);
  sub_1001838B4(v4, v5, v6, (uint64_t *)(a2 + *(int *)(v7 + 44)));
}

uint64_t sub_100184224(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081F2F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018426C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100183E78(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100184280()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001842AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1001840B8(a1, *(_QWORD *)(v2 + 32), a2);
}

unint64_t sub_1001842B8()
{
  unint64_t result;

  result = qword_100823998;
  if (!qword_100823998)
  {
    result = swift_getWitnessTable(&unk_10062657C, &type metadata for ReachableContact);
    atomic_store(result, (unint64_t *)&qword_100823998);
  }
  return result;
}

unint64_t sub_1001842FC()
{
  unint64_t result;

  result = qword_1008239A0;
  if (!qword_1008239A0)
  {
    result = swift_getWitnessTable(&unk_100645F1C, &type metadata for FriendSuggestionItemView);
    atomic_store(result, (unint64_t *)&qword_1008239A0);
  }
  return result;
}

uint64_t sub_100184340()
{
  return sub_100028384(&qword_1008239A8, &qword_1008239B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

BOOL sub_10018436C(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_100184388(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_10018439C(double *a1, double *a2)
{
  return *a1 <= *a2;
}

BOOL sub_1001843B0(double *a1, double *a2)
{
  return *a2 <= *a1;
}

BOOL sub_1001843C4(double *a1, double *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1001843DC()
{
  unint64_t result;

  result = qword_1008239B8;
  if (!qword_1008239B8)
  {
    result = swift_getWitnessTable(&unk_100628E48, &type metadata for Aggregate);
    atomic_store(result, (unint64_t *)&qword_1008239B8);
  }
  return result;
}

double sub_100184420(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  double v3;
  const double *v5;
  uint64_t v6;
  const double *v7;
  unint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  double *v17;
  double v18;
  float64x2x2_t v19;
  float64x2x2_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0.0 / 0.0;
  if (v1 < 4)
  {
    v2 = 0;
    v3 = 0.0;
LABEL_8:
    v8 = v1 - v2;
    v9 = (double *)(a1 + 16 * v2 + 40);
    do
    {
      v3 = v3 + *(v9 - 1) * *v9;
      v9 += 2;
      --v8;
    }
    while (v8);
    goto LABEL_10;
  }
  v2 = v1 & 0x7FFFFFFFFFFFFFFCLL;
  v5 = (const double *)(a1 + 64);
  v3 = 0.0;
  v6 = v1 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v7 = v5 - 4;
    v19 = vld2q_f64(v7);
    v20 = vld2q_f64(v5);
    v19.val[0] = vmulq_f64(v19.val[0], v19.val[1]);
    v20.val[0] = vmulq_f64(v20.val[0], v20.val[1]);
    v3 = v3 + v19.val[0].f64[0] + v19.val[0].f64[1] + v20.val[0].f64[0] + v20.val[0].f64[1];
    v5 += 8;
    v6 -= 4;
  }
  while (v6);
  if (v1 != v2)
    goto LABEL_8;
LABEL_10:
  if (v1 >= 2)
  {
    v10 = v1 & 0x7FFFFFFFFFFFFFFELL;
    v12 = (double *)(a1 + 56);
    v11 = 0.0;
    v13 = v1 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v14 = *(v12 - 2);
      v15 = *v12;
      v12 += 4;
      v11 = v11 + v14 + v15;
      v13 -= 2;
    }
    while (v13);
    if (v1 == v10)
      return v3 / v11;
  }
  else
  {
    v10 = 0;
    v11 = 0.0;
  }
  v16 = v1 - v10;
  v17 = (double *)(a1 + 16 * v10 + 40);
  do
  {
    v18 = *v17;
    v17 += 2;
    v11 = v11 + v18;
    --v16;
  }
  while (v16);
  return v3 / v11;
}

void sub_100184528(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  id v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;

  v9 = a4 & 1;
  v10 = sub_100047110(&qword_1008239C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString(0);
  v34 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - v17;
  v36 = 0;
  v19 = sub_100047110(&qword_100823078);
  State.init(wrappedValue:)(&v37, &v36, v19);
  *(_OWORD *)(a5 + 48) = v37;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = v9;
  v21 = type metadata accessor for Trainer(0, v20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 1, 1, v21);
  v22 = a1;
  v33 = a2;
  v23 = a3;
  v24 = sub_1004C3E8C((uint64_t)v22, (uint64_t)v12);
  AttributedString.init(_:)(v24);
  KeyPath = swift_getKeyPath(&unk_100628EA0);
  v25 = swift_getKeyPath(&unk_100628ED0);
  if (qword_10081DE88 != -1)
    swift_once(&qword_10081DE88, sub_1004C23E8);
  v26 = qword_100837068;
  *(_QWORD *)&v37 = qword_100837068;
  v27 = sub_1000EA1DC();
  swift_retain(v26);
  AttributedString.subscript.setter(&v37, v25, v27);
  sub_10001BE90((uint64_t)v12, &qword_1008239C0);
  v28 = (_QWORD *)(a5 + *(int *)(type metadata accessor for MindfulnessItemView(0) + 40));
  v29 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v15, v18, v13);
  State.init(wrappedValue:)(v28, v15, v13);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v13);
  v30 = sub_1004C4BA0((uint64_t)v22);
  if (!v31)
  {
    v30 = 0x656D2E656C707061;
    v31 = 0xEE00657461746964;
  }
  v36 = Image.init(systemName:)(v30, v31);
  State.init(wrappedValue:)(&v37, &v36, &type metadata for Image);

  v32 = v37;
  *(_OWORD *)(a5 + 32) = v32;
}

uint64_t sub_1001847C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSDate v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _BYTE *, uint64_t);
  _BYTE *v33;
  uint64_t *v34;
  _BYTE *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v53[4];
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a1;
  v67 = type metadata accessor for TaskPriority(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = &v53[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for MindfulnessItemView(0);
  v60 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v61 = v4;
  v62 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100047110(&qword_100823A80);
  __chkstk_darwin(v5);
  v58 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (int *)sub_100047110(&qword_100823A88);
  __chkstk_darwin(v7);
  v9 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for AttributedString(0);
  v56 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = &v53[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v53[-v18];
  v57 = sub_100047110(&qword_100823A90);
  __chkstk_darwin(v57);
  v59 = &v53[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v54 = *(unsigned __int8 *)(v1 + 24);
  v21 = sub_100047110(&qword_1008239C8);
  State.wrappedValue.getter(v19, v21);
  v63 = v1;
  v55 = v17;
  sub_1004C2A34((uint64_t)v17);
  v22 = (void *)objc_opt_self(CHListAndDetailViewDateFormatter);
  MindfulnessSessionViewModel.endDate.getter(v22);
  v23.super.isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10081DEA8 != -1)
    swift_once(&qword_10081DEA8, sub_1004C27F0);
  v24 = objc_msgSend(v22, "formattedListStringForDate:font:", v23.super.isa, qword_100837088);

  v25 = objc_msgSend(v24, "string");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  *v9 = swift_getKeyPath(&unk_100628FD0);
  v29 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(v9, v29, 0);
  v30 = (char *)v9 + v7[15];
  *(_OWORD *)v30 = xmmword_100628E90;
  *((_QWORD *)v30 + 2) = 0;
  *((_QWORD *)v30 + 3) = 0;
  *((_BYTE *)v9 + v7[9]) = v54;
  v31 = v56;
  v32 = *(void (**)(char *, _BYTE *, uint64_t))(v56 + 16);
  v32((char *)v9 + v7[10], v19, v14);
  v33 = v55;
  v32((char *)v9 + v7[11], v55, v14);
  v34 = (_QWORD *)((char *)v9 + v7[12]);
  *v34 = v26;
  v34[1] = v28;
  *(_QWORD *)((char *)v9 + v7[13]) = 0;
  v35 = v58;
  v36 = v63;
  sub_100184CBC(v63, (uint64_t)v58);
  v37 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
  v37(v33, v14);
  v37(v19, v14);
  sub_100045AD4((uint64_t)v35, (uint64_t)v9 + v7[14], &qword_100823A80);
  v38 = v59;
  v39 = sub_100045AD4((uint64_t)v9, (uint64_t)v59, &qword_100823A88);
  MindfulnessSessionViewModel.uuid.getter(v39);
  v40 = v62;
  sub_10004F8C8(v36, (uint64_t)v62, type metadata accessor for MindfulnessItemView);
  v41 = *(unsigned __int8 *)(v60 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = swift_allocObject(&unk_10078A880, v42 + v61, v41 | 7);
  v44 = sub_100186D18((uint64_t)v40, v43 + v42);
  v45 = v64;
  static TaskPriority.userInitiated.getter(v44);
  v46 = sub_100047110(&qword_100823AA8);
  v47 = v66;
  v48 = (char *)(v66 + *(int *)(v46 + 36));
  v49 = type metadata accessor for _TaskModifier(0);
  v50 = v65;
  v51 = v67;
  (*(void (**)(char *, _BYTE *, uint64_t))(v65 + 16))(&v48[*(int *)(v49 + 20)], v45, v67);
  *(_QWORD *)v48 = &unk_100823AA0;
  *((_QWORD *)v48 + 1) = v43;
  sub_100021CC0((uint64_t)v38, v47, &qword_100823A90);
  (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v45, v51);
  return sub_10001BE90((uint64_t)v38, &qword_100823A90);
}

uint64_t sub_100184CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;

  v52 = a2;
  v51 = sub_100047110(&qword_100823AC0);
  __chkstk_darwin(v51);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100047110(&qword_100821238);
  __chkstk_darwin(v49);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (_OWORD *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_100047110(&qword_100823AC8);
  v10 = __chkstk_darwin(v50);
  v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  v15 = *(void **)a1;
  v16 = *(id *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
  v17 = v15;
  v18 = sub_1005EEBB4((uint64_t)v17);

  if ((v18 & 1) != 0
    && (v54 = *(_OWORD *)(a1 + 48),
        v20 = sub_100047110(&qword_100823188),
        v19 = State.wrappedValue.getter(&v53, v20),
        (v21 = v53) != 0))
  {
    v22 = (char *)v9 + *(int *)(v7 + 20);
    v23 = enum case for RoundedCornerStyle.continuous(_:);
    v24 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
    __asm { FMOV            V0.2D, #4.0 }
    *v9 = _Q0;
    sub_10004F8C8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v30 = v50;
    *(_WORD *)&v6[*(int *)(v49 + 36)] = 256;
    sub_100021CC0((uint64_t)v6, (uint64_t)v12 + *(int *)(v30 + 36), &qword_100821238);
    *v12 = v21;
    swift_retain(v21);
    sub_10001BE90((uint64_t)v6, &qword_100821238);
    sub_100011F54((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_100045AD4((uint64_t)v12, (uint64_t)v14, &qword_100823AC8);
    sub_100021CC0((uint64_t)v14, (uint64_t)v4, &qword_100823AC8);
    swift_storeEnumTagMultiPayload(v4, v51, 0);
    v31 = sub_100047110(&qword_100823AD0);
    v32 = sub_100186FDC();
    v33 = sub_100028384(&qword_100823AE0, &qword_100823AD0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v4, v30, v31, v32, v33);
    swift_release(v21);
    return sub_10001BE90((uint64_t)v14, &qword_100823AC8);
  }
  else
  {
    v35 = static Alignment.center.getter(v19);
    v37 = v36;
    sub_10018581C(a1, (uint64_t)&v54);
    v38 = v55;
    v39 = v57;
    v40 = v58;
    v41 = v59;
    v42 = v56;
    v43 = v60;
    v44 = v54;
    *(_QWORD *)v4 = v35;
    *((_QWORD *)v4 + 1) = v37;
    *((_OWORD *)v4 + 1) = v44;
    *((_QWORD *)v4 + 4) = v38;
    *(_OWORD *)(v4 + 40) = v42;
    v4[56] = v39;
    *((_QWORD *)v4 + 8) = v40;
    v4[72] = v41;
    *((_OWORD *)v4 + 5) = v43;
    swift_storeEnumTagMultiPayload(v4, v51, 1);
    v45 = sub_100047110(&qword_100823AD0);
    v46 = sub_100186FDC();
    v47 = sub_100028384(&qword_100823AE0, &qword_100823AD0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    return _ConditionalContent<>.init(storage:)(v4, v50, v45, v46, v47);
  }
}

uint64_t sub_100185068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001850D4, v3, v4);
}

uint64_t sub_1001850D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_10018510C();
  sub_1001854B4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018510C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v32[16];
  void **aBlock;
  uint64_t v34;
  void (*v35)(uint64_t, void *, void *);
  void *v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for MindfulnessItemView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v8 = &v32[-v7];
  v9 = *v0;
  if (*(_BYTE *)(v1 + 24))
    v10 = 48.0;
  else
    v10 = 34.0;
  sub_10004F8C8(v1, (uint64_t)&v32[-v7], type metadata accessor for MindfulnessItemView);
  sub_10004F8C8((uint64_t)v8, (uint64_t)v6, type metadata accessor for MindfulnessItemView);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10078A920, v12 + v4, v11 | 7);
  v14 = sub_100186D18((uint64_t)v8, v13 + v12);
  v15 = (void *)MindfulnessSessionViewModel.sourceRevision.getter(v14);
  v16 = objc_msgSend(v15, "source");

  LODWORD(v15) = objc_msgSend(v16, "_hasFirstPartyBundleID");
  if ((_DWORD)v15)
  {
    v17 = sub_1004C4E3C(v9);
    sub_100139CE8();
    v18 = static NSObject.== infix(_:_:)(*v6, *v6);
    if ((v18 & 1) != 0)
    {
      if (v17)
      {
        __chkstk_darwin(v18);
        *(_QWORD *)&v32[-16] = v6;
        *(_QWORD *)&v32[-8] = v17;
        v19 = v17;
        v20 = static Animation.default.getter();
        withAnimation<A>(_:_:)(v20, sub_100186FC4, &v32[-32], (char *)&type metadata for () + 8);
        swift_release(v13);

        swift_release(v20);
      }
      else
      {
        swift_release(v13);
      }
    }
    else
    {
      swift_release(v13);

    }
  }
  else
  {
    v21 = swift_allocObject(&unk_10078A948, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_100186F40;
    *(_QWORD *)(v21 + 24) = v13;
    swift_retain(v13);
    v23 = MindfulnessSessionViewModel.sourceRevision.getter(v22);
    v24 = objc_msgSend((id)v23, "source");

    LOBYTE(v23) = objc_msgSend(v24, "_isAppleWatch");
    if ((v23 & 1) != 0)
    {
      v25 = sub_1004C4F08(v10);
      v26 = (void *)objc_opt_self(CHIconCache);
      v37 = sub_100186FBC;
      v38 = v21;
      aBlock = _NSConcreteStackBlock;
      v34 = 1107296256;
      v35 = sub_1001ABA78;
      v36 = &unk_10078A988;
      v27 = _Block_copy(&aBlock);
      v28 = v38;
      swift_retain(v21);
      objc_msgSend(v26, "fetchWatchIconWithParameters:completion:", v25, v27, swift_release(v28).n128_f64[0]);
    }
    else
    {
      v25 = sub_1004C5064(v10);
      v29 = (void *)objc_opt_self(CHIconCache);
      v37 = sub_100186FBC;
      v38 = v21;
      aBlock = _NSConcreteStackBlock;
      v34 = 1107296256;
      v35 = sub_1001ABA78;
      v36 = &unk_10078A960;
      v27 = _Block_copy(&aBlock);
      v30 = v38;
      swift_retain(v21);
      objc_msgSend(v29, "fetchPhoneIconWithParameters:completion:", v25, v27, swift_release(v30).n128_f64[0]);
    }
    swift_release(v21);
    _Block_release(v27);
    swift_release(v13);

  }
  return sub_100011F54((uint64_t)v6, type metadata accessor for MindfulnessItemView);
}

void sub_1001854B4()
{
  void **v0;
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];

  v1 = v0;
  v2 = type metadata accessor for MindfulnessItemView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of MindfulnessSessionViewModel.sessionType.getter(v5);
  if ((v8 & 1) != 0 || v7 != 3)
    goto LABEL_20;
  v9 = MindfulnessSessionViewModel.mindfulnessSessions.getter(3);
  v10 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v9))
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease(v10);
    goto LABEL_20;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_19;
LABEL_5:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v11 = *(id *)(v10 + 32);
  }
  v12 = v11;
  v13 = objc_msgSend(v11, "metadata", swift_bridgeObjectRelease(v10).n128_f64[0]);
  if (v13)
  {
    v14 = v13;
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(_HKPrivateMetadataKeyMindfulnessSessionTrainerID);
    v18 = v17;
    if (*(_QWORD *)(v15 + 16) && (v19 = sub_100438F74(v16, v17), (v20 & 1) != 0))
    {
      sub_10003E9BC(*(_QWORD *)(v15 + 56) + 32 * v19, (uint64_t)&v39);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v15);
      if (*((_QWORD *)&v40 + 1))
      {
        sub_100038FD4(&v39, v41);
        *(_QWORD *)&v39 = 0;
        *((_QWORD *)&v39 + 1) = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)(v41, &v39, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v21 = v39;
        v22 = *(void **)((char *)v1[2] + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
        sub_10004F8C8((uint64_t)v1, (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MindfulnessItemView);
        v23 = *(unsigned __int8 *)(v3 + 80);
        v24 = (v23 + 16) & ~v23;
        v25 = (char *)swift_allocObject(&unk_10078A8D0, v24 + v4, v23 | 7);
        sub_100186D18((uint64_t)v6, (uint64_t)&v25[v24]);
        v26 = v22;
        sub_10039384C(v21, *((uint64_t *)&v21 + 1), (void (*)(_QWORD))sub_100186DD4, v25);

        swift_bridgeObjectRelease(*((_QWORD *)&v21 + 1));
        swift_release(v25);
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v41);
        return;
      }
    }
    else
    {
      v39 = 0u;
      v40 = 0u;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v15);
    }
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }

  sub_10001BE90((uint64_t)&v39, (uint64_t *)&unk_100828420);
LABEL_20:
  v27 = (char *)v1[2];
  v28 = OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider;
  v29 = *v1;
  v30 = *(id *)&v27[OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider];
  v31 = v29;
  v32 = sub_1005EEBB4((uint64_t)v31);

  if ((v32 & 1) != 0)
  {
    v33 = *(void **)&v27[v28];
    sub_10004F8C8((uint64_t)v1, (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MindfulnessItemView);
    v34 = *(unsigned __int8 *)(v3 + 80);
    v35 = (v34 + 16) & ~v34;
    v36 = swift_allocObject(&unk_10078A8A8, v35 + v4, v34 | 7);
    sub_100186D18((uint64_t)v6, v36 + v35);
    v37 = v31;
    v38 = v33;
    sub_10010F0C0(v37, (void (*)(_QWORD))sub_100186DC4, v36, v38);

    swift_release(v36);
  }
}

void sub_10018581C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  double v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unsigned int v32;
  uint64_t v33;
  id v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;

  v4 = sub_100047110(&qword_100823AE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1003B17F4();
  v12 = objc_msgSend(v11, "gradientDarkColor");
  v13 = objc_msgSend(v11, "gradientDarkColor");
  v14 = 34.0;
  if (*(_BYTE *)(a1 + 24))
    v14 = 48.0;
  v15 = (id)FIUICircularGradientImage(v12, v13, v14);

  if (!v15)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = Image.init(uiImage:)(v15);

  v17 = *(_QWORD *)(a1 + 40);
  v46 = *(_QWORD *)(a1 + 32);
  v47 = v17;
  v18 = sub_100047110(&qword_100823AB8);
  State.wrappedValue.getter(&v45, v18);
  v19 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v20 = Image.resizable(capInsets:resizingMode:)(v10, v19, 0.0, 0.0, 0.0, 0.0);
  v21 = swift_release(v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v21);
  v23 = (void *)MindfulnessSessionViewModel.sourceRevision.getter(v22);
  v24 = objc_msgSend(v23, "source");

  LODWORD(v23) = objc_msgSend(v24, "_hasFirstPartyBundleID");
  v25 = type metadata accessor for Image.TemplateRenderingMode(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (unsigned int *)&enum case for Image.TemplateRenderingMode.template(_:);
  if (!(_DWORD)v23)
    v27 = (unsigned int *)&enum case for Image.TemplateRenderingMode.original(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v6, *v27, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v6, 0, 1, v25);
  v28 = Image.renderingMode(_:)(v6, v20);
  swift_release(v20);
  v29 = sub_10001BE90((uint64_t)v6, &qword_100823AE8);
  v30 = (void *)MindfulnessSessionViewModel.sourceRevision.getter(v29);
  v31 = objc_msgSend(v30, "source");

  v32 = objc_msgSend(v31, "_hasFirstPartyBundleID");
  v33 = 0;
  if (!v32)
    goto LABEL_9;
  v34 = objc_msgSend((id)objc_opt_self(UIColor), "fiui_meditationTeal");
  if (!v34)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v33 = Color.init(uiColor:)(v34);
LABEL_9:
  KeyPath = swift_getKeyPath(&unk_100629000);
  v36 = KeyPath;
  if (*(_BYTE *)(a1 + 24))
    v37 = 0x4038000000000000;
  else
    v37 = 0x4031000000000000;
  v38 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(&v46, v37, 0, v37, 0, v38, v39);
  v40 = v46;
  v41 = v47;
  v42 = v48;
  v43 = v49;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)(a2 + 16) = v36;
  *(_QWORD *)(a2 + 24) = v33;
  *(_QWORD *)(a2 + 32) = v40;
  *(_BYTE *)(a2 + 40) = v41;
  *(_QWORD *)(a2 + 48) = v42;
  *(_BYTE *)(a2 + 56) = v43;
  *(_OWORD *)(a2 + 64) = v50;
}

double sub_100185B7C(void *a1, _QWORD *a2)
{
  uint64_t v4;
  double result;
  id v6;
  uint64_t v7;
  _QWORD v8[6];

  sub_100139CE8();
  v4 = static NSObject.== infix(_:_:)(*a2, *a2);
  if ((v4 & 1) != 0)
  {
    if (a1)
    {
      __chkstk_darwin(v4);
      v8[2] = a2;
      v8[3] = a1;
      v6 = a1;
      v7 = static Animation.default.getter();
      withAnimation<A>(_:_:)(v7, sub_100187108, v8, (char *)&type metadata for () + 8);

      *(_QWORD *)&result = swift_release(v7).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_100185C38(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v3 = Image.init(uiImage:)(a2);
  v4 = *(_QWORD *)(a1 + 40);
  v7[1] = *(_QWORD *)(a1 + 32);
  v7[2] = v4;
  v7[0] = v3;
  v5 = sub_100047110(&qword_100823AB8);
  return State.wrappedValue.setter(v7, v5);
}

uint64_t sub_100185C94(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _BYTE v17[16];

  v4 = sub_100047110(&qword_1008239C0);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Trainer(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100139CE8();
  result = static NSObject.== infix(_:_:)(*a2, *a2);
  if ((result & 1) != 0)
  {
    sub_100021CC0(a1, (uint64_t)v6, &qword_1008239C0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
    {
      return sub_10001BE90((uint64_t)v6, &qword_1008239C0);
    }
    else
    {
      v13 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v6, v8);
      v14 = __chkstk_darwin(v13);
      *(_QWORD *)&v17[-16] = a2;
      *(_QWORD *)&v17[-8] = v11;
      v15 = static Animation.default.getter(v14);
      withAnimation<A>(_:_:)(v15, sub_100186E10, &v17[-32], (char *)&type metadata for () + 8);
      v16 = swift_release(v15);
      return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v9 + 8))(v11, v8, v16);
    }
  }
  return result;
}

uint64_t sub_100185E20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  uint64_t v25;

  v4 = sub_100047110(&qword_1008239C0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v24 - v12;
  v24[0] = a1;
  v14 = *a1;
  v16 = type metadata accessor for Trainer(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v6, a2, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, v16);
  v18 = sub_1004C3E8C(v14, (uint64_t)v6);
  AttributedString.init(_:)(v18);
  v24[2] = swift_getKeyPath(&unk_100628EA0);
  KeyPath = swift_getKeyPath(&unk_100628ED0);
  if (qword_10081DE88 != -1)
    swift_once(&qword_10081DE88, sub_1004C23E8);
  v20 = qword_100837068;
  v25 = qword_100837068;
  v21 = sub_1000EA1DC();
  swift_retain(v20);
  AttributedString.subscript.setter(&v25, KeyPath, v21);
  sub_10001BE90((uint64_t)v6, &qword_1008239C0);
  type metadata accessor for MindfulnessItemView(0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v22 = sub_100047110(&qword_1008239C8);
  State.wrappedValue.setter(v11, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

double sub_100186030(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  id v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  _BYTE v26[16];

  v4 = type metadata accessor for MindfulnessItemView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  if (a1)
  {
    __chkstk_darwin(v7);
    *(_QWORD *)&v26[-16] = a2;
    *(_QWORD *)&v26[-8] = a1;
    v8 = a1;
    v9 = static Animation.default.getter();
    withAnimation<A>(_:_:)(v9, sub_100186E28, &v26[-32], (char *)&type metadata for () + 8);
    swift_release(v9);
    if (*(_BYTE *)(a2 + 24))
      v10 = 48.0;
    else
      v10 = 34.0;
    v11 = *(id *)(*(_QWORD *)(a2 + 16) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
    v12 = CGSize.init(uniform:)(v10);
    v14 = v13;
    sub_10004F8C8(a2, (uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for MindfulnessItemView);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject(&unk_10078A8F8, v16 + v6, v15 | 7);
    sub_100186D18((uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v17 + v16);
    sub_10039636C(v8, (uint64_t)sub_100186E44, v17, v12, v14);
    swift_release(v17);

  }
  else
  {
    v19 = static os_log_type_t.error.getter(v7);
    v20 = (void *)HKLogActivity;
    v21 = sub_100047110((uint64_t *)&unk_100827460);
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_100038CF8();
    *(_QWORD *)(v22 + 32) = 0xD000000000000010;
    *(_QWORD *)(v22 + 40) = 0x800000010068C9F0;
    v23 = *(void **)a2;
    *(_QWORD *)(v22 + 96) = type metadata accessor for MindfulnessSessionViewModel(0);
    *(_QWORD *)(v22 + 104) = sub_1000083D8((unint64_t *)&qword_100823AB0, (uint64_t (*)(uint64_t))&type metadata accessor for MindfulnessSessionViewModel, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v22 + 72) = v23;
    v24 = v20;
    v25 = v23;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v24, "%@ failed to fetch catalog item view model for mindfulness session %@", 69, 2, v22);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001862D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = objc_msgSend(*(id *)(a2 + OBJC_IVAR___CHCatalogItemViewModel_title), "string");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  AttributeContainer.init()(v17);
  AttributedString.init(_:attributes:)(v14, v16, v5);
  type metadata accessor for MindfulnessItemView(0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v18 = sub_100047110(&qword_1008239C8);
  State.wrappedValue.setter(v10, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

double sub_100186448(void *a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  double result;
  _QWORD v5[6];

  if (a1)
  {
    v5[2] = a2;
    v5[3] = a1;
    v2 = a1;
    v3 = static Animation.default.getter();
    withAnimation<A>(_:_:)(v3, sub_100186E50, v5, (char *)&type metadata for () + 8);

    *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001864E0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  v3 = Image.init(uiImage:)(a2);
  v7 = *(_OWORD *)(a1 + 48);
  v6 = v3;
  v4 = sub_100047110(&qword_100823188);
  return State.wrappedValue.setter(&v6, v4);
}

uint64_t sub_10018654C()
{
  return 8;
}

uint64_t sub_100186558(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_100186560(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_100186574(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for MindfulnessItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_100823A28;
  if (!qword_100823A28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MindfulnessItemView);
  return result;
}

char *sub_1001865BC(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v5 = a1;
    v7 = a2[1];
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v6;
    a1[24] = *((_BYTE *)a2 + 24);
    v8 = a2[4];
    v9 = a2[5];
    *((_QWORD *)a1 + 4) = v8;
    *((_QWORD *)a1 + 5) = v9;
    v10 = a2[6];
    v11 = a2[7];
    v12 = *(int *)(a3 + 40);
    v22 = &a1[v12];
    v13 = (uint64_t)a2 + v12;
    *((_QWORD *)a1 + 6) = v10;
    *((_QWORD *)a1 + 7) = v11;
    v14 = type metadata accessor for AttributedString(0);
    v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    v15 = v4;
    v16 = v7;
    v17 = v6;
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v10);
    v18 = swift_retain(v11);
    v21(v22, v13, v14, v18);
    v19 = *(int *)(sub_100047110(&qword_1008239C8) + 28);
    v4 = *(char **)(v13 + v19);
    *(_QWORD *)&v22[v19] = v4;
  }
  swift_retain(v4);
  return v5;
}

double sub_1001866D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(*(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = *(_QWORD *)(v4 + *(int *)(sub_100047110(&qword_1008239C8) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_100186764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v22;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(int *)(a3 + 40);
  v22 = a1 + v11;
  v12 = a2 + v11;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v13 = type metadata accessor for AttributedString(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  v14 = v4;
  v15 = v5;
  v16 = v6;
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v17 = swift_retain(v10);
  v21(v22, v12, v13, v17);
  v18 = *(int *)(sub_100047110(&qword_1008239C8) + 28);
  v19 = *(_QWORD *)(v12 + v18);
  *(_QWORD *)(v22 + v18) = v19;
  swift_retain(v19);
  return a1;
}

uint64_t sub_100186858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(void **)(a2 + 16);
  v13 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  v14 = v12;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = *(int *)(a3 + 40);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = *(int *)(sub_100047110(&qword_1008239C8) + 28);
  v28 = *(_QWORD *)(v24 + v27);
  v29 = *(_QWORD *)(v25 + v27);
  *(_QWORD *)(v24 + v27) = v29;
  swift_retain(v29);
  swift_release(v28);
  return a1;
}

uint64_t sub_100186980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = sub_100047110(&qword_1008239C8);
  *(_QWORD *)(v6 + *(int *)(v9 + 28)) = *(_QWORD *)(v7 + *(int *)(v9 + 28));
  return a1;
}

uint64_t sub_100186A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v11);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v12);
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = *(int *)(sub_100047110(&qword_1008239C8) + 28);
  v18 = *(_QWORD *)(v14 + v17);
  *(_QWORD *)(v14 + v17) = *(_QWORD *)(v15 + v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_100186B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100186B0C);
}

uint64_t sub_100186B0C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_1008239C8);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t sub_100186B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100186B98);
}

char *sub_100186B98(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100047110(&qword_1008239C8);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

void sub_100186C10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_100628F38;
  v4[4] = &unk_100628F50;
  v4[5] = &unk_100628F68;
  sub_100186CA8(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_100186CA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100823A38)
  {
    v2 = type metadata accessor for AttributedString(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100823A38);
  }
}

uint64_t sub_100186CFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD8BC, 1);
}

uint64_t sub_100186D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MindfulnessItemView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100186D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MindfulnessItemView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100823A9C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000DA0E4;
  return sub_100185068(v3);
}

uint64_t sub_100186DC4(uint64_t a1)
{
  return sub_100186F4C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100186030);
}

uint64_t sub_100186DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MindfulnessItemView(0) - 8) + 80);
  return sub_100185C94(a1, (_QWORD *)(v1 + ((v3 + 16) & ~v3)));
}

uint64_t sub_100186E10()
{
  uint64_t v0;

  return sub_100185E20(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100186E28()
{
  uint64_t v0;

  return sub_1001862D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100186E44(uint64_t a1)
{
  return sub_100186F4C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100186448);
}

uint64_t sub_100186E50()
{
  uint64_t v0;

  return sub_1001864E0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100186E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for MindfulnessItemView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;

  swift_release(*(_QWORD *)(v7 + 32));
  swift_release(*(_QWORD *)(v7 + 40));
  swift_release(*(_QWORD *)(v7 + 48));
  swift_release(*(_QWORD *)(v7 + 56));
  v8 = v7 + *(int *)(v1 + 40);
  v9 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100047110(&qword_1008239C8);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100186F40(uint64_t a1)
{
  return sub_100186F4C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100185B7C);
}

uint64_t sub_100186F4C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MindfulnessItemView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_100186F98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100186FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004C2A14(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100186FC4()
{
  uint64_t v0;

  return sub_100185C38(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100186FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823AD8;
  if (!qword_100823AD8)
  {
    v1 = sub_100007050(&qword_100823AC8);
    sub_100028384(&qword_100823800, &qword_100821238, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823AD8);
  }
  return result;
}

unint64_t sub_10018706C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823AF0;
  if (!qword_100823AF0)
  {
    v1 = sub_100007050(&qword_100823AA8);
    sub_100028384(&qword_100823AF8, &qword_100823A90, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_1000083D8((unint64_t *)&qword_100823278, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823AF0);
  }
  return result;
}

uint64_t sub_100187108()
{
  return sub_100186FC4();
}

uint64_t sub_10018711C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (void *)a2[5];
    v9 = (void *)a2[6];
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 48) = v9;
    v11 = (void *)a2[7];
    v10 = (void *)a2[8];
    *(_QWORD *)(v4 + 56) = v11;
    v12 = *((_BYTE *)a2 + 72);
    v13 = v8;
    v14 = v9;
    v15 = v11;
    sub_10010C5D0(v10, v12);
    *(_QWORD *)(v4 + 64) = v10;
    *(_BYTE *)(v4 + 72) = v12;
    v16 = *(int *)(a3 + 36);
    v17 = (char *)(v4 + v16);
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for AttributedString(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_100047110((uint64_t *)&unk_10082EDF0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v23 = *(int *)(sub_100047110(&qword_100823B08) + 28);
    v22 = *(_QWORD *)&v18[v23];
    *(_QWORD *)&v17[v23] = v22;
  }
  swift_retain(v22);
  return v4;
}

double sub_100187278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)a1);

  sub_10010C5EC(*(id *)(a1 + 64), *(_BYTE *)(a1 + 72));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = *(_QWORD *)(v4 + *(int *)(sub_100047110(&qword_100823B08) + 28));
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_10018731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(void **)(a2 + 40);
  v8 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v10 = *(void **)(a2 + 56);
  v9 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(_BYTE *)(a2 + 72);
  v12 = v7;
  v13 = v8;
  v14 = v10;
  sub_10010C5D0(v9, v11);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v11;
  v15 = *(int *)(a3 + 36);
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = type metadata accessor for AttributedString(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100047110((uint64_t *)&unk_10082EDF0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = *(int *)(sub_100047110(&qword_100823B08) + 28);
  v22 = *(_QWORD *)&v17[v21];
  *(_QWORD *)&v16[v21] = v22;
  swift_retain(v22);
  return a1;
}

uint64_t sub_100187448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1000F1A58((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(void **)(a2 + 40);
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  v8 = v6;

  v9 = *(void **)(a2 + 48);
  v10 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  v11 = v9;

  v12 = *(void **)(a2 + 56);
  v13 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  v14 = v12;

  v15 = *(void **)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 72);
  sub_10010C5D0(v15, v16);
  v17 = *(void **)(a1 + 64);
  v18 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v15;
  *(_BYTE *)(a1 + 72) = v16;
  sub_10010C5EC(v17, v18);
  v19 = *(int *)(a3 + 36);
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for AttributedString(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100047110((uint64_t *)&unk_10082EDF0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  v28 = *(int *)(sub_100047110(&qword_100823B08) + 28);
  v29 = *(_QWORD *)&v20[v28];
  v30 = *(_QWORD *)&v21[v28];
  *(_QWORD *)&v20[v28] = v30;
  swift_retain(v30);
  swift_release(v29);
  return a1;
}

uint64_t sub_1001875E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)(a2 + v6);
  v8 = (char *)(a1 + v6);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    v11 = sub_100047110((uint64_t *)&unk_10082EDF0);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  v12 = sub_100047110(&qword_100823B08);
  *(_QWORD *)&v8[*(int *)(v12 + 28)] = *(_QWORD *)&v7[*(int *)(v12 + 28)];
  return a1;
}

uint64_t sub_1001876D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;

  v9 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v10 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(void **)(a1 + 64);
  v13 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v11;
  sub_10010C5EC(v12, v13);
  v14 = *(int *)(a3 + 36);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for AttributedString(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100047110((uint64_t *)&unk_10082EDF0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = *(int *)(sub_100047110(&qword_100823B08) + 28);
  v24 = *(_QWORD *)&v15[v23];
  *(_QWORD *)&v15[v23] = *(_QWORD *)&v16[v23];
  swift_release(v24);
  return a1;
}

uint64_t sub_100187854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100187860);
}

uint64_t sub_100187860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_100823B08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1001878E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001878EC);
}

uint64_t sub_1001878EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100047110(&qword_100823B08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LoadHistoryItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_100823B68;
  if (!qword_100823B68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LoadHistoryItemView);
  return result;
}

void sub_1001879A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_100629070;
  sub_100187A30(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_100187A30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100823B78)
  {
    v2 = sub_100007050((uint64_t *)&unk_10082EDF0);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100823B78);
  }
}

uint64_t sub_100187A88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD90C, 1);
}

id sub_100187A98()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  qword_100823B00 = (uint64_t)result;
  return result;
}

_QWORD *sub_100187ADC(void *a1)
{
  int64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  char v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void *v35;
  id v36;
  id v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  char v46;
  id v47;
  void *v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58[24];
  char *v59;

  v5 = sub_100047110(&qword_100822220);
  v56 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v57 = (uint64_t)&v50 - v10;
  __chkstk_darwin(v9);
  v50 = (uint64_t)&v50 - v11;
  if (objc_msgSend(a1, "workoutActivityType") == (id)82)
  {
    v12 = objc_msgSend(a1, "workoutActivities");
    v13 = sub_10001E724(0, (unint64_t *)&qword_10082E6A0, HKWorkoutActivity_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v12 = (id)v14;
      else
        v12 = (id)(v14 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v14);
      v8 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v14);
      if (v8)
        goto LABEL_4;
    }
    else
    {
      v15 = v14 & 0xFFFFFFFFFFFFF8;
      v8 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8)
      {
LABEL_4:
        if (v8 >= 1)
        {
          v16 = 0;
          v17 = v14 & 0xC000000000000001;
          v3 = _swiftEmptyArrayStorage;
          v54 = v1;
          v55 = a1;
          v52 = v8;
          v53 = v14;
          v51 = v14 & 0xC000000000000001;
          while (1)
          {
            if (v17)
              v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
            else
              v18 = *(id *)(v14 + 8 * v16 + 32);
            v19 = v18;
            v20 = objc_msgSend(v18, "workoutConfiguration");
            v21 = objc_msgSend(v20, "activityType");

            if (v21 != (id)83)
            {
              v22 = *(void **)(v1 + 64);
              v23 = *(_BYTE *)(v1 + 72);
              sub_10010C5D0(v22, v23);
              v24 = (char *)sub_1003F70B8(v22, v23);
              sub_10010C5EC(v22, v23);
              KeyPath = swift_getKeyPath(&unk_1006291E0);
              v59 = v24;
              v26 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
              v27 = v19;
              v28 = a1;
              v29 = v27;
              v30 = v28;
              ObservationRegistrar.access<A, B>(_:keyPath:)(&v59, KeyPath, v26);
              swift_release(KeyPath);
              v31 = &v24[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities];
              swift_beginAccess(&v24[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities], v58, 0, 0);
              v32 = *(_QWORD *)v31;
              if (!*(_QWORD *)(v32 + 16))
              {
                swift_bridgeObjectRetain(v32);
LABEL_21:

                swift_bridgeObjectRelease(v32);
LABEL_22:
                v41 = type metadata accessor for AppleExertionScale(0);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v57, 1, 1, v41);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
                a1 = v55;
                v8 = v52;
                v14 = v53;
                v17 = v51;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v3 = (_QWORD *)sub_10014000C(0, v3[2] + 1, 1, (unint64_t)v3);
                v1 = v54;
                v44 = v3[2];
                v43 = v3[3];
                if (v44 >= v43 >> 1)
                  v3 = (_QWORD *)sub_10014000C(v43 > 1, v44 + 1, 1, (unint64_t)v3);
                v3[2] = v44 + 1;
                sub_100045AD4(v57, (uint64_t)v3+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v44, &qword_100822220);
                goto LABEL_7;
              }
              swift_bridgeObjectRetain(v32);
              v33 = sub_10043960C(v30, v29);
              if ((v34 & 1) == 0)
                goto LABEL_21;
              v35 = *(void **)(*(_QWORD *)(v32 + 56) + 8 * v33);
              v36 = v35;

              swift_bridgeObjectRelease(v32);
              if (!v35)
                goto LABEL_22;
              v37 = v36;
              AppleExertionScale.init(quantity:)(v35);
              v38 = swift_isUniquelyReferenced_nonNull_native(v3);
              a1 = v55;
              if ((v38 & 1) == 0)
                v3 = (_QWORD *)sub_10014000C(0, v3[2] + 1, 1, (unint64_t)v3);
              v8 = v52;
              v14 = v53;
              v17 = v51;
              v40 = v3[2];
              v39 = v3[3];
              if (v40 >= v39 >> 1)
                v3 = (_QWORD *)sub_10014000C(v39 > 1, v40 + 1, 1, (unint64_t)v3);
              v3[2] = v40 + 1;
              sub_100045AD4(v50, (uint64_t)v3+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v40, &qword_100822220);

              v1 = v54;
            }
LABEL_7:
            ++v16;

            if (v8 == v16)
            {
              swift_bridgeObjectRelease(v14);
              return v3;
            }
          }
        }
        __break(1u);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease(v14);
    return _swiftEmptyArrayStorage;
  }
  v45 = *(void **)(v1 + 64);
  v46 = *(_BYTE *)(v1 + 72);
  sub_10010C5D0(v45, v46);
  v47 = sub_1003F70B8(v45, v46);
  sub_10010C5EC(v45, v46);
  v48 = sub_100176A88(a1, 0);

  if (!v48)
    return _swiftEmptyArrayStorage;
  v12 = v48;
  AppleExertionScale.init(quantity:)(v48);
  v3 = (_QWORD *)sub_10014000C(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v2 = v3[2];
  v15 = v3[3];
  v1 = v2 + 1;
  if (v2 >= v15 >> 1)
LABEL_38:
    v3 = (_QWORD *)sub_10014000C(v15 > 1, v1, 1, (unint64_t)v3);
  v3[2] = v1;
  sub_100045AD4(v8, (uint64_t)v3+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v2, &qword_100822220);

  return v3;
}

_QWORD *sub_100188094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[24];
  void *v54;
  uint64_t v55[6];

  v2 = sub_100047110(&qword_100822220);
  v50 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v52 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v46 = (uint64_t)&v41 - v5;
  v6 = type metadata accessor for EnvironmentValues(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for FitnessPlusStackViewModel(0) + 20));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return _swiftEmptyArrayStorage;
  v10 = v8 + 32;
  v42 = v8;
  v11 = swift_bridgeObjectRetain(v8);
  v12 = _swiftEmptyArrayStorage;
  v11.n128_u64[0] = 136315138;
  v45 = v11;
  v44 = 0x800000010068CB00;
  v43 = (char *)&type metadata for Any + 8;
  do
  {
    sub_1000252E0(v10, (uint64_t)v55);
    v13 = sub_100047110((uint64_t *)&unk_10082E5B0);
    v14 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
    if ((swift_dynamicCast(&v54, v55, v13, v14, 6) & 1) == 0)
      goto LABEL_4;
    v15 = v54;
    v16 = *(void **)(v51 + 64);
    if (*(_BYTE *)(v51 + 72) == 1)
    {
      v55[0] = *(_QWORD *)(v51 + 64);
      sub_10010C5D0(v16, 1);
    }
    else
    {
      sub_10010C5D0(v16, 0);
      swift_retain(v16);
      v18 = static os_log_type_t.fault.getter(v17);
      v19 = static Log.runtimeIssuesLog.getter();
      v20 = v18;
      if (os_log_type_enabled(v19, v18))
      {
        v21 = swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v55[0] = v22;
        *(_DWORD *)v21 = v45.n128_u32[0];
        *(_QWORD *)(v21 + 4) = sub_10003E8EC(0xD000000000000013, v44, v55);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy(v22, 1, v43);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }

      v23 = v47;
      EnvironmentValues.init()();
      swift_getAtKeyPath(v23, v16);
      sub_10010C5EC(v16, 0);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v49);
      sub_10010C5EC(v16, 0);
    }
    v24 = (char *)v55[0];
    KeyPath = swift_getKeyPath(&unk_1006291E0);
    v55[0] = (uint64_t)v24;
    v26 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    v27 = v15;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v55, KeyPath, v26);
    swift_release(KeyPath);
    v28 = &v24[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities];
    swift_beginAccess(&v24[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities], v53, 0, 0);
    v29 = *(_QWORD *)v28;
    if (!*(_QWORD *)(v29 + 16))
      goto LABEL_20;
    swift_bridgeObjectRetain(v29);
    v30 = sub_10043960C(v27, 0);
    if ((v31 & 1) == 0)
    {
      swift_bridgeObjectRelease(v29);
LABEL_20:

      goto LABEL_21;
    }
    v32 = *(void **)(*(_QWORD *)(v29 + 56) + 8 * v30);
    v33 = v32;

    swift_bridgeObjectRelease(v29);
    if (v32)
    {
      v34 = v33;
      AppleExertionScale.init(quantity:)(v32);
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        v12 = (_QWORD *)sub_10014000C(0, v12[2] + 1, 1, (unint64_t)v12);
      v36 = v12[2];
      v35 = v12[3];
      if (v36 >= v35 >> 1)
        v12 = (_QWORD *)sub_10014000C(v35 > 1, v36 + 1, 1, (unint64_t)v12);
      v12[2] = v36 + 1;
      sub_100045AD4(v46, (uint64_t)v12+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v36, &qword_100822220);

      goto LABEL_4;
    }
LABEL_21:
    v37 = type metadata accessor for AppleExertionScale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v52, 1, 1, v37);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = (_QWORD *)sub_10014000C(0, v12[2] + 1, 1, (unint64_t)v12);
    v39 = v12[2];
    v38 = v12[3];
    if (v39 >= v38 >> 1)
      v12 = (_QWORD *)sub_10014000C(v38 > 1, v39 + 1, 1, (unint64_t)v12);
    v12[2] = v39 + 1;
    sub_100045AD4(v52, (uint64_t)v12+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v39, &qword_100822220);

LABEL_4:
    v10 += 40;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease(v42);
  return v12;
}

uint64_t sub_100188600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t HistoryItemView;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  id v65;
  int *v66;
  int *v67;
  int *v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (**v93)();
  void (*v94)(char *, uint64_t);
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  _QWORD *v106;
  id v107;
  void *v108;
  NSDate v109;
  id v110;
  id v111;
  int *v112;
  int *v113;
  int *v114;
  void *v115;
  char v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL4 v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double (**v131)();
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD v168[16];
  _OWORD v169[17];

  v2 = v1;
  v167 = a1;
  v165 = sub_100047110(&qword_100823BB8);
  v3 = __chkstk_darwin(v165);
  v143 = (uint64_t)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v144 = (uint64_t)&v138 - v5;
  v6 = sub_100047110((uint64_t *)&unk_100828380);
  __chkstk_darwin(v6);
  v8 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for FitnessPlusStackViewModel(0);
  v9 = *(_QWORD *)(v145 - 8);
  v10 = __chkstk_darwin(v145);
  v140 = v11;
  v141 = (uint64_t)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v142 = (uint64_t)&v138 - v12;
  v162 = sub_100047110(&qword_100823BC0);
  __chkstk_darwin(v162);
  v163 = (uint64_t)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_100823BC8);
  __chkstk_darwin(v14);
  v164 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v158 = *(_QWORD *)(HistoryItemView - 8);
  __chkstk_darwin(HistoryItemView);
  v159 = v17;
  v160 = (uint64_t)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AppEntityVisualState(0);
  v153 = *(_QWORD *)(v18 - 8);
  v154 = v18;
  __chkstk_darwin(v18);
  v150 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110((uint64_t *)&unk_10082EDF0);
  v21 = __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v25 = (uint64_t *)((char *)&v138 - v24);
  v26 = type metadata accessor for AttributedString(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v146 = (uint64_t)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v157 = (char *)&v138 - v31;
  __chkstk_darwin(v30);
  v166 = (uint64_t)&v138 - v32;
  v147 = type metadata accessor for WorkloadListItemStack(0);
  v33 = __chkstk_darwin(v147);
  v139 = (int *)((char *)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v33);
  v148 = (int *)((char *)&v138 - v35);
  v155 = sub_100047110(&qword_100823BD0);
  v152 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v151 = (char *)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100047110(&qword_100823BD8);
  v37 = __chkstk_darwin(v161);
  v149 = (char *)&v138 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v156 = (uint64_t)&v138 - v39;
  v40 = v2;
  sub_1000252E0(v2, (uint64_t)v169);
  v41 = sub_100047110((uint64_t *)&unk_10082E5B0);
  v42 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
  if (swift_dynamicCast(v168, v169, v41, v42, 6))
  {
    v43 = *(void **)&v168[0];
    v44 = objc_msgSend(*(id *)&v168[0], "workoutActivityType");
    v45 = sub_100047110(&qword_100823B08);
    State.wrappedValue.getter(v25, v45);
    v46 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26);
    if ((_DWORD)v46 == 1)
    {
      AttributedString.init()(v46);
      sub_10001BE90((uint64_t)v25, (uint64_t *)&unk_10082EDF0);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v27 + 32))(v166, v25, v26);
    }
    LODWORD(v146) = v44 == (id)82;
    v145 = (uint64_t)sub_100187ADC(v43);
    v55 = objc_msgSend(*(id *)(v40 + 40), "formattedDurationForWorkout:workoutActivity:context:", v43, 0, CFSTR("WorkoutsListDisplayContext"));
    v56 = (uint64_t)v157;
    AttributedString.init(_:)(v55);
    KeyPath = swift_getKeyPath(&unk_100629100);
    *(&v138 - 2) = __chkstk_darwin(KeyPath);
    v58 = swift_getKeyPath(&unk_100629130);
    v60 = static Font.body.getter(v59);
    static Font.Weight.medium.getter(v60);
    v61 = v40;
    v62 = Font.weight(_:)(v60);
    swift_release(v60);
    *(_QWORD *)&v169[0] = v62;
    v63 = sub_1000EA1DC();
    AttributedString.subscript.setter(v169, v58, v63);

    v64 = objc_msgSend(*(id *)(v40 + 40), "formattedDateForWorkout:context:", v43, CFSTR("WorkoutsListDisplayContext"));
    v65 = objc_msgSend(v64, "string");

    v66 = (int *)static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    v69 = *(void **)(v61 + 64);
    LOBYTE(v65) = *(_BYTE *)(v61 + 72);
    sub_10010C5D0(v69, (char)v65);
    v70 = sub_1003F70B8(v69, (char)v65);
    sub_10010C5EC(v69, (char)v65);
    v71 = swift_getKeyPath(&unk_1006290D8);
    *(_QWORD *)&v169[0] = v70;
    v72 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v169, v71, v72);
    swift_release(v71);
    LOBYTE(v69) = v70[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated];

    v73 = v148;
    sub_100229218(v146, v166, v145, v56, v66, v68, (v69 & 1) == 0, v148);
    v74 = *(void **)(v61 + 40);
    v75 = v43;
    sub_1001641A8(v75, v74, v168);
    *(_QWORD *)&v169[0] = _swiftEmptyArrayStorage;
    v76 = sub_1000083D8((unint64_t *)&qword_10081F608, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
    v77 = sub_100047110((uint64_t *)&unk_10083D740);
    v78 = sub_1001121C8();
    v79 = v150;
    v80 = v154;
    dispatch thunk of SetAlgebra.init<A>(_:)(v169, v77, v78, v154, v76);
    v81 = sub_1000083D8(&qword_100823BF0, type metadata accessor for WorkloadListItemStack, (uint64_t)&unk_10062EE78);
    v82 = sub_100112214();
    v83 = v151;
    View.appEntity<A>(_:state:)(v168, v79, v147, &type metadata for WorkoutEntity, v81, v82);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v79, v80);
    v169[12] = v168[12];
    v169[13] = v168[13];
    v169[14] = v168[14];
    v169[15] = v168[15];
    v169[8] = v168[8];
    v169[9] = v168[9];
    v169[10] = v168[10];
    v169[11] = v168[11];
    v169[4] = v168[4];
    v169[5] = v168[5];
    v169[6] = v168[6];
    v169[7] = v168[7];
    v169[0] = v168[0];
    v169[1] = v168[1];
    v169[2] = v168[2];
    v169[3] = v168[3];
    sub_100112258(v169);
    sub_100011F54((uint64_t)v73, type metadata accessor for WorkloadListItemStack);
    v84 = v160;
    sub_10004F8C8(v61, v160, type metadata accessor for LoadHistoryItemView);
    v85 = *(unsigned __int8 *)(v158 + 80);
    v86 = (v85 + 16) & ~v85;
    v87 = (v159 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
    v88 = swift_allocObject(&unk_10078AA60, v87 + 8, v85 | 7);
    sub_100047C88(v84, v88 + v86, type metadata accessor for LoadHistoryItemView);
    *(_QWORD *)(v88 + v87) = v75;
    v89 = v152;
    v90 = (uint64_t)v149;
    v91 = v155;
    (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v149, v83, v155);
    v92 = v161;
    v93 = (void (**)())(v90 + *(int *)(v161 + 36));
    *v93 = sub_10018A2D4;
    v93[1] = (void (*)())v88;
    v93[2] = 0;
    v93[3] = 0;
    v94 = *(void (**)(char *, uint64_t))(v89 + 8);
    v95 = v75;
    v94(v83, v91);
    v96 = v156;
    sub_100045AD4(v90, v156, &qword_100823BD8);
    v97 = v163;
    sub_100021CC0(v96, v163, &qword_100823BD8);
    swift_storeEnumTagMultiPayload(v97, v162, 0);
    v98 = sub_10018A04C();
    v99 = sub_10018A110();
    v100 = v164;
    _ConditionalContent<>.init(storage:)(v97, v92, v165, v98, v99);

    sub_10001BE90(v96, &qword_100823BD8);
    v101 = sub_100047110(&qword_100823BE0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 0, 1, v101);
    v102 = (uint64_t)v100;
  }
  else
  {
    sub_1000252E0(v40, (uint64_t)v169);
    v47 = v41;
    v48 = v145;
    v49 = swift_dynamicCast(v8, v169, v47, v145, 6);
    v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (!v49)
    {
      v50(v8, 1, 1, v48);
      sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828380);
      v103 = sub_100047110(&qword_100823BE0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v167, 1, 1, v103);
    }
    v166 = v9;
    v50(v8, 0, 1, v48);
    v51 = v142;
    sub_100047C88((uint64_t)v8, v142, type metadata accessor for FitnessPlusStackViewModel);
    v52 = sub_100047110(&qword_100823B08);
    State.wrappedValue.getter(v23, v52);
    v53 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v23, 1, v26);
    v54 = v40;
    if ((_DWORD)v53 == 1)
    {
      AttributedString.init()(v53);
      sub_10001BE90((uint64_t)v23, (uint64_t *)&unk_10082EDF0);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v27 + 32))(v146, v23, v26);
    }
    v105 = (uint64_t)v157;
    v106 = sub_100188094(v51);
    v107 = sub_1003877C0();
    AttributedString.init(_:)(v107);
    v108 = (void *)objc_opt_self(CHListAndDetailViewDateFormatter);
    v109.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (qword_10081DBB8 != -1)
      swift_once(&qword_10081DBB8, sub_1003868D4);
    v110 = objc_msgSend(v108, "formattedListStringForDate:font:", v109.super.isa, qword_100830648);

    v111 = objc_msgSend(v110, "string");
    v112 = (int *)static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
    v114 = v113;

    v115 = *(void **)(v54 + 64);
    v116 = *(_BYTE *)(v54 + 72);
    sub_10010C5D0(v115, v116);
    v117 = sub_1003F70B8(v115, v116);
    sub_10010C5EC(v115, v116);
    v118 = swift_getKeyPath(&unk_1006290D8);
    *(_QWORD *)&v169[0] = v117;
    v119 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v169, v118, v119);
    swift_release(v118);
    LOBYTE(v115) = v117[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated];

    v120 = (v115 & 1) == 0;
    v121 = v139;
    sub_100229218(1, v146, (uint64_t)v106, v105, v112, v114, v120, v139);
    v122 = v160;
    sub_10004F8C8(v54, v160, type metadata accessor for LoadHistoryItemView);
    v123 = v141;
    sub_10004F8C8(v51, v141, type metadata accessor for FitnessPlusStackViewModel);
    v124 = *(unsigned __int8 *)(v158 + 80);
    v125 = (v124 + 16) & ~v124;
    v126 = *(unsigned __int8 *)(v166 + 80);
    v127 = (v159 + v126 + v125) & ~v126;
    v128 = swift_allocObject(&unk_10078AA18, v127 + v140, v124 | v126 | 7);
    sub_100047C88(v122, v128 + v125, type metadata accessor for LoadHistoryItemView);
    sub_100047C88(v123, v128 + v127, type metadata accessor for FitnessPlusStackViewModel);
    v129 = v143;
    sub_10004F8C8((uint64_t)v121, v143, type metadata accessor for WorkloadListItemStack);
    v130 = v165;
    v131 = (double (**)())(v129 + *(int *)(v165 + 36));
    *v131 = sub_100189FEC;
    v131[1] = (double (*)())v128;
    v131[2] = 0;
    v131[3] = 0;
    sub_100011F54((uint64_t)v121, type metadata accessor for WorkloadListItemStack);
    v132 = v144;
    sub_100045AD4(v129, v144, &qword_100823BB8);
    v133 = v163;
    sub_100021CC0(v132, v163, &qword_100823BB8);
    swift_storeEnumTagMultiPayload(v133, v162, 1);
    v134 = sub_10018A04C();
    v135 = sub_10018A110();
    v136 = v164;
    _ConditionalContent<>.init(storage:)(v133, v161, v130, v134, v135);
    sub_10001BE90(v132, &qword_100823BB8);
    sub_100011F54(v51, type metadata accessor for FitnessPlusStackViewModel);
    v137 = sub_100047110(&qword_100823BE0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v136, 0, 1, v137);
    v102 = (uint64_t)v136;
  }
  return sub_100045AD4(v102, v167, &qword_100823BC8);
}

void sub_1001893D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t HistoryItemView;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;

  v2 = v1;
  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v31 = *(_QWORD *)(HistoryItemView - 8);
  __chkstk_darwin(HistoryItemView);
  v32 = v5;
  v33 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110((uint64_t *)&unk_10082EDF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = type metadata accessor for AttributedString(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(*(id *)(v1 + 40), "formattedTypeForWorkout:workoutActivity:context:", a1, 0, CFSTR("WorkoutsListDisplayContext"));
  AttributedString.init(_:)(v16);
  KeyPath = swift_getKeyPath(&unk_100629170);
  v17 = swift_getKeyPath(&unk_1006291A0);
  v36 = static Color.white.getter();
  v18 = sub_1000EA158();
  AttributedString.subscript.setter(&v36, v17, v18);
  v34 = swift_getKeyPath(&unk_100629100);
  v19 = swift_getKeyPath(&unk_100629130);
  v36 = static Font.body.getter(v20);
  v21 = sub_1000EA1DC();
  AttributedString.subscript.setter(&v36, v19, v21);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_100021CC0((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_10082EDF0);
  v22 = sub_100047110(&qword_100823B08);
  State.wrappedValue.setter(v9, v22);
  sub_10001BE90((uint64_t)v11, (uint64_t *)&unk_10082EDF0);
  v23 = *(char **)(v2 + 56);
  v24 = a1;
  LOBYTE(a1) = sub_1005EEA88(v24);

  if ((a1 & 1) != 0)
  {
    v25 = v33;
    sub_10004F8C8(v2, v33, type metadata accessor for LoadHistoryItemView);
    v26 = *(unsigned __int8 *)(v31 + 80);
    v27 = (v26 + 24) & ~v26;
    v28 = swift_allocObject(&unk_10078AAA8, v27 + v32, v26 | 7);
    *(_QWORD *)(v28 + 16) = v24;
    sub_100047C88(v25, v28 + v27, type metadata accessor for LoadHistoryItemView);
    v29 = v24;
    sub_10010E6C8(v29, (void (*)(_QWORD))sub_10018A438, v28, v23);

    swift_release(v28);
    v16 = v29;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

}

double sub_1001896D8(uint64_t a1, uint64_t a2)
{
  uint64_t HistoryItemView;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *);
  double result;
  uint64_t v12;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v5 = *(_QWORD *)(HistoryItemView - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(HistoryItemView);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F8C8(a1, (uint64_t)v7, type metadata accessor for LoadHistoryItemView);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (void (*)(char *))swift_allocObject(&unk_10078AAD0, v9 + v6, v8 | 7);
  sub_100047C88((uint64_t)v7, (uint64_t)v10 + v9, type metadata accessor for LoadHistoryItemView);
  sub_100394930(a2, (void (*)(char *))sub_10018A5C4, v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

double sub_1001897B4(char *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;

  v4 = sub_100047110((uint64_t *)&unk_10082EDF0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = *(void **)&a1[OBJC_IVAR___CHCatalogItemViewModel_title];
    v16 = a1;
    AttributedString.init(_:)(v15);
    KeyPath = swift_getKeyPath(&unk_100629170);
    *(&v32 - 2) = __chkstk_darwin(KeyPath);
    v18 = swift_getKeyPath(&unk_1006291A0);
    v33 = static Color.white.getter();
    v19 = sub_1000EA158();
    AttributedString.subscript.setter(&v33, v18, v19);
    v20 = swift_getKeyPath(&unk_100629100);
    *(&v32 - 2) = __chkstk_darwin(v20);
    v21 = swift_getKeyPath(&unk_100629130);
    v33 = static Font.body.getter(v22);
    v23 = sub_1000EA1DC();
    AttributedString.subscript.setter(&v33, v21, v23);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v14, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    type metadata accessor for LoadHistoryItemView(0);
    sub_100021CC0((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_10082EDF0);
    v24 = sub_100047110(&qword_100823B08);
    State.wrappedValue.setter(v7, v24);
    sub_10001BE90((uint64_t)v9, (uint64_t *)&unk_10082EDF0);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    v26 = static os_log_type_t.error.getter(v12);
    v27 = (void *)HKLogActivity;
    v28 = sub_100047110((uint64_t *)&unk_100827460);
    v29 = swift_allocObject(v28, 112, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_100038CF8();
    *(_QWORD *)(v29 + 32) = 0xD000000000000018;
    *(_QWORD *)(v29 + 40) = 0x800000010068CA70;
    *(_QWORD *)(v29 + 96) = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
    *(_QWORD *)(v29 + 104) = sub_10018A478();
    *(_QWORD *)(v29 + 72) = a2;
    v30 = v27;
    v31 = a2;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v30, "%@ failed to fetch catalog item view model for workout %@", 57, 2, v29);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v29).n128_u64[0];
  }
  return result;
}

double sub_100189AF8(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t KeyPath;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v2 = sub_100047110((uint64_t *)&unk_10082EDF0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v30 - v6;
  v8 = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v13 = *(void **)&a1[OBJC_IVAR___CHCatalogItemViewModel_title];
    v14 = a1;
    AttributedString.init(_:)(v13);
    KeyPath = swift_getKeyPath(&unk_100629170);
    *(&v30 - 2) = __chkstk_darwin(KeyPath);
    v16 = swift_getKeyPath(&unk_1006291A0);
    v31 = static Color.white.getter();
    v17 = sub_1000EA158();
    AttributedString.subscript.setter(&v31, v16, v17);
    v18 = swift_getKeyPath(&unk_100629208);
    *(&v30 - 2) = __chkstk_darwin(v18);
    v19 = swift_getKeyPath(&unk_100629238);
    if (qword_10081D628 != -1)
      swift_once(&qword_10081D628, sub_100187A98);
    v20 = (void *)qword_100823B00;
    v31 = qword_100823B00;
    v21 = sub_10018A608();
    v22 = v20;
    AttributedString.subscript.setter(&v31, v19, v21);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v12, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    type metadata accessor for LoadHistoryItemView(0);
    sub_100021CC0((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_10082EDF0);
    v23 = sub_100047110(&qword_100823B08);
    State.wrappedValue.setter(v5, v23);
    sub_10001BE90((uint64_t)v7, (uint64_t *)&unk_10082EDF0);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    v25 = static os_log_type_t.error.getter(v10);
    v26 = (void *)HKLogActivity;
    v27 = sub_100047110((uint64_t *)&unk_100827460);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100622F90;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_100038CF8();
    *(_QWORD *)(v28 + 32) = 0xD000000000000023;
    *(_QWORD *)(v28 + 40) = 0x800000010068CAD0;
    v29 = v26;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v29, "%@ failed to fetch catalog item view model for stack", 52, 2, v28);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
  }
  return result;
}

uint64_t sub_100189E4C()
{
  uint64_t v0;
  uint64_t HistoryItemView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v2 = *(_QWORD *)(HistoryItemView - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for FitnessPlusStackViewModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + v4));

  sub_10010C5EC(*(id *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 72));
  v10 = v0 + v4 + *(int *)(HistoryItemView + 36);
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v13 = v3 | v8 | 7;
  v14 = (v4 + v5 + v8) & ~v8;
  v15 = v14 + v9;
  v16 = sub_100047110(&qword_100823B08);
  swift_release(*(_QWORD *)(v10 + *(int *)(v16 + 28)));
  v17 = v0 + v14;
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[6] + 8));
  v20 = swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[7] + 8));
  ((void (*)(uint64_t, uint64_t, __n128))v19)(v17 + v6[8], v18, v20);
  v21 = v17 + v6[9];
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  return swift_deallocObject(v0, v15, v13);
}

double sub_100189FEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for LoadHistoryItemView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FitnessPlusStackViewModel(0) - 8) + 80);
  return sub_1001896D8(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t sub_10018A04C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100823BE8;
  if (!qword_100823BE8)
  {
    v1 = sub_100007050(&qword_100823BD8);
    v2[0] = type metadata accessor for WorkloadListItemStack(255);
    v2[1] = &type metadata for WorkoutEntity;
    v2[2] = sub_1000083D8(&qword_100823BF0, type metadata accessor for WorkloadListItemStack, (uint64_t)&unk_10062EE78);
    v2[3] = sub_100112214();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823BE8);
  }
  return result;
}

unint64_t sub_10018A110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823BF8;
  if (!qword_100823BF8)
  {
    v1 = sub_100007050(&qword_100823BB8);
    sub_1000083D8(&qword_100823BF0, type metadata accessor for WorkloadListItemStack, (uint64_t)&unk_10062EE78);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823BF8);
  }
  return result;
}

uint64_t sub_10018A1A0()
{
  return 8;
}

uint64_t sub_10018A1AC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_10018A1B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_10018A1C8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10018A1D4()
{
  uint64_t v0;
  uint64_t HistoryItemView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v2 = *(_QWORD *)(HistoryItemView - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + v4));

  sub_10010C5EC(*(id *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 72));
  v6 = v0 + v4 + *(int *)(HistoryItemView + 36);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = sub_100047110(&qword_100823B08);
  swift_release(*(_QWORD *)(v6 + *(int *)(v10 + 28)));

  return swift_deallocObject(v0, v9 + 8, v3 | 7);
}

void sub_10018A2D4()
{
  uint64_t v0;
  uint64_t HistoryItemView;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  sub_1001893D4(*(void **)(v0
                         + ((*(_QWORD *)(*(_QWORD *)(HistoryItemView - 8) + 64)
                           + ((*(unsigned __int8 *)(*(_QWORD *)(HistoryItemView - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(HistoryItemView - 8) + 80))
                           + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10018A330()
{
  return 8;
}

uint64_t sub_10018A344()
{
  uint64_t v0;
  uint64_t HistoryItemView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v2 = *(_QWORD *)(HistoryItemView - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + v4));
  sub_10010C5EC(*(id *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 72));
  v6 = v0 + v4 + *(int *)(HistoryItemView + 36);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = sub_100047110(&qword_100823B08);
  swift_release(*(_QWORD *)(v6 + *(int *)(v9 + 28)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_10018A438(char *a1)
{
  uint64_t v1;

  type metadata accessor for LoadHistoryItemView(0);
  return sub_1001897B4(a1, *(void **)(v1 + 16));
}

unint64_t sub_10018A478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839280;
  if (!qword_100839280)
  {
    v1 = sub_10001E724(255, (unint64_t *)&qword_100828390, HKWorkout_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100839280);
  }
  return result;
}

uint64_t sub_10018A4D8()
{
  uint64_t v0;
  uint64_t HistoryItemView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  HistoryItemView = type metadata accessor for LoadHistoryItemView(0);
  v2 = *(_QWORD *)(HistoryItemView - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + v4));

  sub_10010C5EC(*(id *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 72));
  v6 = v0 + v4 + *(int *)(HistoryItemView + 36);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = sub_100047110(&qword_100823B08);
  swift_release(*(_QWORD *)(v6 + *(int *)(v9 + 28)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_10018A5C4(char *a1)
{
  type metadata accessor for LoadHistoryItemView(0);
  return sub_100189AF8(a1);
}

unint64_t sub_10018A608()
{
  unint64_t result;

  result = qword_100823C00;
  if (!qword_100823C00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.UIKitAttributes.FontAttribute, &type metadata for AttributeScopes.UIKitAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_100823C00);
  }
  return result;
}

uint64_t sub_10018A650()
{
  return 8;
}

unint64_t sub_10018A668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823C08;
  if (!qword_100823C08)
  {
    v1 = sub_100007050(&qword_100823BC8);
    sub_10018A6CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100823C08);
  }
  return result;
}

unint64_t sub_10018A6CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823C10;
  if (!qword_100823C10)
  {
    v1 = sub_100007050(&qword_100823BE0);
    sub_10018A04C();
    sub_10018A110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823C10);
  }
  return result;
}

void sub_10018A750()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8);
  *v8 = v5;
  v8[1] = v7;
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  v11 = v8[1];
  if (v11)
  {
    swift_bridgeObjectRetain(v11);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v10, "setText:", v12);

}

void sub_10018A90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  BOOL v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  double v53;
  id v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  void **p_vtable;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 v79;
  unint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t, __n128);
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, char *);
  char *v89;
  unint64_t *v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  void (*v98)(char *, char *);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char **v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  void (*v115)(char *, _QWORD, uint64_t, __n128);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, char *);
  void (*v123)(char *, uint64_t);
  char *v124;
  char *v125;
  _QWORD v126[4];
  char v127[24];

  v1 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v110 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DateComponents(0);
  v111 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v109 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char **)type metadata accessor for Calendar.Component(0);
  v121 = (uint64_t)*(v6 - 1);
  __chkstk_darwin(v6);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110((uint64_t *)&unk_100828370);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v113 = (char *)&v101 - v13;
  v14 = type metadata accessor for Date(0);
  v114 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v118 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v101 - v18;
  v20 = __chkstk_darwin(v17);
  v21 = __chkstk_darwin(v20);
  v117 = (char *)&v101 - v22;
  __chkstk_darwin(v21);
  v119 = v0;
  v25 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData);
  if (!v25)
    return;
  v105 = v24;
  v104 = v4;
  v106 = v2;
  v26 = (void (*)(char *, uint64_t))((unint64_t)v25 >> 62);
  v112 = (char *)&v101 - v23;
  if ((unint64_t)v25 >> 62)
    goto LABEL_50;
  v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v25, 2);
  while (1)
  {
    v124 = v12;
    v125 = (char *)v14;
    v120 = v19;
    v108 = v6;
    v107 = v1;
    v123 = v26;
    if (!v27)
      break;
    if (v27 < 1)
    {
      __break(1u);
      goto LABEL_55;
    }
    v29 = 0;
    v1 = 0;
    v14 = v25 & 0xC000000000000001;
    v6 = &selRef_tableView_titleForHeaderInSection_;
    while (1)
    {
      v30 = v14
          ? (void (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v25)
          : (void (*)(char *, uint64_t))*(id *)(v25 + 8 * v29 + 32);
      v26 = v30;
      v12 = (char *)objc_msgSend(v30, "state");

      v31 = v12 == (char *)1;
      v32 = __OFADD__(v1, v31);
      v1 += v31;
      if (v32)
        break;
      if (v27 == ++v29)
        goto LABEL_14;
    }
    __break(1u);
LABEL_50:
    if (v25 < 0)
      v100 = v25;
    else
      v100 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v25, 2);
    v28 = _CocoaArrayWrapper.endIndex.getter(v100);
    v27 = v28;
  }
  v1 = 0;
LABEL_14:
  swift_bridgeObjectRelease(v25);
  v33 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v33, "localizedStringForKey:value:table:", v34, 0, 0);

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = *(void **)(v119 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel);
  v40 = sub_100047110((uint64_t *)&unk_100827460);
  v41 = swift_allocObject(v40, 72, 7);
  v103 = xmmword_100622F90;
  *(_OWORD *)(v41 + 16) = xmmword_100622F90;
  *(_QWORD *)(v41 + 56) = &type metadata for Int;
  *(_QWORD *)(v41 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v41 + 32) = v1;
  v42 = static String.localizedStringWithFormat(_:_:)(v36, v38, v41);
  v44 = v43;
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v38);
  v126[0] = v42;
  v126[1] = v44;
  v45 = sub_100038CA0();
  StringProtocol.localizedUppercase.getter(&type metadata for String, v45);
  v47 = v46;
  swift_bridgeObjectRelease(v44);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "setText:", v48, swift_bridgeObjectRelease(v47).n128_f64[0]);

  if (!v27)
  {
    swift_bridgeObjectRelease(v25);
LABEL_47:
    sub_1005B7EA0(0);
    return;
  }
  if (v123)
  {
    if (v25 < 0)
      v50 = v25;
    else
      v50 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v49 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v25);
    v1 = (uint64_t)v108;
    v12 = v125;
    v14 = v114;
    v19 = v117;
    if ((v49 & 0x8000000000000000) != 0)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
  }
  else
  {
    v49 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    v1 = (uint64_t)v108;
    v12 = v125;
    v14 = v114;
    v19 = v117;
  }
  if (!v49)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v28 = sub_10004D28C(v49);
  if ((v25 & 0xC000000000000001) == 0)
  {
    v51 = v112;
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v28 < *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v52 = *(id *)(v25 + 8 * v28 + 32);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_60;
  }
LABEL_57:
  v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v25);
  v51 = v112;
LABEL_27:
  *(_QWORD *)&v53 = swift_bridgeObjectRelease(v25).n128_u64[0];
  v102 = v52;
  v54 = objc_msgSend(v52, "timeStamp", v53);
  Date.init(timeIntervalSinceReferenceDate:)(v54, v55);
  if (qword_10081D558 != -1)
LABEL_60:
    swift_once(&qword_10081D558, sub_100006F7C);
  v56 = v107;
  v57 = sub_10003CE9C(v107, (uint64_t)qword_100869D40);
  Calendar.startOfDay(for:)(v51);
  v58 = v121;
  v59 = *(void (**)(char *, _QWORD, uint64_t))(v121 + 104);
  v59(v8, enum case for Calendar.Component.day(_:), v1);
  v60 = (uint64_t)v113;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, 1, v19, 0);
  v123 = *(void (**)(char *, uint64_t))(v58 + 8);
  v123(v8, v1);
  v122 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v14 + 48);
  v61 = v122(v60, 1, v12);
  v115 = (void (*)(char *, _QWORD, uint64_t, __n128))v59;
  v116 = v57;
  if (v61 == 1)
  {
    sub_10018DFE8(v60);
    v62 = v119;
    p_vtable = (void **)(&OBJC_METACLASS___CHFitnessAppBadgeAggregator + 24);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, char *))(v14 + 32))(v105, v60, v12);
    v64 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v110, v57, v56);
    v65 = sub_100047110((uint64_t *)&unk_100828720);
    v66 = *(unsigned __int8 *)(v58 + 80);
    v67 = (v66 + 32) & ~v66;
    v68 = swift_allocObject(v65, v67 + *(_QWORD *)(v58 + 72), v66 | 7);
    *(_OWORD *)(v68 + 16) = v103;
    v69 = v68 + v67;
    v59((char *)v69, enum case for Calendar.Component.hour(_:), v1);
    v70 = sub_1002302F0(v68);
    swift_setDeallocating(v68);
    swift_arrayDestroy(v69, 1, v1);
    swift_deallocClassInstance(v68, 32, 7);
    v71 = v109;
    v72 = v105;
    Calendar.dateComponents(_:from:to:)(v70, v19, v105);
    v73 = swift_bridgeObjectRelease(v70);
    v74 = (*(uint64_t (**)(char *, uint64_t, __n128))(v106 + 8))(v64, v56, v73);
    v75 = DateComponents.hour.getter(v74);
    LOBYTE(v69) = v76;
    (*(void (**)(char *, uint64_t))(v111 + 8))(v71, v104);
    (*(void (**)(uint64_t, char *))(v114 + 8))(v72, v125);
    v62 = v119;
    p_vtable = &OBJC_METACLASS___CHFitnessAppBadgeAggregator.vtable;
    if ((v69 & 1) == 0)
      *(_QWORD *)(v119 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins) = v75;
  }
  v77 = (uint64_t *)(v62 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets);
  swift_beginAccess(v62 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets, v127, 1, 0);
  v78 = *v77;
  *v77 = (uint64_t)_swiftEmptyArrayStorage;
  v79 = swift_bridgeObjectRelease(v78);
  v80 = *(_QWORD *)((char *)p_vtable[392] + v62);
  if ((v80 & 0x8000000000000000) == 0)
  {
    v82 = v114;
    v81 = v115;
    if (v80)
    {
      v83 = 0;
      LODWORD(v121) = enum case for Calendar.Component.hour(_:);
      v113 = (char *)v80;
      do
      {
        v81(v8, v121, v1, v79);
        v84 = (uint64_t)v124;
        Calendar.date(byAdding:value:to:wrappingComponents:)(v8, v83, v19, 0);
        v123(v8, v1);
        v85 = v125;
        if (v122(v84, 1, v125) == 1)
        {
          sub_10018DFE8(v84);
        }
        else
        {
          v86 = v8;
          v87 = v1;
          v88 = *(void (**)(char *, uint64_t, char *))(v82 + 32);
          v89 = v120;
          v88(v120, v84, v85);
          v91 = sub_10018B334((uint64_t)v126);
          if (*v90)
          {
            v92 = v90;
            (*(void (**)(char *, char *, char *))(v82 + 16))(v118, v89, v85);
            v93 = *v92;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v92);
            *v92 = v93;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v93 = sub_100048E4C(0, *(_QWORD *)(v93 + 16) + 1, 1, v93);
              *v92 = v93;
            }
            v96 = *(_QWORD *)(v93 + 16);
            v95 = *(_QWORD *)(v93 + 24);
            if (v96 >= v95 >> 1)
            {
              v93 = sub_100048E4C(v95 > 1, v96 + 1, 1, v93);
              *v92 = v93;
            }
            v1 = v87;
            *(_QWORD *)(v93 + 16) = v96 + 1;
            v82 = v114;
            v97 = v125;
            v88((char *)(v93+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v114 + 72) * v96), (uint64_t)v118, v125);
            ((void (*)(_QWORD *, _QWORD))v91)(v126, 0);
            (*(void (**)(char *, char *))(v82 + 8))(v120, v97);
          }
          else
          {
            ((void (*)(_QWORD *, _QWORD))v91)(v126, 0);
            (*(void (**)(char *, char *))(v82 + 8))(v89, v85);
          }
          v8 = v86;
          v19 = v117;
          v81 = v115;
          v80 = (unint64_t)v113;
        }
        ++v83;
      }
      while ((char *)v80 != v83);
    }

    v98 = *(void (**)(char *, char *))(v82 + 8);
    v99 = v125;
    v98(v19, v125);
    v98(v112, v99);
    goto LABEL_47;
  }
  __break(1u);
}

void *sub_10018B334(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_10018B37C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  char v15;
  id v16;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair);
  v6 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                             + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
  if (v7)
  {
    v8 = v7;
    v9 = sub_1001B69BC(a1, a2, v7);

    if (v9)
    {
      v10 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
      v11 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
      *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v9;
      v16 = v9;

      v12 = *(void **)(v5 + v6);
      objc_msgSend(v12, "setText:", 0);
      objc_msgSend(v12, "setAttributedText:", *(_QWORD *)(v5 + v10));

      v13 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton);
      v14 = objc_msgSend(v13, "isHidden");
      v15 = 1;
      if ((v14 & 1) == 0)
      {
        if (a2)
          v15 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday) ^ 1;
      }
      objc_msgSend(v13, "setHidden:", v15 & 1);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10018B4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  id v4;
  _BYTE *v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  Class isa;
  Class v13;
  objc_class *v14;
  char *v15;
  id v16;
  Class v17;
  objc_class *v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  Class v43;
  Class v44;
  char *v45;
  id v46;
  Class v47;
  char *v48;
  char *v49;
  id v50;
  void *v51;
  double v52;
  double v53;
  id v54;
  NSString v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  NSString v64;
  id v65;
  char *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  id v75;
  id v76;
  uint64_t v77;
  id v78;
  NSString v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  UIMenuElementSize preferredElementSize;
  Swift::String v98;
  UIMenu v99;
  id v100;
  id v101;
  id v102;
  NSString v103;
  id v104;
  id v105;
  id v106;
  id v107;
  void *v108;
  id v109;
  Class v110;
  Class v111;
  char *v112;
  id v113;
  Class v114;
  char *v115;
  char *v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  unsigned int v124;
  id v125;
  id v126;
  id v128;
  id v130;
  id v131;
  objc_class *v132;
  objc_class *v133;
  objc_super v134;
  objc_super v135;
  _QWORD aBlock[5];
  uint64_t v137;
  objc_super v138;
  objc_super v139;
  objc_super v140;
  objc_super v141;
  objc_super v142;
  UIImage_optional v143;

  v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isWheelchair] = 0;
  v4 = objc_allocWithZone((Class)type metadata accessor for DayViewTitleAndValueLabelPair());
  v5 = v3;
  v6 = (char *)objc_msgSend(v4, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v131 = (id)objc_opt_self(UIColor);
  v7 = objc_msgSend(v131, "labelColor");
  v8 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  v9 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor];
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor] = v7;
  v10 = v7;

  v11 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel], "setTextColor:", *(_QWORD *)&v6[v8]);

  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  v13 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  v14 = (objc_class *)type metadata accessor for GradientColors();
  v15 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
  *(_QWORD *)&v15[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v13;
  v142.receiver = v15;
  v142.super_class = v14;
  v133 = v14;
  v16 = objc_msgSendSuper2(&v142, "init");
  v17 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  v18 = (objc_class *)type metadata accessor for MetricColors();
  v19 = (char *)objc_allocWithZone(v18);
  *(_QWORD *)&v19[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v16;
  *(_QWORD *)&v19[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v17;
  v141.receiver = v19;
  v141.super_class = v18;
  v132 = v18;
  v20 = (char *)objc_msgSendSuper2(&v141, "init");
  v21 = *(id *)&v20[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v22 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v23 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v21;
  v24 = v21;

  objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setTextColor:", *(_QWORD *)&v6[v22]);
  v25 = (void *)objc_opt_self(NSBundle);
  v26 = objc_msgSend(v25, "mainBundle");
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = (uint64_t *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v33 = *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v32 = v29;
  v32[1] = v31;
  swift_bridgeObjectRetain(v31);
  v34 = swift_bridgeObjectRelease(v33).n128_u64[0];
  v35 = *(void **)&v6[v11];
  v36 = v32[1];
  if (v36)
  {
    swift_bridgeObjectRetain(v32[1]);
    v37 = String._bridgeToObjectiveC()();
    v34 = swift_bridgeObjectRelease(v36).n128_u64[0];
  }
  else
  {
    v37 = 0;
  }
  v38 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  objc_msgSend(v35, "setText:", v37, *(double *)&v34);

  swift_bridgeObjectRelease(v31);
  *(_QWORD *)&v5[v38] = v6;
  v39 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel;
  v40 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v41 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption1);
  v42 = (void *)UILabel.withFont(_:)(v41);

  v43 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  v44 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  v45 = (char *)objc_allocWithZone(v133);
  *(_QWORD *)&v45[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v43;
  *(_QWORD *)&v45[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v44;
  v140.receiver = v45;
  v140.super_class = v133;
  v46 = objc_msgSendSuper2(&v140, "init");
  v47 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  v48 = (char *)objc_allocWithZone(v132);
  *(_QWORD *)&v48[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v46;
  *(_QWORD *)&v48[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v47;
  v139.receiver = v48;
  v139.super_class = v132;
  v49 = (char *)objc_msgSendSuper2(&v139, "init");
  v50 = *(id *)&v49[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v51 = (void *)UILabel.withTextColor(_:)(v50);
  LODWORD(v52) = 1148846080;
  objc_msgSend(v51, "setContentCompressionResistancePriority:forAxis:", 1, v52);
  LODWORD(v53) = 1148846080;
  objc_msgSend(v51, "setContentHuggingPriority:forAxis:", 1, v53);
  v54 = objc_msgSend(v25, "mainBundle");
  v55 = String._bridgeToObjectiveC()();
  v56 = objc_msgSend(v54, "localizedStringForKey:value:table:", v55, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v58 = v57;

  v59 = String._bridgeToObjectiveC()();
  objc_msgSend(v51, "setText:", v59);

  swift_bridgeObjectRelease(v58);
  *(_QWORD *)&v5[v39] = v51;
  v60 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  v61 = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v61, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v5[v60] = v61;
  v62 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  type metadata accessor for ActivityStandChartView();
  *(_QWORD *)&v5[v62] = sub_1005AEF5C();
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins] = 24;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData] = 0;
  v63 = &v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal];
  *v63 = 0;
  v63[1] = 0;
  v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets] = 0;

  if (a3)
  {
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v64 = 0;
  }
  v138.receiver = v5;
  v138.super_class = (Class)type metadata accessor for DayViewStandChartTableViewCell();
  v65 = objc_msgSendSuper2(&v138, "initWithStyle:reuseIdentifier:", a1, v64);

  v66 = (char *)v65;
  v67 = objc_msgSend(v131, "systemBackgroundColor");
  objc_msgSend(v66, "setBackgroundColor:", v67);

  v68 = objc_msgSend(v66, "contentView");
  objc_msgSend(v68, "addSubview:", *(_QWORD *)&v66[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair]);

  v69 = objc_msgSend(v66, "contentView");
  v70 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  objc_msgSend(v69, "addSubview:", *(_QWORD *)&v66[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView]);

  v71 = *(char **)&v66[v70];
  v72 = &v71[OBJC_IVAR____TtC10FitnessApp22ActivityStandChartView_dataProvider];
  *((_QWORD *)v72 + 1) = &off_10078AB68;
  swift_unknownObjectWeakAssign(v72, v66);
  v73 = v66;
  v74 = v71;
  sub_1005B7EA0(0);

  v75 = objc_msgSend(v73, "contentView");
  objc_msgSend(v75, "addSubview:", *(_QWORD *)&v73[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel]);

  v76 = objc_msgSend(v73, "contentView");
  v77 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  objc_msgSend(v76, "addSubview:", *(_QWORD *)&v73[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton]);

  sub_10001E724(0, &qword_100823C90, UIAction_ptr);
  v78 = objc_msgSend(v25, "mainBundle");
  v79 = String._bridgeToObjectiveC()();
  v80 = objc_msgSend(v78, "localizedStringForKey:value:table:", v79, 0, 0);

  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v83 = v82;

  v84 = String._bridgeToObjectiveC()();
  v85 = (void *)objc_opt_self(UIImage);
  v86 = objc_msgSend(v85, "smm_systemImageNamed:", v84);

  v87 = swift_allocObject(&unk_10078AB90, 24, 7);
  swift_unknownObjectWeakInit(v87 + 16, v73);
  v88 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v81, v83, 0, 0, v86, 0, 0, 0, 0);
  v89 = (void *)objc_opt_self(UIDeferredMenuElement);
  v90 = swift_allocObject(&unk_10078ABB8, 24, 7);
  *(_QWORD *)(v90 + 16) = v73;
  aBlock[4] = sub_10018E08C;
  v137 = v90;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002FE51C;
  aBlock[3] = &unk_10078ABD0;
  v91 = _Block_copy(aBlock);
  v92 = v137;
  v93 = v73;
  v94 = objc_msgSend(v89, "elementWithUncachedProvider:", v91, swift_release(v92).n128_f64[0]);
  _Block_release(v91);
  sub_10001E724(0, (unint64_t *)&unk_10082EEC0, UIMenu_ptr);
  v95 = sub_100047110((uint64_t *)&unk_100828340);
  v96 = swift_allocObject(v95, 48, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100629280;
  *(_QWORD *)(v96 + 32) = v88;
  *(_QWORD *)(v96 + 40) = v94;
  aBlock[0] = v96;
  specialized Array._endMutation()(v96);
  preferredElementSize = aBlock[0];
  v130 = v88;
  v128 = v94;
  v98._countAndFlagsBits = 0;
  v98._object = (void *)0xE000000000000000;
  v143.value.super.isa = 0;
  v143.is_nil = 0;
  v99.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v98, (Swift::String_optional)0, v143, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;
  v100 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 5, 30.0);
  v101 = *(id *)&v73[v77];
  v102 = v100;
  v103 = String._bridgeToObjectiveC()();
  v104 = objc_msgSend(v85, "smm_systemImageNamed:withConfiguration:", v103, v102);

  objc_msgSend(v101, "setImage:forState:", v104, 0);
  v105 = *(id *)&v73[v77];
  v106 = objc_msgSend(v131, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v105, "setBackgroundColor:", v106);

  v107 = objc_msgSend(*(id *)&v73[v77], "layer");
  objc_msgSend(v107, "setMasksToBounds:", 1);

  v108 = *(void **)&v73[v77];
  objc_msgSend(v108, "setMenu:", v99.super.super.isa);
  v109 = v108;
  v110 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  v111 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  v112 = (char *)objc_allocWithZone(v133);
  *(_QWORD *)&v112[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v110;
  *(_QWORD *)&v112[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v111;
  v135.receiver = v112;
  v135.super_class = v133;
  v113 = objc_msgSendSuper2(&v135, "init");
  v114 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  v115 = (char *)objc_allocWithZone(v132);
  *(_QWORD *)&v115[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v113;
  *(_QWORD *)&v115[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v114;
  v134.receiver = v115;
  v134.super_class = v132;
  v116 = (char *)objc_msgSendSuper2(&v134, "init");
  v117 = *(id *)&v116[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  objc_msgSend(v109, "setTintColor:", v117);
  v118 = *(void **)&v73[v77];
  objc_msgSend(v118, "setShowsMenuAsPrimaryAction:", 1);
  v119 = (void *)objc_opt_self(_HKBehavior);
  v120 = v118;
  v121 = objc_msgSend(v119, "sharedBehavior");
  if (v121)
  {
    v122 = v121;
    v123 = objc_msgSend(v121, "features");

    if (v123)
    {
      v124 = objc_msgSend(v123, "scheduledGoals");

      objc_msgSend(v120, "setHidden:", v124 ^ 1);
      v125 = *(id *)&v73[v77];
      UIEdgeInsets.init(uniform:)(5.0);
      objc_msgSend(v125, "setContentEdgeInsets:");

      sub_10018CF74();
      v126 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      objc_msgSend(v126, "addObserver:selector:name:object:", v93, "updateFonts", UIContentSizeCategoryDidChangeNotification, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double sub_10018C378(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v6 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor(0);
  v10 = a3;
  swift_retain(a2);
  v12 = static MainActor.shared.getter(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_10078AC08, 56, 7);
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v10;
  v13[5] = a1;
  v13[6] = a2;
  v14 = sub_10020D9C0((uint64_t)v8, (uint64_t)&unk_100823CA0, (uint64_t)v13);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_10018C474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = sub_100047110(&qword_100823CA8);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_100823CB0);
  v6[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100823CB8);
  v6[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[14] = v12;
  v6[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  v6[16] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v6[17] = v14;
  v6[18] = v15;
  return swift_task_switch(sub_10018C568, v14, v15);
}

id sub_10018C568()
{
  _QWORD *v0;
  uint64_t KeyPath;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;

  v30 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v0[19] = v30;
  KeyPath = swift_getKeyPath(&unk_1006292E0);
  SortDescriptor.init<A>(_:order:)(KeyPath, 1);
  v2 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "activityGoalScheduleType");
  if (result)
  {
    v4 = result;
    v5 = v0[14];
    v29 = v0[15];
    v7 = v0[12];
    v6 = v0[13];
    v8 = v0[10];
    v9 = v0[11];
    v10 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
    static HKSamplePredicate.sample(type:predicate:)(v4, 0, v10);

    v11 = sub_100047110(&qword_100823CC0);
    v12 = *(unsigned __int8 *)(v9 + 80);
    v13 = (v12 + 32) & ~v12;
    v14 = swift_allocObject(v11, v13 + *(_QWORD *)(v9 + 72), v12 | 7);
    *(_OWORD *)(v14 + 16) = xmmword_100622F90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v14 + v13, v7, v8);
    v15 = sub_100047110(&qword_100823CC8);
    v16 = *(unsigned __int8 *)(v5 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(v15, v17 + *(_QWORD *)(v5 + 72), v16 | 7);
    *(_OWORD *)(v18 + 16) = xmmword_100622F90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18 + v17, v29, v6);
    HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)(v14, v18, 0, 1, v10);
    v19 = (void *)objc_opt_self(NSBundle);
    v0[20] = v19;
    v20 = objc_msgSend(v19, "mainBundle");
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "localizedStringForKey:value:table:", v21, 0, 0);

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    v0[2] = v23;
    v0[3] = v24;

    v0[21] = v25;
    v26 = String._bridgeToObjectiveC()();
    v27 = (void *)objc_opt_self(UIImage);
    v0[22] = v27;
    v0[23] = objc_msgSend(v27, "smm_systemImageNamed:", v26);

    v28 = (_QWORD *)swift_task_alloc(async function pointer to HKSampleQueryDescriptor.result(for:)[1]);
    v0[24] = v28;
    *v28 = v0;
    v28[1] = sub_10018C830;
    return (id)HKSampleQueryDescriptor.result(for:)(v30, v0[7]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10018C830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10018CC1C;
  else
    v5 = sub_10018C898;
  return swift_task_switch(v5, v3[17], v3[18]);
}

uint64_t sub_10018C898()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  __n128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 128));
  v2 = *(id *)(v0 + 200);
  if (v1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  for (; v3; v4 = *(_QWORD *)(v0 + 200))
  {
    v5 = 0;
    v1 &= 0xC000000000000001;
    v6 = v4 + 32;
    while (1)
    {
      v2 = v1
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, *(_QWORD *)(v0 + 200))
         : *(id *)(v6 + 8 * v5);
      v7 = v2;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      v9 = objc_opt_self(HKActivityGoalSchedule);
      v10 = (void *)swift_dynamicCastObjCClass(v7, v9);
      if (v10 && objc_msgSend(v10, "goalType") == (id)3)
      {
        v11 = *(_QWORD *)(v0 + 200);
        v12 = *(void **)(v0 + 176);
        v13 = *(void **)(v0 + 184);
        v14 = *(void **)(v0 + 160);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
        swift_bridgeObjectRelease_n(v11, 2);
        v15 = objc_msgSend(v14, "mainBundle");
        v16 = String._bridgeToObjectiveC()();
        v17 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, 0, 0);

        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v35 = v18;

        v19 = String._bridgeToObjectiveC()();
        v20 = objc_msgSend(v12, "smm_systemImageNamed:", v19);

        goto LABEL_14;
      }

      ++v5;
      if (v8 == v3)
      {
        v4 = *(_QWORD *)(v0 + 200);
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_16:
    if ((uint64_t)v2 < 0)
      v33 = (uint64_t)v2;
    else
      v33 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v33);
  }
LABEL_13:
  swift_bridgeObjectRelease_n(v4, 2);
  v20 = *(id *)(v0 + 184);
  v34 = *(_QWORD *)(v0 + 16);
  v35 = *(_QWORD *)(v0 + 168);
LABEL_14:
  v39 = *(void **)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v42 = *(_QWORD *)(v0 + 112);
  v43 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 72);
  v40 = *(_QWORD *)(v0 + 88);
  v41 = *(_QWORD *)(v0 + 80);
  v37 = *(_QWORD *)(v0 + 64);
  v38 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 32);
  v36 = *(void (**)(uint64_t))(v0 + 40);
  sub_10001E724(0, &qword_100823C90, UIAction_ptr);
  v25 = swift_allocObject(&unk_10078AB90, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v24);
  v26 = v20;
  v27 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v34, v35, 0, 0, v20, 0, 0, 0, 0);
  v28 = sub_100047110((uint64_t *)&unk_100828340);
  v29 = swift_allocObject(v28, 40, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100623630;
  *(_QWORD *)(v29 + 32) = v27;
  v44 = v29;
  specialized Array._endMutation()(v29);
  v30 = v27;
  v36(v44);

  v31 = swift_bridgeObjectRelease(v44);
  (*(void (**)(uint64_t, uint64_t, __n128))(v37 + 8))(v23, v38, v31);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v22, v41);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v21, v43);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018CC1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __n128 v15;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_errorRelease(v1);
  v2 = *(void **)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 16);
  v20 = *(void **)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v17 = *(void (**)(uint64_t))(v0 + 40);
  sub_10001E724(0, &qword_100823C90, UIAction_ptr);
  v9 = swift_allocObject(&unk_10078AB90, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16, v8);
  v10 = v2;
  v11 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v4, v3, 0, 0, v2, 0, 0, 0, 0);
  v12 = sub_100047110((uint64_t *)&unk_100828340);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100623630;
  *(_QWORD *)(v13 + 32) = v11;
  v25 = v13;
  specialized Array._endMutation()(v13);
  v14 = v11;
  v17(v25);

  v15 = swift_bridgeObjectRelease(v25);
  (*(void (**)(uint64_t, uint64_t, __n128))(v18 + 8))(v7, v19, v15);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v6, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v5, v24);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10018CDF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  _BYTE v9[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v8 = *(void (**)(_QWORD))(Strong + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal);
    v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal + 8);
    sub_10003AFE0((uint64_t)v8, v7);

    if (v8)
    {
      v8(a3 & 1);
      sub_100022BA4((uint64_t)v8, v7);
    }
  }
}

void sub_10018CF74()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  Class isa;
  uint64_t v70;

  v1 = *(char **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair];
  v2 = objc_msgSend(v1, "leadingAnchor");
  v3 = objc_msgSend(v0, "contentView");
  v4 = objc_msgSend(v3, "leadingAnchor");

  v63 = objc_msgSend(v2, "constraintEqualToAnchor:constant:", v4, 16.0);
  v5 = objc_msgSend(v1, "trailingAnchor");
  v6 = objc_msgSend(v0, "contentView");
  v7 = objc_msgSend(v6, "trailingAnchor");

  v61 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v7, -16.0);
  v8 = objc_msgSend(v1, "topAnchor");
  v9 = objc_msgSend(v0, "contentView");
  v10 = objc_msgSend(v9, "topAnchor");

  v59 = objc_msgSend(v8, "constraintEqualToAnchor:", v10);
  v11 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView];
  v12 = objc_msgSend(v11, "leadingAnchor");
  v13 = objc_msgSend(v0, "contentView");
  v14 = objc_msgSend(v13, "leadingAnchor");

  v57 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v14, 16.0);
  v15 = objc_msgSend(v11, "trailingAnchor");
  v16 = objc_msgSend(v0, "contentView");
  v17 = objc_msgSend(v16, "trailingAnchor");

  v55 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v17, -16.0);
  v18 = objc_msgSend(v11, "topAnchor");
  v19 = objc_msgSend(v1, "bottomAnchor");
  v54 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

  v20 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel];
  v21 = objc_msgSend(v20, "leadingAnchor");
  v22 = objc_msgSend(v0, "contentView");
  v23 = objc_msgSend(v22, "leadingAnchor");

  v53 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v23, 16.0);
  v24 = objc_msgSend(v20, "trailingAnchor");
  v25 = objc_msgSend(v0, "contentView");
  v26 = objc_msgSend(v25, "trailingAnchor");

  v52 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v26, -16.0);
  v27 = objc_msgSend(v20, "topAnchor");
  v28 = objc_msgSend(v11, "bottomAnchor");
  v67 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v28, 0.0);

  v29 = objc_msgSend(v20, "bottomAnchor");
  v30 = objc_msgSend(v0, "contentView");
  v31 = objc_msgSend(v30, "bottomAnchor");

  v68 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v31, -27.0);
  v32 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton];
  v33 = objc_msgSend(v32, "centerYAnchor");
  v34 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "centerYAnchor");
  v66 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  v35 = objc_msgSend(v32, "trailingAnchor");
  v36 = objc_msgSend(v0, "contentView");
  v37 = objc_msgSend(v36, "trailingAnchor");

  v65 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v37, -16.0);
  v38 = objc_msgSend(v32, "heightAnchor");
  v39 = objc_msgSend(v32, "widthAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

  v51 = (id)objc_opt_self(NSLayoutConstraint);
  v41 = sub_100047110((uint64_t *)&unk_100828340);
  v42 = swift_allocObject(v41, 136, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100628960;
  *(_QWORD *)(v42 + 32) = v63;
  *(_QWORD *)(v42 + 40) = v61;
  *(_QWORD *)(v42 + 48) = v59;
  *(_QWORD *)(v42 + 56) = v57;
  *(_QWORD *)(v42 + 64) = v55;
  *(_QWORD *)(v42 + 72) = v54;
  *(_QWORD *)(v42 + 80) = v53;
  *(_QWORD *)(v42 + 88) = v52;
  *(_QWORD *)(v42 + 96) = v67;
  *(_QWORD *)(v42 + 104) = v68;
  *(_QWORD *)(v42 + 112) = v66;
  *(_QWORD *)(v42 + 120) = v65;
  *(_QWORD *)(v42 + 128) = v40;
  v70 = v42;
  specialized Array._endMutation()(v42);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  v64 = v63;
  v62 = v61;
  v60 = v59;
  v58 = v57;
  v56 = v55;
  v43 = v54;
  v44 = v53;
  v45 = v52;
  v46 = v67;
  v47 = v68;
  v48 = v66;
  v49 = v65;
  v50 = v40;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v51, "activateConstraints:", isa, swift_bridgeObjectRelease(v70).n128_f64[0]);

}

uint64_t sub_10018D710(void *a1)
{
  _BYTE *v1;
  id v2;
  _BYTE *v3;
  char *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  Class isa;
  Class v10;
  objc_class *v11;
  char *v12;
  id v13;
  Class v14;
  objc_class *v15;
  char *v16;
  char *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  Class v39;
  Class v40;
  char *v41;
  id v42;
  Class v43;
  char *v44;
  char *v45;
  id v46;
  void *v47;
  double v48;
  double v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v66;
  uint64_t v67;
  uint64_t v68;
  objc_super v70;
  objc_super v71;
  objc_super v72;
  objc_super v73;

  v1[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isWheelchair] = 0;
  v2 = objc_allocWithZone((Class)type metadata accessor for DayViewTitleAndValueLabelPair());
  v3 = v1;
  v4 = (char *)objc_msgSend(v2, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v6 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  v7 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor];
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor] = v5;
  v8 = v5;

  v67 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel], "setTextColor:", *(_QWORD *)&v4[v6]);

  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  v10 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  v11 = (objc_class *)type metadata accessor for GradientColors();
  v12 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v10;
  v73.receiver = v12;
  v73.super_class = v11;
  v13 = objc_msgSendSuper2(&v73, "init");
  v14 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  v15 = (objc_class *)type metadata accessor for MetricColors();
  v16 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v13;
  *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v14;
  v72.receiver = v16;
  v72.super_class = v15;
  v17 = (char *)objc_msgSendSuper2(&v72, "init");
  v18 = *(id *)&v17[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v19 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v20 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v18;
  v21 = v18;

  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setTextColor:", *(_QWORD *)&v4[v19]);
  v66 = (id)objc_opt_self(NSBundle);
  v22 = objc_msgSend(v66, "mainBundle");
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = (uint64_t *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v29 = *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v28 = v25;
  v28[1] = v27;
  swift_bridgeObjectRetain(v27);
  v30 = swift_bridgeObjectRelease(v29).n128_u64[0];
  v31 = *(void **)&v4[v67];
  v32 = v28[1];
  if (v32)
  {
    swift_bridgeObjectRetain(v28[1]);
    v33 = String._bridgeToObjectiveC()();
    v30 = swift_bridgeObjectRelease(v32).n128_u64[0];
  }
  else
  {
    v33 = 0;
  }
  v34 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  v68 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  objc_msgSend(v31, "setText:", v33, *(double *)&v30);

  swift_bridgeObjectRelease(v27);
  *(_QWORD *)&v3[v34] = v4;
  v35 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel;
  v36 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v36, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v37 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption1);
  v38 = (void *)UILabel.withFont(_:)(v37);

  v39 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  v40 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  v41 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v41[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v39;
  *(_QWORD *)&v41[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v40;
  v71.receiver = v41;
  v71.super_class = v11;
  v42 = objc_msgSendSuper2(&v71, "init");
  v43 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  v44 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v44[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v42;
  *(_QWORD *)&v44[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v43;
  v70.receiver = v44;
  v70.super_class = v15;
  v45 = (char *)objc_msgSendSuper2(&v70, "init");
  v46 = *(id *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v47 = (void *)UILabel.withTextColor(_:)(v46);
  LODWORD(v48) = 1148846080;
  objc_msgSend(v47, "setContentCompressionResistancePriority:forAxis:", 1, v48);
  LODWORD(v49) = 1148846080;
  objc_msgSend(v47, "setContentHuggingPriority:forAxis:", 1, v49);
  v50 = objc_msgSend(v66, "mainBundle");
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v50, "localizedStringForKey:value:table:", v51, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v54 = v53;

  v55 = String._bridgeToObjectiveC()();
  objc_msgSend(v47, "setText:", v55);

  swift_bridgeObjectRelease(v54);
  *(_QWORD *)&v3[v35] = v47;
  v56 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  v57 = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v57, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v56] = v57;
  v58 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  type metadata accessor for ActivityStandChartView();
  v59 = sub_1005AEF5C();

  *(_QWORD *)&v3[v58] = v59;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins] = 24;
  v60 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData] = 0;
  v61 = (uint64_t *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal];
  *v61 = 0;
  v61[1] = 0;
  v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday] = 0;
  v62 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets] = 0;

  swift_bridgeObjectRelease(*(_QWORD *)&v3[v60]);
  sub_100022BA4(*v61, v61[1]);
  v63 = *(_QWORD *)&v3[v62];

  swift_bridgeObjectRelease(v63);
  v64 = type metadata accessor for DayViewStandChartTableViewCell();
  swift_deallocPartialClassInstance(v3, v64, 96, 7);
  return 0;
}

id sub_10018DF0C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DayViewStandChartTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DayViewStandChartTableViewCell()
{
  return objc_opt_self(_TtC10FitnessApp30DayViewStandChartTableViewCell);
}

uint64_t sub_10018DFE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110((uint64_t *)&unk_100828370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018E028()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10018E04C(uint64_t a1)
{
  uint64_t v1;

  sub_10018CDF8(a1, v1, 1);
}

uint64_t sub_10018E068()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_10018E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10018C378(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10018E094()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10018E0C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100823C9C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000DA0E4;
  return sub_10018C474(a1, v4, v5, v6, v7, v8);
}

const char *sub_10018E148()
{
  return "startDate";
}

void sub_10018E158(uint64_t a1)
{
  uint64_t v1;

  sub_10018CDF8(a1, v1, 0);
}

uint64_t sub_10018E174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100823CFC);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1000EA380;
  v6[17] = a4;
  return swift_task_switch(sub_10018E254, 0, 0);
}

uint64_t sub_10018E1D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10018E1F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch(sub_10018E254, 0, 0);
}

uint64_t sub_10018E254()
{
  NSObject *v0;
  void *v1;
  id v2;
  Class isa;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  Class v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  Class v38;
  NSObject *v39;
  NSObject *v40;
  NSObject **v41;
  Class v42;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  objc_class **v47;
  objc_class *v48;
  objc_class *v49;
  objc_class *v50;
  objc_class *v51;
  objc_class *v52;
  objc_class *v53;
  objc_class *v54;
  os_log_type_t v55;
  void *v56;
  objc_class *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_t v65;
  NSObject *v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  objc_class *v70;
  objc_class *v71;
  objc_class *v72;
  objc_class *v73;
  objc_class *v74;
  os_log_t log;
  NSObject *logb;
  os_log_type_t loga;
  uint64_t v78;

  v1 = (void *)*((_QWORD *)v0[17].isa + 2);
  v0[14].isa = 0;
  v2 = objc_msgSend(v1, "allAuthKitAccountsWithError:", &v0[14]);
  isa = v0[14].isa;
  if (!v2)
  {
    v24 = isa;
    v25 = _convertNSErrorToError(_:)(isa);

    v27 = swift_willThrow(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = (void *)HKLogActivity;
    v30 = v28;
    if (os_log_type_enabled(HKLogActivity, v28))
    {
      swift_errorRetain(v25);
      swift_errorRetain(v25);
      logb = v29;
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 138412290;
      swift_errorRetain(v25);
      v33 = _swift_stdlib_bridgeErrorToNSError(v25);
      v0[15].isa = (Class)v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[15], &v0[16], v31 + 4);
      *v32 = v33;
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, logb, v30, "Error while fetching account devices %@", v31, 0xCu);
      v34 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v32, 1, v34);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
      swift_errorRelease(v25);

    }
    else
    {
      swift_errorRelease(v25);
    }
    return ((uint64_t (*)(__n128))v0[1].isa)(v35);
  }
  v4 = v2;
  log = v0 + 14;
  v5 = sub_10001E724(0, &qword_100823DD8, ACAccount_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);
  v7 = isa;

  v78 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v36 = v6;
    else
      v36 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v8)
      goto LABEL_4;
LABEL_23:
    swift_bridgeObjectRelease(v6);
    v23 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  if (!v8)
    goto LABEL_23;
LABEL_4:
  if (v8 < 1)
  {
    __break(1u);
LABEL_45:
    __break(1u);
  }
  v66 = v0;
  for (i = 0; i != v8; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    else
      v10 = *(id *)(v6 + 8 * i + 32);
    v11 = v10;
    v12 = objc_msgSend(v10, "aa_altDSID");
    if (v12)
    {
      v13 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = objc_msgSend(objc_allocWithZone((Class)AKDeviceListRequestContext), "init");
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "setAltDSID:", v17, swift_bridgeObjectRelease(v15).n128_f64[0]);

      v18 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v16, "setOperatingSystems:", v18);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      v21 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v20 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v21 >= v20 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v16);
      specialized Array._endMutation()(v22);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v6);
  v23 = v78;
  v0 = v66;
LABEL_24:
  v0[18].isa = (Class)v23;
  swift_bridgeObjectRelease(v6);
  v0[16].isa = (Class)_swiftEmptyArrayStorage;
  if (!((unint64_t)v23 >> 62))
  {
    v37 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    v0[19].isa = (Class)v37;
    if (v37)
      goto LABEL_26;
    goto LABEL_35;
  }
  if (v23 < 0)
    v44 = v23;
  else
    v44 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v37 = _CocoaArrayWrapper.endIndex.getter(v44);
  swift_bridgeObjectRelease(v23);
  v0[19].isa = (Class)v37;
  if (!v37)
  {
LABEL_35:
    swift_bridgeObjectRelease(v23);
    v45 = _swiftEmptyArrayStorage[2];
    if (v45)
    {
      v65 = log - 12;
      v67 = v0;
      swift_bridgeObjectRetain_n(_swiftEmptyArrayStorage, 2);
      v47 = (objc_class **)&_swiftEmptyArrayStorage[8];
      do
      {
        v48 = *(v47 - 4);
        v49 = *(v47 - 3);
        v50 = *(v47 - 1);
        v51 = v47[1];
        v73 = *v47;
        v74 = *(v47 - 2);
        v52 = v47[3];
        v53 = v47[5];
        v71 = v47[4];
        v72 = v47[2];
        v54 = v47[7];
        v70 = v47[6];
        v55 = static os_log_type_t.default.getter(v46);
        v56 = (void *)HKLogActivity;
        loga = v55;
        v46 = os_log_type_enabled(HKLogActivity, v55);
        if (v46)
        {
          swift_bridgeObjectRetain_n(v54, 2);
          swift_bridgeObjectRetain_n(v49, 2);
          swift_bridgeObjectRetain_n(v50, 2);
          swift_bridgeObjectRetain_n(v51, 2);
          swift_bridgeObjectRetain_n(v52, 2);
          swift_bridgeObjectRetain_n(v53, 2);
          v69 = v56;
          v57 = v54;
          v58 = swift_slowAlloc(12, -1);
          v68 = swift_slowAlloc(32, -1);
          v78 = v68;
          *(_DWORD *)v58 = 136315138;
          v67[2].isa = v48;
          v67[3].isa = v49;
          v67[4].isa = v74;
          v67[5].isa = v50;
          v67[6].isa = v73;
          v67[7].isa = v51;
          v67[8].isa = v72;
          v67[9].isa = v52;
          v67[10].isa = v71;
          v67[11].isa = v53;
          v67[12].isa = v70;
          v67[13].isa = v57;
          swift_bridgeObjectRetain(v49);
          swift_bridgeObjectRetain(v50);
          swift_bridgeObjectRetain(v51);
          swift_bridgeObjectRetain(v52);
          swift_bridgeObjectRetain(v53);
          swift_bridgeObjectRetain(v57);
          v59 = String.init<A>(describing:)(v65, &type metadata for AccountDevice);
          v61 = v60;
          *(_QWORD *)(v58 + 4) = sub_10003E8EC(v59, v60, &v78);
          swift_bridgeObjectRelease(v61);
          swift_bridgeObjectRelease_n(v49, 2);
          swift_bridgeObjectRelease_n(v50, 2);
          swift_bridgeObjectRelease_n(v51, 2);
          swift_bridgeObjectRelease_n(v52, 2);
          swift_bridgeObjectRelease_n(v53, 2);
          swift_bridgeObjectRelease_n(v57, 2);
          _os_log_impl((void *)&_mh_execute_header, v69, loga, "Loaded account device %s", (uint8_t *)v58, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v58, -1, -1);

        }
        v47 += 12;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v0 = v67;
    }
    else
    {
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    }
    v62 = *((_QWORD *)v0[17].isa + 4);
    v63 = swift_task_alloc(32);
    *(_QWORD *)(v63 + 16) = _swiftEmptyArrayStorage;
    os_unfair_lock_lock((os_unfair_lock_t)(v62 + 24));
    v64 = *(_QWORD *)(v63 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v62 + 16));
    *(_QWORD *)(v62 + 16) = v64;
    swift_bridgeObjectRetain(v64);
    os_unfair_lock_unlock((os_unfair_lock_t)(v62 + 24));
    swift_task_dealloc(v63);
    swift_bridgeObjectRelease(v0[16].isa);
    v35 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return ((uint64_t (*)(__n128))v0[1].isa)(v35);
  }
LABEL_26:
  if (v37 < 1)
    goto LABEL_45;
  v0[20].isa = 0;
  v38 = v0[18].isa;
  if (((unint64_t)v38 & 0xC000000000000001) != 0)
    v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
  else
    v39 = *((id *)v38 + 4);
  v40 = v39;
  v0[21].isa = (Class)v39;
  v41 = (NSObject **)swift_task_alloc(dword_100823D04);
  v0[22].isa = (Class)v41;
  *v41 = v0;
  v41[1] = sub_10018EA28;
  v42 = v0[17].isa;
  v41[28] = v40;
  v41[29] = v42;
  return swift_task_switch(sub_10018F474, 0, 0);
}

uint64_t sub_10018EA28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 176);
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10018EF30;
  }
  else
  {
    *(_QWORD *)(v4 + 192) = a1;
    v6 = sub_10018EAE0;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_10018EAE0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *log;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;

  v1 = *(void **)(v0 + 168);
  sub_10013C808(*(_QWORD *)(v0 + 192));

  v2 = *(_QWORD *)(v0 + 160) + 1;
  if (v2 == *(_QWORD *)(v0 + 152))
  {
    v3 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v29 = v3;
      swift_bridgeObjectRetain_n(v4, 2);
      v30 = v4;
      v7 = (uint64_t *)(v4 + 64);
      do
      {
        v8 = *(v7 - 3);
        v39 = *(v7 - 4);
        v9 = *(v7 - 1);
        v10 = v7[1];
        v37 = *v7;
        v38 = *(v7 - 2);
        v11 = v7[3];
        v12 = v7[5];
        v35 = v7[4];
        v36 = v7[2];
        v13 = v7[7];
        v34 = v7[6];
        v14 = static os_log_type_t.default.getter(v6);
        v15 = (void *)HKLogActivity;
        v40 = v14;
        v6 = os_log_type_enabled(HKLogActivity, v14);
        if (v6)
        {
          swift_bridgeObjectRetain_n(v13, 2);
          swift_bridgeObjectRetain_n(v8, 2);
          swift_bridgeObjectRetain_n(v9, 2);
          swift_bridgeObjectRetain_n(v10, 2);
          swift_bridgeObjectRetain_n(v11, 2);
          swift_bridgeObjectRetain_n(v12, 2);
          log = v15;
          v16 = swift_slowAlloc(12, -1);
          v32 = swift_slowAlloc(32, -1);
          v41 = v32;
          *(_DWORD *)v16 = 136315138;
          *(_QWORD *)(v0 + 16) = v39;
          *(_QWORD *)(v0 + 24) = v8;
          *(_QWORD *)(v0 + 32) = v38;
          *(_QWORD *)(v0 + 40) = v9;
          *(_QWORD *)(v0 + 48) = v37;
          *(_QWORD *)(v0 + 56) = v10;
          *(_QWORD *)(v0 + 64) = v36;
          *(_QWORD *)(v0 + 72) = v11;
          *(_QWORD *)(v0 + 80) = v35;
          *(_QWORD *)(v0 + 88) = v12;
          *(_QWORD *)(v0 + 96) = v34;
          *(_QWORD *)(v0 + 104) = v13;
          v31 = v13;
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v13);
          v17 = String.init<A>(describing:)(v0 + 16, &type metadata for AccountDevice);
          v19 = v18;
          *(_QWORD *)(v16 + 4) = sub_10003E8EC(v17, v18, &v41);
          swift_bridgeObjectRelease(v19);
          swift_bridgeObjectRelease_n(v8, 2);
          swift_bridgeObjectRelease_n(v9, 2);
          swift_bridgeObjectRelease_n(v10, 2);
          swift_bridgeObjectRelease_n(v11, 2);
          swift_bridgeObjectRelease_n(v12, 2);
          swift_bridgeObjectRelease_n(v31, 2);
          _os_log_impl((void *)&_mh_execute_header, log, v40, "Loaded account device %s", (uint8_t *)v16, 0xCu);
          swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v32, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        v7 += 12;
        --v5;
      }
      while (v5);
      v4 = v30;
      swift_bridgeObjectRelease(v30);
      v3 = v29;
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 32);
    v23 = swift_task_alloc(32);
    *(_QWORD *)(v23 + 16) = v4;
    os_unfair_lock_lock((os_unfair_lock_t)(v22 + 24));
    v24 = *(_QWORD *)(v23 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v22 + 16));
    *(_QWORD *)(v22 + 16) = v24;
    swift_bridgeObjectRetain(v24);
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 24));
    if (!v3)
    {
      swift_task_dealloc(v23);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
      v28 = swift_bridgeObjectRelease(v4);
      (*(void (**)(__n128))(v0 + 8))(v28);
    }
  }
  else
  {
    *(_QWORD *)(v0 + 160) = v2;
    v20 = *(_QWORD *)(v0 + 144);
    if ((v20 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v20);
    else
      v21 = *(id *)(v20 + 8 * v2 + 32);
    v25 = v21;
    *(_QWORD *)(v0 + 168) = v21;
    v26 = (_QWORD *)swift_task_alloc(dword_100823D04);
    *(_QWORD *)(v0 + 176) = v26;
    *v26 = v0;
    v26[1] = sub_10018EA28;
    v27 = *(_QWORD *)(v0 + 136);
    v26[28] = v25;
    v26[29] = v27;
    swift_task_switch(sub_10018F474, 0, 0);
  }
}

uint64_t sub_10018EF30(uint64_t a1)
{
  _QWORD *v1;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  NSObject *log;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;

  v2 = static os_log_type_t.error.getter(a1);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  v5 = os_log_type_enabled(HKLogActivity, v2);
  v6 = v1[23];
  v7 = (void *)v1[21];
  if (v5)
  {
    v8 = v7;
    swift_errorRetain(v6);
    v9 = v8;
    swift_errorRetain(v6);
    v10 = v3;
    v11 = swift_slowAlloc(22, -1);
    v12 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v11 = 138412546;
    *(_QWORD *)(v11 + 4) = v9;
    *v12 = v9;

    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v6);
    v13 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v11 + 14) = v13;
    v12[1] = v13;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v10, v4, "Error while fetching account device: %@ %@", (uint8_t *)v11, 0x16u);
    v14 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v12, 2, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    swift_errorRelease(v6);

  }
  else
  {

    swift_errorRelease(v6);
  }
  v15 = v1[20] + 1;
  if (v15 == v1[19])
  {
    swift_bridgeObjectRelease(v1[18]);
    v16 = v1[16];
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v45 = v1 + 2;
      v46 = v1;
      swift_bridgeObjectRetain_n(v16, 2);
      v44 = v16;
      v19 = (uint64_t *)(v16 + 64);
      do
      {
        v21 = *(v19 - 4);
        v20 = *(v19 - 3);
        v22 = *(v19 - 1);
        v23 = v19[1];
        v52 = *v19;
        v53 = *(v19 - 2);
        v24 = v19[3];
        v25 = v19[5];
        v50 = v19[4];
        v51 = v19[2];
        v26 = v19[7];
        v49 = v19[6];
        v27 = static os_log_type_t.default.getter(v18);
        v28 = (void *)HKLogActivity;
        v54 = v27;
        v18 = os_log_type_enabled(HKLogActivity, v27);
        if (v18)
        {
          v48 = v26;
          swift_bridgeObjectRetain_n(v26, 2);
          swift_bridgeObjectRetain_n(v20, 2);
          swift_bridgeObjectRetain_n(v22, 2);
          swift_bridgeObjectRetain_n(v23, 2);
          swift_bridgeObjectRetain_n(v24, 2);
          swift_bridgeObjectRetain_n(v25, 2);
          log = v28;
          v29 = swift_slowAlloc(12, -1);
          v30 = swift_slowAlloc(32, -1);
          v55 = v30;
          *(_DWORD *)v29 = 136315138;
          v46[2] = v21;
          v46[3] = v20;
          v46[4] = v53;
          v46[5] = v22;
          v46[6] = v52;
          v46[7] = v23;
          v46[8] = v51;
          v46[9] = v24;
          v46[10] = v50;
          v46[11] = v25;
          v46[12] = v49;
          v46[13] = v48;
          swift_bridgeObjectRetain(v20);
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v48);
          v31 = String.init<A>(describing:)(v45, &type metadata for AccountDevice);
          v33 = v32;
          *(_QWORD *)(v29 + 4) = sub_10003E8EC(v31, v32, &v55);
          swift_bridgeObjectRelease(v33);
          swift_bridgeObjectRelease_n(v20, 2);
          swift_bridgeObjectRelease_n(v22, 2);
          swift_bridgeObjectRelease_n(v23, 2);
          swift_bridgeObjectRelease_n(v24, 2);
          swift_bridgeObjectRelease_n(v25, 2);
          swift_bridgeObjectRelease_n(v48, 2);
          _os_log_impl((void *)&_mh_execute_header, log, v54, "Loaded account device %s", (uint8_t *)v29, 0xCu);
          swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v29, -1, -1);

        }
        v19 += 12;
        --v17;
      }
      while (v17);
      v16 = v44;
      swift_bridgeObjectRelease(v44);
      v1 = v46;
    }
    else
    {
      swift_bridgeObjectRetain(v1[16]);
    }
    v36 = *(_QWORD *)(v1[17] + 32);
    v37 = swift_task_alloc(32);
    *(_QWORD *)(v37 + 16) = v16;
    os_unfair_lock_lock((os_unfair_lock_t)(v36 + 24));
    v38 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v36 + 16));
    *(_QWORD *)(v36 + 16) = v38;
    swift_bridgeObjectRetain(v38);
    os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 24));
    swift_task_dealloc(v37);
    swift_bridgeObjectRelease(v1[16]);
    v39 = swift_bridgeObjectRelease(v16);
    return ((uint64_t (*)(__n128))v1[1])(v39);
  }
  else
  {
    v1[20] = v15;
    v34 = v1[18];
    if ((v34 & 0xC000000000000001) != 0)
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v34);
    else
      v35 = *(id *)(v34 + 8 * v15 + 32);
    v41 = v35;
    v1[21] = v35;
    v42 = (_QWORD *)swift_task_alloc(dword_100823D04);
    v1[22] = v42;
    *v42 = v1;
    v42[1] = sub_10018EA28;
    v43 = v1[17];
    v42[28] = v41;
    v42[29] = v43;
    return swift_task_switch(sub_10018F474, 0, 0);
  }
}

uint64_t sub_10018F45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = v1;
  return swift_task_switch(sub_10018F474, 0, 0);
}

uint64_t sub_10018F474(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  id v9;

  v2 = *(void **)(*(_QWORD *)(v1 + 232) + 24);
  *(_QWORD *)(v1 + 240) = v2;
  if (v2)
  {
    v3 = v1 + 16;
    v4 = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 56) = v1 + 216;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_10018F594;
    v5 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 176) = _NSConcreteStackBlock;
    v6 = (_QWORD *)(v1 + 176);
    v6[1] = 0x40000000;
    v6[2] = sub_10018F82C;
    v6[3] = &unk_10078AD08;
    v6[4] = v5;
    objc_msgSend(v2, "deviceListWithContext:completion:", v4, v6);
    return swift_continuation_await(v3);
  }
  else
  {
    v8 = static os_log_type_t.default.getter(a1);
    v9 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Failed to create AKAppleIDAuthenticationController", 50, 2, _swiftEmptyArrayStorage);

    return (*(uint64_t (**)(_QWORD *))(v1 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10018F594()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 248) = v1;
  if (v1)
    v2 = sub_10018F7EC;
  else
    v2 = sub_10018F5F4;
  return swift_task_switch(v2, 0, 0);
}

void sub_10018F5F4()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  void *v19;

  v1 = *(void **)(v0 + 216);
  if (!v1 || (v2 = objc_msgSend(*(id *)(v0 + 216), "deviceList")) == 0)
  {
    v17 = *(void **)(v0 + 240);

    v8 = _swiftEmptyArrayStorage;
LABEL_23:

    (*(void (**)(_QWORD *))(v0 + 8))(v8);
    return;
  }
  v3 = v2;
  v19 = v1;
  v4 = sub_10001E724(0, &qword_100823DC8, AKRemoteDevice_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_5;
LABEL_21:
    v8 = _swiftEmptyArrayStorage;
LABEL_22:
    v17 = *(void **)(v0 + 240);

    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_23;
  }
  if (v5 < 0)
    v18 = v5;
  else
    v18 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (!v6)
    goto LABEL_21;
LABEL_5:
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      sub_10018FF90(v9, (uint64_t *)(v0 + 80));
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_100140240(0, v8[2] + 1, 1, v8);
      v11 = v8[2];
      v10 = v8[3];
      if (v11 >= v10 >> 1)
        v8 = sub_100140240((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      ++v7;
      v8[2] = v11 + 1;
      v12 = &v8[12 * v11];
      v13 = *(_OWORD *)(v0 + 96);
      v12[2] = *(_OWORD *)(v0 + 80);
      v12[3] = v13;
      v14 = *(_OWORD *)(v0 + 112);
      v15 = *(_OWORD *)(v0 + 128);
      v16 = *(_OWORD *)(v0 + 160);
      v12[6] = *(_OWORD *)(v0 + 144);
      v12[7] = v16;
      v12[4] = v14;
      v12[5] = v15;
    }
    while (v6 != v7);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_10018F7EC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 240);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018F82C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100047110(&qword_10082EEA0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_100190160((uint64_t)&v12, v10);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10018F8CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for AccountDeviceProvider()
{
  return objc_opt_self(_TtC10FitnessApp21AccountDeviceProvider);
}

double sub_10018F920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double result;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10078ACC8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain(v1);
  if (v9 == 1)
  {
    sub_10003423C((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_10078ACF0, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_100823DC0;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1008282A0, v19);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t destroy for AccountDevice(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[11]);
}

_QWORD *initializeWithCopy for AccountDevice(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for AccountDevice(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  v14 = a2[11];
  v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for AccountDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for AccountDevice(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a2[11];
  v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountDevice(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountDevice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountDevice()
{
  return &type metadata for AccountDevice;
}

uint64_t sub_10018FEC0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018FEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100823DBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  v4 = (_QWORD *)swift_task_alloc(dword_100823CFC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1000EA380;
  v4[17] = v2;
  return swift_task_switch(sub_10018E254, 0, 0);
}

uint64_t sub_10018FF6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10018FF90(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = objc_msgSend(a1, "name");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v34 = v7;
    v35 = v6;

  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v8 = objc_msgSend(a1, "buildNumber");
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v32 = v11;
    v33 = v10;

  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v12 = objc_msgSend(a1, "serialNumber");
  if (v12)
  {
    v13 = v12;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

  }
  else
  {
    v31 = 0;
    v15 = 0;
  }
  v16 = objc_msgSend(a1, "operatingSystemName");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(a1, "operatingSystemVersion");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v26 = objc_msgSend(a1, "model");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {

    v28 = 0;
    v30 = 0;
  }
  *a2 = v35;
  a2[1] = v34;
  a2[2] = v31;
  a2[3] = v15;
  a2[4] = v33;
  a2[5] = v32;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v23;
  a2[9] = v25;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t sub_100190160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100823DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for UnitSettingsDistanceUnit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001901F4 + 4 * byte_100629375[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100190228 + 4 * asc_100629370[v4]))();
}

uint64_t sub_100190228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100190230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100190238);
  return result;
}

uint64_t sub_100190244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019024CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100190250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100190258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnitSettingsDistanceUnit()
{
  return &type metadata for UnitSettingsDistanceUnit;
}

void sub_100190274(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F6D0;
}

void sub_100190284(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000030;
  else
    v2 = 0xD00000000000002BLL;
  v3 = 0x800000010068CEA0;
  if (*v1)
    v3 = 0x800000010068CE60;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1001902CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823DE0;
  if (!qword_100823DE0)
  {
    v1 = sub_100007050(&qword_100823DE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100823DE0);
  }
  return result;
}

unint64_t sub_10019031C()
{
  unint64_t result;

  result = qword_100823DF0;
  if (!qword_100823DF0)
  {
    result = swift_getWitnessTable(&unk_10062945C, &type metadata for UnitSettingsDistanceUnit);
    atomic_store(result, (unint64_t *)&qword_100823DF0);
  }
  return result;
}

uint64_t sub_100190360@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100190388(uint64_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  NSObject *v11;
  uint8_t *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v19;
  uint64_t v20;

  v2 = 0;
  switch(a1)
  {
    case 1:
      v8 = static os_log_type_t.error.getter();
      v9 = (void *)HKLogActivity;
      v10 = v8;
      if (!os_log_type_enabled(HKLogActivity, v8))
        goto LABEL_10;
      v11 = v9;
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v12 = 134217984;
      v2 = 1;
      v19 = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v11, v10, "Unexpected distance units %lu. Setting distance unit to kilometers", v12, 0xCu);
      swift_slowDealloc(v12, -1, -1);

      break;
    case 2:
      goto LABEL_10;
    case 3:
      return v2;
    case 4:
    case 5:
      v3 = static os_log_type_t.error.getter();
      v4 = (void *)HKLogActivity;
      v5 = v3;
      if (os_log_type_enabled(HKLogActivity, v3))
      {
        v6 = v4;
        v7 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v7 = 134217984;
        v19 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v7 + 4);
        _os_log_impl((void *)&_mh_execute_header, v6, v5, "Unexpected distance units %lu. Setting distance unit to miles", v7, 0xCu);
        swift_slowDealloc(v7, -1, -1);

      }
      v2 = 0;
      break;
    default:
      v13 = static os_log_type_t.error.getter();
      v14 = (void *)HKLogActivity;
      v15 = v13;
      if (os_log_type_enabled(HKLogActivity, v13))
      {
        v16 = v14;
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v17 = 134217984;
        v19 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17 + 4);
        _os_log_impl((void *)&_mh_execute_header, v16, v15, "Unexpected distance units %lu. Setting distance unit to kilometers", v17, 0xCu);
        swift_slowDealloc(v17, -1, -1);

      }
LABEL_10:
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t *sub_1001905E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(_BYTE *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AttributedString(0);
    v11 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v11((_BYTE *)v4 + v12, (char *)a2 + v12, v10);
    v13 = a3[8];
    v14 = a3[9];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v4 + v14;
    v19 = (char *)a2 + v14;
    v20 = *(_QWORD *)v19;
    v21 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v21;
    v18[24] = v19[24];
    *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
    v22 = a3[10];
    v23 = a3[11];
    v24 = (uint64_t *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = *v25;
    v27 = v25[1];
    *v24 = *v25;
    v24[1] = v27;
    v28 = (char *)a2 + v23;
    __dst = (char *)v4 + v23;
    v24[2] = v25[2];
    v29 = type metadata accessor for Date(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v30 + 48);
    swift_bridgeObjectRetain(v17);
    swift_retain(v20);
    swift_retain(v21);
    swift_retain(v26);
    v32 = swift_retain(v27);
    if (v31(v28, 1, v29, v32))
    {
      v33 = sub_100047110((uint64_t *)&unk_100828370);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
    }
  }
  return v4;
}

uint64_t sub_1001907B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[7], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v7 = (_QWORD *)(a1 + a2[9]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (_QWORD *)(a1 + a2[10]);
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = a1 + a2[11];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

_BYTE *sub_1001908AC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  _BYTE *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  v12 = a3[8];
  v13 = a3[9];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = &a1[v13];
  v18 = &a2[v13];
  v19 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v20;
  v17[24] = v18[24];
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v21 = a3[10];
  v22 = a3[11];
  v23 = (uint64_t *)&a1[v21];
  v24 = (uint64_t *)&a2[v21];
  v25 = *v24;
  v26 = v24[1];
  *v23 = *v24;
  v23[1] = v26;
  v27 = &a2[v22];
  __dst = &a1[v22];
  v23[2] = v24[2];
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v29 + 48);
  swift_bridgeObjectRetain(v16);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v25);
  v31 = swift_retain(v26);
  if (v30(v27, 1, v28, v31))
  {
    v32 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(__dst, v27, v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
  }
  return a1;
}

_BYTE *sub_100190A50(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_BYTE *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v11 = a3[8];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[9];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)&a1[v16];
  v20 = *(_QWORD *)&a2[v16];
  *(_QWORD *)&a1[v16] = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = *((_QWORD *)v18 + 1);
  v22 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v21;
  swift_retain(v21);
  swift_release(v22);
  v23 = *((_QWORD *)v18 + 2);
  v17[24] = v18[24];
  *((_QWORD *)v17 + 2) = v23;
  v24 = a3[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)&a1[v24];
  v28 = *(_QWORD *)&a2[v24];
  *(_QWORD *)&a1[v24] = v28;
  swift_retain(v28);
  swift_release(v27);
  v29 = *((_QWORD *)v26 + 1);
  v30 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = v29;
  swift_retain(v29);
  swift_release(v30);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48);
  LODWORD(v25) = v36(v32, 1, v34);
  v37 = v36(v33, 1, v34);
  if (!(_DWORD)v25)
  {
    if (!v37)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 24))(v32, v33, v34);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v38 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

_BYTE *sub_100190C6C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  v12 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v14 + 9);
  *v13 = *v14;
  v15 = a3[10];
  v16 = a3[11];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v19 = &a1[v16];
  v20 = &a2[v16];
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

_BYTE *sub_100190DC0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  v12 = a3[8];
  v13 = &a1[v12];
  v14 = (uint64_t *)&a2[v12];
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[9];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_release(v21);
  v22 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_release(v22);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  v19[24] = v20[24];
  v23 = a3[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(_QWORD *)&a1[v23];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  swift_release(v26);
  v27 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  swift_release(v27);
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  v28 = a3[11];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48);
  LODWORD(v25) = v33(v29, 1, v31);
  v34 = v33(v30, 1, v31);
  if (!(_DWORD)v25)
  {
    if (!v34)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 40))(v29, v30, v31);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_6;
  }
  if (v34)
  {
LABEL_6:
    v35 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(v29, v30, v31);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_100190FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100190FB4);
}

uint64_t sub_100190FB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100047110((uint64_t *)&unk_100828370);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100191060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019106C);
}

uint64_t sub_10019106C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_100047110((uint64_t *)&unk_100828370);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[11];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for MetricDetailHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_100823E50;
  if (!qword_100823E50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricDetailHeaderView);
  return result;
}

void sub_100191150(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v6 = &unk_1006294C8;
  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = (char *)&value witness table for Builtin.Int64 + 64;
    v9 = v7;
    v10 = &unk_1006294E0;
    v11 = &unk_1006294F8;
    v12 = &unk_100629510;
    sub_10019120C(319);
    if (v5 <= 0x3F)
    {
      v13 = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, &v6, a1 + 16);
    }
  }
}

void sub_10019120C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100823E60)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100823E60);
  }
}

uint64_t sub_100191260(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ADADC, 1);
}

double sub_100191270()
{
  double result;

  qword_100869F48 = 0;
  qword_100869F50 = 0;
  result = 2.0;
  xmmword_100869F58 = xmmword_100629490;
  return result;
}

uint64_t sub_10019128C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t result;
  uint64_t v20;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  v11 = enum case for Font.Design.default(_:);
  v12 = type metadata accessor for Font.Design(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v6, v11, v12);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
  v15 = static Font.Weight.semibold.getter(v14);
  v16 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v15, 0);
  sub_10001BE90((uint64_t)v6, &qword_10081F2F8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v17 = Font.leading(_:)(v3, v16);
  v18 = swift_release(v16);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v18);
  qword_100869F68 = v17;
  return result;
}

void sub_10019145C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unsigned __int8 v73;
  __n128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  char *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  unsigned __int8 v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  char v158;
  char v159;
  char v160;
  char v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int16 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;

  v4 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v4);
  v142 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = (_QWORD *)type metadata accessor for Date(0);
  v144 = *(v143 - 1);
  __chkstk_darwin(v143);
  v141 = (uint64_t)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  v156 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetricDetailHeaderView(0);
  v12 = *(int *)(v11 + 20);
  v13 = v11;
  *(_QWORD *)&v146 = v11;
  v145 = (char *)a1;
  v155 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v155(v10, a1 + v12, v7);
  v29 = Text.init(_:)(v10);
  v47 = v14;
  v16 = v15;
  v18 = v17 & 1;
  v19 = Text.tracking(_:)(*(double *)(a1 + *(int *)(v13 + 24)));
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_1000E4458(v29, v47, v18);
  v26 = swift_bridgeObjectRelease(v16);
  LODWORD(v173) = static HierarchicalShapeStyle.secondary.getter(v26);
  v153 = Text.foregroundStyle<A>(_:)(&v173, v19, v21, v25, v23, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v152 = v27;
  LODWORD(v29) = v28;
  v157 = v30;
  v31 = v21;
  v32 = v145;
  sub_1000E4458(v19, v31, v25);
  v33 = v23;
  v34 = (int *)v146;
  swift_bridgeObjectRelease(v33);
  LODWORD(v36) = static Edge.Set.all.getter(v35);
  v37 = EdgeInsets.init(_all:)(0.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v155(v10, (uint64_t)&v32[v34[7]], v156);
  v44 = (void (*)(char *, uint64_t, uint64_t))Text.init(_:)(v10);
  v155 = v44;
  v154 = v45;
  LODWORD(v47) = v46;
  v156 = v48;
  if (qword_10081D630 != -1)
    v44 = (void (*)(char *, uint64_t, uint64_t))swift_once(&qword_10081D630, sub_100191270);
  v151 = qword_100869F48;
  v150 = qword_100869F50;
  v148 = *((_QWORD *)&xmmword_100869F58 + 1);
  v149 = xmmword_100869F58;
  v147 = static Edge.Set.all.getter(v44);
  v49 = &v32[v34[9]];
  v50 = *(_OWORD *)v49;
  v51 = *((_QWORD *)v49 + 2);
  LOBYTE(v49) = v49[24];
  v173 = v50;
  v174 = v51;
  LOBYTE(v175) = (_BYTE)v49;
  v52 = sub_100047110(&qword_100823EA8);
  Binding.wrappedValue.getter(v52);
  if ((BYTE8(v162) & 1) == 0)
  {
    v53 = v142;
    sub_100031D7C((uint64_t)&v32[v34[11]], v142);
    v54 = v144;
    v55 = v143;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v144 + 48))(v53, 1, v143) != 1)
    {
      v100 = v141;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(v54 + 32))(v141, v53, v55);
      v101 = &v32[v34[10]];
      v102 = *(_OWORD *)v101;
      v103 = *((_QWORD *)v101 + 2);
      v162 = v102;
      v163 = v103;
      v104 = sub_100047110(&qword_100823EE8);
      Binding.projectedValue.getter(v104);
      v146 = v173;
      v142 = v174;
      v105 = sub_10042163C(v100);
      sub_1005F0EBC(*v32);
      v107 = Color.init(uiColor:)(v106);
      v108 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
      v109 = static Edge.Set.all.getter(objc_msgSend(v108, "setNumberStyle:", 0));
      v110 = EdgeInsets.init(_all:)(0.0);
      v162 = v146;
      v163 = v142;
      v164 = v105;
      v165 = v107;
      v166 = (unint64_t)v108;
      v167 = v109;
      v168 = v110;
      v169 = v111;
      v170 = v112;
      v171 = v113;
      v172 = 0;
      v114 = sub_100047110(&qword_100823EB0);
      v115 = sub_100047110(&qword_100823EB8);
      v116 = sub_100191F0C();
      v117 = sub_100191FBC();
      _ConditionalContent<>.init(storage:)(&v162, v114, v115, v116, v117);
      (*(void (**)(uint64_t, _QWORD *))(v144 + 8))(v100, v55);
      v88 = *((_QWORD *)&v173 + 1);
      v87 = v173;
      v89 = v174;
      v90 = v175;
      v91 = v176;
      v92 = v177;
      v93 = v178;
      v94 = v179;
      v95 = v180;
      v96 = v181;
      v97 = v182;
      v98 = v183;
      v99 = v184;
      goto LABEL_10;
    }
    sub_10001BE90(v53, (uint64_t *)&unk_100828370);
  }
  LODWORD(v142) = v47;
  LODWORD(v143) = v36;
  LODWORD(v144) = v29;
  v56 = &v32[v34[8]];
  v57 = *((_QWORD *)v56 + 1);
  *(_QWORD *)&v173 = *(_QWORD *)v56;
  *((_QWORD *)&v173 + 1) = v57;
  v58 = sub_100038CA0();
  swift_bridgeObjectRetain(v57);
  v59 = Text.init<A>(_:)(&v173, &type metadata for String, v58);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  if (qword_10081D638 != -1)
    swift_once(&qword_10081D638, sub_10019128C);
  v67 = v64 & 1;
  v68 = Text.font(_:)(qword_100869F68, v59, v62, v67, v66, v60);
  v29 = v69;
  v47 = v70;
  v36 = v71 & 1;
  sub_1000E4458(v59, v62, v67);
  swift_bridgeObjectRelease(v66);
  v73 = static Edge.Set.all.getter(v72);
  v74.n128_f64[0] = EdgeInsets.init(_all:)(0.0);
  v75 = v74.n128_u64[0];
  v77 = v76;
  v79 = v78;
  v81 = v80;
  v82 = static HierarchicalShapeStyle.secondary.getter(v74);
  *(_QWORD *)&v162 = v68;
  *((_QWORD *)&v162 + 1) = v29;
  v163 = v36;
  v164 = v47;
  v165 = v73;
  v166 = v75;
  v167 = v77;
  v168 = v79;
  v169 = v81;
  v170 = v82 << 32;
  v171 = 0;
  v172 = 256;
  v83 = sub_100047110(&qword_100823EB0);
  v84 = sub_100047110(&qword_100823EB8);
  v85 = sub_100191F0C();
  v86 = sub_100191FBC();
  _ConditionalContent<>.init(storage:)(&v162, v83, v84, v85, v86);
  v88 = *((_QWORD *)&v173 + 1);
  v87 = v173;
  v89 = v174;
  v90 = v175;
  v91 = v176;
  v92 = v177;
  v93 = v178;
  v94 = v179;
  v95 = v180;
  v96 = v181;
  v97 = v182;
  v98 = v183;
  v99 = v184;
  LOBYTE(v29) = v144;
  LOBYTE(v36) = (_BYTE)v143;
  LOBYTE(v47) = v142;
LABEL_10:
  v142 = v91;
  v143 = v92;
  v144 = v93;
  v118 = v29 & 1;
  v158 = v29 & 1;
  v119 = v47 & 1;
  LOBYTE(v173) = v118;
  LOBYTE(v162) = 0;
  v161 = v47 & 1;
  v160 = 0;
  v159 = v99;
  v120 = v153;
  *(_QWORD *)a2 = v153;
  v121 = v120;
  v122 = v152;
  *(_QWORD *)(a2 + 8) = v152;
  v123 = v122;
  *(_BYTE *)(a2 + 16) = v118;
  *(_QWORD *)(a2 + 24) = v157;
  *(_BYTE *)(a2 + 32) = v36;
  *(double *)(a2 + 40) = v37;
  *(_QWORD *)(a2 + 48) = v39;
  *(_QWORD *)(a2 + 56) = v41;
  *(_QWORD *)(a2 + 64) = v43;
  *(_BYTE *)(a2 + 72) = 0;
  v124 = v154;
  *(_QWORD *)(a2 + 80) = v155;
  *(_QWORD *)(a2 + 88) = v124;
  *(_BYTE *)(a2 + 96) = v47 & 1;
  LODWORD(v146) = v47 & 1;
  *(_QWORD *)(a2 + 104) = v156;
  LOBYTE(v124) = v99;
  *(_BYTE *)(a2 + 112) = v147;
  v125 = v150;
  *(_QWORD *)(a2 + 120) = v151;
  *(_QWORD *)(a2 + 128) = v125;
  v126 = v148;
  *(_QWORD *)(a2 + 136) = v149;
  *(_QWORD *)(a2 + 144) = v126;
  *(_BYTE *)(a2 + 152) = 0;
  v145 = (char *)v87;
  *(_QWORD *)(a2 + 160) = v87;
  *(_QWORD *)(a2 + 168) = v88;
  *(_QWORD *)(a2 + 176) = v89;
  *(_QWORD *)(a2 + 184) = v90;
  *(_QWORD *)(a2 + 192) = v91;
  *(_QWORD *)(a2 + 200) = v92;
  *(_QWORD *)(a2 + 208) = v93;
  *(_QWORD *)(a2 + 216) = v94;
  *(_QWORD *)(a2 + 224) = v95;
  *(_QWORD *)(a2 + 232) = v96;
  *(_QWORD *)(a2 + 240) = v97;
  *(_BYTE *)(a2 + 248) = v98;
  *(_BYTE *)(a2 + 249) = v124;
  v127 = v124;
  v140 = v88;
  v128 = v89;
  v141 = v90;
  v129 = v95;
  v130 = v96;
  v139 = v97;
  sub_1000E439C(v121, v123, v118);
  swift_bridgeObjectRetain(v157);
  sub_1000E439C((uint64_t)v155, v154, v119);
  swift_bridgeObjectRetain(v156);
  v137 = v97;
  v131 = (uint64_t)v145;
  v132 = v88;
  v133 = v90;
  v134 = v142;
  v135 = v143;
  v136 = v144;
  sub_1001920A4((uint64_t)v145, v132, v128, v133, v142, v143, v144, v94, v129, v130, v137, v98, v127);
  sub_100192128(v131, v140, v128, v141, v134, v135, v136, v94, v129, v130, v139, v98, v127);
  sub_1000E4458((uint64_t)v155, v154, v146);
  swift_bridgeObjectRelease(v156);
  sub_1000E4458(v153, v152, v158);
  swift_bridgeObjectRelease(v157);
}

void *sub_100191E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _OWORD v6[14];
  _OWORD v7[2];
  _BYTE __src[257];

  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_10019145C(v2, (uint64_t)v6);
  *(_OWORD *)&__src[199] = v6[12];
  *(_OWORD *)&__src[215] = v6[13];
  *(_OWORD *)&__src[231] = v7[0];
  *(_OWORD *)&__src[241] = *(_OWORD *)((char *)v7 + 10);
  *(_OWORD *)&__src[135] = v6[8];
  *(_OWORD *)&__src[151] = v6[9];
  *(_OWORD *)&__src[167] = v6[10];
  *(_OWORD *)&__src[183] = v6[11];
  *(_OWORD *)&__src[71] = v6[4];
  *(_OWORD *)&__src[87] = v6[5];
  *(_OWORD *)&__src[103] = v6[6];
  *(_OWORD *)&__src[119] = v6[7];
  *(_OWORD *)&__src[7] = v6[0];
  *(_OWORD *)&__src[23] = v6[1];
  *(_OWORD *)&__src[39] = v6[2];
  *(_OWORD *)&__src[55] = v6[3];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return memcpy((void *)(a2 + 17), __src, 0x101uLL);
}

unint64_t sub_100191F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823EC0;
  if (!qword_100823EC0)
  {
    v1 = sub_100007050(&qword_100823EB0);
    sub_100191F78();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823EC0);
  }
  return result;
}

unint64_t sub_100191F78()
{
  unint64_t result;

  result = qword_100823EC8;
  if (!qword_100823EC8)
  {
    result = swift_getWitnessTable(&unk_10062D204, &type metadata for YearlyDropdownMenu);
    atomic_store(result, (unint64_t *)&qword_100823EC8);
  }
  return result;
}

unint64_t sub_100191FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823ED0;
  if (!qword_100823ED0)
  {
    v1 = sub_100007050(&qword_100823EB8);
    sub_100192040();
    sub_100028384(&qword_100820870, &qword_100820878, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823ED0);
  }
  return result;
}

unint64_t sub_100192040()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823ED8;
  if (!qword_100823ED8)
  {
    v1 = sub_100007050(&qword_100823EE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823ED8);
  }
  return result;
}

void sub_1001920A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  id v16;

  if ((a13 & 1) != 0)
  {
    sub_1000E439C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
  }
  else
  {
    swift_retain(a1);
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    v16 = a6;
  }
}

double sub_100192128(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  double result;

  if ((a13 & 1) != 0)
  {
    sub_1000E4458(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  else
  {
    swift_release(a2);
    swift_bridgeObjectRelease(a4);
    swift_release(a5);

    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001921A0()
{
  return sub_100028384(&qword_100823EF0, &qword_100823EF8, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1001921CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 392) = a2;
  *(_QWORD *)(v4 + 400) = v3;
  *(_BYTE *)(v4 + 448) = a3;
  *(_QWORD *)(v4 + 384) = a1;
  return swift_task_switch(sub_1001921EC, 0, 0);
}

uint64_t sub_1001921EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v1 = v0 + 376;
  switch(*(_BYTE *)(v0 + 448))
  {
    case 8:
    case 0x11:
      v2 = v0 + 144;
      v3 = *(_QWORD *)(v0 + 392);
      v4 = *(void **)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      v5 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 184) = v1;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = sub_1001924C8;
      *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 144, 1);
      *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 344) = 0x40000000;
      *(_QWORD *)(v0 + 352) = sub_10019281C;
      *(_QWORD *)(v0 + 360) = &unk_10078AEC0;
      objc_msgSend(v4, "powerSamplesForWorkout:workoutActivity:completion:", v5, v3, v0 + 336);
      goto LABEL_8;
    case 9:
    case 0x12:
      v2 = v0 + 208;
      v6 = *(_QWORD *)(v0 + 392);
      v7 = *(void **)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      v8 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 248) = v1;
      *(_QWORD *)(v0 + 208) = v0;
      *(_QWORD *)(v0 + 216) = sub_100192528;
      *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 208, 1);
      *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 344) = 0x40000000;
      *(_QWORD *)(v0 + 352) = sub_10019281C;
      *(_QWORD *)(v0 + 360) = &unk_10078AEA8;
      objc_msgSend(v7, "cadenceSamplesForWorkout:workoutActivity:completion:", v8, v6, v0 + 336);
      goto LABEL_8;
    case 0xA:
      v2 = v0 + 80;
      v16 = *(_QWORD *)(v0 + 392);
      v17 = *(void **)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      v18 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 120) = v1;
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = sub_100192648;
      *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 80, 1);
      *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 344) = 0x40000000;
      *(_QWORD *)(v0 + 352) = sub_10019281C;
      *(_QWORD *)(v0 + 360) = &unk_10078AE60;
      objc_msgSend(v17, "groundContactTimeSamplesForWorkout:workoutActivity:completion:", v18, v16, v0 + 336);
      goto LABEL_8;
    case 0xB:
      v2 = v0 + 16;
      v9 = *(_QWORD *)(v0 + 392);
      v10 = *(void **)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      v11 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 56) = v1;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100192588;
      *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 344) = 0x40000000;
      *(_QWORD *)(v0 + 352) = sub_10019281C;
      *(_QWORD *)(v0 + 360) = &unk_10078AE90;
      objc_msgSend(v10, "verticalOscillationSamplesForWorkout:workoutActivity:completion:", v11, v9, v0 + 336);
      goto LABEL_8;
    case 0xC:
      v2 = v0 + 272;
      v12 = *(_QWORD *)(v0 + 392);
      v13 = *(void **)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      v14 = *(_QWORD *)(v0 + 384);
      *(_QWORD *)(v0 + 312) = v1;
      *(_QWORD *)(v0 + 272) = v0;
      *(_QWORD *)(v0 + 280) = sub_1001925E8;
      *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 272, 1);
      *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 344) = 0x40000000;
      *(_QWORD *)(v0 + 352) = sub_10019281C;
      *(_QWORD *)(v0 + 360) = &unk_10078AE78;
      objc_msgSend(v13, "strideLengthSamplesForWorkout:workoutActivity:completion:", v14, v12, v0 + 336);
LABEL_8:
      result = swift_continuation_await(v2);
      break;
    default:
      result = (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
      break;
  }
  return result;
}

uint64_t sub_1001924C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  *(_QWORD *)(*(_QWORD *)v0 + 408) = v1;
  if (v1)
    v2 = sub_10019278C;
  else
    v2 = sub_100192EF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100192528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  *(_QWORD *)(*(_QWORD *)v0 + 416) = v1;
  if (v1)
    v2 = sub_1001927D4;
  else
    v2 = sub_100192EF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100192588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 424) = v1;
  if (v1)
    v2 = sub_1001926B4;
  else
    v2 = sub_100192EF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001925E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  *(_QWORD *)(*(_QWORD *)v0 + 432) = v1;
  if (v1)
    v2 = sub_1001926FC;
  else
    v2 = sub_100192EF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100192648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 440) = v1;
  if (v1)
    v2 = sub_100192744;
  else
    v2 = sub_1001926A8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001926A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 376));
}

uint64_t sub_1001926B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 424);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1001926FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 432);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100192744()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 440);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10019278C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 408);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1001927D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 416);
  swift_willThrow();
  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10019281C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100047110(&qword_10082EEA0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v10 = 0;
    if (a2)
    {
      v12 = sub_100192EB8();
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v12);
    }
    v13 = v10;
    sub_100192E70((uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1001928D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  *(_QWORD *)(v4 + 16) = swift_getObjectType(v5);
  *(_BYTE *)(v4 + 80) = a3;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 24) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 32) = swift_task_alloc(v9);
  v10 = type metadata accessor for DateInterval(0);
  *(_QWORD *)(v4 + 40) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 48) = v11;
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_task_alloc(dword_100823F0C);
  *(_QWORD *)(v4 + 64) = v12;
  *(_QWORD *)v12 = v4;
  *(_QWORD *)(v12 + 8) = sub_1001929BC;
  *(_QWORD *)(v12 + 392) = a2;
  *(_QWORD *)(v12 + 400) = v5;
  *(_BYTE *)(v12 + 448) = a3;
  *(_QWORD *)(v12 + 384) = a1;
  return swift_task_switch(sub_1001921EC, 0, 0);
}

uint64_t sub_1001929BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100192A18, 0, 0);
}

void sub_100192A18(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  double v26;
  uint64_t v27;
  CHWorkoutDetailHeartRateTableViewCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  double v41;
  double v42;
  id v43;
  double v44;
  double v45;
  os_log_type_t v46;
  void *v47;
  os_log_type_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  CHWorkoutDetailHeartRateTableViewCell *v56;
  CHWorkoutDetailHeartRateTableViewCell *v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  _BOOL8 v69;
  uint64_t v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *log;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;

  if (*(_QWORD *)(v8 + 72))
    v9 = *(_QWORD *)(v8 + 72);
  else
    v9 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_6;
LABEL_33:
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, a2, a3, a4, a5, a6, a7, a8);
    v67 = 0.0;
    v68 = 0.0;
    v69 = 1;
LABEL_34:
    v79 = *(_QWORD *)(v82 + 24);
    v78 = *(_QWORD *)(v82 + 32);
    swift_task_dealloc(*(_QWORD *)(v82 + 56));
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    (*(void (**)(double, double, _BOOL8))(v82 + 8))(COERCE_DOUBLE(*(_QWORD *)&v67), COERCE_DOUBLE(*(_QWORD *)&v68), v69);
    return;
  }
  if (v9 < 0)
    v70 = v9;
  else
    v70 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v70);
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, v71, v72, v73, v74, v75, v76, v77);
  if (!v10)
    goto LABEL_33;
LABEL_6:
  if (v10 >= 1)
  {
    v11 = 0;
    v81 = *(_QWORD *)(v82 + 48);
    v83 = *(unsigned __int8 *)(v82 + 80);
    v12 = v9 & 0xC000000000000001;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      if (v12)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
      else
        v22 = *(id *)(v9 + 8 * v11 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, "quantityType");
      v25 = objc_msgSend(v24, "aggregationStyle");

      v26 = 1.0;
      if (v25)
        goto LABEL_16;
      v27 = *(_QWORD *)(v82 + 56);
      v28 = (CHWorkoutDetailHeartRateTableViewCell *)v9;
      v30 = *(_QWORD *)(v82 + 32);
      v29 = *(_QWORD *)(v82 + 40);
      v31 = v12;
      v32 = *(_QWORD *)(v82 + 24);
      v33 = v10;
      v34 = objc_msgSend(v23, "startDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

      v35 = objc_msgSend(v23, "endDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v10 = v33;
      v36 = v30;
      v9 = (uint64_t)v28;
      v37 = v32;
      v12 = v31;
      v38 = DateInterval.init(start:end:)(v36, v37);
      v26 = DateInterval.duration.getter(v38);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v27, v29);
      if (v26 > 0.0)
      {
LABEL_16:
        v40 = objc_msgSend(v23, "quantity");
        objc_msgSend(v40, "_value");
        v42 = v41;

        if (v83 == 9)
        {
          v43 = objc_msgSend(v23, "quantity");
          objc_msgSend(v43, "_value");
          v45 = v44;

          v42 = v45 * 60.0;
        }
        else
        {

        }
        v13 = v13 + v26;
        v14 = v14 + v42;
      }
      else
      {
        v46 = static os_log_type_t.error.getter(v39);
        v47 = (void *)HKLogWorkouts;
        v48 = v46;
        if (os_log_type_enabled(HKLogWorkouts, v46))
        {
          v49 = *(_QWORD *)(v82 + 16);
          v50 = v23;
          log = v47;
          v51 = swift_slowAlloc(22, -1);
          v52 = (_QWORD *)swift_slowAlloc(8, -1);
          v53 = swift_slowAlloc(32, -1);
          v84 = v53;
          *(_DWORD *)v51 = 136315394;
          v54 = _typeName(_:qualified:)(v49, 0);
          v56 = (CHWorkoutDetailHeartRateTableViewCell *)v55;
          *(_QWORD *)(v51 + 4) = sub_10003E8EC(v54, v55, &v84);
          v57 = v56;
          v10 = v33;
          swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
          *(_WORD *)(v51 + 12) = 2112;
          *(_QWORD *)(v51 + 14) = v50;
          *v52 = v50;

          _os_log_impl((void *)&_mh_execute_header, log, v48, "%s Cumulative sample missing duration, rejecting data: %@", (uint8_t *)v51, 0x16u);
          v65 = sub_100047110(&qword_10081E648);
          swift_arrayDestroy(v52, 1, v65);
          swift_slowDealloc(v52, -1, -1);
          swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
          v66 = v53;
          v12 = v31;
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v51, -1, -1);

        }
        else
        {

        }
        v9 = (uint64_t)v28;
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v9, v15, v16, v17, v18, v19, v20, v21);
    if (v13 > 0.0)
      v67 = v14;
    else
      v67 = 0.0;
    if (v13 > 0.0)
      v68 = v13;
    else
      v68 = 0.0;
    v69 = v13 <= 0.0;
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_100192E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100823F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100192EB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823F18;
  if (!qword_100823F18)
  {
    v1 = objc_opt_self(HKQuantitySample);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100823F18);
  }
  return result;
}

uint64_t sub_100192FB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  _BYTE v15[24];
  _BYTE v16[24];

  v3 = sub_100047110((uint64_t *)&unk_100827450);
  v4 = __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v15[-v7];
  v9 = v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar, v16, 0, 0);
  sub_100021CC0(v9, (uint64_t)v8, (uint64_t *)&unk_100827450);
  v10 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100827450);
  if (qword_10081D558 != -1)
    swift_once(&qword_10081D558, sub_100006F7C);
  v12 = sub_10003CE9C(v10, (uint64_t)qword_100869D40);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v13(a1, v12, v10);
  v13((uint64_t)v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v15, 33, 0);
  sub_100197804((uint64_t)v6, v9);
  return swift_endAccess(v15);
}

id sub_10019315C()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache], "removeObserver:", v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDataProvider(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001932D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v36 = type metadata accessor for DateInterval(0);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v33 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v32 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v31 = (char *)&v31 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v31 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v31 - v22;
  Date.init()(v21);
  sub_100192FB0((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Calendar.Component.day(_:), v2);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v5, -3, v23, 0);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
    sub_10001BE90((uint64_t)v11, (uint64_t *)&unk_100828370);
    v24 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v11, v12);
    v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v26 = v31;
    v25(v31, v20, v12);
    v27 = v32;
    v25(v32, v23, v12);
    v28 = v33;
    DateInterval.init(start:end:)(v26, v27);
    v24 = DateInterval.contains(_:)(v35);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v36);
    v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    v29(v20, v12);
    v29(v23, v12);
  }
  return v24 & 1;
}

_QWORD *sub_1001935D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSDate v12;
  uint64_t v13;
  Class isa;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  uint64_t v27;

  v1 = v0;
  v2 = sub_100047110(&qword_100821648);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  v12.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (qword_10081D558 != -1)
    swift_once(&qword_10081D558, sub_100006F7C);
  v13 = type metadata accessor for Calendar(0);
  sub_10003CE9C(v13, (uint64_t)qword_100869D40);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  v15 = (id)_HKActivityCacheDateComponentsFromDate(v12.super.isa, isa);

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v16(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_9:
    sub_10001BE90((uint64_t)v4, &qword_100821648);
    return _swiftEmptyArrayStorage;
  }
  v16(v11, v4, v5);
  v17 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider), "workoutsByDay");
  v18 = sub_100047110((uint64_t *)&unk_100827430);
  v19 = sub_1000083D8(&qword_100822030, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
  v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, v5, v18, v19);

  if (!*(_QWORD *)(v20 + 16) || (v21 = sub_100439544((uint64_t)v11), (v22 & 1) == 0))
  {
    v25 = swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v5, v25);
    return _swiftEmptyArrayStorage;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_bridgeObjectRetain(v23);
  v24 = swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v5, v24);
  return (_QWORD *)v23;
}

uint64_t **sub_100193878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t);
  void *v18;
  __n128 v19;
  id v20;
  Class isa;
  id v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v29[0] = a1;
  v1 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v8 = sub_10003CE9C(v1, (uint64_t)qword_100869D10);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);
  v9 = sub_100047110((uint64_t *)&unk_100828720);
  v10 = type metadata accessor for Calendar.Component(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v9, v14 + 3 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100624A40;
  v16 = v15 + v14;
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104);
  v17(v16, enum case for Calendar.Component.day(_:), v10);
  v17(v16 + v12, enum case for Calendar.Component.month(_:), v10);
  v17(v16 + 2 * v12, enum case for Calendar.Component.year(_:), v10);
  v18 = sub_1002302F0(v15);
  swift_setDeallocating(v15);
  swift_arrayDestroy(v16, 3, v10);
  swift_deallocClassInstance(v15, 32, 7);
  Calendar.dateComponents(_:from:)(v18, v29[0]);
  v19 = swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v19);
  v20 = *(id *)(v29[1] + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v20, "achievementsForDateComponents:", isa);

  if (v22)
  {
    v24 = sub_10001E724(0, (unint64_t *)&qword_10082BBF0, ACHAchievement_ptr);
    v25 = sub_1001977AC();
    v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v24, v25);

    v27 = sub_100296150(v26);
    v23 = swift_bridgeObjectRelease(v26);
  }
  else
  {
    v27 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t, __n128))(v30 + 8))(v7, v31, v23);
  return v27;
}

void sub_100193B3C(void *a1, uint64_t a2, void (*a3)(_QWORD, uint64_t), uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD, uint64_t);
  _QWORD *v83;
  _QWORD aBlock[5];
  char *v85;

  v73 = a7;
  v74 = a8;
  v75 = a6;
  v72 = a5;
  v82 = a3;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v78 = *(_QWORD *)(v11 - 8);
  v79 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v76 = *(_QWORD *)(v14 - 8);
  v77 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v63 - v22;
  if (a1)
  {
    v80 = a4;
    v81 = a2;
    v24 = a1;
    v25 = objc_msgSend(v24, "activeEnergyResults");
    if (v25)
    {
      v26 = v25;
      v70 = v13;
      v27 = sub_10001E724(0, &qword_100823FD0, _HKActivityStatisticsQuantityInfo_ptr);
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

      v29 = objc_msgSend(v24, "appleMoveTimeResults");
      if (v29)
      {
        v30 = v29;
        v71 = v28;
        v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v27);

        v31 = objc_msgSend(v24, "appleExerciseTimeResults");
        if (v31)
        {
          v32 = v31;
          v69 = v28;
          v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v27);

          v33 = objc_msgSend(v24, "appleStandHourResults");
          if (v33)
          {
            v34 = v33;
            v68 = v28;
            v35 = sub_10001E724(0, &qword_100823FD8, _HKActivityStatisticsStandHourInfo_ptr);
            v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

            v36 = objc_msgSend(v24, "workoutResults");
            if (v36)
            {
              v37 = v36;
              v38 = sub_10001E724(0, &qword_100823FE0, _HKActivityStatisticsWorkoutInfo_ptr);
              v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

              v39 = v72;
              v67 = *(_QWORD *)(v72 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue);
              v40 = swift_allocObject(&unk_10078AF20, 24, 7);
              v65 = v28;
              v41 = v40;
              swift_unknownObjectWeakInit(v40 + 16, v39);
              v42 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
              v42(v23, v73, v17);
              v42(v21, v74, v17);
              v43 = *(unsigned __int8 *)(v18 + 80);
              v44 = (v43 + 48) & ~v43;
              v72 = (v19 + 7 + v44) & 0xFFFFFFFFFFFFFFF8;
              v63 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
              v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
              v45 = (v43 + v64 + 8) & ~v43;
              v73 = (v19 + 7 + v45) & 0xFFFFFFFFFFFFFFF8;
              v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8;
              v46 = (char *)swift_allocObject(&unk_10078AF48, v74 + 8, v43 | 7);
              v47 = v75;
              *((_QWORD *)v46 + 2) = v41;
              *((_QWORD *)v46 + 3) = v47;
              v48 = v71;
              *((_QWORD *)v46 + 4) = v69;
              *((_QWORD *)v46 + 5) = v48;
              v49 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
              v49(&v46[v44], v23, v17);
              *(_QWORD *)&v46[v72] = v68;
              *(_QWORD *)&v46[v63] = v65;
              *(_QWORD *)&v46[v64] = v66;
              v49(&v46[v45], v21, v17);
              v50 = &v46[v73];
              v51 = v81;
              v52 = v80;
              *(_QWORD *)v50 = v82;
              *((_QWORD *)v50 + 1) = v52;
              *(_QWORD *)&v46[v74] = v51;
              aBlock[4] = sub_100197310;
              v85 = v46;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10002D0F8;
              aBlock[3] = &unk_10078AF60;
              v53 = _Block_copy(aBlock);
              v54 = v41;
              swift_retain(v41);
              swift_retain(v52);
              v55 = swift_errorRetain(v51);
              static DispatchQoS.unspecified.getter(v55);
              v83 = _swiftEmptyArrayStorage;
              v56 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v57 = sub_100047110(&qword_100828C80);
              v58 = sub_10002FB08();
              v59 = v70;
              v60 = v79;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v57, v58, v79, v56);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v59, v53);

              _Block_release(v53);
              (*(void (**)(char *, uint64_t))(v78 + 8))(v59, v60);
              (*(void (**)(char *, uint64_t))(v76 + 8))(v16, v77);
              v61 = v85;
              swift_release(v54);
              swift_release(v61);
              return;
            }

            swift_bridgeObjectRelease(v71);
            swift_bridgeObjectRelease(v69);
            v62 = v68;
          }
          else
          {

            swift_bridgeObjectRelease(v71);
            v62 = v69;
          }
        }
        else
        {

          v62 = v71;
        }
        swift_bridgeObjectRelease(v62);
      }
      else
      {

      }
      swift_bridgeObjectRelease(v28);
    }
    else
    {

    }
    a2 = v81;
  }
  v82(0, a2);
}

uint64_t sub_1001940DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void *v29;
  void *v30;
  char **v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  objc_class *v41;
  char *v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD, uint64_t);
  void *v54;
  char *v55;
  __n128 v56;
  char *v57;
  Class isa;
  id v59;
  __n128 v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  char *v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD aBlock[5];
  _QWORD *v97;
  objc_super v98;
  char v99[32];

  v20 = type metadata accessor for DispatchWorkItemFlags(0);
  v95 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v94 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v92 = *(_QWORD *)(v22 - 8);
  v93 = v22;
  __chkstk_darwin(v22);
  v91 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Date(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DateComponents(0);
  v89 = *(_QWORD *)(v26 - 8);
  v90 = v26;
  __chkstk_darwin(v26);
  v88 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v99, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v29 = (void *)result;
    v84 = a12;
    v83 = a11;
    v82 = a10;
    v80 = a9;
    v30 = (void *)objc_opt_self(HKUnit);
    if (a2 != 2)
      a3 = a4;
    v31 = &selRef_minuteUnit;
    if (a2 != 2)
      v31 = &selRef_kilocalorieUnit;
    v32 = objc_msgSend(v30, *v31);
    v33 = sub_100195AA8(a3, (uint64_t)v32, a5);
    sub_100196214(v33, (uint64_t)v32, 15);
    v35 = v34;
    swift_bridgeObjectRelease(v33);
    v36 = v32;
    v37 = v29;
    v38 = a3;
    v39 = v36;
    v85 = v36;
    v40 = sub_1001950A4(0, v38, (uint64_t)v36);

    v41 = (objc_class *)type metadata accessor for ActivityChartData();
    v42 = (char *)objc_allocWithZone(v41);
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_moveData] = v35;
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_exerciseData] = a6;
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_standData] = a7;
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_workoutData] = a8;
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_numberOfActiveMinutes] = v40;
    v98.receiver = v42;
    v98.super_class = v41;
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    *(_QWORD *)&v43 = swift_bridgeObjectRetain(a8).n128_u64[0];
    v79 = objc_msgSendSuper2(&v98, "init", v43);
    v81 = v20;
    v44 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
    v78 = *(id *)&v37[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache];
    Calendar.startOfDay(for:)(v80);
    v45 = sub_100047110((uint64_t *)&unk_100828720);
    v46 = type metadata accessor for Calendar.Component(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(_QWORD *)(v47 + 72);
    v49 = *(unsigned __int8 *)(v47 + 80);
    v50 = (v49 + 32) & ~v49;
    v51 = swift_allocObject(v45, v50 + 3 * v48, v49 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_100624A40;
    v52 = v51 + v50;
    v53 = *(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104);
    v53(v52, enum case for Calendar.Component.year(_:), v46);
    v53(v52 + v48, enum case for Calendar.Component.month(_:), v46);
    v53(v52 + 2 * v48, enum case for Calendar.Component.day(_:), v46);
    v54 = sub_1002302F0(v51);
    swift_setDeallocating(v51);
    swift_arrayDestroy(v52, 3, v46);
    swift_deallocClassInstance(v51, 32, 7);
    v55 = v88;
    Calendar.dateComponents(_:from:)(v54, v25);
    v56 = swift_bridgeObjectRelease(v54);
    (*(void (**)(char *, uint64_t, __n128))(v86 + 8))(v25, v87, v56);

    v57 = (char *)*(id *)&v37[v44];
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    v59 = v79;
    objc_msgSend(*(id *)&v57[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_cache], "setObject:forKey:", v79, isa);

    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v61 = (void *)static OS_dispatch_queue.main.getter(v60);
    v62 = (_QWORD *)swift_allocObject(&unk_10078AF98, 56, 7);
    v63 = v83;
    v62[2] = v82;
    v62[3] = v63;
    v64 = v59;
    v65 = v84;
    v62[4] = v59;
    v62[5] = v65;
    v62[6] = v37;
    aBlock[4] = sub_1001973EC;
    v97 = v62;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_10078AFB0;
    v66 = _Block_copy(aBlock);
    v67 = v97;
    v68 = v37;
    swift_retain(v63);
    v69 = v64;
    swift_errorRetain(v65);
    swift_release(v67);
    v70 = v91;
    static DispatchQoS.unspecified.getter(v71);
    aBlock[0] = _swiftEmptyArrayStorage;
    v72 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_100047110(&qword_100828C80);
    v74 = sub_10002FB08();
    v75 = v94;
    v76 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v73, v74, v81, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v70, v75, v66);
    _Block_release(v66);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v70, v93);
    return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v55, v90);
  }
  return result;
}

uint64_t sub_10019471C(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  a1(a3, a4);
  type metadata accessor for WidgetCenter(0);
  v4 = static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();
  return swift_release(v4);
}

uint64_t sub_100194764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t);
  void *v27;
  uint64_t v28;
  char *v29;
  __n128 v30;
  char *v31;
  Class isa;
  id v33;
  __n128 v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD aBlock[5];
  _QWORD *v82;

  v76 = a3;
  v77 = a1;
  v78 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  __chkstk_darwin(v5);
  v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v74 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0);
  v79 = *(_QWORD *)(v12 - 8);
  v80 = v12;
  v13 = __chkstk_darwin(v12);
  v66 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v64 - v15;
  v17 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
  v73 = *(id *)(v3 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);
  Calendar.startOfDay(for:)(a1);
  v18 = sub_100047110((uint64_t *)&unk_100828720);
  v19 = type metadata accessor for Calendar.Component(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v18, v23 + 3 * v21, v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_100624A40;
  v25 = v24 + v23;
  v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
  v26(v25, enum case for Calendar.Component.year(_:), v19);
  v26(v25 + v21, enum case for Calendar.Component.month(_:), v19);
  v26(v25 + 2 * v21, enum case for Calendar.Component.day(_:), v19);
  v27 = sub_1002302F0(v24);
  swift_setDeallocating(v24);
  swift_arrayDestroy(v25, 3, v19);
  v28 = v24;
  v29 = v72;
  swift_deallocClassInstance(v28, 32, 7);
  Calendar.dateComponents(_:from:)(v27, v11);
  v30 = swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t, __n128))(v74 + 8))(v11, v75, v30);

  v31 = (char *)*(id *)&v29[v17];
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v33 = objc_msgSend(*(id *)&v31[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_basalEnergyCache], "objectForKey:", isa);

  if (!v33)
    goto LABEL_3;
  LODWORD(v75) = sub_1001932D0(v77);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v35 = (void *)static OS_dispatch_queue.main.getter(v34);
  v36 = (_QWORD *)swift_allocObject(&unk_10078B010, 40, 7);
  v37 = v76;
  v36[2] = v78;
  v36[3] = v37;
  v36[4] = v33;
  aBlock[4] = sub_1001976A0;
  v82 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_10078B028;
  v38 = _Block_copy(aBlock);
  v39 = v82;
  swift_retain(v37);
  v40 = v33;
  swift_release(v39);
  v41 = v65;
  static DispatchQoS.unspecified.getter(v42);
  aBlock[0] = _swiftEmptyArrayStorage;
  v43 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v44 = sub_100047110(&qword_100828C80);
  v45 = sub_10002FB08();
  v46 = v69;
  v47 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v44, v45, v71, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v46, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v68);
  if ((v75 & 1) != 0)
  {
LABEL_3:
    v49 = *(void **)&v29[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor];
    v51 = v79;
    v50 = v80;
    v52 = v66;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v66, v16, v80);
    v53 = *(unsigned __int8 *)(v51 + 80);
    v54 = (v53 + 24) & ~v53;
    v55 = (v64 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = v16;
    v57 = swift_allocObject(&unk_10078AFE8, v55 + 16, v53 | 7);
    *(_QWORD *)(v57 + 16) = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v57 + v54, v52, v50);
    v58 = (_QWORD *)(v57 + v55);
    v59 = v76;
    *v58 = v78;
    v58[1] = v59;
    swift_retain(v59);
    v60 = v49;
    v61 = v29;
    sub_100329CC0(v77, 0, (uint64_t)sub_10019761C, v57);

    v62 = v57;
    v16 = v56;
    v48 = swift_release(v62);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v79 + 8))(v16, v80, v48);
}

uint64_t sub_100194CA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v36 = a4;
  v37 = a5;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DateComponents(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v38 = static OS_dispatch_queue.main.getter(v17);
  v18 = swift_allocObject(&unk_10078AF20, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  v19 = *(unsigned __int8 *)(v14 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (v15 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10078B060, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v18;
  *(_QWORD *)(v22 + 24) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + v20, v16, v13);
  v23 = (_QWORD *)(v22 + v21);
  v24 = v37;
  *v23 = v36;
  v23[1] = v24;
  aBlock[4] = sub_100197764;
  v44 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_10078B078;
  v25 = _Block_copy(aBlock);
  v26 = v44;
  v27 = a1;
  swift_retain(v24);
  swift_release(v26);
  static DispatchQoS.unspecified.getter(v28);
  aBlock[0] = _swiftEmptyArrayStorage;
  v29 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100047110(&qword_100828C80);
  v31 = sub_10002FB08();
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v39, v29);
  v33 = (void *)v38;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v12, v41);
}

uint64_t sub_100194F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  char *v9;
  Class isa;
  _BYTE v12[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = (char *)*(id *)(Strong + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);

    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_basalEnergyCache], "setObject:forKey:", a2, isa);

  }
  return a4(a2);
}

uint64_t sub_1001950A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a2)
         : *(id *)(a2 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = objc_msgSend(v8, "quantityValue");
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, "doubleValueForUnit:", a3);
        v14 = v13;

        if (v14 > 0.0001)
        {
          v15 = 1;
          goto LABEL_13;
        }
      }
      else
      {

      }
      v15 = 0;
LABEL_13:
      v16 = __OFADD__(a1, v15);
      a1 += v15;
      if (v16)
        goto LABEL_17;
      ++v7;
      if (v10 == v6)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
LABEL_15:
  swift_bridgeObjectRelease(a2);
  return a1;
}

void sub_1001951EC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _BOOL4 v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  Swift::Int v48;
  Swift::Int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;

  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = 0;
  v10 = a1;
  while (1)
  {
    v11 = v10 <= a2;
    if (a3 > 0)
      v11 = v10 >= a2;
    if (v11)
      break;
    v12 = __OFADD__(v10, a3);
    v10 += a3;
    if (v12)
      v10 = (v10 >> 63) ^ 0x8000000000000000;
    v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  sub_1001217B4(0, v9, 0);
  v13 = _swiftEmptyArrayStorage;
  v69 = v6;
  v70 = (unint64_t)a4 >> 62;
  v68 = v7;
  if (!v9)
  {
    v19 = v8;
LABEL_69:
    v40 = v19 <= v7;
    if (v6 > 0)
      v40 = v19 >= v7;
    if (v40)
      return;
    if (a4 < 0)
      v41 = a4;
    else
      v41 = a4 & 0xFFFFFFFFFFFFFF8;
    v73 = v41;
    while (1)
    {
      if (__OFADD__(v19, v6))
        v42 = ((v19 + v6) >> 63) ^ 0x8000000000000000;
      else
        v42 = v19 + v6;
      v43 = v19 + a5;
      if (__OFADD__(v19, a5))
        goto LABEL_126;
      if (v70)
      {
        v65 = v13;
        swift_bridgeObjectRetain(a4);
        v45 = _CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease(a4);
        if (v45 >= v43)
          v45 = v19 + a5;
        if (v45 < v19)
          goto LABEL_130;
        swift_bridgeObjectRetain(a4);
        v66 = _CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease(a4);
        v13 = v65;
        if (v66 < v19)
          goto LABEL_131;
      }
      else
      {
        v44 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v44 >= v43)
          v45 = v19 + a5;
        else
          v45 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v45 < v19)
          goto LABEL_130;
        if (v44 < v19)
          goto LABEL_131;
      }
      if (v19 < 0)
        goto LABEL_127;
      v46 = v13;
      if (v70)
      {
        swift_bridgeObjectRetain(a4);
        v47 = _CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease(a4);
      }
      else
      {
        v47 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v47 < v45)
        goto LABEL_128;
      if (v45 < 0)
        goto LABEL_129;
      if ((a4 & 0xC000000000000001) != 0 && v19 != v45)
      {
        if (v19 >= (unint64_t)v45)
          goto LABEL_135;
        sub_10001E724(0, &qword_100823FD0, _HKActivityStatisticsQuantityInfo_ptr);
        v48 = v19;
        do
        {
          v49 = v48 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v48);
          v48 = v49;
        }
        while (v45 != v49);
      }
      if (v70)
      {
        v53 = swift_bridgeObjectRetain(a4);
        v51 = _CocoaArrayWrapper.subscript.getter(v19, v45, v73, v53);
        v52 = v54;
        v19 = v55;
        v50 = v56;
        swift_bridgeObjectRelease(a4);
        if ((v50 & 1) == 0)
          goto LABEL_101;
      }
      else
      {
        v50 = (2 * v45) | 1;
        swift_bridgeObjectRetain(a4);
        v51 = a4 & 0xFFFFFFFFFFFFFF8;
        v52 = (a4 & 0xFFFFFFFFFFFFFF8) + 32;
        if ((v50 & 1) == 0)
          goto LABEL_101;
      }
      v58 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v59 = swift_unknownObjectRetain_n(v51, 2);
      v60 = (_QWORD *)swift_dynamicCastClass(v59, v58);
      if (!v60)
      {
        swift_unknownObjectRelease(v51);
        v60 = _swiftEmptyArrayStorage;
      }
      v61 = v60[2];
      swift_release(v60);
      if (__OFSUB__(v50 >> 1, v19))
        goto LABEL_136;
      if (v61 == (v50 >> 1) - v19)
      {
        v57 = (_QWORD *)swift_dynamicCastClass(v51, v58);
        if (!v57)
        {
          swift_unknownObjectRelease(v51);
          v57 = _swiftEmptyArrayStorage;
        }
        goto LABEL_108;
      }
      swift_unknownObjectRelease(v51);
LABEL_101:
      v57 = sub_10029628C(v51, v52, v19, v50);
LABEL_108:
      swift_unknownObjectRelease(v51);
      v13 = v46;
      v63 = v46[2];
      v62 = v46[3];
      v6 = v69;
      if (v63 >= v62 >> 1)
      {
        sub_1001217B4(v62 > 1, v63 + 1, 1);
        v13 = v46;
      }
      v13[2] = v63 + 1;
      v13[v63 + 4] = v57;
      v64 = v42 <= v68;
      if (v69 > 0)
        v64 = v42 >= v68;
      v19 = v42;
      if (v64)
        return;
    }
  }
  v14 = 0;
  if (a4 < 0)
    v15 = a4;
  else
    v15 = a4 & 0xFFFFFFFFFFFFFF8;
  v74 = v15;
  while (1)
  {
    v16 = v8 <= v7;
    if (v6 > 0)
      v16 = v8 >= v7;
    if (v16)
      break;
    v17 = v8 + a5;
    v18 = __OFADD__(v8, a5);
    v19 = v8 + v6;
    v72 = v13;
    if (__OFADD__(v8, v6))
    {
      if (v6 < 0)
      {
        if (v18)
          goto LABEL_138;
        v19 = 0x8000000000000000;
        v20 = (unint64_t)a4 >> 62;
        if (!v70)
        {
LABEL_29:
          v21 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v21 >= v17)
            v22 = v8 + a5;
          else
            v22 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v22 < v8)
            goto LABEL_121;
          goto LABEL_40;
        }
      }
      else
      {
        if (v18)
          goto LABEL_137;
        v19 = 0x7FFFFFFFFFFFFFFFLL;
        v20 = (unint64_t)a4 >> 62;
        if (!v70)
          goto LABEL_29;
      }
    }
    else
    {
      if (v18)
        goto LABEL_132;
      v20 = (unint64_t)a4 >> 62;
      if (!v70)
        goto LABEL_29;
    }
    swift_bridgeObjectRetain(a4);
    v22 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(a4);
    if (v22 >= v17)
      v22 = v8 + a5;
    if (v22 < v8)
      goto LABEL_121;
    swift_bridgeObjectRetain(a4);
    v21 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(a4);
LABEL_40:
    if (v21 < v8)
      goto LABEL_122;
    if (v8 < 0)
      goto LABEL_123;
    if (v20)
    {
      swift_bridgeObjectRetain(a4);
      v23 = _CocoaArrayWrapper.endIndex.getter(v74);
      swift_bridgeObjectRelease(a4);
    }
    else
    {
      v23 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v23 < v22)
      goto LABEL_124;
    if (v22 < 0)
      goto LABEL_125;
    if ((a4 & 0xC000000000000001) != 0 && v8 != v22)
    {
      if (v8 >= (unint64_t)v22)
        goto LABEL_133;
      sub_10001E724(0, &qword_100823FD0, _HKActivityStatisticsQuantityInfo_ptr);
      v24 = v8;
      do
      {
        v25 = v24 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v24);
        v24 = v25;
      }
      while (v22 != v25);
    }
    if (v20)
    {
      v29 = swift_bridgeObjectRetain(a4);
      v27 = _CocoaArrayWrapper.subscript.getter(v8, v22, v74, v29);
      v28 = v30;
      v8 = v31;
      v26 = v32;
      swift_bridgeObjectRelease(a4);
      if ((v26 & 1) == 0)
        goto LABEL_56;
    }
    else
    {
      v26 = (2 * v22) | 1;
      swift_bridgeObjectRetain(a4);
      v27 = a4 & 0xFFFFFFFFFFFFFF8;
      v28 = (a4 & 0xFFFFFFFFFFFFFF8) + 32;
      if ((v26 & 1) == 0)
        goto LABEL_56;
    }
    v67 = v28;
    v34 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v35 = swift_unknownObjectRetain_n(v27, 2);
    v36 = (_QWORD *)swift_dynamicCastClass(v35, v34);
    if (!v36)
    {
      swift_unknownObjectRelease(v27);
      v36 = _swiftEmptyArrayStorage;
    }
    v37 = v36[2];
    swift_release(v36);
    if (__OFSUB__(v26 >> 1, v8))
      goto LABEL_134;
    if (v37 == (v26 >> 1) - v8)
    {
      v33 = (_QWORD *)swift_dynamicCastClass(v27, v34);
      if (!v33)
      {
        swift_unknownObjectRelease(v27);
        v33 = _swiftEmptyArrayStorage;
      }
      goto LABEL_63;
    }
    swift_unknownObjectRelease(v27);
    v28 = v67;
LABEL_56:
    v33 = sub_10029628C(v27, v28, v8, v26);
LABEL_63:
    swift_unknownObjectRelease(v27);
    v13 = v72;
    v39 = v72[2];
    v38 = v72[3];
    if (v39 >= v38 >> 1)
    {
      sub_1001217B4(v38 > 1, v39 + 1, 1);
      v13 = v72;
    }
    ++v14;
    v13[2] = v39 + 1;
    v13[v39 + 4] = v33;
    v8 = v19;
    v7 = v68;
    v6 = v69;
    if (v9 == v14)
      goto LABEL_69;
  }
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
}

_BYTE *sub_1001958B8(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _BYTE *v24;
  objc_super v26;

  v3 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener;
  v4 = objc_allocWithZone((Class)type metadata accessor for ActivitySummaryChangeListener());
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = 0;
  v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isOriginalWheelchairObserver] = 1;
  v6 = &v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar];
  v7 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_minValueThresholdForActiveMinutes] = 0x3F1A36E2EB1C432DLL;
  v8 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue] = v8;
  v9 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_healthStore);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_healthStore] = v9;
  v10 = objc_allocWithZone((Class)type metadata accessor for ActivityQueryExecutor());
  v11 = v9;
  v12 = v8;
  v13 = sub_100008BFC(v11);

  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor] = v13;
  v14 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache] = v14;
  v15 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache] = v15;
  v16 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider] = v16;
  v17 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider] = v17;
  v18 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache] = v18;
  v19 = v14;
  v20 = v15;
  v21 = v16;
  v22 = v17;
  v23 = v18;

  v26.receiver = v5;
  v26.super_class = (Class)type metadata accessor for ActivityDataProvider(0);
  v24 = objc_msgSendSuper2(&v26, "init");
  objc_msgSend(*(id *)&v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache], "addObserver:", v24);
  v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = *(_BYTE *)(a1
                                                                                      + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser);
  v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isOriginalWheelchairObserver] = 0;
  return v24;
}

uint64_t sub_100195AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  void *v45;
  char *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void *v66;
  id v67;
  id v68;
  char *v69;
  Class isa;
  Class v71;
  id v72;
  id v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  unint64_t v101;

  v85 = a2;
  v92 = type metadata accessor for Calendar.Component(0);
  v99 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v95 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents(0);
  v93 = *(_QWORD *)(v10 - 8);
  v94 = (void (*)(char *, uint64_t, uint64_t))v10;
  __chkstk_darwin(v10);
  v82 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110((uint64_t *)&unk_100828370);
  v13 = __chkstk_darwin(v12);
  v89 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v91 = (char *)&v81 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v81 - v17;
  v19 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v84 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v88 = (char *)&v81 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v81 - v25;
  __chkstk_darwin(v24);
  v83 = (char *)&v81 - v27;
  v101 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v28)
      goto LABEL_3;
LABEL_28:
    v79 = swift_bridgeObjectRelease(a1);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v97 + 56))(v18, 1, 1, v19, v79);
    goto LABEL_29;
  }
  if (a1 < 0)
    v78 = a1;
  else
    v78 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v78))
    goto LABEL_28;
LABEL_3:
  v98 = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_6:
    v30 = v29;
    v31 = objc_msgSend(v29, "startDate", swift_bridgeObjectRelease(a1).n128_f64[0]);

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v32 = v97;
    v33 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    v33(v18, v26, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v19);
    v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    if (v100(v18, 1, v19) != 1)
    {
      v81 = a1;
      v3 = v83;
      v86 = (void (*)(char *, uint64_t, uint64_t))v33;
      v33(v83, v18, v19);
      if (qword_10081D558 == -1)
        goto LABEL_8;
      goto LABEL_33;
    }
LABEL_29:
    sub_10001BE90((uint64_t)v18, (uint64_t *)&unk_100828370);
    goto LABEL_30;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_33:
  swift_once(&qword_10081D558, sub_100006F7C);
LABEL_8:
  v34 = sub_10003CE9C(v7, (uint64_t)qword_100869D40);
  v35 = v95;
  v36 = *(void (**)(char *))(v95 + 16);
  v87 = v34;
  v36(v9);
  v37 = sub_100047110((uint64_t *)&unk_100828720);
  v38 = v99;
  v39 = *(unsigned __int8 *)(v99 + 80);
  v40 = (v39 + 32) & ~v39;
  v41 = swift_allocObject(v37, v40 + *(_QWORD *)(v99 + 72), v39 | 7);
  *(_OWORD *)(v41 + 16) = xmmword_100622F90;
  v42 = v41 + v40;
  v43 = *(void (**)(uint64_t))(v38 + 104);
  v96 = enum case for Calendar.Component.minute(_:);
  v44 = v92;
  v43(v42);
  v45 = sub_1002302F0(v41);
  swift_setDeallocating(v41);
  swift_arrayDestroy(v42, 1, v44);
  swift_deallocClassInstance(v41, 32, 7);
  v46 = v82;
  Calendar.dateComponents(_:from:to:)(v45, v98, v3);
  v47 = swift_bridgeObjectRelease(v45);
  v48 = (*(uint64_t (**)(char *, uint64_t, __n128))(v35 + 8))(v9, v7, v47);
  v49 = DateComponents.minute.getter(v48);
  LOBYTE(v41) = v50;
  result = (*(uint64_t (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v93 + 8))(v46, v94);
  if ((v41 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v97 + 8))(v3, v19);
LABEL_23:
    a1 = v81;
LABEL_30:
    swift_bridgeObjectRetain(a1);
    sub_10013C960(v80);
    return v101;
  }
  v94 = (void (*)(char *, uint64_t, uint64_t))v43;
  v95 = v19;
  if ((v49 & 0x8000000000000000) == 0)
  {
    v52 = v96;
    v53 = v90;
    v54 = (uint64_t)v91;
    v93 = v49;
    if (v49)
    {
      v55 = 0;
      do
      {
        v56 = v94;
        v94(v53, v52, v44);
        Calendar.date(byAdding:value:to:wrappingComponents:)(v53, v55, v98, 0);
        v57 = *(void (**)(char *, uint64_t))(v99 + 8);
        v57(v53, v44);
        v58 = v95;
        if (v100((char *)v54, 1, v95) == 1)
        {
          sub_10001BE90(v54, (uint64_t *)&unk_100828370);
        }
        else
        {
          v59 = v88;
          v60 = v54;
          v61 = v86;
          v86(v88, v60, v58);
          v56(v53, v52, v44);
          v62 = (uint64_t)v89;
          Calendar.date(byAdding:value:to:wrappingComponents:)(v53, 1, v59, 0);
          v63 = v58;
          v57(v53, v44);
          v64 = v62;
          if (v100((char *)v62, 1, v58) == 1)
          {
            (*(void (**)(char *, uint64_t))(v97 + 8))(v59, v58);
            sub_10001BE90(v62, (uint64_t *)&unk_100828370);
          }
          else
          {
            v65 = v84;
            v61(v84, v64, v58);
            v66 = (void *)objc_opt_self(HKQuantity);
            v67 = objc_msgSend(v66, "quantityWithUnit:doubleValue:", v85, 0.0);
            v68 = objc_allocWithZone((Class)_HKActivityStatisticsQuantityInfo);
            v69 = v59;
            isa = Date._bridgeToObjectiveC()().super.isa;
            v71 = Date._bridgeToObjectiveC()().super.isa;
            v72 = objc_msgSend(v68, "initWithStartDate:endDate:", isa, v71);

            objc_msgSend(v72, "setQuantityValue:", v67);
            v73 = v72;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v73);
            v75 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v74 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v75 >= v74 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
            v76 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v73);
            specialized Array._endMutation()(v76);

            v77 = *(void (**)(char *, uint64_t))(v97 + 8);
            v77(v65, v63);
            v77(v69, v63);
          }
          v54 = (uint64_t)v91;
          v44 = v92;
          v53 = v90;
        }
        ++v55;
        v52 = v96;
      }
      while (v93 != v55);
    }
    (*(void (**)(char *, uint64_t))(v97 + 8))(v83, v95);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void sub_100196214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  Class isa;
  Class v21;
  id v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  Class v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v50 = a2;
  v57 = type metadata accessor for Date(0);
  v49 = *(_QWORD *)(v57 - 8);
  v5 = __chkstk_darwin(v57);
  v48 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - v7;
  v58 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_38;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (a3)
  {
    while (1)
    {
      swift_bridgeObjectRetain(a1);
      sub_1001951EC(0, v9, a3, a1, a3);
      a3 = v10;
      swift_bridgeObjectRelease(a1);
      v52 = *(_QWORD *)(a3 + 16);
      if (!v52)
      {
LABEL_34:
        swift_bridgeObjectRelease(a3);
        return;
      }
      v11 = 0;
      v51 = a3 + 32;
      v47 = a3;
LABEL_7:
      if (v11 < *(_QWORD *)(a3 + 16))
        break;
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      if (a1 < 0)
        v46 = a1;
      else
        v46 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v9 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(a1);
      if (!a3)
        goto LABEL_42;
    }
    v12 = *(_QWORD *)(v51 + 8 * v11);
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v45 = *(_QWORD *)(v51 + 8 * v11);
      else
        v45 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v51 + 8 * v11), 2);
      a1 = _CocoaArrayWrapper.endIndex.getter(v45);
      swift_bridgeObjectRelease(v12);
      if (!a1)
      {
LABEL_5:
        swift_bridgeObjectRelease(v12);
        goto LABEL_6;
      }
    }
    else
    {
      a1 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v51 + 8 * v11));
      if (!a1)
        goto LABEL_5;
    }
    v56 = v12 & 0xC000000000000001;
    v54 = v11;
    if ((v12 & 0xC000000000000001) != 0)
    {
      v13 = a1;
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    }
    else
    {
      if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_37;
      v13 = a1;
      v14 = *(id *)(v12 + 32);
    }
    v15 = v14;
    v16 = objc_msgSend(v14, "startDate", v47);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v53 = v15;
    v17 = objc_msgSend(v15, "endDate");
    v18 = v48;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = objc_allocWithZone((Class)_HKActivityStatisticsQuantityInfo);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v21 = Date._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v19, "initWithStartDate:endDate:", isa, v21);

    v23 = *(void (**)(char *, uint64_t))(v49 + 8);
    v24 = v57;
    v23(v18, v57);
    v55 = v23;
    v23(v8, v24);
    v25 = (void *)objc_opt_self(HKQuantity);
    v26 = v22;
    v27 = objc_msgSend(v25, "quantityWithUnit:doubleValue:", v50, 0.0);
    objc_msgSend(v26, "setQuantityValue:", v27);

    swift_bridgeObjectRetain(v12);
    v28 = v26;
    v29 = 4;
    v30 = &selRef_tableView_titleForHeaderInSection_;
    v31 = v13;
    while (1)
    {
      a3 = v29 - 4;
      if (v56)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v12);
      else
        v32 = *(id *)(v12 + 8 * v29);
      a1 = (uint64_t)v32;
      v33 = v29 - 3;
      if (__OFADD__(a3, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      v34 = objc_msgSend(v32, "endDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

      v35 = Date._bridgeToObjectiveC()().super.isa;
      v55(v8, v57);
      objc_msgSend(v28, "setEndDate:", v35);

      v36 = objc_msgSend((id)a1, v30[386]);
      if (v36)
      {
        v37 = v36;
        v38 = v31;
        v39 = objc_msgSend(v28, v30[386]);
        if (v39)
        {
          v40 = v39;
          v41 = objc_msgSend(v39, "_quantityByAddingQuantity:", v37);

        }
        else
        {
          v41 = 0;
        }
        objc_msgSend(v28, "setQuantityValue:", v41);

        v31 = v38;
        v30 = &selRef_tableView_titleForHeaderInSection_;
        if (v33 == v38)
        {
LABEL_25:

          swift_bridgeObjectRelease_n(v12, 2);
          a1 = (uint64_t)v28;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a1);
          v43 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v42 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v43 >= v42 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, a1);
          specialized Array._endMutation()(v44);

          a3 = v47;
          v11 = v54;
LABEL_6:
          if (++v11 == v52)
            goto LABEL_34;
          goto LABEL_7;
        }
      }
      else
      {

        if (v33 == v31)
          goto LABEL_25;
      }
      ++v29;
    }
  }
LABEL_42:
  __break(1u);
}

double sub_10019672C(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(_QWORD);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t);
  void *v60;
  __n128 v61;
  void (*v62)(char *, uint64_t, __n128);
  uint64_t v63;
  char *v64;
  Class isa;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t Strong;
  void *v70;
  id v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  void (*v102)(char *, uint64_t, __n128);
  uint64_t v103;
  uint64_t v104;
  double result;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  void (*v118)(uint64_t, char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  unsigned int v126;
  void (*v127)(uint64_t, _QWORD, uint64_t);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char v143[32];

  v121 = a2;
  v142 = a1;
  v6 = sub_100047110(&qword_100823FC8);
  __chkstk_darwin(v6);
  v131 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v8);
  v128 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for DateComponents(0);
  v122 = *(_QWORD *)(v123 - 8);
  v10 = __chkstk_darwin(v123);
  v135 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v136 = (char *)&v117 - v13;
  __chkstk_darwin(v12);
  v140 = (uint64_t)&v117 - v14;
  v15 = type metadata accessor for Calendar.Component(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v19);
  v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Calendar(0);
  v23 = *(_QWORD **)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v138 = *(_QWORD *)(v26 - 8);
  v139 = v26;
  v27 = __chkstk_darwin(v26);
  v120 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v124 = (char *)&v117 - v30;
  v31 = __chkstk_darwin(v29);
  v132 = (char *)&v117 - v32;
  v33 = __chkstk_darwin(v31);
  v133 = (uint64_t)&v117 - v34;
  v119 = v35;
  __chkstk_darwin(v33);
  v37 = (char *)&v117 - v36;
  v137 = a4;
  swift_retain(a4);
  sub_100192FB0((uint64_t)v25);
  Calendar.startOfDay(for:)(v142);
  v125 = v23;
  v38 = (void (*)(char *, uint64_t))v23[1];
  v38(v25, v22);
  v141 = a3;
  sub_100192FB0((uint64_t)v25);
  v39 = *(void (**)(_QWORD))(v16 + 104);
  v126 = enum case for Calendar.Component.day(_:);
  v127 = (void (*)(uint64_t, _QWORD, uint64_t))v39;
  v39(v18);
  v134 = v37;
  v40 = v37;
  v41 = v138;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v18, 1, v40, 0);
  v129 = v16;
  v130 = v15;
  v42 = v18;
  v43 = v139;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v42, v15);
  v38(v25, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v21, 1, v43) != 1)
  {
    v118 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 32);
    v118(v133, v21, v43);
    v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v125[7];
    v46 = v128;
    v47 = v22;
    v45(v128, 1, 1, v22);
    v48 = type metadata accessor for TimeZone(0);
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
    v50 = v131;
    v49(v131, 1, 1, v48);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v46, v50, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    DateComponents.second.setter(60, 0);
    v45(v46, 1, 1, v47);
    v49(v50, 1, 1, v48);
    LOBYTE(v116) = 1;
    LOBYTE(v115) = 1;
    LOBYTE(v114) = 1;
    LOBYTE(v113) = 1;
    LOBYTE(v112) = 1;
    LOBYTE(v111) = 1;
    LOBYTE(v110) = 1;
    LOBYTE(v109) = 1;
    LOBYTE(v108) = 1;
    LOBYTE(v107) = 1;
    LOBYTE(v106) = 1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v46, v50, 0, 1, 0, 1, 0, 1, 0, v106, 0, v107, 0, v108, 0, v109, 0, v110, 0,
      v111,
      0,
      v112,
      0,
      v113,
      0,
      v114,
      0,
      v115,
      0,
      v116);
    DateComponents.minute.setter(15, 0);
    v128 = (char *)OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
    v125 = *(id *)&v141[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache];
    v51 = v132;
    Calendar.startOfDay(for:)(v142);
    v52 = sub_100047110((uint64_t *)&unk_100828720);
    v53 = *(_QWORD *)(v129 + 72);
    v54 = *(unsigned __int8 *)(v129 + 80);
    v55 = (v54 + 32) & ~v54;
    v56 = swift_allocObject(v52, v55 + 3 * v53, v54 | 7);
    *(_OWORD *)(v56 + 16) = xmmword_100624A40;
    v57 = v56 + v55;
    v58 = v130;
    v59 = v127;
    v127(v57, enum case for Calendar.Component.year(_:), v130);
    v59(v57 + v53, enum case for Calendar.Component.month(_:), v58);
    v59(v57 + 2 * v53, v126, v58);
    v60 = sub_1002302F0(v56);
    swift_setDeallocating(v56);
    swift_arrayDestroy(v57, 3, v58);
    swift_deallocClassInstance(v56, 32, 7);
    Calendar.dateComponents(_:from:)(v60, v51);
    v61 = swift_bridgeObjectRelease(v60);
    v62 = *(void (**)(char *, uint64_t, __n128))(v41 + 8);
    v62(v51, v43, v61);

    v63 = v41;
    v64 = (char *)*(id *)&v128[(_QWORD)v141];
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    v66 = objc_msgSend(*(id *)&v64[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_cache], "objectForKey:", isa);

    v67 = v43;
    v68 = v142;
    v131 = (char *)v62;
    if (v66)
    {
      v44 = v137;
      swift_beginAccess(v137 + 16, v143, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v44 + 16);
      if (Strong)
      {
        v70 = (void *)Strong;
        v71 = v66;
        sub_10047BC58(v71);

        v66 = v70;
      }
      v73 = v140;
      v72 = v141;

      v74 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v75 = (uint64_t)v124;
      v74(v124, v68, v67);
      v76 = v68;
      v77 = sub_1001932D0(v75);
      v78 = v75;
      v79 = (void (*)(uint64_t, uint64_t))v131;
      ((void (*)(uint64_t, uint64_t))v131)(v78, v67);
      if ((v77 & 1) == 0)
      {
        v80 = *(void (**)(char *, uint64_t))(v122 + 8);
        v81 = v123;
        v80(v135, v123);
        v80(v136, v81);
        v80((char *)v73, v81);
        v79(v133, v67);
        v82 = v67;
        v83 = (uint64_t)v134;
LABEL_10:
        v79(v83, v82);
        goto LABEL_11;
      }
    }
    else
    {
      v74 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v84 = v124;
      v74(v124, v142, v67);
      ((void (*)(char *, uint64_t))v62)(v84, v67);
      v44 = v137;
      v72 = v141;
      v76 = v68;
    }
    v137 = *(char **)&v72[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor];
    v85 = v132;
    v86 = (uint64_t)v134;
    v74(v132, (uint64_t)v134, v67);
    v87 = v120;
    v74(v120, v76, v67);
    v88 = *(unsigned __int8 *)(v63 + 80);
    v89 = (v88 + 48) & ~v88;
    v90 = (v119 + v88 + v89) & ~v88;
    v91 = v72;
    v92 = (char *)swift_allocObject(&unk_10078AEF8, v90 + v119, v88 | 7);
    *((_QWORD *)v92 + 2) = sub_1001970D4;
    *((_QWORD *)v92 + 3) = v44;
    v93 = v121;
    *((_QWORD *)v92 + 4) = v72;
    *((_QWORD *)v92 + 5) = v93;
    v94 = &v92[v89];
    v83 = v86;
    v95 = (void (*)(char *, char *, uint64_t))v118;
    v118((uint64_t)v94, v85, v67);
    v95(&v92[v90], v87, v67);
    v96 = v137;
    swift_retain(v44);
    v97 = v91;
    v98 = v133;
    v99 = v140;
    v100 = (uint64_t)v136;
    sub_100328DA0(v86, v133, v140, (uint64_t)v136, 0, (uint64_t)sub_100197178, (uint64_t)v92);

    v101 = swift_release(v92);
    v102 = *(void (**)(char *, uint64_t, __n128))(v122 + 8);
    v103 = v123;
    v102(v135, v123, v101);
    ((void (*)(uint64_t, uint64_t))v102)(v100, v103);
    ((void (*)(uint64_t, uint64_t))v102)(v99, v103);
    v104 = v98;
    v79 = (void (*)(uint64_t, uint64_t))v131;
    ((void (*)(uint64_t, uint64_t))v131)(v104, v67);
    v82 = v67;
    goto LABEL_10;
  }
  sub_10001BE90((uint64_t)v21, (uint64_t *)&unk_100828370);
  v44 = v137;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v134, v43);
LABEL_11:
  *(_QWORD *)&result = swift_release(v44).n128_u64[0];
  return result;
}

void sub_1001970D4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10047BAC4(a1, a2, v2);
}

uint64_t sub_1001970DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 24));

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_100197178(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  sub_100193B3C(a1, a2, *(void (**)(_QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + ((v6 + 48) & ~v6), v2 + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 48) & ~v6)) & ~v6));
}

uint64_t sub_1001971E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100197204()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64) + 7;
  v6 = (v5 + v4) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v3 + v8 + 8) & ~v3;
  v10 = (v5 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(&v0[v4], v1);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v6]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v7]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v8]);
  v12(&v0[v9], v1);
  swift_release(*(_QWORD *)&v0[v10 + 8]);
  swift_errorRelease(*(_QWORD *)&v0[v11]);
  return swift_deallocObject(v0, v11 + 8, v14);
}

uint64_t sub_100197310()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64) + 7;
  v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v2 + v7 + 8) & ~v2;
  return sub_1001940DC(v0[2], v0[3], v0[4], v0[5], (uint64_t)v0 + v3, *(uint64_t *)((char *)v0 + v5), *(uint64_t *)((char *)v0 + v6), *(uint64_t *)((char *)v0 + v7), (uint64_t)v0 + v8, *(uint64_t *)((char *)v0 + ((v4 + v8) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v0 + ((v4 + v8) & 0xFFFFFFFFFFFFFFF8) + 8), *(uint64_t *)((char *)v0 + ((((v4 + v8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001973B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001973EC()
{
  uint64_t v0;

  return sub_10019471C(*(void (**)(uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

double sub_1001973FC(char a1)
{
  uint64_t v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  double result;
  _QWORD v12[2];
  _BYTE v13[104];

  v2 = a1 & 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser) = a1;
  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10081D640 != -1)
    swift_once(&qword_10081D640, sub_10004CE14);
  v4 = (void *)qword_100869F70;
  v5 = sub_100047110(&qword_1008364D0);
  inited = swift_initStackObject(v5, v13);
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  v12[0] = 0xD000000000000010;
  v12[1] = 0x8000000100688AB0;
  v7 = v4;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v12, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = v2;
  v8 = sub_100435E28(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "postNotificationName:object:userInfo:", v7, 0, isa, swift_bridgeObjectRelease(v8).n128_f64[0]);

  type metadata accessor for WidgetCenter(0);
  v10 = static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t sub_100197588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DateComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10019761C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for DateComponents(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100194CA8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_100197674()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001976A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1001976C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DateComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100197764()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for DateComponents(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100194F64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(uint64_t (**)(uint64_t))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_1001977AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823FE8;
  if (!qword_100823FE8)
  {
    v1 = sub_10001E724(255, (unint64_t *)&qword_10082BBF0, ACHAchievement_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100823FE8);
  }
  return result;
}

uint64_t sub_100197804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100827450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_100197864()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v20;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)CHFriendInboxBarButtonView), "init");
  objc_msgSend(v2, "setDelegate:", v0);
  sub_100197AD0();
  if (v3)
  {
    v5 = v3;
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v4 = swift_bridgeObjectRelease(v5).n128_u64[0];
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v2, "setBadgeText:", v6, v4);

  v7 = *(_QWORD *)(v1 + qword_100823FF8 + 168);
  v8 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v9 = sub_1001980EC();
  swift_retain(v7);
  v10 = ObservableObject<>.objectWillChange.getter(v8, v9);
  swift_release(v7);
  v20 = v10;
  v11 = swift_allocObject(&unk_10078B0B8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  v12 = swift_allocObject(&unk_10078B0E0, 32, 7);
  *(_QWORD *)(v12 + 16) = v2;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject(&unk_10078B108, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100198184;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = type metadata accessor for ObservableObjectPublisher(0);
  v15 = v2;
  v16 = Publisher<>.sink(receiveValue:)(sub_10011DFF4, v13, v14, &protocol witness table for ObservableObjectPublisher);
  swift_release(v13);
  swift_release(v20);
  v17 = *(_QWORD *)(v1 + qword_100823FF0);
  *(_QWORD *)(v1 + qword_100823FF0) = v16;
  swift_release(v17);
  v18 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v15);

  return v18;
}

void sub_100197A30(void *a1, uint64_t a2)
{
  uint64_t v3;
  NSString Strong;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = (NSString)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    sub_100197AD0();
    v6 = v5;

    if (v6)
    {
      Strong = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      Strong = 0;
    }
  }
  objc_msgSend(a1, "setBadgeText:", Strong);

}

unint64_t sub_100197AD0()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;
  void *v3;
  Class isa;
  id v5;

  result = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v0 + qword_100823FF8 + 168)+ OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager), "totalNumberOfPendingRequests");
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    if (result)
    {
      v3 = (void *)objc_opt_self(FIUIFormattingManager);
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v5 = objc_msgSend(v3, "stringWithNumber:decimalPrecision:", isa, 1);

      if (v5)
      {
        v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

      }
      else
      {
        return 0;
      }
    }
    return v2;
  }
  return result;
}

void sub_100197B98(char a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  id v14;
  objc_super v15;

  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for ActivitySharingTabViewHostingController(0);
  objc_msgSendSuper2(&v15, "viewIsAppearing:", a1 & 1);
  v3 = objc_msgSend(v1, "navigationController");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "navigationBar");

    objc_msgSend(v5, "setPrefersLargeTitles:", 1);
  }
  v6 = objc_msgSend(v1, "navigationItem");
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setTitle:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  v13 = objc_msgSend(v1, "navigationItem");
  v14 = sub_100197864();
  objc_msgSend(v13, "setRightBarButtonItem:", v14);

}

void sub_100197D58(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_100197B98(a3);

}

void sub_100197D98(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[qword_100823FF0] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/ActivitySharingTabViewHostingController.swift", 56, 2, 44, 0);
  __break(1u);
}

uint64_t sub_100197E0C()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[13];
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + qword_100823FF0));
  v1 = *(_OWORD *)(v0 + qword_100823FF8 + 176);
  v8[10] = *(_OWORD *)(v0 + qword_100823FF8 + 160);
  v8[11] = v1;
  v8[12] = *(_OWORD *)(v0 + qword_100823FF8 + 192);
  v9 = *(_QWORD *)(v0 + qword_100823FF8 + 208);
  v2 = *(_OWORD *)(v0 + qword_100823FF8 + 112);
  v8[6] = *(_OWORD *)(v0 + qword_100823FF8 + 96);
  v8[7] = v2;
  v3 = *(_OWORD *)(v0 + qword_100823FF8 + 144);
  v8[8] = *(_OWORD *)(v0 + qword_100823FF8 + 128);
  v8[9] = v3;
  v4 = *(_OWORD *)(v0 + qword_100823FF8 + 48);
  v8[2] = *(_OWORD *)(v0 + qword_100823FF8 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(v0 + qword_100823FF8 + 80);
  v8[4] = *(_OWORD *)(v0 + qword_100823FF8 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(v0 + qword_100823FF8 + 16);
  v8[0] = *(_OWORD *)(v0 + qword_100823FF8);
  v8[1] = v6;
  return sub_100011450((uint64_t)v8);
}

id sub_100197E88()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingTabViewHostingController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100197EBC(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[13];
  uint64_t v10;

  swift_release(*(_QWORD *)(a1 + qword_100823FF0));
  v2 = *(_OWORD *)(a1 + qword_100823FF8 + 176);
  v9[10] = *(_OWORD *)(a1 + qword_100823FF8 + 160);
  v9[11] = v2;
  v9[12] = *(_OWORD *)(a1 + qword_100823FF8 + 192);
  v10 = *(_QWORD *)(a1 + qword_100823FF8 + 208);
  v3 = *(_OWORD *)(a1 + qword_100823FF8 + 112);
  v9[6] = *(_OWORD *)(a1 + qword_100823FF8 + 96);
  v9[7] = v3;
  v4 = *(_OWORD *)(a1 + qword_100823FF8 + 144);
  v9[8] = *(_OWORD *)(a1 + qword_100823FF8 + 128);
  v9[9] = v4;
  v5 = *(_OWORD *)(a1 + qword_100823FF8 + 48);
  v9[2] = *(_OWORD *)(a1 + qword_100823FF8 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + qword_100823FF8 + 80);
  v9[4] = *(_OWORD *)(a1 + qword_100823FF8 + 64);
  v9[5] = v6;
  v7 = *(_OWORD *)(a1 + qword_100823FF8 + 16);
  v9[0] = *(_OWORD *)(a1 + qword_100823FF8);
  v9[1] = v7;
  return sub_100011450((uint64_t)v9);
}

uint64_t sub_100197F44(__int128 *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[13];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v1 = a1[11];
  v32 = a1[10];
  v33 = v1;
  v34 = a1[12];
  v35 = *((_QWORD *)a1 + 26);
  v2 = a1[7];
  v28 = a1[6];
  v29 = v2;
  v3 = a1[9];
  v30 = a1[8];
  v31 = v3;
  v4 = a1[3];
  v24 = a1[2];
  v25 = v4;
  v5 = a1[5];
  v26 = a1[4];
  v27 = v5;
  v6 = a1[1];
  v22 = *a1;
  v23 = v6;
  v7 = (char *)objc_allocWithZone((Class)type metadata accessor for ActivitySharingTabViewHostingController(0));
  *(_QWORD *)&v7[qword_100823FF0] = 0;
  v8 = &v7[qword_100823FF8];
  v9 = v23;
  *(_OWORD *)v8 = v22;
  *((_OWORD *)v8 + 1) = v9;
  v10 = v27;
  v12 = v24;
  v11 = v25;
  *((_OWORD *)v8 + 4) = v26;
  *((_OWORD *)v8 + 5) = v10;
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v11;
  v13 = v31;
  v15 = v28;
  v14 = v29;
  *((_OWORD *)v8 + 8) = v30;
  *((_OWORD *)v8 + 9) = v13;
  *((_OWORD *)v8 + 6) = v15;
  *((_OWORD *)v8 + 7) = v14;
  v17 = v33;
  v16 = v34;
  v18 = v32;
  *((_QWORD *)v8 + 26) = v35;
  *((_OWORD *)v8 + 11) = v17;
  *((_OWORD *)v8 + 12) = v16;
  *((_OWORD *)v8 + 10) = v18;
  v20[10] = v32;
  v20[11] = v33;
  v20[12] = v34;
  v21 = v35;
  v20[6] = v28;
  v20[7] = v29;
  v20[8] = v30;
  v20[9] = v31;
  v20[2] = v24;
  v20[3] = v25;
  v20[4] = v26;
  v20[5] = v27;
  v20[0] = v22;
  v20[1] = v23;
  sub_100021D04((uint64_t)&v22);
  return UIHostingController.init(rootView:)(v20);
}

void sub_10019805C()
{
  _swift_stdlib_reportUnimplementedInitializer("FitnessApp.ActivitySharingTabViewHostingController", 50, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_100198088()
{
  return type metadata accessor for ActivitySharingTabViewHostingController(0);
}

double sub_100198090(char *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *(_QWORD *)&a1[qword_100823FF8 + 144];
  v5 = a3;
  v6 = a1;
  swift_retain(v4);
  sub_10029D9F0(v7);

  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

unint64_t sub_1001980EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008240B0;
  if (!qword_1008240B0)
  {
    v1 = type metadata accessor for ActivitySharingFriendListDataProvider(255);
    result = swift_getWitnessTable(&unk_100625DD8, v1);
    atomic_store(result, (unint64_t *)&qword_1008240B0);
  }
  return result;
}

uint64_t sub_100198134()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100198158()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100198184()
{
  uint64_t v0;

  sub_100197A30(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10019818C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10019824C(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v6 = type metadata accessor for SummaryStringBuilder(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = (_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider)
                 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_unitPreferencesProvider);
  v14 = v13[1];
  v15 = swift_unknownObjectRetain(*v13);
  SummaryStringBuilder.init(unitPreferencesProvider:)(v15, v14);
  v16 = objc_msgSend(a2, "workoutActivityType");
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v17 = objc_allocWithZone((Class)type metadata accessor for SummaryBurnBarView(0));
  v18 = (void *)SummaryBurnBarView.init(workoutActivityType:stringBuilder:)(v16, 0, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v19 = objc_msgSend(v3, "contentView");
  objc_msgSend(v19, "addSubview:", v18);

  v20 = (void *)objc_opt_self(NSLayoutConstraint);
  v21 = sub_100047110((uint64_t *)&unk_100828340);
  v22 = swift_allocObject(v21, 56, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100624C90;
  v23 = objc_msgSend(v18, "topAnchor");
  v24 = objc_msgSend(v3, "contentView");
  v25 = objc_msgSend(v24, "topAnchor");

  v26 = objc_msgSend(v23, "constraintEqualToAnchor:constant:", v25, 16.0);
  *(_QWORD *)(v22 + 32) = v26;
  v27 = objc_msgSend(v18, "centerXAnchor");
  v28 = objc_msgSend(v3, "contentView");
  v29 = objc_msgSend(v28, "centerXAnchor");

  v30 = objc_msgSend(v27, "constraintEqualToAnchor:", v29);
  *(_QWORD *)(v22 + 40) = v30;
  v31 = objc_msgSend(v18, "bottomAnchor");
  v32 = objc_msgSend(v3, "contentView");
  v33 = objc_msgSend(v32, "bottomAnchor");

  v34 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v33, -16.0);
  *(_QWORD *)(v22 + 48) = v34;
  v40 = v22;
  specialized Array._endMutation()(v35);
  v36 = v40;
  sub_100039898();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "activateConstraints:", isa, swift_bridgeObjectRelease(v36).n128_f64[0]);

  v38 = *(void **)&v3[OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView];
  *(_QWORD *)&v3[OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView] = v18;

}

uint64_t sub_1001985C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;

  v7 = sub_100047110(&qword_1008240F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SummaryBurnBarMetricViewModel(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView;
  if (!*(_QWORD *)(v3 + OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView))
    sub_10019824C(a1, a2);
  v16 = a3 + OBJC_IVAR___CHScoreSummaryWrapper_scoreSummary;
  v17 = type metadata accessor for ScoreSummary(0, v12);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v9, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  SummaryBurnBarMetricViewModel.init(scoreSummary:showBurnBar:titleText:subtitleText:)(v9, 1, 0, 0);
  v19 = *(void **)(v3 + v15);
  if (v19)
  {
    v20 = v19;
    dispatch thunk of SummaryBurnBarView.updateViewModel(_:)(v14);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

id sub_10019881C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailBurnBarTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailBurnBarTableViewCell()
{
  return objc_opt_self(CHWorkoutDetailBurnBarTableViewCell);
}

char *sub_10019887C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  const void *v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v57)(char *, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    v13 = v6;
    v11(v8, v9, v10);
    v14 = (int *)type metadata accessor for CatalogTipSectionItem(0);
    v15 = v14[5];
    v16 = &v8[v15];
    v17 = v9 + v15;
    v18 = type metadata accessor for Artwork(0);
    v19 = *(_QWORD *)(v18 - 8);
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v57(v16, v17, v18);
    v20 = v14[6];
    v21 = &v8[v20];
    v22 = (_QWORD *)(v9 + v20);
    v23 = v22[1];
    *(_QWORD *)v21 = *v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = v14[7];
    v25 = &v8[v24];
    v26 = (_QWORD *)(v9 + v24);
    v27 = v26[1];
    *(_QWORD *)v25 = *v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = v14[8];
    v29 = &v8[v28];
    v30 = (const void *)(v9 + v28);
    v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v19 + 48);
    swift_bridgeObjectRetain(v23);
    v32 = swift_bridgeObjectRetain(v27);
    if (v31(v30, 1, v18, v32))
    {
      v33 = sub_100047110((uint64_t *)&unk_1008283A0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v57(v29, (uint64_t)v30, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
    }
    v34 = v14[9];
    v35 = &v8[v34];
    v36 = (_QWORD *)(v9 + v34);
    v37 = v36[1];
    *(_QWORD *)v35 = *v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v14[10];
    v39 = &v8[v38];
    v40 = (_QWORD *)(v9 + v38);
    v41 = v40[1];
    *(_QWORD *)v39 = *v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = v14[11];
    v43 = &v8[v42];
    v44 = (_QWORD *)(v9 + v42);
    v45 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = v14[12];
    v47 = &v8[v46];
    v48 = v9 + v46;
    v49 = type metadata accessor for URL(0);
    v50 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v49 - 8) + 16);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v41);
    v51 = swift_bridgeObjectRetain(v45);
    v50(v47, v48, v49, v51);
    v52 = *(int *)(a3 + 28);
    v53 = &v5[v52];
    v54 = (char **)((char *)a2 + v52);
    v55 = v54[1];
    *(_QWORD *)v53 = *v54;
    *((_QWORD *)v53 + 1) = v55;
    swift_bridgeObjectRetain(v55);
  }
  return v5;
}

uint64_t sub_100198AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t (*v36)(const void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v65)(void *, const void *, uint64_t);
  uint64_t v66;
  uint64_t v67;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v66 = a3;
  v67 = a2;
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v17 = v16[5];
  v18 = (void *)(v13 + v17);
  v19 = (const void *)(v14 + v17);
  v20 = type metadata accessor for Artwork(0);
  v21 = *(_QWORD *)(v20 - 8);
  v65 = *(void (**)(void *, const void *, uint64_t))(v21 + 24);
  v65(v18, v19, v20);
  v22 = v16[6];
  v23 = (_QWORD *)(v13 + v22);
  v24 = (_QWORD *)(v14 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v16[7];
  v28 = (_QWORD *)(v13 + v27);
  v29 = (_QWORD *)(v14 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  v32 = swift_bridgeObjectRelease(v31);
  v33 = v16[8];
  v34 = (void *)(v13 + v33);
  v35 = (const void *)(v14 + v33);
  v36 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v36)(v13 + v33, 1, v20, v32);
  v38 = v36(v35, 1, v20);
  if (!v37)
  {
    if (!v38)
    {
      v65(v34, v35, v20);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v34, v20);
    goto LABEL_6;
  }
  if (v38)
  {
LABEL_6:
    v39 = sub_100047110((uint64_t *)&unk_1008283A0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v34, v35, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v34, 0, 1, v20);
LABEL_7:
  v40 = v16[9];
  v41 = (_QWORD *)(v13 + v40);
  v42 = (_QWORD *)(v14 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = v16[10];
  v46 = (_QWORD *)(v13 + v45);
  v47 = (_QWORD *)(v14 + v45);
  *v46 = *v47;
  v48 = v47[1];
  v49 = v46[1];
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = v16[11];
  v51 = (_QWORD *)(v13 + v50);
  v52 = (_QWORD *)(v14 + v50);
  *v51 = *v52;
  v53 = v52[1];
  v54 = v51[1];
  v51[1] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = v16[12];
  v56 = v13 + v55;
  v57 = v14 + v55;
  v58 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  v59 = *(int *)(v66 + 28);
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(v67 + v59);
  *v60 = *v61;
  v62 = v61[1];
  v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  return a1;
}

_OWORD *sub_100198D98(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = *a2;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v10 = v9[5];
  v11 = &v6[v10];
  v12 = &v7[v10];
  v13 = type metadata accessor for Artwork(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v15(v11, v12, v13);
  *(_OWORD *)&v6[v9[6]] = *(_OWORD *)&v7[v9[6]];
  *(_OWORD *)&v6[v9[7]] = *(_OWORD *)&v7[v9[7]];
  v16 = v9[8];
  v17 = &v6[v16];
  v18 = &v7[v16];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&v7[v16], 1, v13))
  {
    v19 = sub_100047110((uint64_t *)&unk_1008283A0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v15(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  *(_OWORD *)&v6[v9[9]] = *(_OWORD *)&v7[v9[9]];
  *(_OWORD *)&v6[v9[10]] = *(_OWORD *)&v7[v9[10]];
  *(_OWORD *)&v6[v9[11]] = *(_OWORD *)&v7[v9[11]];
  v20 = v9[12];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_100198F40(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, __n128);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  _QWORD *v69;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v68 = a3;
  v69 = a2;
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = &v10[v13];
  v16 = type metadata accessor for Artwork(0);
  v17 = *(_QWORD *)(v16 - 8);
  v67 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 40);
  v67(v14, v15, v16);
  v18 = v12[6];
  v19 = (_QWORD *)(v9 + v18);
  v20 = &v10[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v12[7];
  v25 = (_QWORD *)(v9 + v24);
  v26 = &v10[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  v30 = swift_bridgeObjectRelease(v29);
  v31 = v12[8];
  v32 = (void *)(v9 + v31);
  v33 = &v10[v31];
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v17 + 48);
  v35 = v34(v9 + v31, 1, v16, v30);
  v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v33, 1, v16);
  if (!v35)
  {
    if (!v36)
    {
      v67((uint64_t)v32, v33, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v32, v16);
    goto LABEL_6;
  }
  if (v36)
  {
LABEL_6:
    v37 = sub_100047110((uint64_t *)&unk_1008283A0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 32))(v32, v33, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v32, 0, 1, v16);
LABEL_7:
  v38 = v12[9];
  v39 = (_QWORD *)(v9 + v38);
  v40 = &v10[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  v43 = v39[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease(v43);
  v44 = v12[10];
  v45 = (_QWORD *)(v9 + v44);
  v46 = &v10[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  v50 = v12[11];
  v51 = (_QWORD *)(v9 + v50);
  v52 = &v10[v50];
  v54 = *(_QWORD *)v52;
  v53 = *((_QWORD *)v52 + 1);
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = v12[12];
  v57 = v9 + v56;
  v58 = &v10[v56];
  v59 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  v60 = *(int *)(v68 + 28);
  v61 = (_QWORD *)(a1 + v60);
  v62 = (_QWORD *)((char *)v69 + v60);
  v64 = *v62;
  v63 = v62[1];
  v65 = v61[1];
  *v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease(v65);
  return a1;
}

uint64_t sub_1001991B0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CatalogTipSectionItem(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

char *sub_10019922C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CatalogTipSectionItem(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

Swift::Int sub_1001992A0(uint64_t a1)
{
  id *v1;
  id *v3;
  id v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v3 = v1;
  Hasher.init(_seed:)(v10, 0);
  v4 = *v1;
  NSObject.hash(into:)(v10);

  v5 = v3[1];
  NSObject.hash(into:)(v10);

  sub_1003D0F2C((uint64_t)v10);
  v6 = (uint64_t *)((char *)v3 + *(int *)(a1 + 28));
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v10, v7, v8);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

double sub_100199350(uint64_t a1, uint64_t a2)
{
  id *v2;
  id *v4;
  id v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v4 = v2;
  v6 = *v2;
  NSObject.hash(into:)(a1);

  v7 = v4[1];
  NSObject.hash(into:)(a1);

  sub_1003D0F2C(a1);
  v8 = (uint64_t *)((char *)v4 + *(int *)(a2 + 28));
  v9 = *v8;
  v10 = v8[1];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  return result;
}

Swift::Int sub_1001993E4(uint64_t a1, uint64_t a2)
{
  id *v2;
  id *v4;
  id v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v4 = v2;
  Hasher.init(_seed:)(v11, a1);
  v5 = *v2;
  NSObject.hash(into:)(v11);

  v6 = v4[1];
  NSObject.hash(into:)(v11);

  sub_1003D0F2C((uint64_t)v11);
  v7 = (uint64_t *)((char *)v4 + *(int *)(a2 + 28));
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v11, v8, v9);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_100199498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824190;
  if (!qword_100824190)
  {
    v1 = type metadata accessor for CatalogTipSection(255);
    result = swift_getWitnessTable(&unk_1006296E0, v1);
    atomic_store(result, (unint64_t *)&qword_100824190);
  }
  return result;
}

uint64_t sub_1001994E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  sub_100139CE8();
  if ((static NSObject.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  if ((static NSObject.== infix(_:_:)(a1[1], a2[1]) & 1) == 0)
    return 0;
  v4 = type metadata accessor for CatalogTipSection(0);
  if ((sub_1003D135C((uint64_t)a1 + *(int *)(v4 + 24), (uint64_t)a2 + *(int *)(v4 + 24)) & 1) == 0)
    return 0;
  v5 = *(int *)(v4 + 28);
  v6 = *(_QWORD *)((char *)a1 + v5);
  v7 = *(_QWORD *)((char *)a1 + v5 + 8);
  v8 = (_QWORD *)((char *)a2 + v5);
  v9 = v8[1];
  if (v6 == *v8 && v7 == v9)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0);
}

uint64_t destroy for MirrorArcView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for MirrorArcView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for MirrorArcView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

uint64_t assignWithTake for MirrorArcView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorArcView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorArcView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorArcView()
{
  return &type metadata for MirrorArcView;
}

uint64_t sub_1001997A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ADDF8, 1);
}

void sub_1001997B8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = GeometryProxy.size.getter(a1);
  GeometryProxy.size.getter(v6);
  if (v8 >= v5)
    v9 = v5;
  else
    v9 = v8;
  v10 = v9 - *(double *)(a2 + 48);
  v11 = GeometryProxy.size.getter(v7) * 0.5;
  GeometryProxy.size.getter(v12);
  v14 = v13 * 0.5;
  *a3 = static Alignment.center.getter(v15);
  a3[1] = v16;
  v17 = sub_100047110(&qword_100824198);
  sub_100199854(a2, (uint64_t)a3 + *(int *)(v17 + 44), v11, v14, v10);
}

void sub_100199854(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[6];
  _QWORD v67[5];
  _QWORD v68[4];
  unsigned __int8 v69;
  _QWORD v70[5];
  _QWORD v71[4];
  unsigned __int8 v72;
  _QWORD v73[6];

  v10 = sub_100047110(&qword_1008241A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_1008241A8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v61 = (uint64_t)&v52 - v17;
  *(double *)&v67[2] = a3;
  *(double *)&v67[3] = a4;
  *(double *)&v67[4] = a5;
  Path.init(_:)(v68, sub_10019A58C, v67);
  v59 = v68[1];
  v60 = v68[0];
  v18 = v68[3];
  v58 = v68[2];
  v19 = *(double *)(a1 + 48);
  v20 = v69;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v70, 1, 0, _swiftEmptyArrayStorage, v19, 10.0, 0.0);
  v21 = v70[0];
  v22 = v70[2];
  v23 = v70[3];
  v24 = v70[4];
  v56 = Color.init(rgbHex:)(3618616);
  *(double *)&v66[2] = a3;
  *(double *)&v66[3] = a4;
  *(double *)&v66[4] = a5;
  v66[5] = a1;
  Path.init(_:)(v71, sub_10019A5F0, v66);
  v25 = v71[0];
  v64 = v71[2];
  v65 = v71[1];
  v63 = v71[3];
  v62 = v72;
  v26 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v73, 1, 0, _swiftEmptyArrayStorage, v19, 10.0, 0.0);
  v27 = v73[0];
  v28 = v73[2];
  v57 = v73[3];
  v29 = v73[4];
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v26, v30, v31, v32, v33);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v34 = sub_100047110(&qword_1008241B0);
  v35 = sub_100199CD8(a1, &v12[*(int *)(v34 + 44)]);
  v36 = static Alignment.center.getter(v35);
  sub_1003EB294(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v36, v37);
  sub_10001BE90((uint64_t)v12, &qword_1008241A0);
  v52 = v16;
  v38 = v61;
  sub_100045AD4((uint64_t)v16, v61, &qword_1008241A8);
  sub_100021CC0(v38, (uint64_t)v16, &qword_1008241A8);
  v39 = v59;
  v40 = v60;
  *(_QWORD *)a2 = v60;
  *(_QWORD *)(a2 + 8) = v39;
  v41 = v58;
  *(_QWORD *)(a2 + 16) = v58;
  *(_QWORD *)(a2 + 24) = v18;
  v54 = v18;
  v55 = v23;
  v53 = v20;
  *(_BYTE *)(a2 + 32) = v20;
  v42 = v70[1];
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v42;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 72) = v24;
  v43 = v56;
  *(_QWORD *)(a2 + 80) = v56;
  *(_QWORD *)(a2 + 88) = v25;
  v44 = v64;
  *(_QWORD *)(a2 + 96) = v65;
  *(_QWORD *)(a2 + 104) = v44;
  *(_QWORD *)(a2 + 112) = v63;
  *(_BYTE *)(a2 + 120) = v62;
  v45 = v73[1];
  *(_QWORD *)(a2 + 128) = v27;
  *(_QWORD *)(a2 + 136) = v45;
  *(_QWORD *)(a2 + 144) = v28;
  *(_QWORD *)(a2 + 152) = v57;
  *(_QWORD *)(a2 + 160) = v29;
  v46 = a2 + *(int *)(sub_100047110(&qword_1008241B8) + 64);
  v47 = (uint64_t)v52;
  sub_100021CC0((uint64_t)v52, v46, &qword_1008241A8);
  sub_10019A600(v40, v39, v41, v18, v20);
  swift_bridgeObjectRetain(v23);
  swift_retain(v43);
  v48 = v64;
  v49 = v65;
  v50 = v63;
  LOBYTE(v18) = v62;
  sub_10019A600(v25, v65, v64, v63, v62);
  v51 = v57;
  swift_bridgeObjectRetain(v57);
  sub_10001BE90(v61, &qword_1008241A8);
  sub_10001BE90(v47, &qword_1008241A8);
  sub_10019A618(v25, v49, v48, v50, v18);
  swift_bridgeObjectRelease(v51);
  sub_10019A618(v60, v59, v58, v54, v53);
  swift_release(v43);
  swift_bridgeObjectRelease(v55);
}

uint64_t sub_100199C54(__n128 a1, __n128 a2, double a3, uint64_t a4, double *a5)
{
  double v5;
  _QWORD v7[6];

  v5 = *a5 / a5[1] * 270.0 + 135.0;
  v7[0] = 0x3FF0000000000000;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = 0x3FF0000000000000;
  v7[4] = 0;
  v7[5] = 0;
  return Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v7, a1, a2, a3 * 0.5, 2.35619449, v5 * 0.0174532925);
}

uint64_t sub_100199CD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[39];
  _BYTE v40[304];
  _BYTE v41[320];

  v36 = a2;
  v3 = sub_100047110(&qword_1008241C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_1008241C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v34 - v12;
  v14 = static VerticalAlignment.center.getter(v11);
  sub_100199FF4(a1, (uint64_t)v40);
  v41[304] = 0;
  memcpy(&v41[7], v40, 0x129uLL);
  v37 = v14;
  v38 = 0;
  LOBYTE(v39[0]) = 0;
  memcpy((char *)v39 + 1, v41, 0x130uLL);
  v15 = sub_100047110(&qword_1008241D0);
  v16 = sub_100028384(&qword_1008241D8, &qword_1008241D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.metricDescriptionFont(multiline:)(0, v15, v16);
  sub_10019A630((uint64_t)v40);
  v17 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v18 = Color.init(uiColor:)(v17);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v6, v3);
  *(_QWORD *)&v10[*(int *)(v7 + 36)] = v18;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v19 = sub_100045AD4((uint64_t)v10, (uint64_t)v13, &qword_1008241C8);
  if (qword_10081D528 != -1)
    v19 = swift_once(&qword_10081D528, sub_10010A2B0);
  v20 = *(double *)&qword_100869CC8 * 0.5
      + (*(double *)&qword_100869CC8 * 0.5 + *(double *)(a1 + 48) * 0.5) * -0.707106781
      + 2.0;
  v21 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v37, 0, 1, *(_QWORD *)&v20, 0, v21, v22);
  v23 = v37;
  v24 = v38;
  v25 = v39[0];
  v35 = LOBYTE(v39[1]);
  v26 = v39[2];
  v34 = v39[3];
  sub_100021CC0((uint64_t)v13, (uint64_t)v10, &qword_1008241C8);
  v27 = (uint64_t)v13;
  v28 = (uint64_t)v10;
  v29 = v36;
  *v36 = 0;
  *((_BYTE *)v29 + 8) = 1;
  v30 = sub_100047110(&qword_1008241E0);
  sub_100021CC0(v28, (uint64_t)v29 + *(int *)(v30 + 48), &qword_1008241C8);
  v31 = (char *)v29 + *(int *)(v30 + 64);
  *(_QWORD *)v31 = 0;
  v31[8] = 1;
  *((_QWORD *)v31 + 2) = v23;
  v31[24] = v24;
  *((_QWORD *)v31 + 4) = v25;
  v31[40] = v35;
  v32 = v34;
  *((_QWORD *)v31 + 6) = v26;
  *((_QWORD *)v31 + 7) = v32;
  sub_10001BE90(v27, &qword_1008241C8);
  return sub_10001BE90(v28, &qword_1008241C8);
}

double sub_100199FF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _BYTE v70[7];
  char v71;
  _BYTE v72[7];
  char v73;
  _BYTE v74[7];
  char v75;
  _BYTE v76[7];
  char v77;
  _BYTE v78[7];
  char v79;
  _BYTE v80[7];
  char v81;
  _BYTE v82[7];
  char v83;
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  _BYTE v90[7];
  char v91;
  _BYTE v92[7];
  char v93;

  v49 = static VerticalAlignment.center.getter(a1);
  v4 = *(_QWORD *)(a1 + 24);
  v63 = *(_QWORD *)(a1 + 16);
  v64 = v4;
  v5 = sub_100038CA0();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(&v63, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Alignment.trailing.getter(v6, v7);
  _FrameLayout.init(width:height:alignment:)(&v51, 0, 1, 0, 1, v13, v14);
  v47 = v53;
  v48 = v51;
  v43 = v54;
  v44 = v52;
  v45 = v56;
  v46 = v55;
  sub_1000E439C(v6, v8, v12);
  swift_bridgeObjectRetain(v10);
  sub_1000E4458(v6, v8, v12);
  v50 = v10;
  swift_bridgeObjectRelease(v10);
  if (qword_10081D528 != -1)
    v15 = swift_once(&qword_10081D528, sub_10010A2B0);
  v16 = *(double *)(a1 + 64)
      + *(double *)&qword_100869CC8 * 0.5 * 0.707106781
      + *(double *)(a1 + 64)
      + *(double *)&qword_100869CC8 * 0.5 * 0.707106781;
  v17 = static Alignment.center.getter(v15);
  v19 = _FrameLayout.init(width:height:alignment:)(&v57, *(_QWORD *)&v16, 0, 0, 1, v17, v18);
  v36 = v58;
  v41 = v59;
  v42 = v57;
  v32 = v60;
  v39 = v62;
  v40 = v61;
  v38 = static VerticalAlignment.center.getter(v19);
  v20 = *(_QWORD *)(a1 + 40);
  v63 = *(_QWORD *)(a1 + 32);
  v64 = v20;
  swift_bridgeObjectRetain(v20);
  v21 = Text.init<A>(_:)(&v63, &type metadata for String, v5);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)(&v63, 0, 1, 0, 1, v28, v29);
  v37 = v63;
  v31 = v64;
  LOBYTE(v16) = v66;
  v34 = v67;
  v35 = v65;
  v33 = v68;
  sub_1000E439C(v21, v23, v27);
  swift_bridgeObjectRetain(v25);
  sub_1000E4458(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  *(_DWORD *)(a2 + 268) = *(_DWORD *)&v70[3];
  *(_DWORD *)(a2 + 265) = *(_DWORD *)v70;
  v87 = v44;
  v85 = v43;
  v81 = v36;
  v79 = v32;
  v73 = v31;
  v71 = LOBYTE(v16);
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v92;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v92[3];
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v90;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v90[3];
  *(_DWORD *)(a2 + 57) = *(_DWORD *)v88;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a2 + 81) = *(_DWORD *)v86;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v84;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v82;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v80[3];
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v80;
  *(_DWORD *)(a2 + 164) = *(_DWORD *)&v78[3];
  *(_DWORD *)(a2 + 161) = *(_DWORD *)v78;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)&v76[3];
  *(_DWORD *)(a2 + 201) = *(_DWORD *)v76;
  *(_DWORD *)(a2 + 228) = *(_DWORD *)&v74[3];
  *(_DWORD *)(a2 + 225) = *(_DWORD *)v74;
  *(_DWORD *)(a2 + 252) = *(_DWORD *)&v72[3];
  *(_DWORD *)(a2 + 249) = *(_DWORD *)v72;
  v91 = 1;
  v89 = v12;
  v83 = 1;
  v69 = 1;
  *(_BYTE *)(a2 + 32) = 1;
  *(_BYTE *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 72) = v48;
  *(_BYTE *)(a2 + 80) = v87;
  *(_QWORD *)(a2 + 88) = v47;
  *(_BYTE *)(a2 + 96) = v85;
  *(_QWORD *)(a2 + 104) = v46;
  *(_QWORD *)(a2 + 112) = v45;
  *(_BYTE *)(a2 + 128) = v83;
  *(_QWORD *)(a2 + 136) = v42;
  *(_BYTE *)(a2 + 144) = v81;
  *(_QWORD *)(a2 + 152) = v41;
  *(_BYTE *)(a2 + 160) = v79;
  *(_QWORD *)(a2 + 168) = v40;
  *(_QWORD *)(a2 + 176) = v39;
  v77 = 0;
  v75 = v27;
  *(_QWORD *)(a2 + 184) = v38;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 224) = v27;
  *(_QWORD *)(a2 + 232) = v25;
  *(_QWORD *)(a2 + 240) = v37;
  *(_BYTE *)(a2 + 248) = v73;
  *(_QWORD *)(a2 + 256) = v35;
  *(_BYTE *)(a2 + 264) = v71;
  *(_QWORD *)(a2 + 272) = v34;
  *(_QWORD *)(a2 + 280) = v33;
  *(_BYTE *)(a2 + 296) = v69;
  *(_QWORD *)a2 = v49;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 64) = v50;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 208) = v21;
  *(_QWORD *)(a2 + 216) = v23;
  *(_QWORD *)(a2 + 288) = 0;
  v93 = 0;
  sub_1000E439C(v6, v8, v12);
  swift_bridgeObjectRetain(v50);
  sub_1000E439C(v21, v23, v27);
  swift_bridgeObjectRetain(v25);
  sub_1000E4458(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  sub_1000E4458(v6, v8, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v50).n128_u64[0];
  return result;
}

uint64_t sub_10019A4A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;

  v3 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v3;
  v10 = *(_QWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  v5 = swift_allocObject(&unk_10078B218, 88, 7);
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = sub_10019A550;
  a1[1] = v5;
  return sub_10019A558((uint64_t)v9);
}

uint64_t sub_10019A524()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 88, 7);
}

void sub_10019A550(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001997B8(a1, v2 + 16, a2);
}

uint64_t sub_10019A558(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10019A58C(__n128 a1, __n128 a2)
{
  uint64_t v2;
  double v3;
  _QWORD v5[6];

  a1.n128_u64[0] = *(_QWORD *)(v2 + 16);
  a2.n128_u64[0] = *(_QWORD *)(v2 + 24);
  v3 = *(double *)(v2 + 32) * 0.5;
  v5[0] = 0x3FF0000000000000;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0x3FF0000000000000;
  v5[4] = 0;
  v5[5] = 0;
  return Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v5, a1, a2, v3, 2.35619449, 7.06858347);
}

uint64_t sub_10019A5F0(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v3;

  a2.n128_u64[0] = *(_QWORD *)(v3 + 16);
  a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
  return sub_100199C54(a2, a3, *(double *)(v3 + 32), a1, *(double **)(v3 + 40));
}

uint64_t sub_10019A600(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_retain(result);
  return result;
}

uint64_t sub_10019A618(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_release(result);
  return result;
}

uint64_t sub_10019A630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 216);
  v5 = *(_BYTE *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 232);
  sub_1000E4458(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease(v2);
  sub_1000E4458(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10019A6A0()
{
  return sub_100028384(&qword_1008241E8, &qword_1008241F0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_10019A854(uint64_t a1, void (*a2)(void *))
{
  void *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v3 = (void *)EffortSampleCollection.effortSample.getter();
    if (v3)
    {
      v4 = v3;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v6 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v5 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v6 >= v5 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
      v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v4);
      specialized Array._endMutation()(v7);

    }
    v8 = (void *)EffortSampleCollection.estimatedEffortSample.getter();
    if (v8)
    {
      v9 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v11 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v10 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v11 >= v10 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12);

    }
  }
  a2(&_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
}

void sub_10019AA70(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10001E724(0, (unint64_t *)&qword_100823F18, HKQuantitySample_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_10019ABAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  type metadata accessor for EffortUtilities(0, a2);
  result = static EffortUtilities.didUpdateDemoOverrideEffortValues.getter();
  qword_100869F88 = result;
  return result;
}

id sub_10019AC58()
{
  return sub_100111F3C(type metadata accessor for EffortBridges);
}

uint64_t type metadata accessor for EffortBridges()
{
  return objc_opt_self(WOEffortBridges);
}

void sub_10019AE00(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;
  unint64_t v27;

  v2 = v1;
  v27 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v1;
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    type metadata accessor for EffortUtilities(0, v24);
    swift_bridgeObjectRelease(a1);
    v25 = static EffortUtilities.effortSampleCollection(for:)(v27);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)&v2[OBJC_IVAR___CHEffortSampleCollection_collection] = v25;

    v26.receiver = v2;
    v26.super_class = (Class)type metadata accessor for CHEffortSampleCollection();
    objc_msgSendSuper2(&v26, "init");
    return;
  }
  if (a1 < 0)
    v22 = a1;
  else
    v22 = a1 & 0xFFFFFFFFFFFFFF8;
  v23 = v2;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v4)
    goto LABEL_22;
LABEL_3:
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v8 = objc_opt_self(HKQuantitySample);
        v9 = swift_dynamicCastObjCClass(v7, v8);
        if (v9)
        {
          v10 = v9;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
          v12 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v11 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v12 >= v11 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
          specialized Array._endMutation()(v13);
        }
        else
        {
          swift_unknownObjectRelease(v7);
        }
      }
    }
    else
    {
      for (j = 0; j != v4; ++j)
      {
        v16 = *(void **)(a1 + 8 * j + 32);
        v17 = objc_opt_self(HKQuantitySample);
        v18 = swift_dynamicCastObjCClass(v16, v17);
        if (v18)
        {
          v19 = v18;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v21 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v20 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v21 >= v20 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
          specialized Array._endMutation()(v15);
        }
      }
    }
    goto LABEL_22;
  }
  __break(1u);
}

id sub_10019B120()
{
  return sub_100111F3C(type metadata accessor for CHEffortSampleCollection);
}

uint64_t type metadata accessor for CHEffortSampleCollection()
{
  return objc_opt_self(CHEffortSampleCollection);
}

uint64_t sub_10019B15C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10019B180(uint64_t a1)
{
  uint64_t v1;

  sub_10019AA70(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10019B188()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019B1AC(uint64_t a1)
{
  uint64_t v1;

  return sub_10019A854(a1, *(void (**)(void *))(v1 + 16));
}

void sub_10019B1B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void *v10;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;

  v10 = a2;
  type metadata accessor for EffortUtilities(0, a2);
  v12 = static EffortUtilities.save(quantity:workout:workoutActivity:healthStore:)(a1, a3, a4, a5);
  if ((a6 & 1) != 0)
  {
    if (v10 && (v13 = (void *)EffortSampleCollection.estimatedEffortSample.getter(v12), (v10 = v13) != 0))
      v14 = objc_msgSend(v13, "quantity");
    else
      v14 = 0;
    v15 = v14;
    static EffortUtilities.sendUpdatedEffortAnalyticsEvent(workout:workoutActivity:perceivedEffortQuantity:estimatedEffortQuantity:)(a3, a4, a1);

  }
}

uint64_t sub_10019B2A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10019B2C0()
{
  qword_100869F90 = (uint64_t)&off_10077F6F8;
}

id sub_10019B3DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FitnessAppActivityTypeMigrationKeys();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FitnessAppActivityTypeMigrationKeys()
{
  return objc_opt_self(CHFitnessAppActivityTypeMigrationKeys);
}

NSString sub_10019B430()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100869F98 = (uint64_t)result;
  return result;
}

double sub_10019B4A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  NSString v8;
  unsigned int v9;
  uint64_t v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  _OWORD v24[3];

  v1 = v0;
  v2 = *v0;
  v3 = (void *)objc_opt_self(NSUserDefaults);
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5 = objc_msgSend(v3, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v24, v7);
    swift_unknownObjectRelease(v7);
    sub_1000F996C((uint64_t)v24);

    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v4, "BOOLForKey:", v8);

    v11 = static os_log_type_t.default.getter(v10);
    v12 = (void *)HKLogActivity;
    v13 = v11;
    if (os_log_type_enabled(HKLogActivity, v11))
    {
      v14 = v12;
      v15 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 67109120;
      LODWORD(v24[0]) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, (char *)v24 + 4, v15 + 4);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Loaded cached subscription status: %{BOOL}d", v15, 8u);
      swift_slowDealloc(v15, -1, -1);

    }
    *((_BYTE *)v1 + 80) = v9;
  }
  else
  {
    memset(v24, 0, 32);
    sub_1000F996C((uint64_t)v24);

  }
  v16 = v1[3];
  ObjectType = swift_getObjectType(v1[2]);
  v18 = type metadata accessor for ServiceSubscriptionUpdated(0);
  v19 = v1[9];
  v20 = swift_allocObject(&unk_10078B4C0, 24, 7);
  swift_weakInit(v20 + 16, v1);
  swift_retain(v20);
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(v24, v18, v19, sub_10019C630, v20, v18, &protocol witness table for ServiceSubscriptionUpdated, ObjectType, v16);
  swift_release(v20);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v24);
  swift_release(v20);
  v21 = swift_allocObject(&unk_10078B4C0, 24, 7);
  swift_weakInit(v21 + 16, v1);
  v22 = swift_allocObject(&unk_10078B510, 32, 7);
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v2;
  swift_retain(v21);
  sub_10019BA78((uint64_t)sub_10019C644, v22);

  swift_release(v21);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

double sub_10019B788(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_10019B7DC();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

double sub_10019B7DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *v0;
  v2 = swift_allocObject(&unk_10078B4C0, 24, 7);
  swift_weakInit(v2 + 16, v0);
  v3 = swift_allocObject(&unk_10078B4E8, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain(v2);
  sub_10019BA78((uint64_t)sub_10019C628, v3);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void sub_10019B864(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t Strong;
  id v10;
  Class isa;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = a1;
  v3 = a2 + 16;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = (void *)HKLogActivity;
  v6 = v4;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    v7 = v5;
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v17 = v2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "Fetched subscription status: %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);

  }
  swift_beginAccess(v3, &v17, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    *(_BYTE *)(Strong + 80) = v2 & 1;
    swift_release(Strong);
  }
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setValue:forKey:", isa, v12);

  swift_beginAccess(v3, &v16, 0, 0);
  v13 = swift_weakLoadStrong(v3);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10081D658 != -1)
      swift_once(&qword_10081D658, sub_10019B430);
    objc_msgSend(v15, "postNotificationName:object:", qword_100869F98, v14);
    swift_release(v14);

  }
}

uint64_t sub_10019BA78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t);
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (**v46)(uint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;

  v58 = sub_100047110(&qword_100824368);
  v5 = *(_QWORD *)(v58 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v58);
  v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - v8;
  v10 = sub_100047110((uint64_t *)&unk_100836170);
  v60 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  v11 = *(_QWORD *)(v60 + 64);
  __chkstk_darwin(v10);
  v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v66 = (char *)&v55 - v13;
  __chkstk_darwin(v14);
  v62 = (char *)&v55 - v15;
  v16 = type metadata accessor for ServiceSubscriptionRequest(0);
  v64 = *(_QWORD *)(v16 - 8);
  v65 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v18;
  ServiceSubscriptionRequest.init(authenticationBehavior:cacheBehavior:)(0, 1);
  v56 = v2;
  v19 = v2[7];
  v20 = v2[8];
  sub_100016804(v2 + 4, v19);
  v55 = v9;
  dispatch thunk of ServiceSubscriptionClientProtocol.fetchServiceSubscription(with:)(v18, v19, v20);
  v21 = swift_allocObject(&unk_10078B3A8, 32, 7);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = a2;
  v23 = swift_allocObject(&unk_10078B3D0, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_10019C4DC;
  *(_QWORD *)(v23 + 24) = v21;
  v24 = v57;
  v25 = v9;
  v26 = v58;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v57, v25, v58);
  v27 = *(unsigned __int8 *)(v5 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = (v6 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_10078B3F8, v29 + 16, v27 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v30 + v28, v24, v26);
  v31 = (uint64_t (**)(uint64_t))(v30 + v29);
  *v31 = sub_10019C4F4;
  v31[1] = (uint64_t (*)(uint64_t))v23;
  v32 = v22;
  swift_retain(v22);
  v33 = v66;
  Promise.init(asyncOperation:)(sub_10019C508, v30, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v55, v26);
  v34 = (_QWORD *)swift_allocObject(&unk_10078B420, 40, 7);
  v34[2] = a1;
  v34[3] = v32;
  v35 = v56;
  v34[4] = v56;
  v36 = swift_allocObject(&unk_10078B448, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_10019C548;
  *(_QWORD *)(v36 + 24) = v34;
  v38 = v59;
  v37 = v60;
  v39 = v33;
  v40 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v59, v39, v61);
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = v37;
  v43 = (v41 + 16) & ~v41;
  v44 = (v11 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject(&unk_10078B470, v44 + 16, v41 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v45 + v43, v38, v40);
  v46 = (uint64_t (**)(uint64_t))(v45 + v44);
  *v46 = sub_10010FFFC;
  v46[1] = (uint64_t (*)(uint64_t))v36;
  swift_retain(v32);
  swift_retain(v35);
  v47 = v62;
  Promise.init(asyncOperation:)(sub_100110010, v45, (char *)&type metadata for () + 8);
  v48 = *(void (**)(char *, uint64_t))(v42 + 8);
  v48(v66, v40);
  v49 = (void (*)(uint64_t (*)(uint64_t), uint64_t))Promise.operation.getter(v40);
  v51 = v50;
  v52 = swift_allocObject(&unk_10078B498, 32, 7);
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  v49(sub_100110028, v52);
  swift_release(v51);
  v53 = swift_release(v52);
  ((void (*)(char *, uint64_t, __n128))v48)(v47, v40, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v63, v65);
}

uint64_t sub_10019BE78(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v5);
  v8 = ServiceSubscription.isSubscribed(date:)(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return a2(v8 & 1);
}

uint64_t sub_10019BF28(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  unint64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  BOOL v19;
  CHWorkoutDetailHeartRateTableViewCell *v20;
  char v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  NSObject *log;
  uint64_t v43;
  _QWORD v44[3];
  _BYTE v45[8];
  _QWORD v46[3];
  _BYTE v47[8];

  v6 = static os_log_type_t.default.getter(a1);
  v7 = (void *)HKLogActivity;
  v8 = v6;
  if (os_log_type_enabled(HKLogActivity, v6))
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    log = v7;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(a1);
    v11 = _swift_stdlib_bridgeErrorToNSError(a1);
    v43 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v9 + 4);
    *v10 = v11;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Fetching subscription status failed with error: %@", v9, 0xCu);
    v12 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  swift_getErrorValue(a1, v47, v46);
  v13 = Error.domain.getter(v46[1], v46[2]);
  v15 = v14;
  LOBYTE(v43) = 4;
  v16 = sub_10019C59C();
  v17 = Error.domain.getter(&type metadata for ServiceSubscriptionError, v16);
  v19 = v13 == v17 && v15 == v18;
  if (v19)
  {
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v18, 0);
    swift_bridgeObjectRelease(v15, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v20, v29, v30, v31, v32, v33, v34, v35);
    if ((v21 & 1) == 0)
      goto LABEL_12;
  }
  swift_getErrorValue(a1, v45, v44);
  v36 = Error.code.getter(v44[1], v44[2]);
  LOBYTE(v43) = 4;
  if (v36 == Error.code.getter(&type metadata for ServiceSubscriptionError, v16))
  {
    v37 = 0;
    return a2(v37);
  }
LABEL_12:
  v38 = *(unsigned __int8 *)(a4 + 80);
  v19 = v38 == 2;
  v39 = v38 & 1;
  if (v19)
    v37 = 0;
  else
    v37 = v39;
  return a2(v37);
}

uint64_t sub_10019C1B8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v0 + 4);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t type metadata accessor for FitnessPlusSubscriptionProvider()
{
  return objc_opt_self(_TtC10FitnessApp31FitnessPlusSubscriptionProvider);
}

uint64_t getEnumTagSinglePayload for FitnessPlusSubscriptionProvider.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10019C25C + 4 * asc_100629860[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for FitnessPlusSubscriptionProvider.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10019C314 + 4 * byte_10062986A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019C348 + 4 * byte_100629865[v5]))();
}

uint64_t sub_10019C348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019C350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019C358);
  return result;
}

uint64_t sub_10019C364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019C36CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10019C370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019C378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019C384(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_10019C3A0(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for FitnessPlusSubscriptionProvider.State()
{
  return &type metadata for FitnessPlusSubscriptionProvider.State;
}

uint64_t sub_10019C3C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[3];

  v2 = v1;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR___CHFitnessAppContext_dependencies);
  swift_retain(v3);
  v4 = sub_100047110((uint64_t *)&unk_1008361E0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v11, 0, 0, v4);
  swift_release(v3);
  *(_OWORD *)(v2 + 16) = v11[0];
  swift_retain(v3);
  v5 = sub_100047110(&qword_100828490);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v11, 0, 0, v5);
  swift_release(v3);
  sub_10002411C(v11, v2 + 32);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = type metadata accessor for SubscriptionToken(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = swift_unknownObjectRetain(v6);
  *(_QWORD *)(v2 + 72) = SubscriptionToken.init(eventHub:)(v9, v7);
  *(_BYTE *)(v2 + 80) = 2;
  return v2;
}

uint64_t sub_10019C4B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019C4DC(uint64_t a1)
{
  uint64_t v1;

  return sub_10019BE78(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_10019C4F4(uint64_t a1)
{
  uint64_t v1;

  return sub_10039AD84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10019C4FC()
{
  return sub_10004BE58(&qword_100824368);
}

uint64_t sub_10019C508(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, &qword_100824368, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B2D8);
}

uint64_t sub_10019C51C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019C548(uint64_t a1)
{
  uint64_t v1;

  return sub_10019BF28(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10019C564()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_10019C570()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10019C59C()
{
  unint64_t result;

  result = qword_100824370;
  if (!qword_100824370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceSubscriptionError, &type metadata for ServiceSubscriptionError);
    atomic_store(result, (unint64_t *)&qword_100824370);
  }
  return result;
}

uint64_t sub_10019C5E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019C604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10019C628(uint64_t a1)
{
  uint64_t v1;

  sub_10019B864(a1, *(_QWORD *)(v1 + 16));
}

double sub_10019C630()
{
  uint64_t v0;

  return sub_10019B788(v0);
}

uint64_t sub_10019C648@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100047110(&qword_1008243A0);
  return sub_10019C694(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_10019C694@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a2;
  v3 = type metadata accessor for ControlSize(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BorderedProminentButtonStyle(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_1008243A8);
  v50 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_1008243B0);
  v52 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100047110(&qword_1008243B8);
  __chkstk_darwin(v49);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100047110(&qword_1008243C0);
  __chkstk_darwin(v56);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_10078B538, 24, 7);
  *(_QWORD *)(v19 + 16) = a1;
  v20 = a1;
  v21 = sub_100047110(&qword_1008243C8);
  v22 = sub_10019D028();
  v23 = Button.init(action:label:)(sub_10019D008, v19, sub_10019CAB0, 0, v21, v22);
  BorderedProminentButtonStyle.init()(v23);
  v24 = sub_10019D0AC();
  v25 = sub_1000083D8((unint64_t *)&qword_10081F2E8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  View.buttonStyle<A>(_:)(v8, v9, v6, v24, v25);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v9);
  v27 = v54;
  v26 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v5, enum case for ControlSize.large(_:), v55);
  KeyPath = swift_getKeyPath(&unk_100629908);
  v29 = (uint64_t *)&v16[*(int *)(v49 + 36)];
  v30 = sub_100047110(&qword_10081F2F0);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v29 + *(int *)(v30 + 28), v5, v26);
  *v29 = KeyPath;
  v32 = v52;
  v31 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v16, v14, v53);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v31);
  v33 = sub_100032490();
  v34 = Color.init(uiColor:)(v33);
  v35 = swift_getKeyPath(&unk_100629938);
  v58 = v34;
  swift_retain(v34);
  v36 = AnyShapeStyle.init<A>(_:)(&v58, &type metadata for Color, &protocol witness table for Color);
  sub_100021CC0((uint64_t)v16, (uint64_t)v18, &qword_1008243B8);
  swift_release(v34);
  v37 = (uint64_t *)&v18[*(int *)(v56 + 36)];
  *v37 = v35;
  v37[1] = v36;
  v38 = sub_10001BE90((uint64_t)v16, &qword_1008243B8);
  LOBYTE(v34) = static Edge.Set.all.getter(v38);
  v39 = EdgeInsets.init(_all:)(0.0);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v46 = v57;
  sub_100021CC0((uint64_t)v18, v57, &qword_1008243C0);
  v47 = v46 + *(int *)(sub_100047110(&qword_1008243E0) + 36);
  *(_BYTE *)v47 = v34;
  *(double *)(v47 + 8) = v39;
  *(_QWORD *)(v47 + 16) = v41;
  *(_QWORD *)(v47 + 24) = v43;
  *(_QWORD *)(v47 + 32) = v45;
  *(_BYTE *)(v47 + 40) = 0;
  return sub_10001BE90((uint64_t)v18, &qword_1008243C0);
}

void sub_10019CAB0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  id v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CHWorkoutDetailHeartRateTableViewCell *v27;
  CHWorkoutDetailHeartRateTableViewCell *v28;
  char v29;
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  CHWorkoutDetailHeartRateTableViewCell *v53;
  CHWorkoutDetailHeartRateTableViewCell *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  CHWorkoutDetailHeartRateTableViewCell *v73;
  CHWorkoutDetailHeartRateTableViewCell *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  CHWorkoutDetailHeartRateTableViewCell *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[9];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v94 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v92 = *(_QWORD *)(v5 - 8);
  v93 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_1008243C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x800000010068D620);
  v12 = Text.init(_:tableName:bundle:comment:)(v11);
  v14 = v13;
  v16 = v15;
  v91 = v17;
  v18 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  if (v18)
  {
    v19 = v18;
    v86 = v7;
    v87 = v3;
    v88 = v2;
    v89 = v10;
    v90 = a1;
    v20 = objc_msgSend(v18, "nonGradientTextColor");

    if (v20)
    {
      v21 = v16 & 1;
      v22 = Color.init(uiColor:)(v20);
      *(_QWORD *)&v105 = v22;
      v23 = v91;
      v24 = Text.foregroundStyle<A>(_:)(&v105, v12, v14, v16 & 1, v91, &type metadata for Color, &protocol witness table for Color);
      v26 = v25;
      v28 = v27;
      v30 = v29 & 1;
      sub_1000E4458(v12, v14, v21);
      swift_release(v22);
      swift_bridgeObjectRelease(v23, v31, v32, v33, v34, v35, v36, v37);
      v39 = v92;
      v38 = v93;
      v40 = v86;
      v41 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v92 + 104))(v86, enum case for Font.TextStyle.body(_:), v93);
      static Font.Weight.semibold.getter(v41);
      v42 = static Font.system(_:weight:)(v40);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
      v44 = v87;
      v43 = v88;
      v45 = v94;
      (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v94, enum case for Font.Leading.tight(_:), v88);
      v46 = Font.leading(_:)(v45, v42);
      v47 = swift_release(v42);
      v48.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v44 + 8))(v45, v43, v47);
      v49 = Text.font(_:)(v46, v24, v26, v30, v28, v48);
      v51 = v50;
      LOBYTE(v44) = v52;
      v54 = v53;
      swift_release(v46);
      sub_1000E4458(v24, v26, v30);
      swift_bridgeObjectRelease(v28, v55, v56, v57, v58, v59, v60, v61);
      v63 = static Alignment.center.getter(v62);
      sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v105, 0.0, 1, 0.0, 1, v63, v64, v49, v51, v44 & 1, (uint64_t)v54);
      sub_1000E4458(v49, v51, v44 & 1);
      swift_bridgeObjectRelease(v54, v65, v66, v67, v68, v69, v70, v71);
      v104[6] = v111;
      v104[7] = v112;
      v104[8] = v113;
      v104[2] = v107;
      v104[3] = v108;
      v104[4] = v109;
      v104[5] = v110;
      v104[0] = v105;
      v104[1] = v106;
      v101 = v111;
      v102 = v112;
      v103 = v113;
      v97 = v107;
      v98 = v108;
      v99 = v109;
      v100 = v110;
      v95 = v105;
      v96 = v106;
      v72 = static FitnessAccessibilityIdentifier.SummaryView.seeAllCategoriesButton.getter();
      v74 = v73;
      v75 = sub_100047110(&qword_10081F2D0);
      v76 = sub_1000EA094();
      v77 = (uint64_t)v89;
      View.accessibilityIdentifier(_:)(v72, v74, v75, v76);
      swift_bridgeObjectRelease(v74, v78, v79, v80, v81, v82, v83, v84);
      sub_10014E2C0((uint64_t)v104);
      sub_10019D108(v77, v90);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10019CF90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDashboardEntryLinksButtonCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivityDashboardEntryLinksButtonCell()
{
  return objc_opt_self(_TtC10FitnessApp37ActivityDashboardEntryLinksButtonCell);
}

uint64_t sub_10019CFE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10019D008()
{
  sub_1003DF46C();
}

unint64_t sub_10019D028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008243D0;
  if (!qword_1008243D0)
  {
    v1 = sub_100007050(&qword_1008243C8);
    sub_1000EA094();
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008243D0);
  }
  return result;
}

unint64_t sub_10019D0AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008243D8;
  if (!qword_1008243D8)
  {
    v1 = sub_100007050(&qword_1008243A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1008243D8);
  }
  return result;
}

uint64_t sub_10019D108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008243C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_10019D1DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScoreSummaryWrapper(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10019D24C()
{
  return type metadata accessor for ScoreSummaryWrapper(0);
}

uint64_t type metadata accessor for ScoreSummaryWrapper(uint64_t a1)
{
  uint64_t result;

  result = qword_100824410;
  if (!qword_100824410)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScoreSummaryWrapper);
  return result;
}

uint64_t sub_10019D290(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for ScoreSummary(319, a2);
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for MirrorRaceMessageWithMetricsView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for MirrorRaceMessageWithMetricsView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  swift_retain(v3);
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for MirrorRaceMessageWithMetricsView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = v9;
  v11 = v9;

  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for Histogram1D(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for MirrorRaceMessageWithMetricsView(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  v6 = *(_QWORD *)(a2 + 40);
  v7 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorRaceMessageWithMetricsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorRaceMessageWithMetricsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorRaceMessageWithMetricsView()
{
  return &type metadata for MirrorRaceMessageWithMetricsView;
}

uint64_t sub_10019D558(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE004, 1);
}

uint64_t sub_10019D568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  _OWORD *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  id v65;
  char *v66;
  uint64_t (*v67)(char *);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t (*v119)(char *);
  unsigned int v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _OWORD v143[2];

  v136 = a2;
  v3 = sub_100047110(&qword_100824428);
  __chkstk_darwin(v3);
  v125 = (uint64_t *)((char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v128 = sub_100047110(&qword_100824430);
  __chkstk_darwin(v128);
  v126 = (uint64_t)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100824438);
  v132 = *(_QWORD *)(v6 - 8);
  v133 = v6;
  __chkstk_darwin(v6);
  v127 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100047110(&qword_100824440);
  __chkstk_darwin(v130);
  v129 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100047110(&qword_100824448);
  v9 = __chkstk_darwin(v135);
  v131 = (uint64_t)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v115 - v11;
  v12 = type metadata accessor for RacePosition(0);
  __chkstk_darwin(v12);
  v121 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for RaceElevationMetricView(0);
  v124 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v122 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_100824450);
  v139 = *(_QWORD *)(v15 - 8);
  v140 = v15;
  v16 = __chkstk_darwin(v15);
  v137 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v141 = (char *)&v115 - v18;
  v19 = type metadata accessor for WorkoutViewStyle(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v19;
  __chkstk_darwin(v19);
  v23 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_100824458);
  v117 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v26 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100047110(&qword_100824460);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100047110(&qword_100824468);
  v31 = __chkstk_darwin(v116);
  v33 = (char *)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v142 = (uint64_t)&v115 - v34;
  v115 = (_OWORD *)a1;
  static WorkoutNotificationFont.multilineTextView(with:lineLimit:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 2);
  v120 = enum case for WorkoutViewStyle.iOSNormalMetric(_:);
  v119 = *(uint64_t (**)(char *))(v20 + 104);
  v35 = v21;
  v36 = v119(v23);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of static WorkoutNotificationFont.multilineTextView(with:lineLimit:)>>, 1);
  View.workoutViewStyle(_:)(v23, v24, OpaqueTypeConformance2);
  v118 = *(void (**)(char *, uint64_t))(v20 + 8);
  v38 = v23;
  v39 = v23;
  v40 = v35;
  v118(v38, v35);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v26, v24);
  v41 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v138 = v33;
  v41(v33, v30, v27);
  *(_QWORD *)&v33[*(int *)(v116 + 36)] = 0x3FF0000000000000;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  sub_100045AD4((uint64_t)v33, v142, &qword_100824468);
  v42 = v115;
  v143[0] = *v115;
  v43 = *((_QWORD *)&v143[0] + 1);
  v44 = swift_retain(*((_QWORD *)&v143[0] + 1));
  v45 = MetricsPublisher.racePositionStatePublisher.getter(v44);
  v46 = sub_10004D634((uint64_t)v143);
  v47 = v121;
  RacePositionStatePublisher.racePosition.getter(v46);
  swift_release(v45);
  v48 = swift_retain(v43);
  v49 = MetricsPublisher.racePositionStatePublisher.getter(v48);
  v50 = sub_10004D634((uint64_t)v143);
  v51 = RacePositionStatePublisher.positionOnRoute.getter(v50);
  swift_release(v49);
  v52 = swift_retain(v43);
  v53 = MetricsPublisher.racePositionStatePublisher.getter(v52);
  v54 = sub_10004D634((uint64_t)v143);
  v55 = RacePositionStatePublisher.ghostPositionOnRoute.getter(v54);
  swift_release(v53);
  v56 = (void *)*((_QWORD *)v42 + 2);
  sub_10004D65C((uint64_t)v143);
  v57 = v56;
  v58 = MetricsPublisher.raceInformationPublisher.getter();
  v59 = sub_10004D634((uint64_t)v143);
  v60 = RaceInformationPublisher.routePoints.getter(v59);
  v61 = swift_release(v58);
  v62 = type metadata accessor for RaceElevationChartProperties(0, v61);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  v63 = RaceElevationChartProperties.init(activityType:chartPoints:)(v57, v60);
  v64 = v42;
  v65 = *((id *)v42 + 3);
  v66 = v122;
  RaceElevationMetricView.init(racePosition:positionOnRoute:ghostPositionOnRoute:chartProperties:formattingManager:)(v47, v63, v65, v51, v55);
  v67 = v119;
  ((void (*)(char *, _QWORD, uint64_t))v119)(v39, v120, v40);
  v68 = sub_1000083D8(&qword_100824470, (uint64_t (*)(uint64_t))&type metadata accessor for RaceElevationMetricView, (uint64_t)&protocol conformance descriptor for RaceElevationMetricView);
  v69 = v137;
  v70 = v123;
  View.workoutViewStyle(_:)(v39, v123, v68);
  v71 = v118;
  v118(v39, v40);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v66, v70);
  v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v139 + 32))(v141, v69, v140);
  v73 = static VerticalAlignment.center.getter(v72);
  v74 = (uint64_t)v125;
  *v125 = v73;
  *(_QWORD *)(v74 + 8) = 0x401C000000000000;
  *(_BYTE *)(v74 + 16) = 0;
  v75 = sub_100047110(&qword_100824478);
  v76 = v64;
  sub_10019DEC0(v64, (char *)(v74 + *(int *)(v75 + 44)));
  v77 = v126;
  sub_100021CC0(v74, v126, &qword_100824428);
  v78 = v128;
  *(_QWORD *)(v77 + *(int *)(v128 + 36)) = 0x3FF0000000000000;
  sub_10001BE90(v74, &qword_100824428);
  ((void (*)(char *, _QWORD, uint64_t))v67)(v39, enum case for WorkoutViewStyle.iOSSmallMetric(_:), v40);
  v79 = sub_10019E2A4();
  v80 = v127;
  View.workoutViewStyle(_:)(v39, v78, v79);
  v71(v39, v40);
  v81 = sub_10001BE90(v77, &qword_100824430);
  LOBYTE(v77) = static Edge.Set.top.getter(v81);
  v82 = EdgeInsets.init(_all:)(2.0);
  v84 = v83;
  v86 = v85;
  v88 = v87;
  v90 = v132;
  v89 = v133;
  v91 = (uint64_t)v129;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, v80, v133);
  v92 = v91 + *(int *)(v130 + 36);
  *(_BYTE *)v92 = v77;
  *(double *)(v92 + 8) = v82;
  *(_QWORD *)(v92 + 16) = v84;
  *(_QWORD *)(v92 + 24) = v86;
  *(_QWORD *)(v92 + 32) = v88;
  *(_BYTE *)(v92 + 40) = 0;
  v93 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v80, v89);
  LOBYTE(v77) = static Edge.Set.bottom.getter(v93);
  v94 = EdgeInsets.init(_all:)(*((double *)v76 + 6));
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v101 = v131;
  sub_100021CC0(v91, v131, &qword_100824440);
  v102 = v101 + *(int *)(v135 + 36);
  *(_BYTE *)v102 = v77;
  *(double *)(v102 + 8) = v94;
  *(_QWORD *)(v102 + 16) = v96;
  *(_QWORD *)(v102 + 24) = v98;
  *(_QWORD *)(v102 + 32) = v100;
  *(_BYTE *)(v102 + 40) = 0;
  sub_10001BE90(v91, &qword_100824440);
  v103 = v134;
  sub_100045AD4(v101, v134, &qword_100824448);
  v104 = (uint64_t)v138;
  sub_100021CC0(v142, (uint64_t)v138, &qword_100824468);
  v106 = v139;
  v105 = v140;
  v107 = *(void (**)(char *, char *, uint64_t))(v139 + 16);
  v108 = v137;
  v107(v137, v141, v140);
  sub_100021CC0(v103, v101, &qword_100824448);
  v109 = v136;
  sub_100021CC0(v104, v136, &qword_100824468);
  v110 = (int *)sub_100047110(&qword_1008244A0);
  v111 = v109 + v110[12];
  *(_QWORD *)v111 = 0x4000000000000000;
  *(_BYTE *)(v111 + 8) = 0;
  v107((char *)(v109 + v110[16]), v108, v105);
  v112 = v109 + v110[20];
  *(_QWORD *)v112 = 0x4000000000000000;
  *(_BYTE *)(v112 + 8) = 0;
  sub_100021CC0(v101, v109 + v110[24], &qword_100824448);
  sub_10001BE90(v103, &qword_100824448);
  v113 = *(void (**)(char *, uint64_t))(v106 + 8);
  v113(v141, v105);
  sub_10001BE90(v142, &qword_100824468);
  sub_10001BE90(v101, &qword_100824448);
  v113(v108, v105);
  return sub_10001BE90((uint64_t)v138, &qword_100824468);
}

uint64_t sub_10019DEC0@<X0>(__int128 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  double v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;

  v62 = a2;
  v64 = sub_100047110(&qword_10081EFB0);
  v61 = *(_QWORD *)(v64 - 8);
  v3 = __chkstk_darwin(v64);
  v63 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v60 = (char *)&v55 - v5;
  v6 = type metadata accessor for RacePosition(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v55 - v11;
  v13 = type metadata accessor for RaceRemainingDistanceMetricView(0);
  v14 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  v58 = v14;
  v15 = __chkstk_darwin(v13);
  v59 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v55 - v20;
  v65 = *a1;
  v22 = *((_QWORD *)&v65 + 1);
  v23 = swift_retain(*((_QWORD *)&v65 + 1));
  v24 = MetricsPublisher.racePositionStatePublisher.getter(v23);
  v25 = sub_10004D634((uint64_t)&v65);
  RacePositionStatePublisher.racePosition.getter(v25);
  v26 = swift_release(v24);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v7 + 104))(v10, enum case for RacePosition.notYetOnRoute(_:), v6, v26);
  v27 = sub_1000083D8(&qword_1008244A8, (uint64_t (*)(uint64_t))&type metadata accessor for RacePosition, (uint64_t)&protocol conformance descriptor for RacePosition);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v27);
  v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  v30 = 0.0;
  if ((v28 & 1) == 0)
  {
    v31 = swift_retain(v22);
    v32 = MetricsPublisher.racePositionStatePublisher.getter(v31);
    v33 = sub_10004D634((uint64_t)&v65);
    v34 = RacePositionStatePublisher.remainingRouteDistance.getter(v33);
    swift_release(v32);
    v30 = v34;
  }
  v35 = *((_QWORD *)a1 + 2);
  v36 = *((id *)a1 + 3);
  v37 = FIUIDistanceTypeForActivityType(v35);
  RaceRemainingDistanceMetricView.init(remainingDistance:formattingManager:distanceType:)(*(_QWORD *)&v30, v28 & 1, v36, v37);
  v38 = v58;
  v39 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v40 = v21;
  v41 = v21;
  v56 = v21;
  v42 = v57;
  v39(v41, v19, v57);
  swift_retain(v22);
  v43 = v60;
  static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)(4, v36, v35, v22);
  sub_10004D634((uint64_t)&v65);
  v44 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v45 = v59;
  v44(v59, v40, v42);
  v46 = v61;
  v47 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v49 = v63;
  v48 = v64;
  v47(v63, v43, v64);
  v50 = v62;
  v44(v62, v45, v42);
  v51 = sub_100047110(&qword_1008244B0);
  v47(&v50[*(int *)(v51 + 48)], v49, v48);
  v52 = *(void (**)(char *, uint64_t))(v46 + 8);
  v52(v43, v48);
  v53 = *(void (**)(char *, uint64_t))(v38 + 8);
  v53(v56, v42);
  v52(v49, v48);
  return ((uint64_t (*)(char *, uint64_t))v53)(v45, v42);
}

uint64_t sub_10019E240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[3];
  uint64_t v8;

  v4 = *(_OWORD *)(v2 + 16);
  v7[0] = *(_OWORD *)v2;
  v7[1] = v4;
  v7[2] = *(_OWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = sub_100047110(&qword_100824420);
  return sub_10019D568((uint64_t)v7, a2 + *(int *)(v5 + 44));
}

unint64_t sub_10019E2A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824480;
  if (!qword_100824480)
  {
    v1 = sub_100007050(&qword_100824430);
    sub_100028384(&qword_100824488, &qword_100824428, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100028384(&qword_100824490, &qword_100824498, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100824480);
  }
  return result;
}

uint64_t sub_10019E340()
{
  return sub_100028384(&qword_1008244B8, &qword_1008244C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10019E36C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;

  *(_QWORD *)a6 = static HorizontalAlignment.center.getter(a1, a2, a3, a4, a5);
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = 0;
  v8 = sub_100047110(&qword_1008244F0);
  return sub_10019E3B4(a1, a6 + *(int *)(v8 + 44));
}

uint64_t sub_10019E3B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[3];

  v88 = a1;
  v103 = a2;
  v2 = type metadata accessor for ControlSize(0);
  v98 = *(_QWORD *)(v2 - 8);
  v99 = v2;
  __chkstk_darwin(v2);
  v96 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for BorderedProminentButtonStyle(0);
  v93 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v86 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100047110(&qword_1008244F8);
  v91 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100824500);
  v94 = *(_QWORD *)(v7 - 8);
  v95 = v7;
  __chkstk_darwin(v7);
  v85 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100047110(&qword_100824508);
  __chkstk_darwin(v90);
  v87 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100047110(&qword_100824510);
  __chkstk_darwin(v100);
  v97 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100047110(&qword_100824518);
  __chkstk_darwin(v102);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v101 = (uint64_t)&v84 - v14;
  v15 = type metadata accessor for Divider(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100047110(&qword_100824520);
  __chkstk_darwin(v19);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100047110(&qword_100824528);
  __chkstk_darwin(v22);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v84 - v26;
  v29 = Divider.init()(v28);
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(v105, 0, 1, 0x3FE0000000000000, 0, v30, v31);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v18, v15);
  v32 = &v21[*(int *)(v19 + 36)];
  v33 = v105[1];
  *(_OWORD *)v32 = v105[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v105[2];
  v34 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  LOBYTE(v15) = static Edge.Set.bottom.getter(v34);
  v35 = EdgeInsets.init(_all:)(20.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_100021CC0((uint64_t)v21, (uint64_t)v24, &qword_100824520);
  v42 = &v24[*(int *)(v22 + 36)];
  *v42 = v15;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_10001BE90((uint64_t)v21, &qword_100824520);
  v43 = (uint64_t)v27;
  sub_100045AD4((uint64_t)v24, (uint64_t)v27, &qword_100824528);
  v44 = swift_allocObject(&unk_10078B638, 24, 7);
  v45 = v88;
  *(_QWORD *)(v44 + 16) = v88;
  v46 = v45;
  v47 = sub_100047110(&qword_100824530);
  v48 = sub_10019F1BC();
  v49 = Button.init(action:label:)(sub_10019F19C, v44, sub_10019EAF4, 0, v47, v48);
  v50 = v86;
  BorderedProminentButtonStyle.init()(v49);
  v51 = sub_10019F268();
  v52 = sub_1000083D8((unint64_t *)&qword_10081F2E8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v53 = v85;
  v54 = v89;
  v55 = v92;
  View.buttonStyle<A>(_:)(v50, v89, v92, v51, v52);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v50, v55);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v6, v54);
  v57 = v98;
  v56 = v99;
  v58 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v96, enum case for ControlSize.large(_:), v99);
  KeyPath = swift_getKeyPath(&unk_100629A60);
  v60 = (uint64_t)v87;
  v61 = (uint64_t *)&v87[*(int *)(v90 + 36)];
  v62 = sub_100047110(&qword_10081F2F0);
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))((char *)v61 + *(int *)(v62 + 28), v58, v56);
  *v61 = KeyPath;
  v64 = v94;
  v63 = v95;
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v60, v53, v95);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v53, v63);
  v65 = sub_100032490();
  v66 = Color.init(uiColor:)(v65);
  v67 = swift_getKeyPath(&unk_100629A90);
  v104 = v66;
  swift_retain(v66);
  v68 = AnyShapeStyle.init<A>(_:)(&v104, &type metadata for Color, &protocol witness table for Color);
  v69 = v97;
  sub_100021CC0(v60, v97, &qword_100824508);
  swift_release(v66);
  v70 = (uint64_t *)(v69 + *(int *)(v100 + 36));
  *v70 = v67;
  v70[1] = v68;
  v71 = sub_10001BE90(v60, &qword_100824508);
  LOBYTE(v66) = static Edge.Set.all.getter(v71);
  v72 = EdgeInsets.init(_all:)(0.0);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  sub_100021CC0(v69, (uint64_t)v12, &qword_100824510);
  v79 = &v12[*(int *)(v102 + 36)];
  *v79 = v66;
  *((double *)v79 + 1) = v72;
  *((_QWORD *)v79 + 2) = v74;
  *((_QWORD *)v79 + 3) = v76;
  *((_QWORD *)v79 + 4) = v78;
  v79[40] = 0;
  sub_10001BE90(v69, &qword_100824510);
  v80 = v101;
  sub_100045AD4((uint64_t)v12, v101, &qword_100824518);
  sub_100021CC0(v43, (uint64_t)v24, &qword_100824528);
  sub_100021CC0(v80, (uint64_t)v12, &qword_100824518);
  v81 = v103;
  sub_100021CC0((uint64_t)v24, v103, &qword_100824528);
  v82 = sub_100047110(&qword_100824548);
  sub_100021CC0((uint64_t)v12, v81 + *(int *)(v82 + 48), &qword_100824518);
  sub_10001BE90(v80, &qword_100824518);
  sub_10001BE90(v43, &qword_100824528);
  sub_10001BE90((uint64_t)v12, &qword_100824518);
  return sub_10001BE90((uint64_t)v24, &qword_100824528);
}

void sub_10019EAF4(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  CHWorkoutDetailHeartRateTableViewCell *v20;
  id v21;
  void *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CHWorkoutDetailHeartRateTableViewCell *v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  char v31;
  uint64_t v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  CHWorkoutDetailHeartRateTableViewCell *v55;
  CHWorkoutDetailHeartRateTableViewCell *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  CHWorkoutDetailHeartRateTableViewCell *v80;
  CHWorkoutDetailHeartRateTableViewCell *v81;
  uint64_t OpaqueTypeConformance2;
  uint64_t v83;
  uint64_t v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD v115[9];
  _OWORD v116[9];

  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v104 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v103 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.Leading(0);
  v100 = *(_QWORD *)(v4 - 8);
  v101 = v4;
  __chkstk_darwin(v4);
  v99 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0);
  v97 = *(_QWORD *)(v6 - 8);
  v98 = v6;
  __chkstk_darwin(v6);
  v96 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100824550);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v105 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100824530);
  __chkstk_darwin(v11);
  v102 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = LocalizedStringKey.init(stringLiteral:)(0x4D55535F54494445, 0xEC0000005952414DLL);
  v14 = Text.init(_:tableName:bundle:comment:)(v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  if (v21)
  {
    v22 = v21;
    v92 = v2;
    v93 = v9;
    v94 = v8;
    v95 = a1;
    v23 = objc_msgSend(v21, "nonGradientTextColor");

    if (v23)
    {
      v24 = v18 & 1;
      v25 = Color.init(uiColor:)(v23);
      *(_QWORD *)&v116[0] = v25;
      v26 = Text.foregroundStyle<A>(_:)(v116, v14, v16, v18 & 1, v20, &type metadata for Color, &protocol witness table for Color);
      v28 = v27;
      v30 = v29;
      v32 = v31 & 1;
      sub_1000E4458(v14, v16, v24);
      swift_release(v25);
      swift_bridgeObjectRelease(v20, v33, v34, v35, v36, v37, v38, v39);
      v41 = v96;
      v40 = v97;
      v42 = v98;
      v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v97 + 104))(v96, enum case for Font.TextStyle.body(_:), v98);
      static Font.Weight.semibold.getter(v43);
      v44 = static Font.system(_:weight:)(v41);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
      v46 = v99;
      v45 = v100;
      v47 = v101;
      (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v99, enum case for Font.Leading.tight(_:), v101);
      v48 = Font.leading(_:)(v46, v44);
      v49 = swift_release(v44);
      v50.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v45 + 8))(v46, v47, v49);
      v51 = Text.font(_:)(v48, v26, v28, v32, v30, v50);
      v53 = v52;
      LOBYTE(v45) = v54;
      v56 = v55;
      swift_release(v48);
      sub_1000E4458(v26, v28, v32);
      swift_bridgeObjectRelease(v30, v57, v58, v59, v60, v61, v62, v63);
      v65 = static Alignment.center.getter(v64);
      sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v116, 0.0, 1, 0.0, 1, v65, v66, v51, v53, v45 & 1, (uint64_t)v56);
      sub_1000E4458(v51, v53, v45 & 1);
      swift_bridgeObjectRelease(v56, v67, v68, v69, v70, v71, v72, v73);
      v112 = v116[6];
      v113 = v116[7];
      v114 = v116[8];
      v108 = v116[2];
      v109 = v116[3];
      v110 = v116[4];
      v111 = v116[5];
      v106 = v116[0];
      v107 = v116[1];
      v74 = v103;
      static AccessibilityChildBehavior.contain.getter();
      v75 = sub_100047110(&qword_10081F2D0);
      v76 = sub_1000EA094();
      v77 = v105;
      View.accessibilityElement(children:)(v74, v75, v76);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v74, v92);
      v115[6] = v112;
      v115[7] = v113;
      v115[8] = v114;
      v115[2] = v108;
      v115[3] = v109;
      v115[4] = v110;
      v115[5] = v111;
      v115[0] = v106;
      v115[1] = v107;
      v78 = sub_10014E2C0((uint64_t)v115);
      v79 = static FitnessAccessibilityIdentifier.SummaryView.editSummaryButton.getter(v78);
      v81 = v80;
      *(_QWORD *)&v106 = v75;
      *((_QWORD *)&v106 + 1) = v76;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v83 = (uint64_t)v102;
      v84 = v94;
      View.accessibilityIdentifier(_:)(v79, v81, v94, OpaqueTypeConformance2);
      swift_bridgeObjectRelease(v81, v85, v86, v87, v88, v89, v90, v91);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v77, v84);
      sub_100045AD4(v83, v95, &qword_100824530);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10019F124()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDashboardEditButtonCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivityDashboardEditButtonCell()
{
  return objc_opt_self(_TtC10FitnessApp31ActivityDashboardEditButtonCell);
}

uint64_t sub_10019F178()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10019F19C()
{
  sub_1003DF038();
}

unint64_t sub_10019F1BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100824538;
  if (!qword_100824538)
  {
    v1 = sub_100007050(&qword_100824530);
    v2[0] = sub_100007050(&qword_10081F2D0);
    v2[1] = sub_1000EA094();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100824538);
  }
  return result;
}

unint64_t sub_10019F268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824540;
  if (!qword_100824540)
  {
    v1 = sub_100007050(&qword_1008244F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100824540);
  }
  return result;
}

uint64_t *sub_10019F2C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_10019F350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10019F3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10019F418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_10019F47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019F488);
}

uint64_t sub_10019F488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10019F504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019F510);
}

uint64_t sub_10019F510(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

Swift::Int sub_10019F588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  _QWORD *v15;
  double v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  Swift::Int result;
  uint64_t v29;
  _OWORD v30[4];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v1 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = type metadata accessor for ActivitySharingFriendListItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (id *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = Hasher.init()(v30);
  v16 = Date.timeIntervalSince1970.getter(v15);
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v17 = *(_QWORD *)&v16;
  else
    v17 = 0;
  Hasher._combine(_:)(v17);
  v18 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ActivitySharingFriendListDateItemGroup(0) + 20));
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
LABEL_15:
    v34 = v30[2];
    v35 = v30[3];
    v36 = v31;
    v32 = v30[0];
    v33 = v30[1];
    return Hasher.finalize()();
  }
  v20 = v18 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v21 = *(_QWORD *)(v12 + 72);
  v29 = v18;
  swift_bridgeObjectRetain(v18);
  while (1)
  {
    sub_1001139F4(v20, (uint64_t)v14);
    v24 = *v14;
    if (objc_msgSend(*v14, "isMe"))
    {
      if (qword_10081D7D0 != -1)
        swift_once(&qword_10081D7D0, sub_10020AB28);
      v22 = sub_10003CE9C(v4, (uint64_t)qword_100827E98);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v22, v4);
      goto LABEL_9;
    }
    v25 = objc_msgSend(v24, "UUID");
    if (!v25)
      break;
    v26 = v25;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v27(v3, v8, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
    if ((_DWORD)result == 1)
      goto LABEL_17;
    v27(v10, v3, v4);
LABEL_9:
    v23 = sub_1000DC0E8();
    dispatch thunk of Hashable.hash(into:)(v30, v4, v23);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    sub_10019F888((uint64_t)v14);
    v20 += v21;
    if (!--v19)
    {
      swift_bridgeObjectRelease(v29);
      goto LABEL_15;
    }
  }
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_17:
  __break(1u);
  return result;
}

Swift::Int sub_10019F864@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result;

  result = sub_10019F588();
  *a1 = result;
  return result;
}

uint64_t sub_10019F888(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivitySharingFriendListItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10019F8C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100047110((uint64_t *)&unk_100828370);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = a3[6];
    v14 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v14;
    v15 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v15;
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    swift_retain(v14);
    v19 = swift_bridgeObjectRetain(v15);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v9)(v18, 1, v7, v19))
    {
      v20 = sub_100047110((uint64_t *)&unk_100828370);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v21 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_10019FA70(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v7 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

char *sub_10019FB2C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = a3[6];
  v12 = *(_QWORD *)&a2[v10];
  *(_QWORD *)&a1[v10] = v12;
  v13 = *(_QWORD *)&a2[v11];
  *(_QWORD *)&a1[v11] = v13;
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  swift_retain(v12);
  v17 = swift_bridgeObjectRetain(v13);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v8)(v16, 1, v6, v17))
  {
    v18 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v19 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_10019FCAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a2[v12];
  v14 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a3[6];
  v16 = *(_QWORD *)&a2[v15];
  v17 = *(_QWORD *)&a1[v15];
  *(_QWORD *)&a1[v15] = v16;
  swift_bridgeObjectRetain(v16);
  v18 = swift_bridgeObjectRelease(v17);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v8)(&a1[v19], 1, v6, v18);
  v23 = v8(v21, 1, v6);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v20, v21, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v20, v21, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
LABEL_13:
  a1[a3[8]] = a2[a3[8]];
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)v26 = v28;
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_10019FED0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (v8(&a2[v11], 1, v6))
  {
    v14 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_1001A003C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release(v13);
  v14 = a3[6];
  v15 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v16 = swift_bridgeObjectRelease(v15);
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v8)(&a1[v17], 1, v6, v16);
  v21 = v8(v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v18, v19, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v22 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v19, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
LABEL_13:
  v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t sub_1001A024C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A0258);
}

uint64_t sub_1001A0258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110((uint64_t *)&unk_100828370);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001A02D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A02E4);
}

uint64_t sub_1001A02E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110((uint64_t *)&unk_100828370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MirrorIntervalTimeView(uint64_t a1)
{
  uint64_t result;

  result = qword_100824640;
  if (!qword_100824640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MirrorIntervalTimeView);
  return result;
}

void sub_1001A039C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  sub_10019120C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = v4[0];
    v4[4] = &unk_100629B58;
    v4[5] = &unk_100629B70;
    v4[6] = &unk_100629B58;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_1001A0438(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE0B8, 1);
}

uint64_t sub_1001A0448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v3 = v2;
  v6 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v29 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v29 - v17;
  sub_100021CC0(v3, (uint64_t)v8, (uint64_t *)&unk_100828370);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v16, v9);
    sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828370);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  }
  v19 = type metadata accessor for MirrorIntervalTimeView(0);
  v20 = Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)(a1, *(_QWORD *)(v3 + *(int *)(v19 + 24)), v3 + *(int *)(v19 + 28));
  v21 = (void *)WorkoutStep.goal.getter(v20);
  v22 = objc_msgSend(v21, "value");

  if (v22)
  {
    v24 = objc_msgSend((id)objc_opt_self(HKUnit), "secondUnit");
    objc_msgSend(v22, "doubleValueForUnit:", v24);
    v26 = v25;

  }
  else
  {
    v26 = 0.0;
  }
  Date.addingTimeInterval(_:)(v23, v26);
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v13, v9);
  v27(v18, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
}

double sub_1001A06B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  double v20;
  uint64_t v22;

  v3 = sub_100047110((uint64_t *)&unk_100828370);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v22 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v22 - v17;
  v19 = (int *)type metadata accessor for MirrorIntervalTimeView(0);
  if ((*(_BYTE *)(v1 + v19[10]) & 1) == 0)
  {
    sub_1001A0448(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
      v20 = Date.timeIntervalSince(_:)(a1);
      v16 = v18;
      goto LABEL_9;
    }
    sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828370);
  }
  sub_100021CC0(v1, (uint64_t)v6, (uint64_t *)&unk_100828370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_10001BE90((uint64_t)v6, (uint64_t *)&unk_100828370);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)(a1, *(_QWORD *)(v1 + v19[6]), v1 + v19[7]);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v20 = Date.timeIntervalSince(_:)(v16);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  return v20;
}

uint64_t sub_1001A08FC(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  unsigned int *v12;
  int v13;
  double v14;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  double v18;

  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v17 - v9;
  v11 = Double.smoothedForDisplay.getter(v8, a1);
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for MirrorIntervalTimeView(0) + 40)))
    v12 = (unsigned int *)&enum case for FloatingPointRoundingRule.down(_:);
  else
    v12 = (unsigned int *)&enum case for FloatingPointRoundingRule.up(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v10, *v12, v3);
  v18 = v11;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v13 == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v14 = round(v11);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    goto LABEL_15;
  }
  if (v13 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v14 = rint(v11);
    goto LABEL_14;
  }
  if (v13 == enum case for FloatingPointRoundingRule.up(_:))
  {
    v14 = ceil(v11);
    goto LABEL_14;
  }
  if (v13 == enum case for FloatingPointRoundingRule.down(_:))
  {
    v14 = floor(v11);
    goto LABEL_14;
  }
  if (v13 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    v14 = trunc(v11);
    goto LABEL_14;
  }
  if (v13 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    if ((*(_QWORD *)&v11 & 0x8000000000000000) != 0)
      v14 = floor(v11);
    else
      v14 = ceil(v11);
  }
  else
  {
    Double._roundSlowPath(_:)(v10);
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v10, v3);
    v16(v7, v3);
    v14 = v18;
  }
LABEL_15:
  type metadata accessor for ElapsedTimeFormatter(0);
  return static ElapsedTimeFormatter.stringFromElapsedTime(_:trimDoubleLeadingZero:compactHours:)(1, 1, v14);
}

uint64_t sub_1001A0B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v3 = sub_100047110((uint64_t *)&unk_100828370);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v24 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v24 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v24 - v17;
  sub_1001A0448(a1, (uint64_t)v8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v19(v8, 1, v9) == 1)
    return sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828370);
  v25 = a1;
  v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v21(v18, v8, v9);
  sub_100021CC0(v1, (uint64_t)v6, (uint64_t *)&unk_100828370);
  if (v19(v6, 1, v9) == 1)
  {
    sub_10001BE90((uint64_t)v6, (uint64_t *)&unk_100828370);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v25, v9);
  }
  else
  {
    v21(v13, v6, v9);
    v22 = type metadata accessor for MirrorIntervalTimeView(0);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)(v25, *(_QWORD *)(v1 + *(int *)(v22 + 24)), v1 + *(int *)(v22 + 28));
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  Date.timeIntervalSince(_:)(v16);
  Date.timeIntervalSince(_:)(v16);
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v16, v9);
  return ((uint64_t (*)(char *, uint64_t))v23)(v18, v9);
}

uint64_t sub_1001A0D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];

  v2 = v1;
  v62 = a1;
  v63 = type metadata accessor for MirrorIntervalTimeView(0);
  v54 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v55 = v3;
  v57 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for PeriodicTimelineSchedule(0);
  v53 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v52 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100824690);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v6 = __chkstk_darwin(v5);
  v56 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v58 = (char *)&v50 - v8;
  v9 = sub_100047110((uint64_t *)&unk_100828370);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v50 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v50 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v50 - v27;
  Date.init()(v26);
  v29 = v2;
  sub_100021CC0(v2, (uint64_t)v14, (uint64_t *)&unk_100828370);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v30(v14, 1, v15) == 1)
  {
    sub_10001BE90((uint64_t)v14, (uint64_t *)&unk_100828370);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v28, v25, v15);
    v31 = *(void (**)(char *, uint64_t))(v16 + 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v14, v15);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)(v25, *(_QWORD *)(v29 + *(int *)(v63 + 24)), v29 + *(int *)(v63 + 28));
    v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    v31(v22, v15);
  }
  v50 = (uint64_t (*)(char *, uint64_t))v31;
  v31(v25, v15);
  v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v51 = v28;
  v32(v19, v28, v15);
  v33 = v52;
  PeriodicTimelineSchedule.init(from:by:)(v19, 1.0);
  sub_100021CC0(v29 + *(int *)(v63 + 28), (uint64_t)v12, (uint64_t *)&unk_100828370);
  v34 = v30(v12, 1, v15) != 1;
  sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_100828370);
  v35 = sub_1000083D8((unint64_t *)&qword_100824698, (uint64_t (*)(uint64_t))&type metadata accessor for PeriodicTimelineSchedule, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule);
  v37 = v58;
  v36 = v59;
  TimelineSchedule.paused(_:)(v34, v59, v35);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v36);
  v38 = v57;
  sub_1001094E0(v29, v57);
  v39 = *(unsigned __int8 *)(v54 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = swift_allocObject(&unk_10078B690, v40 + v55, v39 | 7);
  sub_10010949C(v38, v41 + v40);
  v43 = v60;
  v42 = v61;
  v44 = v56;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v56, v37, v61);
  v45 = swift_allocObject(&unk_10078B6B8, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_1001A1A74;
  *(_QWORD *)(v45 + 24) = v41;
  v46 = sub_100047110(&qword_1008246A0);
  v64[0] = v36;
  v64[1] = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v64, &opaque type descriptor for <<opaque return type of TimelineSchedule.paused(_:)>>, 1);
  v48 = sub_100028384(&qword_1008246A8, &qword_1008246A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  TimelineView<>.init(_:content:)(v44, sub_1001A1AE4, v45, v42, v46, OpaqueTypeConformance2, v48);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v42);
  return v50(v51, v15);
}

uint64_t sub_1001A11F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *a3 = static Alignment.center.getter(a1);
  a3[1] = v5;
  v6 = sub_100047110(&qword_1008246C0);
  return sub_1001A1248(a2, (uint64_t)a3 + *(int *)(v6 + 44));
}

uint64_t sub_1001A1248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSString v51;
  float v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[3];

  v86 = a2;
  v82 = sub_100047110(&qword_1008246C8);
  __chkstk_darwin(v82);
  v85 = (uint64_t)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100047110(&qword_1008246D0);
  __chkstk_darwin(v84);
  v80 = (uint64_t *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = type metadata accessor for MetricText(0);
  v81 = *(_QWORD *)(v83 - 8);
  v5 = __chkstk_darwin(v83);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v74 - v9;
  __chkstk_darwin(v8);
  v77 = (char *)&v74 - v11;
  v76 = sub_100047110(&qword_1008246D8);
  v12 = __chkstk_darwin(v76);
  v78 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v75 = (char *)&v74 - v15;
  __chkstk_darwin(v14);
  v79 = (uint64_t)&v74 - v16;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110(&qword_1008246B0);
  ((void (*)(void))TimelineView.Context.date.getter)();
  v22 = sub_1001A06B8((uint64_t)v20);
  v23 = *(void (**)(char *, uint64_t))(v18 + 8);
  v23(v20, v17);
  v24 = type metadata accessor for MirrorIntervalTimeView(0);
  if (*(_BYTE *)(a1 + *(int *)(v24 + 32)) == 1 && (v25 = (uint64_t *)(a1 + *(int *)(v24 + 36)), (v25[1] & 1) == 0))
  {
    v41 = *v25;
    if (qword_10081E0A8 != -1)
      swift_once(&qword_10081E0A8, sub_1005CFD2C);
    v42 = *(double *)&qword_10086B028;
    TimelineView.Context.date.getter(v21);
    sub_1001A0B0C((uint64_t)v20);
    v44 = v43;
    v23(v20, v17);
    v45 = 0.0;
    if (v44 >= 0.0)
      v45 = v44;
    if (v45 <= 1.0)
      v46 = v45;
    else
      v46 = 1.0;
    v47 = sub_1001A08FC(v22);
    v49 = v48;
    v50 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v51 = String._bridgeToObjectiveC()();
    v53 = objc_msgSend(v50, "localizedStringForKey:value:table:", v51, 0, 0);

    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    v57 = v77;
    v58 = MetricText.init(value:unit:description:stale:includesSlashes:)(v47, v49, 0, 0, v54, v56, 0, 0);
    if (qword_10081D528 != -1)
      v58 = swift_once(&qword_10081D528, sub_10010A2B0);
    v59 = qword_100869CC8;
    v60 = static Alignment.center.getter(v58);
    _FrameLayout.init(width:height:alignment:)(v87, v59, 0, v59, 0, v60, v61);
    v62 = v81;
    v63 = (uint64_t)v75;
    v64 = v83;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v75, v57, v83);
    v65 = (_OWORD *)(v63 + *(int *)(v76 + 36));
    v66 = v87[1];
    *v65 = v87[0];
    v65[1] = v66;
    v65[2] = v87[2];
    (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v64);
    v67 = v79;
    sub_1001A1B04(v63, v79);
    v68 = v78;
    sub_100021CC0(v67, v78, &qword_1008246D8);
    v69 = (uint64_t)v80;
    *v80 = 2;
    *(_QWORD *)(v69 + 8) = v41;
    v52 = v42;
    *(float *)(v69 + 16) = v52;
    *(double *)(v69 + 24) = v46;
    v70 = sub_100047110(&qword_1008246E8);
    sub_100021CC0(v68, v69 + *(int *)(v70 + 48), &qword_1008246D8);
    sub_10001BE90(v68, &qword_1008246D8);
    v71 = v85;
    sub_100021CC0(v69, v85, &qword_1008246D0);
    swift_storeEnumTagMultiPayload(v71, v82, 0);
    v72 = sub_100028384(&qword_1008246E0, &qword_1008246D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v73 = sub_1000083D8((unint64_t *)&qword_10081F428, (uint64_t (*)(uint64_t))&type metadata accessor for MetricText, (uint64_t)&protocol conformance descriptor for MetricText);
    _ConditionalContent<>.init(storage:)(v71, v84, v64, v72, v73);
    sub_10001BE90(v69, &qword_1008246D0);
    return sub_10001BE90(v67, &qword_1008246D8);
  }
  else
  {
    v26 = sub_1001A08FC(v22);
    v28 = v27;
    v29 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "localizedStringForKey:value:table:", v30, 0, 0);

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    MetricText.init(value:unit:description:stale:includesSlashes:)(v26, v28, 0, 0, v32, v34, 0, 0);
    v35 = v81;
    v36 = v83;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v10, v7, v83);
    v37 = v85;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v85, v10, v36);
    swift_storeEnumTagMultiPayload(v37, v82, 1);
    v38 = sub_100028384(&qword_1008246E0, &qword_1008246D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v39 = sub_1000083D8((unint64_t *)&qword_10081F428, (uint64_t (*)(uint64_t))&type metadata accessor for MetricText, (uint64_t)&protocol conformance descriptor for MetricText);
    _ConditionalContent<>.init(storage:)(v37, v84, v36, v38, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  }
}

uint64_t sub_1001A1990()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  __n128 v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for MirrorIntervalTimeView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v0 + v4, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  swift_release(*(_QWORD *)(v6 + v1[5]));
  v10 = swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  v11 = v6 + v1[7];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v9)(v11, 1, v7, v10))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001A1A74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MirrorIntervalTimeView(0) - 8) + 80);
  return sub_1001A11F4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1001A1AC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A1AE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001A1B58(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1008246B8);
}

uint64_t sub_1001A1B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008246D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A1B4C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  return sub_1001A1B58(a1, a2, a3, &qword_1008246F0);
}

uint64_t sub_1001A1B58(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = sub_100047110(&qword_1008246B0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  result = sub_100047110(a4);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    a2((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001A1C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008246F8;
  if (!qword_1008246F8)
  {
    v1 = sub_100007050(&qword_100824700);
    sub_100028384(&qword_1008246A8, &qword_1008246A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008246F8);
  }
  return result;
}

unint64_t sub_1001A1CB4()
{
  unint64_t result;

  result = qword_100824708;
  if (!qword_100824708)
  {
    result = swift_getWitnessTable(&unk_100629CB0, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824708);
  }
  return result;
}

unint64_t sub_1001A1CFC()
{
  unint64_t result;

  result = qword_100824710;
  if (!qword_100824710)
  {
    result = swift_getWitnessTable(&unk_100629CE0, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824710);
  }
  return result;
}

unint64_t sub_1001A1D44()
{
  unint64_t result;

  result = qword_100824718;
  if (!qword_100824718)
  {
    result = swift_getWitnessTable(&unk_100632FB0, &type metadata for HistoryFilterEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100824718);
  }
  return result;
}

uint64_t sub_1001A1D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  sub_100047110(&qword_1008201E0);
  v0 = type metadata accessor for AppDependencyManager(0);
  v6 = 0u;
  v7 = 0u;
  v8 = 0;
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(&v6, v1);
  v3 = sub_100047110(&qword_100820238);
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  result = AppDependency.__allocating_init(key:manager:)(&v6, v4);
  qword_100869FA8 = v2;
  unk_100869FB0 = result;
  return result;
}

uint64_t sub_1001A1E34()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100008398(v7, qword_100869FB8);
  sub_10003CE9C(v7, (uint64_t)qword_100869FB8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x8000000100688B10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

uint64_t sub_1001A1F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_100047110(&qword_100824768);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100824770);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100824760);
  sub_100008398(v7, qword_100869FD0);
  sub_10003CE9C(v7, (uint64_t)qword_100869FD0);
  v8 = sub_1001019A8();
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for HistoryFilterEntity, v8);
  v9._countAndFlagsBits = 0x617373656E746966;
  v9._object = (void *)0xED00002F2F3A7070;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v10);
  return EntityURLRepresentation.init(stringInterpolation:)(v6, &type metadata for HistoryFilterEntity, v8);
}

unint64_t sub_1001A20CC(uint64_t a1, __int16 a2)
{
  unint64_t result;
  BOOL v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  Swift::String v9;

  result = 0x79726F74736968;
  switch(HIBYTE(a2))
  {
    case 2:
      return result;
    case 3:
      result = 0xD000000000000010;
      break;
    case 4:
    case 6:
      result = 0x2F79726F74736968;
      break;
    case 5:
      result = 0xD000000000000013;
      break;
    default:
      v3 = (a2 & 1) == 0 || a2 == 2;
      if (v3)
        v4 = 0x726F6F6474756FLL;
      else
        v4 = 0x726F6F646E69;
      if (v3)
        v5 = (void *)0xE700000000000000;
      else
        v5 = (void *)0xE600000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(0xE000000000000000);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
      object = v6._object;
      String.append(_:)(v6);
      swift_bridgeObjectRelease(object);
      v8._countAndFlagsBits = 47;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = v4;
      v9._object = v5;
      String.append(_:)(v9);
      swift_bridgeObjectRelease(v5);
      result = 0xD000000000000011;
      break;
  }
  return result;
}

double sub_1001A2278@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  if (qword_10081D660 != -1)
    swift_once(&qword_10081D660, sub_1001A1D88);
  v2 = qword_100869FA8;
  v3 = unk_100869FB0;
  *a1 = qword_100869FA8;
  a1[1] = v3;
  swift_retain(v2);
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

unint64_t sub_1001A22DC()
{
  unint64_t result;

  result = qword_100824720;
  if (!qword_100824720)
  {
    result = swift_getWitnessTable(&unk_100629D18, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824720);
  }
  return result;
}

uint64_t sub_1001A2320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D670 != -1)
    swift_once(&qword_10081D670, sub_1001A1F44);
  v2 = sub_100047110(&qword_100824760);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869FD0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1001A2398()
{
  unint64_t result;

  result = qword_100824728;
  if (!qword_100824728)
  {
    result = swift_getWitnessTable(&unk_100629D40, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824728);
  }
  return result;
}

unint64_t sub_1001A23E0()
{
  unint64_t result;

  result = qword_100824730;
  if (!qword_100824730)
  {
    result = swift_getWitnessTable(&unk_100629D68, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824730);
  }
  return result;
}

unint64_t sub_1001A2428()
{
  unint64_t result;

  result = qword_100824738;
  if (!qword_100824738)
  {
    result = swift_getWitnessTable(&unk_100629DE8, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824738);
  }
  return result;
}

unint64_t sub_1001A246C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v4;

  result = sub_1001A20CC(*(_QWORD *)v1, *(_WORD *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001A2498(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100101A74();
  v4 = URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100114BE8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1001A24E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D668 != -1)
    swift_once(&qword_10081D668, sub_1001A1E34);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869FB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1001A2554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824748;
  if (!qword_100824748)
  {
    v1 = sub_100007050(&qword_100824750);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100824748);
  }
  return result;
}

uint64_t sub_1001A25A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001019A8();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1001A25DC()
{
  unint64_t result;

  result = qword_100824758;
  if (!qword_100824758)
  {
    result = swift_getWitnessTable(&unk_100629E18, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100824758);
  }
  return result;
}

uint64_t sub_1001A2620()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1003C0F68(*(_QWORD *)v0, *(_WORD *)(v0 + 8));
  return DisplayRepresentation.init(stringLiteral:)(v1);
}

uint64_t sub_1001A264C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A2428();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for HistoryItemFilterValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HistoryFilterEntity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 5;
  else
    v4 = -6;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryFilterEntity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryFilterEntity()
{
  return &type metadata for HistoryFilterEntity;
}

uint64_t *initializeWithCopy for ActivitySharingFriendListCompetitionsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for ActivitySharingFriendListCompetitionsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  return a1;
}

uint64_t *assignWithTake for ActivitySharingFriendListCompetitionsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingFriendListCompetitionsSectionView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingFriendListCompetitionsSectionView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingFriendListCompetitionsSectionView()
{
  return &type metadata for ActivitySharingFriendListCompetitionsSectionView;
}

uint64_t sub_1001A2900(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE118, 1);
}

uint64_t sub_1001A2910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t OpaqueTypeConformance2;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v46 = a4;
  v47 = a2;
  v49 = a5;
  v48 = sub_100047110(&qword_100824778);
  __chkstk_darwin(v48);
  v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_100824780);
  __chkstk_darwin(v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100824788);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v45 - v16;
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100629F28);
    v19 = swift_getKeyPath(&unk_100629F50);
    swift_retain(a1);
    static Published.subscript.getter(&v51, v20, KeyPath, v19);
    swift_release(a1);
    swift_release(KeyPath);
    swift_release(v19);
    v21 = v51;
    if (v51)
    {
      v22 = v53;
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v22);
      *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v23, v24, v25, v26, v27);
      *((_QWORD *)v11 + 1) = 0x4010000000000000;
      v11[16] = 0;
      v45[1] = &v11[*(int *)(sub_100047110(&qword_1008247A0) + 44)];
      v50 = v21;
      v28 = (_QWORD *)swift_allocObject(&unk_10078B968, 48, 7);
      v29 = v47;
      v28[2] = a1;
      v28[3] = v29;
      v30 = v46;
      v28[4] = a3;
      v28[5] = v30;
      swift_retain(a3);
      swift_retain(a1);
      v31 = sub_100047110(&qword_1008247A8);
      v32 = sub_100047110(&qword_1008247B0);
      v33 = sub_100028384(&qword_1008247B8, &qword_1008247A8, (uint64_t)&protocol conformance descriptor for [A]);
      v34 = sub_100007050(&qword_1008247C0);
      v35 = sub_1001A31A8();
      v51 = v34;
      v52 = v35;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
      v37 = sub_1001A3290();
      v38 = ForEach<>.init(_:content:)(&v50, sub_1001A319C, v28, v31, &type metadata for Int, v32, v33, OpaqueTypeConformance2, v37);
      LOBYTE(v28) = static Edge.Set.all.getter(v38);
      sub_100021CC0((uint64_t)v11, (uint64_t)v15, &qword_100824780);
      v39 = &v15[*(int *)(v12 + 36)];
      *v39 = (char)v28;
      *(_OWORD *)(v39 + 8) = xmmword_100629E70;
      *(_OWORD *)(v39 + 24) = xmmword_100629E80;
      v39[40] = 0;
      sub_10001BE90((uint64_t)v11, &qword_100824780);
      sub_1001A32D4((uint64_t)v15, (uint64_t)v17);
      sub_100021CC0((uint64_t)v17, (uint64_t)v8, &qword_100824788);
      swift_storeEnumTagMultiPayload(v8, v48, 0);
      v40 = sub_1001A30EC();
      _ConditionalContent<>.init(storage:)(v8, v12, &type metadata for EmptyView, v40, &protocol witness table for EmptyView);
      return sub_10001BE90((uint64_t)v17, &qword_100824788);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v8, v48, 1);
      v42 = sub_1001A30EC();
      return _ConditionalContent<>.init(storage:)(v8, v12, &type metadata for EmptyView, v42, &protocol witness table for EmptyView);
    }
  }
  else
  {
    v43 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
    v44 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
    result = EnvironmentObject.error()(0, v47, v43, v44);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A2CE0@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  unint64_t v39;
  id v40;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v53 = a4;
  v54 = a5;
  v52 = a3;
  v50 = a2;
  v57 = a6;
  v7 = type metadata accessor for AccessibilityActionKind(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v51 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessibilityTraits(0);
  v10 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  v48 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessibilityChildBehavior(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110(&qword_1008247E0);
  v45 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100047110(&qword_1008247C0);
  v20 = __chkstk_darwin(v49);
  v43 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v46 = (char *)&v42 - v22;
  v58[0] = *a1;
  v44 = v58[0];
  static AccessibilityChildBehavior.combine.getter(v44);
  v23 = (void *)sub_1001A324C();
  View.accessibilityElement(children:)(v16, &type metadata for ActivitySharingFriendListCompetitionViewRepresentable, v23);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);

  static AccessibilityTraits.isButton.getter();
  v58[0] = &type metadata for ActivitySharingFriendListCompetitionViewRepresentable;
  v58[1] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityAddTraits(_:)(v12, v17, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v47);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v17);
  v25 = (_QWORD *)swift_allocObject(&unk_10078B990, 56, 7);
  v26 = v50;
  v28 = v52;
  v27 = v53;
  v25[2] = v50;
  v25[3] = v28;
  v29 = v54;
  v25[4] = v27;
  v25[5] = v29;
  v30 = v44;
  v25[6] = v44;
  swift_retain(v27);
  v31 = v30;
  swift_retain(v26);
  v32 = v51;
  static AccessibilityActionKind.default.getter(v33);
  v34 = (uint64_t)v46;
  v35 = v49;
  v36 = (uint64_t)v43;
  ModifiedContent<>.accessibilityAction(_:_:)(v32, sub_1001A3320, v25, v49);
  v37 = swift_release(v25);
  (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v32, v56, v37);
  sub_10001BE90(v36, &qword_1008247C0);
  v38 = (_QWORD *)swift_allocObject(&unk_10078B9B8, 56, 7);
  v38[2] = v26;
  v38[3] = v28;
  v38[4] = v27;
  v38[5] = v29;
  v38[6] = v31;
  v39 = sub_1001A31A8();
  v40 = v31;
  swift_retain(v26);
  swift_retain(v27);
  View.onTapGesture(count:perform:)(1, sub_1001A3320, v38, v35, v39);
  swift_release(v38);
  return sub_10001BE90(v34, &qword_1008247C0);
}

void sub_1001A3058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    swift_retain(a3);
    sub_10029D3A0(a5, 1);
    swift_release(a3);
  }
  else
  {
    v8 = type metadata accessor for ActivitySharingNavigationCoordinator();
    v9 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
    EnvironmentObject.error()(0, a4, v8, v9);
    __break(1u);
  }
}

uint64_t sub_1001A30D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001A2910(*v1, v1[1], v1[2], v1[3], a1);
}

unint64_t sub_1001A30EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824790;
  if (!qword_100824790)
  {
    v1 = sub_100007050(&qword_100824788);
    sub_100028384(&qword_100824798, &qword_100824780, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100824790);
  }
  return result;
}

uint64_t sub_1001A3170()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A319C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1001A2CE0(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t sub_1001A31A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1008247C8;
  if (!qword_1008247C8)
  {
    v1 = sub_100007050(&qword_1008247C0);
    v2[0] = &type metadata for ActivitySharingFriendListCompetitionViewRepresentable;
    v2[1] = sub_1001A324C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008247C8);
  }
  return result;
}

unint64_t sub_1001A324C()
{
  unint64_t result;

  result = qword_1008247D0;
  if (!qword_1008247D0)
  {
    result = swift_getWitnessTable(&unk_10062C438, &type metadata for ActivitySharingFriendListCompetitionViewRepresentable);
    atomic_store(result, (unint64_t *)&qword_1008247D0);
  }
  return result;
}

unint64_t sub_1001A3290()
{
  unint64_t result;

  result = qword_1008247D8;
  if (!qword_1008247D8)
  {
    result = swift_getWitnessTable(&unk_10064218C, &type metadata for ActivitySharingFriendListCompetitionItem);
    atomic_store(result, (unint64_t *)&qword_1008247D8);
  }
  return result;
}

uint64_t sub_1001A32D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A3328()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1001A335C()
{
  uint64_t v0;

  sub_1001A3058(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

unint64_t sub_1001A3380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008247E8;
  if (!qword_1008247E8)
  {
    v1 = sub_100007050(&qword_1008247F0);
    sub_1001A30EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008247E8);
  }
  return result;
}

unint64_t sub_1001A33F0()
{
  unint64_t result;

  result = qword_1008247F8;
  if (!qword_1008247F8)
  {
    result = swift_getWitnessTable(&unk_100629FC8, &type metadata for WorkoutEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1008247F8);
  }
  return result;
}

unint64_t sub_1001A3438()
{
  unint64_t result;

  result = qword_100824800[0];
  if (!qword_100824800[0])
  {
    result = swift_getWitnessTable(&unk_10062A028, &type metadata for WorkoutEntityQuery);
    atomic_store(result, qword_100824800);
  }
  return result;
}

uint64_t sub_1001A347C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_100047110((uint64_t *)&unk_10082E690);
  v4[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v8);
  v4[12] = swift_task_alloc(v8);
  v9 = sub_100047110(&qword_100823CA8);
  v4[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[14] = v10;
  v4[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100823CB0);
  v4[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[17] = v12;
  v4[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A356C, 0, 0);
}

uint64_t sub_1001A356C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v41 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v3 = v0[10];
  swift_bridgeObjectRetain(v1);
  v5 = (unint64_t *)(v4 + 40);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v7 = *(v5 - 1);
    v8 = *v5;
    if ((*v5 & 0x2000000000000000) != 0)
      v9 = HIBYTE(*v5) & 0xF;
    else
      v9 = v7 & 0xFFFFFFFFFFFFLL;
    v10 = swift_bridgeObjectRetain(*v5);
    if (!v9)
    {
LABEL_14:
      UUID.init(uuidString:)(v7, v8, v10);
      goto LABEL_17;
    }
    v11 = swift_bridgeObjectRetain(v8);
    v12 = String.subscript.getter(15, v7, v8, v11);
    v14 = v13;
    swift_bridgeObjectRelease(v8);
    if (v12 == 77 && v14 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 77, 0xE100000000000000, 0);
      v10 = swift_bridgeObjectRelease(v14);
      if ((v16 & 1) == 0)
        goto LABEL_14;
    }
    swift_bridgeObjectRetain(v8);
    v17 = sub_1001A4F38(1uLL, v7, v8);
    v19 = v18;
    v21 = v20;
    v22 = v3;
    v24 = v23;
    swift_bridgeObjectRelease(v8);
    v25 = static String._fromSubstring(_:)(v17, v19, v21, v24);
    v27 = v26;
    v28 = v24;
    v3 = v22;
    v29 = swift_bridgeObjectRelease(v28);
    UUID.init(uuidString:)(v25, v27, v29);
    swift_bridgeObjectRelease(v8);
    v8 = v27;
LABEL_17:
    v31 = v0[8];
    v30 = v0[9];
    v32 = swift_bridgeObjectRelease(v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 48))(v31, 1, v30, v32) == 1)
    {
      sub_10004D914(v0[8]);
    }
    else
    {
      v33 = v0[11];
      v34 = v0[12];
      v35 = v0[9];
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
      v36(v34, v0[8], v35);
      v36(v33, v34, v35);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = (_QWORD *)sub_10013FCF0(0, v6[2] + 1, 1, (unint64_t)v6);
      v38 = v6[2];
      v37 = v6[3];
      if (v38 >= v37 >> 1)
        v6 = (_QWORD *)sub_10013FCF0(v37 > 1, v38 + 1, 1, (unint64_t)v6);
      v39 = v0[11];
      v40 = v0[9];
      v6[2] = v38 + 1;
      v36((uint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v38, v39, v40);
    }
    v5 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v0[4]);
  v41 = v6;
LABEL_25:
  v42 = v0[17];
  v43 = v0[18];
  v44 = v0[16];
  v45 = (void *)objc_opt_self(HKQuery);
  swift_bridgeObjectRetain(v41);
  v47 = sub_10014889C(v46);
  swift_bridgeObjectRelease(v41);
  sub_1000DC0E8();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v49 = objc_msgSend(v45, "predicateForObjectsWithUUIDs:", isa, swift_bridgeObjectRelease(v47).n128_f64[0]);
  v0[19] = v49;

  v50 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  v51 = objc_msgSend((id)swift_getObjCClassFromMetadata(v50), "workoutType");
  v52 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
  v53 = v49;
  static HKSamplePredicate.sample(type:predicate:)(v51, v49, v52);

  v54 = sub_100047110(&qword_100823CC0);
  v55 = *(unsigned __int8 *)(v42 + 80);
  v56 = (v55 + 32) & ~v55;
  v57 = swift_allocObject(v54, v56 + *(_QWORD *)(v42 + 72), v55 | 7);
  *(_OWORD *)(v57 + 16) = xmmword_100622F90;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v57 + v56, v43, v44);
  v58 = v41[2];
  swift_bridgeObjectRelease(v41);
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)(v57, _swiftEmptyArrayStorage, v58, 0, v52);
  AppDependency.wrappedValue.getter(v0 + 2);
  v59 = v0[2];
  v0[20] = v59;
  v60 = (_QWORD *)swift_task_alloc(async function pointer to HKSampleQueryDescriptor.result(for:)[1]);
  v0[21] = v60;
  *v60 = v0;
  v60[1] = sub_1001A39A8;
  return HKSampleQueryDescriptor.result(for:)(v59, v0[13]);
}

uint64_t sub_1001A39A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc(v4);

  if (v1)
    v5 = sub_1001A3CE4;
  else
    v5 = sub_1001A3A1C;
  return swift_task_switch(v5, 0, 0);
}

void sub_1001A3A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 176);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v2)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
    v20 = *(_QWORD *)(v0 + 144);
    v28 = *(void **)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 56);
    v32 = *(_QWORD *)(v0 + 88);
    v33 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 40);
    v24 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
    swift_retain(v25);
    swift_retain(v24);
    swift_retain(v23);
    v26 = sub_1001A4C78((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v25);
    swift_release(v24);
    swift_release(v23);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v27);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v20, v30);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    (*(void (**)(uint64_t))(v0 + 8))(v26);
    return;
  }
  if (v1 < 0)
    v19 = *(_QWORD *)(v0 + 176);
  else
    v19 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v2)
    goto LABEL_22;
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, *(_QWORD *)(v0 + 176));
        v5 = objc_opt_self(HKWorkout);
        v6 = swift_dynamicCastObjCClass(v4, v5);
        if (v6)
        {
          v7 = v6;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
          v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v9 >= v8 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
          specialized Array._endMutation()(v10);
        }
        else
        {
          swift_unknownObjectRelease(v4);
        }
      }
    }
    else
    {
      v11 = (void **)(*(_QWORD *)(v0 + 176) + 32);
      do
      {
        v13 = *v11;
        v14 = objc_opt_self(HKWorkout);
        v15 = swift_dynamicCastObjCClass(v13, v14);
        if (v15)
        {
          v16 = v15;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v18 >= v17 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
          specialized Array._endMutation()(v12);
        }
        ++v11;
        --v2;
      }
      while (v2);
    }
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_1001A3CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A3D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = sub_100047110(&qword_100823CA8);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100823CB0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A3E28, 0, 0);
}

uint64_t sub_1001A3E28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  _QWORD *v16;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v4 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "workoutType");
  v6 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
  static HKSamplePredicate.sample(type:predicate:)(v5, 0, v6);

  v7 = sub_100047110(&qword_100823CC0);
  v8 = *(unsigned __int8 *)(v2 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v7, v9 + *(_QWORD *)(v2 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100622F90;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v10 + v9, v1, v3);
  v11 = sub_100047110(&qword_100823CC8);
  v12 = sub_100047110(&qword_100823CB8);
  v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100622F90;
  KeyPath = swift_getKeyPath(&unk_10062A0A0);
  SortDescriptor.init<A>(_:order:)(KeyPath, 1);
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)(v10, v13, 10, 0, v6);
  AppDependency.wrappedValue.getter(v0 + 2);
  v15 = v0[2];
  v0[13] = v15;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to HKSampleQueryDescriptor.result(for:)[1]);
  v0[14] = v16;
  *v16 = v0;
  v16[1] = sub_1001A3FF8;
  return HKSampleQueryDescriptor.result(for:)(v15, v0[7]);
}

uint64_t sub_1001A3FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc(v4);

  if (v1)
    v5 = sub_1001A4300;
  else
    v5 = sub_1001A406C;
  return swift_task_switch(v5, 0, 0);
}

void sub_1001A406C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 120);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v2)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 72);
    v29 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 56);
    v24 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 48);
    v25 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    swift_retain(v25);
    swift_retain(v24);
    swift_retain(v23);
    v26 = sub_1001A4C78((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v25);
    swift_release(v24);
    swift_release(v23);
    v27 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t, __n128))(v22 + 8))(v21, v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v20, v30);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    (*(void (**)(uint64_t))(v0 + 8))(v26);
    return;
  }
  if (v1 < 0)
    v19 = *(_QWORD *)(v0 + 120);
  else
    v19 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v2)
    goto LABEL_22;
LABEL_3:
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, *(_QWORD *)(v0 + 120));
        v5 = objc_opt_self(HKWorkout);
        v6 = swift_dynamicCastObjCClass(v4, v5);
        if (v6)
        {
          v7 = v6;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
          v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v9 >= v8 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
          specialized Array._endMutation()(v10);
        }
        else
        {
          swift_unknownObjectRelease(v4);
        }
      }
    }
    else
    {
      v11 = (void **)(*(_QWORD *)(v0 + 120) + 32);
      do
      {
        v13 = *v11;
        v14 = objc_opt_self(HKWorkout);
        v15 = swift_dynamicCastObjCClass(v13, v14);
        if (v15)
        {
          v16 = v15;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v18 >= v17 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
          specialized Array._endMutation()(v12);
        }
        ++v11;
        --v2;
      }
      while (v2);
    }
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_1001A4300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v4, *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001A436C(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, "endDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t sub_1001A43B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = sub_100047110(&qword_100824858);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100824860);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001A444C, 0, 0);
}

uint64_t sub_1001A444C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v4 = objc_msgSend((id)objc_opt_self(HKQuery), "predicateForWorkoutsWithWorkoutActivityType:", 82);
  v0[13] = v4;
  v5 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
  v6 = v4;
  static HKSamplePredicate.workout(_:)(v4, v5);

  v7 = sub_100047110(&qword_100824868);
  v8 = *(unsigned __int8 *)(v2 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v7, v9 + *(_QWORD *)(v2 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100622F90;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v10 + v9, v1, v3);
  v11 = sub_100047110(&qword_100824870);
  v12 = sub_100047110(&qword_100824878);
  v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100622F90;
  KeyPath = swift_getKeyPath(&unk_10062A0C8);
  SortDescriptor.init<A>(_:order:)(KeyPath, 1);
  v15 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)(v10, v13, 10, 0, v15);
  AppDependency.wrappedValue.getter(v0 + 2);
  v16 = v0[2];
  v0[14] = v16;
  v17 = (_QWORD *)swift_task_alloc(async function pointer to HKSampleQueryDescriptor.result(for:)[1]);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_1001A4630;
  return HKSampleQueryDescriptor.result(for:)(v16, v0[7]);
}

uint64_t sub_1001A4630(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);

  if (v1)
  {
    v6 = sub_1001A47AC;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_1001A46AC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001A46AC()
{
  uint64_t v0;
  CHWorkoutDetailHeartRateTableViewCell *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 96);
  v18 = *(void **)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  swift_retain(v7);
  swift_retain(v6);
  swift_retain(v5);
  v8 = sub_1001A4C78((uint64_t)v1);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(v1, v9, v10, v11, v12, v13, v14, v15);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v20);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_1001A47AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A482C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1001A4E4C();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1001A4854(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_10082484C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1001A48BC;
  return sub_1001A347C(a1, v4, v5, v6);
}

uint64_t sub_1001A48BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1001A4910(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = (_QWORD *)swift_task_alloc(dword_100824844);
  *(_QWORD *)(v2 + 24) = v6;
  *v6 = v2;
  v6[1] = sub_100100D3C;
  return sub_1001A3D94(v3, v4, v5);
}

unint64_t sub_1001A4978()
{
  unint64_t result;

  result = qword_100824818;
  if (!qword_100824818)
  {
    result = swift_getWitnessTable(&unk_10062A050, &type metadata for WorkoutEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100824818);
  }
  return result;
}

unint64_t sub_1001A49C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824820;
  if (!qword_100824820)
  {
    v1 = sub_100007050(qword_100824828);
    sub_1001625AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100824820);
  }
  return result;
}

uint64_t sub_1001A4A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100161B5C();
  *v5 = v2;
  v5[1] = sub_1000DA0E4;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t destroy for WorkoutEntityQuery(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s10FitnessApp18WorkoutEntityQueryVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for WorkoutEntityQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *assignWithTake for WorkoutEntityQuery(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivityRingsCardFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityRingsCardFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutEntityQuery()
{
  return &type metadata for WorkoutEntityQuery;
}

const char *sub_1001A4C68()
{
  return "endDate";
}

uint64_t sub_1001A4C78(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  _OWORD v25[16];
  _QWORD *v26;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = _swiftEmptyArrayStorage;
    if (!v2)
      return (uint64_t)v3;
    v26 = _swiftEmptyArrayStorage;
    result = sub_100121724(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v26;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      AppDependency.wrappedValue.getter(&v24);
      sub_1001641A8(v7, v24, v25);

      v26 = v3;
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_100121724(v8 > 1, v9 + 1, 1);
        v3 = v26;
      }
      ++v5;
      v3[2] = v9 + 1;
      v10 = &v3[32 * v9];
      v11 = v25[0];
      v12 = v25[1];
      v13 = v25[3];
      v10[4] = v25[2];
      v10[5] = v13;
      v10[2] = v11;
      v10[3] = v12;
      v14 = v25[4];
      v15 = v25[5];
      v16 = v25[7];
      v10[8] = v25[6];
      v10[9] = v16;
      v10[6] = v14;
      v10[7] = v15;
      v17 = v25[8];
      v18 = v25[9];
      v19 = v25[11];
      v10[12] = v25[10];
      v10[13] = v19;
      v10[10] = v17;
      v10[11] = v18;
      v20 = v25[12];
      v21 = v25[13];
      v22 = v25[15];
      v10[16] = v25[14];
      v10[17] = v22;
      v10[14] = v20;
      v10[15] = v21;
      if (v2 == v5)
        return (uint64_t)v3;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A4E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  sub_100047110(&qword_1008201E0);
  v0 = type metadata accessor for AppDependencyManager(0);
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(&v8, v1);
  v3 = sub_100047110(&qword_1008201E8);
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(&v8, v4);
  v5 = sub_100047110(&qword_100822D10);
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = static AppDependencyManager.shared.getter(v5);
  AppDependency.__allocating_init(key:manager:)(&v8, v6);
  return v2;
}

unint64_t sub_1001A4F38(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ChartableMetric(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TabularMetric(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1001A50B4 + 4 * byte_10062A0F5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1001A50E8 + 4 * byte_10062A0F0[v4]))();
}

uint64_t sub_1001A50E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A50F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A50F8);
  return result;
}

uint64_t sub_1001A5104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A510CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1001A5110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A5118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabularMetric()
{
  return &type metadata for TabularMetric;
}

uint64_t sub_1001A5134(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A5194(a1, a2, a3, &qword_1008248B0);
}

uint64_t sub_1001A5140(uint64_t a1, uint64_t a2)
{
  return sub_1001A51F4(a1, a2, &qword_1008248B0);
}

void sub_1001A514C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000EA158();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_1001A5170()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

uint64_t sub_1001A5188(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A5194(a1, a2, a3, &qword_1008248B8);
}

uint64_t sub_1001A5194(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v7 = *a1;
  v8 = v4;
  v5 = sub_100047110(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v7, v5, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_1001A51E8(uint64_t a1, uint64_t a2)
{
  return sub_1001A51F4(a1, a2, &qword_1008248B8);
}

uint64_t sub_1001A51F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100047110(a3);
  return dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
}

void sub_1001A5234(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10018A608();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_1001A5258()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

void sub_1001A5270(uint64_t a1)
{
  sub_1001A5298(a1, &UIFontTextStyleCaption2, &qword_100869FE8);
}

void sub_1001A5284(uint64_t a1)
{
  sub_1001A5298(a1, &UIFontTextStyleCallout, &qword_100869FF0);
}

void sub_1001A5298(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id v4;
  void *v5;
  NSString *v6;
  id v7;
  id v8;

  v4 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", *a2);
  v5 = (void *)objc_opt_self(UITraitCollection);
  v6 = UIContentSizeCategoryLarge;
  v7 = objc_msgSend(v5, "traitCollectionWithPreferredContentSizeCategory:", v6);

  v8 = objc_msgSend(v4, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", v7);
  if (v8)
    *a3 = v8;
  else
    __break(1u);
}

void sub_1001A536C()
{
  void *v0;
  void *v1;
  NSString *v2;
  id v3;
  id v4;

  sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
  v0 = (void *)static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)(UIFontTextStyleCallout, UIFontDescriptorSystemDesignRounded, 0x100000000, *(_QWORD *)&UIFontWeightMedium, 0, 0);
  v1 = (void *)objc_opt_self(UITraitCollection);
  v2 = UIContentSizeCategoryLarge;
  v3 = objc_msgSend(v1, "traitCollectionWithPreferredContentSizeCategory:", v2);

  v4 = objc_msgSend(v0, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", v3);
  if (v4)
    qword_100869FF8 = (uint64_t)v4;
  else
    __break(1u);
}

id sub_1001A5474()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v0, "setMinimumFractionDigits:", 0);
  objc_msgSend(v0, "setMaximumFractionDigits:", 2);
  result = objc_msgSend(v0, "setNumberStyle:", 1);
  qword_100824880 = (uint64_t)v0;
  return result;
}

uint64_t sub_1001A54E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A5518 + 4 * byte_10062A0FA[a1]))(0x72656B72616DLL, 0xE600000000000000);
}

uint64_t sub_1001A5518()
{
  return 0x65636E6174736964;
}

uint64_t sub_1001A5530()
{
  return 1701669236;
}

uint64_t sub_1001A5540()
{
  return 1701011824;
}

uint64_t sub_1001A5550()
{
  return 0x7461527472616568;
}

uint64_t sub_1001A556C()
{
  return 0x7265776F70;
}

uint64_t sub_1001A5580()
{
  return 0x65636E65646163;
}

uint64_t sub_1001A5598()
{
  return 0x796772656E65;
}

uint64_t sub_1001A55A8()
{
  return 0x6465657073;
}

uint64_t sub_1001A55BC()
{
  return 0x43676E696C637963;
}

unint64_t sub_1001A55E0()
{
  return 0xD000000000000012;
}

uint64_t sub_1001A55FC()
{
  return 0x536D756D6978616DLL;
}

uint64_t sub_1001A561C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A564C + 4 * byte_10062A106[a1]))(0x72656B72616DLL, 0xE600000000000000);
}

uint64_t sub_1001A564C()
{
  return 0x65636E6174736964;
}

uint64_t sub_1001A5664()
{
  return 1701669236;
}

uint64_t sub_1001A5674()
{
  return 1701011824;
}

uint64_t sub_1001A5684()
{
  return 0x7461527472616568;
}

uint64_t sub_1001A56A0()
{
  return 0x7265776F70;
}

uint64_t sub_1001A56B4()
{
  return 0x65636E65646163;
}

uint64_t sub_1001A56CC()
{
  return 0x796772656E65;
}

uint64_t sub_1001A56DC()
{
  return 0x6465657073;
}

uint64_t sub_1001A56F0()
{
  return 0x43676E696C637963;
}

unint64_t sub_1001A5714()
{
  return 0xD000000000000012;
}

uint64_t sub_1001A5730()
{
  return 0x536D756D6978616DLL;
}

void sub_1001A5750(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001A5784()
{
  return ((uint64_t (*)(_QWORD, unint64_t))AttributedString.init(stringLiteral:))(0, 0xE000000000000000);
}

void sub_1001A5D38(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001A5D60()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "paceColors");
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x1001A5FD4);
  }
  v1 = v0;
  v2 = objc_msgSend(v0, "nonGradientTextColor");

  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1001A5DACLL);
  }
  return ((uint64_t (*)(id))Color.init(_:))(v2);
}

void sub_1001A601C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  __n128 v22;
  uint64_t KeyPath;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a4;
  v34 = a6;
  v35 = a1;
  v28 = type metadata accessor for AttributedString.AttributeMergePolicy(0);
  v27[1] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27[0] = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100047110(&qword_100824890);
  v30 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v29 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100824898);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AttributeContainer(0);
  v36 = *(_QWORD *)(v38 - 8);
  v15 = __chkstk_darwin(v38);
  v32 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v27 - v18;
  __chkstk_darwin(v17);
  v37 = (char *)v27 - v20;
  if (a3)
  {
    v21 = objc_msgSend(a3, "workoutConfiguration");
    objc_msgSend(v21, "activityType");

  }
  else
  {
    objc_msgSend(a2, "workoutActivityType");
  }
  AttributeContainer.init()(v22);
  KeyPath = swift_getKeyPath(&unk_10062A258);
  v27[-2] = __chkstk_darwin(KeyPath);
  v24 = swift_getKeyPath(&unk_10062A288);
  v25 = sub_10018A608();
  AttributeContainer.subscript.getter(v24, v25);
  v26 = swift_release(v24);
  (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v19, v38, v26);
  if (qword_10081D688 != -1)
    swift_once(&qword_10081D688, sub_1001A536C);
  v39 = qword_100869FF8;
  AttributeContainer.Builder.callAsFunction(_:)(&v39, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __asm { BR              X10 }
}

void sub_1001A7818()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000010068D7C0, "FitnessApp/TabularMetric.swift", 30, 2, 101, 0);
  __break(1u);
  JUMPOUT(0x1001A7870);
}

void sub_1001A78A0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  void *v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v7 = *(void **)(a2 + 136);
  if (v7)
  {
    v8 = (void *)objc_opt_self(HKUnit);
    v9 = v7;
    v10 = objc_msgSend(v8, "meterUnit");
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v8, "unitFromString:", v11);

    objc_msgSend(v9, "doubleValueForUnit:", v12);
    v14 = v13;

    v15 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v10, v14);
    v16 = 1.0;
    if (!v15)
    {
LABEL_11:
      v33 = 0;
LABEL_14:
      AttributedString.init(stringLiteral:)(0, 0xE000000000000000);

      return;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      goto LABEL_11;
    v18 = *(double *)(a2 + 32);
    v19 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    v15 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v19, v18);

    v16 = *(double *)(a2 + 64);
    if (!v15)
      goto LABEL_11;
  }
  v33 = v15;
  v20 = objc_msgSend(a3, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v33, 4, FIUIDistanceTypeForActivityType(a1), v16);
  if (!v20)
  {
LABEL_13:

    goto LABEL_14;
  }
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v24 = v23;

  v25 = objc_msgSend(a3, "localizedSpeedUnitStringForActivityType:", a1);
  if (!v25)
  {
    swift_bridgeObjectRelease(v24);
    goto LABEL_13;
  }
  v26 = v25;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = sub_100038CA0();
  v30 = StringProtocol.localizedUppercase.getter(&type metadata for String, v29);
  v32 = v31;
  swift_bridgeObjectRelease(v28);
  if (qword_10081D688 != -1)
    swift_once(&qword_10081D688, sub_1001A536C);
  sub_100436EB8(v22, v24, v30, v32, (void *)qword_100869FF8, 0, a4);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v32);

}

void sub_1001A7B90(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  id v9;
  NSString v10;
  id v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v8 = (void *)objc_opt_self(HKUnit);
  v9 = objc_msgSend(v8, "meterUnit");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "unitFromString:", v10);

  objc_msgSend(a2, "doubleValueForUnit:", v11);
  v13 = v12;

  v27 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v9, v13);
  v14 = objc_msgSend(a3, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v27, 4, FIUIDistanceTypeForActivityType(a1), 1.0);
  if (!v14)
    goto LABEL_7;
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  v19 = objc_msgSend(a3, "localizedSpeedUnitStringForActivityType:", a1);
  if (!v19)
  {
    swift_bridgeObjectRelease(v18);
LABEL_7:
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);

    return;
  }
  v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = sub_100038CA0();
  v24 = StringProtocol.localizedUppercase.getter(&type metadata for String, v23);
  v26 = v25;
  swift_bridgeObjectRelease(v22);
  if (qword_10081D688 != -1)
    swift_once(&qword_10081D688, sub_1001A536C);
  sub_100436EB8(v16, v18, v24, v26, (void *)qword_100869FF8, 0, a4);

  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v26);
}

uint64_t sub_1001A7DD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1001A561C(*a1);
  v5 = v4;
  v6 = sub_1001A561C(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1001A7E5C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1001A561C(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_1001A7EBC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_1001A561C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_1001A7EFC(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1001A561C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001A7F58@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A81D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001A7F84@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001A561C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001A7FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A821C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A8008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A821C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001A8054@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001A54E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001A8080()
{
  unint64_t result;

  result = qword_100824888;
  if (!qword_100824888)
  {
    result = swift_getWitnessTable(&unk_10062A22C, &type metadata for TabularMetric);
    atomic_store(result, (unint64_t *)&qword_100824888);
  }
  return result;
}

void sub_1001A80C4()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

void sub_1001A80E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10018A608();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1001A8104()
{
  return 8;
}

uint64_t sub_1001A8110(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1001A8118(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A8124(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A5194(a1, a2, a3, &qword_1008248B8) & 1;
}

uint64_t sub_1001A8144(uint64_t a1, uint64_t a2)
{
  return sub_1001A51F4(a1, a2, &qword_1008248B8);
}

_QWORD *sub_1001A8150(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1001A815C()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

void sub_1001A8178(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000EA158();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1001A819C()
{
  return 8;
}

uint64_t sub_1001A81A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A5194(a1, a2, a3, &qword_1008248B0) & 1;
}

uint64_t sub_1001A81C8(uint64_t a1, uint64_t a2)
{
  return sub_1001A51F4(a1, a2, &qword_1008248B0);
}

unint64_t sub_1001A81D4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10077F728, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t sub_1001A821C()
{
  unint64_t result;

  result = qword_1008248C0;
  if (!qword_1008248C0)
  {
    result = swift_getWitnessTable(&unk_10062A1B4, &type metadata for TabularMetric);
    atomic_store(result, (unint64_t *)&qword_1008248C0);
  }
  return result;
}

uint64_t sub_1001A826C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081F2F8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Font.Weight.medium.getter(v5);
  v9 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = static Font.system(size:weight:design:)(*(_QWORD *)&v8, 0, v7, 9.0);
  sub_100184224((uint64_t)v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v11 = Font.leading(_:)(v3, v10);
  v12 = swift_release(v10);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v12);
  qword_10086A000 = v11;
  return result;
}

uint64_t sub_1001A83A0(uint64_t result, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD v27[3];

  v9 = HIBYTE(a2) & 0xF;
  v10 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v11 = v9;
  else
    v11 = result & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)a2, (SEL)v10, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v12 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v13 = (uint64_t)sub_1001ADCA4(v12, v10, 10);
      v14 = v10 & 1;
      goto LABEL_37;
    }
    v27[0] = result;
    v27[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v9)
        goto LABEL_50;
      if (v9 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v13 = (BYTE1(result) - 48);
      v19 = v9 - 2;
      if (v19)
      {
        v20 = (unsigned __int8 *)v27 + 2;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_34;
          v22 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v22 + v21;
          if (__OFADD__(v22, v21))
            goto LABEL_34;
          v14 = 0;
          ++v20;
          if (!--v19)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v9)
        {
          if (v9 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v13 = -(uint64_t)(BYTE1(result) - 48);
            v15 = v9 - 2;
            if (v15)
            {
              v16 = (unsigned __int8 *)v27 + 2;
              while (1)
              {
                v17 = *v16 - 48;
                if (v17 > 9)
                  goto LABEL_34;
                v18 = 10 * v13;
                if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                  goto LABEL_34;
                v13 = v18 - v17;
                if (__OFSUB__(v18, v17))
                  goto LABEL_34;
                v14 = 0;
                ++v16;
                if (!--v15)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v13 = 0;
          v14 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v9 || (result - 48) > 9u)
        goto LABEL_34;
      v13 = (result - 48);
      v23 = v9 - 1;
      if (v23)
      {
        v24 = (unsigned __int8 *)v27 + 1;
        while (1)
        {
          v25 = *v24 - 48;
          if (v25 > 9)
            goto LABEL_34;
          v26 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v26 + v25;
          if (__OFADD__(v26, v25))
            goto LABEL_34;
          v14 = 0;
          ++v24;
          if (!--v23)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v14 = 0;
    goto LABEL_37;
  }
  v13 = (uint64_t)sub_1001ADBC0(result, a2, 10);
  v14 = v10;
LABEL_37:
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)a2, (SEL)v10, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) != 0)
    return 0;
  else
    return v13;
}

uint64_t sub_1001A85EC(char *a1, char *a2)
{
  return sub_100391240(*a1, *a2);
}

Swift::Int sub_1001A85F8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6863746177;
  else
    v2 = 0x656E6F687069;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A8670(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6863746177;
  else
    v2 = 0x656E6F687069;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001A86C4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6863746177;
  else
    v3 = 0x656E6F687069;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001A8738@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F868;
  return sub_100158558(v2, a1, a2);
}

void sub_1001A8744(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656E6F687069;
  if (*v1)
    v2 = 0x6863746177;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001A877C(char *a1, char *a2)
{
  return sub_100390F48(*a1, *a2);
}

Swift::Int sub_1001A8788()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x3434333734393431;
  else
    v2 = 0x3235333734393431;
  if (v1)
    v3 = 0xEA00000000003037;
  else
    v3 = 0xEA00000000003631;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001A880C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x3434333734393431;
  else
    v2 = 0x3235333734393431;
  if (*v1)
    v3 = 0xEA00000000003037;
  else
    v3 = 0xEA00000000003631;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001A886C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x3434333734393431;
  else
    v3 = 0x3235333734393431;
  if (v2)
    v4 = 0xEA00000000003037;
  else
    v4 = 0xEA00000000003631;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001A88EC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F8B8;
  return sub_100158558(v2, a1, a2);
}

void sub_1001A88F8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x3235333734393431;
  if (*v1)
    v2 = 0x3434333734393431;
  v3 = 0xEA00000000003037;
  if (!*v1)
    v3 = 0xEA00000000003631;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001A893C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v0);
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 112) = 1;
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject(&unk_10078BE90, 24, 7);
  swift_weakInit(v5 + 16, v0);
  v6 = (_QWORD *)swift_allocObject(&unk_10078BEB8, 40, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v5;
  v7 = sub_1005A9074((uint64_t)v3, (uint64_t)&unk_100824AB0, (uint64_t)v6);
  v8 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 112) = v7;
  sub_1001ADBB0(v8);
  return v0;
}

uint64_t sub_1001A8A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_1001A8A5C, 0, 0);
}

uint64_t sub_1001A8A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_1008248F4);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_1001A8AFC;
  v3[3] = Strong;
  return swift_task_switch(sub_1001A8C08, Strong, 0);
}

uint64_t sub_1001A8AFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v5;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1001A8B70, 0, 0);
  v5 = swift_release(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(__n128))(v3 + 8))(v5);
}

uint64_t sub_1001A8B70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A8BA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_1001A8C08, v0, 0);
}

id sub_1001A8C08(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  id v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  NSString v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  os_log_type_t v56;
  void *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t (*v70)(void);
  NSObject *log;
  uint64_t v72;

  v2 = v1 + 3;
  v3 = v1[3];
  v4 = static os_log_type_t.default.getter(a1);
  v5 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "[AppStoreQuery] Activating...", 29, 2, _swiftEmptyArrayStorage);

  if (!*(_QWORD *)(v3 + 112))
  {
    v65 = static os_log_type_t.error.getter(v6);
    v66 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "[AppStoreQuery] Query already activated", 39, 2, _swiftEmptyArrayStorage);

    v67 = sub_1001AD9E0();
    v68 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v67, 0, 0);
    *v69 = 9;
    swift_willThrow(v68);
    v70 = (uint64_t (*)(void))v1[1];
    return (id)v70();
  }
  v7 = (void *)objc_opt_self(AMSMediaTask);
  result = objc_msgSend(v7, "bagSubProfile");
  if (result)
  {
    v9 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    result = objc_msgSend(v7, "bagSubProfileVersion");
    if (result)
    {
      v12 = result;
      v13 = v1 + 2;
      v14 = *v2;
      static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v16 = v15;

      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      v19 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v17, v18);

      v20 = *(void **)(v14 + 120);
      *(_QWORD *)(v14 + 120) = v19;
      v21 = v19;

      v22 = String._bridgeToObjectiveC()();
      v23 = objc_msgSend(v21, "stringForKey:", v22);

      v1[2] = 0;
      v24 = objc_msgSend(v23, "valueWithError:", v1 + 2);

      v25 = (void *)v1[2];
      if (!v24)
        goto LABEL_7;
      v26 = *(void **)(*v2 + 136);
      *(_QWORD *)(*v2 + 136) = v24;
      v27 = v25;

      v28 = String._bridgeToObjectiveC()();
      v29 = objc_msgSend(v21, "URLForKey:", v28);

      *v13 = 0;
      v30 = objc_msgSend(v29, "valueWithError:", v1 + 2);

      v25 = (void *)*v13;
      if (v30)
      {
        v31 = (_QWORD *)*v2;
        v32 = *(void **)(*v2 + 144);
        v31[18] = v30;
        v33 = v25;

        v34 = objc_allocWithZone((Class)AMSMediaTokenService);
        v35 = v21;
        v36 = String._bridgeToObjectiveC()();
        v37 = objc_msgSend(v34, "initWithClientIdentifier:bag:", v36, v35);

        v38 = (void *)v31[16];
        v31[16] = v37;
        v39 = v37;

        v40 = objc_msgSend(objc_allocWithZone((Class)AMSMediaRequestEncoder), "initWithTokenService:bag:", v39, v35);
        v41 = (void *)v31[20];
        v31[20] = v40;

        v42 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
        v43 = objc_msgSend(objc_allocWithZone((Class)AMSURLSession), "initWithConfiguration:", v42);

        v44 = objc_msgSend(objc_allocWithZone((Class)AMSMediaProtocolHandler), "initWithTokenService:", v39);
        objc_msgSend(v43, "setProtocolHandler:", v44);
        v45 = (void *)v31[19];
        v31[19] = v43;
        v46 = v43;

        v48 = static os_log_type_t.default.getter(v47);
        v49 = HKLogActivity;
        os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "[AppStoreQuery] Setting state to active", 39, 2, _swiftEmptyArrayStorage);

        v50 = *(_QWORD *)(v3 + 112);
        *(_QWORD *)(v3 + 112) = 0;
        sub_1001ADBB0(v50);
      }
      else
      {
LABEL_7:
        v51 = v25;
        v52 = _convertNSErrorToError(_:)(v25);

        swift_willThrow(v53);
        v54 = *(_QWORD *)(v3 + 112);
        *(_QWORD *)(v3 + 112) = 1;
        v55 = sub_1001ADBB0(v54);
        v56 = static os_log_type_t.error.getter(v55);
        v57 = (void *)HKLogActivity;
        v58 = v56;
        if (os_log_type_enabled(HKLogActivity, v56))
        {
          swift_errorRetain(v52);
          swift_errorRetain(v52);
          log = v57;
          v59 = (uint8_t *)swift_slowAlloc(12, -1);
          v60 = swift_slowAlloc(32, -1);
          v72 = v60;
          *(_DWORD *)v59 = 136315138;
          *v13 = v52;
          swift_errorRetain(v52);
          v61 = sub_100047110(&qword_10082EEA0);
          v62 = String.init<A>(describing:)(v1 + 2, v61);
          v64 = v63;
          *v13 = sub_10003E8EC(v62, v63, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v59 + 4);
          swift_bridgeObjectRelease(v64);
          swift_errorRelease(v52);
          swift_errorRelease(v52);
          _os_log_impl((void *)&_mh_execute_header, log, v58, "[AppStoreQuery] Failed to activate query: %s", v59, 0xCu);
          swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v59, -1, -1);
          swift_errorRelease(v52);

        }
        else
        {
          swift_errorRelease(v52);
        }
      }
      v70 = (uint64_t (*)(void))v1[1];
      return (id)v70();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A92A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 144) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  v5 = sub_100047110(&qword_10082E5E0);
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URLComponents(0);
  *(_QWORD *)(v4 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 72) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v8);
  return swift_task_switch(sub_1001A933C, v3, 0);
}

uint64_t sub_1001A933C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  os_log_type_t v7;
  CHWorkoutDetailHeartRateTableViewCell *v8;
  uint8_t *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const char *v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Class isa;
  id v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  CHWorkoutDetailHeartRateTableViewCell *v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *log;
  uint64_t v81[2];

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  sub_1001AA24C(*(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 40), *(_BYTE *)(v0 + 144) & 1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = sub_10001BE90(*(_QWORD *)(v0 + 56), &qword_10082E5E0);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = (void *)HKLogActivity;
    v7 = v5;
    if (os_log_type_enabled(HKLogActivity, v5))
    {
      v8 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 40);
      swift_bridgeObjectRetain_n(v8, 2);
      log = v6;
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v81[0] = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = swift_bridgeObjectRetain(v8);
      v12 = Array.description.getter(v11);
      v14 = (CHWorkoutDetailHeartRateTableViewCell *)v13;
      swift_bridgeObjectRelease(v8, v13, v15, v16, v17, v18, v19, v20);
      *(_QWORD *)(v0 + 16) = sub_10003E8EC(v12, (unint64_t)v14, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(v14, v21, v22, v23, v24, v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, log, v7, "[AppStoreQuery] Unable to create URL for identifier %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    v28 = sub_1001AD9E0();
    v29 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v28, 0, 0);
    *v30 = 2;
    swift_willThrow(v29);
    goto LABEL_9;
  }
  v31 = *(_QWORD *)(v0 + 48);
  v32 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  v33 = *(void **)(v31 + 160);
  *(_QWORD *)(v0 + 96) = v33;
  v34 = *(_QWORD *)(v0 + 88);
  if (!v33)
  {
    v63 = *(_QWORD *)(v0 + 64);
    v64 = *(_QWORD *)(v0 + 72);
    v65 = static os_log_type_t.error.getter(v32);
    v66 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "[AppStoreQuery] Unable to retrieve encoder.", 43, 2, &_swiftEmptyArrayStorage);

    v67 = sub_1001AD9E0();
    v68 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v67, 0, 0);
    *v69 = 6;
    swift_willThrow(v68);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v63);
LABEL_9:
    v70 = *(_QWORD *)(v0 + 80);
    v71 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v35 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v37 = *(_QWORD *)(v0 + 64);
  v38 = v33;
  isa = URLComponents._bridgeToObjectiveC()().super.isa;
  v40 = objc_msgSend(v38, "requestWithComponents:", isa);
  *(_QWORD *)(v0 + 104) = v40;

  LOBYTE(isa) = static os_log_type_t.default.getter(v41);
  v42 = HKLogActivity;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v34, v37);
  v43 = isa;
  v44 = os_log_type_enabled(v42, (os_log_type_t)isa);
  v45 = *(_QWORD *)(v0 + 72);
  v46 = *(_QWORD *)(v0 + 80);
  v47 = *(_QWORD *)(v0 + 64);
  if (v44)
  {
    v79 = v42;
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v81[0] = v49;
    *(_DWORD *)v48 = 136315138;
    v50 = sub_100028404(&qword_100824AE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v47, v50);
    v53 = (CHWorkoutDetailHeartRateTableViewCell *)v52;
    *(_QWORD *)(v0 + 24) = sub_10003E8EC(v51, v52, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v48 + 4);
    swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
    v61 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v61(v46, v47);
    _os_log_impl((void *)&_mh_execute_header, v79, v43, "[AppStoreQuery] Encoding request with components %s.", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {
    v61 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v61(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }
  *(_QWORD *)(v0 + 112) = v61;
  v74 = *(_QWORD *)(v0 + 40);
  v73 = *(_QWORD *)(v0 + 48);
  v75 = sub_100028404(&qword_100824AB8, v62, (uint64_t (*)(uint64_t))type metadata accessor for AppStoreQuery, (uint64_t)&unk_10062A558);
  v76 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 120) = v76;
  *(_QWORD *)(v76 + 16) = v40;
  *(_QWORD *)(v76 + 24) = v74;
  v77 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 128) = v77;
  v78 = type metadata accessor for URLRequest(0);
  *v77 = v0;
  v77[1] = sub_1001A9890;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 32), v73, v75, 0xD000000000000021, 0x800000010068DC80, sub_1001AE650, v76, v78);
}

uint64_t sub_1001A9890()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 120);
  v5 = *(_QWORD *)(v2 + 48);
  swift_task_dealloc(v4);
  if (v0)
    v6 = sub_1001A9978;
  else
    v6 = sub_1001A9900;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A9900()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(void **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);

  v1(v2, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A9978()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(void **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);

  v1(v2, v4);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001A99E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v6 = sub_100047110(&qword_100824AE8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_10078BF30, v11 + v8, v10 | 7);
  *(_QWORD *)(v12 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1001AE6D0;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AA248;
  aBlock[3] = &unk_10078BF48;
  v13 = _Block_copy(aBlock);
  v14 = v16;
  swift_bridgeObjectRetain(a3);
  objc_msgSend(a2, "addFinishBlock:", v13, swift_release(v14).n128_f64[0]);
  _Block_release(v13);
}

uint64_t sub_1001A9B2C(uint64_t a1, uint64_t a2, CHWorkoutDetailHeartRateTableViewCell *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  __n128 v39;
  uint64_t v40;
  const char *v41;
  CHWorkoutDetailHeartRateTableViewCell *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  os_log_t v56;
  uint64_t v57;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  os_log_type_t v61;
  NSObject *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  const char *v68;
  unint64_t v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  CHWorkoutDetailHeartRateTableViewCell *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  CHWorkoutDetailHeartRateTableViewCell *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  void (*v95)(char *, uint64_t);
  os_log_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  void *v100;
  os_log_type_t v101;
  NSObject *v102;
  uint8_t *v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  const char *v107;
  CHWorkoutDetailHeartRateTableViewCell *v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  os_log_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v8 = sub_100047110(&qword_100824AF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v127 - v16;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v127 - v20;
  if (a2)
  {
    v22 = swift_errorRetain(a2);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = (void *)HKLogActivity;
    v25 = v23;
    if (os_log_type_enabled(HKLogActivity, v23))
    {
      swift_errorRetain(a2);
      swift_bridgeObjectRetain(a3);
      swift_errorRetain(a2);
      swift_bridgeObjectRetain(a3);
      v131 = v24;
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v133 = a2;
      v134 = v27;
      *(_DWORD *)v26 = 136315394;
      swift_errorRetain(a2);
      v28 = sub_100047110(&qword_10082EEA0);
      v29 = String.init<A>(describing:)(&v133, v28);
      v31 = (CHWorkoutDetailHeartRateTableViewCell *)v30;
      v133 = sub_10003E8EC(v29, v30, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v26 + 4);
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v26 + 12) = 2080;
      v39 = swift_bridgeObjectRetain(a3);
      v40 = Array.description.getter(v39);
      v42 = (CHWorkoutDetailHeartRateTableViewCell *)v41;
      swift_bridgeObjectRelease(a3, v41, v43, v44, v45, v46, v47, v48);
      v133 = sub_10003E8EC(v40, (unint64_t)v42, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v26 + 14);
      swift_bridgeObjectRelease(v42, v49, v50, v51, v52, v53, v54, v55);
      swift_bridgeObjectRelease_n(a3, 2);
      v56 = v131;
      _os_log_impl((void *)&_mh_execute_header, v131, v25, "[AppStoreQuery] Recieved an error %s encoding the URL for identifiers %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    v134 = a2;
    v57 = sub_100047110(&qword_100824AE8);
    return CheckedContinuation.resume(throwing:)(&v134, v57);
  }
  v132 = a4;
  if (a1)
  {
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(a1, v19);
    v59 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v59(v10, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v60 = ((uint64_t (*)(char *, char *, uint64_t))v59)(v21, v10, v11);
      v61 = static os_log_type_t.default.getter(v60);
      v62 = HKLogActivity;
      v63 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v63(v14, v21, v11);
      if (os_log_type_enabled(v62, v61))
      {
        swift_bridgeObjectRetain_n(a3, 2);
        v131 = v62;
        v64 = swift_slowAlloc(22, -1);
        v130 = swift_slowAlloc(64, -1);
        v134 = v130;
        *(_DWORD *)v64 = 136315394;
        v128 = v64 + 4;
        v65 = swift_bridgeObjectRetain(a3);
        v66 = Array.description.getter(v65);
        v129 = v61;
        v67 = v63;
        v69 = (unint64_t)v68;
        swift_bridgeObjectRelease(a3, v68, v70, v71, v72, v73, v74, v75);
        v133 = sub_10003E8EC(v66, v69, &v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v128);
        v76 = (CHWorkoutDetailHeartRateTableViewCell *)v69;
        v63 = v67;
        swift_bridgeObjectRelease(v76, v77, v78, v79, v80, v81, v82, v83);
        swift_bridgeObjectRelease_n(a3, 2);
        *(_WORD *)(v64 + 12) = 2080;
        v84 = sub_100028404(&qword_100824AC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
        v85 = dispatch thunk of CustomStringConvertible.description.getter(v11, v84);
        v87 = (CHWorkoutDetailHeartRateTableViewCell *)v86;
        v133 = sub_10003E8EC(v85, v86, &v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 14);
        swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
        v95 = *(void (**)(char *, uint64_t))(v12 + 8);
        v95(v14, v11);
        v96 = v131;
        _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v129, "[AppStoreQuery] Successfully encoded URL request for identifiers %s and request %s", (uint8_t *)v64, 0x16u);
        v97 = v130;
        swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v64, -1, -1);

      }
      else
      {
        v95 = *(void (**)(char *, uint64_t))(v12 + 8);
        v95(v14, v11);
      }
      v63(v17, v21, v11);
      v126 = sub_100047110(&qword_100824AE8);
      CheckedContinuation.resume(returning:)(v17, v126);
      return ((uint64_t (*)(char *, uint64_t))v95)(v21, v11);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(v10, 1, 1, v11, v19);
  }
  v98 = sub_10001BE90((uint64_t)v10, &qword_100824AF0);
  v99 = static os_log_type_t.error.getter(v98);
  v100 = (void *)HKLogActivity;
  v101 = v99;
  if (os_log_type_enabled(HKLogActivity, v99))
  {
    swift_bridgeObjectRetain_n(a3, 2);
    v102 = v100;
    v103 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = swift_slowAlloc(32, -1);
    v134 = v104;
    *(_DWORD *)v103 = 136315138;
    v105 = swift_bridgeObjectRetain(a3);
    v106 = Array.description.getter(v105);
    v108 = (CHWorkoutDetailHeartRateTableViewCell *)v107;
    swift_bridgeObjectRelease(a3, v107, v109, v110, v111, v112, v113, v114);
    v133 = sub_10003E8EC(v106, (unint64_t)v108, &v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v103 + 4);
    swift_bridgeObjectRelease(v108, v115, v116, v117, v118, v119, v120, v121);
    swift_bridgeObjectRelease_n(a3, 2);
    _os_log_impl((void *)&_mh_execute_header, v102, v101, "[AppStoreQuery] Unable to cast AMSURLRequest for identifiers %s.", v103, 0xCu);
    swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v103, -1, -1);

  }
  v122 = sub_1001AD9E0();
  v123 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v122, 0, 0);
  *v124 = 0;
  v134 = v123;
  v125 = sub_100047110(&qword_100824AE8);
  return CheckedContinuation.resume(throwing:)(&v134, v125);
}

uint64_t sub_1001AA24C@<X0>(CHWorkoutDetailHeartRateTableViewCell *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  CHWorkoutDetailHeartRateTableViewCell *v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  CHWorkoutDetailHeartRateTableViewCell *v75;
  CHWorkoutDetailHeartRateTableViewCell *v76;
  Swift::String v77;
  CHWorkoutDetailHeartRateTableViewCell *v78;
  char *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CHWorkoutDetailHeartRateTableViewCell *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  CHWorkoutDetailHeartRateTableViewCell *v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  void *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  CHWorkoutDetailHeartRateTableViewCell *v116;
  const char *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  uint8_t *v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  const char *v128;
  CHWorkoutDetailHeartRateTableViewCell *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  os_log_t v143;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  CHWorkoutDetailHeartRateTableViewCell *v148;
  uint8_t *v149;
  id v150;
  uint64_t v151;
  os_log_t v152;
  CHWorkoutDetailHeartRateTableViewCell *v153;
  uint64_t v154;
  uint64_t v155[2];

  v7 = sub_100047110(&qword_10081E640);
  __chkstk_darwin(v7);
  v9 = (uint8_t *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(id *)(v3 + 136);
  if (!v15)
  {
    v34 = static os_log_type_t.error.getter(v12);
    v35 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "[AppStoreQuery] Unable to retrieve the country code from the bag.", 65, 2, &_swiftEmptyArrayStorage);

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, 1, 1, v10);
  }
  LODWORD(v152) = a2;
  v16 = *(void **)(v3 + 144);
  if (!v16)
  {
    v58 = v15;
    v59 = static os_log_type_t.error.getter(v58);
    v60 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "[AppStoreQuery] Unable to retrieve the host from the bag.", 57, 2, &_swiftEmptyArrayStorage);

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, 1, 1, v10);
  }
  v149 = v9;
  v150 = v15;
  v17 = *(_QWORD *)a1->cellPadding;
  v151 = v11;
  v153 = a1;
  if (v17)
  {
    v147 = a3;
    v148 = (CHWorkoutDetailHeartRateTableViewCell *)((char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    v146 = v10;
    v18 = v15;
    v145 = v16;
    v19 = v16;
    swift_bridgeObjectRetain(a1);
    v20 = 0;
    v21 = &_swiftEmptyArrayStorage;
    do
    {
      if (*((_BYTE *)&v153[1].super.super.super.super.isa + v20))
        v22 = 0x3434333734393431;
      else
        v22 = 0x3235333734393431;
      if (*((_BYTE *)&v153[1].super.super.super.super.isa + v20))
        v23 = 0xEA00000000003037;
      else
        v23 = 0xEA00000000003631;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        v21 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10013F75C(0, *(_QWORD *)v21->cellPadding + 1, 1, v21);
      v32 = *(_QWORD *)v21->cellPadding;
      v31 = *(_QWORD *)v21->cellInset;
      if (v32 >= v31 >> 1)
        v21 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10013F75C((_QWORD *)(v31 > 1), v32 + 1, 1, v21);
      ++v20;
      *(_QWORD *)v21->cellPadding = v32 + 1;
      v33 = (char *)v21 + 16 * v32;
      *((_QWORD *)v33 + 4) = v22;
      *((_QWORD *)v33 + 5) = v23;
    }
    while (v17 != v20);
    swift_bridgeObjectRelease(v153, v24, v25, v26, v27, v28, v29, v30);
    v10 = v146;
    a3 = v147;
    v15 = v150;
    v11 = v151;
    v16 = v145;
    v14 = (char *)v148;
    if (*(_QWORD *)v21->cellPadding)
      goto LABEL_19;
LABEL_23:
    swift_bridgeObjectRelease(v21, v36, v37, v38, v39, v40, v41, v42);
    v64 = static os_log_type_t.error.getter(v63);
    v65 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "[AppStoreQuery] No editorial identifiers found.", 47, 2, &_swiftEmptyArrayStorage);

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, 1, 1, v10);
  }
  v61 = v15;
  v62 = v16;
  v21 = &_swiftEmptyArrayStorage;
  if (!*(_QWORD *)_swiftEmptyArrayStorage.cellPadding)
    goto LABEL_23;
LABEL_19:
  v155[0] = (uint64_t)v21;
  v43 = sub_100047110((uint64_t *)&unk_10081E160);
  v44 = sub_10004791C();
  v147 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v43, v44);
  v46 = v45;
  swift_bridgeObjectRelease(v21, v45, v47, v48, v49, v50, v51, v52);
  URLComponents.init()();
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  v53 = objc_msgSend(v16, "absoluteString");
  v148 = (CHWorkoutDetailHeartRateTableViewCell *)v46;
  if (v53)
  {
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

  }
  else
  {
    v55 = 0;
    v57 = 0;
  }
  URLComponents.host.setter(v55, v57);
  v155[0] = 0;
  v155[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v155[1], v66, v67, v68, v69, v70, v71, v72);
  strcpy((char *)v155, "/v1/editorial/");
  HIBYTE(v155[1]) = -18;
  v73 = objc_msgSend(v15, "description");
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  v76 = v75;

  v77._countAndFlagsBits = v74;
  v77._object = v76;
  String.append(_:)(v77);
  v78 = v76;
  v79 = v14;
  swift_bridgeObjectRelease(v78, v80, v81, v82, v83, v84, v85, v86);
  v87._object = (void *)0x800000010068DC00;
  v87._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v87);
  URLComponents.path.setter(v155[0], v155[1]);
  v88 = sub_100047110(&qword_1008396C0);
  v89 = type metadata accessor for URLQueryItem(0);
  v90 = swift_allocObject(v88, ((*(unsigned __int8 *)(*(_QWORD *)(v89 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v89 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v89 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v89 - 8) + 80) | 7);
  *(_OWORD *)(v90 + 16) = xmmword_100620BC0;
  v91 = v148;
  URLQueryItem.init(name:value:)(7562345, 0xE300000000000000, v147, v148);
  swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
  if ((v152 & 1) != 0)
    v99 = 0x6863746177;
  else
    v99 = 0x656E6F687069;
  if ((v152 & 1) != 0)
    v100 = (CHWorkoutDetailHeartRateTableViewCell *)0xE500000000000000;
  else
    v100 = (CHWorkoutDetailHeartRateTableViewCell *)0xE600000000000000;
  URLQueryItem.init(name:value:)(0x6D726F6674616C70, 0xE800000000000000, v99, v100);
  swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
  v108 = URLComponents.queryItems.setter(v90);
  v109 = (uint64_t)v149;
  URLComponents.url.getter(v108);
  v110 = type metadata accessor for URL(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 48))(v109, 1, v110) != 1)
  {

    sub_10001BE90(v109, &qword_10081E640);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v14, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a3, 0, 1, v10);
  }
  v111 = sub_10001BE90(v109, &qword_10081E640);
  v112 = static os_log_type_t.error.getter(v111);
  v113 = (void *)HKLogActivity;
  v114 = v112;
  v115 = os_log_type_enabled(HKLogActivity, v112);
  v116 = v153;
  swift_bridgeObjectRetain(v153);
  if (v115)
  {
    swift_bridgeObjectRetain(v116);
    v152 = v113;
    v124 = (uint8_t *)swift_slowAlloc(12, -1);
    v125 = swift_slowAlloc(32, -1);
    v155[0] = v125;
    v148 = (CHWorkoutDetailHeartRateTableViewCell *)v79;
    *(_DWORD *)v124 = 136315138;
    v149 = v124 + 4;
    v126 = swift_bridgeObjectRetain(v116);
    v127 = Array.description.getter(v126);
    v129 = (CHWorkoutDetailHeartRateTableViewCell *)v128;
    swift_bridgeObjectRelease(v116, v128, v130, v131, v132, v133, v134, v135);
    v154 = sub_10003E8EC(v127, (unint64_t)v129, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v155, v149);
    swift_bridgeObjectRelease_n(v116, 2);
    swift_bridgeObjectRelease(v129, v136, v137, v138, v139, v140, v141, v142);
    v143 = v152;
    _os_log_impl((void *)&_mh_execute_header, v152, v114, "[AppStoreQuery] Unable to create URL for identifiers %s", v124, 0xCu);
    swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v124, -1, -1);

    v11 = v151;
    (*(void (**)(CHWorkoutDetailHeartRateTableViewCell *, uint64_t))(v151 + 8))(v148, v10);
  }
  else
  {
    swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);

    v11 = v151;
    (*(void (**)(char *, uint64_t))(v151 + 8))(v79, v10);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, 1, 1, v10);
}

uint64_t sub_1001AA9E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1001AAA00, v1, 0);
}

uint64_t sub_1001AAA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(void **)(v2 + 152);
  *(_QWORD *)(v1 + 40) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 24);
    v5 = v3;
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, "dataTaskPromiseWithRequest:", isa);
    *(_QWORD *)(v1 + 48) = v7;

    v9 = sub_100028404(&qword_100824AB8, v8, (uint64_t (*)(uint64_t))type metadata accessor for AppStoreQuery, (uint64_t)&unk_10062A558);
    v10 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 56) = v10;
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = v7;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 64) = v11;
    *v11 = v1;
    v11[1] = sub_1001AABBC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, v2, v9, 0xD000000000000015, 0x800000010068DB20, sub_1001AE48C, v10, &type metadata for EditorialItemsList);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(a1);
    v14 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "[AppStoreQuery] Unable to retrieve AMS session.", 47, 2, _swiftEmptyArrayStorage);

    v15 = sub_1001AD9E0();
    v16 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v15, 0, 0);
    *v17 = 7;
    swift_willThrow(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1001AABBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = sub_1001AAC68;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 32);
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v5 = sub_1001AAC30;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AAC30()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001AAC68()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void **)(v0 + 40);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001AACAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_log_type_t v15;
  NSObject *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  os_log_t v27;
  uint64_t v28;
  uint8_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  double v38;
  uint64_t v39;
  uint8_t *v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t aBlock[5];
  uint64_t v52;

  v49 = a3;
  v5 = sub_100047110(&qword_100824AC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v47 = v7;
  v48 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v45 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  v16 = HKLogActivity;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v46 = a2;
  v44 = v17;
  v17(v14, a2, v8);
  if (os_log_type_enabled(v16, v15))
  {
    v41 = v16;
    v18 = swift_slowAlloc(12, -1);
    v42 = a1;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v43 = v5;
    v21 = v20;
    aBlock[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v40 = v19 + 4;
    v22 = sub_100028404(&qword_100824AC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
    v25 = v24;
    v50 = sub_10003E8EC(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v40);
    v26 = swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v14, v8, v26);
    v27 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, v15, "[AppStoreQuery] Begining EditorialItem download for request %s.", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v28 = v21;
    v5 = v43;
    swift_slowDealloc(v28, -1, -1);
    v29 = v19;
    a1 = v42;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  v30 = v45;
  v44(v45, v46, v8);
  v31 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v48, a1, v5);
  v32 = *(unsigned __int8 *)(v9 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = *(unsigned __int8 *)(v6 + 80);
  v35 = (v10 + v34 + v33) & ~v34;
  v36 = swift_allocObject(&unk_10078BEE0, v35 + v47, v32 | v34 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v36 + v33, v30, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v36 + v35, v31, v5);
  aBlock[4] = (uint64_t)sub_1001AE54C;
  v52 = v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001AA248;
  aBlock[3] = (uint64_t)&unk_10078BEF8;
  v37 = _Block_copy(aBlock);
  *(_QWORD *)&v38 = swift_release(v52).n128_u64[0];
  objc_msgSend(v49, "addFinishBlock:", v37, v38);
  _Block_release(v37);
}

uint64_t sub_1001AB008(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v39;
  os_log_t v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  os_log_type_t v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __n128 v78;
  NSObject *v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v8 = type metadata accessor for URLRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v84 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v84 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v84 - v18;
  if (a2)
  {
    v20 = swift_errorRetain(a2);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = HKLogActivity;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v19, a3, v8);
    if (os_log_type_enabled(v22, v21))
    {
      swift_errorRetain(a2);
      v23 = a1;
      swift_errorRetain(a2);
      v85 = v23;
      v86 = v22;
      v24 = swift_slowAlloc(32, -1);
      v25 = swift_slowAlloc(96, -1);
      v89 = a2;
      v90 = v25;
      *(_DWORD *)v24 = 136315650;
      v88 = a4;
      swift_errorRetain(a2);
      v26 = sub_100047110(&qword_10082EEA0);
      v87 = v9;
      v27 = String.init<A>(describing:)(&v89, v26);
      v29 = v28;
      v89 = sub_10003E8EC(v27, v28, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v24 + 4);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v24 + 12) = 2080;
      v30 = sub_100028404(&qword_100824AC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v30);
      v33 = v32;
      v89 = sub_10003E8EC(v31, v32, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v24 + 14);
      v34 = swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t, __n128))(v87 + 8))(v19, v8, v34);
      *(_WORD *)(v24 + 22) = 2080;
      v89 = (uint64_t)a1;
      v35 = sub_100047110(&qword_100824AD8);
      v36 = Optional.description.getter(v35);
      v38 = v37;
      v89 = sub_10003E8EC(v36, v37, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v24 + 24);
      swift_bridgeObjectRelease(v38);
      v39 = v85;

      v40 = v86;
      _os_log_impl((void *)&_mh_execute_header, v86, v21, "[AppStoreQuery] Recieved an error %s downloading the request %s. Result %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
    }
    v90 = a2;
    v48 = sub_100047110(&qword_100824AC0);
    return CheckedContinuation.resume(throwing:)(&v90, v48);
  }
  if (!a1)
  {
    v50 = static os_log_type_t.error.getter(v17);
    v51 = HKLogActivity;
    v52 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a3, v8);
    if (os_log_type_enabled(v51, v50))
    {
      v53 = v51;
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      v90 = v55;
      *(_DWORD *)v54 = 136315394;
      v56 = sub_100028404(&qword_100824AC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v8, v56);
      v59 = v58;
      v89 = sub_10003E8EC(v57, v58, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v54 + 4);
      v60 = swift_bridgeObjectRelease(v59);
      (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v16, v8, v60);
      *(_WORD *)(v54 + 12) = 2080;
      v89 = 0;
      v61 = sub_100047110(&qword_10081F7B8);
      v62 = Optional.description.getter(v61);
      v64 = v63;
      v89 = sub_10003E8EC(v62, v63, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v54 + 14);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v53, v50, "[AppStoreQuery] There are no apps for the request %s. The error is %s.", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }
    v80 = sub_1001AD9E0();
    v81 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v80, 0, 0);
    *v82 = 5;
    v90 = v81;
    v48 = sub_100047110(&qword_100824AC0);
    return CheckedContinuation.resume(throwing:)(&v90, v48);
  }
  v41 = objc_msgSend(a1, "data");
  v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v46 = JSONDecoder.init()();
  v47 = sub_1001AE5C8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v90, &type metadata for EditorialItemsList, v42, v44, &type metadata for EditorialItemsList, v47);
  v88 = a4;
  swift_release(v46);
  v65 = v90;
  v67 = static os_log_type_t.default.getter(v66);
  v68 = HKLogActivity;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a3, v8);
  v69 = v67;
  if (os_log_type_enabled(v68, v67))
  {
    v85 = v68;
    v71 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    v86 = v44;
    v87 = v9;
    v73 = v72;
    v90 = v72;
    *(_DWORD *)v71 = 136315138;
    v74 = sub_100028404(&qword_100824AC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v8, v74);
    v77 = v76;
    v89 = sub_10003E8EC(v75, v76, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v71 + 4);
    v78 = swift_bridgeObjectRelease(v77);
    v44 = v86;
    (*(void (**)(char *, uint64_t, __n128))(v87 + 8))(v13, v8, v78);
    v79 = v85;
    _os_log_impl((void *)&_mh_execute_header, v85, v69, "[AppStoreQuery] EditorialItem download complete for request %s.", v71, 0xCu);
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v71, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  v90 = v65;
  v83 = sub_100047110(&qword_100824AC0);
  CheckedContinuation.resume(returning:)(&v90, v83);
  return sub_10004D9E4(v42, (unint64_t)v44);
}

void sub_1001ABA78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1001ABAEC()
{
  uint64_t v0;

  sub_1001ADBB0(*(_QWORD *)(v0 + 112));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1001ABB40()
{
  uint64_t v0;

  sub_1001ABAEC();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppStoreQuery()
{
  return objc_opt_self(_TtC10FitnessApp13AppStoreQuery);
}

ValueMetadata *type metadata accessor for AppStoreQueryType()
{
  return &type metadata for AppStoreQueryType;
}

uint64_t _s10FitnessApp17AppStoreQueryTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001ABBD8 + 4 * byte_10062A345[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001ABC0C + 4 * byte_10062A340[v4]))();
}

uint64_t sub_1001ABC0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001ABC14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001ABC1CLL);
  return result;
}

uint64_t sub_1001ABC28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001ABC30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001ABC34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001ABC3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreQueryAppTypeIdentifier()
{
  return &type metadata for AppStoreQueryAppTypeIdentifier;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppStoreQuery.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain(v3);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AppStoreQuery.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release(result);
  return result;
}

unint64_t *assignWithCopy for AppStoreQuery.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain(v4);
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }
  return a1;
}

unint64_t *assignWithTake for AppStoreQuery.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStoreQuery.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AppStoreQuery.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *sub_1001ABE3C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreQuery.State()
{
  return &type metadata for AppStoreQuery.State;
}

unint64_t sub_1001ABE70()
{
  unint64_t result;

  result = qword_100824A88;
  if (!qword_100824A88)
  {
    result = swift_getWitnessTable(&unk_10062A480, &type metadata for AppStoreQueryAppTypeIdentifier);
    atomic_store(result, (unint64_t *)&qword_100824A88);
  }
  return result;
}

unint64_t sub_1001ABEB8()
{
  unint64_t result;

  result = qword_100824A90;
  if (!qword_100824A90)
  {
    result = swift_getWitnessTable(&unk_10062A520, &type metadata for AppStoreQueryType);
    atomic_store(result, &qword_100824A90);
  }
  return result;
}

uint64_t sub_1001ABEFC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 1960) = v2;
  *(_BYTE *)(v3 + 2048) = a2;
  *(_QWORD *)(v3 + 1952) = a1;
  v4 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v3 + 1968) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1976) = v5;
  *(_QWORD *)(v3 + 1984) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001ABF90, v2, 0);
}

uint64_t sub_1001ABF90()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  const char *v15;
  CHWorkoutDetailHeartRateTableViewCell *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  void *v33;
  unsigned int v34;
  os_log_type_t v35;
  void *v36;
  os_log_type_t v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  const char *v43;
  CHWorkoutDetailHeartRateTableViewCell *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  NSObject *log;
  NSObject *loga;
  uint64_t v64;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 1960) + 112);
  *(_QWORD *)(v0 + 1992) = v1;
  if (v1 >= 2)
  {
    swift_retain(v1);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = (void *)HKLogActivity;
    v9 = v7;
    if (os_log_type_enabled(HKLogActivity, v7))
    {
      v10 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 1952);
      swift_bridgeObjectRetain_n(v10, 2);
      log = v8;
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v64 = v12;
      *(_DWORD *)v11 = 134218242;
      *(_QWORD *)(v0 + 1936) = *(_QWORD *)v10->cellPadding;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1936, v0 + 1944, v11 + 4);
      *(_WORD *)(v11 + 12) = 2080;
      v13 = swift_bridgeObjectRetain(v10);
      v14 = Array.description.getter(v13);
      v16 = (CHWorkoutDetailHeartRateTableViewCell *)v15;
      swift_bridgeObjectRelease(v10, v15, v17, v18, v19, v20, v21, v22);
      *(_QWORD *)(v0 + 1944) = sub_10003E8EC(v14, (unint64_t)v16, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1944, v0 + 1952, v11 + 14);
      swift_bridgeObjectRelease(v16, v23, v24, v25, v26, v27, v28, v29);
      swift_bridgeObjectRelease_n(v10, 2);
      _os_log_impl((void *)&_mh_execute_header, log, v9, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    v30 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 2000) = v30;
    v31 = sub_100047110(&qword_10082EEA0);
    *v30 = v0;
    v30[1] = sub_1001AC4F8;
    return Task.value.getter(v31, v1, (char *)&type metadata for () + 8, v31, &protocol self-conformance witness table for Error);
  }
  else if (v1)
  {
    v2 = sub_1001AD9E0();
    v3 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v2, 0, 0);
    *v4 = 8;
    swift_willThrow(v3);
    swift_task_dealloc(*(_QWORD *)(v0 + 1984));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    if (v32 && (v33 = v32, v34 = objc_msgSend(v32, "isAppInstallationAllowed"), v33, v34))
    {
      v35 = static os_log_type_t.default.getter(v32);
      v36 = (void *)HKLogActivity;
      v37 = v35;
      if (os_log_type_enabled(HKLogActivity, v35))
      {
        v38 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 1952);
        swift_bridgeObjectRetain_n(v38, 2);
        loga = v36;
        v39 = swift_slowAlloc(22, -1);
        v40 = swift_slowAlloc(32, -1);
        v64 = v40;
        *(_DWORD *)v39 = 134218242;
        *(_QWORD *)(v0 + 1920) = *(_QWORD *)v38->cellPadding;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1920, v0 + 1928, v39 + 4);
        *(_WORD *)(v39 + 12) = 2080;
        v41 = swift_bridgeObjectRetain(v38);
        v42 = Array.description.getter(v41);
        v44 = (CHWorkoutDetailHeartRateTableViewCell *)v43;
        swift_bridgeObjectRelease(v38, v43, v45, v46, v47, v48, v49, v50);
        *(_QWORD *)(v0 + 1928) = sub_10003E8EC(v42, (unint64_t)v44, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1928, v0 + 1936, v39 + 14);
        swift_bridgeObjectRelease(v44, v51, v52, v53, v54, v55, v56, v57);
        swift_bridgeObjectRelease_n(v38, 2);
        _os_log_impl((void *)&_mh_execute_header, loga, v37, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      v58 = *(_BYTE *)(v0 + 2048);
      v59 = (_QWORD *)swift_task_alloc(dword_1008248FC);
      *(_QWORD *)(v0 + 2008) = v59;
      *v59 = v0;
      v59[1] = sub_1001AC918;
      return sub_1001A92A0(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 1952), v58 & 1);
    }
    else
    {
      v60 = static os_log_type_t.default.getter(v32);
      v61 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "[AppStoreQuery] shouldOfferAppStoreSuggestions is false, skipping AppStore suggestions", 86, 2, &_swiftEmptyArrayStorage);

      swift_task_dealloc(*(_QWORD *)(v0 + 1984));
      return (*(uint64_t (**)(CHWorkoutDetailHeartRateTableViewCell *))(v0 + 8))(&_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_1001AC4F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 2000));
  v3 = *(_QWORD *)(v2 + 1960);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1001AD5A4;
  }
  else
  {
    v4 = sub_1001AC5B0;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001AC5B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id v6;
  void *v7;
  unsigned int v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  CHWorkoutDetailHeartRateTableViewCell *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  const char *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 1960);
  sub_1001ADBB0(*(_QWORD *)(v0 + 1992));
  if (*(_QWORD *)(v1 + 112))
  {
    v2 = sub_1001AD9E0();
    v3 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v2, 0, 0);
    *v4 = 8;
    swift_willThrow(v3);
    swift_task_dealloc(*(_QWORD *)(v0 + 1984));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    if (v6 && (v7 = v6, v8 = objc_msgSend(v6, "isAppInstallationAllowed"), v7, v8))
    {
      v9 = static os_log_type_t.default.getter(v6);
      v10 = (void *)HKLogActivity;
      v11 = v9;
      if (os_log_type_enabled(HKLogActivity, v9))
      {
        v12 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 1952);
        swift_bridgeObjectRetain_n(v12, 2);
        v13 = v10;
        v14 = swift_slowAlloc(22, -1);
        v15 = swift_slowAlloc(32, -1);
        v37 = v15;
        *(_DWORD *)v14 = 134218242;
        *(_QWORD *)(v0 + 1920) = *(_QWORD *)v12->cellPadding;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1920, v0 + 1928, v14 + 4);
        *(_WORD *)(v14 + 12) = 2080;
        v16 = swift_bridgeObjectRetain(v12);
        v17 = Array.description.getter(v16);
        v19 = (CHWorkoutDetailHeartRateTableViewCell *)v18;
        swift_bridgeObjectRelease(v12, v18, v20, v21, v22, v23, v24, v25);
        *(_QWORD *)(v0 + 1928) = sub_10003E8EC(v17, (unint64_t)v19, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1928, v0 + 1936, v14 + 14);
        swift_bridgeObjectRelease(v19, v26, v27, v28, v29, v30, v31, v32);
        swift_bridgeObjectRelease_n(v12, 2);
        _os_log_impl((void *)&_mh_execute_header, v13, v11, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      v33 = *(_BYTE *)(v0 + 2048);
      v34 = (_QWORD *)swift_task_alloc(dword_1008248FC);
      *(_QWORD *)(v0 + 2008) = v34;
      *v34 = v0;
      v34[1] = sub_1001AC918;
      return sub_1001A92A0(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 1952), v33 & 1);
    }
    else
    {
      v35 = static os_log_type_t.default.getter(v6);
      v36 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "[AppStoreQuery] shouldOfferAppStoreSuggestions is false, skipping AppStore suggestions", 86, 2, &_swiftEmptyArrayStorage);

      swift_task_dealloc(*(_QWORD *)(v0 + 1984));
      return (*(uint64_t (**)(CHWorkoutDetailHeartRateTableViewCell *))(v0 + 8))(&_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_1001AC918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2008);
  v3 = *(_QWORD **)v1;
  v3[252] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[245];
    v5 = sub_1001AD90C;
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_100824904);
    v3[253] = v6;
    *v6 = v3;
    v6[1] = sub_1001AC9F8;
    v4 = v3[245];
    v6[3] = v3[248];
    v6[4] = v4;
    v5 = sub_1001AAA00;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AC9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2024);
  *(_QWORD *)(*v2 + 2032) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 1960);
  if (v1)
  {
    v7 = sub_1001AD96C;
  }
  else
  {
    *(_QWORD *)(v4 + 2040) = a1;
    v7 = sub_1001ACAB0;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001ACAB0(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  _QWORD *v8;
  CHWorkoutDetailHeartRateTableViewCell *v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  CHWorkoutDetailHeartRateTableViewCell *v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  Class *v41;
  CHWorkoutDetailHeartRateTableViewCell *v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  CHWorkoutDetailHeartRateTableViewCell *isUniquelyReferenced_nonNull_native;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  const char *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t cellPadding;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  CHWorkoutDetailHeartRateTableViewCell *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  CHWorkoutDetailHeartRateTableViewCell *v102;
  id v103;
  CHWorkoutDetailHeartRateTableViewCell *v104;
  const char *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  __int128 *v113;
  CHWorkoutDetailHeartRateTableViewCell *v114;
  uint64_t i;
  uint64_t v116;
  CHWorkoutDetailHeartRateTableViewCell *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  CHWorkoutDetailHeartRateTableViewCell *v128;
  id v129;
  NSString v130;
  SEL v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  void *v139;
  id v140;
  id v141;
  unsigned __int8 v142;
  char v143;
  SEL v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  const char *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  unint64_t v168;
  unint64_t v169;
  CHWorkoutDetailHeartRateTableViewCell *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  uint64_t v187;
  SEL v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  os_log_type_t v195;
  void *v196;
  os_log_type_t v197;
  _QWORD *v198;
  NSObject *v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  CHWorkoutDetailHeartRateTableViewCell *v205;
  const char *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  uint64_t v213;
  const char *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  const char *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  CHWorkoutDetailHeartRateTableViewCell *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  CHWorkoutDetailHeartRateTableViewCell *v232;
  __n128 v233;
  SEL v234;
  id v235;
  id v236;
  id v237;
  id v238;
  id v239;
  id v240;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  __int128 *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  CHWorkoutDetailHeartRateTableViewCell *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  CHWorkoutDetailHeartRateTableViewCell *v260;
  CHWorkoutDetailHeartRateTableViewCell **v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;

  v9 = &_swiftEmptyArrayStorage;
  if (v8[255])
    v10 = (CHWorkoutDetailHeartRateTableViewCell *)v8[255];
  else
    v10 = &_swiftEmptyArrayStorage;
  v11 = *(_QWORD *)v10->cellPadding;
  if (v11)
  {
    swift_bridgeObjectRetain(v10);
    v19 = 48;
    do
    {
      v20 = *(uint64_t *)((char *)&v10->super.super.super.super.isa + v19);
      if (v20)
        v21 = v20 == 2;
      else
        v21 = 1;
      if (!v21)
      {
        if (v20 == 1)
        {
          sub_10015FC20(1);
        }
        else
        {
          sub_100159C2C(*(uint64_t *)((char *)&v10->super.super.super.super.isa + v19));
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = (CHWorkoutDetailHeartRateTableViewCell *)sub_1001406C4(0, *(_QWORD *)v9->cellPadding + 1, 1, v9);
          v23 = *(_QWORD *)v9->cellPadding;
          v22 = *(_QWORD *)v9->cellInset;
          if (v23 >= v22 >> 1)
            v9 = (CHWorkoutDetailHeartRateTableViewCell *)sub_1001406C4((_QWORD *)(v22 > 1), v23 + 1, 1, v9);
          *(_QWORD *)v9->cellPadding = v23 + 1;
          *((_QWORD *)&v9[1].super.super.super.super.isa + v23) = v20;
        }
      }
      v19 += 24;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  }
  swift_bridgeObjectRelease(v10, a2, a3, a4, a5, a6, a7, a8);
  v31 = *(_QWORD *)v9->cellPadding;
  v32 = &_swiftEmptyArrayStorage;
  v263 = v8;
  if (!v31)
  {
LABEL_42:
    v261 = (CHWorkoutDetailHeartRateTableViewCell **)(v8 + 239);
    v262 = v8 + 238;
    swift_bridgeObjectRelease(v9, v24, v25, v26, v27, v28, v29, v30);
    v68 = *(_QWORD *)v32->cellPadding;
    if (v68)
    {
      v69 = (uint64_t)(v8 + 2);
      v70 = (uint64_t)(v8 + 26);
      v264 = (uint64_t)(v8 + 98);
      v257 = (uint64_t)(v8 + 122);
      v71 = (uint64_t)(v8 + 142);
      v251 = (uint64_t)(v8 + 182);
      v252 = (uint64_t)(v8 + 162);
      v255 = (uint64_t)(v8 + 202);
      v72 = (uint64_t)(v8 + 100);
      v246 = v8 + 166;
      v247 = (uint64_t)(v8 + 218);
      v249 = v8 + 57;
      v250 = (__int128 *)(v8 + 50);
      v248 = (uint64_t)(v8 + 58);
      swift_bridgeObjectRetain(v32);
      v73 = v68 - 1;
      v256 = &_swiftEmptyArrayStorage;
      cellPadding = (uint64_t)v32[1].cellPadding;
      v258 = v72;
      while (1)
      {
        v75 = *(_QWORD *)(cellPadding - 16);
        v76 = *(_QWORD *)(cellPadding - 8);
        sub_100045AD4(cellPadding, v70, &qword_100822908);
        sub_100045AD4(v70, v69, &qword_100822908);
        if (sub_1001ADB14(v69) == 1)
          goto LABEL_56;
        v77 = v263[25];
        if (!v77)
          goto LABEL_56;
        v259 = v263[24];
        sub_100045AD4(v70, v264, &qword_100822908);
        sub_100045AD4(v72, v71, &qword_100822928);
        if (sub_1001ADAF8(v71) == 1)
          goto LABEL_56;
        sub_100045AD4(v71, v257, &qword_100822948);
        if (sub_1001ADB14(v257) == 1)
        {
          v72 = v258;
          if (!v73)
            goto LABEL_64;
          goto LABEL_57;
        }
        if (!v263[125])
          break;
        v72 = v258;
        if (!v263[99] || !v76)
          goto LABEL_56;
        v253 = v263[99];
        v254 = v263[125];
        v244 = v263[98];
        v245 = v263[124];
        sub_100045AD4(v258, v251, &qword_100822928);
        sub_100045AD4(v251, v252, &qword_100822948);
        if (sub_1001ADB14(v252) == 1)
        {
          v78 = v247;
          sub_1001ADB38(v247);
        }
        else
        {
          v78 = (uint64_t)v246;
          sub_1001ADB58(v246);
        }
        sub_100045AD4(v78, v255, &qword_100822968);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v254);
        swift_bridgeObjectRetain(v253);
        swift_bridgeObjectRetain(v76);
        v72 = v258;
        v243 = sub_1001A83A0(v75, v76, v79, v80, v81, v82, v83, v84);
        v242 = v89;
        if ((swift_isUniquelyReferenced_nonNull_native(v256) & 1) == 0)
          v256 = sub_100140478(0, *(_QWORD *)v256->cellPadding + 1, 1, v256, v85, v86, v87, v88);
        v91 = *(_QWORD *)v256->cellPadding;
        v90 = *(_QWORD *)v256->cellInset;
        if (v91 >= v90 >> 1)
          v256 = sub_100140478((CHWorkoutDetailHeartRateTableViewCell *)(v90 > 1), v91 + 1, 1, v256, v85, v86, v87, v88);
        v263[50] = v259;
        v263[51] = v77;
        v263[52] = v244;
        v263[53] = v253;
        v263[54] = v245;
        v263[55] = v254;
        v263[56] = v243;
        *v249 = v242 & 1;
        sub_100045AD4(v255, v248, &qword_100822968);
        *(_QWORD *)v256->cellPadding = v91 + 1;
        v92 = &v256[6 * v91];
        v93 = v250[3];
        v95 = *v250;
        v94 = v250[1];
        *(_OWORD *)&v92[2].super.super.super.super.isa = v250[2];
        *(_OWORD *)v92[2].cellPadding = v93;
        *(_OWORD *)&v92[1].super.super.super.super.isa = v95;
        *(_OWORD *)v92[1].cellPadding = v94;
        v96 = v250[7];
        v98 = v250[4];
        v97 = v250[5];
        *(_OWORD *)&v92[4].super.super.super.super.isa = v250[6];
        *(_OWORD *)v92[4].cellPadding = v96;
        *(_OWORD *)&v92[3].super.super.super.super.isa = v98;
        *(_OWORD *)v92[3].cellPadding = v97;
        v99 = v250[11];
        v101 = v250[8];
        v100 = v250[9];
        *(_OWORD *)&v92[6].super.super.super.super.isa = v250[10];
        *(_OWORD *)v92[6].cellPadding = v99;
        *(_OWORD *)&v92[5].super.super.super.super.isa = v101;
        *(_OWORD *)v92[5].cellPadding = v100;
        if (!v73)
        {
LABEL_64:
          swift_bridgeObjectRelease_n(v32, 2);
          v8 = v263;
          v102 = v256;
          goto LABEL_66;
        }
LABEL_57:
        --v73;
        cellPadding += 208;
      }
      v72 = v258;
LABEL_56:
      if (!v73)
        goto LABEL_64;
      goto LABEL_57;
    }
    swift_bridgeObjectRelease(v32, v61, v62, v63, v64, v65, v66, v67);
    v102 = &_swiftEmptyArrayStorage;
LABEL_66:
    v103 = objc_msgSend((id)objc_opt_self(APApplication), "hiddenAppBundleIdentifiers");
    v104 = (CHWorkoutDetailHeartRateTableViewCell *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v103, &type metadata for String, &protocol witness table for String);

    *v261 = &_swiftEmptyArrayStorage;
    v112 = *(_QWORD *)v102->cellPadding;
    if (!v112)
    {
      swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
      swift_bridgeObjectRelease(v102, v188, v189, v190, v191, v192, v193, v194);
      v114 = &_swiftEmptyArrayStorage;
LABEL_83:
      v195 = static os_log_type_t.default.getter(v187);
      v196 = (void *)HKLogActivity;
      v197 = v195;
      if (os_log_type_enabled(HKLogActivity, v195))
      {
        v198 = v8 + 237;
        v199 = v196;
        v200 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v200 = 134217984;
        swift_beginAccess(v261, v8 + 234, 0, 0);
        v114 = *v261;
        v8[237] = *(_QWORD *)(*v261)->cellPadding;
        v8 = v263;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v198, v262, v200 + 4);
        _os_log_impl((void *)&_mh_execute_header, v199, v197, "[AppStoreQuery] Found %ld apps to recommend", v200, 0xCu);
        swift_slowDealloc(v200, -1, -1);

      }
      if (*(_QWORD *)v114->cellPadding >= 3uLL)
        v201 = 3;
      else
        v201 = *(_QWORD *)v114->cellPadding;
      v202 = type metadata accessor for __ContiguousArrayStorageBase(0);
      swift_bridgeObjectRetain(v114);
      v204 = swift_unknownObjectRetain_n(v203, 2);
      v205 = (CHWorkoutDetailHeartRateTableViewCell *)swift_dynamicCastClass(v204, v202);
      if (!v205)
      {
        swift_bridgeObjectRelease(v114, v206, v207, v208, v209, v210, v211, v212);
        v205 = &_swiftEmptyArrayStorage;
      }
      v213 = *(_QWORD *)v205->cellPadding;
      swift_release(v205);
      if (v213 == v201)
      {
        v228 = (CHWorkoutDetailHeartRateTableViewCell *)swift_dynamicCastClass(v114, v202);
        if (!v228)
        {
          swift_bridgeObjectRelease(v114, v221, v222, v223, v224, v225, v226, v227);
          v228 = &_swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v114, v214, v215, v216, v217, v218, v219, v220);
        v228 = sub_1002962A0((uint64_t)v114, (uint64_t)&v114[1], 0, (2 * v201) | 1);
      }
      v229 = v8[248];
      v230 = v8[247];
      v231 = v8[246];
      swift_bridgeObjectRelease(v114, v221, v222, v223, v224, v225, v226, v227);
      v232 = sub_10013DA0C((uint64_t)v228);
      v233 = swift_release(v228);
      (*(void (**)(uint64_t, uint64_t, __n128))(v230 + 8))(v229, v231, v233);
      swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v8[239], v234, v235, v236, v237, v238, v239, v240);
      swift_task_dealloc(v8[248]);
      return ((uint64_t (*)(CHWorkoutDetailHeartRateTableViewCell *))v8[1])(v232);
    }
    v260 = v104;
    v113 = (__int128 *)(v8 + 74);
    swift_bridgeObjectRetain(v102);
    v265 = v112 - 1;
    v114 = &_swiftEmptyArrayStorage;
    for (i = 1; ; i += 6)
    {
      v117 = v102;
      v118 = *(_OWORD *)&v102[i].super.super.super.super.isa;
      v119 = *(_OWORD *)v102[i].cellPadding;
      v120 = *(_OWORD *)v102[i + 1].cellPadding;
      v113[2] = *(_OWORD *)&v102[i + 1].super.super.super.super.isa;
      v113[3] = v120;
      v121 = *(_OWORD *)&v102[i + 2].super.super.super.super.isa;
      v122 = *(_OWORD *)v102[i + 2].cellPadding;
      v123 = *(_OWORD *)v102[i + 3].cellPadding;
      v113[6] = *(_OWORD *)&v102[i + 3].super.super.super.super.isa;
      v113[7] = v123;
      v113[4] = v121;
      v113[5] = v122;
      v124 = *(_OWORD *)&v102[i + 4].super.super.super.super.isa;
      v125 = *(_OWORD *)v102[i + 4].cellPadding;
      v126 = *(_OWORD *)v102[i + 5].cellPadding;
      v113[10] = *(_OWORD *)&v102[i + 5].super.super.super.super.isa;
      v113[11] = v126;
      v113[8] = v124;
      v113[9] = v125;
      *v113 = v118;
      v113[1] = v119;
      v127 = v263[78];
      v128 = (CHWorkoutDetailHeartRateTableViewCell *)v263[79];
      v129 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain(v128);
      sub_100149B04((uint64_t)v113);
      v130 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v128, v131, v132, v133, v134, v135, v136, v137);
      v263[238] = 0;
      v138 = objc_msgSend(v129, "initWithBundleIdentifier:allowPlaceholder:error:", v130, 0, v262);

      v139 = (void *)v263[238];
      if (v138)
      {
        v140 = v139;
        v141 = objc_msgSend(v138, "applicationState");
        v142 = objc_msgSend(v141, "isInstalled");

        if ((v142 & 1) != 0)
        {
          swift_bridgeObjectRetain(v128);
          v143 = sub_1002D41B4(v127, (uint64_t)v128, (uint64_t)v260);

          swift_bridgeObjectRelease(v128, v144, v145, v146, v147, v148, v149, v150);
          if ((v143 & 1) != 0)
          {
            sub_1001ADA24((uint64_t)v113, v151, v152, v153, v154, v155, v156, v157);
            v102 = v117;
            v116 = v265;
            if (!v265)
              goto LABEL_81;
            goto LABEL_69;
          }
        }
        else
        {

        }
      }
      else
      {
        v158 = v139;
        v159 = _convertNSErrorToError(_:)(v139);

        swift_willThrow(v160);
        swift_errorRelease(v159);
      }
      v102 = v117;
      v116 = v265;
      sub_100149B04((uint64_t)v113);
      if ((swift_isUniquelyReferenced_nonNull_native(v114) & 1) == 0)
        v114 = sub_100140478(0, *(_QWORD *)v114->cellPadding + 1, 1, v114, v164, v165, v166, v167);
      v169 = *(_QWORD *)v114->cellPadding;
      v168 = *(_QWORD *)v114->cellInset;
      if (v169 >= v168 >> 1)
        v114 = sub_100140478((CHWorkoutDetailHeartRateTableViewCell *)(v168 > 1), v169 + 1, 1, v114, v164, v165, v166, v167);
      *(_QWORD *)v114->cellPadding = v169 + 1;
      v170 = &v114[6 * v169];
      v171 = *v113;
      v172 = v113[1];
      v173 = v113[3];
      *(_OWORD *)&v170[2].super.super.super.super.isa = v113[2];
      *(_OWORD *)v170[2].cellPadding = v173;
      *(_OWORD *)&v170[1].super.super.super.super.isa = v171;
      *(_OWORD *)v170[1].cellPadding = v172;
      v174 = v113[4];
      v175 = v113[5];
      v176 = v113[7];
      *(_OWORD *)&v170[4].super.super.super.super.isa = v113[6];
      *(_OWORD *)v170[4].cellPadding = v176;
      *(_OWORD *)&v170[3].super.super.super.super.isa = v174;
      *(_OWORD *)v170[3].cellPadding = v175;
      v177 = v113[8];
      v178 = v113[9];
      v179 = v113[11];
      *(_OWORD *)&v170[6].super.super.super.super.isa = v113[10];
      *(_OWORD *)v170[6].cellPadding = v179;
      *(_OWORD *)&v170[5].super.super.super.super.isa = v177;
      *(_OWORD *)v170[5].cellPadding = v178;
      sub_1001ADA24((uint64_t)v113, v161, v162, v163, v164, v165, v166, v167);
      *v261 = v114;
      if (!v265)
      {
LABEL_81:
        swift_bridgeObjectRelease_n(v102, 2);
        swift_bridgeObjectRelease(v260, v180, v181, v182, v183, v184, v185, v186);
        v8 = v263;
        goto LABEL_83;
      }
LABEL_69:
      v265 = v116 - 1;
    }
  }
  swift_bridgeObjectRetain(v9);
  v33 = 0;
  while (1)
  {
    v41 = &v9->super.super.super.super.isa + v33;
    v42 = (CHWorkoutDetailHeartRateTableViewCell *)v41[4];
    v43 = *(_QWORD *)v42->cellPadding;
    v44 = *(_QWORD *)v32->cellPadding;
    v45 = v44 + v43;
    if (__OFADD__(v44, v43))
      break;
    swift_bridgeObjectRetain(v41[4]);
    isUniquelyReferenced_nonNull_native = (CHWorkoutDetailHeartRateTableViewCell *)swift_isUniquelyReferenced_nonNull_native(v32);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v45 <= *(_QWORD *)v32->cellInset >> 1)
    {
      if (*(_QWORD *)v42->cellPadding)
        goto LABEL_32;
    }
    else
    {
      if (v44 <= v45)
        v54 = v44 + v43;
      else
        v54 = v44;
      v32 = sub_10014059C(isUniquelyReferenced_nonNull_native, v54, 1, v32, v50, v51, v52, v53);
      if (*(_QWORD *)v42->cellPadding)
      {
LABEL_32:
        v55 = *(_QWORD *)v32->cellPadding;
        if ((*(_QWORD *)v32->cellInset >> 1) - v55 < v43)
          goto LABEL_96;
        v56 = (unint64_t)&v32[1] + 208 * v55;
        if ((unint64_t)&v42[1] < v56 + 208 * v43 && v56 < (unint64_t)&v42[1] + 208 * v43)
          return _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
        swift_arrayInitWithCopy(v56);
        if (v43)
        {
          v58 = *(_QWORD *)v32->cellPadding;
          v59 = __OFADD__(v58, v43);
          v60 = v58 + v43;
          if (v59)
            goto LABEL_97;
          *(_QWORD *)v32->cellPadding = v60;
        }
        goto LABEL_22;
      }
    }
    if (v43)
      goto LABEL_95;
LABEL_22:
    ++v33;
    swift_bridgeObjectRelease(v42, v47, v48, v49, v50, v51, v52, v53);
    if (v31 == v33)
    {
      swift_bridgeObjectRelease(v9, v34, v35, v36, v37, v38, v39, v40);
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
}

uint64_t sub_1001AD5A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id v6;
  void *v7;
  unsigned int v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  CHWorkoutDetailHeartRateTableViewCell *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  const char *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 1960);
  sub_1001ADBB0(*(_QWORD *)(v0 + 1992));
  if (*(_QWORD *)(v1 + 112))
  {
    v2 = sub_1001AD9E0();
    v3 = swift_allocError(&type metadata for AppStoreQuery.AppStoreQueryError, v2, 0, 0);
    *v4 = 8;
    swift_willThrow(v3);
    swift_task_dealloc(*(_QWORD *)(v0 + 1984));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    if (v6 && (v7 = v6, v8 = objc_msgSend(v6, "isAppInstallationAllowed"), v7, v8))
    {
      v9 = static os_log_type_t.default.getter(v6);
      v10 = (void *)HKLogActivity;
      v11 = v9;
      if (os_log_type_enabled(HKLogActivity, v9))
      {
        v12 = *(CHWorkoutDetailHeartRateTableViewCell **)(v0 + 1952);
        swift_bridgeObjectRetain_n(v12, 2);
        v13 = v10;
        v14 = swift_slowAlloc(22, -1);
        v15 = swift_slowAlloc(32, -1);
        v37 = v15;
        *(_DWORD *)v14 = 134218242;
        *(_QWORD *)(v0 + 1920) = *(_QWORD *)v12->cellPadding;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1920, v0 + 1928, v14 + 4);
        *(_WORD *)(v14 + 12) = 2080;
        v16 = swift_bridgeObjectRetain(v12);
        v17 = Array.description.getter(v16);
        v19 = (CHWorkoutDetailHeartRateTableViewCell *)v18;
        swift_bridgeObjectRelease(v12, v18, v20, v21, v22, v23, v24, v25);
        *(_QWORD *)(v0 + 1928) = sub_10003E8EC(v17, (unint64_t)v19, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1928, v0 + 1936, v14 + 14);
        swift_bridgeObjectRelease_n(v12, 2);
        swift_bridgeObjectRelease(v19, v26, v27, v28, v29, v30, v31, v32);
        _os_log_impl((void *)&_mh_execute_header, v13, v11, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      v33 = *(_BYTE *)(v0 + 2048);
      v34 = (_QWORD *)swift_task_alloc(dword_1008248FC);
      *(_QWORD *)(v0 + 2008) = v34;
      *v34 = v0;
      v34[1] = sub_1001AC918;
      return sub_1001A92A0(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 1952), v33 & 1);
    }
    else
    {
      v35 = static os_log_type_t.default.getter(v6);
      v36 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "[AppStoreQuery] shouldOfferAppStoreSuggestions is false, skipping AppStore suggestions", 86, 2, &_swiftEmptyArrayStorage);

      swift_task_dealloc(*(_QWORD *)(v0 + 1984));
      return (*(uint64_t (**)(CHWorkoutDetailHeartRateTableViewCell *))(v0 + 8))(&_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_1001AD90C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 1984));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AD96C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1976) + 8))(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 1968));
  swift_task_dealloc(*(_QWORD *)(v0 + 1984));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001AD9E0()
{
  unint64_t result;

  result = qword_100824AA0;
  if (!qword_100824AA0)
  {
    result = swift_getWitnessTable(&unk_10062A5FC, &type metadata for AppStoreQuery.AppStoreQueryError);
    atomic_store(result, &qword_100824AA0);
  }
  return result;
}

uint64_t sub_1001ADA24(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  CHWorkoutDetailHeartRateTableViewCell *v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *(CHWorkoutDetailHeartRateTableViewCell **)(a1 + 8);
  v10 = *(CHWorkoutDetailHeartRateTableViewCell **)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 80);
  v37 = *(_QWORD *)(a1 + 72);
  v38 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  v36 = *(_QWORD *)(a1 + 120);
  v34 = *(_OWORD *)(a1 + 144);
  v35 = *(_OWORD *)(a1 + 128);
  v33 = *(_OWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRelease(*(CHWorkoutDetailHeartRateTableViewCell **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v10, v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(v9, v25, v26, v27, v28, v29, v30, v31);
  sub_10015F158(v38, v37, v11, v12, v13, v14, v15, v36, v35, *((uint64_t *)&v35 + 1), v34, *((uint64_t *)&v34 + 1), v33, *((uint64_t *)&v33 + 1), v16, v17);
  return a1;
}

uint64_t sub_1001ADAF8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return ((_DWORD)v1 - 1) & ~(((int)v1 - 1) >> 31);
}

uint64_t sub_1001ADB14(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

double sub_1001ADB38(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t *sub_1001ADB58(uint64_t *a1)
{
  sub_100149BD8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

unint64_t sub_1001ADBB0(unint64_t result)
{
  if (result >= 2)
    return swift_release(result);
  return result;
}

unsigned __int8 *sub_1001ADBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unsigned __int8 *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v27, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v27 = v6;
    v28 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v27;
    goto LABEL_7;
  }
  v6 = sub_1001ADF20(v4, v5);
  v11 = (unint64_t)v10;
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v7, v10, v12, v13, v14, v15, v16, v17);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v18 = sub_1001ADCA4(v8, v9, a3);
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v7, v19, v20, v21, v22, v23, v24, v25);
  return v18;
}

unsigned __int8 *sub_1001ADCA4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001ADF20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1001ADF9C(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1001ADF9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001AE0E0(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10003F074(v12, 0);
      v5 = sub_1001AE1CC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1001AE0E0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1002D5290(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1002D5290(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001AE1CC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1002D5290(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1002D5290(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001AE3DC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AE400()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AE42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100824AAC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  v3[5] = v2;
  return swift_task_switch(sub_1001A8A5C, 0, 0);
}

void sub_1001AE48C(uint64_t a1)
{
  uint64_t v1;

  sub_1001AACAC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001AE494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for URLRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100047110(&qword_100824AC0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001AE54C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for URLRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_100047110(&qword_100824AC0) - 8) + 80);
  return sub_1001AB008(a1, a2, v2 + v6, v2 + ((v7 + v8) & ~v8));
}

unint64_t sub_1001AE5C8()
{
  unint64_t result;

  result = qword_100824AD0;
  if (!qword_100824AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditorialItemsList, &type metadata for EditorialItemsList);
    atomic_store(result, (unint64_t *)&qword_100824AD0);
  }
  return result;
}

uint64_t sub_1001AE60C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_1001AE650(uint64_t a1)
{
  uint64_t v1;

  sub_1001A99E8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001AE658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_100047110(&qword_100824AE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001AE6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100047110(&qword_100824AE8) - 8) + 80);
  return sub_1001A9B2C(a1, a2, *(CHWorkoutDetailHeartRateTableViewCell **)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t getEnumTagSinglePayload for AppStoreQuery.AppStoreQueryError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStoreQuery.AppStoreQueryError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1001AE800 + 4 * byte_10062A34F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1001AE834 + 4 * byte_10062A34A[v4]))();
}

uint64_t sub_1001AE834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AE83C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AE844);
  return result;
}

uint64_t sub_1001AE850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AE858);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1001AE85C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AE864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreQuery.AppStoreQueryError()
{
  return &type metadata for AppStoreQuery.AppStoreQueryError;
}

unint64_t sub_1001AE884()
{
  unint64_t result;

  result = qword_100824AF8;
  if (!qword_100824AF8)
  {
    result = swift_getWitnessTable(&unk_10062A5D4, &type metadata for AppStoreQuery.AppStoreQueryError);
    atomic_store(result, (unint64_t *)&qword_100824AF8);
  }
  return result;
}

id sub_1001AE8CC(uint64_t a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v6;
  double v7;
  id v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double MaxX;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double Width;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double MaxY;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v14 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  if ((a2 & 1) == 0)
  {
    v19 = CGRectGetMaxY(*(CGRect *)&v15) / 3.0;
    if (qword_10081DD70 != -1)
LABEL_13:
      swift_once(&qword_10081DD70, sub_1000071BC);
    v20 = *(double *)&qword_10086AA00;
    v21 = UIRoundToScale(v19, *(double *)&qword_10086AA00);
    v22 = UIRoundToScale(0.0, v20);
    objc_msgSend(v14, "moveToPoint:", v22, UIRoundToScale(v21, v20));
    v38.origin.x = a3;
    v38.origin.y = a4;
    v38.size.width = a5;
    v38.size.height = a6;
    MaxX = CGRectGetMaxX(v38);
    v24 = UIRoundToScale(MaxX, v20);
    objc_msgSend(v14, "addLineToPoint:", v24, UIRoundToScale(v21, v20));
    v25 = v21 + v21;
    v26 = UIRoundToScale(0.0, v20);
    objc_msgSend(v14, "moveToPoint:", v26, UIRoundToScale(v25, v20));
    v39.origin.x = a3;
    v39.origin.y = a4;
    v39.size.width = a5;
    v39.size.height = a6;
    v27 = CGRectGetMaxX(v39);
    v28 = UIRoundToScale(v27, v20);
    objc_msgSend(v14, "addLineToPoint:", v28, UIRoundToScale(v25, v20));
    return v14;
  }
  Width = CGRectGetWidth(*(CGRect *)&v15);
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else if (a1 - 1 >= 1)
  {
    v6 = Width;
    v7 = 24.0;
    if (qword_10081DD70 == -1)
      goto LABEL_8;
    goto LABEL_16;
  }
  __break(1u);
LABEL_16:
  swift_once(&qword_10081DD70, sub_1000071BC);
LABEL_8:
  v31 = *(double *)&qword_10086AA00;
  v32 = 2;
  v33 = v6 / v7;
  while (1)
  {
    v34 = v32 - 1;
    v35 = UIRoundToScale(v33 * (double)(v32 - 1), v31);
    v36 = UIRoundToScale(v35, v31);
    objc_msgSend(v14, "moveToPoint:", v36, UIRoundToScale(0.0, v31));
    v40.origin.x = a3;
    v40.origin.y = a4;
    v40.size.width = a5;
    v40.size.height = a6;
    MaxY = CGRectGetMaxY(v40);
    v19 = UIRoundToScale(v35, v31);
    objc_msgSend(v14, "addLineToPoint:", v19, UIRoundToScale(MaxY, v31));
    if (a1 == v32)
      return v14;
    ++v32;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
  }
}

void *sub_1001AEBA0(char a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double MaxX;
  double MaxY;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v14 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v15 = v14;
  if ((a2 & 1) != 0)
  {
    objc_msgSend(v14, "moveToPoint:", 0.0, 0.0);
    v31.origin.x = a3;
    v31.origin.y = a4;
    v31.size.width = a5;
    v31.size.height = a6;
    objc_msgSend(v15, "addLineToPoint:", 0.0, CGRectGetMaxY(v31));
    v32.origin.x = a3;
    v32.origin.y = a4;
    v32.size.width = a5;
    v32.size.height = a6;
    objc_msgSend(v15, "moveToPoint:", CGRectGetMaxX(v32), 0.0);
    v33.origin.x = a3;
    v33.origin.y = a4;
    v33.size.width = a5;
    v33.size.height = a6;
    MaxX = CGRectGetMaxX(v33);
    v34.origin.x = a3;
    v34.origin.y = a4;
    v34.size.width = a5;
    v34.size.height = a6;
    MaxY = CGRectGetMaxY(v34);
    goto LABEL_7;
  }
  if (qword_10081DD70 != -1)
    swift_once(&qword_10081DD70, sub_1000071BC);
  v16 = *(double *)&qword_10086AA00;
  v17 = UIRoundToScale(0.0, *(double *)&qword_10086AA00);
  objc_msgSend(v15, "moveToPoint:", v17, UIRoundToScale(0.0, v16));
  v27.origin.x = a3;
  v27.origin.y = a4;
  v27.size.width = a5;
  v27.size.height = a6;
  v18 = CGRectGetMaxX(v27);
  v19 = UIRoundToScale(v18, v16);
  objc_msgSend(v15, "addLineToPoint:", v19, UIRoundToScale(0.0, v16));
  if ((a1 & 1) != 0)
  {
    v28.origin.x = a3;
    v28.origin.y = a4;
    v28.size.width = a5;
    v28.size.height = a6;
    v20 = CGRectGetMaxY(v28) - a7;
    v21 = UIRoundToScale(0.0, v16);
    objc_msgSend(v15, "moveToPoint:", v21, UIRoundToScale(v20, v16));
    v29.origin.x = a3;
    v29.origin.y = a4;
    v29.size.width = a5;
    v29.size.height = a6;
    v22 = CGRectGetMaxX(v29);
    v30.origin.x = a3;
    v30.origin.y = a4;
    v30.size.width = a5;
    v30.size.height = a6;
    v23 = CGRectGetMaxY(v30) - a7;
    MaxX = UIRoundToScale(v22, v16);
    MaxY = UIRoundToScale(v23, v16);
LABEL_7:
    objc_msgSend(v15, "addLineToPoint:", MaxX, MaxY);
  }
  return v15;
}

_QWORD *sub_1001AEE08@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

double sub_1001AEE28()
{
  double result;

  if (qword_10081DD78 != -1)
    swift_once(&qword_10081DD78, sub_100442F3C);
  result = *(double *)&qword_10086AA08 + *(double *)&qword_10086AA08;
  *(double *)&qword_100824B00 = *(double *)&qword_10086AA08 + *(double *)&qword_10086AA08;
  return result;
}

char *sub_1001AEE74(char a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char *v14;
  void *v15;
  uint64_t v16;
  double v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void *v25;
  void *v26;
  double v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  __n128 v33;
  void *v34;
  objc_super v36;

  v3 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainGridLayer;
  v4 = objc_allocWithZone((Class)CAShapeLayer);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayGridLayer;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v7 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainStrokeColor;
  sub_10013AD0C();
  *(UIColor *)&v5[v7] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28235, 0.28235, 0.28235, 1.0);
  v8 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayStrokeColor;
  *(UIColor *)&v5[v8] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  v9 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineDashPattern;
  v10 = sub_100047110(&qword_100821510);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100620BC0;
  if (qword_10081D6A0 != -1)
    swift_once(&qword_10081D6A0, sub_1001AEE28);
  v12 = qword_100824B00;
  v13 = *(double *)&qword_100824B00 * 4.0;
  *(_QWORD *)(v11 + 32) = qword_100824B00;
  *(double *)(v11 + 40) = v13;
  *(_QWORD *)&v5[v9] = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineWidth] = v12;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_nHoursInADay] = 24;
  v5[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_drawsBottomLine] = 0;
  v5[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_gridType] = a1 & 1;

  v36.receiver = v5;
  v36.super_class = (Class)type metadata accessor for ChartAxisGridLayer();
  v14 = (char *)objc_msgSendSuper2(&v36, "init");
  v15 = *(void **)&v14[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainGridLayer];
  v16 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineWidth;
  v17 = *(double *)&v14[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineWidth];
  v18 = v14;
  v19 = v15;
  objc_msgSend(v19, "setLineWidth:", v17);
  v20 = *(id *)&v18[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainStrokeColor];
  v21 = objc_msgSend(v20, "CGColor");
  objc_msgSend(v19, "setStrokeColor:", v21);

  v22 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineDashPattern;
  v23 = *(_QWORD *)&v18[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineDashPattern];
  v24 = swift_bridgeObjectRetain(v23);
  v25 = (void *)CAShapeLayer.withLineDashPattern(_:)(v24);

  objc_msgSend(v18, "addSublayer:", v25, swift_bridgeObjectRelease(v23).n128_f64[0]);
  v26 = *(void **)&v18[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayGridLayer];
  v27 = *(double *)&v14[v16];
  v28 = v18;
  v29 = v26;
  objc_msgSend(v29, "setLineWidth:", v27);
  v30 = *(id *)&v28[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayStrokeColor];
  v31 = objc_msgSend(v30, "CGColor");
  objc_msgSend(v29, "setStrokeColor:", v31);

  v32 = *(_QWORD *)&v18[v22];
  v33 = swift_bridgeObjectRetain(v32);
  v34 = (void *)CAShapeLayer.withLineDashPattern(_:)(v33);

  objc_msgSend(v28, "addSublayer:", v34, swift_bridgeObjectRelease(v32).n128_f64[0]);
  return v28;
}

char *sub_1001AF198(_QWORD *a1)
{
  void *v1;
  objc_class *v3;
  id v4;
  void *v5;
  char v6;
  id v7;
  char *v8;
  uint64_t ObjectType;
  void *v11;
  _BYTE v12[32];

  sub_10003E9BC((uint64_t)a1, (uint64_t)v12);
  v3 = (objc_class *)type metadata accessor for ChartAxisGridLayer();
  v4 = v1;
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
  {
    v5 = v11;
    v6 = *((_BYTE *)v11 + OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_gridType);

  }
  else
  {

    v6 = 0;
  }
  v7 = objc_allocWithZone(v3);
  v8 = sub_1001AEE74(v6);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  ObjectType = swift_getObjectType(v4);
  swift_deallocPartialClassInstance(v4, ObjectType, 73, 7);
  return v8;
}

uint64_t sub_1001AF2B8(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainGridLayer;
  v5 = objc_allocWithZone((Class)CAShapeLayer);
  v6 = v2;
  *(_QWORD *)&v2[v4] = objc_msgSend(v5, "init");
  v7 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayGridLayer;
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v8 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainStrokeColor;
  sub_10013AD0C();
  *(UIColor *)&v6[v8] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28235, 0.28235, 0.28235, 1.0);
  v9 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayStrokeColor;
  *(UIColor *)&v6[v9] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  v10 = OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineDashPattern;
  v11 = sub_100047110(&qword_100821510);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100620BC0;
  if (qword_10081D6A0 != -1)
    swift_once(&qword_10081D6A0, sub_1001AEE28);
  v13 = qword_100824B00;
  v14 = *(double *)&qword_100824B00 * 4.0;
  *(_QWORD *)(v12 + 32) = qword_100824B00;
  *(double *)(v12 + 40) = v14;
  *(_QWORD *)&v6[v10] = v12;

  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineWidth] = v13;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_nHoursInADay] = 24;
  v6[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_drawsBottomLine] = 0;

  v15 = *(_QWORD *)&v6[v10];
  swift_bridgeObjectRelease(v15);
  v16 = type metadata accessor for ChartAxisGridLayer();
  swift_deallocPartialClassInstance(v6, v16, 73, 7);
  return 0;
}

void sub_1001AF4BC()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  char v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  id v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  objc_super v18;

  v1 = v0;
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for ChartAxisGridLayer();
  objc_msgSendSuper2(&v18, "layoutSublayers");
  v2 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_mainGridLayer];
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "setFrame:");
  v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_overlayGridLayer];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v3, "setFrame:");
  v4 = v1[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_gridType];
  objc_msgSend(v1, "bounds");
  v9 = sub_1001AE8CC(*(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_nHoursInADay], v4, v5, v6, v7, v8);
  objc_msgSend(v1, "bounds");
  v14 = sub_1001AEBA0(v1[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_drawsBottomLine], v4, v10, v11, v12, v13, *(double *)&v1[OBJC_IVAR____TtC10FitnessApp18ChartAxisGridLayer_lineWidth]);
  v15 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v15, "begin");
  objc_msgSend(v15, "setDisableActions:", 1);
  v16 = objc_msgSend(v9, "CGPath");
  objc_msgSend(v2, "setPath:", v16);

  v17 = objc_msgSend(v14, "CGPath");
  objc_msgSend(v3, "setPath:", v17);

  objc_msgSend(v15, "commit");
}

id sub_1001AF6C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChartAxisGridLayer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ChartAxisGridLayer()
{
  return objc_opt_self(_TtC10FitnessApp18ChartAxisGridLayer);
}

uint64_t storeEnumTagSinglePayload for ChartAxisGridLayer.GridType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001AF7CC + 4 * byte_10062A645[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001AF800 + 4 * byte_10062A640[v4]))();
}

uint64_t sub_1001AF800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AF810);
  return result;
}

uint64_t sub_1001AF81C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AF824);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001AF828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisGridLayer.GridType()
{
  return &type metadata for ChartAxisGridLayer.GridType;
}

unint64_t sub_1001AF850()
{
  unint64_t result;

  result = qword_100824B78;
  if (!qword_100824B78)
  {
    result = swift_getWitnessTable(&unk_10062A6F4, &type metadata for ChartAxisGridLayer.GridType);
    atomic_store(result, (unint64_t *)&qword_100824B78);
  }
  return result;
}

uint64_t destroy for SleepingSampleMetricChartView(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for SleepingSampleMetricChartView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = a2[5];
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for SleepingSampleMetricChartView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *((_OWORD *)a2 + 1);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  *((_OWORD *)a1 + 1) = v8;
  v9 = a2[5];
  v10 = a1[5];
  a1[5] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 initializeWithTake for SleepingSampleMetricChartView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SleepingSampleMetricChartView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleMetricChartView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleMetricChartView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleMetricChartView()
{
  return &type metadata for SleepingSampleMetricChartView;
}

uint64_t sub_1001AFADC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE3B8, 1);
}

_QWORD *sub_1001AFAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for BaselineRelativeValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10012180C(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10012180C(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1001AFC5C(uint64_t a1)
{
  return sub_1001AFCA8(0.419607843, 0.650980392, 0.945098039, a1, &qword_10086A008);
}

uint64_t sub_1001AFC84(uint64_t a1)
{
  return sub_1001AFCA8(0.909803922, 0.509803922, 0.949019608, a1, &qword_10086A010);
}

uint64_t sub_1001AFCA8(double a1, double a2, double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v12 + 104))(v11, enum case for Color.RGBColorSpace.displayP3(_:));
  result = Color.init(_:red:green:blue:opacity:)(v11, a1, a2, a3, 1.0);
  *a5 = result;
  return result;
}

double sub_1001AFD50@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  double result;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(_BYTE *)(v1 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v10 = sub_1001AFDD0(v3, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

_QWORD *sub_1001AFDD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  double v5;
  double v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  double *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  double v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  double *v55;
  char *v56;
  int *v57;
  void (*v58)(char *, double *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(unint64_t *, char *, uint64_t, __n128);
  int v78;
  double v79;
  __n128 v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double *v85;
  int *v86;
  double *v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  double v92;
  double v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  double v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  double *v104;
  int *v105;
  int *v106;
  double *v107;
  char *v108;
  char *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  uint64_t v112;
  double *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  double *v120;
  double v121;
  double v122;

  v121 = *(double *)&a2;
  v122 = *(double *)&a3;
  v119 = a1;
  v9 = type metadata accessor for SleepingSampleBaselineBand.Configuration(0);
  v118 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (double *)((char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v120 = (double *)((char *)&v100 - v13);
  v14 = type metadata accessor for BaselineRelativeValue(0);
  v112 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (unint64_t *)((char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = sub_100047110(&qword_100824B80);
  v17 = __chkstk_darwin(v116);
  v117 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v113 = (double *)((char *)&v100 - v19);
  v114 = sub_100047110(&qword_100824B88);
  v20 = __chkstk_darwin(v114);
  v115 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v100 - v22;
  v24 = sub_100047110((uint64_t *)&unk_100828370);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v100 - v28;
  v30 = type metadata accessor for Date(0);
  v31 = *(double *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v33 = __chkstk_darwin(v32);
  v34 = __chkstk_darwin(v33);
  __chkstk_darwin(v34);
  if ((a4 & 1) != 0)
    return _swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(a5 + 16);
  if (!v40)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v31 + 56))(v29, 1, 1);
    goto LABEL_7;
  }
  v106 = v39;
  v107 = v38;
  v108 = v37;
  v111 = (char *)&v100 - v36;
  v109 = v23;
  v105 = (int *)v9;
  v104 = v12;
  v41 = a5
      + ((*(unsigned __int8 *)(*(_QWORD *)&v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)&v31 + 80));
  v42 = v35;
  v110 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v31 + 16);
  v110(v29, v41, v35);
  v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)&v31 + 56);
  v43(v29, 0, 1, v42);
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v31 + 48);
  if (v44(v29, 1, v42) == 1)
  {
LABEL_7:
    v45 = (uint64_t)v29;
    goto LABEL_8;
  }
  v103 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v31 + 32);
  v103(v111, v29, v42);
  v110(v27, v41 + *(_QWORD *)(*(_QWORD *)&v31 + 72) * (v40 - 1), v42);
  v43(v27, 0, 1, v42);
  if (v44(v27, 1, v42) != 1)
  {
    v103(v108, v27, v42);
    v48 = Date.timeIntervalSince(_:)(v111) / 28.0;
    v49 = v107;
    v51 = Date.addingTimeInterval(_:)(v50, v48 * 0.5);
    v52 = v106;
    Date.addingTimeInterval(_:)(v51, -(v48 * 0.5));
    v53 = sub_1001B07B8();
    v46 = v42;
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v52, v49, v42, v53) & 1) != 0)
    {
      v5 = v121;
      v6 = v122;
      v54 = v116;
      v55 = v113;
      v56 = (char *)v113 + *(int *)(v116 + 48);
      v57 = v52;
      v58 = (void (*)(char *, double *, uint64_t))v110;
      v110((char *)v113, (uint64_t)v57, v42);
      v102 = v56;
      v58(v56, v49, v42);
      v59 = v117;
      v60 = &v117[*(int *)(v54 + 48)];
      v58(v117, v55, v42);
      v58(v60, (double *)v56, v42);
      v61 = (uint64_t)v115;
      v62 = v103;
      v103(v115, v59, v42);
      v31 = *(double *)(*(_QWORD *)&v31 + 8);
      (*(void (**)(char *, uint64_t))&v31)(v60, v42);
      v63 = &v59[*(int *)(v54 + 48)];
      v62(v59, (char *)v55, v42);
      v62(v63, v102, v42);
      v62((char *)(v61 + *(int *)(v114 + 36)), v63, v42);
      v117 = (char *)v42;
      (*(void (**)(char *, uint64_t))&v31)(v59, v42);
      v42 = (uint64_t)v109;
      sub_1001B0800(v61, (uint64_t)v109);
      v64 = sub_100047110(&qword_100822210);
      v65 = *(unsigned __int8 *)(v118 + 80);
      v66 = (v65 + 32) & ~v65;
      v118 = *(_QWORD *)(v118 + 72);
      v46 = swift_allocObject(v64, v66 + v118, v65 | 7);
      *(_OWORD *)(v46 + 16) = xmmword_100622F90;
      v116 = v66;
      v49 = (double *)(v46 + v66);
      v52 = v105;
      if (qword_10081D6A8 == -1)
        goto LABEL_13;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_10081D6A8, sub_1001AFC5C);
LABEL_13:
    v67 = Color.opacity(_:)(0.1);
    v68 = v122;
    *v49 = v121;
    v49[1] = v68;
    sub_1001B0848(v42, (uint64_t)v49 + v52[5]);
    *(_QWORD *)((char *)v49 + v52[6]) = v67;
    *(double *)((char *)v49 + v52[7]) = 4.0;
    v69 = v119;
    swift_bridgeObjectRetain(v119);
    v71 = sub_1001AFAEC(v70);
    v72 = swift_bridgeObjectRelease(v69);
    v73 = v71[2];
    v101 = v6;
    if (v73)
    {
      v122 = v31;
      v74 = v112;
      v75 = (char *)v71
          + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
      v76 = *(_QWORD *)(v112 + 72);
      v77 = *(void (**)(unint64_t *, char *, uint64_t, __n128))(v112 + 16);
      v78 = enum case for BaselineRelativeValue.determinate(_:);
      v79 = v5;
      v77(v16, v75, v14, v72);
      while (1)
      {
        if ((*(unsigned int (**)(unint64_t *, uint64_t))(v74 + 88))(v16, v14) == v78)
        {
          (*(void (**)(unint64_t *, uint64_t))(v74 + 96))(v16, v14);
          v80.n128_u64[0] = *v16;
          if (*(double *)v16 >= v5)
          {
            if (v6 < v80.n128_f64[0])
              v6 = *(double *)v16;
          }
          else
          {
            v5 = *(double *)v16;
          }
        }
        else
        {
          (*(void (**)(unint64_t *, uint64_t))(v74 + 8))(v16, v14);
        }
        v75 += v76;
        if (!--v73)
          break;
        v77(v16, v75, v14, v80);
      }
      swift_bridgeObjectRelease(v71);
      v31 = v122;
    }
    else
    {
      swift_bridgeObjectRelease(v71);
      v79 = v5;
    }
    v81 = fabs(v5 * 100.0);
    v82 = fmod(v81, 50.0);
    v122 = v6 * 100.0;
    v83 = fmod(v6 * 100.0, 50.0);
    v84 = v79 + -0.1;
    v85 = v104;
    v86 = v105;
    v87 = v120;
    if (v5 >= v84)
    {
LABEL_32:
      v92 = v101 + 0.1;
      if (v101 + 0.1 >= v6)
      {
        v98 = (uint64_t)v109;
LABEL_39:
        sub_10001BE90(v98, &qword_100824B88);
        v99 = v117;
        (*(void (**)(int *, char *))&v31)(v106, v117);
        (*(void (**)(double *, char *))&v31)(v107, v99);
        (*(void (**)(char *, char *))&v31)(v108, v99);
        (*(void (**)(char *, char *))&v31)(v111, v99);
        return (_QWORD *)v46;
      }
      v93 = (v122 + 50.0 - v83) / 100.0;
      if (v92 > v93)
      {
        __break(1u);
      }
      else
      {
        sub_1001B0848((uint64_t)v109, (uint64_t)v85 + v86[5]);
        if (qword_10081D6B0 == -1)
        {
LABEL_35:
          v94 = Color.opacity(_:)(0.1);
          *v85 = v92;
          v85[1] = v93;
          *(_QWORD *)((char *)v85 + v86[6]) = v94;
          *(double *)((char *)v85 + v86[7]) = 4.0;
          v96 = *(_QWORD *)(v46 + 16);
          v95 = *(_QWORD *)(v46 + 24);
          if (v96 >= v95 >> 1)
            v46 = sub_1001406D8(v95 > 1, v96 + 1, 1, v46);
          v97 = (uint64_t)v109;
          *(_QWORD *)(v46 + 16) = v96 + 1;
          sub_1001B0890((uint64_t)v85, v46 + v116 + v96 * v118);
          v98 = v97;
          goto LABEL_39;
        }
      }
      swift_once(&qword_10081D6B0, sub_1001AFC84);
      goto LABEL_35;
    }
    v121 = v83;
    v88 = (v81 + 50.0 - v82) / -100.0;
    if (v88 > v84)
    {
      __break(1u);
    }
    else
    {
      sub_1001B0848((uint64_t)v109, (uint64_t)v120 + v105[5]);
      if (qword_10081D6B0 == -1)
      {
LABEL_29:
        v89 = Color.opacity(_:)(0.1);
        *v87 = v88;
        v87[1] = v84;
        *(_QWORD *)((char *)v87 + v86[6]) = v89;
        *(double *)((char *)v87 + v86[7]) = 4.0;
        v91 = *(_QWORD *)(v46 + 16);
        v90 = *(_QWORD *)(v46 + 24);
        if (v91 >= v90 >> 1)
          v46 = sub_1001406D8(v90 > 1, v91 + 1, 1, v46);
        *(_QWORD *)(v46 + 16) = v91 + 1;
        sub_1001B0890((uint64_t)v87, v46 + v116 + v91 * v118);
        v83 = v121;
        goto LABEL_32;
      }
    }
    swift_once(&qword_10081D6B0, sub_1001AFC84);
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v31 + 8))(v111, v42);
  v45 = (uint64_t)v27;
LABEL_8:
  sub_10001BE90(v45, (uint64_t *)&unk_100828370);
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1001B07B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008274E0;
  if (!qword_1008274E0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1008274E0);
  }
  return result;
}

uint64_t sub_1001B0800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824B88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B0848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824B88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B0890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleBaselineBand.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001B08D8()
{
  unint64_t result;

  result = qword_100824B90;
  if (!qword_100824B90)
  {
    result = swift_getWitnessTable(&unk_100622EA0, &type metadata for SleepingSampleMetricLineChart);
    atomic_store(result, (unint64_t *)&qword_100824B90);
  }
  return result;
}

unint64_t sub_1001B0920()
{
  unint64_t result;

  result = qword_100824B98;
  if (!qword_100824B98)
  {
    result = swift_getWitnessTable(&unk_10062A7F8, &type metadata for ResumeMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824B98);
  }
  return result;
}

unint64_t sub_1001B0968()
{
  unint64_t result;

  result = qword_100824BA0;
  if (!qword_100824BA0)
  {
    result = swift_getWitnessTable(&unk_10062A820, &type metadata for ResumeMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BA0);
  }
  return result;
}

unint64_t sub_1001B09B0()
{
  unint64_t result;

  result = qword_100824BA8;
  if (!qword_100824BA8)
  {
    result = swift_getWitnessTable(&unk_10062A8B0, &type metadata for ResumeMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BA8);
  }
  return result;
}

unint64_t sub_1001B09F8()
{
  unint64_t result;

  result = qword_100824BB0;
  if (!qword_100824BB0)
  {
    result = swift_getWitnessTable(&unk_10062A8D8, &type metadata for ResumeMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BB0);
  }
  return result;
}

uint64_t sub_1001B0A3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE484, 1);
}

uint64_t sub_1001B0A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B1618(a1, a2, a3, (uint64_t (*)(void))sub_1001B0968);
}

uint64_t sub_1001B0A58(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE v33[12];
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a1;
  v5 = type metadata accessor for DataLinkCommand(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v33[-v10];
  v12 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static WOLog.dataLink.getter(v13);
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v16(v11, a3, v5);
  swift_errorRetain(a2);
  v17 = swift_errorRetain(a2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(28, -1);
    v36 = v12;
    v22 = v21;
    v35 = swift_slowAlloc(64, -1);
    v40 = v35;
    *(_DWORD *)v22 = 136315650;
    v34 = v20;
    v16(v9, (uint64_t)v11, v5);
    v23 = String.init<A>(describing:)(v9, v5);
    v25 = v24;
    v39 = sub_10003E8EC(v23, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4);
    v26 = swift_bridgeObjectRelease(v25);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v6 + 8))(v11, v5, v26);
    *(_WORD *)(v22 + 12) = 1024;
    LODWORD(v39) = v37 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v22 + 14);
    *(_WORD *)(v22 + 18) = 2080;
    v39 = a2;
    v27 = sub_100047110(&qword_10081F7B8);
    v28 = Optional.description.getter(v27);
    v30 = v29;
    v39 = sub_10003E8EC(v28, v29, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 20);
    swift_bridgeObjectRelease(v30);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v34, "Sent %s: %{BOOL}d, %s", (uint8_t *)v22, 0x1Cu);
    v31 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v38 + 8))(v15, v36);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v38 + 8))(v15, v12);
  }
}

uint64_t sub_1001B0D58(uint64_t a1)
{
  return sub_1001B167C(a1, qword_10086A020, 0xD000000000000017, 0x800000010068DEC0);
}

uint64_t sub_1001B0D7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for DataLinkCommand(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[5] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v5);
  v1[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001B0DF0, 0, 0);
}

uint64_t sub_1001B0DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 64) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001B0E58, v2, v3);
}

uint64_t sub_1001B0E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_release(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v3 + 104))(v1, enum case for DataLinkCommand.resume(_:), v2, v4);
  if (qword_10081DAD8 != -1)
    swift_once(&qword_10081DAD8, sub_1000061F8);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(qword_10086A610 + OBJC_IVAR___WODataLinkMonitor_client);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v9);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10078C308, v12 + v7, v11 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13 + v12, v5, v9);
  swift_retain(v10);
  dispatch thunk of DataLinkClient.send(command:acknowledged:)(v6, sub_1001B19D8, v13);
  swift_release(v10);
  swift_release(v13);
  static IntentResult.result<>()(v14);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B0FB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B13F8(&qword_10081D6C0, (uint64_t)qword_10086A020, (uint64_t)sub_1001B0D58, a1);
}

uint64_t sub_1001B0FD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100824C24);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000EA380;
  return sub_1001B0D7C(a1);
}

uint64_t sub_1001B1020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B0968();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1001B104C()
{
  unint64_t result;

  result = qword_100824BC0;
  if (!qword_100824BC0)
  {
    result = swift_getWitnessTable(&unk_10062A91C, &type metadata for PauseMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BC0);
  }
  return result;
}

unint64_t sub_1001B1094()
{
  unint64_t result;

  result = qword_100824BC8;
  if (!qword_100824BC8)
  {
    result = swift_getWitnessTable(&unk_10062A944, &type metadata for PauseMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BC8);
  }
  return result;
}

unint64_t sub_1001B10DC()
{
  unint64_t result;

  result = qword_100824BD0;
  if (!qword_100824BD0)
  {
    result = swift_getWitnessTable(&unk_10062A9D4, &type metadata for PauseMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BD0);
  }
  return result;
}

unint64_t sub_1001B1124()
{
  unint64_t result;

  result = qword_100824BD8;
  if (!qword_100824BD8)
  {
    result = swift_getWitnessTable(&unk_10062A9FC, &type metadata for PauseMirroredWorkout);
    atomic_store(result, (unint64_t *)&qword_100824BD8);
  }
  return result;
}

uint64_t sub_1001B1168(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE45C, 1);
}

uint64_t sub_1001B1178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B1618(a1, a2, a3, (uint64_t (*)(void))sub_1001B1094);
}

uint64_t sub_1001B1184(uint64_t a1)
{
  return sub_1001B167C(a1, qword_10086A040, 0xD000000000000016, 0x800000010068DEA0);
}

uint64_t sub_1001B11A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for DataLinkCommand(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[5] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v5);
  v1[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001B121C, 0, 0);
}

uint64_t sub_1001B121C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 64) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001B1284, v2, v3);
}

uint64_t sub_1001B1284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_release(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v3 + 104))(v1, enum case for DataLinkCommand.pause(_:), v2, v4);
  if (qword_10081DAD8 != -1)
    swift_once(&qword_10081DAD8, sub_1000061F8);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(qword_10086A610 + OBJC_IVAR___WODataLinkMonitor_client);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v9);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10078C2E0, v12 + v7, v11 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13 + v12, v5, v9);
  swift_retain(v10);
  dispatch thunk of DataLinkClient.send(command:acknowledged:)(v6, sub_1001B19D8, v13);
  swift_release(v10);
  swift_release(v13);
  static IntentResult.result<>()(v14);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B13DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B13F8(&qword_10081D6D0, (uint64_t)qword_10086A040, (uint64_t)sub_1001B1184, a1);
}

uint64_t sub_1001B13F8@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = sub_10003CE9C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1001B1464(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100824C1C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000EA380;
  return sub_1001B11A8(a1);
}

uint64_t sub_1001B14B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B1094();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1001B14E0()
{
  unint64_t result;

  result = qword_100824BE8;
  if (!qword_100824BE8)
  {
    result = swift_getWitnessTable(&unk_10062AA40, &type metadata for MarkMirroredSegment);
    atomic_store(result, (unint64_t *)&qword_100824BE8);
  }
  return result;
}

unint64_t sub_1001B1528()
{
  unint64_t result;

  result = qword_100824BF0;
  if (!qword_100824BF0)
  {
    result = swift_getWitnessTable(&unk_10062AA68, &type metadata for MarkMirroredSegment);
    atomic_store(result, (unint64_t *)&qword_100824BF0);
  }
  return result;
}

unint64_t sub_1001B1570()
{
  unint64_t result;

  result = qword_100824BF8;
  if (!qword_100824BF8)
  {
    result = swift_getWitnessTable(&unk_10062AAF8, &type metadata for MarkMirroredSegment);
    atomic_store(result, (unint64_t *)&qword_100824BF8);
  }
  return result;
}

unint64_t sub_1001B15B8()
{
  unint64_t result;

  result = qword_100824C00;
  if (!qword_100824C00)
  {
    result = swift_getWitnessTable(&unk_10062AB20, &type metadata for MarkMirroredSegment);
    atomic_store(result, (unint64_t *)&qword_100824C00);
  }
  return result;
}

uint64_t sub_1001B15FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE434, 1);
}

uint64_t sub_1001B160C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B1618(a1, a2, a3, (uint64_t (*)(void))sub_1001B1528);
}

uint64_t sub_1001B1618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1001B1658(uint64_t a1)
{
  return sub_1001B167C(a1, qword_10086A060, 0xD000000000000015, 0x800000010068DE80);
}

uint64_t sub_1001B167C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for LocalizedStringResource(0);
  sub_100008398(v7, a2);
  sub_10003CE9C(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_1001B16D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for DataLinkCommand(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[5] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v5);
  v1[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_1001B174C, 0, 0);
}

uint64_t sub_1001B174C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 64) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001B17B4, v2, v3);
}

uint64_t sub_1001B17B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_release(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v3 + 104))(v1, enum case for DataLinkCommand.markSegment(_:), v2, v4);
  if (qword_10081DAD8 != -1)
    swift_once(&qword_10081DAD8, sub_1000061F8);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(qword_10086A610 + OBJC_IVAR___WODataLinkMonitor_client);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v9);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10078C2B8, v12 + v7, v11 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13 + v12, v5, v9);
  swift_retain(v10);
  dispatch thunk of DataLinkClient.send(command:acknowledged:)(v6, sub_1001B19D8, v13);
  swift_release(v10);
  swift_release(v13);
  static IntentResult.result<>()(v14);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B190C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B13F8(&qword_10081D6E0, (uint64_t)qword_10086A060, (uint64_t)sub_1001B1658, a1);
}

uint64_t sub_1001B1928(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100824C14);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  return sub_1001B16D8(a1);
}

uint64_t sub_1001B1978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B1528();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for MarkMirroredSegment()
{
  return &type metadata for MarkMirroredSegment;
}

ValueMetadata *type metadata accessor for PauseMirroredWorkout()
{
  return &type metadata for PauseMirroredWorkout;
}

ValueMetadata *type metadata accessor for ResumeMirroredWorkout()
{
  return &type metadata for ResumeMirroredWorkout;
}

uint64_t sub_1001B19E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DataLinkCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B1A44(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DataLinkCommand(0) - 8) + 80);
  return sub_1001B0A58(a1, a2, v2 + ((v5 + 16) & ~v5));
}

id sub_1001B1A94(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain(a2);
}

void destroy for DivingDetailWaterTemperatureChartView(uint64_t a1)
{
  sub_1001B1AB4(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1001B1AB4(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release(a2);
}

uint64_t _s10FitnessApp37DivingDetailWaterTemperatureChartViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001B1A94(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DivingDetailWaterTemperatureChartView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001B1A94(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001B1AB4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DivingDetailWaterTemperatureChartView(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001B1AB4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DivingDetailWaterTemperatureChartView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DivingDetailWaterTemperatureChartView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DivingDetailWaterTemperatureChartView()
{
  return &type metadata for DivingDetailWaterTemperatureChartView;
}

uint64_t sub_1001B1C40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE4C8, 1);
}

BOOL sub_1001B1C50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD v18[9];
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  _OWORD v30[9];
  _BYTE v31[25];

  v5 = a3 & 1;
  v6 = type metadata accessor for DivingDataCalculator(0);
  v7 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v8 = (void *)StateObject.wrappedValue.getter(a1, a2, v5, v6, v7);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v10 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(&v20, v8, KeyPath, v10);

  swift_release(KeyPath);
  swift_release(v10);
  v30[8] = v28;
  *(_OWORD *)v31 = v29[0];
  *(_OWORD *)&v31[9] = *(_OWORD *)((char *)v29 + 9);
  v30[4] = v24;
  v30[5] = v25;
  v30[6] = v26;
  v30[7] = v27;
  v30[0] = v20;
  v30[1] = v21;
  v30[2] = v22;
  v30[3] = v23;
  sub_1001B5240((uint64_t *)v30);
  if ((v31[24] & 1) != 0)
    return 0;
  v12 = (void *)StateObject.wrappedValue.getter(a1, a2, v5, v6, v7);
  v13 = swift_getKeyPath(&unk_10062AC38);
  v14 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(v18, v12, v13, v14);

  swift_release(v13);
  swift_release(v14);
  v28 = v18[8];
  v29[0] = v19[0];
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v19 + 9);
  v24 = v18[4];
  v25 = v18[5];
  v26 = v18[6];
  v27 = v18[7];
  v20 = v18[0];
  v21 = v18[1];
  v22 = v18[2];
  v23 = v18[3];
  v15 = (_QWORD *)*((_QWORD *)&v18[0] + 1);
  swift_bridgeObjectRetain(*((_QWORD *)&v18[0] + 1));
  sub_1001B5240((uint64_t *)&v20);
  if (v15)
    v16 = v15;
  else
    v16 = _swiftEmptyArrayStorage;
  v17 = v16[2];
  swift_bridgeObjectRelease(v16);
  return v17 != 0;
}

uint64_t sub_1001B1E40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  char *v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v5 = a3 & 1;
  v6 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v49 - v10;
  v12 = type metadata accessor for DivingDataCalculator(0);
  v13 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v53 = v5;
  v52 = v12;
  v14 = (char *)StateObject.wrappedValue.getter(a1, a2, v5, v12, v13);
  v15 = *(id *)&v14[OBJC_IVAR___CHDivingDataCalculator_diveSession];

  v16 = objc_msgSend(v15, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

  v51 = a1;
  v17 = v5;
  v18 = v13;
  v19 = (char *)StateObject.wrappedValue.getter(a1, a2, v17, v12, v13);
  v20 = *(id *)&v19[OBJC_IVAR___CHDivingDataCalculator_diveSession];

  v21 = objc_msgSend(v20, "endDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v22 = sub_1000083D8((unint64_t *)&qword_100824D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v9, v6, v22);
  v23 = v57;
  v24 = *(void (**)(char *, uint64_t))(v57 + 8);
  v56 = v9;
  v24(v9, v6);
  v50 = v24;
  v24(v11, v6);
  v25 = sub_100047110((uint64_t *)&unk_100828730);
  v26 = *(_QWORD *)(v23 + 72);
  v27 = *(unsigned __int8 *)(v23 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v25, v28 + 2 * v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_100620BC0;
  v55 = v29;
  v30 = v29 + v28;
  v31 = a1;
  v32 = a2;
  v33 = v53;
  v34 = v52;
  v35 = v18;
  v36 = (char *)StateObject.wrappedValue.getter(v31, a2, v53, v52, v18);
  v37 = *(id *)&v36[OBJC_IVAR___CHDivingDataCalculator_diveSession];

  v38 = objc_msgSend(v37, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

  v39 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 32);
  v39(v30, v11, v6);
  v40 = v30 + v26;
  v41 = (char *)StateObject.wrappedValue.getter(v51, v32, v33, v34, v35);
  v42 = *(id *)&v41[OBJC_IVAR___CHDivingDataCalculator_diveSession];

  if ((v54 & 1) != 0)
  {
    v43 = objc_msgSend(v42, "startDate");

    v44 = v56;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v43);

    Date.addingTimeInterval(_:)(v45, 1.0);
    v50(v44, v6);
  }
  else
  {
    v46 = objc_msgSend(v42, "endDate");

    v47 = v56;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    v39(v40, v47, v6);
  }
  return v55;
}

_QWORD *sub_1001B2200(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD *result;
  double v12;
  double v13;
  uint64_t v14;
  _OWORD v15[9];
  _OWORD v16[2];
  _OWORD v17[9];
  _BYTE v18[25];

  v5 = a3 & 1;
  v6 = type metadata accessor for DivingDataCalculator(0);
  v7 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v8 = (void *)StateObject.wrappedValue.getter(a1, a2, v5, v6, v7);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v10 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(v15, v8, KeyPath, v10);

  swift_release(KeyPath);
  swift_release(v10);
  v17[8] = v15[8];
  *(_OWORD *)v18 = v16[0];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)v16 + 9);
  v17[4] = v15[4];
  v17[5] = v15[5];
  v17[6] = v15[6];
  v17[7] = v15[7];
  v17[0] = v15[0];
  v17[1] = v15[1];
  v17[2] = v15[2];
  v17[3] = v15[3];
  sub_1001B5240((uint64_t *)v17);
  if ((v18[24] & 1) != 0)
    return _swiftEmptyArrayStorage;
  if (*(double *)&v18[8] > 0.0)
    v12 = *(double *)&v18[8];
  else
    v12 = 0.0;
  if (*(double *)&v18[16] > 0.0)
    v13 = *(double *)&v18[16];
  else
    v13 = 0.0;
  v14 = sub_100047110(&qword_100821568);
  result = (_QWORD *)swift_allocObject(v14, 48, 7);
  *((_OWORD *)result + 1) = xmmword_100620BC0;
  *((double *)result + 4) = v12;
  *((double *)result + 5) = v13;
  return result;
}

double sub_1001B2360@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v7 = a3 & 1;
  v8 = sub_100047110(&qword_100824C30);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray6Color");
  v15 = Color.init(_:)(v14);
  *(_QWORD *)v13 = static HorizontalAlignment.leading.getter(v15);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v16 = sub_100047110(&qword_100824C38);
  sub_1001B24B4(a1, a2, v7, (uint64_t *)&v13[*(int *)(v16 + 44)]);
  sub_100021CC0((uint64_t)v13, (uint64_t)v11, &qword_100824C30);
  *a4 = v15;
  v17 = sub_100047110(&qword_100824C40);
  sub_100021CC0((uint64_t)v11, (uint64_t)a4 + *(int *)(v17 + 48), &qword_100824C30);
  swift_retain(v15);
  sub_10001BE90((uint64_t)v13, &qword_100824C30);
  sub_10001BE90((uint64_t)v11, &qword_100824C30);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

void sub_1001B24B4(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t OpaqueTypeConformance2;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int16 v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int *v178;
  char *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  int *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215[3];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _OWORD v225[2];
  _OWORD v226[9];
  _OWORD v227[4];

  v213 = a2;
  v211 = a4;
  LODWORD(v212) = a3 & 1;
  v210 = sub_100047110(&qword_100824C48);
  __chkstk_darwin(v210);
  v6 = (char *)&v173 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100824C50);
  __chkstk_darwin(v7);
  v193 = (char *)&v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_100824C58);
  v182 = *(_QWORD *)(v9 - 8);
  v183 = v9;
  __chkstk_darwin(v9);
  v181 = (char *)&v173 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100824C60);
  v185 = *(_QWORD *)(v11 - 8);
  v186 = v11;
  __chkstk_darwin(v11);
  v184 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100047110(&qword_100824C68);
  v188 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v187 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100047110(&qword_100824C70);
  v196 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v192 = (char *)&v173 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100047110(&qword_100824C78);
  v195 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v191 = (char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100047110(&qword_100824C80);
  __chkstk_darwin(v189);
  v199 = (char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100047110(&qword_100824C88);
  v17 = __chkstk_darwin(v194);
  v200 = (uint64_t)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v201 = (uint64_t)&v173 - v19;
  v204 = sub_100047110(&qword_100824C90);
  __chkstk_darwin(v204);
  v21 = (char *)&v173 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100047110(&qword_100824C98);
  v23 = __chkstk_darwin(v22);
  v209 = (uint64_t)&v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v208 = (char *)&v173 - v25;
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x800000010068DEE0);
  v172 = 256;
  v171 = 0;
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v35 = static Font.body.getter(v34);
  v37 = Text.font(_:)(v35, v27, v29, v33, v31, v36);
  v205 = v38;
  v206 = v37;
  v203 = v39;
  v207 = v40;
  v41 = v35;
  v42 = a1;
  v43 = v213;
  swift_release(v41);
  v44 = v33;
  v45 = v212;
  sub_1000E4458(v27, v29, v44);
  swift_bridgeObjectRelease(v31);
  if (!sub_1001B1C50(v42, v43, v45))
  {
    v146 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002FLL, 0x800000010068DF10);
    v172 = 256;
    v171 = 0;
    v147 = Text.init(_:tableName:bundle:comment:)(v146);
    v149 = v148;
    v151 = v150;
    v153 = v152 & 1;
    v155 = static Font.body.getter(v154);
    v157 = Text.font(_:)(v155, v147, v149, v153, v151, v156);
    v159 = v158;
    v161 = v160;
    v213 = v162;
    swift_release(v155);
    sub_1000E4458(v147, v149, v153);
    swift_bridgeObjectRelease(v151);
    *(_QWORD *)v21 = v157;
    *((_QWORD *)v21 + 1) = v159;
    v21[16] = v161 & 1;
    *((_QWORD *)v21 + 3) = v213;
    swift_storeEnumTagMultiPayload(v21, v204, 0);
    v163 = sub_100028384(&qword_100824CA0, &qword_100824C48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v145 = (uint64_t)v208;
    _ConditionalContent<>.init(storage:)(v21, &type metadata for Text, v210, &protocol witness table for Text, v163);
    goto LABEL_6;
  }
  v179 = v21;
  v180 = (uint64_t *)v6;
  v46 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v46, "localizedStringForKey:value:table:", v47, 0, 0);

  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  v52 = sub_100047110((uint64_t *)&unk_100827460);
  v53 = swift_allocObject(v52, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100622F90;
  v54 = type metadata accessor for DivingDataCalculator(0);
  v55 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v202 = v42;
  v56 = (void *)StateObject.wrappedValue.getter(v42, v43, v45, v54, v55);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v58 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(&v216, v56, KeyPath, v58);

  swift_release(KeyPath);
  swift_release(v58);
  v226[8] = v224;
  v227[0] = v225[0];
  *(_OWORD *)((char *)v227 + 9) = *(_OWORD *)((char *)v225 + 9);
  v226[4] = v220;
  v226[5] = v221;
  v226[6] = v222;
  v226[7] = v223;
  v226[0] = v216;
  v226[1] = v217;
  v226[2] = v218;
  v226[3] = v219;
  v59 = *((_QWORD *)&v222 + 1);
  v60 = v223;
  swift_bridgeObjectRetain(v223);
  sub_1001B5240((uint64_t *)v226);
  *(_QWORD *)(v53 + 56) = &type metadata for String;
  *(_QWORD *)(v53 + 64) = sub_100038CF8();
  *(_QWORD *)(v53 + 32) = v59;
  *(_QWORD *)(v53 + 40) = v60;
  v62 = String.init(format:_:)(v49, v51, v53, v61);
  v64 = v63;
  swift_bridgeObjectRelease(v51);
  *(_QWORD *)&v216 = v62;
  *((_QWORD *)&v216 + 1) = v64;
  v65 = sub_100038CA0();
  v66 = Text.init<A>(_:)(&v216, &type metadata for String, v65);
  v68 = v67;
  v70 = v69;
  v72 = v71 & 1;
  v74 = static Font.body.getter(v73);
  v76 = Text.font(_:)(v74, v66, v68, v72, v70, v75);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  swift_release(v74);
  sub_1000E4458(v66, v68, v72);
  swift_bridgeObjectRelease(v70);
  v83 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "paceColors");
  if (v83)
  {
    v84 = v83;
    v85 = objc_msgSend(v83, "nonGradientTextColor");

    if (v85)
    {
      v86 = (_DWORD)v212 != 0;
      v87 = Color.init(_:)(v85);
      *(_QWORD *)&v216 = v87;
      v88 = v80 & 1;
      v89 = Text.foregroundStyle<A>(_:)(&v216, v76, v78, v88, v82, &type metadata for Color, &protocol witness table for Color);
      v176 = v90;
      v177 = v89;
      v175 = v91;
      v174 = v92 & 1;
      sub_1000E4458(v76, v78, v88);
      swift_release(v87);
      swift_bridgeObjectRelease(v82);
      __chkstk_darwin(v93);
      v94 = v202;
      v95 = v213;
      *((_QWORD *)&v173 - 4) = v202;
      *((_QWORD *)&v173 - 3) = v95;
      v96 = v95;
      v173 = v86;
      v97 = sub_100047110(&qword_100824CB8);
      v98 = sub_1001B534C();
      v99 = v181;
      v100 = Chart.init(content:)(sub_1001B5340, &v173 - 12, v97, v98);
      v178 = &v173;
      __chkstk_darwin(v100);
      *((_QWORD *)&v173 - 4) = v94;
      *((_QWORD *)&v173 - 3) = v96;
      v101 = v96;
      LOBYTE(v171) = v86;
      v102 = sub_100047110(&qword_100824CD0);
      v103 = sub_100028384(&qword_100824CD8, &qword_100824C58, (uint64_t)&protocol conformance descriptor for Chart<A>);
      v104 = sub_100028384(&qword_100824CE0, &qword_100824CD0, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
      v106 = v183;
      v105 = v184;
      View.chartYAxis<A>(content:)(sub_1001B5410, &v173 - 12, v183, v102, v103, v104);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v99, v106);
      v215[0] = sub_1001B1E40(v94, v101, (char)v212);
      v107 = type metadata accessor for ScaleType(0);
      v182 = *(_QWORD *)(*(_QWORD *)(v107 - 8) + 56);
      v108 = (uint64_t)v193;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v182)(v193, 1, 1, v107);
      v109 = sub_100047110(&qword_100824CE8);
      *(_QWORD *)&v216 = v106;
      *((_QWORD *)&v216 + 1) = v102;
      *(_QWORD *)&v217 = v103;
      *((_QWORD *)&v217 + 1) = v104;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
      v111 = sub_1001B541C((unint64_t *)&qword_100824CF0, &qword_100824CE8);
      v113 = v186;
      v112 = v187;
      View.chartXScale<A>(domain:type:)(v215, v108, v186, v109, OpaqueTypeConformance2, v111);
      sub_10001BE90(v108, &qword_100824C50);
      v114 = swift_bridgeObjectRelease(v215[0]);
      (*(void (**)(char *, uint64_t, __n128))(v185 + 8))(v105, v113, v114);
      v214 = sub_1001B2200(v202, v213, (char)v212);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v182)(v108, 1, 1, v107);
      v115 = sub_100047110(&qword_100821558);
      *(_QWORD *)&v216 = v113;
      *((_QWORD *)&v216 + 1) = v109;
      *(_QWORD *)&v217 = OpaqueTypeConformance2;
      *((_QWORD *)&v217 + 1) = v111;
      v116 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
      v117 = sub_1001B541C(&qword_100824CF8, &qword_100821558);
      v118 = v192;
      v119 = v190;
      View.chartYScale<A>(domain:type:)(&v214, v108, v190, v115, v116, v117);
      sub_10001BE90(v108, &qword_100824C50);
      v120 = swift_bridgeObjectRelease(v214);
      v121 = (*(uint64_t (**)(char *, uint64_t, __n128))(v188 + 8))(v112, v119, v120);
      v212 = &v173;
      __chkstk_darwin(v121);
      v122 = v213;
      *((_QWORD *)&v173 - 4) = v202;
      *((_QWORD *)&v173 - 3) = v122;
      LOBYTE(v171) = v173;
      v123 = sub_100047110(&qword_100824D00);
      *(_QWORD *)&v216 = v119;
      *((_QWORD *)&v216 + 1) = v115;
      *(_QWORD *)&v217 = v116;
      *((_QWORD *)&v217 + 1) = v117;
      v124 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
      v125 = sub_100028384(&qword_100824D08, &qword_100824D00, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
      v126 = v191;
      v127 = v198;
      View.chartXAxis<A>(content:)(sub_1001B5470, &v173 - 12, v198, v123, v124, v125);
      (*(void (**)(char *, uint64_t))(v196 + 8))(v118, v127);
      v128 = v195;
      v129 = (uint64_t)v199;
      v130 = v197;
      (*(void (**)(char *, char *, uint64_t))(v195 + 16))(v199, v126, v197);
      *(_WORD *)(v129 + *(int *)(v189 + 36)) = 0;
      v131 = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v126, v130);
      v132 = static Alignment.center.getter(v131);
      _FrameLayout.init(width:height:alignment:)(&v216, 0, 1, 0x4065E00000000000, 0, v132, v133);
      v134 = v200;
      sub_100021CC0(v129, v200, &qword_100824C80);
      v135 = (_OWORD *)(v134 + *(int *)(v194 + 36));
      v136 = v217;
      *v135 = v216;
      v135[1] = v136;
      v135[2] = v218;
      sub_10001BE90(v129, &qword_100824C80);
      v137 = v201;
      sub_100045AD4(v134, v201, &qword_100824C88);
      sub_100021CC0(v137, v134, &qword_100824C88);
      v138 = (uint64_t)v180;
      v139 = v176;
      v140 = v177;
      v141 = v175;
      *v180 = v177;
      *(_QWORD *)(v138 + 8) = v141;
      LOBYTE(v130) = v174;
      *(_BYTE *)(v138 + 16) = v174;
      *(_QWORD *)(v138 + 24) = v139;
      v142 = sub_100047110(&qword_100824D10);
      sub_100021CC0(v134, v138 + *(int *)(v142 + 48), &qword_100824C88);
      sub_1000E439C(v140, v141, v130);
      swift_bridgeObjectRetain(v139);
      sub_1000E439C(v140, v141, v130);
      swift_bridgeObjectRetain(v139);
      sub_10001BE90(v134, &qword_100824C88);
      sub_1000E4458(v140, v141, v130);
      swift_bridgeObjectRelease(v139);
      v143 = (uint64_t)v179;
      sub_100021CC0(v138, (uint64_t)v179, &qword_100824C48);
      swift_storeEnumTagMultiPayload(v143, v204, 1);
      v144 = sub_100028384(&qword_100824CA0, &qword_100824C48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v145 = (uint64_t)v208;
      _ConditionalContent<>.init(storage:)(v143, &type metadata for Text, v210, &protocol witness table for Text, v144);
      sub_10001BE90(v138, &qword_100824C48);
      sub_10001BE90(v137, &qword_100824C88);
      sub_1000E4458(v140, v141, v130);
      swift_bridgeObjectRelease(v139);
LABEL_6:
      v164 = v203 & 1;
      v165 = v209;
      sub_100021CC0(v145, v209, &qword_100824C98);
      v166 = v211;
      v168 = v205;
      v167 = v206;
      *v211 = v206;
      v166[1] = v168;
      *((_BYTE *)v166 + 16) = v164;
      v169 = v207;
      v166[3] = v207;
      v170 = sub_100047110(&qword_100824CA8);
      sub_100021CC0(v165, (uint64_t)v166 + *(int *)(v170 + 48), &qword_100824C98);
      sub_1000E439C(v167, v168, v164);
      swift_bridgeObjectRetain(v169);
      sub_10001BE90(v145, &qword_100824C98);
      sub_10001BE90(v165, &qword_100824C98);
      sub_1000E4458(v167, v168, v164);
      swift_bridgeObjectRelease(v169);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001B3350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _OWORD v38[9];
  _OWORD v39[3];

  v26 = a4;
  v6 = a3 & 1;
  v7 = sub_100047110(&qword_100824CB8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DivingDataCalculator(0);
  v12 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v13 = (void *)StateObject.wrappedValue.getter(a1, a2, v6, v11, v12);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v15 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(&v28, v13, KeyPath, v15);

  swift_release(KeyPath);
  swift_release(v15);
  v38[7] = v35;
  v38[8] = v36;
  v39[0] = v37[0];
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v37 + 9);
  v38[4] = v32;
  v38[5] = v33;
  v38[6] = v34;
  v38[0] = v28;
  v38[1] = v29;
  v38[2] = v30;
  v38[3] = v31;
  v16 = (_QWORD *)*((_QWORD *)&v28 + 1);
  swift_bridgeObjectRetain(*((_QWORD *)&v28 + 1));
  sub_1001B5240((uint64_t *)v38);
  v17 = _swiftEmptyArrayStorage;
  if (v16)
    v17 = v16;
  v27 = v17;
  v18 = sub_100047110(&qword_100824DA0);
  v19 = sub_100047110(&qword_100824DA8);
  v20 = sub_100028384(&qword_100824DB0, &qword_100824DA0, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_100007050(&qword_100824CC8);
  *(_QWORD *)&v28 = type metadata accessor for RuleMark(255);
  *((_QWORD *)&v28 + 1) = &type metadata for Color;
  *(_QWORD *)&v29 = &protocol witness table for RuleMark;
  *((_QWORD *)&v29 + 1) = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  *(_QWORD *)&v28 = v21;
  *((_QWORD *)&v28 + 1) = OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v24 = sub_1000083D8(&qword_100824DB8, type metadata accessor for WorkoutChartDataElement, (uint64_t)&unk_10064791C);
  ForEach<>.init(_:content:)(&v27, sub_1001B35E0, 0, v18, &type metadata for Int, v19, v20, v23, v24);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v26, v10, v7);
}

uint64_t sub_1001B35E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  _QWORD v58[5];

  v56 = a2;
  v3 = sub_100047110(&qword_100824DC0);
  v4 = __chkstk_darwin(v3);
  v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v49 = (char *)&v48 - v6;
  v7 = sub_100047110(&qword_100824DC8);
  __chkstk_darwin(v7);
  v48 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RuleMark(0);
  v10 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  v53 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100824CC8);
  v14 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  v55 = v14;
  __chkstk_darwin(v13);
  v50 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = type metadata accessor for Date(0);
  static PlottableValue.value(_:_:)(v16, v18, v20 & 1, v22, a1, v23, &protocol witness table for Date);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v18);
  v24 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x800000010068DF70);
  v26 = v25;
  LOBYTE(v16) = v27;
  v29 = v28;
  v30 = type metadata accessor for WorkoutChartDataElement(0);
  v58[0] = *(_QWORD *)(a1 + *(int *)(v30 + 24));
  v31 = v49;
  static PlottableValue.value(_:_:)(v24, v26, v16 & 1, v29, v58, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v26);
  v32 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x800000010068DF90);
  v34 = v33;
  v36 = v35;
  v58[0] = *(_QWORD *)(a1 + *(int *)(v30 + 28));
  v38 = v51;
  static PlottableValue.value(_:_:)(v32, v33, v37 & 1, v35, v58, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v36);
  v39 = swift_bridgeObjectRelease(v34);
  v40 = RuleMark.init<A, B>(x:yStart:yEnd:)(v48, v31, v38, v23, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v39);
  v41 = static Color.teal.getter(v40);
  v58[0] = v41;
  v42 = v50;
  v43 = v52;
  ChartContent.foregroundStyle<A>(_:)(v58, v52, &type metadata for Color, &protocol witness table for RuleMark, &protocol witness table for Color);
  v44 = swift_release(v41);
  (*(void (**)(char *, uint64_t, __n128))(v53 + 8))(v12, v43, v44);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v58, 1, 0, _swiftEmptyArrayStorage, 3.0, 10.0, 0.0);
  v57[0] = v43;
  v57[1] = &type metadata for Color;
  v57[2] = &protocol witness table for RuleMark;
  v57[3] = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v57, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v46 = v54;
  ChartContent.lineStyle(_:)(v58, v54, OpaqueTypeConformance2);
  sub_1001B57E8((uint64_t)v58);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v42, v46);
}

uint64_t sub_1001B398C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v6 = type metadata accessor for AxisMarkValues(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AxisMarkPreset(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AxisMarkPreset.inset.getter(v13);
  v16 = swift_allocObject(&unk_10078C490, 33, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_BYTE *)(v16 + 32) = a3 & 1;
  v17 = sub_1001B1A94(a1, a2, a3 & 1);
  v18 = static AxisMarkPosition.automatic.getter(v17);
  static AxisMarkValues.automatic.getter(v18);
  v19 = sub_100047110(&qword_100824D58);
  v20 = sub_1001B55C8();
  return AxisMarks.init(preset:position:values:content:)(v15, v11, v8, sub_1001B55BC, v16, v19, v20);
}

uint64_t sub_1001B3AF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (**v62)(char *, char *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  void (**v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  _OWORD v99[2];
  uint64_t v100;

  LODWORD(v97) = a3;
  v95 = a1;
  v96 = a2;
  v94 = a4;
  v91 = sub_100047110(&qword_100824D88);
  __chkstk_darwin(v91);
  v89 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100824D80);
  __chkstk_darwin(v5);
  v90 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100824D58);
  __chkstk_darwin(v7);
  v93 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v12);
  v14 = (void (**)(char *, char *, uint64_t))((char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100047110(&qword_100824D28);
  v92 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110(&qword_100824D90);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (char *)&v81 - v23;
  v24 = type metadata accessor for AxisGridLine(0);
  v88 = *(void (***)(char *, char *, uint64_t))(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v87 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v81 - v28;
  v30 = AxisValue.index.getter(v27);
  if (!v30)
  {
    v100 = 0;
    memset(v99, 0, sizeof(v99));
    v86 = v29;
    v51 = AxisGridLine.init(centered:stroke:)(2, v99);
    v52 = static UnitPoint.bottomTrailing.getter(v51);
    v85 = &v81;
    v83 = v54;
    v84 = v53;
    v55 = __chkstk_darwin(v52);
    v56 = static AxisValueLabelCollisionResolution.automatic.getter(v55);
    static AxisValueLabelOrientation.automatic.getter(v56);
    v79 = &type metadata for Text;
    v80 = &protocol witness table for Text;
    v78 = &v76;
    LOBYTE(v77) = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, void (**)(char *, char *, uint64_t), char, char *, _QWORD, char, _QWORD, int, void (*)(uint64_t *@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, v84, v83, 0, 0, 0, 1, v14, 2, v11, 0, 1, 0, v77, sub_1001B57AC);
    v57 = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    AxisMark.offset(x:y:)(v15, v57, 3.0, 22.0);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v17, v15);
    v97 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v58 = v98;
    v97(v98, v22, v18);
    v59 = v19;
    v82 = v19;
    v60 = v24;
    v61 = v87;
    v62 = v88;
    v63 = v88[2];
    v63(v87, v29, v60);
    v64 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    v64(v22, v58, v18);
    v65 = v89;
    v63(v89, v61, v60);
    v66 = v91;
    v67 = &v65[*(int *)(v91 + 48)];
    v64(v67, v22, v18);
    v68 = (uint64_t)v90;
    v62[4](v90, v65, v60);
    v97((char *)(v68 + *(int *)(v66 + 48)), v67, v18);
    v69 = *(void (**)(char *, uint64_t))(v82 + 8);
    v69(v22, v18);
    v70 = v62[1];
    ((void (*)(char *, uint64_t))v70)(v61, v60);
    v71 = v93;
    sub_100021CC0(v68, v93, &qword_100824D80);
    v72 = sub_100047110(&qword_100824D98);
    swift_storeEnumTagMultiPayload(v71, v72, 0);
    sub_10001BE90(v68, &qword_100824D80);
    v69(v98, v18);
    ((void (*)(char *, uint64_t))v70)(v86, v60);
    v73 = sub_100047110(&qword_100824D70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v71, 0, 1, v73);
    v50 = v71;
    return sub_100045AD4(v50, v94, &qword_100824D58);
  }
  v87 = v11;
  v88 = v14;
  v89 = v17;
  v90 = (char *)v15;
  v91 = v18;
  v31 = v98;
  v32 = AxisValue.index.getter(v30);
  result = AxisValue.count.getter();
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v32 == result - 1)
    {
      v34 = static UnitPoint.trailing.getter();
      v36 = v35;
      v38 = v37;
      v39 = __chkstk_darwin(v34);
      v40 = v88;
      v41 = static AxisValueLabelCollisionResolution.automatic.getter(v39);
      v42 = v87;
      static AxisValueLabelOrientation.automatic.getter(v41);
      v79 = &type metadata for Text;
      v80 = &protocol witness table for Text;
      v78 = &v76;
      LOBYTE(v77) = 1;
      v75 = v42;
      v43 = v89;
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, void (**)(char *, char *, uint64_t), char, char *, _QWORD, char, _QWORD, int, void (*)(uint64_t *@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, v36, v38, 0, 0, 0, 1, v40, 2, v75, 0, 1, 0, v77, sub_1001B57A0);
      v44 = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
      v45 = v90;
      AxisMark.offset(x:y:)(v90, v44, 3.0, -22.0);
      (*(void (**)(char *, char *))(v92 + 8))(v43, v45);
      v46 = v91;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v31, v22, v91);
      v47 = v93;
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v93, v31, v46);
      v48 = sub_100047110(&qword_100824D98);
      swift_storeEnumTagMultiPayload(v47, v48, 1);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v31, v46);
      v49 = sub_100047110(&qword_100824D70);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v47, 0, 1, v49);
      v50 = v47;
      return sub_100045AD4(v50, v94, &qword_100824D58);
    }
    v74 = sub_100047110(&qword_100824D70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v94, 1, 1, v74);
  }
  return result;
}

void sub_1001B423C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _OWORD v38[7];
  __int128 v39;
  __int128 v40;
  uint64_t v41[4];
  _OWORD v42[9];
  _OWORD v43[3];

  v37 = a4;
  v6 = a3 & 1;
  v7 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v7);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DivingDataCalculator(0);
  v11 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v12 = (void *)StateObject.wrappedValue.getter(a1, a2, v6, v10, v11);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v14 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(v38, v12, KeyPath, v14);

  swift_release(KeyPath);
  swift_release(v14);
  v42[7] = v39;
  v42[8] = v40;
  v43[0] = *(_OWORD *)v41;
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)&v41[1] + 1);
  v42[4] = v38[4];
  v42[5] = v38[5];
  v42[6] = v38[6];
  v42[0] = v38[0];
  v42[1] = v38[1];
  v42[2] = v38[2];
  v42[3] = v38[3];
  v15 = *((_QWORD *)&v39 + 1);
  v16 = v40;
  v17 = v41[0];
  sub_1001B57B8(*((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41[0]);
  sub_1001B5240((uint64_t *)v42);
  if (v16)
  {
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
  }
  *(_QWORD *)&v38[0] = v15;
  *((_QWORD *)&v38[0] + 1) = v16;
  v18 = sub_100038CA0();
  v19 = Text.init<A>(_:)(v38, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  v27 = static Font.system(size:weight:design:)(0, 1, v9, 12.0);
  sub_10001BE90((uint64_t)v9, &qword_10081F2F8);
  v29 = Text.font(_:)(v27, v19, v21, v25, v23, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v27);
  sub_1000E4458(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  v36 = v37;
  *v37 = v29;
  v36[1] = v31;
  *((_BYTE *)v36 + 16) = v33 & 1;
  v36[3] = v35;
}

void sub_1001B449C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _OWORD v38[7];
  __int128 v39;
  __int128 v40;
  uint64_t v41[4];
  _OWORD v42[9];
  _OWORD v43[3];

  v37 = a4;
  v6 = a3 & 1;
  v7 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v7);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DivingDataCalculator(0);
  v11 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v12 = (void *)StateObject.wrappedValue.getter(a1, a2, v6, v10, v11);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v14 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(v38, v12, KeyPath, v14);

  swift_release(KeyPath);
  swift_release(v14);
  v42[7] = v39;
  v42[8] = v40;
  v43[0] = *(_OWORD *)v41;
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)&v41[1] + 1);
  v42[4] = v38[4];
  v42[5] = v38[5];
  v42[6] = v38[6];
  v42[0] = v38[0];
  v42[1] = v38[1];
  v42[2] = v38[2];
  v42[3] = v38[3];
  v15 = *((_QWORD *)&v40 + 1);
  v17 = v40;
  v16 = v41[0];
  sub_1001B57B8(*((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41[0]);
  sub_1001B5240((uint64_t *)v42);
  if (v17)
  {
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
  }
  *(_QWORD *)&v38[0] = v15;
  *((_QWORD *)&v38[0] + 1) = v16;
  v18 = sub_100038CA0();
  v19 = Text.init<A>(_:)(v38, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  v27 = static Font.system(size:weight:design:)(0, 1, v9, 12.0);
  sub_10001BE90((uint64_t)v9, &qword_10081F2F8);
  v29 = Text.font(_:)(v27, v19, v21, v25, v23, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v27);
  sub_1000E4458(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  v36 = v37;
  *v37 = v29;
  v36[1] = v31;
  *((_BYTE *)v36 + 16) = v33 & 1;
  v36[3] = v35;
}

uint64_t sub_1001B46FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t KeyPath;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  _OWORD v44[9];
  _OWORD v45[3];

  v33 = a4;
  v7 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100824D00);
  v31 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DivingDataCalculator(0);
  v17 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v18 = a3 & 1;
  v19 = (void *)StateObject.wrappedValue.getter(a1, a2, v18, v16, v17);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v21 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(&v34, v19, KeyPath, v21);

  swift_release(KeyPath);
  swift_release(v21);
  v44[8] = v42;
  v45[0] = v43[0];
  *(_OWORD *)((char *)v45 + 9) = *(_OWORD *)((char *)v43 + 9);
  v44[4] = v38;
  v44[5] = v39;
  v44[6] = v40;
  v44[7] = v41;
  v44[0] = v34;
  v44[1] = v35;
  v44[2] = v36;
  v44[3] = v37;
  v22 = (_QWORD *)v35;
  swift_bridgeObjectRetain(v35);
  sub_1001B5240((uint64_t *)v44);
  if (!v22)
    v22 = _swiftEmptyArrayStorage;
  v23 = swift_allocObject(&unk_10078C468, 33, 7);
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = a2;
  *(_BYTE *)(v23 + 32) = v18;
  v24 = sub_1001B1A94(a1, a2, v18);
  v25 = static AxisMarkPreset.automatic.getter(v24);
  static AxisMarkPosition.automatic.getter(v25);
  v26 = sub_100047110(&qword_100824D18);
  v27 = type metadata accessor for Date(0);
  v28 = sub_1001B548C();
  AxisMarks.init<A>(preset:position:values:content:)(v12, v9, v22, sub_1001B5480, v23, v26, v27, v28, &protocol witness table for Date);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v15, v32);
}

uint64_t sub_1001B498C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char v70[16];
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  v61 = a4;
  v59 = a3;
  v58 = a2;
  v60 = a1;
  v66 = a5;
  v65 = sub_100047110(&qword_100824D38);
  __chkstk_darwin(v65);
  v64 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100047110(&qword_100824D28);
  v63 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100047110(&qword_100824D40);
  v69 = *(_QWORD *)(v62 - 8);
  v14 = __chkstk_darwin(v62);
  v56 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v68 = (char *)&v52 - v16;
  v17 = type metadata accessor for AxisGridLine(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110(&qword_100824D48);
  v22 = *(_QWORD *)(v21 - 8);
  v53 = v21;
  v54 = v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v52 - v26;
  v67 = (char *)&v52 - v26;
  v77 = 0;
  memset(v76, 0, sizeof(v76));
  AxisGridLine.init(centered:stroke:)(2, v76);
  AxisMark.offset(x:y:)(v17, &protocol witness table for AxisGridLine, -1.0, 0.0);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v55 = *(uint64_t (**)(char *, char *, uint64_t))(v22 + 32);
  v28 = v55(v27, v25, v21);
  v71 = v58;
  v72 = v59;
  v73 = v61 & 1;
  v74 = v60;
  v29 = static AxisValueLabelCollisionResolution.automatic.getter(v28);
  static AxisValueLabelOrientation.automatic.getter(v29);
  AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:)(2, 0, 0, 1, 0, 0, 1, v11, 2, v8, 0, 1, 0, 1, sub_1001B5580, v70, &type metadata for Text, &protocol witness table for Text);
  v31 = static Color.gray.getter(v30);
  v32 = Color.opacity(_:)(0.5);
  swift_release(v31);
  v75 = v32;
  v33 = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
  v34 = v56;
  v35 = v57;
  AxisMark.foregroundStyle<A>(_:)(&v75, v57, &type metadata for Color, v33, &protocol witness table for Color);
  v36 = swift_release(v32);
  (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v13, v35, v36);
  v38 = v68;
  v37 = v69;
  v39 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
  v40 = v62;
  v39(v68, v34, v62);
  v41 = v54;
  v42 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v43 = v53;
  v42(v25, v67, v53);
  v44 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v44(v34, v38, v40);
  v45 = v64;
  v42(v64, v25, v43);
  v46 = v65;
  v47 = &v45[*(int *)(v65 + 48)];
  v44(v47, v34, v40);
  v48 = v66;
  v55(v66, v45, v43);
  v39(&v48[*(int *)(v46 + 48)], v47, v40);
  v49 = *(void (**)(char *, uint64_t))(v69 + 8);
  v49(v68, v40);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v67, v43);
  v49(v34, v40);
  return ((uint64_t (*)(char *, uint64_t))v50)(v25, v43);
}

void sub_1001B4E78(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t KeyPath;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  _OWORD v65[9];
  _OWORD v66[3];

  v53 = a5;
  v54 = a4;
  v7 = a3 & 1;
  v8 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v8);
  v52 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DivingDataCalculator(0);
  v14 = sub_1000083D8(&qword_100824CB0, type metadata accessor for DivingDataCalculator, (uint64_t)&protocol conformance descriptor for DivingDataCalculator);
  v50 = StateObject.wrappedValue.getter(a1, a2, v7, v13, v14);
  v15 = (void *)StateObject.wrappedValue.getter(a1, a2, v7, v13, v14);
  KeyPath = swift_getKeyPath(&unk_10062AC38);
  v17 = swift_getKeyPath(&unk_10062AC60);
  static Published.subscript.getter(&v55, v15, KeyPath, v17);

  swift_release(KeyPath);
  swift_release(v17);
  v65[7] = v62;
  v65[8] = v63;
  v66[0] = v64[0];
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v64 + 9);
  v65[4] = v59;
  v65[5] = v60;
  v65[6] = v61;
  v65[0] = v55;
  v65[1] = v56;
  v65[2] = v57;
  v65[3] = v58;
  v18 = (_QWORD *)v56;
  swift_bridgeObjectRetain(v56);
  v19 = sub_1001B5240((uint64_t *)v65);
  if (v18)
    v20 = v18;
  else
    v20 = _swiftEmptyArrayStorage;
  v21 = AxisValue.index.getter(v19);
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v21 < v20[2])
  {
    v22 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, (unint64_t)v20+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v21, v51);
    swift_bridgeObjectRelease(v20);
    v23 = (void *)v50;
    v24 = *(void **)(v50 + OBJC_IVAR___CHDivingDataCalculator_axisFormatter);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v26 = objc_msgSend(v24, "stringFromDate:", isa);

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
    *(_QWORD *)&v55 = v27;
    *((_QWORD *)&v55 + 1) = v29;
    v30 = sub_100038CA0();
    v31 = Text.init<A>(_:)(&v55, &type metadata for String, v30);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = type metadata accessor for Font.Design(0);
    v39 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v52, 1, 1, v38);
    v40 = static Font.system(size:weight:design:)(0, 1, v39, 12.0);
    sub_10001BE90(v39, &qword_10081F2F8);
    v42 = Text.font(_:)(v40, v31, v33, v37, v35, v41);
    v44 = v43;
    v46 = v45;
    v48 = v47;
    swift_release(v40);
    sub_1000E4458(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    v49 = v53;
    *v53 = v42;
    v49[1] = v44;
    *((_BYTE *)v49 + 16) = v46 & 1;
    v49[3] = v48;
    return;
  }
  __break(1u);
}

double sub_1001B51E0@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  *a1 = static Alignment.leading.getter();
  a1[1] = v6;
  v7 = sub_100047110(&qword_100824C28);
  return sub_1001B2360(v3, v4, v5, (_QWORD *)((char *)a1 + *(int *)(v7 + 44)));
}

uint64_t *sub_1001B5240(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v10 = a1[15];
  v9 = a1[16];
  v13 = a1[17];
  v14 = a1[2];
  v12 = a1[18];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v14);
  sub_1001B5310(v10, v9, v13, v12);
  return a1;
}

uint64_t sub_1001B5310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1001B5340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B3350(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

unint64_t sub_1001B534C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  result = qword_100824CC0;
  if (!qword_100824CC0)
  {
    v1 = sub_100007050(&qword_100824CB8);
    v2 = sub_100007050(&qword_100824CC8);
    v4 = type metadata accessor for RuleMark(255);
    v5 = &type metadata for Color;
    v6 = &protocol witness table for RuleMark;
    v7 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = (void *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100824CC0);
  }
  return result;
}

uint64_t sub_1001B5410()
{
  uint64_t v0;

  return sub_1001B398C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1001B541C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007050(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B5470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B46FC(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_1001B5480@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1001B498C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), a2);
}

unint64_t sub_1001B548C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;

  result = qword_100824D20;
  if (!qword_100824D20)
  {
    v1 = sub_100007050(&qword_100824D18);
    v4 = type metadata accessor for AxisGridLine(255);
    v5 = &protocol witness table for AxisGridLine;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    v2 = sub_100007050(&qword_100824D28);
    v3 = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    v4 = v2;
    v5 = &type metadata for Color;
    v6 = v3;
    v7 = &protocol witness table for Color;
    v9 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100824D20);
  }
  return result;
}

void sub_1001B5580(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1001B4E78(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1001B5594()
{
  uint64_t v0;

  sub_1001B1AB4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001B55BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B3AF0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

unint64_t sub_1001B55C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100824D60;
  if (!qword_100824D60)
  {
    v1 = sub_100007050(&qword_100824D58);
    sub_1001B562C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100824D60);
  }
  return result;
}

unint64_t sub_1001B562C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100824D68;
  if (!qword_100824D68)
  {
    v1 = sub_100007050(&qword_100824D70);
    sub_1001B56E0();
    v2[0] = sub_100007050(&qword_100824D28);
    v2[1] = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100824D68);
  }
  return result;
}

unint64_t sub_1001B56E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100824D78;
  if (!qword_100824D78)
  {
    v1 = sub_100007050(&qword_100824D80);
    v2[2] = &protocol witness table for AxisGridLine;
    v2[0] = sub_100007050(&qword_100824D28);
    v2[1] = sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    v2[3] = swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of AxisMark.offset(x:y:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100824D78);
  }
  return result;
}

void sub_1001B57A0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1001B449C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

void sub_1001B57AC(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1001B423C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_1001B57B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1001B57E8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1001B5810()
{
  return sub_100028384(&qword_100824DD0, &qword_100824DD8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

id sub_1001B583C@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void (*a4)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t a5@<X8>)
{
  id v9;
  id result;
  void *v11;
  id v12;
  void *v13;
  double v14;
  id v15;
  id v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  double v19;
  id v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  void *v32;
  CHWorkoutDetailHeartRateTableViewCell *v33;
  CHWorkoutDetailHeartRateTableViewCell *v34;
  unint64_t v35;
  void (*v36)(_QWORD, _QWORD, _QWORD, _QWORD);
  const char *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  void *v67;
  id v68;
  NSString v69;
  id v70;
  unint64_t v71;
  CHWorkoutDetailHeartRateTableViewCell *v72;
  CHWorkoutDetailHeartRateTableViewCell *v73;
  id v74;
  NSString v75;
  id v76;
  uint64_t v77;
  CHWorkoutDetailHeartRateTableViewCell *v78;
  CHWorkoutDetailHeartRateTableViewCell *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v100;
  id v101;

  if (!a1 || !a2)
  {
    v67 = (void *)objc_opt_self(NSBundle);
    v68 = objc_msgSend(v67, "mainBundle");
    v69 = String._bridgeToObjectiveC()();
    v70 = objc_msgSend(v68, "localizedStringForKey:value:table:", v69, 0, 0);

    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    v74 = objc_msgSend(v67, "mainBundle");
    v75 = String._bridgeToObjectiveC()();
    v76 = objc_msgSend(v74, "localizedStringForKey:value:table:", v75, 0, 0);

    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v79 = v78;

    sub_100437618(v71, (uint64_t)v73, v77, (uint64_t)v79, 0, (CHWorkoutDetailHeartRateTableViewCell *)0xE000000000000000, a4, a5);
    swift_bridgeObjectRelease(v73, v80, v81, v82, v83, v84, v85, v86);
    swift_bridgeObjectRelease(v79, v87, v88, v89, v90, v91, v92, v93);
    v94 = type metadata accessor for AttributedString(0);
    v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56);
    v96 = a5;
    v97 = 0;
    return (id)v95(v96, v97, 1, v94);
  }
  v9 = a1;
  v101 = a2;
  result = objc_msgSend(a3, "unitManager");
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(result, "userActiveEnergyBurnedUnit");

    v13 = (void *)objc_opt_self(FIUIFormattingManager);
    v100 = v9;
    objc_msgSend(v9, "doubleValueForUnit:", v12);
    v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v14);
    v16 = objc_msgSend(v13, "stringWithNumber:decimalPrecision:roundingMode:", v15, 1, 1);

    if (v16)
    {
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v18 = v17;

      objc_msgSend(v101, "doubleValueForUnit:", v12);
      v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v19);
      v21 = objc_msgSend(v13, "stringWithNumber:decimalPrecision:roundingMode:", v20, 1, 1);

      if (v21)
      {
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v31 = v30;

        result = objc_msgSend(a3, "localizedShortActiveEnergyUnitString");
        if (result)
        {
          v32 = result;
          static String._unconditionallyBridgeFromObjectiveC(_:)(result);
          v34 = v33;

          v35 = sub_100038CA0();
          v36 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))StringProtocol.localizedUppercase.getter(&type metadata for String, v35);
          v38 = (CHWorkoutDetailHeartRateTableViewCell *)v37;
          swift_bridgeObjectRelease(v34, v37, v39, v40, v41, v42, v43, v44);
          sub_100437618(v98, (uint64_t)v18, v29, (uint64_t)v31, v36, v38, a4, a5);
          swift_bridgeObjectRelease(v38, v45, v46, v47, v48, v49, v50, v51);
          swift_bridgeObjectRelease(v31, v52, v53, v54, v55, v56, v57, v58);
          swift_bridgeObjectRelease(v18, v59, v60, v61, v62, v63, v64, v65);

          v66 = type metadata accessor for AttributedString(0);
          return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(a5, 0, 1, v66);
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease(v18, v22, v23, v24, v25, v26, v27, v28);
    }

    v94 = type metadata accessor for AttributedString(0);
    v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56);
    v96 = a5;
    v97 = 1;
    return (id)v95(v96, v97, 1, v94);
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1001B5C6C@<X0>(void *a1@<X0>, void *a2@<X1>, void (*a3)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  double v19;
  id v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  id v32;
  NSString v33;
  id v34;
  void (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  CHWorkoutDetailHeartRateTableViewCell *v36;
  void *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  CHWorkoutDetailHeartRateTableViewCell *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  NSString v63;
  id v64;
  unint64_t v65;
  CHWorkoutDetailHeartRateTableViewCell *v66;
  CHWorkoutDetailHeartRateTableViewCell *v67;
  id v68;
  NSString v69;
  id v70;
  uint64_t v71;
  CHWorkoutDetailHeartRateTableViewCell *v72;
  CHWorkoutDetailHeartRateTableViewCell *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  unint64_t v93;
  void *v95;

  if (!a1 || !a2)
  {
    v61 = (void *)objc_opt_self(NSBundle);
    v62 = objc_msgSend(v61, "mainBundle");
    v63 = String._bridgeToObjectiveC()();
    v64 = objc_msgSend(v62, "localizedStringForKey:value:table:", v63, 0, 0);

    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v68 = objc_msgSend(v61, "mainBundle");
    v69 = String._bridgeToObjectiveC()();
    v70 = objc_msgSend(v68, "localizedStringForKey:value:table:", v69, 0, 0);

    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    sub_100437618(v65, (uint64_t)v67, v71, (uint64_t)v73, 0, (CHWorkoutDetailHeartRateTableViewCell *)0xE000000000000000, a3, a4);
    swift_bridgeObjectRelease(v67, v74, v75, v76, v77, v78, v79, v80);
    swift_bridgeObjectRelease(v73, v81, v82, v83, v84, v85, v86, v87);
    goto LABEL_7;
  }
  v8 = (void *)objc_opt_self(HKUnit);
  v9 = a1;
  v10 = a2;
  v11 = objc_msgSend(v8, "minuteUnit");
  v12 = (void *)objc_opt_self(FIUIFormattingManager);
  v95 = v9;
  objc_msgSend(v9, "doubleValueForUnit:", v11);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v13);
  v15 = objc_msgSend(v12, "stringWithNumber:decimalPrecision:roundingMode:", v14, 1, 1);

  v16 = v10;
  if (!v15)
  {
LABEL_9:

    v88 = type metadata accessor for AttributedString(0);
    v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56);
    v90 = a4;
    v91 = 1;
    return v89(v90, v91, 1, v88);
  }
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  objc_msgSend(v16, "doubleValueForUnit:", v11);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v19);
  v21 = objc_msgSend(v12, "stringWithNumber:decimalPrecision:roundingMode:", v20, 1, 1);

  if (!v21)
  {
    swift_bridgeObjectRelease(v18, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_9;
  }
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v31 = v30;

  v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, 0, 0);

  v35 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v36 = v18;
  v37 = v16;
  v39 = v38;

  sub_100437618(v93, (uint64_t)v36, v29, (uint64_t)v31, v35, v39, a3, a4);
  swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease(v31, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v36, v54, v55, v56, v57, v58, v59, v60);

LABEL_7:
  v88 = type metadata accessor for AttributedString(0);
  v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56);
  v90 = a4;
  v91 = 0;
  return v89(v90, v91, 1, v88);
}

uint64_t sub_1001B6064@<X0>(void *a1@<X0>, void *a2@<X1>, void (*a3)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  double v19;
  id v20;
  id v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  id v32;
  NSString v33;
  id v34;
  void (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  CHWorkoutDetailHeartRateTableViewCell *v36;
  void *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  CHWorkoutDetailHeartRateTableViewCell *v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  NSString v63;
  id v64;
  unint64_t v65;
  CHWorkoutDetailHeartRateTableViewCell *v66;
  CHWorkoutDetailHeartRateTableViewCell *v67;
  id v68;
  NSString v69;
  id v70;
  uint64_t v71;
  CHWorkoutDetailHeartRateTableViewCell *v72;
  CHWorkoutDetailHeartRateTableViewCell *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  unint64_t v93;
  void *v95;

  if (!a1 || !a2)
  {
    v61 = (void *)objc_opt_self(NSBundle);
    v62 = objc_msgSend(v61, "mainBundle");
    v63 = String._bridgeToObjectiveC()();
    v64 = objc_msgSend(v62, "localizedStringForKey:value:table:", v63, 0, 0);

    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v68 = objc_msgSend(v61, "mainBundle");
    v69 = String._bridgeToObjectiveC()();
    v70 = objc_msgSend(v68, "localizedStringForKey:value:table:", v69, 0, 0);

    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    sub_100437618(v65, (uint64_t)v67, v71, (uint64_t)v73, 0, (CHWorkoutDetailHeartRateTableViewCell *)0xE000000000000000, a3, a4);
    swift_bridgeObjectRelease(v67, v74, v75, v76, v77, v78, v79, v80);
    swift_bridgeObjectRelease(v73, v81, v82, v83, v84, v85, v86, v87);
    goto LABEL_7;
  }
  v8 = (void *)objc_opt_self(HKUnit);
  v9 = a1;
  v10 = a2;
  v11 = objc_msgSend(v8, "countUnit");
  v12 = (void *)objc_opt_self(FIUIFormattingManager);
  v95 = v9;
  objc_msgSend(v9, "doubleValueForUnit:", v11);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v13);
  v15 = objc_msgSend(v12, "stringWithNumber:decimalPrecision:", v14, 1);

  v16 = v10;
  if (!v15)
  {
LABEL_9:

    v88 = type metadata accessor for AttributedString(0);
    v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56);
    v90 = a4;
    v91 = 1;
    return v89(v90, v91, 1, v88);
  }
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  objc_msgSend(v16, "doubleValueForUnit:", v11);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v19);
  v21 = objc_msgSend(v12, "stringWithNumber:decimalPrecision:", v20, 1);

  if (!v21)
  {
    swift_bridgeObjectRelease(v18, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_9;
  }
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v31 = v30;

  v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, 0, 0);

  v35 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v36 = v18;
  v37 = v16;
  v39 = v38;

  sub_100437618(v93, (uint64_t)v36, v29, (uint64_t)v31, v35, v39, a3, a4);
  swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
  swift_bridgeObjectRelease(v31, v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v36, v54, v55, v56, v57, v58, v59, v60);

LABEL_7:
  v88 = type metadata accessor for AttributedString(0);
  v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56);
  v90 = a4;
  v91 = 0;
  return v89(v90, v91, 1, v88);
}

id sub_1001B6454(void *a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  double v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  id v30;

  if (!a1 || !a2)
    return sub_1000382A0(11565, 0xE200000000000000, (void *)0x2D2D, 0xE200000000000000, 0, 0xE000000000000000, a3);
  v6 = (void *)objc_opt_self(HKUnit);
  v30 = a2;
  v7 = a1;
  v8 = objc_msgSend(v6, "minuteUnit");
  v9 = (void *)objc_opt_self(FIUIFormattingManager);
  objc_msgSend(v7, "doubleValueForUnit:", v8);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v10);
  v12 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:roundingMode:", v11, 1, 1);

  if (!v12)
  {
LABEL_8:

    return 0;
  }
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  objc_msgSend(v30, "doubleValueForUnit:", v8);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v15);
  v17 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:roundingMode:", v16, 1, 1);

  if (!v17)
  {
    swift_bridgeObjectRelease(v14);
    goto LABEL_8;
  }
  v18 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = sub_1000382A0(v29, v14, v18, v20, v24, v26, a3);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v26);
  return v27;
}

id sub_1001B66F8(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id result;
  void *v9;
  id v10;
  void *v11;
  double v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;

  if (!a1 || !a2)
    return sub_1000382A0(11565, 0xE200000000000000, (void *)0x2D2D, 0xE200000000000000, 0, 0xE000000000000000, a4);
  v33 = a2;
  v7 = a1;
  result = objc_msgSend(a3, "unitManager");
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, "userActiveEnergyBurnedUnit");

    v11 = (void *)objc_opt_self(FIUIFormattingManager);
    objc_msgSend(v7, "doubleValueForUnit:", v10);
    v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v12);
    v14 = objc_msgSend(v11, "stringWithNumber:decimalPrecision:roundingMode:", v13, 1, 1);

    if (!v14)
    {

      return 0;
    }
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;

    objc_msgSend(v33, "doubleValueForUnit:", v10);
    v18 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v17);
    v19 = objc_msgSend(v11, "stringWithNumber:decimalPrecision:roundingMode:", v18, 1, 1);

    if (!v19)
    {
      swift_bridgeObjectRelease(v16);

      return 0;
    }
    v20 = v10;
    v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    result = objc_msgSend(a3, "localizedShortActiveEnergyUnitString");
    if (result)
    {
      v24 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v26 = v25;

      v27 = sub_100038CA0();
      v28 = StringProtocol.localizedUppercase.getter(&type metadata for String, v27);
      v30 = v29;
      swift_bridgeObjectRelease(v26);
      v31 = sub_1000382A0(v32, v16, v21, v23, v28, v30, a4);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v30);
      return v31;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1001B69BC(void *a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  double v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  id v30;

  if (!a1 || !a2)
    return sub_1000382A0(11565, 0xE200000000000000, (void *)0x2D2D, 0xE200000000000000, 0, 0xE000000000000000, a3);
  v6 = (void *)objc_opt_self(HKUnit);
  v30 = a2;
  v7 = a1;
  v8 = objc_msgSend(v6, "countUnit");
  v9 = (void *)objc_opt_self(FIUIFormattingManager);
  objc_msgSend(v7, "doubleValueForUnit:", v8);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v10);
  v12 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:", v11, 1);

  if (!v12)
  {
LABEL_8:

    return 0;
  }
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  objc_msgSend(v30, "doubleValueForUnit:", v8);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v15);
  v17 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:", v16, 1);

  if (!v17)
  {
    swift_bridgeObjectRelease(v14);
    goto LABEL_8;
  }
  v18 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = sub_1000382A0(v29, v14, v18, v20, v24, v26, a3);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v26);
  return v27;
}

uint64_t destroy for FitnessPlusCardFactory(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 48);

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(a1 + 8));
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v2);
}

uint64_t initializeWithCopy for FitnessPlusCardFactory(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v11;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, a2 + 48);
  return a1;
}

void **assignWithCopy for FitnessPlusCardFactory(void **a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;

  v5 = (_QWORD *)(a2 + 48);
  v4 = *(void **)a2;
  v6 = a1 + 1;
  v7 = *a1;
  *a1 = *(void **)a2;
  v8 = a1 + 6;
  v9 = v4;

  sub_1000F1A58(v6, (_QWORD *)(a2 + 8));
  sub_1000F1A58(v8, v5);
  return a1;
}

__n128 initializeWithTake for FitnessPlusCardFactory(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for FitnessPlusCardFactory(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(a1 + 48));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for FitnessPlusCardFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FitnessPlusCardFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FitnessPlusCardFactory()
{
  return &type metadata for FitnessPlusCardFactory;
}

uint64_t sub_1001B6EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  __int128 v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;

  v7 = v6;
  v13 = a3;
  v14 = sub_100047110((uint64_t *)&unk_10082E690);
  result = __chkstk_darwin(v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v13 < 3 || a1 ^ 5 | a2)
  {
    *(_QWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  else
  {
    sub_1001B7120(a4, (uint64_t)&v33);
    v18 = v35;
    if (v35)
    {
      v19 = v36;
      sub_100016804(&v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      v20 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 0, 1, v20);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(&v33);
    }
    else
    {
      sub_1001B7168((uint64_t)&v33);
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 1, 1, v21);
    }
    v22 = *v7;
    KeyPath = swift_getKeyPath(&unk_10062ACB8);
    v24 = swift_getKeyPath(&unk_10062ACE0);
    static Published.subscript.getter(&v33, v22, KeyPath, v24);
    swift_release(KeyPath);
    swift_release(v24);
    v25 = *((_QWORD *)&v33 + 1);
    v31 = v33;
    v26 = v34;
    v27 = swift_getKeyPath(&unk_10062AD00);
    v28 = swift_getKeyPath(&unk_10062AD28);
    static Published.subscript.getter(&v33, v22, v27, v28);
    swift_release(v27);
    swift_release(v28);
    LODWORD(v28) = v33;
    sub_1000252E0((uint64_t)(v7 + 1), (uint64_t)&v33);
    sub_1000252E0((uint64_t)(v7 + 6), (uint64_t)v32);
    *(_QWORD *)(a6 + 24) = type metadata accessor for FitnessPlusUpNextCard(0);
    *(_QWORD *)(a6 + 32) = &off_100792D50;
    v29 = (char *)sub_10004C480((_QWORD *)a6);
    return sub_10027D5D4((uint64_t)v17, a5 & 1, 1, v31, v25, v26, v28, &v33, v29, v32);
  }
  return result;
}

uint64_t sub_1001B7120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100832410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B7168(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_100832410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1001B71A8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  double result;
  __int128 v8;
  char v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062ACB8);
  v5 = swift_getKeyPath(&unk_10062ACE0);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v9;
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1001B7230(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = *(_BYTE *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_10062ACB8);
  v7 = swift_getKeyPath(&unk_10062ACE0);
  v9[0] = v2;
  v9[1] = v3;
  v10 = v5;
  sub_1001B73B0(v2, v3, v5);
  return static Published.subscript.setter(v9, v4, KeyPath, v7);
}

uint64_t sub_1001B72C0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062AD00);
  v5 = swift_getKeyPath(&unk_10062AD28);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001B7340(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062AD00);
  v5 = swift_getKeyPath(&unk_10062AD28);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001B73B0(uint64_t result, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
      return result;
    result = a2;
  }
  return swift_bridgeObjectRetain(result);
}

uint64_t sub_1001B73CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  return sub_1001B6EC0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1001B73D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE v31[4];
  int v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v32 = a6;
  v16 = a3;
  v17 = sub_100047110(&qword_100824DE0);
  __chkstk_darwin(v17);
  v19 = &v31[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_100047110((uint64_t *)&unk_10082E690);
  result = __chkstk_darwin(v20);
  v23 = &v31[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v16 < 3 || a1 ^ 6 | a2)
  {
    *(_QWORD *)(a9 + 32) = 0;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
  }
  else
  {
    v24 = a4 & 1;
    sub_100021CC0(a5, (uint64_t)v33, &qword_100832410);
    v25 = v34;
    if (v34)
    {
      v26 = v35;
      sub_100016804(v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
      v27 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v23, 0, 1, v27);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v33);
    }
    else
    {
      sub_1001B7168((uint64_t)v33);
      v28 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v23, 1, 1, v28);
    }
    v29 = a7 + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection;
    swift_beginAccess(a7 + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection, v33, 0, 0);
    sub_100021CC0(v29, (uint64_t)v19, &qword_100824DE0);
    *(_QWORD *)(a9 + 24) = type metadata accessor for CatalogTipCard(0);
    *(_QWORD *)(a9 + 32) = &off_100792DA0;
    v30 = sub_10004C480((_QWORD *)a9);
    swift_retain(a8);
    return sub_10027E448((uint64_t)v23, v24, v32 & 1, 1, (uint64_t)v19, a8, v30);
  }
  return result;
}

uint64_t sub_1001B75F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  return sub_10029547C(a1, a2, a3, a4 & 1, a5, a6, a7);
}

double sub_1001B7630@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  return sub_1002D445C(a1, a2, a3, a4 & 1, a5, a6, a7);
}

uint64_t sub_1001B7674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;

  return sub_100346994(a1, a2, a3, a4 & 1, a5, a6, *(_QWORD *)v7, *(void **)(v7 + 8), a7, *(void **)(v7 + 16));
}

void sub_1001B76A0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  if (a3 == 1)
  {
    sub_100433EC0(a1, a2, a4, a5 & 1, a6);
  }
  else if (a3 == 3 && a1 == 4 && !a2)
  {
    sub_1004343AC(a4, a5 & 1, (_QWORD *)a6);
  }
  else
  {
    *(_QWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
}

void sub_1001B772C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  sub_10050EFE8(a1, a2, a3, a4 & 1, a5, a6, a7);
}

void sub_1001B7734(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  void **v7;

  sub_100570258(a1, a2, a3, a4 & 1, a5, a6, *v7, a7);
}

uint64_t sub_1001B7740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t *v7;

  return sub_1001B73D4(a1, a2, a3, a4 & 1, a5, a6, *v7, v7[1], a7);
}

id sub_1001B774C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  NSString v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  NSString v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v58;
  id v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  unint64_t v65;
  id v66;
  uint64_t v67;

  v2 = v1;
  v67 = type metadata accessor for AttributedString(0);
  v63 = *(_QWORD *)(v67 - 8);
  v4 = __chkstk_darwin(v67);
  v61 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v58 - v6;
  if (qword_10081D678 != -1)
    swift_once(&qword_10081D678, sub_1001A5270);
  v8 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v9 = (void *)objc_opt_self(UIColor);
  v60 = v9;
  v10 = objc_msgSend(v9, "secondaryLabelColor");
  v11 = (void *)UILabel.withTextColor(_:)(v10);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setText:", v12);

  v13 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v14 = objc_msgSend(v9, "secondaryLabelColor");
  v15 = (void *)UILabel.withTextColor(_:)(v14);

  v16 = objc_msgSend(a1, "fitnessUIFormattingManager");
  v66 = (id)objc_opt_self(NSBundle);
  v17 = objc_msgSend(v66, "mainBundle");
  v18 = String._bridgeToObjectiveC()();
  v19 = a1;
  v59 = a1;
  v20 = v18;
  v21 = objc_msgSend(v17, "localizedStringForKey:value:table:", v18, 0, 0);
  v62 = v2;
  v22 = v21;

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = v7;
  AttributedString.init(stringLiteral:)(v23, v25);

  v27 = sub_1001B8BE4();
  v28 = v63;
  v64 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v65 = v27;
  v29 = v61;
  v30 = v67;
  v64(v61, v26, v67);
  v31 = (void *)NSAttributedString.init(_:)(v29);
  objc_msgSend(v15, "setAttributedText:", v31);

  v63 = *(_QWORD *)(v28 + 8);
  ((void (*)(char *, uint64_t))v63)(v26, v30);
  v32 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v33 = v60;
  v34 = objc_msgSend(v60, "secondaryLabelColor");
  v35 = (void *)UILabel.withTextColor(_:)(v34);

  v36 = objc_msgSend(v19, "fitnessUIFormattingManager");
  v37 = objc_msgSend(v66, "mainBundle");
  v38 = String._bridgeToObjectiveC()();
  v39 = objc_msgSend(v37, "localizedStringForKey:value:table:", v38, 0, 0);

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;

  AttributedString.init(stringLiteral:)(v40, v42);
  v43 = v67;
  v64(v29, v26, v67);
  v44 = (void *)NSAttributedString.init(_:)(v29);
  objc_msgSend(v35, "setAttributedText:", v44);

  v45 = v43;
  ((void (*)(char *, uint64_t))v63)(v26, v43);
  v46 = objc_msgSend(v33, "secondaryLabelColor");
  v47 = (void *)UILabel.withTextColor(_:)(v46);

  v48 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v49 = objc_msgSend(v59, "fitnessUIFormattingManager");
  v50 = objc_msgSend(v66, "mainBundle");
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v50, "localizedStringForKey:value:table:", v51, 0, 0);

  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v55 = v54;

  AttributedString.init(stringLiteral:)(v53, v55);
  v64(v29, v26, v45);
  v56 = (void *)NSAttributedString.init(_:)(v29);
  objc_msgSend(v48, "setAttributedText:", v56);

  ((void (*)(char *, uint64_t))v63)(v26, v45);
  objc_msgSend(*(id *)(v62 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView), "setHidden:", 1);
  return sub_1001BB604();
}

void sub_1001B7D50(int a1, uint64_t a2, id a3)
{
  uint64_t v3;
  uint64_t v4;
  id v6;
  void *v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;

  v4 = v3;
  v6 = objc_msgSend(a3, "fitnessUIFormattingManager");
  sub_1001B83C4(0);
  v7 = *(void **)(v3 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel);
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v13);
  swift_bridgeObjectRelease(v12);

  if (round(DownhillRunsStats.duration.getter()) < 3600.0)
    v14 = 3;
  else
    v14 = 2;
  v15 = objc_msgSend(v6, "stringWithDuration:durationFormat:", v14);
  v16 = v15;
  if (v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel);
    v16 = String._bridgeToObjectiveC()();
  }
  else
  {
    v18 = 0;
    v19 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel);
  }
  objc_msgSend(v19, "setText:", v16);
  swift_bridgeObjectRelease(v18);

  v20 = (void *)DownhillRunsStats.distance.getter();
  v21 = sub_1001B8830(v20, a2, v6);

  v22 = (void *)DownhillRunsStats.elevationDescended.getter(objc_msgSend(*(id *)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel), "setAttributedText:", v21));
  v23 = sub_1001B8A0C(v22, v6);

  objc_msgSend(*(id *)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel), "setAttributedText:", v23);
  v24 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView);
  v25 = objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
  objc_msgSend(v24, "setBackgroundColor:", v25);

}

void sub_1001B8090(void *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSString v19;
  uint64_t v20;
  id v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;

  v6 = v5;
  if (a1)
  {
    v11 = a1;
    v12 = objc_msgSend(a5, "fitnessUIFormattingManager");
    sub_1001B83C4(a4 & 1);
    v13 = (void *)objc_opt_self(NSNumberFormatter);
    v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a2);
    v15 = objc_msgSend(v13, "localizedStringFromNumber:numberStyle:", v14, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v17 = v16;

    v18 = *(void **)(v6 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel);
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "setText:", v19);
    swift_bridgeObjectRelease(v17);

    if (round(dispatch thunk of DownhillRun.workoutTime.getter()) < 3600.0)
      v20 = 3;
    else
      v20 = 2;
    v21 = objc_msgSend(v12, "stringWithDuration:durationFormat:", v20);
    v22 = v21;
    if (v21)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v25 = *(void **)(v6 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel);
      v22 = String._bridgeToObjectiveC()();
    }
    else
    {
      v24 = 0;
      v25 = *(void **)(v6 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel);
    }
    objc_msgSend(v25, "setText:", v22);
    swift_bridgeObjectRelease(v24);

    v26 = (void *)dispatch thunk of DownhillRun.distance.getter();
    v27 = sub_1001B8830(v26, a3, v12);

    v28 = (void *)DownhillRun.elevationDescended.getter(objc_msgSend(*(id *)(v6 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel), "setAttributedText:", v27));
    v29 = sub_1001B8A0C(v28, v12);

    objc_msgSend(*(id *)(v6 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel), "setAttributedText:", v29);
  }
  else
  {
    sub_1001B774C(a5);
  }
}

id sub_1001B83C4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  NSString v7;
  void *v8;
  void *v9;
  id result;
  void *v11;
  id v12;
  NSString v13;
  void *v14;
  void *v15;
  id v16;
  NSString v17;
  void *v18;
  id v19;
  id v20;
  NSString v21;
  void *v22;

  v2 = v1;
  if (qword_10081D680 != -1)
    swift_once(&qword_10081D680, sub_1001A5284);
  v4 = (void *)UILabel.withFont(_:)(qword_100869FF0);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v6 = (void *)UILabel.withTextColor(_:)(v5);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setText:", v7);

  if (qword_10081D688 != -1)
    swift_once(&qword_10081D688, sub_1001A536C);
  v8 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  v9 = (void *)objc_opt_self(ARUIMetricColors);
  result = objc_msgSend(v9, "elapsedTimeColors");
  if (!result)
  {
    __break(1u);
    goto LABEL_14;
  }
  v11 = result;
  v12 = objc_msgSend(result, "nonGradientTextColor");

  objc_msgSend(v8, "setTextColor:", v12);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setText:", v13);

  v14 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  result = objc_msgSend(v9, "distanceColors");
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v15 = result;
  v16 = objc_msgSend(result, "nonGradientTextColor");

  objc_msgSend(v14, "setTextColor:", v16);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setText:", v17);

  v18 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  v19 = objc_msgSend(v9, "elevationColors");
  v20 = objc_msgSend(v19, "nonGradientTextColor");

  objc_msgSend(v18, "setTextColor:", v20);
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "setText:", v21);

  result = objc_msgSend(*(id *)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView), "setHidden:", a1 & 1);
  if ((a1 & 1) != 0)
  {
    v22 = *(void **)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard);
    if (v22)
      objc_msgSend(v22, "setActive:", 0);
    result = *(id *)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow);
    if (result)
      return objc_msgSend(result, "setActive:", 1);
  }
  return result;
}

id sub_1001B87E0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailFourColumnDownhillRunTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailFourColumnDownhillRunTableViewCell()
{
  return objc_opt_self(CHWorkoutDetailFourColumnDownhillRunTableViewCell);
}

id sub_1001B8830(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  double v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  if (!a1)
    return 0;
  v5 = a1;
  v6 = FIUIDistanceTypeForActivityType(a2);
  v24 = 1;
  v7 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
  objc_msgSend(v5, "doubleValueForUnit:", v7);
  v9 = v8;

  v10 = objc_msgSend(a3, "localizedNaturalScaleStringWithDistanceInMeters:distanceType:unitStyle:usedUnit:", v6, 0, &v24, v9);
  if (!v10)
  {

    return 0;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  result = objc_msgSend(a3, "localizedShortUnitStringForDistanceUnit:", v24);
  if (result)
  {
    v16 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v18 = v17;

    v19 = sub_100038CA0();
    v20 = StringProtocol.localizedUppercase.getter(&type metadata for String, v19);
    v22 = v21;
    swift_bridgeObjectRelease(v18);
    if (qword_10081D688 != -1)
      swift_once(&qword_10081D688, sub_1001A536C);
    v23 = sub_1000387C4(v12, v14, v20, v22, (void *)qword_100869FF8);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v14);

    return v23;
  }
  __break(1u);
  return result;
}

id sub_1001B8A0C(void *a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id result;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  if (!a1)
    return 0;
  v4 = (void *)objc_opt_self(HKUnit);
  v5 = a1;
  v6 = objc_msgSend(v4, "meterUnit");
  objc_msgSend(v5, "doubleValueForUnit:", v6);
  v8 = v7;

  v9 = objc_msgSend(a2, "localizedStringWithDistanceInMeters:distanceType:unitStyle:", 5, 0, v8);
  if (!v9)
  {

    return 0;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  result = objc_msgSend(a2, "unitManager");
  if (result)
  {
    v15 = result;
    v16 = objc_msgSend(result, "userDistanceElevationUnit");

    result = objc_msgSend(a2, "localizedShortUnitStringForDistanceUnit:", v16);
    if (result)
    {
      v17 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v19 = v18;

      v20 = sub_100038CA0();
      v21 = StringProtocol.localizedUppercase.getter(&type metadata for String, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v19);
      if (qword_10081D688 != -1)
        swift_once(&qword_10081D688, sub_1001A536C);
      v24 = sub_1000387C4(v11, v13, v21, v23, (void *)qword_100869FF8);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v13);

      return v24;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001B8BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008202D0;
  if (!qword_1008202D0)
  {
    v1 = objc_opt_self(NSAttributedString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1008202D0);
  }
  return result;
}

id sub_1001B8DAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingNavigationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001B8F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000F61B4(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 56));

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp22WorkoutDetailDataStore__inWorkoutData;
  v2 = sub_100047110(&qword_100820568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC10FitnessApp22WorkoutDetailDataStore__inWorkoutProperties;
  v4 = sub_100047110(&qword_100820560);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_1001B8FA8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062AEF8);
  v4 = swift_getKeyPath(&unk_10062AF20);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(v4);
  return swift_release(KeyPath);
}

void (*sub_1001B900C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_10062AEF8);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_10062AF20);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001B9084;
}

void sub_1001B9084(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_1001B90D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062AEB0);
  v2 = swift_getKeyPath(&unk_10062AED8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

_QWORD *sub_1001B9140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  char *v37;
  id v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  id *v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  char *v47;
  uint64_t v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  __n128 v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t, __n128);
  char *v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  char *v69;
  char v70;
  _QWORD *v71;
  uint64_t KeyPath;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  double v79;
  char *v80;
  void (*v81)(_QWORD *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 v88;
  _QWORD *v89;
  __n128 v90;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  id *v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  char *v112;

  v103 = a1;
  v2 = type metadata accessor for WorkoutChartDataElement(0);
  v96 = *(_QWORD *)(v2 - 8);
  v97 = v2;
  __chkstk_darwin(v2);
  v99 = (uint64_t)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110((uint64_t *)&unk_100827440);
  __chkstk_darwin(v4);
  v112 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v111 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v92 - v10;
  v12 = sub_100047110((uint64_t *)&unk_100828370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v107 = (char *)&v92 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v92 - v18;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v95 = (char **)((char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __chkstk_darwin(v22);
  v98 = (char *)&v92 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v92 - v27;
  v29 = __chkstk_darwin(v26);
  v106 = (char *)&v92 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v92 - v32;
  v34 = __chkstk_darwin(v31);
  v94 = (char *)&v92 - v35;
  v36 = (id *)v1;
  v37 = *(char **)(v1 + 24);
  v101 = v34;
  v108 = v36;
  v109 = v21;
  v105 = v33;
  v92 = v11;
  v104 = v37;
  v100 = v15;
  if (v37)
  {
    v110 = sub_1005AA694();
    v38 = objc_msgSend(v37, "startDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v39 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v39(v19, v33, v20);
    v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
    v40(v19, 0, 1, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
    {
      v39(v94, v19, v20);
      v44 = v109;
      v43 = v104;
      v33 = v105;
      goto LABEL_8;
    }
    v33 = v105;
    v41 = v108;
  }
  else
  {
    v41 = v36;
    v110 = sub_10032B7D0();
    v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
    v40(v19, 1, 1, v20);
  }
  v42 = objc_msgSend(v41[2], "startDate", v92);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

  sub_10001BE90((uint64_t)v19, (uint64_t *)&unk_100828370);
  v43 = v104;
  if (!v104)
  {
    v51 = (uint64_t)v107;
    v20 = v101;
    v40(v107, 1, 1, v101);
    v49 = v108;
    v44 = v109;
    goto LABEL_14;
  }
  v20 = v101;
  v44 = v109;
LABEL_8:
  v45 = objc_msgSend(v43, "endDate", v92);
  if (v45)
  {
    v46 = v45;
    v47 = (char *)v100;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v48 = 0;
    v49 = v108;
  }
  else
  {
    v48 = 1;
    v49 = v108;
    v47 = (char *)v100;
  }
  v40(v47, v48, 1, v20);
  v50 = (uint64_t)v47;
  v51 = (uint64_t)v107;
  sub_1001B9DF4(v50, (uint64_t)v107);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v51, 1, v20) != 1)
  {
    v52 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v106, v51, v20);
    goto LABEL_15;
  }
LABEL_14:
  v52 = v106;
  v53 = objc_msgSend(v49[2], "endDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

  sub_10001BE90(v51, (uint64_t *)&unk_100828370);
LABEL_15:
  v54 = v110;
  v108 = *(id **)(v44 + 16);
  ((void (*)(char *, char *, uint64_t))v108)(v28, v94, v20);
  if ((static Date.< infix(_:_:)(v28, v52) & 1) != 0)
  {
    v110 = v54;
    v104 = (char *)v54[2];
    v55 = v92;
    v56 = OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_bucketDuration;
    v93 = OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_workoutDuration;
    v100 = _swiftEmptyArrayStorage;
    v57 = v103;
    v102 = v28;
    v107 = (char *)OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_bucketDuration;
    do
    {
      ((void (*)(char *, char *, uint64_t))v108)(v33, v28, v20);
      DateInterval.init(start:duration:)(v33, *(double *)(v57 + v56));
      v61 = v104;
      if (v104)
      {
        v62 = v55;
        v63 = (char *)v110 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
        v64 = swift_bridgeObjectRetain(v110);
        v65 = *(_QWORD *)(v7 + 72);
        v66 = *(void (**)(char *, char *, uint64_t, __n128))(v7 + 16);
        v67 = v112;
        while (1)
        {
          v66(v67, v63, v6, v64);
          v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
          v68(v67, 0, 1, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v67, 1, v6) == 1)
          {
            swift_bridgeObjectRelease(v110);
            v55 = v62;
            v20 = v101;
            v28 = v102;
            v57 = v103;
            goto LABEL_18;
          }
          v69 = v111;
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v111, v67, v6);
          v70 = DateInterval.intersects(_:)(v69);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v69, v6);
          if ((v70 & 1) != 0)
            break;
          v63 += v65;
          --v61;
          v67 = v112;
          if (!v61)
          {
            v55 = v62;
            v20 = v101;
            v28 = v102;
            v57 = v103;
            v71 = v110;
            goto LABEL_27;
          }
        }
        swift_bridgeObjectRelease(v110);
        KeyPath = swift_getKeyPath(&unk_10062AE68);
        v73 = swift_getKeyPath(&unk_10062AE90);
        v74 = v95;
        v75 = v103;
        static Published.subscript.getter(v95, v103, KeyPath, v73);
        swift_release(KeyPath);
        swift_release(v73);
        v76 = *(double *)&v107[v75];
        v77 = ceil(*(double *)(v75 + v93) / v76) + -1.0;
        v79 = floor(Date.timeIntervalSince(_:)(v74) / v76);
        if (v77 < v79)
          v79 = v77;
        v80 = v98;
        Date.addingTimeInterval(_:)(v78, v76 * 0.5 + v76 * v79);
        v81 = *(void (**)(_QWORD *, uint64_t))(v109 + 8);
        v20 = v101;
        v81(v74, v101);
        v82 = v99;
        ((void (*)(uint64_t, char *, uint64_t))v108)(v99, v80, v20);
        v83 = v97;
        *(_QWORD *)(v82 + *(int *)(v97 + 20)) = 0;
        *(_QWORD *)(v82 + *(int *)(v83 + 24)) = 0;
        *(_QWORD *)(v82 + *(int *)(v83 + 28)) = 0;
        if ((swift_isUniquelyReferenced_nonNull_native((char *)v100) & 1) != 0)
        {
          v55 = v62;
          v84 = (unint64_t)v100;
        }
        else
        {
          v84 = sub_10013FD24(0, v100[2] + 1, 1, (unint64_t)v100);
          v55 = v62;
        }
        v86 = *(_QWORD *)(v84 + 16);
        v85 = *(_QWORD *)(v84 + 24);
        v28 = v102;
        if (v86 >= v85 >> 1)
          v84 = sub_10013FD24(v85 > 1, v86 + 1, 1, v84);
        *(_QWORD *)(v84 + 16) = v86 + 1;
        v87 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
        v100 = (_QWORD *)v84;
        sub_1001B9DB0(v99, v84 + v87 + *(_QWORD *)(v96 + 72) * v86);
        v58 = ((uint64_t (*)(char *, uint64_t))v81)(v98, v20);
        v33 = v105;
        v56 = (uint64_t)v107;
        v57 = v103;
      }
      else
      {
        v71 = v110;
        swift_bridgeObjectRetain(v110);
        v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
        v67 = v112;
LABEL_27:
        v68(v67, 1, 1, v6);
        swift_bridgeObjectRelease(v71);
LABEL_18:
        v33 = v105;
        v56 = (uint64_t)v107;
      }
      Date.addingTimeInterval(_:)(v58, *(double *)(v57 + v56));
      v59 = v109;
      v60 = *(void (**)(char *, uint64_t))(v109 + 8);
      v60(v28, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v55, v6);
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v28, v33, v20);
      v52 = v106;
    }
    while ((static Date.< infix(_:_:)(v28, v106) & 1) != 0);
    v90 = swift_bridgeObjectRelease(v110);
    v89 = v100;
    ((void (*)(char *, uint64_t, __n128))v60)(v28, v20, v90);
  }
  else
  {
    v88 = swift_bridgeObjectRelease(v54);
    v60 = *(void (**)(char *, uint64_t))(v44 + 8);
    v89 = _swiftEmptyArrayStorage;
    ((void (*)(char *, uint64_t, __n128))v60)(v28, v20, v88);
  }
  v60(v52, v20);
  v60(v94, v20);
  return v89;
}

uint64_t sub_1001B9A18()
{
  uint64_t v0;

  sub_1001B8F04();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001B9A3C()
{
  return type metadata accessor for WorkoutDetailDataStore(0);
}

uint64_t type metadata accessor for WorkoutDetailDataStore(uint64_t a1)
{
  uint64_t result;

  result = qword_100824E78;
  if (!qword_100824E78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WorkoutDetailDataStore);
  return result;
}

void sub_1001B9A80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = "\b";
  v6[2] = &unk_10062AE50;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000DBE4C(319, &qword_1008202E8, &qword_1008202F0);
  if (v3 <= 0x3F)
  {
    v6[6] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000DBE4C(319, &qword_1008202F8, (uint64_t *)&unk_100820300);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

_QWORD *sub_1001B9B58(void *a1, void *a2, void *a3, void *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  v38 = a3;
  v39 = a4;
  v36 = a1;
  v37 = a2;
  v35 = sub_100047110(&qword_100820560);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100820568);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_1008202F0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v4[5] = 0;
  swift_unknownObjectWeakInit(v4 + 4, 0);
  v18 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp22WorkoutDetailDataStore__inWorkoutData;
  v19 = type metadata accessor for WorkoutChartViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  sub_1001048E0((uint64_t)v17, (uint64_t)v15);
  Published.init(initialValue:)(v15, v12);
  sub_10001BE90((uint64_t)v17, &qword_1008202F0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v11, v8);
  v20 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp22WorkoutDetailDataStore__inWorkoutProperties;
  v40 = 0;
  v21 = sub_100047110((uint64_t *)&unk_100820300);
  Published.init(initialValue:)(&v40, v21);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v20, v7, v35);
  v23 = v36;
  v22 = v37;
  v4[2] = v36;
  v4[3] = v22;
  v25 = v38;
  v24 = v39;
  v4[6] = v38;
  v4[8] = v24;
  v26 = v22;
  v27 = v25;
  v28 = v24;
  v29 = v23;
  v30 = objc_msgSend(v28, "fitnessUIFormattingManager");
  v31 = type metadata accessor for WorkoutChartDataElementFormattingManager();
  v32 = (_QWORD *)swift_allocObject(v31, 48, 7);
  v33 = sub_100133E38();
  v32[2] = v30;
  v32[3] = v29;
  v32[4] = v22;
  v32[5] = v33;
  v4[7] = v32;
  return v4;
}

uint64_t sub_1001B9DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WorkoutChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B9DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100828370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B9E4C(void *a1, unint64_t a2)
{
  id v3;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = a1;
    a1 = (void *)a2;
  }
  return swift_retain(a1);
}

uint64_t sub_1001B9E74(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {

    a1 = (void *)a2;
  }
  return swift_release(a1);
}

ValueMetadata *type metadata accessor for SeymourBrowsingCoordinator()
{
  return &type metadata for SeymourBrowsingCoordinator;
}

uint64_t sub_1001B9EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v0 = type metadata accessor for UserDefaultsKeys(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100824FE0);
  sub_100008398(v4, qword_100824FC0);
  sub_10003CE9C(v4, (uint64_t)qword_100824FC0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for UserDefaultsKeys.personalizedExperienceEnabled(_:), v0);
  v7 = 1;
  return TestProperty.init(_:fallback:)(v3, &v7, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
}

void sub_1001B9F9C(char a1, void *a2, uint64_t a3)
{
  id v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    v9 = swift_allocObject(&unk_10078C670, 24, 7);
    sub_1001BA248((uint64_t)&v13, v9 + 16);
    v10 = sub_100047110(&qword_100824FD8);
    Promise.init(synchronousOperation:)(sub_1001BA290, v9, v10);
  }
  else
  {
    v4 = a2;
    v5 = objc_msgSend(v4, "popToRootViewControllerAnimated:", a1 & 1);
    if (v5)
    {
      v6 = v5;
      v7 = sub_1000E0D58();
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    }
    else
    {
      v8 = 0;
    }
    v13 = v8;
    v11 = swift_allocObject(&unk_10078C698, 24, 7);
    sub_1001BA248((uint64_t)&v13, v11 + 16);
    swift_bridgeObjectRetain(v8);
    v12 = sub_100047110(&qword_100824FD8);
    Promise.init(synchronousOperation:)(sub_1001BA4A8, v11, v12);
    swift_bridgeObjectRelease(v8);

  }
}

uint64_t sub_1001BA0CC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to AppCoordinator.onAppActive()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000DA0E4;
  return AppCoordinator.onAppActive()();
}

void sub_1001BA118(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDidDisconnect(), (void (*)(__n128))&AppCoordinator.reportDidDisconnect());
}

void sub_1001BA12C(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDefaultLaunch(), (void (*)(__n128))&AppCoordinator.reportDefaultLaunch());
}

void sub_1001BA140(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportOpenURLContexts(), (void (*)(__n128))&AppCoordinator.reportOpenURLContexts());
}

void sub_1001BA154(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportContinueUserActivity(), (void (*)(__n128))&AppCoordinator.reportContinueUserActivity());
}

void sub_1001BA168(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDidBecomeActive(), (void (*)(__n128))&AppCoordinator.reportDidBecomeActive());
}

void sub_1001BA17C(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDidEnterBackground(), (void (*)(__n128))&AppCoordinator.reportDidEnterBackground());
}

void sub_1001BA190(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDidSelectTab(), (void (*)(__n128))&AppCoordinator.reportDidSelectTab());
}

void sub_1001BA1A4(uint64_t a1, uint64_t a2)
{
  sub_1001BA1B8(a1, a2, (void (*)(__n128))&MetricSceneLifecycleTracker.reportDidDeselectTab(), (void (*)(__n128))&AppCoordinator.reportDidDeselectTab());
}

void sub_1001BA1B8(uint64_t a1, uint64_t a2, void (*a3)(__n128), void (*a4)(__n128))
{
  uint64_t v4;
  unint64_t v5;
  __n128 v7;
  void *v9;
  __n128 v10;

  v5 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x8000000000000000) != 0)
  {
    v9 = *(void **)v4;
    v10 = swift_retain(v9);
    a4(v10);
    sub_1001B9E74(v9, v5);
  }
  else
  {
    v7 = swift_retain(*(_QWORD *)(v4 + 8));
    a3(v7);
    swift_release(v5);
  }
}

uint64_t sub_1001BA224()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BA248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BA290@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

_QWORD *initializeBufferWithCopyOfBuffer for SeymourBrowsingCoordinator.Style(_QWORD *a1, uint64_t a2)
{
  void *v3;
  unint64_t v4;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_1001B9E4C(*(void **)a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SeymourBrowsingCoordinator.Style(uint64_t a1)
{
  return sub_1001B9E74(*(void **)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _s10FitnessApp26SeymourBrowsingCoordinatorV5StyleOwca_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_1001B9E4C(*(void **)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  sub_1001B9E74(v5, v6);
  return a1;
}

uint64_t assignWithTake for SeymourBrowsingCoordinator.Style(uint64_t a1, _OWORD *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_1001B9E74(v3, v4);
  return a1;
}

uint64_t _s10FitnessApp26SeymourBrowsingCoordinatorV5StyleOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 13) | (2
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s10FitnessApp26SeymourBrowsingCoordinatorV5StyleOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)result = a2 - 0x3FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1001BA454(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 63;
}

uint64_t sub_1001BA460(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_1001BA470(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for SeymourBrowsingCoordinator.Style()
{
  return &type metadata for SeymourBrowsingCoordinator.Style;
}

uint64_t sub_1001BA4A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001BA290(a1);
}

uint64_t sub_1001BA4BC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v9;
  double v10;
  double v11;
  void (*v12)(_QWORD *@<X8>);
  uint64_t result;
  uint64_t v14;
  _QWORD *v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[24];

  v5 = v3;
  v9 = *(_QWORD *)(v3 + 24);
  if (!v9)
    goto LABEL_3;
  v10 = *(double *)(v3 + 32);
  v11 = a3 - v10;
  if (a3 - v10 < 0.0)
    goto LABEL_3;
  v14 = *(_QWORD *)(v3 + 16);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0)
  {
    if (v11 <= 0.0)
    {
LABEL_3:
      v12 = 0;
LABEL_4:
      *(_QWORD *)(v5 + 16) = a1;
      *(_QWORD *)(v5 + 24) = a2;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRelease(v9);
      *(double *)(v5 + 32) = a3;
      return sub_100022BA4((uint64_t)v12, 0);
    }
  }
  else if (v11 <= 0.0 || (COERCE_UNSIGNED_INT64(a3 - v10) & 0xFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_3;
  }
  v16 = (_QWORD *)(v3 + 40);
  swift_beginAccess(v3 + 40, v29, 33, 0);
  swift_bridgeObjectRetain_n(v9, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 40));
  v18 = *(_QWORD *)(v3 + 40);
  v28 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0x8000000000000000;
  v20 = sub_100438F74(v14, v9);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = v19;
  if (*(_QWORD *)(v18 + 24) >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_18;
LABEL_22:
    sub_10040153C();
    v18 = v28;
    goto LABEL_18;
  }
  sub_1003F8750(v23, isUniquelyReferenced_nonNull_native);
  v18 = v28;
  v24 = sub_100438F74(v14, v9);
  if ((v4 & 1) == (v25 & 1))
  {
    v20 = v24;
LABEL_18:
    v26 = (_QWORD *)*v16;
    *v16 = v18;
    swift_bridgeObjectRelease(v26);
    v27 = (_QWORD *)*v16;
    swift_bridgeObjectRetain(*v16);
    if ((v4 & 1) == 0)
    {
      sub_100400724(v20, v14, v9, v27, 0.0);
      swift_bridgeObjectRetain(v9);
    }
    *(double *)(v27[7] + 8 * v20) = v11 + *(double *)(v27[7] + 8 * v20);
    swift_endAccess(v29);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease(v27);
    v9 = *(_QWORD *)(v5 + 24);
    v12 = sub_1000D9028;
    goto LABEL_4;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1001BA6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];

  v1 = v0;
  v2 = type metadata accessor for ConfigurationType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = MetricsPublisher.elapsedTimeMetricsPublisher.getter(v4);
  v8 = ElapsedTimeMetricsPublisher.elapsedTime.getter();
  swift_release(v7);
  v9 = sub_1001BA4BC(0, 0, v8);
  v10 = MetricsPublisher.workoutStatePublisher.getter(v9);
  v11 = (void *)WorkoutStatePublisher.activityType.getter();
  swift_release(v10);
  if (v11)
  {
    swift_beginAccess(v1 + 40, v28, 0, 0);
    v12 = *(_QWORD *)(v1 + 40);
    v13 = objc_msgSend(v11, "effectiveTypeIdentifier", swift_bridgeObjectRetain(v12).n128_f64[0]);
    v14 = HKWorkoutActivityType.shortenedAnalyticsKey.getter(v13);
    v16 = v15;
    v17 = MetricsPublisher.workoutConfigurationType.getter(v14);
    v18 = ConfigurationType.analyticsKey.getter(v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v21 = objc_msgSend(v11, "isIndoor");
    v22 = (id)_HKWorkoutSwimmingLocationTypeName(objc_msgSend(v11, "swimmingLocationType"));
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

      static WKAnalyticsEvent.metricPlatters(_:activityType:configurationType:duration:isIndoor:swimmingLocationType:)(v12, v14, v16, v18, v20, v21, v24, v26, v8);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v26);

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1001BA8A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

void *sub_1001BA8D4()
{
  return &protocol witness table for UInt;
}

id sub_1001BA8E0()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  double v104;
  double v105;
  id v106;
  uint64_t v107;
  Class isa;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  id result;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView];
  v3 = objc_msgSend(v2, "bottomAnchor");
  v4 = objc_msgSend(v0, "contentView");
  v5 = objc_msgSend(v4, "bottomAnchor");

  v6 = objc_msgSend(v3, "constraintEqualToAnchor:", v5);
  v7 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard];
  v123 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard] = v6;

  v8 = objc_msgSend(v2, "bottomAnchor");
  v9 = objc_msgSend(v0, "contentView");
  v10 = objc_msgSend(v9, "bottomAnchor");

  v11 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v10, -8.0);
  v12 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow] = v11;

  v120 = v2;
  v13 = objc_msgSend(v2, "topAnchor");
  v14 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel];
  v15 = objc_msgSend(v14, "bottomAnchor");
  v16 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v15, 4.0);

  v17 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard];
  v122 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard] = v16;

  v18 = objc_msgSend(v2, "topAnchor");
  v19 = objc_msgSend(v14, "bottomAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

  v21 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader] = v20;

  v22 = objc_msgSend(v14, "topAnchor");
  v23 = objc_msgSend(v0, "contentView");
  v24 = objc_msgSend(v23, "topAnchor");

  v25 = objc_msgSend(v22, "constraintEqualToAnchor:constant:", v24, 4.0);
  v26 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow];
  v121 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow] = v25;

  v27 = objc_msgSend(v14, "topAnchor");
  v28 = objc_msgSend(v0, "contentView");
  v29 = objc_msgSend(v28, "topAnchor");

  v30 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v29, 8.0);
  v31 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow] = v30;

  v32 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel];
  v33 = objc_msgSend(v32, "widthAnchor");
  v34 = objc_msgSend(v33, "constraintEqualToConstant:", 22.0);

  v119 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard;
  v35 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard] = v34;

  v36 = objc_msgSend(v14, "widthAnchor");
  v37 = objc_msgSend(v32, "widthAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

  v39 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoWidthAnchorCustom];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoWidthAnchorCustom] = v38;

  v40 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel];
  v41 = objc_msgSend(v40, "widthAnchor");
  v42 = objc_msgSend(v14, "widthAnchor");
  v43 = objc_msgSend(v41, "constraintEqualToAnchor:", v42);

  v44 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard];
  v118 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard] = v43;

  v45 = objc_msgSend(v40, "widthAnchor");
  v46 = objc_msgSend(v14, "widthAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -40.0);

  v48 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet] = v47;

  v115 = *(id *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel];
  v49 = objc_msgSend(v115, "widthAnchor");
  v50 = objc_msgSend(v40, "widthAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

  v52 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard];
  v117 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard] = v51;

  v53 = objc_msgSend(v115, "widthAnchor");
  v54 = objc_msgSend(v40, "widthAnchor");
  v55 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, 20.0);

  v56 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet];
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet] = v55;

  v116 = (id)objc_opt_self(NSLayoutConstraint);
  v57 = sub_100047110((uint64_t *)&unk_100828340);
  v58 = swift_allocObject(v57, 144, 7);
  *(_OWORD *)(v58 + 16) = xmmword_100626C20;
  v59 = objc_msgSend(v32, "leadingAnchor");
  v60 = objc_msgSend(v0, "contentView");
  v61 = objc_msgSend(v60, "leadingAnchor");

  v62 = objc_msgSend(v59, "constraintEqualToAnchor:constant:", v61, 16.0);
  *(_QWORD *)(v58 + 32) = v62;
  v63 = objc_msgSend(v32, "topAnchor");
  v64 = objc_msgSend(v14, "topAnchor");
  v65 = objc_msgSend(v63, "constraintEqualToAnchor:", v64);

  *(_QWORD *)(v58 + 40) = v65;
  v66 = objc_msgSend(v14, "leadingAnchor");
  v67 = objc_msgSend(v32, "trailingAnchor");
  v68 = objc_msgSend(v66, "constraintEqualToAnchor:constant:", v67, 8.0);

  *(_QWORD *)(v58 + 48) = v68;
  v69 = objc_msgSend(v14, "heightAnchor");
  v70 = objc_msgSend(v32, "heightAnchor");
  v71 = objc_msgSend(v69, "constraintEqualToAnchor:", v70);

  *(_QWORD *)(v58 + 56) = v71;
  v72 = objc_msgSend(v40, "topAnchor");
  v73 = objc_msgSend(v14, "topAnchor");
  v74 = objc_msgSend(v72, "constraintEqualToAnchor:", v73);

  *(_QWORD *)(v58 + 64) = v74;
  v75 = objc_msgSend(v40, "leadingAnchor");
  v76 = objc_msgSend(v14, "trailingAnchor");
  v77 = objc_msgSend(v75, "constraintEqualToAnchor:constant:", v76, 8.0);

  *(_QWORD *)(v58 + 72) = v77;
  v78 = objc_msgSend(v40, "heightAnchor");
  v79 = objc_msgSend(v14, "heightAnchor");
  v80 = objc_msgSend(v78, "constraintEqualToAnchor:", v79);

  *(_QWORD *)(v58 + 80) = v80;
  v81 = objc_msgSend(v115, "topAnchor");
  v82 = objc_msgSend(v40, "topAnchor");
  v83 = objc_msgSend(v81, "constraintEqualToAnchor:", v82);

  *(_QWORD *)(v58 + 88) = v83;
  v84 = objc_msgSend(v115, "leadingAnchor");
  v85 = objc_msgSend(v40, "trailingAnchor");
  v86 = objc_msgSend(v84, "constraintEqualToAnchor:constant:", v85, 8.0);

  *(_QWORD *)(v58 + 96) = v86;
  v87 = objc_msgSend(v115, "trailingAnchor");
  v88 = objc_msgSend(v0, "contentView");
  v89 = objc_msgSend(v88, "trailingAnchor");

  v90 = objc_msgSend(v87, "constraintEqualToAnchor:constant:", v89, -16.0);
  *(_QWORD *)(v58 + 104) = v90;
  v91 = objc_msgSend(v115, "heightAnchor");
  v92 = objc_msgSend(v40, "heightAnchor");
  v93 = objc_msgSend(v91, "constraintEqualToAnchor:", v92);

  *(_QWORD *)(v58 + 112) = v93;
  v94 = objc_msgSend(v120, "leadingAnchor");
  v95 = objc_msgSend(v0, "contentView");
  v96 = objc_msgSend(v95, "leadingAnchor");

  v97 = objc_msgSend(v94, "constraintEqualToAnchor:constant:", v96, 16.0);
  *(_QWORD *)(v58 + 120) = v97;
  v98 = objc_msgSend(v120, "trailingAnchor");
  v99 = objc_msgSend(v0, "contentView");
  v100 = objc_msgSend(v99, "trailingAnchor");

  v101 = objc_msgSend(v98, "constraintEqualToAnchor:constant:", v100, -16.0);
  *(_QWORD *)(v58 + 128) = v101;
  v102 = objc_msgSend(v120, "heightAnchor");
  v103 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v103, "scale");
  v105 = v104;

  v106 = objc_msgSend(v102, "constraintEqualToConstant:", 1.0 / v105);
  *(_QWORD *)(v58 + 136) = v106;
  specialized Array._endMutation()(v107);
  sub_100039898();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v116, "activateConstraints:", isa, swift_bridgeObjectRelease(v58).n128_f64[0]);

  v109 = *(void **)&v1[v119];
  if (v109)
    objc_msgSend(v109, "setActive:", 1);
  v110 = *(void **)&v1[v118];
  if (v110)
    objc_msgSend(v110, "setActive:", 1);
  v111 = *(void **)&v1[v117];
  if (v111)
    objc_msgSend(v111, "setActive:", 1);
  v112 = *(void **)&v1[v122];
  if (v112)
    objc_msgSend(v112, "setActive:", 1);
  v113 = *(void **)&v1[v123];
  if (v113)
    objc_msgSend(v113, "setActive:", 1);
  result = *(id *)&v1[v121];
  if (result)
    return objc_msgSend(result, "setActive:", 1);
  return result;
}

id sub_1001BB604()
{
  return sub_1001BB64C(&OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader);
}

id sub_1001BB628()
{
  return sub_1001BB64C(&OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard, &OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet);
}

id sub_1001BB64C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  void *v8;
  void *v9;
  void *v10;
  id result;

  v8 = *(void **)(v4 + *a1);
  if (v8)
    objc_msgSend(v8, "setActive:", 0);
  v9 = *(void **)(v4 + *a2);
  if (v9)
    objc_msgSend(v9, "setActive:", 1);
  v10 = *(void **)(v4 + *a3);
  if (v10)
    objc_msgSend(v10, "setActive:", 0);
  result = *(id *)(v4 + *a4);
  if (result)
    return objc_msgSend(result, "setActive:", 1);
  return result;
}

id sub_1001BB6F4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id result;

  v1 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard);
  if (v1)
    objc_msgSend(v1, "setActive:", 1);
  v2 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard);
  if (v2)
    objc_msgSend(v2, "setActive:", 1);
  v3 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard);
  if (v3)
    objc_msgSend(v3, "setActive:", 1);
  v4 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard);
  if (v4)
    objc_msgSend(v4, "setActive:", 1);
  v5 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard);
  if (v5)
    objc_msgSend(v5, "setActive:", 1);
  v6 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow);
  if (v6)
    objc_msgSend(v6, "setActive:", 1);
  v7 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow);
  if (v7)
    objc_msgSend(v7, "setActive:", 0);
  v8 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader);
  if (v8)
    objc_msgSend(v8, "setActive:", 0);
  v9 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow);
  if (v9)
    objc_msgSend(v9, "setActive:", 0);
  v10 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoWidthAnchorCustom);
  if (v10)
    objc_msgSend(v10, "setActive:", 0);
  v11 = *(void **)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet);
  if (v11)
    objc_msgSend(v11, "setActive:", 0);
  result = *(id *)(v0 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet);
  if (result)
    return objc_msgSend(result, "setActive:", 0);
  return result;
}

char *sub_1001BB8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  objc_super v33;

  v6 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel;
  v7 = objc_allocWithZone((Class)UILabel);
  v8 = v3;
  v9 = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v6] = v9;
  v10 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel;
  v11 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v10] = v11;
  v12 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel;
  v13 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v12] = v13;
  v14 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel;
  v15 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v14] = v15;
  v16 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView;
  v17 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v16] = v17;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoWidthAnchorCustom] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet] = 0;

  if (a3)
  {
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v18 = 0;
  }
  v33.receiver = v8;
  v33.super_class = (Class)type metadata accessor for WorkoutDetailFourColumnTableViewCell();
  v19 = objc_msgSendSuper2(&v33, "initWithStyle:reuseIdentifier:", a1, v18);

  v20 = (char *)v19;
  v21 = objc_msgSend(v20, "contentView");
  objc_msgSend(v21, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel]);

  v22 = objc_msgSend(v20, "contentView");
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel]);

  v23 = objc_msgSend(v20, "contentView");
  objc_msgSend(v23, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel]);

  v24 = objc_msgSend(v20, "contentView");
  objc_msgSend(v24, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel]);

  v25 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView;
  v26 = *(void **)&v20[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView];
  v27 = (void *)objc_opt_self(UIColor);
  v28 = v26;
  v29 = objc_msgSend(v27, "separatorColor");
  objc_msgSend(v28, "setBackgroundColor:", v29);

  v30 = *(void **)&v20[v25];
  objc_msgSend(v30, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v31 = objc_msgSend(v20, "contentView");
  objc_msgSend(v31, "addSubview:", v30);

  sub_1001BA8E0();
  return v20;
}

id sub_1001BBD8C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailFourColumnTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailFourColumnTableViewCell()
{
  return objc_opt_self(CHWorkoutDetailFourColumnTableViewCell);
}

void sub_1001BBF04()
{
  char *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v1 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel;
  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v1] = v2;
  v3 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel;
  v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v3] = v4;
  v5 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel;
  v6 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v5] = v6;
  v7 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel;
  v8 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v7] = v8;
  v9 = OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView;
  v10 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v9] = v10;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorStandard] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewTopAnchorHeader] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorStandardRow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_topAnchorHeaderRow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneWidthAnchorStandard] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoWidthAnchorCustom] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorStandard] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeWidthAnchorSwimSet] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorStandard] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourWidthAnchorSwimSet] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/WorkoutDetailFourColumnTableViewCell.swift", 53, 2, 63, 0);
  __break(1u);
}

id sub_1001BC1E0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  NSString v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;

  v1 = v0;
  if (qword_10081D678 != -1)
    swift_once(&qword_10081D678, sub_1001A5270);
  v2 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "secondaryLabelColor");
  v5 = (void *)UILabel.withTextColor(_:)(v4);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setText:", v6);

  v7 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v8 = objc_msgSend(v3, "secondaryLabelColor");
  v9 = (void *)UILabel.withTextColor(_:)(v8);

  v10 = (void *)objc_opt_self(NSBundle);
  v11 = objc_msgSend(v10, "mainBundle");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setText:", v16);

  swift_bridgeObjectRelease(v15);
  v17 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v18 = objc_msgSend(v3, "secondaryLabelColor");
  v19 = (void *)UILabel.withTextColor(_:)(v18);

  v20 = objc_msgSend(v10, "mainBundle");
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "localizedStringForKey:value:table:", v21, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v24 = v23;

  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setText:", v25);

  swift_bridgeObjectRelease(v24);
  v26 = (void *)UILabel.withFont(_:)(qword_100869FE8);
  v27 = objc_msgSend(v3, "secondaryLabelColor");
  v28 = (void *)UILabel.withTextColor(_:)(v27);

  v29 = objc_msgSend(v10, "mainBundle");
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "localizedStringForKey:value:table:", v30, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v33 = v32;

  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v28, "setText:", v34);

  swift_bridgeObjectRelease(v33);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView), "setHidden:", 1);
  return sub_1001BB604();
}

void sub_1001BC628(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  void *v17;
  id v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;

  sub_1001BB628();
  if (a1)
  {
    v9 = a1;
    sub_1001BCA98(a3 & 1);
    v10 = (void *)objc_opt_self(NSNumberFormatter);
    v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a2);
    v12 = objc_msgSend(v10, "localizedStringFromNumber:numberStyle:", v11, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnOneLabel);
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setText:", v16);
    swift_bridgeObjectRelease(v14);

    v17 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnTwoLabel);
    v18 = objc_msgSend(v9, "formattedDominantStrokeStyle");
    v19 = v18;
    if (v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v19 = String._bridgeToObjectiveC()();
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v17, "setText:", v19);
    swift_bridgeObjectRelease(v21);

    v22 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnThreeLabel);
    v23 = objc_msgSend(v9, "formattedDistanceValueWithFormattingManager:", a4);
    v24 = v23;
    if (v23)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v24 = String._bridgeToObjectiveC()();
    }
    else
    {
      v26 = 0;
    }
    objc_msgSend(v22, "setText:", v24);
    swift_bridgeObjectRelease(v26);

    v27 = objc_msgSend(v9, "formattedPaceUsingFormatType:formattingManager:", 100, a4);
    if (v27)
    {
      v28 = v27;
      v49 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

    }
    else
    {
      v49 = 0;
      v30 = 0xE000000000000000;
    }
    v31 = objc_msgSend(v9, "formattedStrokeCountUsingFormatType:formattingManager:", 100, a4);
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v35 = v34;

    }
    else
    {
      v33 = 0;
      v35 = 0xE000000000000000;
    }
    v36 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v36, "localizedStringForKey:value:table:", v37, 0, 0);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v42 = sub_100047110((uint64_t *)&unk_100827460);
    v43 = swift_allocObject(v42, 112, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    v44 = sub_100038CF8();
    *(_QWORD *)(v43 + 32) = v49;
    *(_QWORD *)(v43 + 40) = v30;
    *(_QWORD *)(v43 + 96) = &type metadata for String;
    *(_QWORD *)(v43 + 104) = v44;
    *(_QWORD *)(v43 + 64) = v44;
    *(_QWORD *)(v43 + 72) = v33;
    *(_QWORD *)(v43 + 80) = v35;
    String.init(format:_:)(v39, v41, v43, v45);
    v47 = v46;
    swift_bridgeObjectRelease(v41);
    v48 = *(void **)(v4 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_columnFourLabel);
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v48, "setText:", v50);

    swift_bridgeObjectRelease(v47);
  }
  else
  {
    sub_1001BC1E0();
  }
}

id sub_1001BCA98(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSString v8;
  void *v9;
  id v10;
  void *v11;
  NSString v12;
  void *v13;
  void *v14;
  id result;
  void *v16;
  id v17;
  NSString v18;
  void *v19;
  void *v20;
  id v21;
  NSString v22;
  void *v23;

  v2 = v1;
  if (qword_10081D680 != -1)
    swift_once(&qword_10081D680, sub_1001A5284);
  v4 = (void *)UILabel.withFont(_:)(qword_100869FF0);
  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "secondaryLabelColor");
  v7 = (void *)UILabel.withTextColor(_:)(v6);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v8);

  if (qword_10081D688 != -1)
    swift_once(&qword_10081D688, sub_1001A536C);
  v9 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  v10 = objc_msgSend(v5, "whiteColor");
  v11 = (void *)UILabel.withTextColor(_:)(v10);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setText:", v12);

  v13 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  v14 = (void *)objc_opt_self(ARUIMetricColors);
  result = objc_msgSend(v14, "distanceColors");
  if (!result)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = result;
  v17 = objc_msgSend(result, "nonGradientTextColor");

  objc_msgSend(v13, "setTextColor:", v17);
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setText:", v18);

  v19 = (void *)UILabel.withFont(_:)(qword_100869FF8);
  result = objc_msgSend(v14, "paceColors");
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v20 = result;
  v21 = objc_msgSend(result, "nonGradientTextColor");

  objc_msgSend(v19, "setTextColor:", v21);
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setText:", v22);

  result = objc_msgSend(*(id *)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorView), "setHidden:", a1 & 1);
  if ((a1 & 1) != 0)
  {
    v23 = *(void **)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorStandard);
    if (v23)
      objc_msgSend(v23, "setActive:", 0);
    result = *(id *)(v2 + OBJC_IVAR___CHWorkoutDetailFourColumnTableViewCell_separatorViewBottomAnchorLastRow);
    if (result)
      return objc_msgSend(result, "setActive:", 1);
  }
  return result;
}

id sub_1001BCE9C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailFourColumnSwimmingSetTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailFourColumnSwimmingSetTableViewCell()
{
  return objc_opt_self(CHWorkoutDetailFourColumnSwimmingSetTableViewCell);
}

uint64_t sub_1001BCEEC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10001E724(0, (unint64_t *)&unk_1008361C0, _HKWheelchairUseCharacteristicCache_ptr);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

_QWORD *sub_1001BCF38(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100047110(&qword_1008251E0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for Calendar(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(id *)v16;
    v18 = v16[8];
    sub_10010C5D0(*(id *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[6];
    v20 = a3[7];
    v21 = (_QWORD *)((char *)a1 + v19);
    v22 = (_QWORD *)((char *)a2 + v19);
    v24 = *v22;
    v23 = (void *)v22[1];
    *v21 = v24;
    v21[1] = v23;
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    v25 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
    v26 = v23;
  }
  return a1;
}

void sub_1001BD068(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100047110(&qword_1008251E0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for Calendar(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10010C5EC(*(id *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));

}

_QWORD *sub_1001BD0F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v6 = sub_100047110(&qword_1008251E0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for Calendar(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(id *)v14;
  v16 = v14[8];
  sub_10010C5D0(*(id *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v22 = *v20;
  v21 = (void *)v20[1];
  *v19 = v22;
  v19[1] = v21;
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v23 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  v24 = v21;
  return a1;
}

_QWORD *sub_1001BD1F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  char v16;
  void *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  id v24;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008251E0);
    v6 = sub_100047110(&qword_1008251E0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for Calendar(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(id *)v14;
  v16 = v14[8];
  sub_10010C5D0(*(id *)v14, v16);
  v17 = *(void **)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10010C5EC(v17, v18);
  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = (void *)v21[1];
  v23 = (void *)v20[1];
  v20[1] = v22;
  v24 = v22;

  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_1001BD334(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_100047110(&qword_1008251E0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1001BD414(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008251E0);
    v6 = sub_100047110(&qword_1008251E0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for Calendar(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(void **)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10010C5EC(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  v19 = (void *)*((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;

  v20 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_1001BD52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BD538);
}

uint64_t sub_1001BD538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110(&qword_1008251E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001BD5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BD5C8);
}

uint64_t sub_1001BD5C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110(&qword_1008251E8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AdvancedChangeGoalView(uint64_t a1)
{
  uint64_t result;

  result = qword_100825248;
  if (!qword_100825248)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdvancedChangeGoalView);
  return result;
}

void sub_1001BD684(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_1001BD718(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_10062B1D0;
    v4[3] = &unk_10062B1E8;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_10062B1E8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_1001BD718(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100825258)
  {
    v2 = type metadata accessor for Calendar(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100825258);
  }
}

uint64_t sub_1001BD76C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AE9BC, 1);
}

uint64_t sub_1001BD77C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;

  v2 = v1;
  v4 = sub_100047110(&qword_100825298);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_1008252A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008252A8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v11, v14, v15, v16, v17);
  *((_QWORD *)v6 + 1) = 0x4014000000000000;
  v6[16] = 0;
  v18 = sub_100047110(&qword_1008252B0);
  v19 = sub_1001BD9D8(v2, (uint64_t)&v6[*(int *)(v18 + 44)]);
  v20 = static Edge.Set.leading.getter(v19);
  v21 = static Edge.Set.trailing.getter();
  v22 = Edge.Set.init(rawValue:)(0);
  v23 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v23 & v20) != v20)
    v22 = Edge.Set.init(rawValue:)(v22 | v20);
  v24 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v24 & v21) != v21)
    LOBYTE(v22) = Edge.Set.init(rawValue:)(v22 | v21);
  v25 = EdgeInsets.init(_all:)(20.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_100021CC0((uint64_t)v6, (uint64_t)v9, &qword_100825298);
  v32 = &v9[*(int *)(v7 + 36)];
  *v32 = v22;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = sub_10001BE90((uint64_t)v6, &qword_100825298);
  v34 = static Edge.Set.bottom.getter(v33);
  v35 = EdgeInsets.init(_all:)(30.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_100021CC0((uint64_t)v9, (uint64_t)v13, &qword_1008252A0);
  v42 = &v13[*(int *)(v10 + 36)];
  *v42 = v34;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_10001BE90((uint64_t)v9, &qword_1008252A0);
  return sub_100045AD4((uint64_t)v13, a1, &qword_1008252A8);
}

uint64_t sub_1001BD9D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t KeyPath;
  uint64_t v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjCClassFromMetadata;
  id v52;
  NSString v53;
  NSString v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  void (*v85)(char *, uint64_t, double);
  double v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;

  v95 = a2;
  v3 = (int *)type metadata accessor for AdvancedChangeGoalView(0);
  v90 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v91 = v4;
  v92 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100047110(&qword_1008252B8);
  v102 = *(_QWORD *)(v96 - 8);
  v5 = __chkstk_darwin(v96);
  v103 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v104 = (char *)&v89 - v7;
  v8 = type metadata accessor for Calendar(0);
  v99 = *(_QWORD *)(v8 - 8);
  v100 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ActivityDailyGoalChartView(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v98 = sub_100047110(&qword_1008252C0);
  v14 = __chkstk_darwin(v98);
  v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v89 - v17;
  sub_1002C25B4(*(_QWORD *)(a1 + v3[8]));
  v97 = v19;
  sub_1003F7298((uint64_t)v10);
  v20 = a1 + v3[5];
  v21 = *(id *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  sub_10010C5D0(*(id *)v20, v22);
  v23 = sub_1003F72C0(v21, v22);
  sub_10010C5EC(v21, v22);
  v93 = (uint64_t)v3;
  v94 = a1;
  v24 = a1 + v3[6];
  v25 = *(void **)(v24 + 8);
  KeyPath = swift_getKeyPath(&unk_10062B260);
  v27 = swift_getKeyPath(&unk_10062B288);
  v28 = v25;
  static Published.subscript.getter(&v105, v28, KeyPath, v27);

  swift_release(KeyPath);
  v29 = swift_release(v27);
  v30 = v105;
  *v13 = v97;
  v31 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v99 + 32))((char *)v13 + v11[5], v10, v100, v29);
  *(uint64_t *)((char *)v13 + v11[6]) = (uint64_t)v23;
  *(uint64_t *)((char *)v13 + v11[7]) = v30;
  LOBYTE(v11) = static Edge.Set.all.getter(v31);
  sub_10004F8C8((uint64_t)v13, (uint64_t)v16, type metadata accessor for ActivityDailyGoalChartView);
  v32 = &v16[*(int *)(v98 + 36)];
  *v32 = (char)v11;
  *(_OWORD *)(v32 + 8) = xmmword_10062B110;
  *(_OWORD *)(v32 + 24) = xmmword_10062B120;
  v32[40] = 0;
  sub_1001BE23C((uint64_t)v13);
  v101 = v16;
  v33 = (uint64_t)v18;
  sub_100045AD4((uint64_t)v16, (uint64_t)v18, &qword_1008252C0);
  v34 = *(void **)(v24 + 8);
  v35 = swift_getKeyPath(&unk_10062B260);
  v36 = swift_getKeyPath(&unk_10062B288);
  v37 = v34;
  static Published.subscript.getter(&v105, v37, v35, v36);

  swift_release(v35);
  swift_release(v36);
  v38 = v105;
  if ((unint64_t)v105 >> 62)
  {
    if (v105 < 0)
      v88 = v105;
    else
      v88 = v105 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v105);
    v39 = _CocoaArrayWrapper.endIndex.getter(v88);
    result = swift_bridgeObjectRelease_n(v38, 2);
    if (v39 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v39 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease(v105);
  }
  v105 = 0;
  v106 = v39;
  v40 = swift_getKeyPath(&unk_10062B2B0);
  v41 = v94;
  v42 = v92;
  sub_10004F8C8(v94, v92, type metadata accessor for AdvancedChangeGoalView);
  v43 = *(unsigned __int8 *)(v90 + 80);
  v44 = (v43 + 16) & ~v43;
  v45 = swift_allocObject(&unk_10078C7D8, v44 + v91, v43 | 7);
  sub_1001BE344(v42, v45 + v44);
  v46 = sub_100047110(&qword_100821138);
  v47 = type metadata accessor for ScheduleDayRowView(0);
  v48 = sub_10011DC2C();
  v49 = sub_1000083D8(&qword_1008252C8, type metadata accessor for ScheduleDayRowView, (uint64_t)&unk_10062BC30);
  ForEach<>.init(_:id:content:)(&v105, v40, sub_1001BE388, v45, v46, v47, v48, &protocol witness table for Int, v49);
  if (*(_BYTE *)(v41 + *(int *)(v93 + 36)) == 1)
  {
    v50 = sub_10001E724(0, (unint64_t *)&qword_10081F6D8, off_1007765E0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v50);
    v52 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v53 = String._bridgeToObjectiveC()();
    v54 = String._bridgeToObjectiveC()();
    v55 = objc_msgSend(v52, "localizedStringForKey:value:table:", v53, 0, v54);

    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

    v105 = v56;
    v106 = v58;
    v59 = sub_100038CA0();
    v60 = Text.init<A>(_:)(&v105, &type metadata for String, v59);
    v99 = v61;
    v100 = v60;
    v98 = v62;
    v64 = v63 & 1;
    LOBYTE(v58) = static Edge.Set.all.getter(v60);
    v66 = static HierarchicalShapeStyle.secondary.getter(v65);
    v97 = static Font.footnote.getter();
    v67 = swift_getKeyPath(&unk_10062B2C8);
    v68 = v58;
    v69 = (v66 << 32) | 1;
    LODWORD(v94) = 256;
  }
  else
  {
    v99 = 0;
    v100 = 0;
    v64 = 0;
    v97 = 0;
    v98 = 0;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    LODWORD(v94) = 0;
  }
  v89 = v33;
  v70 = (uint64_t)v101;
  sub_100021CC0(v33, (uint64_t)v101, &qword_1008252C0);
  v71 = v103;
  v72 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v73 = v96;
  v72(v103, v104, v96);
  v74 = v70;
  v75 = v95;
  sub_100021CC0(v74, v95, &qword_1008252C0);
  v76 = sub_100047110(&qword_1008252D0);
  v72((char *)(v75 + *(int *)(v76 + 48)), v71, v73);
  v77 = v75 + *(int *)(v76 + 64);
  v79 = v99;
  v78 = v100;
  *(_QWORD *)v77 = v100;
  *(_QWORD *)(v77 + 8) = v79;
  v80 = v98;
  *(_QWORD *)(v77 + 16) = v64;
  *(_QWORD *)(v77 + 24) = v80;
  *(_QWORD *)(v77 + 32) = v68;
  *(_OWORD *)(v77 + 40) = 0u;
  *(_OWORD *)(v77 + 56) = 0u;
  *(_QWORD *)(v77 + 72) = v69;
  *(_QWORD *)(v77 + 80) = v67;
  v81 = v69;
  v93 = v69;
  v82 = v67;
  v83 = v97;
  *(_QWORD *)(v77 + 88) = v97;
  *(_WORD *)(v77 + 96) = v94;
  v84 = sub_1001BE3D4(v78, v79, v64, v80, v68, 0, 0, 0, 0, v81, v82, v83);
  v85 = *(void (**)(char *, uint64_t, double))(v102 + 8);
  v85(v104, v73, v84);
  sub_10001BE90(v89, &qword_1008252C0);
  v86 = sub_1001BE420(v78, v79, v64, v80, v68, 0, 0, 0, 0, v93, v82, v83);
  v85(v103, v73, v86);
  return sub_10001BE90((uint64_t)v101, &qword_1008252C0);
}

uint64_t sub_1001BE140@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char v9;
  id v10;
  void *v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = *a1;
  sub_1003F7298(a3);
  v6 = type metadata accessor for AdvancedChangeGoalView(0);
  v7 = a2 + *(int *)(v6 + 20);
  v8 = *(id *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  sub_10010C5D0(*(id *)v7, v9);
  v10 = sub_1003F72C0(v8, v9);
  sub_10010C5EC(v8, v9);
  v11 = *(void **)(a2 + *(int *)(v6 + 24) + 8);
  v12 = (int *)type metadata accessor for ScheduleDayRowView(0);
  *(_QWORD *)(a3 + v12[5]) = v10;
  *(_QWORD *)(a3 + v12[6]) = v5;
  v13 = (uint64_t *)(a3 + v12[7]);
  v14 = type metadata accessor for GoalDaysModel(0);
  v15 = sub_1000083D8(&qword_1008252D8, type metadata accessor for GoalDaysModel, (uint64_t)&unk_10062B8A4);
  result = ObservedObject.init(wrappedValue:)(v11, v14, v15);
  *v13 = result;
  v13[1] = v17;
  return result;
}

uint64_t sub_1001BE23C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivityDailyGoalChartView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001BE278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AdvancedChangeGoalView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008251E0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for Calendar(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10010C5EC(*(id *)((char *)v6 + *(int *)(v1 + 20)), *((_BYTE *)v6 + *(int *)(v1 + 20) + 8));

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001BE344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AdvancedChangeGoalView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BE388@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AdvancedChangeGoalView(0) - 8) + 80);
  return sub_1001BE140(a1, v2 + ((v5 + 16) & ~v5), a2);
}

double sub_1001BE3D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double result;

  if (a4)
  {
    sub_1000E439C(a1, a2, a3 & 1);
    swift_retain(a12);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a11).n128_u64[0];
  }
  return result;
}

double sub_1001BE420(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double result;

  if (a4)
  {
    sub_1000E4458(a1, a2, a3 & 1);
    swift_release(a11);
    swift_bridgeObjectRelease(a4);
    *(_QWORD *)&result = swift_release(a12).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001BE474()
{
  return sub_1000F4518(&qword_1008252E0, &qword_1008252A8, (void (*)(void))sub_1001BE4A0);
}

uint64_t sub_1001BE4A0()
{
  return sub_1000F4518(&qword_1008252E8, &qword_1008252A0, (void (*)(void))sub_1001BE4BC);
}

unint64_t sub_1001BE4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008252F0;
  if (!qword_1008252F0)
  {
    v1 = sub_100007050(&qword_100825298);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1008252F0);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for CelebrationContext(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CelebrationContext(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CelebrationContext(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001BE604 + 4 * byte_10062B305[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1001BE638 + 4 * byte_10062B300[v4]))();
}

uint64_t sub_1001BE638(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001BE640(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1001BE648);
  return result;
}

uint64_t sub_1001BE654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1001BE65CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001BE660(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001BE668(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CelebrationContext()
{
  return &type metadata for CelebrationContext;
}

uint64_t sub_1001BE684()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.leading.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_1001BE6AC()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1001BE6D8();
  result = HorizontalAlignment.init(_:)(&_s17LollipopAlignmentVN_0, v0);
  qword_10086A078 = result;
  return result;
}

unint64_t sub_1001BE6D8()
{
  unint64_t result;

  result = qword_1008252F8;
  if (!qword_1008252F8)
  {
    result = swift_getWitnessTable(&unk_10062B394, &_s17LollipopAlignmentVN_0);
    atomic_store(result, (unint64_t *)&qword_1008252F8);
  }
  return result;
}

uint64_t sub_1001BE71C()
{
  uint64_t v0;

  v0 = static VerticalAlignment.top.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_1001BE740()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1001BE76C();
  result = VerticalAlignment.init(_:)(&_s17LollipopAlignmentVN, v0);
  qword_10086A080 = result;
  return result;
}

unint64_t sub_1001BE76C()
{
  unint64_t result;

  result = qword_100825300;
  if (!qword_100825300)
  {
    result = swift_getWitnessTable(&unk_10062B364, &_s17LollipopAlignmentVN);
    atomic_store(result, (unint64_t *)&qword_100825300);
  }
  return result;
}

uint64_t sub_1001BE7B0()
{
  uint64_t v0;
  uint64_t result;

  if (qword_10081D6F0 != -1)
    result = swift_once(&qword_10081D6F0, sub_1001BE6AC);
  v0 = qword_10086A078;
  if (qword_10081D6F8 != -1)
    result = swift_once(&qword_10081D6F8, sub_1001BE740);
  *(_QWORD *)&xmmword_10086A088 = v0;
  *((_QWORD *)&xmmword_10086A088 + 1) = qword_10086A080;
  return result;
}

ValueMetadata *_s17LollipopAlignmentVMa()
{
  return &_s17LollipopAlignmentVN;
}

ValueMetadata *_s17LollipopAlignmentVMa_0()
{
  return &_s17LollipopAlignmentVN_0;
}

uint64_t sub_1001BE854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (void *)objc_opt_self(NSNotificationCenter);
    v4 = v1 + 32;
    swift_bridgeObjectRetain_n(v1, 2);
    do
    {
      sub_10003E9BC(v4, (uint64_t)v10);
      v5 = objc_msgSend(v3, "defaultCenter");
      v6 = v11;
      v7 = sub_100016804(v10, v11);
      v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v6);
      objc_msgSend(v5, "removeObserver:", v8);

      swift_unknownObjectRelease(v8);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v10);
      v4 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(v1, 2);
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100022BA4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_1001BE970()
{
  uint64_t v0;

  sub_1001BE854();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1001BE990(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  LOBYTE(a1) = static Date.< infix(_:_:)(a2, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t sub_1001BEA58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BEA7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BEAA0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001BEAD4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001BE990(a1, *(_QWORD *)(v1 + 16)) & 1;
}

double sub_1001BEAF0(uint64_t a1)
{
  uint64_t v1;

  return sub_100039C20(a1, v1, "WorkoutActivityTileDataModel did receive significantTimeChangeNotification notification", 87);
}

uint64_t sub_1001BEB14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001BEB50@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C2910(*a1);
  *a2 = result;
  return result;
}

id sub_1001BEB78()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v0, "setMinimumIntegerDigits:", 2);
  result = objc_msgSend(v0, "setMaximumFractionDigits:", 0);
  qword_100825440 = (uint64_t)v0;
  return result;
}

uint64_t sub_1001BEBD8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v2 = swift_getKeyPath(&unk_10062B600);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_1001BEC48()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[5];
  uint64_t v9;

  v1 = *(void **)&v0[OBJC_IVAR___WorkoutDetailSwimmingActivityDataSource_dataCalculator];
  v2 = *(_QWORD *)&v0[OBJC_IVAR___WorkoutDetailSwimmingActivityDataSource_workout];
  v3 = *(_QWORD *)&v0[OBJC_IVAR___WorkoutDetailSwimmingActivityDataSource_workoutActivity];
  v4 = swift_allocObject(&unk_10078CB80, 24, 7);
  *(_QWORD *)(v4 + 16) = v0;
  v8[4] = sub_1001C3344;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1001BEE58;
  v8[3] = &unk_10078CB98;
  v5 = _Block_copy(v8);
  v6 = v9;
  v7 = v0;
  objc_msgSend(v1, "swimmingSetsForWorkout:workoutActivity:completion:", v2, v3, v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
}

void sub_1001BED38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;

  if (a2)
  {
    v4 = sub_100047110(&qword_10082CEC0);
    v5 = swift_allocObject(v4, 64, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100622F90;
    swift_getErrorValue(a2, v15, &v13);
    v6 = v13;
    v7 = v14;
    *(_QWORD *)(v5 + 56) = v14;
    v8 = sub_10004C480((_QWORD *)(v5 + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, v6, v7);
    swift_errorRetain(a2);
    print(_:separator:terminator:)(v5, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v5);
    swift_errorRelease(a2);
  }
  else
  {
    if (a1)
    {
      KeyPath = swift_getKeyPath(&unk_10062B5D8);
      v12 = swift_getKeyPath(&unk_10062B600);
      v16 = a1;
      swift_bridgeObjectRetain(a1);
      static Published.subscript.setter(&v16, a3, KeyPath, v12);
    }
    sub_1001C1228();
  }
}

double sub_1001BEE58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;
  double result;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10001E724(0, &qword_1008255C0, off_100776628);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

unint64_t sub_1001BEEE4(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns);
  if (*(_QWORD *)(v2 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (*(unsigned __int8 *)(v2 + result + 32) >= 3u)
  {
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v3 = v8;
    v4 = v10;
  }
  else
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  return AttributedString.init(stringLiteral:)(v3, v4);
}

unint64_t sub_1001BEFE8(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns);
  if (*(_QWORD *)(v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = *(unsigned __int8 *)(v2 + result + 32);
  v4 = v1 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columnSizes;
  result = swift_beginAccess(v4, v5, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v4 + 16))
    return sub_100049DE0(v3);
  return result;
}

uint64_t sub_1001BF08C@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100820D90);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v67 - v13;
  result = objc_opt_self(NSNumberFormatter);
  v16 = __OFADD__(a1, 1);
  v17 = a1 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    v18 = (void *)result;
    v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v17);
    v20 = objc_msgSend(v18, "localizedStringFromNumber:numberStyle:", v19, 0);

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v72 = v5;
    v23 = v22;

    v75 = v21;
    v76 = v23;
    v24 = sub_100038CA0();
    v25 = Text.init<A>(_:)(&v75, &type metadata for String, v24);
    v27 = v26;
    v29 = v28;
    v69 = v7;
    v31 = v30 & 1;
    v33 = static Font.body.getter(v32);
    v74 = a2;
    v34 = v33;
    v36 = Text.font(_:)(v33, v25, v27, v31, v29, v35);
    v73 = v14;
    v37 = v36;
    v70 = v12;
    v71 = v9;
    v39 = v38;
    v68 = v4;
    v41 = v40;
    v43 = v42;
    swift_release(v34);
    LOBYTE(v34) = v41 & 1;
    sub_1000E4458(v25, v27, v31);
    v44 = swift_bridgeObjectRelease(v29);
    v45 = static Color.gray.getter(v44);
    v46 = Text.foregroundColor(_:)(v45, v37, v39, v41 & 1, v43);
    v48 = v47;
    LOBYTE(v29) = v49;
    v51 = v50;
    swift_release(v45);
    sub_1000E4458(v37, v39, v34);
    v52 = swift_bridgeObjectRelease(v43);
    v75 = v46;
    v76 = v48;
    v77 = v29 & 1;
    v78 = v51;
    v53 = v72;
    v55 = v68;
    v54 = v69;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v72 + 104))(v69, enum case for DynamicTypeSize.large(_:), v68, v52);
    v56 = v70;
    View.dynamicTypeSize(_:)(v54, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    sub_1000E4458(v75, v76, v77);
    v57 = swift_bridgeObjectRelease(v78);
    v58 = v71;
    v59 = v73;
    v60 = v56;
    (*(void (**)(char *, char *, uint64_t, __n128))(v71 + 32))(v73, v56, v8, v57);
    v61 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    v62 = v58;
    v63 = v59;
    v61(v60, v59, v8);
    v64 = v74;
    v61(v74, v60, v8);
    v65 = &v64[*(int *)(sub_100047110(&qword_100825578) + 48)];
    *(_QWORD *)v65 = 0;
    v65[8] = 1;
    v66 = *(void (**)(char *, uint64_t))(v62 + 8);
    v66(v63, v8);
    return ((uint64_t (*)(char *, uint64_t))v66)(v60, v8);
  }
  return result;
}

uint64_t sub_1001BF3C4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  v50 = a1;
  v57 = a3;
  v4 = type metadata accessor for DynamicTypeSize(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100820D90);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v54 = (char *)&v50 - v10;
  v58 = sub_1001C0FD0(a2);
  v59 = v11;
  v12 = sub_100038CA0();
  v13 = Text.init<A>(_:)(&v58, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v21 = static Font.body.getter(v20);
  v23 = Text.font(_:)(v21, v13, v15, v19, v17, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_release(v21);
  LOBYTE(v21) = v27 & 1;
  sub_1000E4458(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  v30 = Text.foregroundColor(_:)(*(_QWORD *)(v50 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_paceColor), v23, v25, v27 & 1, v29);
  v32 = v31;
  LOBYTE(v13) = v33;
  v35 = v34;
  sub_1000E4458(v23, v25, v21);
  v36 = swift_bridgeObjectRelease(v29);
  v58 = v30;
  v59 = v32;
  v60 = v13 & 1;
  v61 = v35;
  v38 = v51;
  v37 = v52;
  v39 = v53;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v52 + 104))(v51, enum case for DynamicTypeSize.large(_:), v53, v36);
  View.dynamicTypeSize(_:)(v38, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  sub_1000E4458(v58, v59, v60);
  v40 = swift_bridgeObjectRelease(v61);
  v42 = v54;
  v41 = v55;
  v43 = v56;
  (*(void (**)(char *, char *, uint64_t, __n128))(v55 + 32))(v54, v9, v56, v40);
  v44 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v45 = v41;
  v44(v9, v42, v43);
  v46 = v57;
  v44(v57, v9, v43);
  v47 = &v46[*(int *)(sub_100047110(&qword_100825578) + 48)];
  *(_QWORD *)v47 = 0;
  v47[8] = 1;
  v48 = *(void (**)(char *, uint64_t))(v45 + 8);
  v48(v42, v43);
  return ((uint64_t (*)(char *, uint64_t))v48)(v9, v43);
}

uint64_t sub_1001BF678@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;

  v24 = a2;
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100825520);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100825528);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.leading.getter(v12);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v15 = sub_100047110(&qword_100825560);
  v16 = sub_1001BF86C(a1, v2, &v10[*(int *)(v15 + 44)]);
  v23 = *(_OWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 16);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 24);
  v19 = static Edge.Set.all.getter(v16);
  sub_100021CC0((uint64_t)v10, (uint64_t)v14, &qword_100825520);
  v20 = &v14[*(int *)(v11 + 36)];
  *v20 = v19;
  *(_OWORD *)(v20 + 8) = v23;
  *((_QWORD *)v20 + 3) = v18;
  *((_QWORD *)v20 + 4) = v17;
  v20[40] = 0;
  sub_10001BE90((uint64_t)v10, &qword_100825520);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.large(_:), v4);
  v21 = sub_1001C2F84(&qword_100825568, &qword_100825528, &qword_100825570, &qword_100825520);
  View.dynamicTypeSize(_:)(v7, v11, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10001BE90((uint64_t)v14, &qword_100825528);
}

id sub_1001BF86C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __n128 v60;
  id v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  __n128 v94;
  id v95;
  NSString v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __n128 v127;
  char *v128;
  id v129;
  NSString v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(char *, char *, uint64_t);
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  int *v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  char *v176;
  id v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  void (*v186)(char *, char *, uint64_t, __n128);
  void (*v187)(char *, uint64_t);
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  void (*v191)(char *);
  unint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;

  v193 = a2;
  v180 = a3;
  v4 = sub_100047110(&qword_100825580);
  v5 = __chkstk_darwin(v4);
  v181 = (uint64_t)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v176 = (char *)&v175 - v7;
  v197 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v194 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100047110(&qword_100825588);
  v185 = *(_QWORD *)(v198 - 8);
  v10 = __chkstk_darwin(v198);
  v179 = (char *)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v178 = (char *)&v175 - v13;
  v14 = __chkstk_darwin(v12);
  v195 = (char *)&v175 - v15;
  v16 = __chkstk_darwin(v14);
  v183 = (char *)&v175 - v17;
  v18 = __chkstk_darwin(v16);
  v184 = (char *)&v175 - v19;
  v20 = __chkstk_darwin(v18);
  v182 = (char *)&v175 - v21;
  __chkstk_darwin(v20);
  v196 = (char *)&v175 - v22;
  v177 = a1;
  result = objc_msgSend(a1, "formattedDominantStrokeStyle");
  if (result)
  {
    v24 = result;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v27 = v26;

    v199 = v25;
    v200 = v27;
    v192 = sub_100038CA0();
    v28 = Text.init<A>(_:)(&v199, &type metadata for String, v192);
    v30 = v29;
    v32 = v31;
    v34 = v33 & 1;
    v36 = static Font.body.getter(v35);
    v38 = Text.font(_:)(v36, v28, v30, v34, v32, v37);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_release(v36);
    v45 = v42 & 1;
    sub_1000E4458(v28, v30, v34);
    v46 = swift_bridgeObjectRelease(v32);
    v47 = static Color.white.getter(v46);
    v48 = Text.foregroundColor(_:)(v47, v38, v40, v45, v44);
    v50 = v49;
    LOBYTE(v34) = v51;
    v53 = v52;
    swift_release(v47);
    sub_1000E4458(v38, v40, v45);
    swift_bridgeObjectRelease(v44);
    KeyPath = swift_getKeyPath(&unk_10062B620);
    v199 = v48;
    v200 = v50;
    v201 = v34 & 1;
    v202 = v53;
    v203 = KeyPath;
    v204 = 1;
    v205 = 0;
    v190 = enum case for DynamicTypeSize.large(_:);
    v191 = *(void (**)(char *))(v8 + 104);
    v55 = v8;
    v56 = v194;
    v57 = v197;
    v191(v194);
    v58 = sub_100047110(&qword_100825590);
    v189 = v58;
    v188 = sub_1001C3060();
    v59 = v182;
    View.dynamicTypeSize(_:)(v56, v58, v188);
    v187 = *(void (**)(char *, uint64_t))(v55 + 8);
    v187(v56, v57);
    sub_1000E4458(v199, v200, v201);
    swift_bridgeObjectRelease(v202);
    v60 = swift_release(v203);
    v186 = *(void (**)(char *, char *, uint64_t, __n128))(v185 + 32);
    v186(v196, v59, v198, v60);
    v182 = (char *)objc_opt_self(NSBundle);
    v61 = objc_msgSend(v182, "mainBundle");
    v62 = String._bridgeToObjectiveC()();
    v63 = objc_msgSend(v61, "localizedStringForKey:value:table:", v62, 0, 0);

    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    v199 = v64;
    v200 = v66;
    v67 = Text.init<A>(_:)(&v199, &type metadata for String, v192);
    v69 = v68;
    v71 = v70;
    v73 = v72 & 1;
    v75 = static Font.body.getter(v74);
    v77 = Text.font(_:)(v75, v67, v69, v73, v71, v76);
    v79 = v78;
    LOBYTE(v44) = v80;
    v82 = v81;
    swift_release(v75);
    v83 = v44 & 1;
    sub_1000E4458(v67, v69, v73);
    swift_bridgeObjectRelease(v71);
    v84 = Text.foregroundColor(_:)(*(_QWORD *)(v193 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_timeColor), v77, v79, v83, v82);
    v86 = v85;
    LOBYTE(v71) = v87;
    v89 = v88;
    sub_1000E4458(v77, v79, v83);
    swift_bridgeObjectRelease(v82);
    v90 = swift_getKeyPath(&unk_10062B620);
    v199 = v84;
    v200 = v86;
    v201 = v71 & 1;
    v202 = v89;
    v203 = v90;
    v204 = 1;
    v205 = 0;
    v91 = v56;
    v92 = v197;
    ((void (*)(char *, _QWORD, uint64_t))v191)(v56, v190, v197);
    v93 = v183;
    View.dynamicTypeSize(_:)(v91, v189, v188);
    v187(v91, v92);
    sub_1000E4458(v199, v200, v201);
    swift_bridgeObjectRelease(v202);
    v94 = swift_release(v203);
    v186(v184, v93, v198, v94);
    v95 = objc_msgSend(v182, "mainBundle");
    v96 = String._bridgeToObjectiveC()();
    v97 = objc_msgSend(v95, "localizedStringForKey:value:table:", v96, 0, 0);

    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v100 = v99;

    v199 = v98;
    v200 = v100;
    v101 = Text.init<A>(_:)(&v199, &type metadata for String, v192);
    v103 = v102;
    v105 = v104;
    v107 = v106 & 1;
    v109 = static Font.body.getter(v108);
    v111 = Text.font(_:)(v109, v101, v103, v107, v105, v110);
    v113 = v112;
    LOBYTE(v75) = v114;
    v116 = v115;
    swift_release(v109);
    sub_1000E4458(v101, v103, v107);
    swift_bridgeObjectRelease(v105);
    v117 = Text.foregroundColor(_:)(*(_QWORD *)(v193 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_restColor), v111, v113, v75 & 1, v116);
    v119 = v118;
    LOBYTE(v105) = v120;
    v122 = v121;
    sub_1000E4458(v111, v113, v75 & 1);
    swift_bridgeObjectRelease(v116);
    v123 = swift_getKeyPath(&unk_10062B620);
    v199 = v117;
    v200 = v119;
    v124 = 1;
    v201 = v105 & 1;
    v202 = v122;
    v203 = v123;
    v204 = 1;
    v205 = 0;
    v125 = v194;
    v126 = v197;
    ((void (*)(char *, _QWORD, uint64_t))v191)(v194, v190, v197);
    View.dynamicTypeSize(_:)(v125, v189, v188);
    v187(v125, v126);
    sub_1000E4458(v199, v200, v201);
    swift_bridgeObjectRelease(v202);
    v127 = swift_release(v203);
    v128 = v195;
    v186(v195, v93, v198, v127);
    if ((uint64_t)objc_msgSend(v177, "swolfScore") < 1)
    {
      v163 = (uint64_t)v176;
      v158 = v93;
    }
    else
    {
      v129 = objc_msgSend(v182, "mainBundle");
      v130 = String._bridgeToObjectiveC()();
      v131 = objc_msgSend(v129, "localizedStringForKey:value:table:", v130, 0, 0);

      v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
      v134 = v133;

      v199 = v132;
      v200 = v134;
      v135 = Text.init<A>(_:)(&v199, &type metadata for String, v192);
      v137 = v136;
      v139 = v138;
      v141 = v140 & 1;
      v143 = static Font.body.getter(v142);
      v145 = Text.font(_:)(v143, v135, v137, v141, v139, v144);
      v147 = v146;
      v149 = v148;
      v151 = v150;
      swift_release(v143);
      sub_1000E4458(v135, v137, v141);
      swift_bridgeObjectRelease(v139);
      v152 = Text.foregroundColor(_:)(*(_QWORD *)(v193 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_swolfColor), v145, v147, v149 & 1, v151);
      v154 = v153;
      LOBYTE(v139) = v155;
      v157 = v156;
      sub_1000E4458(v145, v147, v149 & 1);
      v158 = v93;
      swift_bridgeObjectRelease(v151);
      v159 = swift_getKeyPath(&unk_10062B620);
      v199 = v152;
      v200 = v154;
      v201 = v139 & 1;
      v202 = v157;
      v203 = v159;
      v204 = 1;
      v205 = 0;
      v160 = v194;
      v128 = v195;
      v161 = v197;
      ((void (*)(char *, _QWORD, uint64_t))v191)(v194, v190, v197);
      View.dynamicTypeSize(_:)(v160, v189, v188);
      v187(v160, v161);
      sub_1000E4458(v199, v200, v201);
      swift_bridgeObjectRelease(v202);
      v162 = swift_release(v203);
      v163 = (uint64_t)v176;
      v186(v176, v93, v198, v162);
      v124 = 0;
    }
    v164 = v185;
    v165 = v198;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v185 + 56))(v163, v124, 1, v198);
    v166 = *(void (**)(char *, char *, uint64_t))(v164 + 16);
    v166(v158, v196, v165);
    v167 = v178;
    v168 = v184;
    v166(v178, v184, v165);
    v169 = v158;
    v170 = v179;
    v166(v179, v128, v165);
    v171 = v181;
    sub_100021CC0(v163, v181, &qword_100825580);
    v172 = v180;
    v166(v180, v169, v165);
    v173 = (int *)sub_100047110(&qword_1008255B0);
    v166(&v172[v173[12]], v167, v165);
    v166(&v172[v173[16]], v170, v165);
    sub_100021CC0(v171, (uint64_t)&v172[v173[20]], &qword_100825580);
    sub_10001BE90(v163, &qword_100825580);
    v174 = *(void (**)(char *, uint64_t))(v164 + 8);
    v174(v195, v165);
    v174(v168, v165);
    v174(v196, v165);
    sub_10001BE90(v171, &qword_100825580);
    v174(v170, v165);
    v174(v167, v165);
    return (id)((uint64_t (*)(char *, uint64_t))v174)(v183, v165);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001C0440(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  void (*v59)(_QWORD);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  __n128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __n128 v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  __n128 v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  int *v174;
  void (*v175)(char *, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  id v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  void (*v195)(char *, _QWORD, uint64_t);
  unint64_t v196;
  char *v197;
  void *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;

  v181 = a3;
  v5 = sub_100047110(&qword_100825580);
  v6 = __chkstk_darwin(v5);
  v182 = (uint64_t)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v177 = (char *)&v176 - v8;
  v201 = type metadata accessor for DynamicTypeSize(0);
  v191 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v200 = (char *)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100047110(&qword_100825588);
  v188 = *(_QWORD *)(v184 - 8);
  v10 = __chkstk_darwin(v184);
  v180 = (char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v179 = (char *)&v176 - v13;
  v14 = __chkstk_darwin(v12);
  v186 = (char *)&v176 - v15;
  v16 = __chkstk_darwin(v14);
  v178 = (char *)&v176 - v17;
  v18 = __chkstk_darwin(v16);
  v187 = (char *)&v176 - v19;
  v20 = __chkstk_darwin(v18);
  v183 = (char *)&v176 - v21;
  v22 = __chkstk_darwin(v20);
  v197 = (char *)&v176 - v23;
  v24 = __chkstk_darwin(v22);
  v190 = (char *)&v176 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v176 - v26;
  v199 = a2;
  v189 = *(id *)(a2 + OBJC_IVAR___WorkoutDetailSwimmingActivityDataSource_formattingManager);
  v28 = objc_msgSend(v189, "fitnessUIFormattingManager");
  v198 = a1;
  v29 = objc_msgSend(a1, "formattedDistanceValueWithFormattingManager:", v28);

  if (!v29)
  {
    __break(1u);
    goto LABEL_9;
  }
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v202 = v30;
  v203 = v32;
  v196 = sub_100038CA0();
  v33 = Text.init<A>(_:)(&v202, &type metadata for String, v196);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v41 = static Font.body.getter(v40);
  v43 = Text.font(_:)(v41, v33, v35, v39, v37, v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release(v41);
  v50 = v47 & 1;
  sub_1000E4458(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  v51 = Text.foregroundColor(_:)(*(_QWORD *)(v199 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_distanceColor), v43, v45, v50, v49);
  v53 = v52;
  LOBYTE(v41) = v54;
  v56 = v55;
  sub_1000E4458(v43, v45, v50);
  swift_bridgeObjectRelease(v49);
  KeyPath = swift_getKeyPath(&unk_10062B620);
  v202 = v51;
  v203 = v53;
  v204 = v41 & 1;
  v205 = v56;
  v206 = KeyPath;
  v207 = 1;
  v208 = 0;
  v58 = v191;
  v59 = *(void (**)(_QWORD))(v191 + 104);
  v60 = v200;
  v194 = enum case for DynamicTypeSize.large(_:);
  v61 = v201;
  v195 = (void (*)(char *, _QWORD, uint64_t))v59;
  v59(v200);
  v62 = sub_100047110(&qword_100825590);
  v63 = sub_1001C3060();
  v64 = v190;
  v193 = v62;
  v192 = v63;
  View.dynamicTypeSize(_:)(v60, v62, v63);
  v191 = *(_QWORD *)(v58 + 8);
  ((void (*)(char *, uint64_t))v191)(v60, v61);
  sub_1000E4458(v202, v203, v204);
  swift_bridgeObjectRelease(v205);
  v65 = swift_release(v206);
  v66 = *(char **)(v188 + 32);
  v185 = v27;
  v67 = v27;
  v68 = v184;
  v190 = v66;
  ((void (*)(char *, char *, uint64_t, __n128))v66)(v67, v64, v184, v65);
  v69 = objc_msgSend(v189, "fitnessUIFormattingManager");
  v70 = objc_msgSend(v198, "formattedActiveDurationWithFormattingManager:", v69);

  if (!v70)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
  v73 = v72;

  v202 = v71;
  v203 = v73;
  v74 = Text.init<A>(_:)(&v202, &type metadata for String, v196);
  v76 = v75;
  v78 = v77;
  v80 = v79 & 1;
  v82 = static Font.body.getter(v81);
  v84 = Text.font(_:)(v82, v74, v76, v80, v78, v83);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  swift_release(v82);
  sub_1000E4458(v74, v76, v80);
  swift_bridgeObjectRelease(v78);
  v91 = Text.foregroundColor(_:)(*(_QWORD *)(v199 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_timeColor), v84, v86, v88 & 1, v90);
  v93 = v92;
  LOBYTE(v78) = v94;
  v96 = v95;
  sub_1000E4458(v84, v86, v88 & 1);
  swift_bridgeObjectRelease(v90);
  v97 = swift_getKeyPath(&unk_10062B620);
  v202 = v91;
  v203 = v93;
  v204 = v78 & 1;
  v205 = v96;
  v206 = v97;
  v207 = 1;
  v208 = 0;
  v99 = v200;
  v98 = v201;
  v195(v200, v194, v201);
  v100 = v183;
  View.dynamicTypeSize(_:)(v99, v193, v192);
  ((void (*)(char *, uint64_t))v191)(v99, v98);
  sub_1000E4458(v202, v203, v204);
  swift_bridgeObjectRelease(v205);
  v101 = swift_release(v206);
  ((void (*)(char *, char *, uint64_t, __n128))v190)(v197, v100, v68, v101);
  v102 = objc_msgSend(v189, "fitnessUIFormattingManager");
  v103 = objc_msgSend(v198, "formattedRestDurationWithFormattingManager:", v102);

  if (!v103)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
  v106 = v105;

  v202 = v104;
  v203 = v106;
  v107 = Text.init<A>(_:)(&v202, &type metadata for String, v196);
  v109 = v108;
  v111 = v110;
  v113 = v112 & 1;
  v115 = static Font.body.getter(v114);
  v117 = Text.font(_:)(v115, v107, v109, v113, v111, v116);
  v119 = v118;
  v121 = v120;
  v123 = v122;
  swift_release(v115);
  sub_1000E4458(v107, v109, v113);
  swift_bridgeObjectRelease(v111);
  v124 = Text.foregroundColor(_:)(*(_QWORD *)(v199 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_restColor), v117, v119, v121 & 1, v123);
  v126 = v125;
  LOBYTE(v111) = v127;
  v129 = v128;
  sub_1000E4458(v117, v119, v121 & 1);
  swift_bridgeObjectRelease(v123);
  v130 = swift_getKeyPath(&unk_10062B620);
  v202 = v124;
  v203 = v126;
  v204 = v111 & 1;
  v205 = v129;
  v206 = v130;
  v131 = 1;
  v207 = 1;
  v208 = 0;
  v133 = v200;
  v132 = v201;
  v195(v200, v194, v201);
  v134 = v178;
  View.dynamicTypeSize(_:)(v133, v193, v192);
  ((void (*)(char *, uint64_t))v191)(v133, v132);
  sub_1000E4458(v202, v203, v204);
  swift_bridgeObjectRelease(v205);
  v135 = swift_release(v206);
  ((void (*)(char *, char *, uint64_t, __n128))v190)(v187, v134, v68, v135);
  if ((uint64_t)objc_msgSend(v198, "swolfScore") < 1)
  {
    v165 = (uint64_t)v177;
    v163 = v186;
  }
  else
  {
    v202 = sub_1001C29D8(v198);
    v203 = v136;
    v137 = Text.init<A>(_:)(&v202, &type metadata for String, v196);
    v139 = v138;
    v141 = v140;
    v143 = v142 & 1;
    v145 = static Font.body.getter(v144);
    v147 = Text.font(_:)(v145, v137, v139, v143, v141, v146);
    v149 = v148;
    v151 = v150;
    v153 = v152;
    swift_release(v145);
    sub_1000E4458(v137, v139, v143);
    swift_bridgeObjectRelease(v141);
    v154 = Text.foregroundColor(_:)(*(_QWORD *)(v199 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_swolfColor), v147, v149, v151 & 1, v153);
    v156 = v155;
    LOBYTE(v141) = v157;
    v159 = v158;
    sub_1000E4458(v147, v149, v151 & 1);
    swift_bridgeObjectRelease(v153);
    v160 = swift_getKeyPath(&unk_10062B620);
    v202 = v154;
    v203 = v156;
    v204 = v141 & 1;
    v205 = v159;
    v206 = v160;
    v207 = 1;
    v208 = 0;
    v162 = v200;
    v161 = v201;
    v195(v200, v194, v201);
    v163 = v186;
    View.dynamicTypeSize(_:)(v162, v193, v192);
    ((void (*)(char *, uint64_t))v191)(v162, v161);
    sub_1000E4458(v202, v203, v204);
    swift_bridgeObjectRelease(v205);
    v164 = swift_release(v206);
    v165 = (uint64_t)v177;
    ((void (*)(char *, char *, uint64_t, __n128))v190)(v177, v163, v68, v164);
    v131 = 0;
  }
  v166 = v188;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56))(v165, v131, 1, v68);
  v167 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
  v167(v163, v185, v68);
  v168 = v179;
  v167(v179, v197, v68);
  v169 = v180;
  v170 = v187;
  v167(v180, v187, v68);
  v171 = v163;
  v172 = v182;
  sub_100021CC0(v165, v182, &qword_100825580);
  v173 = v181;
  v167(v181, v171, v68);
  v174 = (int *)sub_100047110(&qword_1008255B0);
  v167(&v173[v174[12]], v168, v68);
  v167(&v173[v174[16]], v169, v68);
  sub_100021CC0(v172, (uint64_t)&v173[v174[20]], &qword_100825580);
  sub_10001BE90(v165, &qword_100825580);
  v175 = *(void (**)(char *, uint64_t))(v166 + 8);
  v175(v170, v68);
  v175(v197, v68);
  v175(v185, v68);
  sub_10001BE90(v172, &qword_100825580);
  v175(v169, v68);
  v175(v168, v68);
  v175(v186, v68);
}

uint64_t sub_1001C0FD0(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v30;

  KeyPath = swift_getKeyPath(&unk_10062B650);
  v4 = swift_getKeyPath(&unk_10062B678);
  static Published.subscript.getter(&v30, v1, KeyPath, v4);
  swift_release(KeyPath);
  *(_QWORD *)&v5 = swift_release(v4).n128_u64[0];
  v6 = v30;
  v7 = *(void **)(v1 + OBJC_IVAR___WorkoutDetailSwimmingActivityDataSource_formattingManager);
  v8 = objc_msgSend(v7, "fitnessUIFormattingManager", v5);
  v9 = objc_msgSend(a1, "formattedPaceUsingFormatType:formattingManager:", v6, v8);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0xE000000000000000;
  }
  v13 = objc_msgSend(v7, "fitnessUIFormattingManager");
  v14 = objc_msgSend(a1, "formattedStrokeCountUsingFormatType:formattingManager:", v6, v13);

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, 0);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = sub_100047110((uint64_t *)&unk_100827460);
  v25 = swift_allocObject(v24, 112, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  v26 = sub_100038CF8();
  *(_QWORD *)(v25 + 32) = v10;
  *(_QWORD *)(v25 + 40) = v12;
  *(_QWORD *)(v25 + 96) = &type metadata for String;
  *(_QWORD *)(v25 + 104) = v26;
  *(_QWORD *)(v25 + 64) = v26;
  *(_QWORD *)(v25 + 72) = v15;
  *(_QWORD *)(v25 + 80) = v17;
  v28 = String.init(format:_:)(v21, v23, v25, v27);
  swift_bridgeObjectRelease(v23);
  return v28;
}

void sub_1001C1228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14[5];
  _BYTE v15[32];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v3 = swift_getKeyPath(&unk_10062B600);
  v13 = v1;
  static Published.subscript.getter(v14, v1, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = v14[0];
  if (v14[0] >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((v14[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 0;
    v7 = v13 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columnSizes;
    v12 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns;
    while ((v4 & 0xC000000000000001) != 0)
    {
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      v9 = __OFADD__(v6++, 1);
      if (v9)
        goto LABEL_14;
LABEL_10:
      v10 = *(_QWORD *)(v13 + v12);
      if (*(_QWORD *)(v10 + 16))
      {
        swift_bridgeObjectRetain(v10);
        swift_beginAccess(v7, v15, 0, 0);
        __asm { BR              X8 }
      }

      if (v6 == v5)
        goto LABEL_13;
    }
    if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
    v8 = *(id *)(v4 + 32 + 8 * v6);
    v9 = __OFADD__(v6++, 1);
    if (!v9)
      goto LABEL_10;
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (v4 < 0)
      v11 = v4;
    else
      v11 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v4);
  }
LABEL_13:
  swift_bridgeObjectRelease(v4);
}

void sub_1001C1CBC(void *a1, void *a2, void *a3, void *a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD *v39;

  v37 = a3;
  v38 = a4;
  v36 = a2;
  v6 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008255B8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v4[OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource__swimmingSets];
  v39 = _swiftEmptyArrayStorage;
  v15 = v4;
  v16 = sub_100047110(&qword_1008254D0);
  Published.init(initialValue:)(&v39, v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  *(_QWORD *)&v15[OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns] = &off_10077F978;
  *(_QWORD *)&v15[OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columnSizes] = _swiftEmptyDictionarySingleton;
  v17 = (void *)objc_opt_self(ARUIMetricColors);
  v18 = objc_msgSend(v17, "distanceColors");
  if (!v18)
  {
    __break(1u);
    goto LABEL_11;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "nonGradientTextColor");

  if (!v20)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v21 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_distanceColor;
  *(_QWORD *)&v15[v21] = Color.init(_:)(v20);
  v22 = objc_msgSend(v17, "paceColors");
  if (!v22)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "nonGradientTextColor");

  if (!v24)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v25 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_paceColor;
  *(_QWORD *)&v15[v25] = Color.init(_:)(v24);
  v26 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_restColor;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Color.RGBColorSpace.sRGB(_:), v6);
  *(_QWORD *)&v15[v26] = Color.init(_:red:green:blue:opacity:)(v9, 0.541176471, 0.48627451, 0.0666666667, 1.0);
  v27 = objc_msgSend(v17, "elapsedTimeColors");
  if (!v27)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "nonGradientTextColor");

  if (!v29)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v30 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_timeColor;
  *(_QWORD *)&v15[v30] = Color.init(_:)(v29);
  v31 = objc_msgSend(v17, "paceColors");
  if (!v31)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v32 = v31;
  v33 = objc_msgSend(v31, "nonGradientTextColor");

  if (v33)
  {
    v34 = OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_swolfColor;
    *(_QWORD *)&v15[v34] = Color.init(_:)(v33);
    v35 = &v15[OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding];
    *(_OWORD *)v35 = xmmword_1006281F0;
    *((_OWORD *)v35 + 1) = xmmword_1006281F0;

    sub_10021FF54(a1, v36, v37, v38);
    return;
  }
LABEL_17:
  __break(1u);
}

double sub_1001C204C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource__swimmingSets;
  v2 = sub_100047110(&qword_1008255B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columnSizes));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_distanceColor));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_paceColor));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_restColor));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_timeColor));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_swolfColor)).n128_u64[0];
  return result;
}

id sub_1001C20FC()
{
  return sub_1001C25EC(type metadata accessor for WorkoutDetailSwimmingSetDataSource);
}

uint64_t sub_1001C21BC()
{
  return type metadata accessor for WorkoutDetailSwimmingSetDataSource(0);
}

uint64_t type metadata accessor for WorkoutDetailSwimmingSetDataSource(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_1008254B8, (uint64_t)&nominal type descriptor for WorkoutDetailSwimmingSetDataSource);
}

void sub_1001C21D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_1001C2274(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = " ";
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 208);
  }
}

void sub_1001C2274(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1008254C8)
  {
    v2 = sub_100007050(&qword_1008254D0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1008254C8);
  }
}

uint64_t sub_1001C22CC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_columns) + 16);
}

uint64_t sub_1001C22F0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for WorkoutDetailSwimmingSetDataSource(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C232C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD, __n128);
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  _QWORD v33[2];
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  _BYTE v36[32];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v33 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)v33 - v9;
  v11 = Date.init()(v8);
  Date.addingTimeInterval(_:)(v11, -3600.0);
  v33[0] = v1;
  v34 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v35 = v0;
  v12 = v34(v7, v0);
  Date.addingTimeInterval(_:)(v12, 300.0);
  v13 = 8;
  do
  {
    v14 = sub_1001C30E4();
    KeyPath = swift_getKeyPath(&unk_10062B5D8);
    v16 = swift_getKeyPath(&unk_10062B600);
    v17 = (void (*)(_BYTE *, _QWORD, __n128))static Published.subscript.modify(v36, v33[1], KeyPath, v16);
    v19 = v18;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
    v21 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v20 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v21 >= v20 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v14);
    v23 = specialized Array._endMutation()(v22);
    v17(v36, 0, v23);
    swift_release(KeyPath);
    swift_release(v16);
    Date.addingTimeInterval(_:)(v24, 300.0);
    v26 = (void (*)(char *, uint64_t))v34;
    v25 = v35;
    v34(v10, v35);
    v27 = *(uint64_t (**)(char *, char *, uint64_t))(v33[0] + 32);
    v28 = v27(v10, v7, v25);
    Date.addingTimeInterval(_:)(v28, 300.0);
    v26(v4, v25);
    v27(v4, v7, v25);
    --v13;
  }
  while (v13);
  v29 = v4;
  v31 = v34;
  v30 = v35;
  v34(v29, v35);
  return v31(v10, v30);
}

id sub_1001C25E0()
{
  return sub_1001C25EC(type metadata accessor for WorkoutDetailSwimmingSetPreviewDataSource);
}

id sub_1001C25EC(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1001C2624()
{
  return type metadata accessor for WorkoutDetailSwimmingSetPreviewDataSource(0);
}

uint64_t type metadata accessor for WorkoutDetailSwimmingSetPreviewDataSource(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100825500, (uint64_t)&nominal type descriptor for WorkoutDetailSwimmingSetPreviewDataSource);
}

uint64_t sub_1001C2640(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 480);
}

uint64_t storeEnumTagSinglePayload for WorkoutDetailSwimmingSetDataSource.Column(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001C26C0 + 4 * byte_10062B455[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001C26F4 + 4 * byte_10062B450[v4]))();
}

uint64_t sub_1001C26F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C26FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C2704);
  return result;
}

uint64_t sub_1001C2710(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C2718);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001C271C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C2724(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkoutDetailSwimmingSetDataSource.Column()
{
  return &type metadata for WorkoutDetailSwimmingSetDataSource.Column;
}

unint64_t sub_1001C2744()
{
  unint64_t result;

  result = qword_100825510;
  if (!qword_100825510)
  {
    result = swift_getWitnessTable(&unk_10062B55C, &type metadata for WorkoutDetailSwimmingSetDataSource.Column);
    atomic_store(result, (unint64_t *)&qword_100825510);
  }
  return result;
}

uint64_t sub_1001C2788(uint64_t a1)
{
  uint64_t result;

  result = sub_1000083D8((unint64_t *)&qword_100825518, type metadata accessor for WorkoutDetailSwimmingSetDataSource, (uint64_t)&unk_10062B584);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001C27C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v5 = swift_getKeyPath(&unk_10062B600);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001C2840(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v5 = swift_getKeyPath(&unk_10062B600);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001C28B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1001C28E4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_1001C2910(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t sub_1001C2920()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v2 = swift_getKeyPath(&unk_10062B600);
  static Published.subscript.getter(&v7, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v6 = v7;
    else
      v6 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1001C29D8(void *a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;

  if ((uint64_t)objc_msgSend(a1, "swolfScore") < 1)
    return 0;
  if (qword_10081D708 != -1)
    swift_once(&qword_10081D708, sub_1001BEB78);
  v2 = (void *)qword_100825440;
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(a1, "swolfScore"));
  v4 = objc_msgSend(v2, "stringFromNumber:", v3);

  if (!v4)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

uint64_t sub_1001C2AC0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[2];

  v5 = sub_100047110(&qword_100825520);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v53 = sub_100047110(&qword_100825528);
  __chkstk_darwin(v53);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100047110(&qword_100825530);
  __chkstk_darwin(v51);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100825538);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v52 = sub_100047110(&qword_100825540);
  __chkstk_darwin(v52);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10062B5D8);
  v18 = swift_getKeyPath(&unk_10062B600);
  static Published.subscript.getter(v54, v2, KeyPath, v18);
  swift_release(KeyPath);
  swift_release(v18);
  v19 = v54[0];
  if ((v54[0] & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v54[0] & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v20 = *(id *)(v54[0] + 8 * a1 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_15;
  }
  v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v54[0]);
LABEL_5:
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  switch(a2)
  {
    case 0:
      *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v22, v23, v24, v25, v26);
      *((_QWORD *)v14 + 1) = 0;
      v14[16] = 1;
      v27 = sub_100047110(&qword_100825548);
      v28 = sub_1001BF08C(a1, &v14[*(int *)(v27 + 44)]);
      goto LABEL_9;
    case 1:
      sub_1001BF678(v21, (uint64_t)v11);
      v46 = sub_1001C2F84(&qword_100825568, &qword_100825528, &qword_100825570, &qword_100825520);
      v54[0] = v53;
      v54[1] = v46;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v54, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
      v38 = AnyView.init<A>(_:)(v11, v51, OpaqueTypeConformance2);
      v33 = v21;
      goto LABEL_11;
    case 2:
      *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v22);
      *((_QWORD *)v7 + 1) = 0;
      v7[16] = 1;
      v29 = sub_100047110(&qword_100825560);
      sub_1001C0440(v21, v2, &v7[*(int *)(v29 + 44)]);
      v52 = *(_OWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding);
      v30 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 16);
      v31 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 24);
      v33 = v21;
      v34 = static Edge.Set.all.getter(v32);
      sub_100021CC0((uint64_t)v7, (uint64_t)v9, &qword_100825520);
      v35 = v53;
      v36 = &v9[*(int *)(v53 + 36)];
      *v36 = v34;
      *(_OWORD *)(v36 + 8) = v52;
      *((_QWORD *)v36 + 3) = v30;
      *((_QWORD *)v36 + 4) = v31;
      v36[40] = 0;
      sub_10001BE90((uint64_t)v7, &qword_100825520);
      v37 = sub_1001C2F84(&qword_100825568, &qword_100825528, &qword_100825570, &qword_100825520);
      v38 = AnyView.init<A>(_:)(v9, v35, v37);
      goto LABEL_11;
    case 3:
      *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v22, v23, v24, v25, v26);
      *((_QWORD *)v14 + 1) = 0;
      v14[16] = 1;
      v39 = sub_100047110(&qword_100825548);
      v28 = sub_1001BF3C4(v2, v21, &v14[*(int *)(v39 + 44)]);
LABEL_9:
      v53 = *(_OWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding);
      v40 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 16);
      v41 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailSwimmingSetDataSource_cellPadding + 24);
      v33 = v21;
      v42 = static Edge.Set.all.getter(v28);
      sub_100021CC0((uint64_t)v14, (uint64_t)v16, &qword_100825538);
      v43 = v52;
      v44 = &v16[*(int *)(v52 + 36)];
      *v44 = v42;
      *(_OWORD *)(v44 + 8) = v53;
      *((_QWORD *)v44 + 3) = v40;
      *((_QWORD *)v44 + 4) = v41;
      v44[40] = 0;
      sub_10001BE90((uint64_t)v14, &qword_100825538);
      v45 = sub_1001C2F84(&qword_100825550, &qword_100825540, &qword_100825558, &qword_100825538);
      v38 = AnyView.init<A>(_:)(v16, v43, v45);
LABEL_11:
      v48 = v38;

      return v48;
    default:
      break;
  }
LABEL_15:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x800000010068E890, "FitnessApp/WorkoutDetailSwimmingSetDataSource.swift", 51, 2, 107, 0);
  __break(1u);
  JUMPOUT(0x1001C2F6CLL);
}

uint64_t sub_1001C2F84(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007050(a2);
    sub_100028384(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C3004@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1001C3034(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_1001C3060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825598;
  if (!qword_100825598)
  {
    v1 = sub_100007050(&qword_100825590);
    sub_100028384(&qword_1008255A0, &qword_1008255A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825598);
  }
  return result;
}

unint64_t sub_1001C30E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  unint64_t v6;
  double v7;
  Class v8;
  Class v9;
  id v10;
  unint64_t result;
  id v12;
  uint64_t v13;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)CHWorkoutSwimmingSet), "init");
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setStartDate:", isa);

  v6 = sub_10029B610(0x20000000000001uLL);
  v7 = (double)v6 * 1.11022302e-16 * 30.0 + 30.0;
  if (v6 == 0x20000000000000)
    v7 = 60.0;
  Date.addingTimeInterval(_:)(v6, -v7);
  v8 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setMovementEndDate:", v8);

  v9 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setEndDate:", v9);

  objc_msgSend(v4, "setDominantStrokeStyle:", sub_10029B610(5uLL) + 1);
  objc_msgSend(v4, "setStrokeCount:", sub_10029B610(0x15uLL) + 10);
  v10 = objc_msgSend((id)objc_opt_self(HKUnit), "yardUnit");
  result = sub_10004D28C(3uLL);
  if (result > 2)
  {
    __break(1u);
  }
  else
  {
    v12 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v10, *((double *)&off_10077F908 + result + 4));

    objc_msgSend(v4, "setDistance:", v12);
    objc_msgSend(v4, "setSwolfScore:", sub_10029B610(0x1AuLL) + 25);
    return (unint64_t)v4;
  }
  return result;
}

uint64_t sub_1001C3320()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001C3344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001BED38(a1, a2, *(void **)(v2 + 16));
}

uint64_t SleepingSampleBaselineRelativeChartPoint.init(date:value:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v10 = a4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for BaselineRelativeValue(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for SleepingSampleBaselineRelativeChartPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_100825630;
  if (!qword_100825630)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SleepingSampleBaselineRelativeChartPoint);
  return result;
}

uint64_t SleepingSampleBaselineRelativeChartPoint.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t static SleepingSampleBaselineRelativeChartPoint.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0),
        (static BaselineRelativeValue.== infix(_:_:)(a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0))
  {
    return static Color.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001C34CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Date.== infix(_:_:)() & 1) != 0
    && (static BaselineRelativeValue.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    return static Color.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 24)), *(_QWORD *)(a2 + *(int *)(a3 + 24)));
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1001C3538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008214E8;
  if (!qword_1008214E8)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1008214E8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleBaselineRelativeChartPoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for BaselineRelativeValue(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
  }
  swift_retain(v13);
  return a1;
}

uint64_t destroy for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_retain(v12);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaselineRelativeValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C3914);
}

uint64_t sub_1001C3914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for BaselineRelativeValue(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineRelativeChartPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C39C8);
}

uint64_t sub_1001C39C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for BaselineRelativeValue(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_1001C3A6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BaselineRelativeValue(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

id sub_1001C3AFC()
{
  char *v0;
  void *v1;
  void *v2;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint];
  if (v1)
    objc_msgSend(v1, "setConstant:", *(double *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaseline]);
  v2 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint];
  if (v2)
    objc_msgSend(v2, "setConstant:", *(double *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline]);
  objc_msgSend(v0, "setNeedsLayout");
  return objc_msgSend(v0, "invalidateIntrinsicContentSize");
}

id sub_1001C3BB0(void *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v2 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v1;
  v34 = v2;
  v35 = v1;
  *(_QWORD *)&v1[v2] = objc_msgSend(v3, "labelColor");
  v33 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  *(_QWORD *)&v4[v33] = objc_msgSend(v3, "labelColor");
  v5 = &v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v29 = v5;
  v28 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText] = 0;
  v6 = &v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v30 = v6;
  v7 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v8 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v8, "setAdjustsFontForContentSizeCategory:", 1);
  v9 = (void *)objc_opt_self(UIFont);
  v10 = objc_msgSend(v9, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v11 = UILabel.withFont(_:)(v10);

  v31 = v7;
  *(_QWORD *)&v4[v7] = v11;
  v12 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v12, "setAdjustsFontForContentSizeCategory:", 1);
  result = objc_msgSend(v9, "systemFontOfSize:weight:design:", UIFontSystemFontDesignRounded, 30.0, UIFontWeightMedium);
  if (result)
  {
    v14 = result;
    v15 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    v16 = UILabel.withFont(_:)(result);

    *(_QWORD *)&v4[v15] = v16;
    v17 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaseline;
    v18 = objc_msgSend(v9, "preferredFontForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v18, "_scaledValueForValue:", 15.0);
    v20 = v19;

    *(_QWORD *)&v4[v17] = v20;
    v21 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint;
    *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint] = 0;
    if (FIUICurrentLanguageRequiresTallScript())
    {

      v22 = 32.0;
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v24 = objc_msgSend(v23, "preferredContentSizeCategory");

      LOBYTE(v23) = UIContentSizeCategory.isAccessibilityCategory.getter(v24);
      v22 = 32.0;
      if ((v23 & 1) == 0)
        v22 = 29.0;
    }
    *(double *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline] = v22;
    v25 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint;
    *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint] = 0;
    *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4030000000000000;

    swift_bridgeObjectRelease(*((_QWORD *)v29 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v30 + 1));

    v26 = *(void **)&v4[v25];
    v27 = type metadata accessor for DayViewTitleAndValueLabelPair();
    swift_deallocPartialClassInstance(v4, v27, 120, 7);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001C3F80()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DayViewTitleAndValueLabelPair();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001C4060@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  __n128 v32;
  uint64_t v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  __n128 v42;
  uint64_t result;
  uint64_t v44;

  v8 = sub_100047110(&qword_1008256F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetricPlatter(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DataLinkMonitor();
  v16 = sub_1000083D8((unint64_t *)&qword_10081F7B0, (uint64_t (*)(uint64_t))type metadata accessor for DataLinkMonitor, (uint64_t)&unk_100636D30);
  *(_QWORD *)a4 = EnvironmentObject.init()(v15, v16);
  *(_QWORD *)(a4 + 8) = v17;
  *(_OWORD *)(a4 + 64) = xmmword_10062B780;
  *(_QWORD *)(a4 + 56) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  v18 = a1;
  v19 = swift_retain(a2);
  v20 = MetricsPublisher.platterPublisher.getter(v19);
  v21 = type metadata accessor for PlatterPublisher(0);
  v22 = sub_1000083D8(&qword_100825700, (uint64_t (*)(uint64_t))&type metadata accessor for PlatterPublisher, (uint64_t)&protocol conformance descriptor for PlatterPublisher);
  *(_QWORD *)(a4 + 24) = ObservedObject.init(wrappedValue:)(v20, v21, v22);
  *(_QWORD *)(a4 + 32) = v23;
  v24 = type metadata accessor for WorkoutNotificationCenter(0);
  v25 = sub_1000083D8(&qword_100825708, type metadata accessor for WorkoutNotificationCenter, (uint64_t)&unk_10063AA28);
  swift_retain(a3);
  *(_QWORD *)(a4 + 40) = ObservedObject.init(wrappedValue:)(v26, v24, v25);
  *(_QWORD *)(a4 + 48) = v27;
  v29 = MetricsPublisher.platterPublisher.getter(v28);
  v31 = (CHWorkoutDetailHeartRateTableViewCell *)PlatterPublisher.metricPlatters.getter(v30);
  v32 = swift_release(v29);
  if (*(_QWORD *)v31->cellPadding)
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v10, (unint64_t)v31+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v11, v32);
    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v33, 1, v11);
  swift_bridgeObjectRelease(v31, v34, v35, v36, v37, v38, v39, v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001BE90((uint64_t)v10, &qword_1008256F8);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000021, 0x800000010068EA80, "FitnessApp/MirrorPlatterView.swift", 34, 2, 34, 0);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v41 = a4 + *(int *)(type metadata accessor for MirrorPlatterView(0) + 44);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v41, v14, v11);
    *(_QWORD *)(v41 + *(int *)(sub_100047110(&qword_100825710) + 28)) = 0;
    sub_1001C43A8();

    swift_release(a2);
    v42 = swift_release(a3);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v42);
  }
  return result;
}

uint64_t type metadata accessor for MirrorPlatterView(uint64_t a1)
{
  uint64_t result;

  result = qword_100825770;
  if (!qword_100825770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MirrorPlatterView);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_1001C43A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __n128 v23;
  CHWorkoutDetailHeartRateTableViewCell *result;
  unint64_t v25;
  uint64_t v26;
  CHWorkoutDetailHeartRateTableViewCell *v27;
  Swift::String v28;
  CHWorkoutDetailHeartRateTableViewCell *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Swift::String v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  Swift::String v62;
  char v63;
  BOOL v64;
  uint64_t v65;
  CHWorkoutDetailHeartRateTableViewCell *v66;
  CHWorkoutDetailHeartRateTableViewCell *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  Swift::String v75;
  CHWorkoutDetailHeartRateTableViewCell *object;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  CHWorkoutDetailHeartRateTableViewCell *v85;
  const char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  __n128 v93;
  CHWorkoutDetailHeartRateTableViewCell *v94;
  int64_t v95;
  const char *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  CHWorkoutDetailHeartRateTableViewCell *v122;
  uint64_t v123;
  uint64_t v124;
  CHWorkoutDetailHeartRateTableViewCell *v125;
  Swift::String v126;
  unint64_t v127;
  unint64_t v128;

  v1 = 0xD000000000000019;
  v2 = type metadata accessor for Logger(0);
  v115 = *(_QWORD *)(v2 - 8);
  v116 = v2;
  __chkstk_darwin(v2);
  v114 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MetricPlatterType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MetricPlatter(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0x800000010068EAB0;
  v127 = 0xD000000000000019;
  v128 = 0x800000010068EAB0;
  v13 = *(_QWORD *)(v0 + 32);
  v14 = swift_retain(v13);
  v15 = (CHWorkoutDetailHeartRateTableViewCell *)PlatterPublisher.metricPlatters.getter(v14);
  v23 = swift_release(v13);
  result = v15;
  v124 = *(_QWORD *)v15->cellPadding;
  if (v124)
  {
    v25 = 0;
    v26 = *(unsigned __int8 *)(v9 + 80);
    v120 = v8;
    v121 = (char *)result + ((v26 + 32) & ~v26);
    v118 = v5;
    v119 = v4;
    v117 = v7;
    v122 = result;
    v123 = v9;
    while (v25 < *(_QWORD *)result->cellPadding)
    {
      (*(void (**)(char *, char *, uint64_t, __n128))(v9 + 16))(v11, &v121[*(_QWORD *)(v9 + 72) * v25], v8, v23);
      v126._countAndFlagsBits = 0;
      v126._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      v60._countAndFlagsBits = 0x2065707954;
      v60._object = (void *)0xE500000000000000;
      String.append(_:)(v60);
      MetricPlatter.type.getter(v61);
      _print_unlocked<A, B>(_:_:)(v7, &v126, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v62._countAndFlagsBits = 0x64756C636E69202CLL;
      v62._object = (void *)0xEB00000000203A65;
      String.append(_:)(v62);
      v63 = MetricPlatter.include.getter();
      v64 = (v63 & 1) == 0;
      if ((v63 & 1) != 0)
        v65 = 1702195828;
      else
        v65 = 0x65736C6166;
      if (v64)
        v66 = (CHWorkoutDetailHeartRateTableViewCell *)0xE500000000000000;
      else
        v66 = (CHWorkoutDetailHeartRateTableViewCell *)0xE400000000000000;
      v67 = v66;
      String.append(_:)(*(Swift::String *)&v65);
      swift_bridgeObjectRelease(v66, v68, v69, v70, v71, v72, v73, v74);
      v75._countAndFlagsBits = 8236;
      v75._object = (void *)0xE200000000000000;
      String.append(_:)(v75);
      object = (CHWorkoutDetailHeartRateTableViewCell *)v126._object;
      String.append(_:)(v126);
      swift_bridgeObjectRelease(object, v77, v78, v79, v80, v81, v82, v83);
      v126._countAndFlagsBits = 0x3A7363697274656DLL;
      v126._object = (void *)0xE900000000000020;
      v85 = (CHWorkoutDetailHeartRateTableViewCell *)MetricPlatter.metrics.getter(v84);
      if (v85)
      {
        v94 = v85;
        v95 = *(_QWORD *)v85->cellPadding;
        if (v95)
        {
          v125 = &_swiftEmptyArrayStorage;
          sub_100121838(0, v95, 0);
          v103 = 0;
          v27 = v125;
          v104 = *(_QWORD *)v125->cellPadding;
          do
          {
            v105 = *((_QWORD *)&v94[1].super.super.super.super.isa + v103);
            v125 = v27;
            v106 = *(_QWORD *)v27->cellInset;
            if (v104 >= v106 >> 1)
            {
              sub_100121838(v106 > 1, v104 + 1, 1);
              v27 = v125;
            }
            ++v103;
            *(_QWORD *)v27->cellPadding = v104 + 1;
            *((_QWORD *)&v27[1].super.super.super.super.isa + v104++) = v105;
          }
          while (v95 != v103);
          swift_bridgeObjectRelease(v94, v96, v97, v98, v99, v100, v101, v102);
          v5 = v118;
          v4 = v119;
          v7 = v117;
        }
        else
        {
          swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
          v27 = &_swiftEmptyArrayStorage;
        }
        v8 = v120;
      }
      else
      {
        v27 = &_swiftEmptyArrayStorage;
      }
      ++v25;
      v28._countAndFlagsBits = Array.description.getter(v93);
      v29 = (CHWorkoutDetailHeartRateTableViewCell *)v28._object;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(v27, v30, v31, v32, v33, v34, v35, v36);
      swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43);
      v44._countAndFlagsBits = 10;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v45 = (CHWorkoutDetailHeartRateTableViewCell *)v126._object;
      String.append(_:)(v126);
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      v9 = v123;
      (*(void (**)(char *, uint64_t))(v123 + 8))(v11, v8);
      result = v122;
      if (v25 == v124)
      {
        swift_bridgeObjectRelease(v122, v53, v54, v55, v56, v57, v58, v59);
        v1 = v127;
        v12 = v128;
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_23:
    v108 = v114;
    static WOLog.dataLink.getter(v107);
    swift_bridgeObjectRetain(v12);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.default.getter(v110);
    if (os_log_type_enabled(v110, v111))
    {
      v112 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = swift_slowAlloc(32, -1);
      v126._countAndFlagsBits = v113;
      *(_DWORD *)v112 = 136315138;
      swift_bridgeObjectRetain(v12);
      v125 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10003E8EC(v1, v12, &v126._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v112 + 4);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "%s", v112, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      swift_slowDealloc(v112, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v12, 2);
    }
    return (CHWorkoutDetailHeartRateTableViewCell *)(*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v108, v116);
  }
  return result;
}

uint64_t sub_1001C48DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char v24;
  __n128 v25;
  void (*v26)(char *, uint64_t, __n128);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t result;
  char v34;
  __n128 v35;
  void (*v36)(char *, uint64_t, __n128);
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v37[1] = a1;
  v1 = type metadata accessor for WorkoutNotification.NotificationType(0);
  v39 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v38 = (char *)v37 - v5;
  v6 = type metadata accessor for MetricPlatterType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v37 - v11;
  v13 = type metadata accessor for MetricPlatter(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (_QWORD *)((char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MirrorPlatterView(0);
  v17 = sub_100047110(&qword_100825710);
  v18 = State.wrappedValue.getter(v16, v17);
  MetricPlatter.type.getter(v18);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for MetricPlatterType.interval(_:), v6);
  v19 = sub_1000083D8(&qword_100825B08, (uint64_t (*)(uint64_t))&type metadata accessor for MetricPlatterType, (uint64_t)&protocol conformance descriptor for MetricPlatterType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v42, v6, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v40, v6, v19);
  v20 = v43;
  v21 = v41;
  if (v42 == v40 && v43 == v41)
  {
    swift_bridgeObjectRelease_n(v43, 2);
    v22 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22(v10, v6);
    v23 = ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v40, v41, 0);
    swift_bridgeObjectRelease(v20);
    v25 = swift_bridgeObjectRelease(v21);
    v26 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v26(v10, v6, v25);
    v23 = ((uint64_t (*)(char *, uint64_t))v26)(v12, v6);
    if ((v24 & 1) == 0)
      return 1;
  }
  v27 = v38;
  dispatch thunk of WorkoutNotification.notificationType.getter(v23);
  v28 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v4, enum case for WorkoutNotification.NotificationType.zone(_:), v1);
  v29 = sub_1000083D8(&qword_100825B10, (uint64_t (*)(uint64_t))&type metadata accessor for WorkoutNotification.NotificationType, (uint64_t)&protocol conformance descriptor for WorkoutNotification.NotificationType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v42, v1, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v40, v1, v29);
  v30 = v43;
  v31 = v41;
  if (v42 == v40 && v43 == v41)
  {
    swift_bridgeObjectRelease_n(v43, 2);
    v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    v32(v4, v1);
    v32(v27, v1);
    return 0;
  }
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v40, v41, 0);
  swift_bridgeObjectRelease(v30);
  v35 = swift_bridgeObjectRelease(v31);
  v36 = *(void (**)(char *, uint64_t, __n128))(v28 + 8);
  v36(v4, v1, v35);
  ((void (*)(char *, uint64_t))v36)(v27, v1);
  result = 0;
  if ((v34 & 1) == 0)
    return 1;
  return result;
}

uint64_t sub_1001C4C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100047110(&qword_1008257C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1001C4D58(v2, (uint64_t)v6);
  v8 = static Animation.default.getter(v7);
  v9 = *(_QWORD *)(v2 + 48);
  KeyPath = swift_getKeyPath(&unk_10062B838);
  v11 = swift_getKeyPath(&unk_10062B860);
  swift_retain(v9);
  static Published.subscript.getter(&v17, v12, KeyPath, v11);
  swift_release(v9);
  swift_release(KeyPath);
  swift_release(v11);
  v13 = v17;
  sub_100021CC0((uint64_t)v6, a1, &qword_1008257C8);
  v14 = (uint64_t *)(a1 + *(int *)(sub_100047110(&qword_1008257D0) + 36));
  *v14 = v8;
  v14[1] = v13;
  return sub_10001BE90((uint64_t)v6, &qword_1008257C8);
}

uint64_t sub_1001C4D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  __n128 v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t OpaqueTypeConformance2;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  void *v194;
  unint64_t v195;

  v192 = a2;
  v193 = (_QWORD *)type metadata accessor for MetricPlatter(0);
  v178 = *(v193 - 1);
  __chkstk_darwin(v193);
  v177 = (uint64_t *)((char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for PageTabViewStyle.IndexDisplayMode(0);
  __chkstk_darwin(v4);
  v162 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for PageTabViewStyle(0);
  v165 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v163 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_1008257D8);
  __chkstk_darwin(v7);
  v157 = (uint64_t *)((char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v160 = sub_100047110(&qword_1008257E0);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100047110(&qword_1008257E8);
  v166 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v164 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100047110(&qword_1008257F0);
  __chkstk_darwin(v161);
  v169 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100047110(&qword_1008257F8);
  __chkstk_darwin(v170);
  v171 = (uint64_t)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100047110(&qword_100825800);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v173 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100047110(&qword_100825808);
  v14 = __chkstk_darwin(v191);
  v172 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v176 = (uint64_t)&v145 - v16;
  v189 = sub_100047110(&qword_100825810);
  __chkstk_darwin(v189);
  v190 = (uint64_t)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for MirrorPlatterView(0);
  v184 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v185 = v18;
  v187 = (uint64_t)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MoveTransition(0);
  v182 = *(_QWORD *)(v19 - 8);
  v183 = v19;
  v20 = __chkstk_darwin(v19);
  v180 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v181 = (char *)&v145 - v22;
  v151 = type metadata accessor for WorkoutViewStyle(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v24 = (char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for WorkoutNotificationView(0);
  v147 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100047110(&qword_100825818);
  v146 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v29 = (char *)&v145 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100047110(&qword_100825820);
  __chkstk_darwin(v145);
  v31 = (char *)&v145 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100047110(&qword_100825828);
  __chkstk_darwin(v148);
  v33 = (char *)&v145 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100047110(&qword_100825830);
  __chkstk_darwin(v186);
  v153 = (uint64_t)&v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100047110(&qword_100825838);
  v155 = *(_QWORD *)(v188 - 8);
  v35 = __chkstk_darwin(v188);
  v152 = (char *)&v145 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v154 = (char *)&v145 - v37;
  v38 = *(_QWORD *)(a1 + 48);
  KeyPath = swift_getKeyPath(&unk_10062B838);
  v40 = swift_getKeyPath(&unk_10062B860);
  swift_retain(v38);
  static Published.subscript.getter(&v194, v41, KeyPath, v40);
  swift_release(v38);
  swift_release(KeyPath);
  v42 = v40;
  v43 = a1;
  swift_release(v42);
  v44 = v194;
  v179 = a1;
  if (!v194)
    goto LABEL_7;
  if ((sub_1001C48DC((uint64_t)v194) & 1) == 0)
  {

LABEL_7:
    v81 = a1;
    v156 = a1 + *(int *)(v156 + 44);
    v82 = sub_100047110(&qword_100825710);
    v83 = v157;
    State.projectedValue.getter(v157);
    v84 = sub_100047110(&qword_100825840);
    v85 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
    __chkstk_darwin(v85);
    *(&v145 - 2) = v43;
    v86 = sub_100047110(&qword_100825848);
    v87 = sub_1000083D8(&qword_100825850, (uint64_t (*)(uint64_t))&type metadata accessor for MetricPlatter, (uint64_t)&protocol conformance descriptor for MetricPlatter);
    v88 = sub_1000F0610(&qword_100825858, &qword_100825848, (void (*)(void))sub_1001C6CDC, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    v89 = v158;
    v90 = TabView.init(selection:content:)(v83, sub_1001C6CD4, &v145 - 4, v193, v86, v87, v88);
    v91 = v162;
    static PageTabViewStyle.IndexDisplayMode.automatic.getter(v90);
    v92 = v163;
    PageTabViewStyle.init(indexDisplayMode:)(v91);
    v93 = sub_100028384(&qword_100825AA8, &qword_1008257E0, (uint64_t)&protocol conformance descriptor for TabView<A, B>);
    v94 = v164;
    v95 = v160;
    v96 = v167;
    View.tabViewStyle<A>(_:)(v92, v160, v167, v93, &protocol witness table for PageTabViewStyle);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v92, v96);
    v97 = (*(uint64_t (**)(char *, uint64_t))(v159 + 8))(v89, v95);
    LOBYTE(v91) = static Edge.Set.bottom.getter(v97);
    v98.n128_u64[0] = -3.0;
    v99.n128_u64[0] = 3.0;
    v100 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(-9.0, 0.0, v98, -1.0, v99, 0.0, 0.0);
    v101 = EdgeInsets.init(_all:)(v100);
    v103 = v102;
    v105 = v104;
    v107 = v106;
    v108 = v166;
    v109 = (uint64_t)v169;
    v110 = v168;
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v169, v94, v168);
    v111 = v109 + *(int *)(v161 + 36);
    *(_BYTE *)v111 = (_BYTE)v91;
    *(double *)(v111 + 8) = v101;
    *(_QWORD *)(v111 + 16) = v103;
    *(_QWORD *)(v111 + 24) = v105;
    *(_QWORD *)(v111 + 32) = v107;
    *(_BYTE *)(v111 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v108 + 8))(v94, v110);
    v112 = v181;
    MoveTransition.init(edge:)(3);
    v114 = v182;
    v113 = v183;
    v115 = v180;
    (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v180, v112, v183);
    v116 = sub_1000083D8(&qword_100825AB0, (uint64_t (*)(uint64_t))&type metadata accessor for MoveTransition, (uint64_t)&protocol conformance descriptor for MoveTransition);
    v117 = AnyTransition.init<A>(_:)(v115, v113, v116);
    v118 = v171;
    sub_100021CC0(v109, v171, &qword_1008257F0);
    v119 = v170;
    *(_QWORD *)(v118 + *(int *)(v170 + 36)) = v117;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v113);
    sub_10001BE90(v109, &qword_1008257F0);
    v120 = v177;
    State.wrappedValue.getter(v177, v82);
    v121 = v187;
    sub_1001C75FC(v81, v187);
    v122 = *(unsigned __int8 *)(v184 + 80);
    v123 = (v122 + 16) & ~v122;
    v124 = v123 + v185;
    v125 = v122 | 7;
    v126 = swift_allocObject(&unk_10078CCA8, v123 + v185, v122 | 7);
    sub_1001C7644(v121, v126 + v123);
    v127 = sub_1001C7694();
    v128 = sub_1000083D8(&qword_100825AD8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricPlatter, (uint64_t)&protocol conformance descriptor for MetricPlatter);
    v129 = v173;
    v130 = v119;
    v131 = v193;
    View.onChange<A>(of:initial:_:)(v120, 1, sub_1001C7688, v126, v130, v193, v127, v128);
    v132 = swift_release(v126);
    (*(void (**)(_QWORD *, _QWORD *, __n128))(v178 + 8))(v120, v131, v132);
    sub_10001BE90(v118, &qword_1008257F8);
    sub_1001C75FC(v179, v121);
    v133 = swift_allocObject(&unk_10078CCD0, v124, v125);
    sub_1001C7644(v121, v133 + v123);
    v134 = v174;
    v135 = v172;
    v136 = v175;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v172, v129, v175);
    v137 = v191;
    v138 = &v135[*(int *)(v191 + 36)];
    *(_QWORD *)v138 = 0;
    *((_QWORD *)v138 + 1) = 0;
    *((_QWORD *)v138 + 2) = sub_1001C77E8;
    *((_QWORD *)v138 + 3) = v133;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v129, v136);
    v139 = (uint64_t)v135;
    v140 = v176;
    sub_100045AD4(v139, v176, &qword_100825808);
    v141 = v190;
    sub_100021CC0(v140, v190, &qword_100825808);
    swift_storeEnumTagMultiPayload(v141, v189, 1);
    v142 = sub_1001C77F4();
    v194 = (void *)v186;
    v195 = v142;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v194, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    v144 = sub_1001C7950();
    _ConditionalContent<>.init(storage:)(v141, v188, v137, OpaqueTypeConformance2, v144);
    return sub_10001BE90(v140, &qword_100825808);
  }
  v45 = *(void **)(a1 + 56);
  v46 = v44;
  v47 = v45;
  v193 = v46;
  WorkoutNotificationView.init(notification:formattingManager:)(v46, v47);
  v48 = v150;
  v49 = v151;
  (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v24, enum case for WorkoutViewStyle.iOSNotificationMetric(_:), v151);
  v50 = sub_1000083D8(&qword_100825AF8, (uint64_t (*)(uint64_t))&type metadata accessor for WorkoutNotificationView, (uint64_t)&protocol conformance descriptor for WorkoutNotificationView);
  View.workoutViewStyle(_:)(v24, v25, v50);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v49);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v27, v25);
  v51 = v146;
  v52 = v149;
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v31, v29, v149);
  v31[*(int *)(v145 + 36)] = 0;
  v53 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v29, v52);
  v54 = *(_QWORD *)(v179 + 72);
  if (qword_10081DF40 != -1)
    v53 = swift_once(&qword_10081DF40, sub_1004E9C18);
  v55 = qword_10086AD28;
  v56 = *(_QWORD *)(v43 + 64);
  v57 = static Edge.Set.all.getter(v53);
  sub_100021CC0((uint64_t)v31, (uint64_t)v33, &qword_100825820);
  v58 = &v33[*(int *)(v148 + 36)];
  *v58 = v57;
  *((_QWORD *)v58 + 1) = v54;
  *((_QWORD *)v58 + 2) = v55;
  *((_QWORD *)v58 + 3) = v56;
  *((_QWORD *)v58 + 4) = v55;
  v58[40] = 0;
  sub_10001BE90((uint64_t)v31, &qword_100825820);
  v59 = v181;
  MoveTransition.init(edge:)(1);
  v61 = v182;
  v60 = v183;
  v62 = v180;
  (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v180, v59, v183);
  v63 = sub_1000083D8(&qword_100825AB0, (uint64_t (*)(uint64_t))&type metadata accessor for MoveTransition, (uint64_t)&protocol conformance descriptor for MoveTransition);
  v64 = AnyTransition.init<A>(_:)(v62, v60, v63);
  v65 = v153;
  sub_100021CC0((uint64_t)v33, v153, &qword_100825828);
  v66 = v186;
  *(_QWORD *)(v65 + *(int *)(v186 + 36)) = v64;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
  sub_10001BE90((uint64_t)v33, &qword_100825828);
  v67 = v187;
  sub_1001C75FC(v43, v187);
  v68 = *(unsigned __int8 *)(v184 + 80);
  v69 = (v68 + 16) & ~v68;
  v70 = swift_allocObject(&unk_10078CCF8, v69 + v185, v68 | 7);
  sub_1001C7644(v67, v70 + v69);
  v71 = sub_1001C77F4();
  v72 = v152;
  View.onTapGesture(count:perform:)(1, sub_1001C7A2C, v70, v66, v71);
  swift_release(v70);
  sub_10001BE90(v65, &qword_100825830);
  v73 = v155;
  v74 = v154;
  v75 = v72;
  v76 = v188;
  (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v154, v75, v188);
  v77 = v190;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v190, v74, v76);
  swift_storeEnumTagMultiPayload(v77, v189, 0);
  v194 = (void *)v66;
  v195 = v71;
  v78 = swift_getOpaqueTypeConformance2(&v194, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v79 = sub_1001C7950();
  _ConditionalContent<>.init(storage:)(v77, v76, v191, v78, v79);

  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v76);
}

void sub_1001C5C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 48);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v7 = swift_retain(v6);
  *v5 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_10062B838);
    v10 = swift_getKeyPath(&unk_10062B860);
    v12 = 0;
    swift_retain(v6);
    static Published.subscript.setter(&v12, v6, KeyPath, v10);
    sub_1003D3FC8();
    swift_release(v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001C5D98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for MirrorPlatterView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = swift_retain(v5);
  v7 = PlatterPublisher.metricPlatters.getter(v6);
  swift_release(v5);
  v18 = v7;
  sub_1001C75FC(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10078CD20, v9 + v4, v8 | 7);
  sub_1001C7644((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v11 = sub_100047110(&qword_100825B18);
  v12 = sub_100047110(&qword_100825868);
  v13 = sub_100028384(&qword_100825B20, &qword_100825B18, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = sub_1001C6CDC();
  v15 = sub_1000083D8(&qword_100825B28, (uint64_t (*)(uint64_t))&type metadata accessor for MetricPlatter, (uint64_t)&protocol conformance descriptor for MetricPlatter);
  return ForEach<>.init(_:content:)(&v18, sub_1001C7B3C, v10, v11, &type metadata for String, v12, v13, v14, v15);
}

uint64_t sub_1001C5F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a1;
  v53 = a3;
  v4 = sub_100047110(&qword_100825B30);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100825B38);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100047110(&qword_100825888);
  __chkstk_darwin(v48);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100825898);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100047110(&qword_100825878);
  __chkstk_darwin(v49);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100047110(&qword_100825868);
  v17 = __chkstk_darwin(v51);
  v52 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void **)(a2 + 16);
  v20 = *(void **)(a2 + 56);
  v21 = MetricsPublisher.workoutStatePublisher.getter(v17);
  v22 = (void *)WorkoutStatePublisher.activityType.getter();
  v23 = swift_release(v21);
  if (!v22)
  {
    sub_10001E724(0, (unint64_t *)&qword_10081F420, FIUIWorkoutActivityType_ptr);
    v22 = (void *)static FIUIWorkoutActivityType.outdoorCycle.getter(v24);
  }
  v25 = FIActivityMoveModeUserDefault(v23);
  v26 = v50;
  sub_1004EDC88(v19, v20, v22, v25, (uint64_t)v14);

  v27 = type metadata accessor for MetricPlatter(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29(v9, v26, v27);
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v30(v9, 0, 1, v27);
  sub_100021CC0((uint64_t)v9, (uint64_t)&v11[*(int *)(v48 + 36)], &qword_100825B38);
  sub_100021CC0((uint64_t)v14, (uint64_t)v11, &qword_100825898);
  sub_10001BE90((uint64_t)v9, &qword_100825B38);
  v29(v6, v26, v27);
  v30(v6, 0, 1, v27);
  v31 = sub_100047110(&qword_1008256F8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 0, 1, v31);
  sub_100021CC0((uint64_t)v6, (uint64_t)&v16[*(int *)(v49 + 36)], &qword_100825B30);
  sub_100021CC0((uint64_t)v11, (uint64_t)v16, &qword_100825888);
  sub_10001BE90((uint64_t)v6, &qword_100825B30);
  sub_10001BE90((uint64_t)v11, &qword_100825888);
  v32 = sub_10001BE90((uint64_t)v14, &qword_100825898);
  v33 = static Edge.Set.leading.getter(v32);
  v34 = static Edge.Set.trailing.getter();
  v35 = Edge.Set.init(rawValue:)(0);
  v36 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    v35 = Edge.Set.init(rawValue:)(v35 | v33);
  v37 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v37 & v34) != v34)
    LOBYTE(v35) = Edge.Set.init(rawValue:)(v35 | v34);
  if (qword_10081DF40 != -1)
    swift_once(&qword_10081DF40, sub_1004E9C18);
  v38 = EdgeInsets.init(_all:)(*(double *)&qword_10086AD28);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v45 = v52;
  sub_100021CC0((uint64_t)v16, v52, &qword_100825878);
  v46 = v45 + *(int *)(v51 + 36);
  *(_BYTE *)v46 = v35;
  *(double *)(v46 + 8) = v38;
  *(_QWORD *)(v46 + 16) = v40;
  *(_QWORD *)(v46 + 24) = v42;
  *(_QWORD *)(v46 + 32) = v44;
  *(_BYTE *)(v46 + 40) = 0;
  sub_10001BE90((uint64_t)v16, &qword_100825878);
  return sub_100045AD4(v45, v53, &qword_100825868);
}

void sub_1001C6360(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for MetricPlatterType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MetricPlatter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MirrorPlatterView(0);
  v10 = sub_100047110(&qword_100825710);
  v11 = State.wrappedValue.getter(v9, v10);
  MetricPlatter.type.getter(v11);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  v13 = MetricPlatterType.bridgedValue.getter(v12);
  v15 = v14;
  v16 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = MetricsPublisher.elapsedTimeMetricsPublisher.getter(v16);
  v18 = ElapsedTimeMetricsPublisher.elapsedTime.getter();
  swift_release(v17);
  if (*a1)
  {
    v19 = *(_QWORD *)(*a1 + OBJC_IVAR___WODataLinkMonitor_metricPlatterAnalytics);
    swift_retain(v19);
    sub_1001BA4BC(v13, v15, v18);
    swift_release(v19);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v20 = a1[1];
    v21 = type metadata accessor for DataLinkMonitor();
    v22 = sub_1000083D8((unint64_t *)&qword_10081F7B0, (uint64_t (*)(uint64_t))type metadata accessor for DataLinkMonitor, (uint64_t)&unk_100636D30);
    EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
}

void sub_1001C6510(_QWORD *a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = MetricsPublisher.elapsedTimeMetricsPublisher.getter(a1);
  v3 = ElapsedTimeMetricsPublisher.elapsedTime.getter();
  swift_release(v2);
  if (*a1)
  {
    v4 = *(_QWORD *)(*a1 + OBJC_IVAR___WODataLinkMonitor_metricPlatterAnalytics);
    swift_retain(v4);
    sub_1001BA4BC(0, 0, v3);
    swift_release(v4);
  }
  else
  {
    v5 = a1[1];
    v6 = type metadata accessor for DataLinkMonitor();
    v7 = sub_1000083D8((unint64_t *)&qword_10081F7B0, (uint64_t (*)(uint64_t))type metadata accessor for DataLinkMonitor, (uint64_t)&unk_100636D30);
    EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
}

char *sub_1001C65CC(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    v7 = a2[4];
    *((_QWORD *)a1 + 3) = a2[3];
    *((_QWORD *)a1 + 4) = v7;
    v8 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v8;
    v9 = a2[7];
    *((_QWORD *)a1 + 7) = v9;
    v10 = *(int *)(a3 + 44);
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    v13 = type metadata accessor for MetricPlatter(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v4;
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    v16 = v9;
    v14(v11, v12, v13);
    v17 = *(int *)(sub_100047110(&qword_100825710) + 28);
    v4 = *(char **)(v12 + v17);
    *(_QWORD *)&v11[v17] = v4;
  }
  swift_retain(v4);
  return v5;
}

double sub_1001C66CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));

  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for MetricPlatter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = *(_QWORD *)(v4 + *(int *)(sub_100047110(&qword_100825710) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_1001C674C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(int *)(a3 + 44);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v15 = type metadata accessor for MetricPlatter(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v17 = v5;
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v10);
  v18 = v11;
  v16(v13, v14, v15);
  v19 = *(int *)(sub_100047110(&qword_100825710) + 28);
  v20 = *(_QWORD *)(v14 + v19);
  *(_QWORD *)(v13 + v19) = v20;
  swift_retain(v20);
  return a1;
}

uint64_t sub_1001C6820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = *(void **)(a2 + 56);
  v16 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v15;
  v17 = v15;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v18 = *(int *)(a3 + 44);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for MetricPlatter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = *(int *)(sub_100047110(&qword_100825710) + 28);
  v23 = *(_QWORD *)(v19 + v22);
  v24 = *(_QWORD *)(v20 + v22);
  *(_QWORD *)(v19 + v22) = v24;
  swift_retain(v24);
  swift_release(v23);
  return a1;
}

uint64_t sub_1001C693C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = type metadata accessor for MetricPlatter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = sub_100047110(&qword_100825710);
  *(_QWORD *)(v5 + *(int *)(v8 + 28)) = *(_QWORD *)(v6 + *(int *)(v8 + 28));
  return a1;
}

uint64_t sub_1001C69D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_release(v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  swift_release(v12);
  v13 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v14 = *(int *)(a3 + 44);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for MetricPlatter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = *(int *)(sub_100047110(&qword_100825710) + 28);
  v19 = *(_QWORD *)(v15 + v18);
  *(_QWORD *)(v15 + v18) = *(_QWORD *)(v16 + v18);
  swift_release(v19);
  return a1;
}

uint64_t sub_1001C6AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C6AB8);
}

uint64_t sub_1001C6AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_100825710);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_1001C6B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C6B44);
}

uint64_t sub_1001C6B44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100047110(&qword_100825710);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_1001C6BBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_10062B7B8;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_10062B7D0;
  v4[3] = &unk_10062B7D0;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1001C6C68(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_1001C6C68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100825780)
  {
    v2 = type metadata accessor for MetricPlatter(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100825780);
  }
}

uint64_t sub_1001C6CBC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AEE64, 1);
}

uint64_t sub_1001C6CD4()
{
  uint64_t v0;

  return sub_1001C5D98(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001C6CDC()
{
  return sub_1000F4518(&qword_100825860, &qword_100825868, (void (*)(void))sub_1001C6CF8);
}

unint64_t sub_1001C6CF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825870;
  if (!qword_100825870)
  {
    v1 = sub_100007050(&qword_100825878);
    sub_1001C6D7C();
    sub_100028384(&qword_100825A98, &qword_100825AA0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825870);
  }
  return result;
}

unint64_t sub_1001C6D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825880;
  if (!qword_100825880)
  {
    v1 = sub_100007050(&qword_100825888);
    sub_1001C735C(&qword_100825890, &qword_100825898, (void (*)(void))sub_1001C6E20, (void (*)(void))sub_1001C71C4);
    sub_100028384(&qword_100825A88, &qword_100825A90, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825880);
  }
  return result;
}

uint64_t sub_1001C6E20()
{
  return sub_1001C735C(&qword_1008258A0, &qword_1008258A8, (void (*)(void))sub_1001C6E44, (void (*)(void))sub_1001C6FD4);
}

uint64_t sub_1001C6E44()
{
  return sub_1001C735C(&qword_1008258B0, &qword_1008258B8, (void (*)(void))sub_1001C6E68, (void (*)(void))sub_1001C6F2C);
}

unint64_t sub_1001C6E68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008258C0;
  if (!qword_1008258C0)
  {
    v1 = sub_100007050(&qword_1008258C8);
    sub_1001C6ECC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008258C0);
  }
  return result;
}

uint64_t sub_1001C6ECC()
{
  return sub_1000F4518(&qword_1008258D0, &qword_1008258D8, (void (*)(void))sub_1001C6EE8);
}

unint64_t sub_1001C6EE8()
{
  unint64_t result;

  result = qword_1008258E0;
  if (!qword_1008258E0)
  {
    result = swift_getWitnessTable(&unk_100622CEC, &type metadata for MirrorStackedMetricsView);
    atomic_store(result, (unint64_t *)&qword_1008258E0);
  }
  return result;
}

uint64_t sub_1001C6F2C()
{
  return sub_1001C735C(&qword_1008258E8, &qword_1008258F0, (void (*)(void))sub_1001C6ECC, (void (*)(void))sub_1001C6F50);
}

unint64_t sub_1001C6F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008258F8;
  if (!qword_1008258F8)
  {
    v1 = sub_100007050(&qword_100825900);
    sub_1000083D8(&qword_100825908, type metadata accessor for MirrorGraphicsMetricsView, (uint64_t)&unk_100641AE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008258F8);
  }
  return result;
}

uint64_t sub_1001C6FD4()
{
  return sub_1001C735C(&qword_100825910, &qword_100825918, (void (*)(void))sub_1001C6FF8, (void (*)(void))sub_1001C70A0);
}

uint64_t sub_1001C6FF8()
{
  return sub_1001C735C(&qword_100825920, &qword_100825928, (void (*)(void))sub_1001C6F50, (void (*)(void))sub_1001C701C);
}

unint64_t sub_1001C701C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825930;
  if (!qword_100825930)
  {
    v1 = sub_100007050(&qword_100825938);
    sub_1000083D8(&qword_100825940, type metadata accessor for MirrorActivityRingsPlatterView, (uint64_t)&unk_100640838);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825930);
  }
  return result;
}

uint64_t sub_1001C70A0()
{
  return sub_1001C735C(&qword_100825948, &qword_100825950, (void (*)(void))sub_1001C70C4, (void (*)(void))sub_1001C7140);
}

uint64_t sub_1001C70C4()
{
  return sub_1000F4518(&qword_100825958, &qword_100825960, (void (*)(void))sub_1001C70E0);
}

uint64_t sub_1001C70E0()
{
  return sub_1000F4518(&qword_100825968, &qword_100825970, (void (*)(void))sub_1001C70FC);
}

unint64_t sub_1001C70FC()
{
  unint64_t result;

  result = qword_100825978;
  if (!qword_100825978)
  {
    result = swift_getWitnessTable(&unk_100649C70, &type metadata for MirrorPacerMetricPlatterView);
    atomic_store(result, (unint64_t *)&qword_100825978);
  }
  return result;
}

unint64_t sub_1001C7140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825980;
  if (!qword_100825980)
  {
    v1 = sub_100007050(&qword_100825988);
    sub_1000083D8(&qword_100825990, type metadata accessor for MirrorHeartRateZonesMetricsPlatter, (uint64_t)&unk_10063E1F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825980);
  }
  return result;
}

uint64_t sub_1001C71C4()
{
  return sub_1001C735C(&qword_100825998, &qword_1008259A0, (void (*)(void))sub_1001C71E8, (void (*)(void))sub_1001C748C);
}

uint64_t sub_1001C71E8()
{
  return sub_1001C735C(&qword_1008259A8, &qword_1008259B0, (void (*)(void))sub_1001C720C, (void (*)(void))sub_1001C7338);
}

uint64_t sub_1001C720C()
{
  return sub_1001C735C(&qword_1008259B8, &qword_1008259C0, (void (*)(void))sub_1001C7230, (void (*)(void))sub_1001C72B4);
}

unint64_t sub_1001C7230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008259C8;
  if (!qword_1008259C8)
  {
    v1 = sub_100007050(&qword_1008259D0);
    sub_1000083D8(&qword_1008259D8, type metadata accessor for MirrorSpeedometerPlatterView, (uint64_t)&unk_10063BC68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008259C8);
  }
  return result;
}

unint64_t sub_1001C72B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008259E0;
  if (!qword_1008259E0)
  {
    v1 = sub_100007050(&qword_1008259E8);
    sub_1000083D8(&qword_1008259F0, type metadata accessor for MirrorPowerZonesMetricsPlatter, (uint64_t)&unk_1006422C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008259E0);
  }
  return result;
}

uint64_t sub_1001C7338()
{
  return sub_1001C735C(&qword_1008259F8, &qword_100825A00, (void (*)(void))sub_1001C73CC, (void (*)(void))sub_1001C742C);
}

uint64_t sub_1001C735C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007050(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C73CC()
{
  return sub_1000F4518(&qword_100825A08, &qword_100825A10, (void (*)(void))sub_1001C73E8);
}

unint64_t sub_1001C73E8()
{
  unint64_t result;

  result = qword_100825A18;
  if (!qword_100825A18)
  {
    result = swift_getWitnessTable(&unk_10063651C, &type metadata for MirrorIntervalsPlatterView);
    atomic_store(result, (unint64_t *)&qword_100825A18);
  }
  return result;
}

uint64_t sub_1001C742C()
{
  return sub_1000F4518(&qword_100825A20, &qword_100825A28, (void (*)(void))sub_1001C7448);
}

unint64_t sub_1001C7448()
{
  unint64_t result;

  result = qword_100825A30;
  if (!qword_100825A30)
  {
    result = swift_getWitnessTable(&unk_100639944, &type metadata for MirrorIntervalsSecondPlatterView);
    atomic_store(result, (unint64_t *)&qword_100825A30);
  }
  return result;
}

unint64_t sub_1001C748C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825A38;
  if (!qword_100825A38)
  {
    v1 = sub_100007050(&qword_100825A40);
    sub_1001C735C(&qword_100825A48, &qword_100825A50, (void (*)(void))sub_1001C7518, (void (*)(void))sub_1001C759C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825A38);
  }
  return result;
}

unint64_t sub_1001C7518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825A58;
  if (!qword_100825A58)
  {
    v1 = sub_100007050(&qword_100825A60);
    sub_1000083D8(&qword_100825A68, type metadata accessor for MirrorRaceMetricPlatterView, (uint64_t)&unk_100648A18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825A58);
  }
  return result;
}

uint64_t sub_1001C759C()
{
  return sub_1000F4518(&qword_100825A70, &qword_100825A78, (void (*)(void))sub_1001C75B8);
}

unint64_t sub_1001C75B8()
{
  unint64_t result;

  result = qword_100825A80;
  if (!qword_100825A80)
  {
    result = swift_getWitnessTable(&unk_100635C70, &type metadata for MirrorMultiSportMetricsPlatter);
    atomic_store(result, (unint64_t *)&qword_100825A80);
  }
  return result;
}

uint64_t sub_1001C75FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MirrorPlatterView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C7644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MirrorPlatterView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C7688()
{
  return sub_1001C7A38((uint64_t (*)(uint64_t))sub_1001C6360);
}

unint64_t sub_1001C7694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825AB8;
  if (!qword_100825AB8)
  {
    v1 = sub_100007050(&qword_1008257F8);
    sub_1001C7718();
    sub_100028384(&qword_100825AC8, &qword_100825AD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825AB8);
  }
  return result;
}

unint64_t sub_1001C7718()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100825AC0;
  if (!qword_100825AC0)
  {
    v1 = sub_100007050(&qword_1008257F0);
    v2[0] = sub_100007050(&qword_1008257E0);
    v2[1] = type metadata accessor for PageTabViewStyle(255);
    v2[2] = sub_100028384(&qword_100825AA8, &qword_1008257E0, (uint64_t)&protocol conformance descriptor for TabView<A, B>);
    v2[3] = &protocol witness table for PageTabViewStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825AC0);
  }
  return result;
}

uint64_t sub_1001C77E8()
{
  return sub_1001C7A38((uint64_t (*)(uint64_t))sub_1001C6510);
}

unint64_t sub_1001C77F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825AE0;
  if (!qword_100825AE0)
  {
    v1 = sub_100007050(&qword_100825830);
    sub_1000F4518(&qword_100825AE8, &qword_100825828, (void (*)(void))sub_1001C7890);
    sub_100028384(&qword_100825AC8, &qword_100825AD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825AE0);
  }
  return result;
}

unint64_t sub_1001C7890()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100825AF0;
  if (!qword_100825AF0)
  {
    v1 = sub_100007050(&qword_100825820);
    v2[0] = type metadata accessor for WorkoutNotificationView(255);
    v2[1] = sub_1000083D8(&qword_100825AF8, (uint64_t (*)(uint64_t))&type metadata accessor for WorkoutNotificationView, (uint64_t)&protocol conformance descriptor for WorkoutNotificationView);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
    sub_100028384(&qword_10081F650, &qword_10081F658, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825AF0);
  }
  return result;
}

unint64_t sub_1001C7950()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100825B00;
  if (!qword_100825B00)
  {
    v1 = sub_100007050(&qword_100825808);
    v2[0] = sub_100007050(&qword_1008257F8);
    v2[1] = type metadata accessor for MetricPlatter(255);
    v2[2] = sub_1001C7694();
    v2[3] = sub_1000083D8(&qword_100825AD8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricPlatter, (uint64_t)&protocol conformance descriptor for MetricPlatter);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825B00);
  }
  return result;
}

uint64_t sub_1001C7A2C()
{
  return sub_1001C7A38((uint64_t (*)(uint64_t))sub_1001C5C6C);
}

uint64_t sub_1001C7A38(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MirrorPlatterView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1001C7A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for MirrorPlatterView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;

  swift_release(*(_QWORD *)(v7 + 16));
  swift_release(*(_QWORD *)(v7 + 32));
  swift_release(*(_QWORD *)(v7 + 48));

  v8 = v7 + *(int *)(v1 + 44);
  v9 = type metadata accessor for MetricPlatter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100047110(&qword_100825710);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C7B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MirrorPlatterView(0) - 8) + 80);
  return sub_1001C5F04(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_1001C7B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825B40;
  if (!qword_100825B40)
  {
    v1 = sub_100007050(&qword_1008257D0);
    sub_1000F0610(&qword_100825B48, &qword_1008257C8, (void (*)(void))sub_1001C7C30, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_100028384(&qword_100825B60, &qword_100825B68, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825B40);
  }
  return result;
}

unint64_t sub_1001C7C30()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100825B50;
  if (!qword_100825B50)
  {
    v1 = sub_100007050(&qword_100825B58);
    v2[0] = sub_100007050(&qword_100825830);
    v2[1] = sub_1001C77F4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_1001C7950();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825B50);
  }
  return result;
}

uint64_t sub_1001C7D64()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062B8E0);
  v2 = swift_getKeyPath(&unk_10062B908);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1001C7E58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062B8E0);
  v5 = swift_getKeyPath(&unk_10062B908);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001C7ED4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062B8E0);
  v5 = swift_getKeyPath(&unk_10062B908);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_1001C8068()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalDaysModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001C80DC()
{
  return type metadata accessor for GoalDaysModel(0);
}

uint64_t type metadata accessor for GoalDaysModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100825BA0;
  if (!qword_100825BA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GoalDaysModel);
  return result;
}

void sub_1001C8120(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1001C8198(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1001C8198(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100825BB0)
  {
    v2 = sub_100007050(&qword_100825BB8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100825BB0);
  }
}

uint64_t sub_1001C81F0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for GoalDaysModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_1001C8234()
{
  id result;

  result = sub_1001C8250();
  qword_100825BC8 = (uint64_t)result;
  return result;
}

id sub_1001C8250()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  Class v9;
  uint64_t v11;

  v0 = sub_100047110(&qword_100823FC8);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setLocalizedDateFormatFromTemplate:", v4);

  TimeZone.init(secondsFromGMT:)(0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) != 1)
  {
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
  }
  objc_msgSend(v3, "setTimeZone:", isa);

  if (qword_10081D550 != -1)
    swift_once(&qword_10081D550, sub_10000968C);
  v8 = type metadata accessor for Calendar(0);
  sub_10003CE9C(v8, (uint64_t)qword_100869D28);
  v9 = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setCalendar:", v9);

  return v3;
}

Swift::Int sub_1001C83D0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1001C8414()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1001C8440(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

uint64_t sub_1001C8480@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001C84C8(*a1);
  *a2 = result;
  return result;
}

void sub_1001C84A8(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

void sub_1001C84B8(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F9D8;
}

uint64_t sub_1001C84C8(unint64_t a1)
{
  if (a1 >= 8)
    return 7;
  else
    return (0x605040302010007uLL >> (8 * a1));
}

uint64_t storeEnumTagSinglePayload for ActivityDayOfWeek(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001C853C + 4 * byte_10062B935[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001C8570 + 4 * byte_10062B930[v4]))();
}

uint64_t sub_1001C8570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C8580);
  return result;
}

uint64_t sub_1001C858C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C8594);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001C8598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C85A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDayOfWeek()
{
  return &type metadata for ActivityDayOfWeek;
}

unint64_t sub_1001C85C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825BD0;
  if (!qword_100825BD0)
  {
    v1 = sub_100007050(&qword_100825BD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100825BD0);
  }
  return result;
}

unint64_t sub_1001C8610()
{
  unint64_t result;

  result = qword_100825BE0;
  if (!qword_100825BE0)
  {
    result = swift_getWitnessTable(&unk_10062BA14, &type metadata for ActivityDayOfWeek);
    atomic_store(result, (unint64_t *)&qword_100825BE0);
  }
  return result;
}

uint64_t destroy for SleepingSampleSmoothedLineTrace(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for SleepingSampleSmoothedLineTrace(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v5 = a2[5];
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for SleepingSampleSmoothedLineTrace(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v8 = a1[5];
  v9 = a2[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

__n128 initializeWithTake for SleepingSampleSmoothedLineTrace(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SleepingSampleSmoothedLineTrace(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleSmoothedLineTrace(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleSmoothedLineTrace(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleSmoothedLineTrace()
{
  return &type metadata for SleepingSampleSmoothedLineTrace;
}

uint64_t sub_1001C88E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AEF54, 1);
}

_QWORD *sub_1001C88F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = type metadata accessor for SleepingSampleSingleMetricChartPoint(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(_QWORD *)(v6 + *(int *)(v4 + 24));
      swift_retain(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
      v6 += v7;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001C89D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _QWORD v57[5];
  uint64_t v58;
  __int128 v59;
  __int128 v60;

  v2 = v1;
  v51 = a1;
  v44 = sub_100047110(&qword_100825BE8);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100047110(&qword_100825BF0);
  v48 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v43 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100047110(&qword_100825BF8);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)v2;
  v7 = v58;
  v8 = (_OWORD *)swift_allocObject(&unk_10078CF50, 89, 7);
  v9 = *(_OWORD *)(v2 + 48);
  v8[3] = *(_OWORD *)(v2 + 32);
  v8[4] = v9;
  *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)(v2 + 57);
  v10 = *(_OWORD *)(v2 + 16);
  v8[1] = *(_OWORD *)v2;
  v8[2] = v10;
  swift_bridgeObjectRetain(v7);
  sub_1001C9E18((uint64_t *)v2);
  v42 = sub_100047110(&qword_100825C00);
  v41 = type metadata accessor for Date(0);
  v11 = sub_100047110(&qword_100825C08);
  v12 = sub_100028384(&qword_100825C10, &qword_100825C00, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = sub_100007050(&qword_100825C18);
  v14 = sub_100007050(&qword_100825C20);
  v53 = type metadata accessor for LineMark(255);
  *(_QWORD *)&v54 = &protocol witness table for LineMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of ChartContent.opacity(_:)>>, 1);
  v16 = sub_100028384(&qword_100825C28, &qword_100825C20, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v53 = v13;
  *(_QWORD *)&v54 = v14;
  *((_QWORD *)&v54 + 1) = OpaqueTypeConformance2;
  *(_QWORD *)&v55 = v16;
  v17 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
  v18 = sub_1001C9E5C();
  ForEach<>.init(_:content:)(&v58, sub_1001C9E10, v8, v42, v41, v11, v12, v17, v18);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v57, 1, 1, _swiftEmptyArrayStorage, *(double *)(v2 + 24), 10.0, 0.0);
  v19 = sub_1001C9EA4();
  v20 = v43;
  v21 = v44;
  ChartContent.lineStyle(_:)(v57, v44, v19);
  sub_1001B57E8((uint64_t)v57);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v21);
  swift_bridgeObjectRetain(v7);
  v24 = sub_1001C88F8(v23);
  v25 = swift_bridgeObjectRelease(v7);
  v26 = static UnitPoint.leading.getter(v25);
  v28 = v27;
  v29 = static UnitPoint.trailing.getter();
  v31 = v30;
  v32 = Gradient.init(colors:)(v24);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v58, v32, v26, v28, v29, v31);
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v56 = 1053609165;
  v33 = sub_100047110(&qword_100825C40);
  v52[0] = v22;
  v52[1] = v19;
  v34 = swift_getOpaqueTypeConformance2(v52, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v35 = sub_100028384(&qword_100825C48, &qword_100825C40, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
  v36 = v46;
  v37 = v47;
  ChartContent.foregroundStyle<A>(_:)(&v53, v47, v33, v34, v35);
  sub_1000478F4(&v58);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v37);
  v53 = v37;
  *(_QWORD *)&v54 = v33;
  *((_QWORD *)&v54 + 1) = v34;
  *(_QWORD *)&v55 = v35;
  v38 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v39 = v49;
  ChartContent.interpolationMethod(_:)(0x3FE0000000000000, 1, v49, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v36, v39);
}

uint64_t sub_1001C8E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];

  v57 = a2;
  v58 = a3;
  v48 = a1;
  v3 = sub_100047110(&qword_100824DC0);
  __chkstk_darwin(v3);
  v52 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar.Component(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100824DC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for LineMark(0);
  v51 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100047110(&qword_100825C18);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v47 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100047110(&qword_100825C08);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v50 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Calendar.Component.day(_:), v8);
  v26 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 1, 1, v26);
  v27 = v23 & 1;
  v28 = v48;
  static PlottableValue.value<>(_:_:unit:calendar:)(v19, v21, v27, v25, v48, v11, v7);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v21);
  sub_10001BE90((uint64_t)v7, (uint64_t *)&unk_100827450);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v29 = LocalizedStringKey.init(stringLiteral:)(0x65756C6156, 0xE500000000000000);
  v31 = v30;
  LOBYTE(v11) = v32;
  v34 = v33;
  v62[0] = *(_QWORD *)(v28 + *(int *)(type metadata accessor for SleepingSampleSingleMetricChartPoint(0) + 20));
  v35 = v52;
  static PlottableValue.value(_:_:)(v29, v31, v11 & 1, v34, v62, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v31);
  v36 = type metadata accessor for Date(0);
  LineMark.init<A, B>(x:y:)(v14, v35, v36, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double);
  v37 = v57;
  v38.n128_u64[0] = 0x3FE3333333333333;
  if ((*(_BYTE *)(v57 + 72) & 1) == 0)
    v38.n128_f64[0] = 1.0;
  v39 = v47;
  v40 = v49;
  ChartContent.opacity(_:)(v49, &protocol witness table for LineMark, v38);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v40);
  v60 = v37;
  v61 = v28;
  v41 = sub_100047110(&qword_100825C20);
  v62[0] = v40;
  v62[1] = &protocol witness table for LineMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v62, &opaque type descriptor for <<opaque return type of ChartContent.opacity(_:)>>, 1);
  v43 = sub_100028384(&qword_100825C28, &qword_100825C20, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v44 = v50;
  v45 = v54;
  ChartContent.symbol<A>(symbol:)(sub_1001C9F98, v59, v54, v41, OpaqueTypeConformance2, v43);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v45);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 32))(v58, v44, v55);
}

uint64_t sub_1001C92EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a3 = static Alignment.center.getter(a1);
  a3[1] = v6;
  v7 = sub_100047110(&qword_100825C50);
  return sub_1001C9340(a1, a2, (uint64_t)a3 + *(int *)(v7 + 44));
}

uint64_t sub_1001C9340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _QWORD *v119;

  v112 = a3;
  v109 = sub_100047110(&qword_100825C58);
  __chkstk_darwin(v109);
  v100 = (uint64_t)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100047110(&qword_100825C60);
  __chkstk_darwin(v106);
  v108 = (uint64_t)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100047110(&qword_100825C68);
  __chkstk_darwin(v107);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_100825C70);
  __chkstk_darwin(v9);
  v110 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v11);
  v102 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for BlendMode(0);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_100825C78);
  __chkstk_darwin(v15);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100047110(&qword_100825C80);
  v18 = __chkstk_darwin(v104);
  v111 = (uint64_t)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v91 - v21;
  __chkstk_darwin(v20);
  v105 = (uint64_t)&v91 - v23;
  v24 = type metadata accessor for SleepingSampleSingleMetricChartPoint(0);
  __chkstk_darwin(v24);
  v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD **)(a1 + 8);
  v119 = v28;
  v29 = v28[2];
  if (v29)
  {
    v98 = v15;
    v96 = v22;
    v97 = v8;
    v99 = a1;
    v30 = (uint64_t)v28 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    v31 = *(_QWORD *)(v25 + 72);
    swift_bridgeObjectRetain(v28);
    do
    {
      sub_10004F8C8(v30, (uint64_t)v27, type metadata accessor for SleepingSampleSingleMetricChartPoint);
      if ((static Date.== infix(_:_:)(v27, a2) & 1) != 0
        && *(double *)&v27[*(int *)(v24 + 20)] == *(double *)(a2 + *(int *)(v24 + 20)))
      {
        v32 = *(int *)(v24 + 24);
        if ((static Color.== infix(_:_:)(*(_QWORD *)&v27[v32], *(_QWORD *)(a2 + v32)) & 1) != 0)
        {
          sub_100011F54((uint64_t)v27, type metadata accessor for SleepingSampleSingleMetricChartPoint);
          sub_1000478F4(&v119);
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v99;
          v35 = *(double *)(v99 + 48);
          v36 = v35 + *(double *)(v34 + 56) + *(double *)(v34 + 56);
          swift_retain(v33);
          v38 = static Alignment.center.getter(v37);
          _FrameLayout.init(width:height:alignment:)(&v113, 0, 1, *(_QWORD *)&v36, 0, v38, v39);
          v111 = v113;
          LODWORD(v100) = BYTE8(v113);
          v95 = v114;
          v94 = BYTE8(v114);
          v92 = *((_QWORD *)&v115 + 1);
          v93 = v115;
          v40 = Color.opacity(_:)(0.64);
          v41 = *(_QWORD *)(v34 + 64);
          v42 = static Color.black.getter(v40);
          v43 = v101;
          v44 = v103;
          (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v14, enum case for BlendMode.destinationOut(_:), v103);
          v45 = (uint64_t)v102;
          (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v102, v14, v44);
          sub_10004F8C8(v45, (uint64_t)&v17[*(int *)(v98 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
          *(_QWORD *)v17 = v42;
          *((_WORD *)v17 + 4) = 256;
          swift_retain(v42);
          sub_100011F54(v45, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v44);
          swift_release(v42);
          v47 = static Alignment.center.getter(v46);
          _FrameLayout.init(width:height:alignment:)(&v116, 0, 1, *(_QWORD *)&v35, 0, v47, v48);
          v49 = (uint64_t)v96;
          sub_100021CC0((uint64_t)v17, (uint64_t)v96, &qword_100825C78);
          v50 = (_OWORD *)(v49 + *(int *)(v104 + 36));
          v51 = v117;
          *v50 = v116;
          v50[1] = v51;
          v50[2] = v118;
          sub_10001BE90((uint64_t)v17, &qword_100825C78);
          v52 = v105;
          sub_100045AD4(v49, v105, &qword_100825C80);
          sub_100021CC0(v52, v49, &qword_100825C80);
          v53 = (uint64_t)v97;
          *v97 = v33;
          *(_WORD *)(v53 + 8) = 256;
          *(_QWORD *)(v53 + 16) = v111;
          *(_BYTE *)(v53 + 24) = v100;
          *(_QWORD *)(v53 + 32) = v95;
          *(_BYTE *)(v53 + 40) = v94;
          v54 = v92;
          *(_QWORD *)(v53 + 48) = v93;
          *(_QWORD *)(v53 + 56) = v54;
          *(_QWORD *)(v53 + 64) = v40;
          *(_QWORD *)(v53 + 72) = v41;
          *(_QWORD *)(v53 + 80) = 0;
          *(_QWORD *)(v53 + 88) = 0;
          v55 = sub_100047110(&qword_100825CA8);
          sub_100021CC0(v49, v53 + *(int *)(v55 + 48), &qword_100825C80);
          swift_retain_n(v33, 2);
          swift_retain_n(v40, 2);
          sub_10001BE90(v49, &qword_100825C80);
          swift_release(v40);
          swift_release(v33);
          v56 = v108;
          sub_100021CC0(v53, v108, &qword_100825C68);
          swift_storeEnumTagMultiPayload(v56, v106, 0);
          v57 = sub_100028384(&qword_100825C98, &qword_100825C68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
          v58 = sub_100028384(&qword_100825CA0, &qword_100825C58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
          v59 = (uint64_t)v110;
          _ConditionalContent<>.init(storage:)(v56, v107, v109, v57, v58);
          sub_10001BE90(v53, &qword_100825C68);
          sub_10001BE90(v52, &qword_100825C80);
          swift_release(v40);
          swift_release(v33);
          goto LABEL_15;
        }
      }
      sub_100011F54((uint64_t)v27, type metadata accessor for SleepingSampleSingleMetricChartPoint);
      v30 += v31;
      --v29;
    }
    while (v29);
    v28 = sub_1000478F4(&v119);
    a1 = v99;
    v15 = v98;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v62 = static Color.black.getter(v28);
    v63 = v101;
    v64 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v14, enum case for BlendMode.destinationOut(_:), v103);
    v65 = (uint64_t)v102;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v102, v14, v64);
    sub_10004F8C8(v65, (uint64_t)&v17[*(int *)(v15 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    *(_QWORD *)v17 = v62;
    *((_WORD *)v17 + 4) = 256;
    swift_retain(v62);
    sub_100011F54(v65, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v64);
    swift_release(v62);
    v66 = *(double *)(a1 + 24);
    v67 = v66 + *(double *)(a1 + 32) + *(double *)(a1 + 32);
    v69 = static Alignment.center.getter(v68);
    _FrameLayout.init(width:height:alignment:)(&v113, 0, 1, *(_QWORD *)&v67, 0, v69, v70);
    v71 = v105;
    sub_100021CC0((uint64_t)v17, v105, &qword_100825C78);
    v72 = (_OWORD *)(v71 + *(int *)(v104 + 36));
    v73 = v114;
    *v72 = v113;
    v72[1] = v73;
    v72[2] = v115;
    sub_10001BE90((uint64_t)v17, &qword_100825C78);
    v74 = v111;
    sub_100045AD4(v71, v111, &qword_100825C80);
    v75 = *(_QWORD *)(a2 + *(int *)(v24 + 24));
    swift_retain(v75);
    v77 = static Alignment.center.getter(v76);
    _FrameLayout.init(width:height:alignment:)(&v116, 0, 1, *(_QWORD *)&v66, 0, v77, v78);
    v79 = v116;
    v80 = BYTE8(v116);
    v81 = v117;
    v82 = BYTE8(v117);
    v83 = v118;
    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      v84 = 0.6;
    else
      v84 = 1.0;
    sub_100021CC0(v74, v71, &qword_100825C80);
    v85 = v100;
    sub_100021CC0(v71, v100, &qword_100825C80);
    v86 = v85 + *(int *)(sub_100047110(&qword_100825C90) + 48);
    *(_QWORD *)v86 = v75;
    *(_WORD *)(v86 + 8) = 256;
    *(_QWORD *)(v86 + 16) = v79;
    *(_BYTE *)(v86 + 24) = v80;
    *(_QWORD *)(v86 + 32) = v81;
    *(_BYTE *)(v86 + 40) = v82;
    *(_OWORD *)(v86 + 48) = v83;
    *(double *)(v86 + 64) = v84;
    swift_retain(v75);
    sub_10001BE90(v71, &qword_100825C80);
    v87 = v108;
    sub_100021CC0(v85, v108, &qword_100825C58);
    swift_storeEnumTagMultiPayload(v87, v106, 1);
    v88 = sub_100028384(&qword_100825C98, &qword_100825C68, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v89 = sub_100028384(&qword_100825CA0, &qword_100825C58, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v59 = (uint64_t)v110;
    _ConditionalContent<>.init(storage:)(v87, v107, v109, v88, v89);
    sub_10001BE90(v85, &qword_100825C58);
    swift_release(v75);
    sub_10001BE90(v111, &qword_100825C80);
LABEL_15:
    v90 = sub_100047110(&qword_100825C88);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v59, 0, 1, v90);
    return sub_100045AD4(v59, v112, &qword_100825C70);
  }
  else
  {
    v60 = sub_100047110(&qword_100825C88);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v112, 1, 1, v60);
  }
}

uint64_t sub_1001C9D78@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C89D4(a1);
}

uint64_t sub_1001C9DC4()
{
  return static ChartContent._chartContentCount(inputs:)();
}

uint64_t sub_1001C9DDC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 89, 7);
}

uint64_t sub_1001C9E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001C8E8C(a1, v2 + 16, a2);
}

uint64_t *sub_1001C9E18(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  swift_retain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_1001C9E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825C30;
  if (!qword_100825C30)
  {
    v1 = type metadata accessor for SleepingSampleSingleMetricChartPoint(255);
    result = swift_getWitnessTable(&unk_100630EF8, v1);
    atomic_store(result, (unint64_t *)&qword_100825C30);
  }
  return result;
}

unint64_t sub_1001C9EA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_100825C38;
  if (!qword_100825C38)
  {
    v1 = sub_100007050(&qword_100825BE8);
    v2 = sub_100007050(&qword_100825C18);
    v3 = sub_100007050(&qword_100825C20);
    v6 = type metadata accessor for LineMark(255);
    v7 = &protocol witness table for LineMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.opacity(_:)>>, 1);
    v5 = sub_100028384(&qword_100825C28, &qword_100825C20, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v6 = v2;
    v7 = (void *)v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100825C38);
  }
  return result;
}

uint64_t sub_1001C9F98@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001C92EC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001C9FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100007050(&qword_100825BF8);
  v1 = sub_100007050(&qword_100825BF0);
  v2 = sub_100007050(&qword_100825C40);
  v7 = sub_100007050(&qword_100825BE8);
  v8 = sub_1001C9EA4();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v4 = sub_100028384(&qword_100825C48, &qword_100825C40, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
  v7 = v1;
  v8 = v2;
  v9 = OpaqueTypeConformance2;
  v10 = v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v7 = v0;
  v8 = v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
}

uint64_t sub_1001CA080@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CHWorkoutDetailHeartRateTableViewCell *v71;
  CHWorkoutDetailHeartRateTableViewCell *v72;
  unint64_t v73;
  const char *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  NSString v89;
  char *v90;
  __n128 v91;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  CHWorkoutDetailHeartRateTableViewCell *v119;

  v102 = a8;
  v114 = a2;
  v115 = a7;
  LODWORD(v110) = a1;
  v13 = a6 & 1;
  v14 = type metadata accessor for AxisMarkValues(0);
  v112 = *(_QWORD *)(v14 - 8);
  v113 = v14;
  __chkstk_darwin(v14);
  v111 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale.Language(0);
  v107 = *(_QWORD *)(v16 - 8);
  v108 = v16;
  __chkstk_darwin(v16);
  v106 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110(&qword_100825CB0);
  __chkstk_darwin(v18);
  v105 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FormatStyleCapitalizationContext(0);
  __chkstk_darwin(v20);
  v99 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v22);
  v97 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v24);
  v96 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Locale(0);
  v100 = *(_QWORD *)(v26 - 8);
  v101 = v26;
  __chkstk_darwin(v26);
  v98 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v95 = (char *)&v93 - v29;
  v30 = sub_100047110(&qword_100825CB8);
  __chkstk_darwin(v30);
  v94 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100047110(&qword_100825CC0);
  __chkstk_darwin(v32);
  v34 = (char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Calendar.Component(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v93 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a9 = swift_getKeyPath(&unk_10062BAE0);
  v39 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(a9, v39, 0);
  v40 = (int *)type metadata accessor for MetricCardBarChartView(0);
  *((_BYTE *)a9 + v40[5]) = v110;
  *(_QWORD *)((char *)a9 + v40[6]) = v114;
  *(_QWORD *)((char *)a9 + v40[7]) = a3;
  v41 = (uint64_t)a9 + v40[9];
  v114 = a4;
  sub_10004F8C8(a4, v41, type metadata accessor for MetricFormattingHelper);
  v42 = (char *)a9 + v40[8];
  *(_QWORD *)v42 = a5;
  v42[8] = v13;
  sub_1000252E0((uint64_t)v115, (uint64_t)a9 + v40[10]);
  v43 = (char *)a9 + v40[11];
  v44 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v44 - 8);
  v104 = v44;
  v45 = v43;
  v46 = v102;
  (*(void (**)(char *, uint64_t))(v103 + 16))(v45, v102);
  v110 = a5;
  v47 = *(void (**)(char *, _QWORD, uint64_t))(v36 + 104);
  v109 = v13;
  if ((v13 & (a5 == 1)) != 0)
    v48 = (unsigned int *)&enum case for Calendar.Component.day(_:);
  else
    v48 = (unsigned int *)&enum case for Calendar.Component.hour(_:);
  v47(v38, *v48, v35);
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)a9 + v40[12], v38, v35);
  v49 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v34, 1, 1, v49);
  v50 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  v51 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v94, 1, 1, v50);
  swift_retain(a3);
  v52 = v95;
  v54 = static Locale.autoupdatingCurrent.getter(v53);
  v55 = v96;
  v56 = static Calendar.autoupdatingCurrent.getter(v54);
  v57 = v97;
  v58 = static TimeZone.autoupdatingCurrent.getter(v56);
  v59 = v99;
  static FormatStyleCapitalizationContext.unknown.getter(v58);
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v34, v51, v52, v55, v57, v59);
  v60 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v61 = v40[14];
  *(_QWORD *)((char *)a9 + v61) = v60;
  v62 = v98;
  v63 = static Locale.current.getter(v60);
  v64 = v106;
  Locale.language.getter(v63);
  v65 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v62, v101);
  v66 = (uint64_t)v105;
  Locale.Language.languageCode.getter(v65);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v64, v108);
  v67 = type metadata accessor for Locale.LanguageCode(0);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67) == 1)
  {
    sub_10001BE90(v66, &qword_100825CB0);
  }
  else
  {
    v69 = v66;
    v70 = Locale.LanguageCode.identifier.getter();
    v72 = v71;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v67);
    v118 = v70;
    v119 = v72;
    v116 = 26746;
    v117 = 0xE200000000000000;
    v73 = sub_100038CA0();
    if ((StringProtocol.contains<A>(_:)(&v116, &type metadata for String, &type metadata for String, v73, v73) & 1) != 0)
    {
      swift_bridgeObjectRelease(v72, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      v118 = v70;
      v119 = v72;
      v116 = 24938;
      v117 = 0xE200000000000000;
      StringProtocol.contains<A>(_:)(&v116, &type metadata for String, &type metadata for String, v73, v73);
      swift_bridgeObjectRelease(v72, v81, v82, v83, v84, v85, v86, v87);
    }
  }
  v88 = *(id *)((char *)a9 + v61);
  v89 = String._bridgeToObjectiveC()();
  objc_msgSend(v88, "setLocalizedDateFormatFromTemplate:", v89);

  v90 = v111;
  sub_10041D5A8(v110, v109);
  v91 = swift_release(a3);
  (*(void (**)(uint64_t, uint64_t, __n128))(v103 + 8))(v46, v104, v91);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v115);
  sub_1001CA754(v114);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v112 + 32))((char *)a9 + v40[15], v90, v113);
}

uint64_t type metadata accessor for MetricCardBarChartView(uint64_t a1)
{
  uint64_t result;

  result = qword_100825D20;
  if (!qword_100825D20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricCardBarChartView);
  return result;
}

uint64_t sub_1001CA754(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricFormattingHelper(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1001CA790(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  id v57;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v15 = *(_QWORD *)((char *)a2 + v14);
    *(_QWORD *)((char *)a1 + v14) = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(void **)((char *)a2 + v21);
    *(_QWORD *)((char *)a1 + v21) = v24;
    v25 = type metadata accessor for MetricFormattingHelper(0);
    v26 = *(int *)(v25 + 20);
    v60 = &v23[v26];
    v61 = &v22[v26];
    v27 = type metadata accessor for AttributedString(0);
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v15);
    swift_retain(v18);
    v28 = v24;
    v59(v61, v60, v27);
    v29 = *(int *)(v25 + 24);
    v30 = *(void **)&v23[v29];
    *(_QWORD *)&v22[v29] = v30;
    v31 = a3[10];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)a1 + v31 + 24) = v34;
    v35 = v34;
    v36 = **(void (***)(char *, char *, uint64_t))(v34 - 8);
    v37 = v30;
    v36(v32, v33, v35);
    v38 = a3[11];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    v42 = a3[12];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    v45 = type metadata accessor for Calendar.Component(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    v46 = a3[13];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for Date.FormatStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    v50 = a3[14];
    v51 = a3[15];
    v52 = *(void **)((char *)a2 + v50);
    *(_QWORD *)((char *)a1 + v50) = v52;
    v53 = (char *)a1 + v51;
    v54 = (char *)a2 + v51;
    v55 = type metadata accessor for AxisMarkValues(0);
    v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
    v57 = v52;
    v56(v53, v54, v55);
  }
  return a1;
}

uint64_t sub_1001CAA20(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  v6 = (id *)((char *)a1 + a2[9]);

  v7 = type metadata accessor for MetricFormattingHelper(0);
  v8 = (char *)v6 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)a1 + a2[10]));
  v10 = (char *)a1 + a2[11];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)a1 + a2[12];
  v13 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (char *)a1 + a2[13];
  v15 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);

  v16 = (char *)a1 + a2[15];
  v17 = type metadata accessor for AxisMarkValues(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

_QWORD *sub_1001CABA0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  id v55;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v13 = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  v14 = a3[7];
  v15 = a3[8];
  v16 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(void **)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v22;
  v23 = type metadata accessor for MetricFormattingHelper(0);
  v24 = *(int *)(v23 + 20);
  v58 = &v21[v24];
  v59 = &v20[v24];
  v25 = type metadata accessor for AttributedString(0);
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain(v13);
  swift_retain(v16);
  v26 = v22;
  v57(v59, v58, v25);
  v27 = *(int *)(v23 + 24);
  v28 = *(void **)&v21[v27];
  *(_QWORD *)&v20[v27] = v28;
  v29 = a3[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *(_OWORD *)((char *)a2 + v29 + 24);
  *(_OWORD *)((char *)a1 + v29 + 24) = v32;
  v33 = v32;
  v34 = **(void (***)(char *, char *, uint64_t))(v32 - 8);
  v35 = v28;
  v34(v30, v31, v33);
  v36 = a3[11];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  v40 = a3[12];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  v44 = a3[13];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  v48 = a3[14];
  v49 = a3[15];
  v50 = *(void **)((char *)a2 + v48);
  *(_QWORD *)((char *)a1 + v48) = v50;
  v51 = (char *)a1 + v49;
  v52 = (char *)a2 + v49;
  v53 = type metadata accessor for AxisMarkValues(0);
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  v55 = v50;
  v54(v51, v52, v53);
  return a1;
}

_QWORD *sub_1001CAE04(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v12 = a3[6];
  v13 = *(_QWORD *)((char *)a2 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = *(_QWORD *)((char *)a2 + v15);
  v17 = *(_QWORD *)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = a3[9];
  v23 = (void **)((char *)a1 + v22);
  v24 = (char *)a2 + v22;
  v25 = *(void **)((char *)a2 + v22);
  v26 = *v23;
  *v23 = v25;
  v27 = v25;

  v28 = type metadata accessor for MetricFormattingHelper(0);
  v29 = *(int *)(v28 + 20);
  v30 = (char *)v23 + v29;
  v31 = &v24[v29];
  v32 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  v33 = *(int *)(v28 + 24);
  v34 = *(void **)&v24[v33];
  v35 = *(void **)((char *)v23 + v33);
  *(void **)((char *)v23 + v33) = v34;
  v36 = v34;

  sub_1000F1A58((_QWORD *)((char *)a1 + a3[10]), (_QWORD *)((char *)a2 + a3[10]));
  v37 = a3[11];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  v41 = a3[12];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 24))(v42, v43, v44);
  v45 = a3[13];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  v49 = a3[14];
  v50 = *(void **)((char *)a2 + v49);
  v51 = *(void **)((char *)a1 + v49);
  *(_QWORD *)((char *)a1 + v49) = v50;
  v52 = v50;

  v53 = a3[15];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for AxisMarkValues(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  return a1;
}

char *sub_1001CB074(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = a3[9];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v15 = type metadata accessor for MetricFormattingHelper(0);
  v16 = *(int *)(v15 + 20);
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v13[*(int *)(v15 + 24)] = *(_QWORD *)&v14[*(int *)(v15 + 24)];
  v20 = a3[10];
  v21 = a3[11];
  v22 = &a1[v20];
  v23 = &a2[v20];
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v25 = &a1[v21];
  v26 = &a2[v21];
  v27 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[12];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = a3[13];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  v36 = a3[15];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = type metadata accessor for AxisMarkValues(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  return a1;
}

char *sub_1001CB280(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_bridgeObjectRelease(v9);
  v10 = a3[7];
  v11 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  swift_release(v11);
  v12 = a3[8];
  v13 = a3[9];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = &a1[v13];
  v17 = &a2[v13];
  v18 = *(_QWORD *)&a2[v13];
  v19 = *(void **)&a1[v13];
  *(_QWORD *)v16 = v18;

  v20 = type metadata accessor for MetricFormattingHelper(0);
  v21 = *(int *)(v20 + 20);
  v22 = &v16[v21];
  v23 = &v17[v21];
  v24 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = *(int *)(v20 + 24);
  v26 = *(void **)&v16[v25];
  *(_QWORD *)&v16[v25] = *(_QWORD *)&v17[v25];

  v27 = a3[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v27]);
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[14];
  v44 = *(void **)&a1[v43];
  *(_QWORD *)&a1[v43] = *(_QWORD *)&a2[v43];

  v45 = a3[15];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = type metadata accessor for AxisMarkValues(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t sub_1001CB4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CB4E8);
}

uint64_t sub_1001CB4E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for MetricFormattingHelper(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[9];
    }
    else
    {
      v16 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[11];
      }
      else
      {
        v17 = type metadata accessor for Calendar.Component(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v15 = a3[12];
        }
        else
        {
          v18 = type metadata accessor for Date.FormatStyle(0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
          {
            v8 = v18;
            v15 = a3[13];
          }
          else
          {
            v8 = type metadata accessor for AxisMarkValues(0);
            v14 = *(_QWORD *)(v8 - 8);
            v15 = a3[15];
          }
        }
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[6]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001CB624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CB630);
}

uint64_t sub_1001CB630(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for MetricFormattingHelper(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[9];
    }
    else
    {
      v16 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[11];
      }
      else
      {
        v17 = type metadata accessor for Calendar.Component(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[12];
        }
        else
        {
          v18 = type metadata accessor for Date.FormatStyle(0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[13];
          }
          else
          {
            v10 = type metadata accessor for AxisMarkValues(0);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[15];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1001CB768(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[12];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v14[1] = &unk_10062BB38;
    v14[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v14[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v14[4] = &unk_10062BB50;
    v4 = type metadata accessor for MetricFormattingHelper(319);
    if (v5 <= 0x3F)
    {
      v14[5] = *(_QWORD *)(v4 - 8) + 64;
      v14[6] = &unk_10062BB68;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v14[7] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Calendar.Component(319);
        if (v9 <= 0x3F)
        {
          v14[8] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Date.FormatStyle(319);
          if (v11 <= 0x3F)
          {
            v14[9] = *(_QWORD *)(v10 - 8) + 64;
            v14[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
            v12 = type metadata accessor for AxisMarkValues(319);
            if (v13 <= 0x3F)
            {
              v14[11] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 12, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001CB8A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AEFA4, 1);
}

void sub_1001CB8B0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  double v24;
  char v25;
  double v26;
  double v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74[16];
  uint64_t v75;
  char v76[16];
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  _QWORD v82[2];

  v2 = v1;
  v73 = a1;
  v3 = sub_100047110(&qword_100824C50);
  __chkstk_darwin(v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100825D80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100047110(&qword_100825D88);
  v61 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100047110(&qword_100825D90);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100047110(&qword_100825D98);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_100825DA0);
  v70 = *(_QWORD *)(v14 - 8);
  v71 = v14;
  __chkstk_darwin(v14);
  v69 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100825DA8);
  __chkstk_darwin(v16);
  v66 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v2;
  v18 = sub_100047110(&qword_100825DB0);
  v19 = sub_1000F0610(&qword_100825DB8, &qword_100825DB0, (void (*)(void))sub_1001CDC58, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  Chart.init(content:)(sub_1001CDC50, v76, v18, v19);
  v20 = sub_100028384(&qword_100825DE0, &qword_100825D80, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v60 = v11;
  View.chartYAxis<A>(content:)(ASFriendListDisplayMode.id.getter, 0, v6, &type metadata for BuilderEmpty, v20, &protocol witness table for BuilderEmpty);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = type metadata accessor for MetricCardBarChartView(0);
  v22 = *(_QWORD *)(v2 + *(int *)(v21 + 24));
  v72 = v2;
  v75 = v2;
  swift_bridgeObjectRetain(v22);
  v23 = sub_100368E58((void (*)(uint64_t *__return_ptr, uint64_t))sub_1001CDD4C, (uint64_t)v74, v22);
  swift_bridgeObjectRelease(v22);
  v24 = COERCE_DOUBLE(sub_10057165C((uint64_t)v23));
  LOBYTE(v18) = v25;
  swift_bridgeObjectRelease(v23);
  v26 = 1.0;
  if ((v18 & 1) == 0)
  {
    v26 = v24;
    if (v24 < 1.0)
      v26 = 1.0;
  }
  v27 = v26 * 1.6;
  if (v27 < 0.0)
  {
    __break(1u);
  }
  else
  {
    v82[0] = 0;
    *(double *)&v82[1] = v27;
    v28 = type metadata accessor for ScaleType(0);
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
    v29(v5, 1, 1, v28);
    v30 = sub_100047110(&qword_100825DE8);
    v78 = v6;
    v79 = &type metadata for BuilderEmpty;
    v80 = v20;
    v81 = &protocol witness table for BuilderEmpty;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v32 = sub_1001CDF80(&qword_100825DF0, &qword_100825DE8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v33 = v62;
    v34 = v59;
    v35 = v60;
    View.chartYScale<A>(domain:type:)(v82, v5, v59, v30, OpaqueTypeConformance2, v32);
    sub_10001BE90((uint64_t)v5, &qword_100824C50);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v34);
    v36 = *(int *)(v21 + 32);
    v37 = v72;
    v38 = sub_10041D6FC(*(char **)(v72 + v36), *(_BYTE *)(v72 + v36 + 8), 1.0);
    v39 = _swiftEmptyArrayStorage;
    if (v38)
      v39 = (_QWORD *)v38;
    v82[0] = v39;
    v29(v5, 1, 1, v28);
    v40 = sub_100047110(&qword_100824CE8);
    v78 = v34;
    v79 = (void *)v30;
    v80 = OpaqueTypeConformance2;
    v81 = (void *)v32;
    v41 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v42 = sub_1001CDF80((unint64_t *)&qword_100824CF0, &qword_100824CE8, (uint64_t)&protocol witness table for Date, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v43 = v65;
    v44 = v64;
    View.chartXScale<A>(domain:type:)(v82, v5, v64, v40, v41, v42);
    sub_10001BE90((uint64_t)v5, &qword_100824C50);
    v45 = swift_bridgeObjectRelease(v82[0]);
    v46 = (*(uint64_t (**)(char *, uint64_t, __n128))(v63 + 8))(v33, v44, v45);
    __chkstk_darwin(v46);
    v57[2] = v37;
    v47 = sub_100047110(&qword_100825DF8);
    v78 = v44;
    v79 = (void *)v40;
    v80 = v41;
    v81 = (void *)v42;
    v48 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v49 = sub_1001CDD70();
    v50 = v69;
    v51 = v68;
    View.chartXAxis<A>(content:)(sub_1001CDD68, v57, v68, v47, v48, v49);
    v52 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v43, v51);
    v53 = static Alignment.center.getter(v52);
    v54 = v66;
    v56 = sub_1003EB2EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v66, 0.0, 1, 0.0, 1, v53, v55);
    (*(void (**)(char *, uint64_t, double))(v70 + 8))(v50, v71, v56);
    sub_100045AD4(v54, v73, &qword_100825DA8);
  }
}

uint64_t sub_1001CBF38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for MetricCardBarChartView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a1 + *(int *)(__chkstk_darwin(v2) + 24));
  v17 = v5;
  KeyPath = swift_getKeyPath(&unk_10062BBD0);
  sub_10004F8C8(a1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricCardBarChartView);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10078CFE0, v8 + v4, v7 | 7);
  sub_1001CDE7C((uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  swift_bridgeObjectRetain(v5);
  v10 = sub_100047110(&qword_100825EA8);
  v11 = sub_100047110(&qword_100825DC8);
  v12 = sub_100028384(&qword_100825EB0, &qword_100825EA8, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v14 = sub_1001CDC58();
  return ForEach<>.init(_:id:content:)(&v17, KeyPath, sub_1001CE278, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1001CC0B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  double v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  void (*v71)(uint64_t, uint64_t);
  double v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t OpaqueTypeConformance2;
  uint64_t v78;
  __n128 v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  double v89;
  double v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD v128[6];

  v118 = a3;
  v122 = type metadata accessor for DynamicTypeSize(0);
  v114 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v121 = (uint64_t)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100824DC0);
  v7 = __chkstk_darwin(v6);
  v109 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v108 = (char *)&v102 - v9;
  v10 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v10);
  v12 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100824DC8);
  __chkstk_darwin(v13);
  v107 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for RuleMark(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100047110(&qword_100825DD8);
  v113 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v112 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110(&qword_100825DD0);
  v117 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v120 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110(&qword_100825EB8);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v116 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v115 = (char *)&v102 - v24;
  v25 = type metadata accessor for MetricChartData(0);
  objc_msgSend(*(id *)((char *)a1 + *(int *)(v25 + 24)), "doubleValueForUnit:", *a1);
  v27 = v26;
  v28 = (int *)type metadata accessor for MetricCardBarChartView(0);
  sub_100443B08(*(_BYTE *)(a2 + v28[5]), v27);
  v30 = v29;
  if ((v29 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v118, 1, 1, v20);
  v104 = v21;
  v105 = v18;
  v106 = v20;
  v31 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = (char *)a1 + *(int *)(v25 + 20);
  v39 = a2 + v28[12];
  v40 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v12, 1, 1, v40);
  v41 = v35 & 1;
  v42 = v107;
  static PlottableValue.value<>(_:_:unit:calendar:)(v31, v33, v41, v37, v38, v39, v12);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v33);
  sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_100827450);
  v43 = LocalizedStringKey.init(stringLiteral:)(0x656E696C65736142, 0xE800000000000000);
  v45 = v44;
  v47 = v46;
  v128[0] = 0;
  v49 = v108;
  static PlottableValue.value(_:_:)(v43, v44, v48 & 1, v46, v128, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v45);
  v50 = LocalizedStringKey.init(stringLiteral:)(0x65756C6156, 0xE500000000000000);
  v52 = v51;
  v54 = v53;
  v128[0] = v30;
  v56 = v109;
  static PlottableValue.value(_:_:)(v50, v51, v55 & 1, v53, v128, &type metadata for Double, &protocol witness table for Double);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v52);
  v57 = type metadata accessor for Date(0);
  v103 = v16;
  RuleMark.init<A, B>(x:yStart:yEnd:)(v42, v49, v56, v57, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double, v58);
  v59 = a2 + v28[8];
  if (*(_BYTE *)(v59 + 8) != 1 || (v60 = 6.0, *(_QWORD *)v59 != 1))
    v60 = 2.0;
  v61 = (_QWORD *)(a2 + v28[10]);
  v62 = v61[3];
  v63 = v61[4];
  sub_100016804(v61, v62);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 16))(v62, v63);
  v66 = v65;
  v68 = v67;
  v69 = v121;
  sub_1003F6E18(v121);
  v70 = sub_10054FD90(v69, v64, v66, v68);
  sub_1000EB41C(v64, v66, v68);
  v71 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
  v71(v69, v122);
  v72 = v60 + v60;
  if (v70 != 2)
    v72 = v60;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v128, 1, 0, _swiftEmptyArrayStorage, v72, 10.0, 0.0);
  v73 = v112;
  v74 = v111;
  v75 = v103;
  ChartContent.lineStyle(_:)(v128, v111, &protocol witness table for RuleMark);
  sub_1001B57E8((uint64_t)v128);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v75, v74);
  v76 = Color.gradient.getter(*(_QWORD *)(a2 + v28[7]));
  v127 = v76;
  v123 = v74;
  v124 = &protocol witness table for RuleMark;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v78 = v119;
  ChartContent.foregroundStyle<A>(_:)(&v127, v119, &type metadata for AnyGradient, OpaqueTypeConformance2, &protocol witness table for AnyGradient);
  v79 = swift_release(v76);
  (*(void (**)(char *, uint64_t, __n128))(v113 + 8))(v73, v78, v79);
  if (*(_BYTE *)(v59 + 8) != 1 || (v80 = 6.0, *(_QWORD *)v59 != 1))
    v80 = 2.0;
  v81 = v61[3];
  v82 = v61[4];
  sub_100016804(v61, v81);
  v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 16))(v81, v82);
  v85 = v84;
  LOBYTE(v82) = v86;
  v87 = v121;
  sub_1003F6E18(v121);
  v88 = sub_10054FD90(v87, v83, v85, v82);
  sub_1000EB41C(v83, v85, v82);
  v71(v87, v122);
  v89 = v80 + v80;
  if (v88 != 2)
    v89 = v80;
  v123 = v119;
  v124 = &type metadata for AnyGradient;
  v90 = v89 * -0.5;
  v125 = OpaqueTypeConformance2;
  v126 = &protocol witness table for AnyGradient;
  v91 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v92 = v116;
  v93 = v105;
  v94 = v120;
  ChartContent.offset(x:y:)(v105, v91, 0.0, v90);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v94, v93);
  v95 = v104;
  v96 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
  v97 = v115;
  v98 = v92;
  v99 = v106;
  v96(v115, v98, v106);
  v100 = v118;
  v96(v118, v97, v99);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v100, 0, 1, v99);
}

uint64_t sub_1001CC898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = a2;
  v76 = sub_100047110(&qword_100825E38);
  __chkstk_darwin(v76);
  v75 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MetricCardBarChartView(0);
  v68 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v69 = v5;
  v70 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100047110(&qword_100825E30);
  v73 = *(_QWORD *)(v66 - 8);
  v6 = __chkstk_darwin(v66);
  v74 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v72 = (char *)&v62 - v8;
  v9 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v9);
  v67 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v11);
  v64 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar.Component(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AxisMarkValues(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_100825E10);
  v25 = __chkstk_darwin(v24);
  v65 = (uint64_t)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v62 - v27;
  v63 = v4;
  v29 = *(int *)(v4 + 32);
  v71 = a1;
  v30 = a1 + v29;
  if (*(_BYTE *)(v30 + 8) == 1 && !*(_QWORD *)v30)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Calendar.Component.hour(_:), v16);
    v34 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)(v19, 1, 2, 2, v15);
    sub_10001BE90((uint64_t)v15, (uint64_t *)&unk_100827450);
    v35 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v33 = v64;
    v36 = static AxisMarkPreset.automatic.getter(v35);
    v32 = v67;
    static AxisMarkPosition.automatic.getter(v36);
    v37 = type metadata accessor for AxisGridLine(0);
    AxisMarks.init(preset:position:values:content:)(v33, v32, v23, sub_1001CCE4C, 0, v37, &protocol witness table for AxisGridLine);
    v38 = sub_100047110(&qword_100825E20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v28, 0, 1, v38);
  }
  else
  {
    v31 = sub_100047110(&qword_100825E20);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v28, 1, 1, v31);
    v32 = v67;
    v33 = v64;
  }
  v62 = v28;
  v39 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v71 + *(int *)(v63 + 60), v20);
  v40 = v39;
  v41 = v70;
  sub_10004F8C8(v40, v70, type metadata accessor for MetricCardBarChartView);
  v42 = *(unsigned __int8 *)(v68 + 80);
  v43 = (v42 + 16) & ~v42;
  v44 = swift_allocObject(&unk_10078CFB8, v43 + v69, v42 | 7);
  v45 = sub_1001CDE7C(v41, v44 + v43);
  v46 = static AxisMarkPreset.automatic.getter(v45);
  static AxisMarkPosition.automatic.getter(v46);
  v47 = sub_100047110(&qword_100825E40);
  v48 = sub_1000F0610(&qword_100825E48, &qword_100825E40, (void (*)(void))sub_1001CDECC, (uint64_t)&protocol conformance descriptor for <A> A?);
  v49 = v72;
  AxisMarks.init(preset:position:values:content:)(v33, v32, v23, sub_1001CDEC0, v44, v47, v48);
  v50 = (uint64_t)v28;
  v51 = v65;
  sub_100021CC0(v50, v65, &qword_100825E10);
  v53 = v73;
  v52 = v74;
  v54 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
  v55 = v66;
  v54(v74, v49, v66);
  sub_1001CDDFC();
  v56 = v75;
  sub_100021CC0(v51, v75, &qword_100825E10);
  sub_100028384(&qword_100825E28, &qword_100825E30, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v57 = v76;
  v58 = v56 + *(int *)(v76 + 48);
  v54((char *)v58, v52, v55);
  v59 = v77;
  sub_100045AD4(v56, v77, &qword_100825E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v59 + *(int *)(v57 + 48), v58, v55);
  v60 = *(void (**)(char *, uint64_t))(v53 + 8);
  v60(v49, v55);
  sub_10001BE90((uint64_t)v62, &qword_100825E10);
  v60(v52, v55);
  return sub_10001BE90(v51, &qword_100825E10);
}

uint64_t sub_1001CCE4C()
{
  _OWORD v1[2];
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;

  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v1, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v3[0] = v1[0];
  v3[1] = v1[1];
  v4 = v2;
  return AxisGridLine.init(centered:stroke:)(2, v3);
}

uint64_t sub_1001CCEB4@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD v84[3];
  _OWORD v85[2];
  uint64_t v86;
  _OWORD v87[2];
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;

  v75 = a1;
  v83 = a2;
  v2 = sub_100047110(&qword_100825E40);
  __chkstk_darwin(v2);
  v79 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100825E78);
  v5 = __chkstk_darwin(v4);
  v78 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v77 = (char *)&v67 - v7;
  v8 = type metadata accessor for AxisTick.Length(0);
  __chkstk_darwin(v8);
  v76 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisTick(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v82 = (char *)&v67 - v15;
  v16 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v16);
  v73 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v18);
  v72 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100047110(&qword_100825E68);
  v74 = *(_QWORD *)(v81 - 8);
  v20 = __chkstk_darwin(v81);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v67 - v24;
  __chkstk_darwin(v23);
  v80 = (char *)&v67 - v26;
  v27 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v27);
  v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v67 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  AxisValue.as<A>(_:)(v32, v32, &protocol witness table for Date);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_10001BE90((uint64_t)v29, (uint64_t *)&unk_100828370);
    v35 = sub_100047110(&qword_100825E58);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v83, 1, 1, v35);
  }
  else
  {
    v71 = v22;
    v69 = v11;
    v70 = v14;
    v68 = v31;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v29, v30);
    v37 = type metadata accessor for MetricCardBarChartView(0);
    v38 = &v75[*(int *)(v37 + 32)];
    if (*(_QWORD *)v38 == 1)
      v39 = v38[8];
    else
      v39 = 0;
    v40 = __chkstk_darwin(v37);
    v75 = v34;
    v41 = v72;
    v42 = static AxisValueLabelCollisionResolution.automatic.getter(v40);
    v43 = v73;
    static AxisValueLabelOrientation.automatic.getter(v42);
    v65 = sub_100047110(&qword_100825E80);
    v66 = sub_1001CDFE8();
    v64 = &v62;
    LOBYTE(v63) = 1;
    ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, int, double (*)@<D0>(uint64_t@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(v39, 0, 0, 1, 0, 0, 1, v41, 2, v43, 0, 1, 0, v63, sub_1001CDFDC);
    v44 = v74;
    v45 = v80;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v80, v25, v81);
    v46 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v85, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
    v91[0] = v85[0];
    v91[1] = v85[1];
    v92 = v86;
    v47 = v76;
    static AxisTick.Length.automatic.getter(v46);
    AxisTick.init(centered:length:stroke:)(2, v47, v91);
    v48 = v38[8] == 1;
    v67 = v30;
    if (v48 && *(_QWORD *)v38 == 1)
    {
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v87, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
      v89[0] = v87[0];
      v89[1] = v87[1];
      v90 = v88;
      v49 = (uint64_t)v77;
      AxisGridLine.init(centered:stroke:)(2, v89);
      v50 = type metadata accessor for AxisGridLine(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 0, 1, v50);
    }
    else
    {
      v51 = type metadata accessor for AxisGridLine(0);
      v49 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v77, 1, 1, v51);
    }
    v52 = (uint64_t)v78;
    v53 = v70;
    v54 = v69;
    v55 = v71;
    v56 = v81;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v71, v45, v81);
    v84[0] = v55;
    v57 = v82;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v53, v82, v10);
    v84[1] = v53;
    sub_100021CC0(v49, v52, &qword_100825E78);
    v84[2] = v52;
    v58 = v79;
    sub_1005AC0F4(v84, v79);
    sub_10001BE90(v49, &qword_100825E78);
    v59 = *(void (**)(char *, uint64_t))(v54 + 8);
    v59(v57, v10);
    v60 = *(void (**)(char *, uint64_t))(v44 + 8);
    v60(v80, v56);
    sub_10001BE90(v52, &qword_100825E78);
    v59(v53, v10);
    v60(v71, v56);
    v61 = sub_100047110(&qword_100825E58);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v58, 0, 1, v61);
    sub_100045AD4(v58, v83, &qword_100825E40);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v75, v67);
  }
}

double sub_1001CD5E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t, __n128);
  uint64_t v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  double result;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[3];
  _OWORD v81[2];
  uint64_t v82;
  char v83;

  v79 = a3;
  v7 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v76 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v77 = (char *)&v68 - v10;
  v11 = type metadata accessor for AxisValue(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for MetricCardBarChartView(0);
  v15 = a1;
  v16 = (uint64_t *)(a1 + *(int *)(v75 + 32));
  v17 = *v16;
  v18 = *((unsigned __int8 *)v16 + 8);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if (v18 != 1 || v17 != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_8;
  }
  v21 = AxisValue.index.getter(v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v21 != 4)
  {
LABEL_8:
    v72 = v16;
    v73 = v7;
    v74 = a4;
    v71 = v15;
    *(_QWORD *)&v81[0] = sub_1001CDA20();
    *((_QWORD *)&v81[0] + 1) = v25;
    v26 = sub_100038CA0();
    v27 = Text.init<A>(_:)(v81, &type metadata for String, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    v35 = static Color.white.getter(v34);
    *(_QWORD *)&v81[0] = v35;
    v36 = Text.foregroundStyle<A>(_:)(v81, v27, v29, v33, v31, &type metadata for Color, &protocol witness table for Color);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    sub_1000E4458(v27, v29, v33);
    swift_release(v35);
    v43 = swift_bridgeObjectRelease(v31);
    if (qword_10081D698 != -1)
      swift_once(&qword_10081D698, sub_1001A826C);
    v44 = v40 & 1;
    v70 = Text.font(_:)(qword_10086A000, v36, v38, v40 & 1, v42, v43);
    v46 = v45;
    v69 = v47;
    v49 = v48 & 1;
    sub_1000E4458(v36, v38, v44);
    v50 = swift_bridgeObjectRelease(v42);
    v51 = v71 + *(int *)(v75 + 44);
    v52 = *v72;
    v53 = *((unsigned __int8 *)v72 + 8);
    v55 = v77;
    v54 = v78;
    v56 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v78 + 16);
    v57 = v73;
    v56(v77, v79, v73, v50);
    v58 = v76;
    ((void (*)(char *, uint64_t, uint64_t))v56)(v76, v51, v57);
    if (v53 == 1 && v52 == 1)
    {
      sub_1000083D8((unint64_t *)&qword_1008274E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v59 = dispatch thunk of static Comparable.< infix(_:_:)(v58, v55, v57);
      v60 = *(void (**)(char *, uint64_t))(v54 + 8);
      v60(v58, v57);
      v60(v55, v57);
      a4 = v74;
      if ((v59 & 1) == 0)
      {
        v61 = 0x3FF0000000000000;
LABEL_16:
        *(_QWORD *)&v80[0] = v70;
        *((_QWORD *)&v80[0] + 1) = v46;
        *(_QWORD *)&v80[1] = v49;
        *((_QWORD *)&v80[1] + 1) = v69;
        *(_QWORD *)&v80[2] = v61;
        BYTE8(v80[2]) = 1;
        v63 = sub_100047110(&qword_100825E98);
        v23 = sub_1001CE054();
        v24 = v63;
        goto LABEL_17;
      }
    }
    else
    {
      v62 = *(void (**)(char *, uint64_t))(v54 + 8);
      v62(v58, v57);
      v62(v55, v57);
      a4 = v74;
    }
    v61 = 0x3FD3333333333333;
    goto LABEL_16;
  }
  memset(v80, 0, 41);
  v22 = sub_100047110(&qword_100825E98);
  v23 = sub_1001CE054();
  v24 = v22;
LABEL_17:
  _ConditionalContent<>.init(storage:)(v80, &type metadata for EmptyView, v24, &protocol witness table for EmptyView, v23);
  result = *(double *)v81;
  v65 = v81[1];
  v66 = v82;
  v67 = v83;
  *(_OWORD *)a4 = v81[0];
  *(_OWORD *)(a4 + 16) = v65;
  *(_QWORD *)(a4 + 32) = v66;
  *(_BYTE *)(a4 + 40) = v67;
  return result;
}

uint64_t sub_1001CDA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v17;

  v1 = type metadata accessor for Date.FormatStyle.Symbol.Weekday(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date.FormatStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MetricCardBarChartView(0);
  v10 = v0 + *(int *)(v9 + 32);
  if (*(_BYTE *)(v10 + 8) == 1 && *(_QWORD *)v10 == 1)
  {
    static Date.FormatStyle.Symbol.Weekday.narrow.getter();
    Date.FormatStyle.weekday(_:)(v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = sub_1000083D8(&qword_100825EA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
    Date.formatted<A>(_:)(&v17, v8, v5, v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v17;
  }
  else
  {
    v13 = *(void **)(v0 + *(int *)(v9 + 56));
    isa = Date._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v13, "stringFromDate:", isa);

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  }
  return v12;
}

void sub_1001CDBC0(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(*(id *)((char *)a1 + *(int *)(type metadata accessor for MetricChartData(0) + 24)), "doubleValueForUnit:", *a1);
  v6 = v5;
  v7 = type metadata accessor for MetricCardBarChartView(0);
  sub_100443B08(*(_BYTE *)(a2 + *(int *)(v7 + 20)), v6);
  *a3 = v8;
}

uint64_t sub_1001CDC50()
{
  uint64_t v0;

  return sub_1001CBF38(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1001CDC58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_100825DC0;
  if (!qword_100825DC0)
  {
    v1 = sub_100007050(&qword_100825DC8);
    v2 = sub_100007050(&qword_100825DD0);
    v3 = sub_100007050(&qword_100825DD8);
    v6 = type metadata accessor for RuleMark(255);
    v7 = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v6 = v3;
    v7 = &type metadata for AnyGradient;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for AnyGradient;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v6 = v2;
    v7 = (void *)v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:y:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100825DC0);
  }
  return result;
}

void sub_1001CDD4C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001CDBC0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1001CDD68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001CC898(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001CDD70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825E00;
  if (!qword_100825E00)
  {
    v1 = sub_100007050(&qword_100825DF8);
    sub_1001CDDFC();
    sub_100028384(&qword_100825E28, &qword_100825E30, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100825E00);
  }
  return result;
}

unint64_t sub_1001CDDFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825E08;
  if (!qword_100825E08)
  {
    v1 = sub_100007050(&qword_100825E10);
    sub_100028384(&qword_100825E18, &qword_100825E20, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100825E08);
  }
  return result;
}

uint64_t sub_1001CDE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricCardBarChartView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CDEC0(uint64_t a1)
{
  return sub_1001CE284(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001CCEB4);
}

unint64_t sub_1001CDECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825E50;
  if (!qword_100825E50)
  {
    v1 = sub_100007050(&qword_100825E58);
    sub_100028384(&qword_100825E60, &qword_100825E68, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    sub_1001CDF80((unint64_t *)&qword_100825E70, &qword_100825E78, (uint64_t)&protocol witness table for AxisGridLine, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100825E50);
  }
  return result;
}

uint64_t sub_1001CDF80(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100007050(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1001CDFDC@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001CD5E8(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_1001CDFE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825E88;
  if (!qword_100825E88)
  {
    v1 = sub_100007050(&qword_100825E80);
    sub_1001CE054();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825E88);
  }
  return result;
}

unint64_t sub_1001CE054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100825E90;
  if (!qword_100825E90)
  {
    v1 = sub_100007050(&qword_100825E98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100825E90);
  }
  return result;
}

uint64_t sub_1001CE0BC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for MetricCardBarChartView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[6]));
  swift_release(*(_QWORD *)((char *)v6 + v1[7]));
  v10 = (id *)((char *)v6 + v1[9]);

  v11 = type metadata accessor for MetricFormattingHelper(0);
  v12 = (char *)v10 + *(int *)(v11 + 20);
  v13 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)v6 + v1[10]));
  v14 = (char *)v6 + v1[11];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (char *)v6 + v1[12];
  v17 = type metadata accessor for Calendar.Component(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (char *)v6 + v1[13];
  v19 = type metadata accessor for Date.FormatStyle(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);

  v20 = (char *)v6 + v1[15];
  v21 = type metadata accessor for AxisMarkValues(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_1001CE278(uint64_t a1)
{
  return sub_1001CE284(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001CC0B0);
}

uint64_t sub_1001CE284(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricCardBarChartView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1001CE2E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  result = qword_100825EC0;
  if (!qword_100825EC0)
  {
    v13 = sub_100007050(&qword_100825DA8);
    v1 = sub_100007050(&qword_100825D98);
    v2 = sub_100007050(&qword_100825DF8);
    v3 = sub_100007050(&qword_100825D90);
    v4 = sub_100007050(&qword_100824CE8);
    v5 = sub_100007050(&qword_100825D88);
    v6 = sub_100007050(&qword_100825DE8);
    v14 = sub_100007050(&qword_100825D80);
    v15 = &type metadata for BuilderEmpty;
    v16 = sub_100028384(&qword_100825DE0, &qword_100825D80, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v17 = &protocol witness table for BuilderEmpty;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v8 = sub_1001CDF80(&qword_100825DF0, &qword_100825DE8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v14 = v5;
    v15 = (void *)v6;
    v16 = OpaqueTypeConformance2;
    v17 = (void *)v8;
    v9 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v10 = sub_1001CDF80((unint64_t *)&qword_100824CF0, &qword_100824CE8, (uint64_t)&protocol witness table for Date, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v14 = v3;
    v15 = (void *)v4;
    v16 = v9;
    v17 = (void *)v10;
    v11 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v12 = sub_1001CDD70();
    v14 = v1;
    v15 = (void *)v2;
    v16 = v11;
    v17 = (void *)v12;
    swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    atomic_store(result, (unint64_t *)&qword_100825EC0);
  }
  return result;
}

uint64_t *sub_1001CE4D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for Calendar(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v11 = a3[7];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = (void *)v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = v10;
    v16 = v14;
  }
  return a1;
}

void sub_1001CE57C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1001CE5D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;

  v6 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v10 = a3[7];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = (void *)v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = v9;
  v15 = v13;
  return a1;
}

uint64_t sub_1001CE650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  id v16;

  v6 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = (void *)v13[1];
  v15 = (void *)v12[1];
  v12[1] = v14;
  v16 = v14;

  return a1;
}

uint64_t sub_1001CE6EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001CE75C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = (void *)v10[1];
  *v10 = v13;
  v10[1] = v12;

  return a1;
}

uint64_t sub_1001CE7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CE7F0);
}

uint64_t sub_1001CE7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001CE86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CE878);
}

uint64_t sub_1001CE878(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ScheduleDayRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100825F20;
  if (!qword_100825F20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScheduleDayRowView);
  return result;
}

uint64_t sub_1001CE92C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Calendar(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_10062BC18;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001CE9B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AEFF4, 1);
}

void sub_1001CE9C8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  void *v18;
  unint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  id v22;
  id v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  char **v35;
  void *v36;
  id v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned __int8 v68;
  uint64_t v69;
  _OWORD *v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;

  v129 = a1;
  v119 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v119);
  v122 = (char *)&v117 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100047110(&qword_100825F60);
  __chkstk_darwin(v121);
  v128 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100047110(&qword_100825F68);
  v4 = __chkstk_darwin(v125);
  v127 = (uint64_t)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v126 = (uint64_t)&v117 - v6;
  v7 = sub_100047110(&qword_100825F70);
  __chkstk_darwin(v7);
  v9 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100047110(&qword_100825F78);
  __chkstk_darwin(v117);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100047110(&qword_100825F80);
  __chkstk_darwin(v118);
  v13 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_100825F88);
  __chkstk_darwin(v14);
  v124 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100047110(&qword_100825F90);
  __chkstk_darwin(v120);
  v123 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v18 = *(void **)(v1 + v17[7] + 8);
  v19 = *(_QWORD *)(v1 + v17[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v21 = swift_getKeyPath(&unk_10062BCB8);
  v22 = v18;
  static Published.subscript.getter(&v130, v22, KeyPath, v21);

  swift_release(KeyPath);
  swift_release(v21);
  v23 = (id)v130;
  if ((v130 & 0xC000000000000001) == 0)
  {
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v19 < *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v24 = (char *)*(id *)(v130 + 8 * v19 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_35;
  }
  v24 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v130);
LABEL_5:
  v25 = v24;
  swift_bridgeObjectRelease(v23);
  v23 = *(id *)&v25[OBJC_IVAR____TtC10FitnessApp7GoalDay_goal];

  v26 = swift_getKeyPath(&unk_10062BC90);
  v27 = swift_getKeyPath(&unk_10062BCB8);
  v28 = v22;
  static Published.subscript.getter(&v130, v28, v26, v27);

  swift_release(v26);
  swift_release(v27);
  v22 = (id)v130;
  if ((v130 & 0xC000000000000001) == 0)
  {
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v19 < *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v29 = (char *)*(id *)(v130 + 8 * v19 + 32);
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_35:
  v29 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v22);
LABEL_9:
  v30 = v29;
  swift_bridgeObjectRelease(v22);
  v31 = *(_QWORD *)&v30[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v32 = objc_msgSend(*(id *)(v1 + v17[5]), "unitManager");
  if (!v32)
  {
LABEL_41:
    __break(1u);
    return;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "unitManager");

  if ((unint64_t)(v31 - 1) < 2)
  {
    v35 = &selRef_minuteUnit;
    goto LABEL_14;
  }
  if (v31)
  {
    v35 = &selRef_countUnit;
LABEL_14:
    v36 = (void *)objc_opt_self(HKUnit);
    goto LABEL_16;
  }
  v35 = &selRef_userActiveEnergyBurnedUnit;
  v36 = v34;
LABEL_16:
  v37 = objc_msgSend(v36, *v35);

  objc_msgSend(v23, "doubleValueForUnit:", v37);
  v39 = v38;

  v40 = floor(v39);
  if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v40 >= 9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v41 = (void *)(uint64_t)v40;
  v42 = (void *)sub_1001CF2C0();
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v42);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v43 = sub_100047110(&qword_100825F98);
  sub_1001CF5C4(v1, v41, v42, &v9[*(int *)(v43 + 44)]);
  v45 = static Edge.Set.leading.getter(v44);
  v46 = static Edge.Set.trailing.getter();
  v47 = Edge.Set.init(rawValue:)(0);
  v48 = Edge.Set.init(rawValue:)(v47);
  if (Edge.Set.init(rawValue:)(v48 & v45) != v45)
    v47 = Edge.Set.init(rawValue:)(v47 | v45);
  v49 = Edge.Set.init(rawValue:)(v47);
  v50 = Edge.Set.init(rawValue:)(v49 & v46);
  v51 = (uint64_t)v124;
  if (v50 != v46)
    LOBYTE(v47) = Edge.Set.init(rawValue:)(v47 | v46);
  v52 = v117;
  v53 = EdgeInsets.init(_all:)(30.0);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  sub_100021CC0((uint64_t)v9, (uint64_t)v11, &qword_100825F70);
  v60 = &v11[*(int *)(v52 + 36)];
  *v60 = v47;
  *((double *)v60 + 1) = v53;
  *((_QWORD *)v60 + 2) = v55;
  *((_QWORD *)v60 + 3) = v57;
  *((_QWORD *)v60 + 4) = v59;
  v60[40] = 0;
  v61 = sub_10001BE90((uint64_t)v9, &qword_100825F70);
  v62 = static Edge.Set.top.getter(v61);
  v63 = v62;
  v64 = static Edge.Set.bottom.getter(v62);
  v65 = Edge.Set.init(rawValue:)(0);
  v66 = Edge.Set.init(rawValue:)(v65);
  if (Edge.Set.init(rawValue:)(v66 & v63) != v63)
    v65 = Edge.Set.init(rawValue:)(v65 | v63);
  v67 = Edge.Set.init(rawValue:)(v65);
  v68 = Edge.Set.init(rawValue:)(v67 & v64);
  v69 = (uint64_t)v128;
  if (v68 != v64)
    LOBYTE(v65) = Edge.Set.init(rawValue:)(v65 | v64);
  v70 = v122;
  v71 = EdgeInsets.init(_all:)(10.0);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  sub_100021CC0((uint64_t)v11, (uint64_t)v13, &qword_100825F78);
  v78 = &v13[*(int *)(v118 + 36)];
  *v78 = v65;
  *((double *)v78 + 1) = v71;
  *((_QWORD *)v78 + 2) = v73;
  *((_QWORD *)v78 + 3) = v75;
  *((_QWORD *)v78 + 4) = v77;
  v78[40] = 0;
  v79 = sub_10001BE90((uint64_t)v11, &qword_100825F78);
  v80 = static Alignment.center.getter(v79);
  sub_1003EB344(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v51, 0.0, 1, 0.0, 1, v80, v81);
  v82 = sub_10001BE90((uint64_t)v13, &qword_100825F80);
  v83 = static Alignment.center.getter(v82);
  v85 = v84;
  v86 = (char *)v70 + *(int *)(v119 + 20);
  v87 = enum case for RoundedCornerStyle.continuous(_:);
  v88 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 104))(v86, v87, v88);
  __asm { FMOV            V0.2D, #14.0 }
  *v70 = _Q0;
  v94 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
  v95 = Color.init(uiColor:)(v94);
  sub_10004F8C8((uint64_t)v70, v69, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v96 = v121;
  *(_QWORD *)(v69 + *(int *)(v121 + 52)) = v95;
  *(_WORD *)(v69 + *(int *)(v96 + 56)) = 256;
  v97 = sub_1001D2ACC((uint64_t)v70);
  v98 = static Edge.Set.leading.getter(v97);
  v99 = static Edge.Set.trailing.getter();
  v100 = Edge.Set.init(rawValue:)(0);
  v101 = Edge.Set.init(rawValue:)(v100);
  if (Edge.Set.init(rawValue:)(v101 & v98) != v98)
    v100 = Edge.Set.init(rawValue:)(v100 | v98);
  v102 = Edge.Set.init(rawValue:)(v100);
  if (Edge.Set.init(rawValue:)(v102 & v99) != v99)
    LOBYTE(v100) = Edge.Set.init(rawValue:)(v100 | v99);
  v103 = v129;
  v104 = (uint64_t)v123;
  v105 = (uint64_t)&v123[*(int *)(v120 + 36)];
  v106 = EdgeInsets.init(_all:)(10.0);
  v108 = v107;
  v110 = v109;
  v112 = v111;
  v113 = v127;
  sub_100021CC0(v69, v127, &qword_100825F60);
  v114 = v113 + *(int *)(v125 + 36);
  *(_BYTE *)v114 = v100;
  *(double *)(v114 + 8) = v106;
  *(_QWORD *)(v114 + 16) = v108;
  *(_QWORD *)(v114 + 24) = v110;
  *(_QWORD *)(v114 + 32) = v112;
  *(_BYTE *)(v114 + 40) = 0;
  sub_10001BE90(v69, &qword_100825F60);
  v115 = v126;
  sub_100045AD4(v113, v126, &qword_100825F68);
  sub_100045AD4(v115, v105, &qword_100825F68);
  v116 = (uint64_t *)(v105 + *(int *)(sub_100047110(&qword_100825FA0) + 36));
  *v116 = v83;
  v116[1] = v85;
  sub_100045AD4(v51, v104, &qword_100825F88);
  sub_100045AD4(v104, v103, &qword_100825F90);
}

uint64_t sub_1001CF2C0()
{
  uint64_t v0;
  uint64_t *v1;
  int *v2;
  void *v3;
  unint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  int IsCalorieUnit;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v3 = *(void **)(v0 + v2[7] + 8);
  v4 = *(_QWORD *)(v0 + v2[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v6 = swift_getKeyPath(&unk_10062BCB8);
  v7 = v3;
  static Published.subscript.getter(&v26, v7, KeyPath, v6);

  swift_release(KeyPath);
  swift_release(v6);
  v8 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = (char *)*(id *)(v26 + 8 * v4 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_22;
  }
  v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v26);
LABEL_5:
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  v1 = &OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType;
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v12 = objc_msgSend(*(id *)(v0 + v2[5]), "unitManager");
  if (!v12)
    goto LABEL_29;
  v13 = v12;
  v14 = objc_msgSend(v12, "unitManager");

  if ((unint64_t)(v11 - 1) < 2)
  {
    v15 = &selRef_minuteUnit;
    goto LABEL_10;
  }
  if (v11)
  {
    v15 = &selRef_countUnit;
LABEL_10:
    v16 = (void *)objc_opt_self(HKUnit);
    goto LABEL_12;
  }
  v15 = &selRef_userActiveEnergyBurnedUnit;
  v16 = v14;
LABEL_12:
  v2 = (int *)objc_msgSend(v16, *v15);

  v17 = swift_getKeyPath(&unk_10062BC90);
  v18 = swift_getKeyPath(&unk_10062BCB8);
  v19 = v7;
  static Published.subscript.getter(&v26, v19, v17, v18);

  swift_release(v17);
  swift_release(v18);
  v0 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v20 = (char *)*(id *)(v26 + 8 * v4 + 32);
      swift_bridgeObjectRelease(v0);
      v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

      switch(v21)
      {
        case 0:
          goto LABEL_16;
        case 1:
          goto LABEL_23;
        case 3:
          goto LABEL_25;
        default:
          goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x1001CF5A4);
  }
LABEL_22:
  v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0);
  swift_bridgeObjectRelease(v0);
  v25 = *(_QWORD *)(v24 + *v1);
  swift_unknownObjectRelease(v24);
  switch(v25)
  {
    case 0:
LABEL_16:
      IsCalorieUnit = FIUIHKUnitIsCalorieUnit(v2);

      if (IsCalorieUnit)
        result = 9990;
      else
        result = 39980;
      break;
    case 1:
LABEL_23:

      result = 1000;
      break;
    case 3:
LABEL_25:

      result = 16;
      break;
    default:
LABEL_24:

      result = 90;
      break;
  }
  return result;
}

void sub_1001CF5C4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  _QWORD *v73;
  void (*v74)(char *, _QWORD, uint64_t, __n128);
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;

  v124 = a2;
  v125 = a3;
  v129 = a4;
  v5 = sub_100047110(&qword_100825FA8);
  __chkstk_darwin(v5);
  v126 = (uint64_t *)((char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100047110(&qword_100825FB0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v112 - v11;
  v117 = sub_100047110(&qword_100825FB8);
  v13 = __chkstk_darwin(v117);
  v119 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v115 = (char *)&v112 - v15;
  v16 = type metadata accessor for DynamicTypeSize(0);
  v132 = *(_QWORD **)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v131 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v130 = (char *)&v112 - v19;
  v118 = sub_100047110(&qword_100825FC0);
  v20 = __chkstk_darwin(v118);
  v113 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v116 = (uint64_t)&v112 - v22;
  v23 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v23);
  v25 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100047110(&qword_100825FC8);
  v121 = *(_QWORD *)(v123 - 8);
  v26 = __chkstk_darwin(v123);
  v122 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v114 = (char *)&v112 - v29;
  __chkstk_darwin(v28);
  v120 = (char *)&v112 - v30;
  v31 = type metadata accessor for ScheduleDayRowView(0);
  v32 = *(void **)(a1 + *(int *)(v31 + 28) + 8);
  v33 = a1;
  v34 = *(_QWORD *)(a1 + *(int *)(v31 + 24));
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v36 = swift_getKeyPath(&unk_10062BCB8);
  v37 = v32;
  static Published.subscript.getter(&v133, v37, KeyPath, v36);

  swift_release(KeyPath);
  swift_release(v36);
  v38 = v133;
  v127 = v12;
  v128 = v10;
  if ((v133 & 0xC000000000000001) == 0)
  {
    if ((v34 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v34 < *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v39 = *(id *)(v133 + 8 * v34 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v133);
LABEL_5:
  v40 = v39;
  swift_bridgeObjectRelease(v38);
  v112 = v33;
  sub_10035872C((uint64_t)v40);
  v42 = v41;
  v44 = v43;

  v133 = v42;
  v134 = v44;
  v45 = sub_100038CA0();
  v46 = Text.init<A>(_:)(&v133, &type metadata for String, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = enum case for Font.Design.rounded(_:);
  v54 = type metadata accessor for Font.Design(0);
  v55 = *(_QWORD *)(v54 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v25, v53, v54);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v25, 0, 1, v54);
  v56 = Text.fontDesign(_:)(v25, v46, v48, v52, v50);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  sub_1000E4458(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  sub_10001BE90((uint64_t)v25, &qword_10081F2F8);
  v64 = static Font.body.getter(v63);
  v66 = Text.font(_:)(v64, v56, v58, v62, v60, v65);
  v68 = v67;
  LOBYTE(v50) = v69;
  v71 = v70;
  swift_release(v64);
  sub_1000E4458(v56, v58, v62);
  v72 = swift_bridgeObjectRelease(v60);
  v133 = v66;
  v134 = v68;
  v135 = v50 & 1;
  v136 = v71;
  v73 = v132;
  v74 = (void (*)(char *, _QWORD, uint64_t, __n128))v132[13];
  v75 = v130;
  v74(v130, enum case for DynamicTypeSize.xSmall(_:), v16, v72);
  v76 = v131;
  ((void (*)(char *, _QWORD, uint64_t))v74)(v131, enum case for DynamicTypeSize.xLarge(_:), v16);
  v77 = sub_10014E224();
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v75, v76, v16, v77) & 1) != 0)
  {
    v78 = v117;
    v79 = v115;
    v80 = &v115[*(int *)(v117 + 48)];
    v81 = (void (*)(char *, char *, uint64_t))v73[4];
    v81(v115, v75, v16);
    v81(v80, v76, v16);
    v82 = v119;
    v83 = &v119[*(int *)(v78 + 48)];
    v84 = (void (*)(char *, char *, uint64_t))v73[2];
    v84(v119, v79, v16);
    v84(v83, v80, v16);
    v85 = (uint64_t)v113;
    v81(v113, v82, v16);
    v86 = (void (*)(char *, uint64_t))v73[1];
    v86(v83, v16);
    v87 = &v82[*(int *)(v78 + 48)];
    v81(v82, v79, v16);
    v81(v87, v80, v16);
    v88 = v118;
    v81((char *)(v85 + *(int *)(v118 + 36)), v87, v16);
    v86(v82, v16);
    v89 = v116;
    sub_100045AD4(v85, v116, &qword_100825FC0);
    v90 = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v91 = v114;
    View.dynamicTypeSize<A>(_:)(v89, &type metadata for Text, v88, &protocol witness table for Text, v90);
    sub_10001BE90(v89, &qword_100825FC0);
    sub_1000E4458(v133, v134, v135);
    v92 = swift_bridgeObjectRelease(v136);
    v94 = v120;
    v93 = v121;
    v95 = v123;
    v96 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v121 + 32))(v120, v91, v123, v92);
    v97 = static VerticalAlignment.center.getter(v96);
    v98 = (uint64_t)v126;
    *v126 = v97;
    *(_QWORD *)(v98 + 8) = 0;
    *(_BYTE *)(v98 + 16) = 1;
    v99 = sub_100047110(&qword_100825FD8);
    sub_1001CFDC4(v112, v124, v125, v98 + *(int *)(v99 + 44));
    v102 = static Alignment.trailing.getter(v100, v101);
    v103 = (uint64_t)v128;
    sub_1003EB39C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v128, 0.0, 1, 0.0, 1, v102, v104);
    sub_10001BE90(v98, &qword_100825FA8);
    v105 = (uint64_t)v127;
    sub_100045AD4(v103, (uint64_t)v127, &qword_100825FB0);
    v106 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    v107 = v122;
    v106(v122, v94, v95);
    sub_100021CC0(v105, v103, &qword_100825FB0);
    v108 = v129;
    v106(v129, v107, v95);
    v109 = sub_100047110(&qword_100825FE0);
    v110 = &v108[*(int *)(v109 + 48)];
    *(_QWORD *)v110 = 0;
    v110[8] = 1;
    sub_100021CC0(v103, (uint64_t)&v108[*(int *)(v109 + 64)], &qword_100825FB0);
    sub_10001BE90(v105, &qword_100825FB0);
    v111 = *(void (**)(char *, uint64_t))(v93 + 8);
    v111(v94, v95);
    sub_10001BE90(v103, &qword_100825FB0);
    v111(v107, v95);
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_1001CFDC4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)();
  uint64_t v19;
  void (**v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t ObjCClassFromMetadata;
  id v70;
  NSString v71;
  NSString v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  id v107;
  NSString v108;
  NSString v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t *v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _OWORD v148[2];

  v141 = a3;
  v146 = a2;
  v132 = a4;
  v5 = sub_100047110(&qword_100825FE8);
  v6 = __chkstk_darwin(v5);
  v133 = (uint64_t)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v140 = (uint64_t *)((char *)&v122 - v9);
  __chkstk_darwin(v8);
  v142 = (char *)&v122 - v10;
  v11 = type metadata accessor for ScheduleDayRowView(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)sub_100047110(&qword_100825FF0);
  v16 = __chkstk_darwin(v15);
  v18 = (void (**)())((char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v20 = (void (**)())((char *)&v122 - v19);
  v143 = sub_100047110(&qword_100825FF8);
  v21 = __chkstk_darwin(v143);
  v126 = (uint64_t)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v122 - v23;
  v144 = sub_100047110(&qword_100826000);
  v25 = __chkstk_darwin(v144);
  v128 = (uint64_t)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v122 - v27;
  v29 = sub_100047110(&qword_100826008);
  v30 = __chkstk_darwin(v29);
  v130 = (uint64_t)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v131 = (uint64_t)&v122 - v33;
  v34 = __chkstk_darwin(v32);
  v127 = (char *)&v122 - v35;
  v36 = __chkstk_darwin(v34);
  v129 = (uint64_t)&v122 - v37;
  v38 = __chkstk_darwin(v36);
  v134 = (char *)&v122 - v39;
  __chkstk_darwin(v38);
  v145 = (uint64_t)&v122 - v40;
  sub_10004F8C8(a1, (uint64_t)v14, type metadata accessor for ScheduleDayRowView);
  v41 = *(unsigned __int8 *)(v12 + 80);
  v42 = (v41 + 16) & ~v41;
  v136 = v41 | 7;
  v137 = v42 + v13;
  v43 = swift_allocObject(&unk_10078D048, v42 + v13, v41 | 7);
  v138 = v42;
  v139 = v14;
  sub_1001D2B0C((uint64_t)v14, v43 + v42);
  v44 = v15[10];
  v147 = 0;
  v135 = sub_100047110(&qword_100826010);
  State.init(wrappedValue:)(v148, &v147, v135);
  *(_OWORD *)((char *)v20 + v44) = v148[0];
  v45 = v15[11];
  v147 = 1;
  State.init(wrappedValue:)(v148, &v147, &type metadata for Int);
  *(_OWORD *)((char *)v20 + v45) = v148[0];
  *v20 = sub_1001D2B50;
  v20[1] = (void (*)())v43;
  sub_1001D12DC(0xD000000000000011, 0x800000010068EBA0, (uint64_t)v20 + v15[9]);
  v46 = sub_1001D0CC4();
  v122 = v11;
  if ((void *)v46 == v146)
  {
    v48 = static Color.gray.getter(v47);
    goto LABEL_9;
  }
  v49 = *(void **)(a1 + *(int *)(v11 + 28) + 8);
  v50 = *(_QWORD *)(a1 + *(int *)(v11 + 24));
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v52 = swift_getKeyPath(&unk_10062BCB8);
  v53 = v49;
  static Published.subscript.getter(v148, v53, KeyPath, v52);

  swift_release(KeyPath);
  swift_release(v52);
  v54 = *(_QWORD *)&v148[0];
  if ((*(_QWORD *)&v148[0] & 0xC000000000000001) != 0)
  {
    v55 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, *(_QWORD *)&v148[0]);
    goto LABEL_8;
  }
  if ((v50 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v50 >= *(_QWORD *)((*(_QWORD *)&v148[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    v94 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v20);
    goto LABEL_15;
  }
  v55 = (char *)*(id *)(*(_QWORD *)&v148[0] + 8 * v50 + 32);
LABEL_8:
  v56 = v55;
  swift_bridgeObjectRelease(v54);
  v57 = *(_QWORD *)&v56[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  sub_1002C25B4(v57);
LABEL_9:
  v58 = v48;
  v59 = swift_getKeyPath(&unk_10062BCD8);
  *(_QWORD *)&v148[0] = v58;
  swift_retain(v58);
  v60 = AnyShapeStyle.init<A>(_:)(v148, &type metadata for Color, &protocol witness table for Color);
  sub_100021CC0((uint64_t)v20, (uint64_t)v24, &qword_100825FF0);
  swift_release(v58);
  v61 = (uint64_t *)&v24[*(int *)(v143 + 36)];
  *v61 = v59;
  v61[1] = v60;
  sub_10001BE90((uint64_t)v20, &qword_100825FF0);
  v62 = sub_1001D0CC4();
  v63 = v146;
  LOBYTE(v59) = v62 == (_QWORD)v146;
  v64 = swift_getKeyPath(&unk_10062BD08);
  v65 = swift_allocObject(&unk_10078D070, 17, 7);
  *(_BYTE *)(v65 + 16) = v59;
  sub_100021CC0((uint64_t)v24, (uint64_t)v28, &qword_100825FF8);
  v66 = v144;
  v67 = (uint64_t *)&v28[*(int *)(v144 + 36)];
  *v67 = v64;
  v67[1] = (uint64_t)sub_1000F7088;
  v67[2] = v65;
  sub_10001BE90((uint64_t)v24, &qword_100825FF8);
  v68 = sub_1001D2B78();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v68);
  v124 = (id)objc_opt_self(NSBundle);
  v125 = ObjCClassFromMetadata;
  v70 = objc_msgSend(v124, "bundleForClass:", ObjCClassFromMetadata);
  v71 = String._bridgeToObjectiveC()();
  v72 = String._bridgeToObjectiveC()();
  v73 = objc_msgSend(v70, "localizedStringForKey:value:table:", v71, 0, v72);

  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  v76 = v75;

  *(_QWORD *)&v148[0] = v74;
  *((_QWORD *)&v148[0] + 1) = v76;
  v77 = sub_1001D2BB4();
  v24 = (char *)sub_100038CA0();
  v78 = (uint64_t)v134;
  v123 = v77;
  View.accessibilityLabel<A>(_:)(v148, v66, &type metadata for String, v77, v24);
  swift_bridgeObjectRelease(v76);
  sub_10001BE90((uint64_t)v28, &qword_100826000);
  v79 = sub_100045AD4(v78, v145, &qword_100826008);
  v80 = static Alignment.center.getter(v79);
  v81 = (uint64_t)v140;
  *v140 = v80;
  *(_QWORD *)(v81 + 8) = v82;
  v83 = sub_100047110(&qword_100826040);
  sub_1001D0FC8(a1, v63, v141, (char *)(v81 + *(int *)(v83 + 44)));
  v28 = v142;
  sub_100045AD4(v81, (uint64_t)v142, &qword_100825FE8);
  v84 = (uint64_t)v139;
  sub_10004F8C8(a1, (uint64_t)v139, type metadata accessor for ScheduleDayRowView);
  v85 = swift_allocObject(&unk_10078D098, v137, v136);
  sub_1001D2B0C(v84, v85 + v138);
  v86 = v15[10];
  v147 = 0;
  State.init(wrappedValue:)(v148, &v147, v135);
  *(_OWORD *)((char *)v18 + v86) = v148[0];
  v87 = v15[11];
  v147 = 1;
  State.init(wrappedValue:)(v148, &v147, &type metadata for Int);
  *(_OWORD *)((char *)v18 + v87) = v148[0];
  *v18 = sub_1001D2D70;
  v18[1] = (void (*)())v85;
  sub_1001D12DC(0xD000000000000010, 0x800000010068EB80, (uint64_t)v18 + v15[9]);
  if ((void *)sub_1001CF2C0() == v63)
  {
    v89 = static Color.gray.getter(v88);
LABEL_16:
    v97 = v89;
    v98 = swift_getKeyPath(&unk_10062BCD8);
    *(_QWORD *)&v148[0] = v97;
    swift_retain(v97);
    v99 = AnyShapeStyle.init<A>(_:)(v148, &type metadata for Color, &protocol witness table for Color);
    v100 = v126;
    sub_100021CC0((uint64_t)v18, v126, &qword_100825FF0);
    swift_release(v97);
    v101 = (uint64_t *)(v100 + *(int *)(v143 + 36));
    *v101 = v98;
    v101[1] = v99;
    sub_10001BE90((uint64_t)v18, &qword_100825FF0);
    LOBYTE(v98) = sub_1001CF2C0() == (_QWORD)v146;
    v102 = swift_getKeyPath(&unk_10062BD08);
    v103 = swift_allocObject(&unk_10078D0C0, 17, 7);
    *(_BYTE *)(v103 + 16) = v98;
    v104 = v128;
    sub_100021CC0(v100, v128, &qword_100825FF8);
    v105 = v144;
    v106 = (uint64_t *)(v104 + *(int *)(v144 + 36));
    *v106 = v102;
    v106[1] = (uint64_t)sub_1001D2FA4;
    v106[2] = v103;
    sub_10001BE90(v100, &qword_100825FF8);
    v107 = objc_msgSend(v124, "bundleForClass:", v125);
    v108 = String._bridgeToObjectiveC()();
    v109 = String._bridgeToObjectiveC()();
    v110 = objc_msgSend(v107, "localizedStringForKey:value:table:", v108, 0, v109);

    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
    v113 = v112;

    *(_QWORD *)&v148[0] = v111;
    *((_QWORD *)&v148[0] + 1) = v113;
    v114 = (uint64_t)v127;
    View.accessibilityLabel<A>(_:)(v148, v105, &type metadata for String, v123, v24);
    swift_bridgeObjectRelease(v113);
    sub_10001BE90(v104, &qword_100826000);
    v115 = v129;
    sub_100045AD4(v114, v129, &qword_100826008);
    v116 = v145;
    v117 = v131;
    sub_100021CC0(v145, v131, &qword_100826008);
    v118 = v133;
    sub_100021CC0((uint64_t)v28, v133, &qword_100825FE8);
    v119 = v130;
    sub_100021CC0(v115, v130, &qword_100826008);
    v120 = v132;
    sub_100021CC0(v117, v132, &qword_100826008);
    v121 = sub_100047110(&qword_100826048);
    sub_100021CC0(v118, v120 + *(int *)(v121 + 48), &qword_100825FE8);
    sub_100021CC0(v119, v120 + *(int *)(v121 + 64), &qword_100826008);
    sub_10001BE90(v115, &qword_100826008);
    sub_10001BE90((uint64_t)v28, &qword_100825FE8);
    sub_10001BE90(v116, &qword_100826008);
    sub_10001BE90(v119, &qword_100826008);
    sub_10001BE90(v118, &qword_100825FE8);
    sub_10001BE90(v117, &qword_100826008);
    return;
  }
  v90 = *(void **)(a1 + *(int *)(v122 + 28) + 8);
  v50 = *(_QWORD *)(a1 + *(int *)(v122 + 24));
  v91 = swift_getKeyPath(&unk_10062BC90);
  v92 = swift_getKeyPath(&unk_10062BCB8);
  v93 = v90;
  static Published.subscript.getter(v148, v93, v91, v92);

  swift_release(v91);
  swift_release(v92);
  v20 = *(void (***)())&v148[0];
  if ((*(_QWORD *)&v148[0] & 0xC000000000000001) != 0)
    goto LABEL_20;
  if ((v50 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v50 < *(_QWORD *)((*(_QWORD *)&v148[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v94 = (char *)*(id *)(*(_QWORD *)&v148[0] + 8 * v50 + 32);
LABEL_15:
    v95 = v94;
    swift_bridgeObjectRelease(v20);
    v96 = *(_QWORD *)&v95[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

    sub_1002C25B4(v96);
    goto LABEL_16;
  }
  __break(1u);
}

void sub_1001D09B8(char a1)
{
  uint64_t v1;
  int *v3;
  void *v4;
  unint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  char **v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;

  v3 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v4 = *(void **)(v1 + v3[7] + 8);
  v5 = *(_QWORD *)(v1 + v3[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v7 = swift_getKeyPath(&unk_10062BCB8);
  v8 = v4;
  static Published.subscript.getter(&v30, v8, KeyPath, v7);

  swift_release(KeyPath);
  swift_release(v7);
  v9 = (id)v30;
  if ((v30 & 0xC000000000000001) == 0)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v5 < *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v10 = (char *)*(id *)(v30 + 8 * v5 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_31;
  }
  v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v30);
LABEL_5:
  v11 = v10;
  swift_bridgeObjectRelease(v9);
  v9 = *(id *)&v11[OBJC_IVAR____TtC10FitnessApp7GoalDay_goal];

  v12 = swift_getKeyPath(&unk_10062BC90);
  v13 = swift_getKeyPath(&unk_10062BCB8);
  v14 = v8;
  static Published.subscript.getter(&v30, v14, v12, v13);

  swift_release(v12);
  swift_release(v13);
  v8 = (id)v30;
  if ((v30 & 0xC000000000000001) == 0)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v5 < *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v15 = (char *)*(id *)(v30 + 8 * v5 + 32);
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_31:
  v15 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v8);
LABEL_9:
  v16 = v15;
  swift_bridgeObjectRelease(v8);
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v18 = objc_msgSend(*(id *)(v1 + v3[5]), "unitManager");
  if (!v18)
  {
LABEL_38:
    __break(1u);
    return;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "unitManager");

  if ((unint64_t)(v17 - 1) < 2)
  {
    v21 = &selRef_minuteUnit;
    goto LABEL_14;
  }
  if (v17)
  {
    v21 = &selRef_countUnit;
LABEL_14:
    v22 = (void *)objc_opt_self(HKUnit);
    goto LABEL_16;
  }
  v21 = &selRef_userActiveEnergyBurnedUnit;
  v22 = v20;
LABEL_16:
  v23 = objc_msgSend(v22, *v21);

  objc_msgSend(v9, "doubleValueForUnit:", v23);
  v25 = v24;

  v26 = floor(v25);
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v27 = (uint64_t)v26;
  v28 = sub_1001D2344();
  if ((a1 & 1) == 0)
    goto LABEL_23;
  v29 = (void *)(v27 + v28);
  if (__OFADD__(v27, v28))
  {
    __break(1u);
LABEL_23:
    v29 = (void *)(v27 - v28);
    if (!__OFSUB__(v27, v28))
      goto LABEL_24;
    goto LABEL_37;
  }
LABEL_24:
  if ((uint64_t)v29 >= sub_1001D0CC4() && sub_1001CF2C0() >= (uint64_t)v29)
    sub_1001D2648(v29);
}

uint64_t sub_1001D0CC4()
{
  uint64_t v0;
  uint64_t *v1;
  int *v2;
  void *v3;
  unint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  int IsCalorieUnit;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v3 = *(void **)(v0 + v2[7] + 8);
  v4 = *(_QWORD *)(v0 + v2[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v6 = swift_getKeyPath(&unk_10062BCB8);
  v7 = v3;
  static Published.subscript.getter(&v26, v7, KeyPath, v6);

  swift_release(KeyPath);
  swift_release(v6);
  v8 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = (char *)*(id *)(v26 + 8 * v4 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_22;
  }
  v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v26);
LABEL_5:
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  v1 = &OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType;
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v12 = objc_msgSend(*(id *)(v0 + v2[5]), "unitManager");
  if (!v12)
    goto LABEL_29;
  v13 = v12;
  v14 = objc_msgSend(v12, "unitManager");

  if ((unint64_t)(v11 - 1) < 2)
  {
    v15 = &selRef_minuteUnit;
    goto LABEL_10;
  }
  if (v11)
  {
    v15 = &selRef_countUnit;
LABEL_10:
    v16 = (void *)objc_opt_self(HKUnit);
    goto LABEL_12;
  }
  v15 = &selRef_userActiveEnergyBurnedUnit;
  v16 = v14;
LABEL_12:
  v2 = (int *)objc_msgSend(v16, *v15);

  v17 = swift_getKeyPath(&unk_10062BC90);
  v18 = swift_getKeyPath(&unk_10062BCB8);
  v19 = v7;
  static Published.subscript.getter(&v26, v19, v17, v18);

  swift_release(v17);
  swift_release(v18);
  v0 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v20 = (char *)*(id *)(v26 + 8 * v4 + 32);
      swift_bridgeObjectRelease(v0);
      v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

      switch(v21)
      {
        case 0:
          goto LABEL_16;
        case 1:
          goto LABEL_23;
        case 3:
          goto LABEL_25;
        default:
          goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x1001D0FA8);
  }
LABEL_22:
  v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0);
  swift_bridgeObjectRelease(v0);
  v25 = *(_QWORD *)(v24 + *v1);
  swift_unknownObjectRelease(v24);
  switch(v25)
  {
    case 0:
LABEL_16:
      IsCalorieUnit = FIUIHKUnitIsCalorieUnit(v2);

      if (IsCalorieUnit)
        result = 10;
      else
        result = 20;
      break;
    case 1:
LABEL_23:

      result = 10;
      break;
    case 3:
LABEL_25:

      result = 6;
      break;
    default:
LABEL_24:

      result = 5;
      break;
  }
  return result;
}

uint64_t sub_1001D0FC8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;

  v42 = a3;
  v43 = a4;
  v41 = sub_100047110(&qword_100826060);
  v6 = __chkstk_darwin(v41);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v40 = (uint64_t)&v36 - v9;
  v10 = type metadata accessor for AccessibilityChildBehavior(0);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100826068);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100826070);
  v37 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v36 - v21;
  *(_QWORD *)v15 = static VerticalAlignment.firstTextBaseline.getter(v20);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v23 = sub_100047110(&qword_100826078);
  v24 = sub_1001D1614(a2, a1, &v15[*(int *)(v23 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v24);
  v25 = sub_100028384(&qword_100826080, &qword_100826068, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v12, v13, v25);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  sub_10001BE90((uint64_t)v15, &qword_100826068);
  v26 = v37;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v22, v19, v16);
  *(_QWORD *)v15 = static VerticalAlignment.firstTextBaseline.getter(v27);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  sub_1001D1614(v42, a1, &v15[*(int *)(v23 + 44)]);
  sub_100021CC0((uint64_t)v15, (uint64_t)v8, &qword_100826068);
  *(_QWORD *)&v8[*(int *)(v41 + 36)] = 0;
  sub_10001BE90((uint64_t)v15, &qword_100826068);
  v28 = v40;
  sub_100045AD4((uint64_t)v8, v40, &qword_100826060);
  v29 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v30 = v26;
  v29(v19, v22, v16);
  v31 = v28;
  sub_100021CC0(v28, (uint64_t)v8, &qword_100826060);
  v32 = v43;
  v29(v43, v19, v16);
  v33 = sub_100047110(&qword_100826088);
  sub_100021CC0((uint64_t)v8, (uint64_t)&v32[*(int *)(v33 + 48)], &qword_100826060);
  sub_10001BE90(v31, &qword_100826060);
  v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  v34(v22, v16);
  sub_10001BE90((uint64_t)v8, &qword_100826060);
  return ((uint64_t (*)(char *, uint64_t))v34)(v19, v16);
}

void sub_1001D12DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t KeyPath;
  void (*v26)(char *, _QWORD, uint64_t);
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v44 = a3;
  v5 = sub_100047110(&qword_100825FB8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v42 - v16;
  v46 = sub_100047110(&qword_100825FC0);
  v18 = __chkstk_darwin(v46);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v45 = (uint64_t)&v42 - v21;
  v22 = Image.init(systemName:)(a1, a2);
  v24 = static Font.title2.getter(v23);
  KeyPath = swift_getKeyPath(&unk_10062BD38);
  v47 = v22;
  v48 = KeyPath;
  v49 = v24;
  v26 = (void (*)(char *, _QWORD, uint64_t))v12[13];
  v26(v17, enum case for DynamicTypeSize.xSmall(_:), v11);
  v26(v15, enum case for DynamicTypeSize.xLarge(_:), v11);
  v27 = sub_10014E224();
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v17, v15, v11, v27) & 1) != 0)
  {
    v43 = v20;
    v28 = v10;
    v29 = v5;
    v30 = &v28[*(int *)(v5 + 48)];
    v31 = (void (*)(char *, char *, uint64_t))v12[4];
    v31(v28, v17, v11);
    v31(v30, v15, v11);
    v32 = &v8[*(int *)(v29 + 48)];
    v33 = (void (*)(char *, char *, uint64_t))v12[2];
    v33(v8, v28, v11);
    v33(v32, v30, v11);
    v34 = (uint64_t)v43;
    v31(v43, v8, v11);
    v35 = (void (*)(char *, uint64_t))v12[1];
    v35(v32, v11);
    v36 = &v8[*(int *)(v29 + 48)];
    v31(v8, v28, v11);
    v31(v36, v30, v11);
    v37 = v46;
    v31((char *)(v34 + *(int *)(v46 + 36)), v36, v11);
    v35(v8, v11);
    v38 = v45;
    sub_100045AD4(v34, v45, &qword_100825FC0);
    v39 = sub_100047110(&qword_100826050);
    v40 = sub_1001D2DD0();
    v41 = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    View.dynamicTypeSize<A>(_:)(v38, v39, v37, v40, v41);
    sub_10001BE90(v38, &qword_100825FC0);
    swift_release(v47);
    swift_release(v48);
    swift_release(v49);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001D1614@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t);
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __n128 v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  __n128 v65;
  unsigned int v66;
  void (*v67)(char *, _QWORD, uint64_t, __n128);
  char *v68;
  unsigned int v69;
  char *v70;
  unint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t OpaqueTypeConformance2;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  __n128 v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  __n128 v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  char *v136;
  void (*v137)(char *, _QWORD, uint64_t);
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  char *v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  _QWORD v163[2];
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  void (*v166)(char *, uint64_t);
  unsigned int v167;
  void (*v168)(char *, _QWORD, uint64_t);
  unsigned int v169;
  unint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  void (*v174)(char *, _QWORD, uint64_t);
  void (*v175)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;

  v181 = a2;
  v173 = a3;
  v191 = sub_100047110(&qword_100825FB8);
  v4 = __chkstk_darwin(v191);
  v193 = (char *)v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v188 = (char *)v163 - v6;
  v7 = type metadata accessor for DynamicTypeSize(0);
  v182 = *(void (**)(char *, char *, uint64_t))(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v196 = (char *)v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v195 = (char *)v163 - v10;
  v190 = sub_100047110(&qword_100825FC0);
  v11 = __chkstk_darwin(v190);
  v183 = (char *)v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v185 = (uint64_t)v163 - v13;
  v14 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v14);
  v16 = (char *)v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100047110(&qword_100825FC8);
  v179 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100047110(&qword_100826090);
  v192 = *(_QWORD *)(v194 - 8);
  v18 = __chkstk_darwin(v194);
  v172 = (char *)v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v171 = (char *)v163 - v21;
  v22 = __chkstk_darwin(v20);
  v189 = (char *)v163 - v23;
  __chkstk_darwin(v22);
  v187 = (char *)v163 - v24;
  v197 = a1;
  v197 = (void *)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v198 = v25;
  v178 = sub_100038CA0();
  v26 = Text.init<A>(_:)(&v197, &type metadata for String, v178);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = enum case for Font.Design.rounded(_:);
  v34 = type metadata accessor for Font.Design(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(void (**)(char *, _QWORD, uint64_t))(v35 + 104);
  v176 = v33;
  v174 = v36;
  v36(v16, v33, v34);
  v37 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56);
  v177 = v34;
  v175 = v37;
  v37((uint64_t)v16, 0, 1, v34);
  v38 = Text.fontDesign(_:)(v16, v26, v28, v32, v30);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  sub_1000E4458(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  v180 = v16;
  sub_10001BE90((uint64_t)v16, &qword_10081F2F8);
  v46 = static Font.Weight.bold.getter(v45);
  v47 = Text.fontWeight(_:)(*(_QWORD *)&v46, 0, v38, v40, v44, v42);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  sub_1000E4458(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  v55 = static Font.title.getter(v54);
  v57 = (void *)Text.font(_:)(v55, v47, v49, v53, v51, v56);
  v59 = v58;
  LOBYTE(v40) = v60;
  v62 = v61;
  swift_release(v55);
  sub_1000E4458(v47, v49, v53);
  v63 = v51;
  v64 = v182;
  v65 = swift_bridgeObjectRelease(v63);
  v197 = v57;
  v198 = v59;
  LOBYTE(v199) = v40 & 1;
  v200 = v62;
  v66 = enum case for DynamicTypeSize.xSmall(_:);
  v67 = (void (*)(char *, _QWORD, uint64_t, __n128))*((_QWORD *)v64 + 13);
  v68 = v195;
  v67(v195, enum case for DynamicTypeSize.xSmall(_:), v7, v65);
  v69 = enum case for DynamicTypeSize.xLarge(_:);
  v70 = v196;
  ((void (*)(char *, _QWORD, uint64_t))v67)(v196, enum case for DynamicTypeSize.xLarge(_:), v7);
  v71 = sub_10014E224();
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v68, v70, v7, v71);
  if ((result & 1) != 0)
  {
    v169 = v69;
    v73 = v191;
    v74 = *(int *)(v191 + 48);
    v170 = v71;
    v75 = v188;
    v168 = (void (*)(char *, _QWORD, uint64_t))v67;
    v76 = &v188[v74];
    v77 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v64 + 4);
    v77(v188, v195, v7);
    v77(v76, v196, v7);
    v78 = *(int *)(v73 + 48);
    v167 = v66;
    v79 = v193;
    v80 = &v193[v78];
    v81 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v64 + 2);
    v81(v193, v75, v7);
    v165 = v81;
    v81(v80, v76, v7);
    v82 = v183;
    v77(v183, v79, v7);
    v83 = (void (*)(char *, uint64_t))*((_QWORD *)v64 + 1);
    v83(v80, v7);
    v84 = &v79[*(int *)(v73 + 48)];
    v77(v79, v75, v7);
    v77(v84, v76, v7);
    v85 = v190;
    v86 = &v82[*(int *)(v190 + 36)];
    v182 = v77;
    v77(v86, v84, v7);
    v166 = v83;
    v83(v79, v7);
    v87 = (uint64_t)v82;
    v88 = v185;
    sub_100045AD4(v87, v185, &qword_100825FC0);
    v89 = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v90 = v184;
    View.dynamicTypeSize<A>(_:)(v88, &type metadata for Text, v85, &protocol witness table for Text, v89);
    sub_10001BE90(v88, &qword_100825FC0);
    sub_1000E4458((uint64_t)v197, v198, (char)v199);
    swift_bridgeObjectRelease(v200);
    v197 = &type metadata for Text;
    v198 = v85;
    v199 = &protocol witness table for Text;
    v200 = v89;
    v164 = v89;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v92 = v189;
    v93 = v186;
    v163[1] = OpaqueTypeConformance2;
    View.monospacedDigit()(v186);
    v179 = *(_QWORD *)(v179 + 8);
    ((void (*)(char *, uint64_t))v179)(v90, v93);
    v163[0] = *(_QWORD *)(v192 + 32);
    ((void (*)(char *, char *, uint64_t))v163[0])(v187, v92, v194);
    sub_1001D2168();
    v95 = v94;
    v197 = v96;
    v198 = v94;
    v97 = v178;
    v98 = (void *)StringProtocol.localizedUppercase.getter(&type metadata for String, v178);
    v100 = v99;
    swift_bridgeObjectRelease(v95);
    v197 = v98;
    v198 = v100;
    v101 = Text.init<A>(_:)(&v197, &type metadata for String, v97);
    v103 = v102;
    v105 = v104;
    v107 = v106 & 1;
    v108 = (uint64_t)v180;
    v109 = v177;
    v174(v180, v176, v177);
    v175(v108, 0, 1, v109);
    v110 = Text.fontDesign(_:)(v108, v101, v103, v107, v105);
    v112 = v111;
    v114 = v113;
    v116 = v115 & 1;
    sub_1000E4458(v101, v103, v107);
    swift_bridgeObjectRelease(v105);
    sub_10001BE90(v108, &qword_10081F2F8);
    v118 = static Font.Weight.bold.getter(v117);
    v119 = Text.fontWeight(_:)(*(_QWORD *)&v118, 0, v110, v112, v116, v114);
    v121 = v120;
    v123 = v122;
    v125 = v124 & 1;
    sub_1000E4458(v110, v112, v116);
    v126 = swift_bridgeObjectRelease(v114);
    v127 = static Font.title2.getter(v126);
    v129 = (void *)Text.font(_:)(v127, v119, v121, v125, v123, v128);
    v131 = v130;
    LOBYTE(v116) = v132;
    v134 = v133;
    swift_release(v127);
    sub_1000E4458(v119, v121, v125);
    v135 = swift_bridgeObjectRelease(v123);
    v197 = v129;
    v198 = v131;
    LOBYTE(v199) = v116 & 1;
    v200 = v134;
    v136 = v195;
    v137 = v168;
    ((void (*)(char *, _QWORD, uint64_t, __n128))v168)(v195, v167, v7, v135);
    v138 = v196;
    v137(v196, v169, v7);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v136, v138, v7, v170);
    if ((result & 1) != 0)
    {
      v139 = v191;
      v140 = v188;
      v141 = &v188[*(int *)(v191 + 48)];
      v142 = v182;
      v182(v188, v195, v7);
      v142(v141, v196, v7);
      v143 = v193;
      v144 = &v193[*(int *)(v139 + 48)];
      v145 = v165;
      v165(v193, v140, v7);
      v145(v144, v141, v7);
      v146 = (uint64_t)v183;
      v142(v183, v143, v7);
      v147 = v166;
      v166(v144, v7);
      v148 = &v143[*(int *)(v139 + 48)];
      v142(v143, v140, v7);
      v142(v148, v141, v7);
      v149 = v190;
      v142((char *)(v146 + *(int *)(v190 + 36)), v148, v7);
      v147(v143, v7);
      v150 = v185;
      sub_100045AD4(v146, v185, &qword_100825FC0);
      v151 = v184;
      View.dynamicTypeSize<A>(_:)(v150, &type metadata for Text, v149, &protocol witness table for Text, v164);
      sub_10001BE90(v150, &qword_100825FC0);
      sub_1000E4458((uint64_t)v197, v198, (char)v199);
      swift_bridgeObjectRelease(v200);
      v152 = v171;
      v153 = v186;
      View.monospacedDigit()(v186);
      ((void (*)(char *, uint64_t))v179)(v151, v153);
      v154 = v189;
      v155 = v194;
      ((void (*)(char *, char *, uint64_t))v163[0])(v189, v152, v194);
      v156 = v192;
      v157 = *(void (**)(char *, char *, uint64_t))(v192 + 16);
      v158 = v187;
      v157(v152, v187, v155);
      v159 = v172;
      v157(v172, v154, v155);
      v160 = v173;
      v157(v173, v152, v155);
      v161 = sub_100047110(&qword_100826098);
      v157(&v160[*(int *)(v161 + 48)], v159, v155);
      v162 = *(void (**)(char *, uint64_t))(v156 + 8);
      v162(v154, v155);
      v162(v158, v155);
      v162(v159, v155);
      return ((uint64_t (*)(char *, uint64_t))v162)(v152, v155);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001D2168()
{
  uint64_t v0;
  int *v1;
  void *v2;
  unint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v2 = *(void **)(v0 + v1[7] + 8);
  v3 = *(_QWORD *)(v0 + v1[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v5 = swift_getKeyPath(&unk_10062BCB8);
  v6 = v2;
  static Published.subscript.getter(&v12, v6, KeyPath, v5);

  swift_release(KeyPath);
  swift_release(v5);
  v7 = v12;
  if ((v12 & 0xC000000000000001) == 0)
  {
    if ((v3 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v3 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v8 = (char *)*(id *)(v12 + 8 * v3 + 32);
      swift_bridgeObjectRelease(v7);
      v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

      if (v9 >= 2)
      {
        if (v9 != 2)
          goto LABEL_6;
        goto LABEL_12;
      }
LABEL_14:
      v10 = objc_msgSend(*(id *)(v0 + v1[5]), "localizedShortActiveEnergyUnitString");
      if (v10)
        goto LABEL_15;
LABEL_18:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_18;
  }
  v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v12);
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(v11 + OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType);
  swift_unknownObjectRelease(v11);
  if (v9 < 2)
    goto LABEL_14;
  if (v9 == 2)
  {
LABEL_12:
    v10 = objc_msgSend(*(id *)(v0 + v1[5]), "localizedShortBriskMinutesUnitString");
    if (v10)
      goto LABEL_15;
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  if (v9 != 3)
    return;
  v10 = objc_msgSend(*(id *)(v0 + v1[5]), "localizedShortActiveHoursUnitString");
  if (v10)
  {
LABEL_15:
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    return;
  }
  __break(1u);
}

uint64_t sub_1001D2344()
{
  uint64_t v0;
  uint64_t *v1;
  int *v2;
  void *v3;
  unint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  int IsCalorieUnit;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v3 = *(void **)(v0 + v2[7] + 8);
  v4 = *(_QWORD *)(v0 + v2[6]);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v6 = swift_getKeyPath(&unk_10062BCB8);
  v7 = v3;
  static Published.subscript.getter(&v26, v7, KeyPath, v6);

  swift_release(KeyPath);
  swift_release(v6);
  v8 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = (char *)*(id *)(v26 + 8 * v4 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_22;
  }
  v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v26);
LABEL_5:
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  v1 = &OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType;
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v12 = objc_msgSend(*(id *)(v0 + v2[5]), "unitManager");
  if (!v12)
    goto LABEL_29;
  v13 = v12;
  v14 = objc_msgSend(v12, "unitManager");

  if ((unint64_t)(v11 - 1) < 2)
  {
    v15 = &selRef_minuteUnit;
    goto LABEL_10;
  }
  if (v11)
  {
    v15 = &selRef_countUnit;
LABEL_10:
    v16 = (void *)objc_opt_self(HKUnit);
    goto LABEL_12;
  }
  v15 = &selRef_userActiveEnergyBurnedUnit;
  v16 = v14;
LABEL_12:
  v2 = (int *)objc_msgSend(v16, *v15);

  v17 = swift_getKeyPath(&unk_10062BC90);
  v18 = swift_getKeyPath(&unk_10062BCB8);
  v19 = v7;
  static Published.subscript.getter(&v26, v19, v17, v18);

  swift_release(v17);
  swift_release(v18);
  v0 = v26;
  if ((v26 & 0xC000000000000001) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v20 = (char *)*(id *)(v26 + 8 * v4 + 32);
      swift_bridgeObjectRelease(v0);
      v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

      switch(v21)
      {
        case 0:
          goto LABEL_16;
        case 1:
          goto LABEL_23;
        case 2:
          goto LABEL_25;
        default:
          goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x1001D2628);
  }
LABEL_22:
  v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0);
  swift_bridgeObjectRelease(v0);
  v25 = *(_QWORD *)(v24 + *v1);
  swift_unknownObjectRelease(v24);
  switch(v25)
  {
    case 0:
LABEL_16:
      IsCalorieUnit = FIUIHKUnitIsCalorieUnit(v2);

      if (IsCalorieUnit)
        result = 10;
      else
        result = 20;
      break;
    case 1:
LABEL_23:

      result = 10;
      break;
    case 2:
LABEL_25:

      result = 5;
      break;
    default:
LABEL_24:

      result = 1;
      break;
  }
  return result;
}

void sub_1001D2648(id a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  char **v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  objc_class *v31;
  _BYTE *v32;
  id v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void (*v40)(_QWORD *, _QWORD, __n128);
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v45;
  uint64_t v46;
  __n128 v47;
  _QWORD v48[4];
  objc_super v49;

  v3 = (int *)type metadata accessor for ScheduleDayRowView(0);
  v4 = v3[6];
  v5 = v1 + v3[7];
  v6 = *(void **)(v5 + 8);
  v7 = *(_QWORD *)(v1 + v4);
  KeyPath = swift_getKeyPath(&unk_10062BC90);
  v9 = swift_getKeyPath(&unk_10062BCB8);
  v10 = v6;
  static Published.subscript.getter(v48, v10, KeyPath, v9);

  swift_release(KeyPath);
  swift_release(v9);
  v11 = v48[0];
  if ((v48[0] & 0xC000000000000001) == 0)
  {
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(_QWORD *)((v48[0] & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v12 = (char *)*(id *)(v48[0] + 8 * v7 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_30;
  }
  v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v48[0]);
LABEL_5:
  v13 = v12;
  swift_bridgeObjectRelease(v11);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

  v15 = objc_msgSend(*(id *)(v1 + v3[5]), "unitManager");
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "unitManager");

    if ((unint64_t)(v14 - 1) < 2)
    {
      v18 = &selRef_minuteUnit;
    }
    else
    {
      if (!v14)
      {
        v18 = &selRef_userActiveEnergyBurnedUnit;
        v19 = v17;
LABEL_12:
        v20 = objc_msgSend(v19, *v18);

        a1 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v20, (double)(uint64_t)a1);
        v21 = swift_getKeyPath(&unk_10062BC90);
        v22 = swift_getKeyPath(&unk_10062BCB8);
        v3 = (int *)v10;
        static Published.subscript.getter(v48, v3, v21, v22);

        swift_release(v21);
        swift_release(v22);
        v10 = (id)v48[0];
        if ((v48[0] & 0xC000000000000001) == 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v7 < *(_QWORD *)((v48[0] & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v23 = *(id *)(v48[0] + 8 * v7 + 32);
            goto LABEL_16;
          }
          __break(1u);
          goto LABEL_33;
        }
LABEL_30:
        v23 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v10);
LABEL_16:
        v24 = v23;
        swift_bridgeObjectRelease(v10);
        LOBYTE(v14) = v24[OBJC_IVAR____TtC10FitnessApp7GoalDay_day];

        v25 = swift_getKeyPath(&unk_10062BC90);
        v26 = swift_getKeyPath(&unk_10062BCB8);
        v10 = a1;
        v27 = v3;
        static Published.subscript.getter(v48, v27, v25, v26);

        swift_release(v25);
        swift_release(v26);
        a1 = (id)v48[0];
        if ((v48[0] & 0xC000000000000001) == 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v7 < *(_QWORD *)((v48[0] & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v28 = (char *)*(id *)(v48[0] + 8 * v7 + 32);
LABEL_20:
            v29 = v28;
            swift_bridgeObjectRelease(a1);
            v30 = *(_QWORD *)&v29[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType];

            v31 = (objc_class *)type metadata accessor for GoalDay();
            v32 = objc_allocWithZone(v31);
            v32[OBJC_IVAR____TtC10FitnessApp7GoalDay_day] = v14;
            *(_QWORD *)&v32[OBJC_IVAR____TtC10FitnessApp7GoalDay_goal] = v10;
            *(_QWORD *)&v32[OBJC_IVAR____TtC10FitnessApp7GoalDay_goalType] = v30;
            v49.receiver = v32;
            v49.super_class = v31;
            v33 = objc_msgSendSuper2(&v49, "init");
            v34 = *(void **)(v5 + 8);
            v35 = *(_QWORD *)(v1 + v4);
            v36 = swift_getKeyPath(&unk_10062BC90);
            v37 = swift_getKeyPath(&unk_10062BCB8);
            v38 = v34;
            v39 = v33;
            v40 = (void (*)(_QWORD *, _QWORD, __n128))static Published.subscript.modify(v48, v38, v36, v37);
            v42 = v41;
            v43 = *v41;
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v41);
            *v42 = v43;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v43 < 0 || (v43 & 0x4000000000000000) != 0)
            {
              v43 = sub_1004DEE2C(v43);
              *v42 = v43;
            }
            if ((v35 & 0x8000000000000000) == 0)
            {
              if (v35 < *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                v45 = *(void **)((v43 & 0xFFFFFFFFFFFFFF8) + 8 * v35 + 0x20);
                *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 8 * v35 + 0x20) = v39;

                v47 = specialized Array._endMutation()(v46);
                v40(v48, 0, v47);

                swift_release(v36);
                swift_release(v37);
                return;
              }
              goto LABEL_37;
            }
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          __break(1u);
          goto LABEL_36;
        }
LABEL_33:
        v28 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        goto LABEL_20;
      }
      v18 = &selRef_countUnit;
    }
    v19 = (void *)objc_opt_self(HKUnit);
    goto LABEL_12;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1001D2ACC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D2B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScheduleDayRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001D2B50()
{
  sub_1001D2D78(0);
}

uint64_t sub_1001D2B68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1001D2B78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F6D8;
  if (!qword_10081F6D8)
  {
    v1 = objc_opt_self(CHASActivitySetupViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10081F6D8);
  }
  return result;
}

unint64_t sub_1001D2BB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826018;
  if (!qword_100826018)
  {
    v1 = sub_100007050(&qword_100826000);
    sub_1001D2C38();
    sub_100028384(&qword_10081F7E0, &qword_10081F7E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826018);
  }
  return result;
}

unint64_t sub_1001D2C38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826020;
  if (!qword_100826020)
  {
    v1 = sub_100007050(&qword_100825FF8);
    sub_100028384(&qword_100826028, &qword_100825FF0, (uint64_t)&unk_100640110);
    sub_100028384(&qword_100826030, &qword_100826038, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826020);
  }
  return result;
}

uint64_t sub_1001D2CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ScheduleDayRowView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);

  return swift_deallocObject(v0, v5, v6);
}

void sub_1001D2D70()
{
  sub_1001D2D78(1);
}

void sub_1001D2D78(char a1)
{
  type metadata accessor for ScheduleDayRowView(0);
  sub_1001D09B8(a1);
}

uint64_t sub_1001D2DB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1001D2DD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826058;
  if (!qword_100826058)
  {
    v1 = sub_100007050(&qword_100826050);
    sub_100028384(&qword_100823850, &qword_100823858, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826058);
  }
  return result;
}

unint64_t sub_1001D2E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008260A0;
  if (!qword_1008260A0)
  {
    v1 = sub_100007050(&qword_100825F90);
    sub_1000E0A18(&qword_1008260A8, &qword_100825F88, (void (*)(void))sub_1001D2EFC);
    sub_100028384(&qword_1008260C8, &qword_100825FA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008260A0);
  }
  return result;
}

uint64_t sub_1001D2EFC()
{
  return sub_1000E0A18(&qword_1008260B0, &qword_100825F80, (void (*)(void))sub_1001D2F20);
}

unint64_t sub_1001D2F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008260B8;
  if (!qword_1008260B8)
  {
    v1 = sub_100007050(&qword_100825F78);
    sub_100028384(&qword_1008260C0, &qword_100825F70, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008260B8);
  }
  return result;
}

double sub_1001D3004()
{
  uint64_t v0;
  double v1;
  double v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  double result;
  CGRect v21;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer), "frame");
  v1 = CGRectGetWidth(v21) / 7.0;
  if (qword_10081DD70 != -1)
    swift_once(&qword_10081DD70, sub_1000071BC);
  v2 = UIRoundToScale(v1, *(double *)&qword_10086AA00);
  sub_10012185C(0, 7, 0);
  v4 = _swiftEmptyArrayStorage[2];
  v3 = _swiftEmptyArrayStorage[3];
  v5 = v4 + 1;
  if (v4 >= v3 >> 1)
    sub_10012185C(v3 > 1, v4 + 1, 1);
  _swiftEmptyArrayStorage[2] = v5;
  *(double *)&_swiftEmptyArrayStorage[v4 + 4] = v2 * 0.0 + 2.0;
  v6 = _swiftEmptyArrayStorage[3];
  v7 = v4 + 2;
  if (v5 >= v6 >> 1)
    sub_10012185C(v6 > 1, v7, 1);
  _swiftEmptyArrayStorage[2] = v7;
  *(double *)&_swiftEmptyArrayStorage[v5 + 4] = v2 + 2.0;
  v9 = _swiftEmptyArrayStorage[2];
  v8 = _swiftEmptyArrayStorage[3];
  v10 = v9 + 1;
  if (v9 >= v8 >> 1)
    sub_10012185C(v8 > 1, v9 + 1, 1);
  _swiftEmptyArrayStorage[2] = v10;
  *(double *)&_swiftEmptyArrayStorage[v9 + 4] = v2 + v2 + 2.0;
  v11 = _swiftEmptyArrayStorage[3];
  v12 = v9 + 2;
  if (v10 >= v11 >> 1)
    sub_10012185C(v11 > 1, v12, 1);
  _swiftEmptyArrayStorage[2] = v12;
  *(double *)&_swiftEmptyArrayStorage[v10 + 4] = v2 * 3.0 + 2.0;
  v14 = _swiftEmptyArrayStorage[2];
  v13 = _swiftEmptyArrayStorage[3];
  v15 = v14 + 1;
  if (v14 >= v13 >> 1)
    sub_10012185C(v13 > 1, v14 + 1, 1);
  _swiftEmptyArrayStorage[2] = v15;
  *(double *)&_swiftEmptyArrayStorage[v14 + 4] = v2 * 4.0 + 2.0;
  v16 = _swiftEmptyArrayStorage[3];
  v17 = v14 + 2;
  if (v15 >= v16 >> 1)
    sub_10012185C(v16 > 1, v17, 1);
  _swiftEmptyArrayStorage[2] = v17;
  *(double *)&_swiftEmptyArrayStorage[v15 + 4] = v2 * 5.0 + 2.0;
  v19 = _swiftEmptyArrayStorage[2];
  v18 = _swiftEmptyArrayStorage[3];
  if (v19 >= v18 >> 1)
    sub_10012185C(v18 > 1, v19 + 1, 1);
  result = v2 * 6.0 + 2.0;
  _swiftEmptyArrayStorage[2] = v19 + 1;
  *(double *)&_swiftEmptyArrayStorage[v19 + 4] = result;
  return result;
}

void sub_1001D32C4()
{
  qword_10086A0A0 = (uint64_t)&off_10077EE78;
}

char *sub_1001D32D8(char a1, uint64_t a2, double *a3, void *a4)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  char *result;
  char *v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double *v57;
  double v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  Class isa;
  id v68;
  id v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v82;
  objc_super v83;

  v5 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  v6 = v4;
  *(_QWORD *)&v4[v5] = sub_1004C2368();
  v7 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer;
  v8 = sub_10001E724(0, (unint64_t *)&qword_100821308, UIView_ptr);
  *(_QWORD *)&v6[v7] = sub_1005AEF5C();
  v9 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container90;
  *(_QWORD *)&v6[v9] = sub_1005AEF5C();
  v10 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container365;
  v82 = v8;
  *(_QWORD *)&v6[v10] = sub_1005AEF5C();
  v11 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_textContainer;
  *(_QWORD *)&v6[v11] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v12 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer;
  *(_QWORD *)&v6[v12] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v13 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer90;
  *(_QWORD *)&v6[v13] = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  v14 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90;
  *(_QWORD *)&v6[v14] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v15 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer365;
  *(_QWORD *)&v6[v15] = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  v16 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365;
  *(_QWORD *)&v6[v16] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v17 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartMask;
  v18 = type metadata accessor for TrendChartMaskingView();
  *(_QWORD *)&v6[v17] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v18)), "init");
  v19 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekLabels;
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v21 = sub_1001D86D0((uint64_t)v20);

  v78 = v19;
  *(_QWORD *)&v6[v19] = v21;
  v22 = sub_1004C2368();
  v23 = (void *)objc_opt_self(UIFont);
  result = (char *)objc_msgSend(v23, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
    __break(1u);
    goto LABEL_14;
  }
  v25 = result;
  v26 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_minAxisLabel;
  objc_msgSend(v22, "setFont:", result);

  *(_QWORD *)&v6[v26] = v22;
  v27 = sub_1004C2368();
  result = (char *)objc_msgSend(v23, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v28 = result;
  v29 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_midAxisLabel;
  objc_msgSend(v27, "setFont:", result);

  *(_QWORD *)&v6[v29] = v27;
  v30 = sub_1004C2368();
  result = (char *)objc_msgSend(v23, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v31 = result;
  v32 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel;
  objc_msgSend(v30, "setFont:", result);

  *(_QWORD *)&v6[v32] = v30;
  v33 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_div;
  *(_QWORD *)&v6[v33] = sub_1005AEEC8();
  v34 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90;
  type metadata accessor for TrendsScrubberPlatterView();
  *(_QWORD *)&v6[v34] = sub_1005AEF5C();
  v35 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365;
  *(_QWORD *)&v6[v35] = sub_1005AEF5C();
  v36 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterLayoutGuide;
  *(_QWORD *)&v6[v36] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v37 = (uint64_t *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_title90];
  v38 = (void *)objc_opt_self(NSBundle);
  v39 = objc_msgSend(v38, "mainBundle");
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, 0, 0);

  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  *v37 = v42;
  v37[1] = v44;
  v45 = (uint64_t *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_title365];
  v46 = objc_msgSend(v38, "mainBundle");
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v46, "localizedStringForKey:value:table:", v47, 0, 0);

  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  *v45 = v49;
  v45[1] = v51;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint] = 0;
  v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type] = a1;
  v52 = &v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90];
  v53 = *(double *)(a2 + 112);
  v54 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v52 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v52 + 5) = v54;
  *((_OWORD *)v52 + 6) = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v52 + 14) = *(_QWORD *)(a2 + 112);
  v55 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v52 = *(_OWORD *)a2;
  *((_OWORD *)v52 + 1) = v55;
  v56 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v52 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v52 + 3) = v56;
  v57 = (double *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365];
  v58 = a3[14];
  v57[14] = v58;
  v59 = *((_OWORD *)a3 + 6);
  v60 = *((_OWORD *)a3 + 4);
  *((_OWORD *)v57 + 5) = *((_OWORD *)a3 + 5);
  *((_OWORD *)v57 + 6) = v59;
  v61 = *((_OWORD *)a3 + 2);
  *((_OWORD *)v57 + 3) = *((_OWORD *)a3 + 3);
  *((_OWORD *)v57 + 4) = v60;
  v62 = *(_OWORD *)a3;
  *((_OWORD *)v57 + 1) = *((_OWORD *)a3 + 1);
  *((_OWORD *)v57 + 2) = v61;
  *(_OWORD *)v57 = v62;
  if (v53 <= v58)
    v53 = v58;
  *(double *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogramMaxY] = v53;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_formattingManager] = a4;
  v63 = *(_QWORD *)&v6[v78];
  if ((unint64_t)v63 >> 62)
  {
    if (v63 < 0)
      v74 = *(_QWORD *)&v6[v78];
    else
      v74 = v63 & 0xFFFFFFFFFFFFFF8;
    v75 = a4;
    swift_bridgeObjectRetain(v63);
    v76 = _bridgeCocoaArray<A>(_:)(v74, v82);
    swift_bridgeObjectRelease(v63);
    v63 = v76;
  }
  else
  {
    v64 = a4;
    swift_bridgeObjectRetain(v63);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v65);
  }
  v66 = objc_allocWithZone((Class)UIStackView);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v68 = objc_msgSend(v66, "initWithArrangedSubviews:", isa, swift_bridgeObjectRelease(v63).n128_f64[0]);

  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekStack] = v68;
  v69 = objc_msgSend(objc_allocWithZone((Class)UILongPressGestureRecognizer), "init");
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_longPressRecognizer] = v69;

  v83.receiver = v6;
  v83.super_class = (Class)type metadata accessor for TrendDetailDailyAverageView();
  v70 = (char *)objc_msgSendSuper2(&v83, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v71 = *(void **)&v70[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_longPressRecognizer];
  v72 = v70;
  objc_msgSend(v71, "addTarget:action:", v72, "longPressWithSender:");
  objc_msgSend(v71, "setMinimumPressDuration:", 0.2);
  objc_msgSend(v72, "addGestureRecognizer:", v71);
  objc_msgSend(v72, "addSubview:", *(_QWORD *)&v72[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer]);
  objc_msgSend(v72, "addLayoutGuide:", *(_QWORD *)&v72[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_textContainer]);
  v73 = *(void **)&v72[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekStack];
  objc_msgSend(v73, "setDistribution:", 1);
  objc_msgSend(v73, "setAxis:", 0);
  objc_msgSend(v73, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v73, "setSemanticContentAttribute:", 3);
  objc_msgSend(v72, "addSubview:", v73);
  sub_1001D430C();
  sub_1001D490C();
  sub_1001D5334();

  return v72;
}

id sub_1001D3A58(id result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  v2 = v1;
  v3 = (uint64_t)result;
  if (qword_10081D718 != -1)
    result = (id)swift_once(&qword_10081D718, sub_1001D32C4);
  if (*(_QWORD *)(qword_10086A0A0 + 16) <= v3)
    return 0;
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = sub_1001C84C8(*(_QWORD *)(qword_10086A0A0 + 8 * v3 + 32));
  if (v4 == 7)
    return 0;
  v5 = sub_1005B18B8(v4);
  if ((v6 & 1) != 0)
    return 0;
  v7 = *(double *)&v5;
  v8 = *(char *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type);
  sub_1000364C8(byte_10062BDE8[v8]);
  v10 = v9;
  v11 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v9, v7);

  if ((((_BYTE)v8 - 3) & 0xFB) != 0)
  {
    v12 = sub_1000363A0(v11, v8);
    if ((v13 & 1) == 0)
    {
      v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)&v12);
      v15 = objc_msgSend((id)objc_opt_self(FIUIFormattingManager), "stringWithNumber:decimalPrecision:roundingMode:", v14, qword_10062BDA0[v8], 4);

      if (v15)
      {
        v16 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        sub_1000367D4(v8);
        if (v19)
        {
          v20 = v19;
          v21 = sub_100038CA0();
          v22 = StringProtocol.localizedUppercase.getter(&type metadata for String, v21);
          v24 = v23;
          swift_bridgeObjectRelease(v20);
          goto LABEL_16;
        }
        goto LABEL_18;
      }
    }

    return 0;
  }
  v16 = sub_10055E814(v11);
  v18 = v25;

  if (!v18)
    return 0;
  sub_1000367D4(v8);
  if (!v26)
  {
LABEL_18:
    swift_bridgeObjectRelease(v18);
    return 0;
  }
  swift_bridgeObjectRelease(v26);
  v22 = 0;
  v24 = 0xE000000000000000;
LABEL_16:
  result = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleTitle3, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (result)
  {
    v27 = result;
    v28 = sub_1000387C4((uint64_t)v16, v18, v22, v24, result);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v24);

    return v28;
  }
LABEL_22:
  __break(1u);
  return result;
}

id sub_1001D3D4C(id result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  v2 = v1;
  v3 = (uint64_t)result;
  if (qword_10081D718 != -1)
    result = (id)swift_once(&qword_10081D718, sub_1001D32C4);
  if (*(_QWORD *)(qword_10086A0A0 + 16) <= v3)
    return 0;
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = sub_1001C84C8(*(_QWORD *)(qword_10086A0A0 + 8 * v3 + 32));
  if (v4 == 7)
    return 0;
  v5 = sub_1005B18B8(v4);
  if ((v6 & 1) != 0)
    return 0;
  v7 = *(double *)&v5;
  v8 = *(char *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type);
  sub_1000364C8(byte_10062BDE8[v8]);
  v10 = v9;
  v11 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v9, v7);

  if ((((_BYTE)v8 - 3) & 0xFB) != 0)
  {
    v12 = sub_1000363A0(v11, v8);
    if ((v13 & 1) == 0)
    {
      v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)&v12);
      v15 = objc_msgSend((id)objc_opt_self(FIUIFormattingManager), "stringWithNumber:decimalPrecision:roundingMode:", v14, qword_10062BDA0[v8], 4);

      if (v15)
      {
        v16 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        sub_1000367D4(v8);
        if (v19)
        {
          v20 = v19;
          v21 = sub_100038CA0();
          v22 = StringProtocol.localizedUppercase.getter(&type metadata for String, v21);
          v24 = v23;
          swift_bridgeObjectRelease(v20);
          goto LABEL_16;
        }
        goto LABEL_18;
      }
    }

    return 0;
  }
  v16 = sub_10055E814(v11);
  v18 = v25;

  if (!v18)
    return 0;
  sub_1000367D4(v8);
  if (!v26)
  {
LABEL_18:
    swift_bridgeObjectRelease(v18);
    return 0;
  }
  swift_bridgeObjectRelease(v26);
  v22 = 0;
  v24 = 0xE000000000000000;
LABEL_16:
  result = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleTitle3, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (result)
  {
    v27 = result;
    v28 = sub_1000387C4((uint64_t)v16, v18, v22, v24, result);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v24);

    return v28;
  }
LABEL_22:
  __break(1u);
  return result;
}

id sub_1001D4040()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id result;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel);
  v2 = (void *)objc_opt_self(UIFont);
  result = objc_msgSend(v2, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v4 = result;
  objc_msgSend(v1, "setFont:", result);

  v5 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_midAxisLabel);
  result = objc_msgSend(v2, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  objc_msgSend(v5, "setFont:", result);

  v7 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_minAxisLabel);
  result = objc_msgSend(v2, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (result)
  {
    v8 = result;
    objc_msgSend(v7, "setFont:", result);

    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekLabels);
    if ((unint64_t)v9 >> 62)
    {
LABEL_15:
      if (v9 < 0)
        v16 = v9;
      else
        v16 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v10 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (v10)
      {
LABEL_6:
        for (i = 4; ; ++i)
        {
          if ((v9 & 0xC000000000000001) != 0)
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v9);
          else
            v12 = *(id *)(v9 + 8 * i);
          v13 = v12;
          v14 = i - 3;
          if (__OFADD__(i - 4, 1))
          {
            __break(1u);
            goto LABEL_15;
          }
          result = objc_msgSend(v2, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
          if (!result)
            break;
          v15 = result;
          objc_msgSend(v13, "setFont:", result);

          if (v14 == v10)
            return (id)swift_bridgeObjectRelease(v9);
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v9);
      if (v10)
        goto LABEL_6;
    }
    return (id)swift_bridgeObjectRelease(v9);
  }
LABEL_23:
  __break(1u);
  return result;
}

void sub_1001D430C()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  id v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char **v30;
  NSString v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  double v41;
  double v42;
  id v43;
  NSString v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  char v56;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel];
  objc_msgSend(v1, "addSubview:", v2);
  v3 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCallout);
  objc_msgSend(v2, "setFont:", v3);

  v4 = (void *)objc_opt_self(UIColor);
  v5 = objc_msgSend(v4, "labelColor");
  objc_msgSend(v2, "setTextColor:", v5);

  v6 = (void *)objc_opt_self(NSBundle);
  v7 = objc_msgSend(v6, "mainBundle");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  v13 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel];
  objc_msgSend(v1, "addSubview:", v13);
  v54 = v4;
  v14 = objc_msgSend(v4, "secondaryLabelColor");
  objc_msgSend(v13, "setTextColor:", v14);

  v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_formattingManager];
  v16 = v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type];
  sub_1000364C8(byte_10062BDE8[v16]);
  v18 = v17;
  v19 = *(double *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogramMaxY];
  v20 = (void *)objc_opt_self(HKQuantity);
  v21 = objc_msgSend(v20, "quantityWithUnit:doubleValue:", v18, v19);

  v56 = (v16 - 3) & 0xFB;
  if ((((_DWORD)v16 - 3) & 0xFB) != 0)
  {
    v22 = objc_msgSend(v6, "mainBundle");
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v26 = v25;

    sub_10055E5F4(v21, v16);
    v28 = v27;

    v29 = swift_bridgeObjectRelease(v26).n128_u64[0];
    if (v28)
    {
LABEL_3:
      v30 = &selRef__insertGuidedRunMediaMomentsSection;
      v31 = String._bridgeToObjectiveC()();
      v29 = swift_bridgeObjectRelease(v28).n128_u64[0];
      goto LABEL_6;
    }
  }
  else
  {
    sub_10055E814(v21);
    v28 = v32;

    if (v28)
      goto LABEL_3;
  }
  v31 = 0;
  v30 = &selRef__insertGuidedRunMediaMomentsSection;
LABEL_6:
  objc_msgSend(v13, "setText:", v31, *(double *)&v29);

  v33 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_midAxisLabel];
  objc_msgSend(v1, v30[341], v33);
  v34 = objc_msgSend(v54, "secondaryLabelColor");
  objc_msgSend(v33, "setTextColor:", v34);

  sub_1000364C8(byte_10062BDE8[v16]);
  v36 = v35;
  v55 = objc_msgSend(v20, "quantityWithUnit:doubleValue:", v35, v19 * 0.5);

  if (v56)
  {
    v37 = objc_msgSend(*(id *)(v15 + OBJC_IVAR____TtC10FitnessApp23TrendsFormattingManager_fiuiFormatter), "unitManager");
    if (!v37)
    {
      __break(1u);
      return;
    }
    v38 = v37;
    sub_100036BCC((uint64_t)v37, v16);
    v40 = v39;

    objc_msgSend(v55, "doubleValueForUnit:", v40);
    v42 = v41;

    v43 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v42);
    v44 = objc_msgSend((id)objc_opt_self(FIUIFormattingManager), "stringWithNumber:decimalPrecision:roundingMode:", v43, qword_10062BDA0[v16], 4);

    goto LABEL_11;
  }
  sub_10055DE00(v55);
  if (v46)
  {
    v48 = v46;
    swift_bridgeObjectRelease(v47);
    v44 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v45 = swift_bridgeObjectRelease(v48).n128_u64[0];
LABEL_11:
    objc_msgSend(v33, "setText:", v44, v45);

  }
  v49 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_minAxisLabel];
  objc_msgSend(v1, v30[341], v49);
  v50 = objc_msgSend(v54, "secondaryLabelColor");
  objc_msgSend(v49, "setTextColor:", v50);

  if (v56)
  {
    v51 = (void *)objc_opt_self(FIUIFormattingManager);
    v52 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 0);
    v53 = objc_msgSend(v51, "stringWithNumber:decimalPrecision:", v52, 1);

    objc_msgSend(v49, "setText:", v53);
  }

}

id sub_1001D490C()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSNumber v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  id v43;
  id v44;
  Class v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  Class v51;
  id v52;
  id v53;
  id v54;
  id v55;
  char *v56;
  char *v57;
  void *v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  char *v68;
  Class v69;
  Class v70;
  objc_class *v71;
  char *v72;
  id v73;
  Class v74;
  objc_class *v75;
  char *v76;
  char *v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  id result;
  id v87;
  char v88;
  id v89;
  id v90;
  id v91;
  objc_super v92;
  objc_super v93;
  uint64_t v94;

  v1 = v0;
  v2 = objc_msgSend(v0, "layer");
  v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer];
  objc_msgSend(v2, "addSublayer:", v3);

  v91 = (id)objc_opt_self(UIColor);
  v4 = objc_msgSend(v91, "tertiaryLabelColor");
  v5 = objc_msgSend(v4, "CGColor");

  objc_msgSend(v3, "setStrokeColor:", v5);
  v6 = sub_100047110((uint64_t *)&unk_100828340);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100629280;
  sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
  *(NSNumber *)(v7 + 32) = NSNumber.init(floatLiteral:)(1.0);
  v8.super.super.isa = NSNumber.init(floatLiteral:)(1.0).super.super.isa;
  *(NSNumber *)(v7 + 40) = v8;
  v94 = v7;
  specialized Array._endMutation()(v8.super.super.isa);
  v9 = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setLineDashPattern:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v11 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer];
  v12 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container365];
  objc_msgSend(v11, "addSubview:", v12);
  v13 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container90];
  objc_msgSend(v11, "addSubview:", v13);
  v14 = objc_msgSend(v13, "layer");
  v90 = *(id *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90];
  objc_msgSend(v14, "addSublayer:");

  v15 = objc_msgSend(v13, "layer");
  v16 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer90];
  v87 = v16;
  objc_msgSend(v15, "addSublayer:");

  v17 = kCAFilterSourceAtop;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterSourceAtop);
  v19 = v18;
  v20 = objc_allocWithZone((Class)CAFilter);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "initWithType:", v21, swift_bridgeObjectRelease(v19).n128_f64[0]);

  objc_msgSend(v16, "setCompositingFilter:", v22);
  v23 = objc_msgSend(v12, "layer");
  v89 = *(id *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365];
  objc_msgSend(v23, "addSublayer:");

  v24 = objc_msgSend(v12, "layer");
  v25 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer365];
  objc_msgSend(v24, "addSublayer:", v25);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v27 = v26;
  v28 = objc_allocWithZone((Class)CAFilter);
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "initWithType:", v29, swift_bridgeObjectRelease(v27).n128_f64[0]);

  objc_msgSend(v25, "setCompositingFilter:", v30);
  v31 = sub_100047110(&qword_10082CEC0);
  v32 = swift_allocObject(v31, 96, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100620BC0;
  LOBYTE(v16) = v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type];
  v88 = (char)v16;
  sub_1004E4168((char)v16);
  v34 = v33;
  v35 = (char *)*(id *)&v33[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient];

  v36 = *(id *)&v35[OBJC_IVAR____TtC10FitnessApp14GradientColors_light];
  v37 = objc_msgSend(v36, "CGColor");

  type metadata accessor for CGColor(0);
  v39 = v38;
  *(_QWORD *)(v32 + 56) = v38;
  *(_QWORD *)(v32 + 32) = v37;
  sub_1004E4168((char)v16);
  v41 = v40;
  v42 = (char *)*(id *)&v40[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient];

  v43 = *(id *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark];
  v44 = objc_msgSend(v43, "CGColor");

  *(_QWORD *)(v32 + 88) = v39;
  *(_QWORD *)(v32 + 64) = v44;
  v45 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v87, "setColors:", v45, swift_bridgeObjectRelease(v32).n128_f64[0]);

  v46 = swift_allocObject(v31, 96, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100620BC0;
  v47 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.75, 1.0);
  v48 = objc_msgSend(v47, "CGColor");

  *(_QWORD *)(v46 + 56) = v39;
  *(_QWORD *)(v46 + 32) = v48;
  v49 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.6, 1.0);
  v50 = objc_msgSend(v49, "CGColor");

  *(_QWORD *)(v46 + 88) = v39;
  *(_QWORD *)(v46 + 64) = v50;
  v51 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setColors:", v51, swift_bridgeObjectRelease(v46).n128_f64[0]);

  v52 = objc_msgSend(v91, "blackColor");
  v53 = objc_msgSend(v52, "CGColor");

  objc_msgSend(v90, "setStrokeColor:", v53);
  objc_msgSend(v90, "setLineWidth:", 4.0);
  objc_msgSend(v90, "setLineCap:", kCALineCapRound);
  v54 = objc_msgSend(v91, "blackColor");
  v55 = objc_msgSend(v54, "CGColor");

  objc_msgSend(v89, "setStrokeColor:", v55);
  objc_msgSend(v89, "setLineWidth:", 4.0);
  objc_msgSend(v89, "setLineCap:", kCALineCapRound);
  objc_msgSend(v1, "addLayoutGuide:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterLayoutGuide]);
  v56 = *(char **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90];
  objc_msgSend(v1, "addSubview:", v56);
  sub_1004E4168(v88);
  v58 = v57;
  v59 = *(id *)&v57[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v60 = OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor;
  v61 = *(void **)&v56[OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor];
  *(_QWORD *)&v56[OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor] = v59;
  v62 = v59;

  v63 = objc_msgSend(v56, "layer");
  v64 = objc_opt_self(CAShapeLayer);
  v65 = swift_dynamicCastObjCClass(v63, v64);
  if (!v65)
    goto LABEL_4;
  v66 = (void *)v65;
  v67 = objc_msgSend(*(id *)&v56[v60], "CGColor");
  objc_msgSend(v66, "setFillColor:", v67);

  objc_msgSend(v56, "setAlpha:", 0.0);
  v68 = *(char **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365];
  objc_msgSend(v1, "addSubview:", v68);
  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  v69 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.58824, 0.61961, 0.63137, 1.0).super.isa;
  v70 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.75686, 0.77647, 0.78431, 1.0).super.isa;
  v71 = (objc_class *)type metadata accessor for GradientColors();
  v72 = (char *)objc_allocWithZone(v71);
  *(_QWORD *)&v72[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v69;
  *(_QWORD *)&v72[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v70;
  v93.receiver = v72;
  v93.super_class = v71;
  v73 = objc_msgSendSuper2(&v93, "init");
  v74 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.58824, 0.61961, 0.63137, 1.0).super.isa;
  v75 = (objc_class *)type metadata accessor for MetricColors();
  v76 = (char *)objc_allocWithZone(v75);
  *(_QWORD *)&v76[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v73;
  *(_QWORD *)&v76[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v74;
  v92.receiver = v76;
  v92.super_class = v75;
  v77 = (char *)objc_msgSendSuper2(&v92, "init");
  v78 = *(id *)&v77[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  v79 = OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor;
  v80 = *(void **)&v68[OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor];
  *(_QWORD *)&v68[OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_platterColor] = v78;
  v81 = v78;

  v63 = objc_msgSend(v68, "layer");
  v82 = objc_opt_self(CAShapeLayer);
  v83 = swift_dynamicCastObjCClass(v63, v82);
  if (v83)
  {
    v84 = (void *)v83;
    v85 = objc_msgSend(*(id *)&v68[v79], "CGColor");
    objc_msgSend(v84, "setFillColor:", v85);

    objc_msgSend(v68, "setAlpha:", 0.0);
    return objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_div]);
  }
  else
  {
LABEL_4:

    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x800000010068EEB0, "FitnessApp/TrendsScrubberPlatterView.swift", 42, 2, 46, 0);
    __break(1u);
  }
  return result;
}

void sub_1001D5334()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  double v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  Class isa;
  uint64_t v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  void *v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel];
  v2 = objc_msgSend(v1, "topAnchor");
  v3 = objc_msgSend(v0, "topAnchor");
  v212 = objc_msgSend(v2, "constraintEqualToAnchor:constant:", v3, 9.0);

  v215 = v1;
  v4 = objc_msgSend(v1, "leadingAnchor");
  v5 = objc_msgSend(v0, "leadingAnchor");
  v210 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, 16.0);

  v6 = objc_msgSend(v1, "trailingAnchor");
  v7 = objc_msgSend(v0, "trailingAnchor");
  v208 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v7, -16.0);

  v8 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer];
  v9 = objc_msgSend(v8, "leftAnchor");
  v10 = objc_msgSend(v0, "leftAnchor");
  v206 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, 14.0);

  v11 = objc_msgSend(v8, "rightAnchor");
  v12 = objc_msgSend(v0, "rightAnchor");
  v204 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v12, -60.0);

  v13 = objc_msgSend(v8, "heightAnchor");
  v202 = objc_msgSend(v13, "constraintEqualToConstant:", 66.0);

  v14 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container90];
  v15 = objc_msgSend(v14, "topAnchor");
  v16 = objc_msgSend(v8, "topAnchor");
  v200 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  v17 = objc_msgSend(v14, "leftAnchor");
  v18 = objc_msgSend(v8, "leftAnchor");
  v198 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  v19 = objc_msgSend(v14, "rightAnchor");
  v20 = objc_msgSend(v8, "rightAnchor");
  v196 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  v21 = objc_msgSend(v14, "bottomAnchor");
  v22 = objc_msgSend(v8, "bottomAnchor");
  v194 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  v23 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container365];
  v24 = objc_msgSend(v23, "topAnchor");
  v25 = objc_msgSend(v8, "topAnchor");
  v192 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

  v26 = objc_msgSend(v23, "leftAnchor");
  v27 = objc_msgSend(v8, "leftAnchor");
  v190 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  v28 = objc_msgSend(v23, "rightAnchor");
  v29 = objc_msgSend(v8, "rightAnchor");
  v188 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  v30 = objc_msgSend(v23, "bottomAnchor");
  v31 = objc_msgSend(v8, "bottomAnchor");
  v186 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  v32 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_textContainer];
  v33 = objc_msgSend(v32, "topAnchor");
  v34 = objc_msgSend(v8, "bottomAnchor");
  v184 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  v35 = objc_msgSend(v32, "leftAnchor");
  v36 = objc_msgSend(v8, "leftAnchor");
  v182 = objc_msgSend(v35, "constraintEqualToAnchor:", v36);

  v37 = objc_msgSend(v32, "rightAnchor");
  v38 = objc_msgSend(v8, "rightAnchor");
  v180 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

  v39 = objc_msgSend(v32, "bottomAnchor");
  v40 = objc_msgSend(v0, "bottomAnchor");
  v178 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v40, -10.0);

  v41 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekStack];
  v42 = objc_msgSend(v41, "leftAnchor");
  v43 = objc_msgSend(v32, "leftAnchor");
  v176 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, 2.0);

  v44 = objc_msgSend(v41, "rightAnchor");
  v45 = objc_msgSend(v32, "rightAnchor");
  v174 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v45, 2.0);

  v46 = objc_msgSend(v41, "topAnchor");
  v47 = objc_msgSend(v32, "topAnchor");
  v172 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

  v48 = objc_msgSend(v41, "bottomAnchor");
  v49 = objc_msgSend(v32, "bottomAnchor");
  v170 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

  v50 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel];
  v51 = objc_msgSend(v50, "topAnchor");
  v52 = objc_msgSend(v215, "bottomAnchor");
  v168 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v52, 8.0);

  v53 = objc_msgSend(v50, "bottomAnchor");
  v54 = objc_msgSend(v8, "topAnchor");
  v165 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, -3.0);

  v55 = objc_msgSend(v50, "rightAnchor");
  v56 = objc_msgSend(v0, "rightAnchor");
  v162 = objc_msgSend(v55, "constraintEqualToAnchor:constant:", v56, -8.0);

  v57 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_minAxisLabel];
  v58 = objc_msgSend(v57, "bottomAnchor");
  v59 = objc_msgSend(v8, "bottomAnchor");
  v167 = objc_msgSend(v58, "constraintEqualToAnchor:constant:", v59, -3.0);

  v60 = objc_msgSend(v57, "rightAnchor");
  v61 = objc_msgSend(v50, "rightAnchor");
  v164 = objc_msgSend(v60, "constraintEqualToAnchor:", v61);

  v62 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_midAxisLabel];
  v63 = objc_msgSend(v62, "bottomAnchor");
  v64 = objc_msgSend(v8, "centerYAnchor");
  v161 = objc_msgSend(v63, "constraintEqualToAnchor:constant:", v64, -3.0);

  v65 = objc_msgSend(v62, "rightAnchor");
  v66 = objc_msgSend(v50, "rightAnchor");
  v160 = objc_msgSend(v65, "constraintEqualToAnchor:", v66);

  v67 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_div];
  v68 = objc_msgSend(v67, "leadingAnchor");
  v69 = objc_msgSend(v0, "leadingAnchor");
  v154 = objc_msgSend(v68, "constraintEqualToAnchor:constant:", v69, 16.0);

  v70 = objc_msgSend(v67, "trailingAnchor");
  v71 = objc_msgSend(v0, "trailingAnchor");
  v159 = objc_msgSend(v70, "constraintEqualToAnchor:", v71);

  v72 = objc_msgSend(v67, "heightAnchor");
  if (qword_10081DD78 != -1)
    swift_once(&qword_10081DD78, sub_100442F3C);
  v156 = objc_msgSend(v72, "constraintEqualToConstant:", *(double *)&qword_10086AA08);

  v73 = objc_msgSend(v67, "bottomAnchor");
  v74 = objc_msgSend(v0, "bottomAnchor");
  v158 = objc_msgSend(v73, "constraintEqualToAnchor:", v74);

  v75 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterLayoutGuide];
  v76 = objc_msgSend(v75, "topAnchor");
  v77 = objc_msgSend(v0, "topAnchor");
  v78 = objc_msgSend(v76, "constraintEqualToAnchor:constant:", v77, 2.0);

  v79 = objc_msgSend(v75, "widthAnchor");
  v153 = objc_msgSend(v79, "constraintEqualToConstant:", 7.0);

  v80 = objc_msgSend(v75, "heightAnchor");
  v81 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365];
  v82 = objc_msgSend(v81, "heightAnchor");
  v157 = objc_msgSend(v80, "constraintEqualToAnchor:constant:", v82, 0.0);

  v83 = objc_msgSend(v75, "centerXAnchor");
  v84 = objc_msgSend(v8, "leftAnchor");
  v85 = objc_msgSend(v83, "constraintEqualToAnchor:constant:", v84, 0.0);

  LODWORD(v86) = 1144750080;
  objc_msgSend(v85, "setPriority:", v86);
  v87 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint] = v85;
  v151 = v85;

  v88 = objc_msgSend(v81, "topAnchor");
  v89 = objc_msgSend(v75, "topAnchor");
  v150 = objc_msgSend(v88, "constraintEqualToAnchor:constant:", v89, 0.0);

  v90 = objc_msgSend(v81, "rightAnchor");
  v91 = objc_msgSend(v75, "leftAnchor");
  v149 = objc_msgSend(v90, "constraintEqualToAnchor:constant:", v91, 0.0);

  v92 = objc_msgSend(v81, "leftAnchor");
  v93 = objc_msgSend(v0, "leftAnchor");
  v148 = objc_msgSend(v92, "constraintGreaterThanOrEqualToAnchor:constant:", v93, 7.0);

  v94 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90];
  v95 = objc_msgSend(v94, "topAnchor");
  v96 = objc_msgSend(v75, "topAnchor");
  v146 = objc_msgSend(v95, "constraintEqualToAnchor:constant:", v96, 0.0);

  v97 = objc_msgSend(v94, "leftAnchor");
  v98 = objc_msgSend(v75, "rightAnchor");
  v99 = objc_msgSend(v97, "constraintEqualToAnchor:constant:", v98, 0.0);

  v100 = objc_msgSend(v94, "rightAnchor");
  v101 = objc_msgSend(v0, "rightAnchor");
  v155 = objc_msgSend(v100, "constraintLessThanOrEqualToAnchor:constant:", v101, -7.0);

  v102 = sub_100047110((uint64_t *)&unk_100828340);
  v103 = swift_allocObject(v102, 56, 7);
  *(_OWORD *)(v103 + 16) = xmmword_100624C90;
  *(_QWORD *)(v103 + 32) = v212;
  *(_QWORD *)(v103 + 40) = v210;
  *(_QWORD *)(v103 + 48) = v208;
  v217 = v103;
  specialized Array._endMutation()(v103);
  v230 = v217;
  v104 = swift_allocObject(v102, 56, 7);
  *(_OWORD *)(v104 + 16) = xmmword_100624C90;
  *(_QWORD *)(v104 + 32) = v165;
  *(_QWORD *)(v104 + 40) = v162;
  *(_QWORD *)(v104 + 48) = v168;
  v218 = v104;
  specialized Array._endMutation()(v104);
  v231 = v218;
  v105 = swift_allocObject(v102, 56, 7);
  *(_OWORD *)(v105 + 16) = xmmword_100624C90;
  *(_QWORD *)(v105 + 32) = v206;
  *(_QWORD *)(v105 + 40) = v204;
  *(_QWORD *)(v105 + 48) = v202;
  v219 = v105;
  specialized Array._endMutation()(v105);
  v232 = v219;
  v106 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v106 + 16) = xmmword_100623750;
  *(_QWORD *)(v106 + 32) = v200;
  *(_QWORD *)(v106 + 40) = v198;
  *(_QWORD *)(v106 + 48) = v196;
  *(_QWORD *)(v106 + 56) = v194;
  v220 = v106;
  specialized Array._endMutation()(v106);
  v233 = v220;
  v107 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v107 + 16) = xmmword_100623750;
  *(_QWORD *)(v107 + 32) = v192;
  *(_QWORD *)(v107 + 40) = v190;
  *(_QWORD *)(v107 + 48) = v188;
  *(_QWORD *)(v107 + 56) = v186;
  v221 = v107;
  specialized Array._endMutation()(v107);
  v234 = v221;
  v108 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v108 + 16) = xmmword_100623750;
  *(_QWORD *)(v108 + 32) = v184;
  *(_QWORD *)(v108 + 40) = v182;
  *(_QWORD *)(v108 + 48) = v180;
  *(_QWORD *)(v108 + 56) = v178;
  v222 = v108;
  specialized Array._endMutation()(v108);
  v235 = v222;
  v109 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v109 + 16) = xmmword_100623750;
  *(_QWORD *)(v109 + 32) = v176;
  *(_QWORD *)(v109 + 40) = v174;
  *(_QWORD *)(v109 + 48) = v172;
  *(_QWORD *)(v109 + 56) = v170;
  v223 = v109;
  specialized Array._endMutation()(v109);
  v236 = v223;
  v110 = swift_allocObject(v102, 48, 7);
  *(_OWORD *)(v110 + 16) = xmmword_100629280;
  *(_QWORD *)(v110 + 32) = v167;
  *(_QWORD *)(v110 + 40) = v164;
  v224 = v110;
  specialized Array._endMutation()(v110);
  v237 = v224;
  v111 = swift_allocObject(v102, 48, 7);
  *(_OWORD *)(v111 + 16) = xmmword_100629280;
  *(_QWORD *)(v111 + 32) = v161;
  *(_QWORD *)(v111 + 40) = v160;
  v225 = v111;
  specialized Array._endMutation()(v111);
  v238 = v225;
  v112 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v112 + 16) = xmmword_100623750;
  *(_QWORD *)(v112 + 32) = v154;
  *(_QWORD *)(v112 + 40) = v159;
  *(_QWORD *)(v112 + 48) = v156;
  *(_QWORD *)(v112 + 56) = v158;
  v226 = v112;
  specialized Array._endMutation()(v112);
  v239 = v226;
  v113 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v113 + 16) = xmmword_100623750;
  *(_QWORD *)(v113 + 32) = v78;
  *(_QWORD *)(v113 + 40) = v153;
  *(_QWORD *)(v113 + 48) = v157;
  *(_QWORD *)(v113 + 56) = v151;
  v227 = v113;
  specialized Array._endMutation()(v113);
  v240 = v227;
  v114 = swift_allocObject(v102, 56, 7);
  *(_OWORD *)(v114 + 16) = xmmword_100624C90;
  *(_QWORD *)(v114 + 32) = v150;
  *(_QWORD *)(v114 + 40) = v148;
  *(_QWORD *)(v114 + 48) = v149;
  v228 = v114;
  specialized Array._endMutation()(v114);
  v241 = v228;
  v115 = swift_allocObject(v102, 56, 7);
  *(_OWORD *)(v115 + 16) = xmmword_100624C90;
  *(_QWORD *)(v115 + 32) = v146;
  *(_QWORD *)(v115 + 40) = v99;
  *(_QWORD *)(v115 + 48) = v155;
  v229 = v115;
  specialized Array._endMutation()(v115);
  v242 = v229;
  v216 = v151;
  v152 = v212;
  v147 = v210;
  v209 = v208;
  v214 = v165;
  v213 = v162;
  v211 = v168;
  v207 = v206;
  v205 = v204;
  v203 = v202;
  v201 = v200;
  v199 = v198;
  v197 = v196;
  v195 = v194;
  v193 = v192;
  v169 = v190;
  v166 = v188;
  v163 = v186;
  v145 = v184;
  v144 = v182;
  v143 = v180;
  v142 = v178;
  v141 = v176;
  v140 = v174;
  v139 = v172;
  v138 = v170;
  v191 = v167;
  v189 = v164;
  v187 = v161;
  v185 = v160;
  v183 = v154;
  v181 = v159;
  v179 = v156;
  v177 = v158;
  v173 = v78;
  v171 = v153;
  v116 = v157;
  v175 = v150;
  v117 = v148;
  v118 = v149;
  v119 = v146;
  v120 = v99;
  v121 = v155;
  swift_bridgeObjectRetain(v230);
  sub_100032DE4(v122);
  swift_bridgeObjectRetain(v231);
  sub_100032DE4(v123);
  swift_bridgeObjectRetain(v232);
  sub_100032DE4(v124);
  swift_bridgeObjectRetain(v233);
  sub_100032DE4(v125);
  swift_bridgeObjectRetain(v234);
  sub_100032DE4(v126);
  swift_bridgeObjectRetain(v235);
  sub_100032DE4(v127);
  swift_bridgeObjectRetain(v236);
  sub_100032DE4(v128);
  swift_bridgeObjectRetain(v237);
  sub_100032DE4(v129);
  swift_bridgeObjectRetain(v238);
  sub_100032DE4(v130);
  swift_bridgeObjectRetain(v239);
  sub_100032DE4(v131);
  swift_bridgeObjectRetain(v240);
  sub_100032DE4(v132);
  swift_bridgeObjectRetain(v241);
  sub_100032DE4(v133);
  swift_bridgeObjectRetain(v229);
  sub_100032DE4(v134);
  v135 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v135, "activateConstraints:", isa, swift_bridgeObjectRelease(_swiftEmptyArrayStorage).n128_f64[0]);

  v137 = sub_100047110(&qword_1008261E8);
  swift_arrayDestroy(&v230, 13, v137);

}

id sub_1001D6AA4()
{
  uint64_t v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  _QWORD *v13;
  double v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90), "bounds");
  x = v28.origin.x;
  y = v28.origin.y;
  width = v28.size.width;
  height = v28.size.height;
  v5 = CGRectGetHeight(v28);
  sub_1001D3004();
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    sub_10012185C(0, v8, 0);
    v9 = 0;
    v10 = _swiftEmptyArrayStorage[2];
    do
    {
      v11 = *(double *)(v7 + 8 * v9 + 32);
      v12 = _swiftEmptyArrayStorage[3];
      if (v10 >= v12 >> 1)
        sub_10012185C(v12 > 1, v10 + 1, 1);
      ++v9;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      *(double *)&_swiftEmptyArrayStorage[v10++ + 4] = v11 + 4.0 + 5.0;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  v13 = (_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90);
  if (*(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 112) > *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 112))
    v14 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 112);
  else
    v14 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 112);
  v15 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v16 = _swiftEmptyArrayStorage[2];
  if (v16)
  {
    if (qword_10081D718 != -1)
      goto LABEL_26;
    while (1)
    {
      v17 = 0;
      v18 = qword_10086A0A0;
      v19 = qword_10086A0A0 + 32;
      while (v17 >= *(_QWORD *)(v18 + 16))
      {
LABEL_14:
        if (v16 == ++v17)
          goto LABEL_24;
      }
      if ((v17 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_26:
      swift_once(&qword_10081D718, sub_1001D32C4);
    }
    v20 = *(_QWORD *)(v19 + 8 * v17) - 1;
    if (v20 < 7 && v20 < *(_QWORD *)(*v13 + 16))
    {
      v21 = 24 * v20;
      v22 = *v13 + 24 * v20;
      if ((*(_BYTE *)(v22 + 48) & 1) == 0)
      {
        v23 = v13[7];
        if (v20 < *(_QWORD *)(v23 + 16) && (*(_BYTE *)(v23 + v21 + 48) & 1) == 0)
        {
          v24 = *(double *)(v23 + v21 + 32);
          if (v24 > 0.0)
          {
            v25 = *(double *)&_swiftEmptyArrayStorage[v17 + 4];
            v26 = *(double *)(v22 + 32) / v24 / v14;
            v29.origin.x = x;
            v29.origin.y = y;
            v29.size.width = width;
            v29.size.height = height;
            objc_msgSend(v15, "moveToPoint:", v25, CGRectGetMaxY(v29) + -2.0);
            v30.origin.x = x;
            v30.origin.y = y;
            v30.size.width = width;
            v30.size.height = height;
            objc_msgSend(v15, "addLineToPoint:", v25, CGRectGetMaxY(v30) - v5 * v26 + 2.0);
          }
        }
      }
    }
    goto LABEL_14;
  }
LABEL_24:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return v15;
}

id sub_1001D6D8C()
{
  uint64_t v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365), "bounds");
  x = v23.origin.x;
  y = v23.origin.y;
  width = v23.size.width;
  height = v23.size.height;
  v5 = CGRectGetHeight(v23);
  sub_1001D3004();
  v7 = v6;
  v8 = (_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365);
  if (*(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 112) > *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 112))
    v9 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 112);
  else
    v9 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 112);
  v10 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v11 = *(_QWORD *)(v7 + 16);
  if (v11)
  {
    if (qword_10081D718 != -1)
      goto LABEL_19;
    while (1)
    {
      v12 = 0;
      v13 = qword_10086A0A0;
      v14 = qword_10086A0A0 + 32;
      while (v12 >= *(_QWORD *)(v13 + 16))
      {
LABEL_7:
        if (v11 == ++v12)
          goto LABEL_17;
      }
      if ((v12 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_19:
      swift_once(&qword_10081D718, sub_1001D32C4);
    }
    v15 = *(_QWORD *)(v14 + 8 * v12) - 1;
    if (v15 < 7 && v15 < *(_QWORD *)(*v8 + 16))
    {
      v16 = 24 * v15;
      v17 = *v8 + 24 * v15;
      if ((*(_BYTE *)(v17 + 48) & 1) == 0)
      {
        v18 = v8[7];
        if (v15 < *(_QWORD *)(v18 + 16) && (*(_BYTE *)(v18 + v16 + 48) & 1) == 0)
        {
          v19 = *(double *)(v18 + v16 + 32);
          if (v19 > 0.0)
          {
            v20 = *(double *)(v7 + 32 + 8 * v12);
            v21 = *(double *)(v17 + 32) / v19 / v9;
            v24.origin.x = x;
            v24.origin.y = y;
            v24.size.width = width;
            v24.size.height = height;
            objc_msgSend(v10, "moveToPoint:", v20, CGRectGetMaxY(v24) + -2.0);
            v25.origin.x = x;
            v25.origin.y = y;
            v25.size.width = width;
            v25.size.height = height;
            objc_msgSend(v10, "addLineToPoint:", v20, CGRectGetMaxY(v25) - v5 * v21 + 2.0);
          }
        }
      }
    }
    goto LABEL_7;
  }
LABEL_17:
  swift_bridgeObjectRelease(v7);
  return v10;
}

id sub_1001D6FAC()
{
  uint64_t v0;
  id v1;
  void *v2;
  double Height;
  double v4;
  double MaxX;
  CGRect v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer);
  objc_msgSend(v2, "bounds");
  Height = CGRectGetHeight(v7);
  if (qword_10081DD70 != -1)
    swift_once(&qword_10081DD70, sub_1000071BC);
  v4 = UIRoundToScale(Height * 0.5, *(double *)&qword_10086AA00);
  objc_msgSend(v1, "moveToPoint:", 0.0, 0.0);
  objc_msgSend(v2, "bounds");
  objc_msgSend(v1, "addLineToPoint:", CGRectGetWidth(v8), 0.0);
  objc_msgSend(v1, "moveToPoint:", 0.0, v4);
  objc_msgSend(v2, "bounds");
  objc_msgSend(v1, "addLineToPoint:", CGRectGetMaxX(v9), v4);
  objc_msgSend(v2, "bounds");
  objc_msgSend(v1, "moveToPoint:", 0.0, CGRectGetMaxY(v10));
  objc_msgSend(v2, "bounds");
  MaxX = CGRectGetMaxX(v11);
  objc_msgSend(v2, "bounds");
  objc_msgSend(v1, "addLineToPoint:", MaxX, CGRectGetMaxY(v12));
  return v1;
}

id sub_1001D712C()
{
  char *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  void *v10;
  CGFloat v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  objc_super v19;
  CGRect v20;
  CGRect v21;

  v19.receiver = v0;
  v19.super_class = (Class)type metadata accessor for TrendDetailDailyAverageView();
  objc_msgSendSuper2(&v19, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer];
  objc_msgSend(v1, "frame");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer];
  objc_msgSend(v0, "bounds");
  v11 = CGRectGetWidth(v20) - v3 + -9.0;
  v21.origin.x = v3;
  v21.origin.y = v5;
  v21.size.width = v7;
  v21.size.height = v9;
  objc_msgSend(v10, "setFrame:", v3, v5, v11, CGRectGetHeight(v21));
  v12 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer90];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v12, "setFrame:");
  v13 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer365];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v13, "setFrame:");
  v14 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90];
  objc_msgSend(v12, "bounds");
  objc_msgSend(v14, "setFrame:");
  v15 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365];
  objc_msgSend(v13, "bounds");
  objc_msgSend(v15, "setFrame:");
  v16 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartMask];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v16, "setFrame:");
  v17 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v17, "begin");
  objc_msgSend(v17, "setDisableActions:", 1);
  sub_1001D731C((uint64_t)v0);
  return objc_msgSend(v17, "commit");
}

void sub_1001D731C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90);
  v3 = sub_1001D6AA4();
  v4 = objc_msgSend(v3, "CGPath");

  objc_msgSend(v2, "setPath:", v4);
  v5 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365);
  v6 = sub_1001D6D8C();
  v7 = objc_msgSend(v6, "CGPath");

  objc_msgSend(v5, "setPath:", v7);
  v8 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer);
  v9 = sub_1001D6FAC();
  v10 = objc_msgSend(v9, "CGPath");

  objc_msgSend(v8, "setPath:", v10);
}

id sub_1001D744C(void *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id result;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;

  v2 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  v3 = v1;
  v63 = v1;
  *(_QWORD *)&v1[v2] = sub_1004C2368();
  v4 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer;
  sub_10001E724(0, (unint64_t *)&qword_100821308, UIView_ptr);
  v61 = v4;
  *(_QWORD *)&v3[v4] = sub_1005AEF5C();
  v60 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container90;
  *(_QWORD *)&v3[v60] = sub_1005AEF5C();
  v59 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_container365;
  *(_QWORD *)&v3[v59] = sub_1005AEF5C();
  v58 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_textContainer;
  *(_QWORD *)&v3[v58] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v57 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_axisLayer;
  *(_QWORD *)&v3[v57] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v56 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer90;
  *(_QWORD *)&v3[v56] = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  v55 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer90;
  *(_QWORD *)&v3[v55] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v54 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_gradientLayer365;
  *(_QWORD *)&v3[v54] = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  v53 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_barLayer365;
  *(_QWORD *)&v3[v53] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v5 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartMask;
  v6 = type metadata accessor for TrendChartMaskingView();
  v52 = v5;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  v7 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_dayOfWeekLabels;
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v9 = sub_1001D86D0((uint64_t)v8);

  v51 = v7;
  *(_QWORD *)&v3[v7] = v9;
  v10 = sub_1004C2368();
  v11 = (void *)objc_opt_self(UIFont);
  result = objc_msgSend(v11, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  v13 = result;
  v14 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_minAxisLabel;
  objc_msgSend(v10, "setFont:", result);

  v49 = v14;
  *(_QWORD *)&v3[v14] = v10;
  v15 = sub_1004C2368();
  result = objc_msgSend(v11, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v16 = result;
  v17 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_midAxisLabel;
  objc_msgSend(v15, "setFont:", result);

  v48 = v17;
  *(_QWORD *)&v3[v17] = v15;
  v18 = sub_1004C2368();
  result = objc_msgSend(v11, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, UIContentSizeCategoryExtraExtraExtraLarge);
  if (result)
  {
    v19 = result;
    v20 = type metadata accessor for TrendDetailDailyAverageView();
    v21 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel;
    v46 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_maxValueLabel;
    v47 = v20;
    objc_msgSend(v18, "setFont:", v19);

    *(_QWORD *)&v3[v21] = v18;
    v22 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_div;
    v45 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_div;
    *(_QWORD *)&v3[v22] = sub_1005AEEC8();
    v23 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90;
    v50 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90;
    type metadata accessor for TrendsScrubberPlatterView();
    *(_QWORD *)&v3[v23] = sub_1005AEF5C();
    v24 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365;
    v44 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365;
    *(_QWORD *)&v3[v24] = sub_1005AEF5C();
    v25 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterLayoutGuide;
    v43 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterLayoutGuide;
    *(_QWORD *)&v3[v25] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
    v26 = (uint64_t *)&v3[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_title90];
    v27 = (void *)objc_opt_self(NSBundle);
    v28 = objc_msgSend(v27, "mainBundle");
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v28, "localizedStringForKey:value:table:", v29, 0, 0);

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *v26 = v31;
    v26[1] = v33;
    v34 = (uint64_t *)&v3[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_title365];
    v35 = objc_msgSend(v27, "mainBundle");
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v35, "localizedStringForKey:value:table:", v36, 0, 0);

    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    *v34 = v38;
    v34[1] = v40;
    v41 = OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint;
    *(_QWORD *)&v3[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint] = 0;

    swift_bridgeObjectRelease(*(_QWORD *)&v3[v51]);
    swift_bridgeObjectRelease(v26[1]);
    swift_bridgeObjectRelease(v34[1]);
    v42 = *(void **)&v3[v41];

    swift_deallocPartialClassInstance(v3, v47, 480, 7);
    return 0;
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_1001D7AC4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrendDetailDailyAverageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TrendDetailDailyAverageView()
{
  return objc_opt_self(_TtC10FitnessApp27TrendDetailDailyAverageView);
}

void sub_1001D7D2C(void *a1)
{
  char *v1;
  char **v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  double v16;
  double v17;
  double v18;
  char *v19;
  double v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  NSString v30;
  uint64_t v31;
  void *v32;
  NSString v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  void **v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  id (*v55)();
  uint64_t v56;

  v3 = &selRef_tableView_titleForHeaderInSection_;
  if (objc_msgSend(a1, "state") == (id)1 || objc_msgSend(a1, "state") == (id)2)
  {
    if (objc_msgSend(a1, "state") == (id)1)
    {
      v4 = *(char **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartMask];
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer], "setMaskView:", v4);
      *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth] = 0x402A000000000000;
      objc_msgSend(v4, "setNeedsLayout");
      v5 = (void *)objc_opt_self(UIView);
      v6 = swift_allocObject(&unk_10078D280, 24, 7);
      *(_QWORD *)(v6 + 16) = v1;
      v55 = sub_1001D8C00;
      v56 = v6;
      v51 = _NSConcreteStackBlock;
      v52 = 1107296256;
      v53 = sub_10002D0F8;
      v54 = &unk_10078D298;
      v7 = _Block_copy(&v51);
      v8 = v56;
      v9 = v1;
      swift_release(v8);
      objc_msgSend(v5, "animateWithDuration:animations:", v7, 0.1);
      _Block_release(v7);
    }
    objc_msgSend(a1, "locationInView:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer]);
    v11 = v10;
    sub_1001D3004();
    v13 = *(char **)(v12 + 16);
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0.0;
      v17 = 1.79769313e308;
      do
      {
        v18 = vabdd_f64(v11, *(double *)(v12 + 8 * (_QWORD)v15 + 32));
        if (v18 < v17)
          v14 = v15;
        v19 = v15 + 1;
        if (v18 < v17)
          v16 = *(double *)(v12 + 8 * (_QWORD)v15 + 32);
        v17 = v18;
        ++v15;
      }
      while (v13 != v19);
      swift_bridgeObjectRelease(v12);
      v20 = v16 + -2.0 + 6.5;
    }
    else
    {
      swift_bridgeObjectRelease(v12);
      v14 = 0;
      v20 = 4.5;
    }
    v21 = *(char **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartMask];
    v22 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX;
    *(double *)&v21[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX] = v20;
    objc_msgSend(v21, "setNeedsLayout");
    v23 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platterCenterXConstraint];
    if (v23)
      objc_msgSend(v23, "setConstant:", *(double *)&v21[v22]);
    v24 = sub_1001D3A58(v14);
    if (v24)
    {
      v25 = v24;
      v26 = sub_1001D3D4C(v14);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90];
        v29 = *(void **)(v28 + OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_topLabel);
        v30 = String._bridgeToObjectiveC()();
        objc_msgSend(v29, "setText:", v30);

        objc_msgSend(*(id *)(v28 + OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_bottomLabel), "setAttributedText:", v25);
        v31 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365];
        v32 = *(void **)(v31 + OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_topLabel);
        v33 = String._bridgeToObjectiveC()();
        objc_msgSend(v32, "setText:", v33);

        v3 = &selRef_tableView_titleForHeaderInSection_;
        objc_msgSend(*(id *)(v31 + OBJC_IVAR____TtC10FitnessApp25TrendsScrubberPlatterView_bottomLabel), "setAttributedText:", v27);
        v34 = (void *)objc_opt_self(UIView);
        v35 = swift_allocObject(&unk_10078D230, 24, 7);
        *(_QWORD *)(v35 + 16) = v1;
        v55 = sub_1001D8BA4;
        v56 = v35;
        v51 = _NSConcreteStackBlock;
        v52 = 1107296256;
        v53 = sub_10002D0F8;
        v54 = &unk_10078D248;
        v36 = _Block_copy(&v51);
        v37 = v56;
        v38 = v1;
        swift_release(v37);
        objc_msgSend(v34, "animateWithDuration:animations:", v36, 0.1);
        _Block_release(v36);

LABEL_24:
        if (objc_msgSend(a1, v3[361]) == (id)1)
        {
          objc_msgSend(v1, "layoutIfNeeded");
          return;
        }
        v39 = (void *)objc_opt_self(UIView);
        v47 = swift_allocObject(&unk_10078D1E0, 24, 7);
        *(_QWORD *)(v47 + 16) = v1;
        v55 = sub_1001D8B94;
        v56 = v47;
        v51 = _NSConcreteStackBlock;
        v52 = 1107296256;
        v41 = &unk_10078D1F8;
        goto LABEL_27;
      }

    }
    v42 = (void *)objc_opt_self(UIView);
    v43 = swift_allocObject(&unk_10078D190, 24, 7);
    *(_QWORD *)(v43 + 16) = v1;
    v55 = sub_1001D8B8C;
    v56 = v43;
    v51 = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_10002D0F8;
    v54 = &unk_10078D1A8;
    v44 = _Block_copy(&v51);
    v45 = v56;
    v46 = v1;
    swift_release(v45);
    objc_msgSend(v42, "animateWithDuration:animations:", v44, 0.1);
    _Block_release(v44);
    goto LABEL_24;
  }
  if (objc_msgSend(a1, "state") == (id)3 || objc_msgSend(a1, "state") == (id)4)
  {
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_chartContainer], "setMaskView:", 0);
    v39 = (void *)objc_opt_self(UIView);
    v40 = swift_allocObject(&unk_10078D140, 24, 7);
    *(_QWORD *)(v40 + 16) = v1;
    v55 = sub_1001D8B28;
    v56 = v40;
    v51 = _NSConcreteStackBlock;
    v52 = 1107296256;
    v41 = &unk_10078D158;
LABEL_27:
    v53 = sub_10002D0F8;
    v54 = v41;
    v48 = _Block_copy(&v51);
    v49 = v56;
    v50 = v1;
    swift_release(v49);
    objc_msgSend(v39, "animateWithDuration:animations:", v48, 0.1, v51, v52);
    _Block_release(v48);
  }
}

uint64_t sub_1001D8408(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = v1;
  v3 = result;
  if (qword_10081D718 != -1)
    result = swift_once(&qword_10081D718, sub_1001D32C4);
  if (*(_QWORD *)(qword_10086A0A0 + 16) <= v3)
    return 0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    v4 = sub_1001C84C8(*(_QWORD *)(qword_10086A0A0 + 8 * v3 + 32));
    if (v4 != 7)
    {
      v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 64);
      v16 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 80);
      v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 96);
      v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 112);
      v11 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90);
      v12 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 16);
      v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 32);
      v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram90 + 48);
      v5 = sub_1005B18B8(v4);
      if ((v6 & 1) == 0)
      {
        v7 = *(double *)&v5;
        sub_1000364C8(byte_10062BDE8[*(char *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type)]);
        v9 = v8;
        v10 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v8, v7, v11, v12, v13, v14, v15, v16, v17, v18);

        return (uint64_t)v10;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D856C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = v1;
  v3 = result;
  if (qword_10081D718 != -1)
    result = swift_once(&qword_10081D718, sub_1001D32C4);
  if (*(_QWORD *)(qword_10086A0A0 + 16) <= v3)
    return 0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    v4 = sub_1001C84C8(*(_QWORD *)(qword_10086A0A0 + 8 * v3 + 32));
    if (v4 != 7)
    {
      v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 64);
      v16 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 80);
      v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 96);
      v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 112);
      v11 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365);
      v12 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 16);
      v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 32);
      v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_histogram365 + 48);
      v5 = sub_1005B18B8(v4);
      if ((v6 & 1) == 0)
      {
        v7 = *(double *)&v5;
        sub_1000364C8(byte_10062BDE8[*(char *)(v2 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_type)]);
        v9 = v8;
        v10 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v8, v7, v11, v12, v13, v14, v15, v16, v17, v18);

        return (uint64_t)v10;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D86D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  UIContentSizeCategory v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  char v19;
  double v20;
  char *v21;
  uint64_t v22;
  void *v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  UIContentSizeCategory v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v2 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(7);
  v4 = sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  v5 = (void *)objc_opt_self(UIFont);
  v6 = 0;
  v7 = UIContentSizeCategoryExtraExtraExtraLarge;
  v33 = a1;
  v37 = UIContentSizeCategoryExtraExtraExtraLarge;
  while (1)
  {
    v12 = v4;
    v13 = sub_1004C2368();
    v14 = objc_msgSend(v5, "_preferredFontForTextStyle:variant:maximumContentSizeCategory:", UIFontTextStyleCaption2, 1024, v7);
    if (!v14)
      break;
    v15 = v14;
    objc_msgSend(v13, "setFont:", v14);

    objc_msgSend(v13, "setTextAlignment:", 0);
    objc_msgSend(v13, "setTextColor:", a1);
    if (qword_10081D718 != -1)
      swift_once(&qword_10081D718, sub_1001D32C4);
    if (v6 >= *(_QWORD *)(qword_10086A0A0 + 16))
    {
      v8 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(qword_10086A0A0 + 8 * v6 + 32);
      v17 = v16 - 1;
      if ((unint64_t)(v16 - 1) > 6)
      {
        v8 = 0;
      }
      else
      {
        v12 = sub_10043D900((uint64_t)&off_10077EED0);
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_18;
        v18 = sub_100439130(v17);
        if ((v19 & 1) == 0)
          goto LABEL_18;
        v20 = *(double *)(*(_QWORD *)(v12 + 56) + 8 * v18);
        swift_bridgeObjectRelease(v12);
        v21 = v34;
        Date.init(timeIntervalSinceReferenceDate:)(v22, v20);
        if (qword_10081D710 != -1)
          swift_once(&qword_10081D710, sub_1001C8234);
        v23 = (void *)qword_100825BC8;
        isa = Date._bridgeToObjectiveC()().super.isa;
        v25 = objc_msgSend(v23, "stringFromDate:", isa);

        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v36);
        v38 = v26;
        v39 = v28;
        v29 = sub_100038CA0();
        StringProtocol.localizedUppercase.getter(&type metadata for String, v29);
        v31 = v30;
        swift_bridgeObjectRelease(v28);
        v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v31);
        a1 = v33;
      }
      v7 = v37;
    }
    ++v6;
    objc_msgSend(v13, "setText:", v8, v33);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v10 = v40[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
    v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v13);
    specialized ContiguousArray._endMutation()(v11);
    if (v6 == 7)
      return (uint64_t)v40;
  }
  __break(1u);
LABEL_18:
  swift_bridgeObjectRelease(v12);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x800000010068EE50, "FitnessApp/ActivityDayOfWeek.swift", 34, 2, 35, 0);
  __break(1u);
  return result;
}

id sub_1001D8A60(id result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = (uint64_t)result;
  if (qword_10081D718 != -1)
    result = (id)swift_once(&qword_10081D718, sub_1001D32C4);
  if (*(_QWORD *)(qword_10086A0A0 + 16) <= v1)
    return 0;
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = sub_1001C84C8(*(_QWORD *)(qword_10086A0A0 + 8 * v1 + 32));
    if (v2 == 7)
      return 0;
    return objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v2 + 1);
  }
  return result;
}

uint64_t sub_1001D8B04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1001D8B28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel), "setAlpha:", 1.0);
}

id sub_1001D8B8C()
{
  return sub_1001D8BAC(0.0);
}

id sub_1001D8B94()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "layoutIfNeeded");
}

id sub_1001D8BA4()
{
  return sub_1001D8BAC(1.0);
}

id sub_1001D8BAC(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter90), "setAlpha:");
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_platter365), "setAlpha:", a1);
}

id sub_1001D8C00()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10FitnessApp27TrendDetailDailyAverageView_titleLabel), "setAlpha:", 0.3);
}

void destroy for IntervalsTargetView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

}

_QWORD *initializeWithCopy for IntervalsTargetView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

_QWORD *assignWithCopy for IntervalsTargetView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = v9;
  v11 = v9;

  return a1;
}

_QWORD *assignWithTake for IntervalsTargetView(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for IntervalsTargetView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IntervalsTargetView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IntervalsTargetView()
{
  return &type metadata for IntervalsTargetView;
}

uint64_t sub_1001D8E2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF0F4, 1);
}

void sub_1001D8E3C(double a1, double a2, __n128 a3, double a4, __n128 a5)
{
  a3.n128_u64[0] = 0x4052C00000000000;
  a5.n128_u64[0] = 0x4054000000000000;
  qword_10086A0A8 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(75.0, 80.0, a3, 80.0, a5, 84.0, 84.0);
}

void sub_1001D8E84()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  __n128 v7;
  __n128 v8;
  double v9;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "scale");
  v3 = v2;

  v4 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v4, "nativeScale");
  v6 = v5;

  v9 = 14.0;
  if (v3 == v6)
    v9 = 10.0;
  v7.n128_u64[0] = 10.0;
  v8.n128_u64[0] = 10.0;
  qword_10086A0B0 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v9, 10.0, v7, 10.0, v8, 10.0, 10.0);
}

void sub_1001D8F44()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  __n128 v7;
  __n128 v8;
  double v9;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "scale");
  v3 = v2;

  v4 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v4, "nativeScale");
  v6 = v5;

  v9 = 76.0;
  if (v3 == v6)
    v9 = 72.0;
  v7.n128_u64[0] = 0x4052C00000000000;
  v8.n128_u64[0] = 0x4054000000000000;
  qword_10086A0B8 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v9, 80.0, v7, 80.0, v8, 84.0, 84.0);
}

void sub_1001D9020()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  __n128 v7;
  __n128 v8;
  double v9;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "scale");
  v3 = v2;

  v4 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v4, "nativeScale");
  v6 = v5;

  v9 = 2.0;
  if (v3 == v6)
    v9 = 5.0;
  v7.n128_u64[0] = 5.0;
  v8.n128_u64[0] = 5.0;
  qword_10086A0C0 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v9, 5.0, v7, 5.0, v8, 5.0, 5.0);
}

uint64_t sub_1001D90E0@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t OpaqueTypeConformance2;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  void *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, char *, _QWORD *);
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  id v142;
  id v143;
  double v144;
  double v145;
  id v146;
  double v147;
  double v148;
  __n128 v149;
  __n128 v150;
  double v151;
  double v152;
  __n128 v153;
  __n128 v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v189;
  __n128 v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  _QWORD *v214;
  char *v215;
  char *v216;
  _QWORD *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  _QWORD *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[3];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  _BYTE v242[24];
  char v243;
  _BYTE v244[7];
  _BYTE v245[7];
  char v246;
  _BYTE v247[7];
  _BYTE v248[7];
  _BYTE v249[7];
  char v250;
  _BYTE v251[7];
  char v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  char v270;
  __int128 v271;

  v226 = a3;
  v231 = a4;
  v211 = sub_100047110(&qword_10081EFB0);
  v203 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v202 = (char *)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100047110(&qword_1008261F0);
  __chkstk_darwin(v207);
  v208 = (char *)&v202 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_100047110(&qword_1008261F8);
  __chkstk_darwin(v230);
  v210 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100047110(&qword_100826200);
  v206 = *(_QWORD *)(v209 - 8);
  v9 = __chkstk_darwin(v209);
  v204 = (char *)&v202 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v205 = (char *)&v202 - v11;
  v222 = (_QWORD *)sub_100047110(&qword_100826208);
  v214 = (_QWORD *)*(v222 - 1);
  v12 = __chkstk_darwin(v222);
  v212 = (char *)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v213 = (char *)&v202 - v14;
  v227 = sub_100047110(&qword_100826210);
  __chkstk_darwin(v227);
  v229 = (uint64_t)&v202 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100047110(&qword_100826218);
  __chkstk_darwin(v218);
  v219 = (char *)&v202 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_100047110(&qword_100826220);
  __chkstk_darwin(v228);
  v221 = (char *)&v202 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AccessibilityChildBehavior(0);
  v224 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v223 = (char *)&v202 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100047110(&qword_100826228);
  v217 = *(_QWORD **)(v220 - 8);
  v20 = __chkstk_darwin(v220);
  v215 = (char *)&v202 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v216 = (char *)&v202 - v22;
  v23 = type metadata accessor for UUID(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v202 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for StepType(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v202 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  v31 = MetricsPublisher.intervalsMetricsPublisher.getter(v30);
  v32 = swift_release(a1);
  v33 = IntervalsMetricsPublisher.intervalThisStep.getter(v32);
  v34 = swift_release(v31);
  v225 = v18;
  if (!v33)
  {
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v27 + 104))(v29, enum case for StepType.rest(_:), v26, v34);
    sub_100109248();
    v35 = static NLSessionActivityGoal.makeOpenGoal()();
    v36 = a2;
    UUID.init()(v36);
    v37 = type metadata accessor for WorkoutStep(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v33 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v29, v35, v36, v25, 0, 0);
  }
  v38 = (void *)WorkoutStep.activeHeartRateTargetZone.getter(v34);
  swift_release(v33);
  if (v38)
  {
    v39 = swift_retain(a1);
    v40 = MetricsPublisher.heartRateMetricsPublisher.getter(v39);
    swift_release(a1);
    v41 = type metadata accessor for HeartRateMetricsPublisher(0);
    v42 = sub_1000083D8(&qword_100826328, (uint64_t (*)(uint64_t))&type metadata accessor for HeartRateMetricsPublisher, (uint64_t)&protocol conformance descriptor for HeartRateMetricsPublisher);
    v214 = a2;
    swift_retain(v38);
    v43 = v226;
    v44 = ObservedObject.init(wrappedValue:)(v40, v41, v42);
    v46 = v45;
    v47 = static Edge.Set.leading.getter(v44);
    if (qword_10081DF40 != -1)
      swift_once(&qword_10081DF40, sub_1004E9C18);
    v48 = EdgeInsets.init(_all:)(-*(double *)&qword_10086AD28);
    v50 = v49;
    v52 = v51;
    v54 = v53;
    v55 = static Edge.Set.trailing.getter();
    v246 = 0;
    v243 = 1;
    if (qword_10081D728 != -1)
      swift_once(&qword_10081D728, sub_1001D8E84);
    v56 = qword_10086A0B0;
    v57 = v246;
    v58 = v243;
    if (qword_10081D720 != -1)
      swift_once(&qword_10081D720, sub_1001D8E3C);
    v59 = qword_10086A0A8;
    v60 = static Alignment.leading.getter();
    v62 = _FrameLayout.init(width:height:alignment:)(&v267, 0, 1, v59, 0, v60, v61);
    *(_DWORD *)((char *)&v235 + 1) = *(_DWORD *)v247;
    DWORD1(v235) = *(_DWORD *)&v247[3];
    *(_DWORD *)((char *)&v237 + 9) = *(_DWORD *)v245;
    HIDWORD(v237) = *(_DWORD *)&v245[3];
    *(_DWORD *)((char *)v238 + 1) = *(_DWORD *)v244;
    DWORD1(v238[0]) = *(_DWORD *)&v244[3];
    HIDWORD(v238[2]) = *(_DWORD *)&v248[3];
    *(_DWORD *)((char *)&v238[2] + 9) = *(_DWORD *)v248;
    v252 = v268;
    v250 = v270;
    *(_QWORD *)&v232 = v44;
    *((_QWORD *)&v232 + 1) = v46;
    *(_QWORD *)&v233 = v38;
    *((_QWORD *)&v233 + 1) = v43;
    *(_QWORD *)&v234 = v214;
    *((_QWORD *)&v234 + 1) = 0x4014000000000000;
    LOBYTE(v235) = v47;
    *((double *)&v235 + 1) = v48;
    *(_QWORD *)&v236 = v50;
    *((_QWORD *)&v236 + 1) = v52;
    *(_QWORD *)&v237 = v54;
    BYTE8(v237) = v57;
    LOBYTE(v238[0]) = v55;
    *(_OWORD *)((char *)&v238[1] + 8) = 0u;
    *(_OWORD *)((char *)v238 + 8) = 0u;
    BYTE8(v238[2]) = v58;
    *(_QWORD *)&v239 = 0;
    *((_QWORD *)&v239 + 1) = v56;
    *(_QWORD *)&v240 = v267;
    BYTE8(v240) = v268;
    HIDWORD(v240) = *(_DWORD *)&v251[3];
    *(_DWORD *)((char *)&v240 + 9) = *(_DWORD *)v251;
    *(_QWORD *)&v241 = v269;
    BYTE8(v241) = v270;
    HIDWORD(v241) = *(_DWORD *)&v249[3];
    *(_DWORD *)((char *)&v241 + 9) = *(_DWORD *)v249;
    *(_OWORD *)v242 = v271;
    v63 = v223;
    static AccessibilityChildBehavior.combine.getter(v62);
    v64 = sub_100047110(&qword_100826280);
    v65 = sub_1000E0A18(&qword_100826288, &qword_100826280, (void (*)(void))sub_1001DA734);
    v66 = v215;
    View.accessibilityElement(children:)(v63, v64, v65);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v63, v225);
    v263 = v240;
    v264 = v241;
    v265 = *(_OWORD *)v242;
    v259 = v238[0];
    v260 = v238[1];
    v261 = v238[2];
    v262 = v239;
    v255 = v234;
    v256 = v235;
    v257 = v236;
    v258 = v237;
    v253 = v232;
    v254 = v233;
    sub_1001DA95C((uint64_t)&v253);
    v67 = v217;
    v68 = (void (*)(char *, char *, uint64_t))v217[4];
    v226 = v38;
    v69 = v216;
    v70 = v66;
    v71 = (_QWORD *)v220;
    v68(v216, v70, v220);
    v72 = v219;
    ((void (*)(char *, char *, _QWORD *))v67[2])(v219, v69, v71);
    swift_storeEnumTagMultiPayload(v72, v218, 0);
    *(_QWORD *)&v232 = v64;
    *((_QWORD *)&v232 + 1) = v65;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v74 = sub_100007050(&qword_1008262C8);
    v75 = sub_1000E0A18(&qword_1008262D0, &qword_1008262C8, (void (*)(void))sub_1001DA7E4);
    *(_QWORD *)&v232 = v74;
    *((_QWORD *)&v232 + 1) = v75;
    v76 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v77 = (uint64_t)v221;
    _ConditionalContent<>.init(storage:)(v72, v71, v222, OpaqueTypeConformance2, v76);
    v78 = &qword_100826220;
    v79 = v229;
    sub_100021CC0(v77, v229, &qword_100826220);
    swift_storeEnumTagMultiPayload(v79, v227, 0);
    v80 = sub_1001DA628();
    v81 = sub_1001DA894();
    _ConditionalContent<>.init(storage:)(v79, v228, v230, v80, v81);
    swift_release(v226);
    v82 = v77;
    goto LABEL_34;
  }
  swift_retain(a1);
  v84 = MetricsPublisher.intervalsMetricsPublisher.getter(v83);
  v85 = swift_release(a1);
  v86 = IntervalsMetricsPublisher.intervalThisStep.getter(v85);
  v87 = swift_release(v84);
  if (!v86)
  {
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v27 + 104))(v29, enum case for StepType.rest(_:), v26, v87);
    sub_100109248();
    v88 = static NLSessionActivityGoal.makeOpenGoal()();
    v89 = a2;
    UUID.init()(v89);
    v90 = type metadata accessor for WorkoutStep(0);
    swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
    v86 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v29, v88, v89, v25, 0, 0);
  }
  v91 = (void *)WorkoutStep.activePowerZonesAlertTargetZone.getter(v87);
  swift_release(v86);
  if (v91)
  {
    v92 = swift_retain(a1);
    v93 = MetricsPublisher.powerMetricsPublisher.getter(v92);
    swift_release(a1);
    v94 = type metadata accessor for PowerMetricsPublisher(0);
    v95 = sub_1000083D8(&qword_100826320, (uint64_t (*)(uint64_t))&type metadata accessor for PowerMetricsPublisher, (uint64_t)&protocol conformance descriptor for PowerMetricsPublisher);
    v217 = a2;
    swift_retain(v91);
    v96 = v226;
    v97 = ObservedObject.init(wrappedValue:)(v93, v94, v95);
    v99 = v98;
    v100 = static Edge.Set.leading.getter(v97);
    if (qword_10081DF40 != -1)
      swift_once(&qword_10081DF40, sub_1004E9C18);
    v101 = EdgeInsets.init(_all:)(-*(double *)&qword_10086AD28);
    v103 = v102;
    v105 = v104;
    v107 = v106;
    v108 = static Edge.Set.trailing.getter();
    v246 = 0;
    v243 = 1;
    if (qword_10081D728 != -1)
      swift_once(&qword_10081D728, sub_1001D8E84);
    v109 = qword_10086A0B0;
    v110 = v246;
    v111 = v243;
    if (qword_10081D720 != -1)
      swift_once(&qword_10081D720, sub_1001D8E3C);
    v112 = qword_10086A0A8;
    v113 = static Alignment.leading.getter();
    v115 = _FrameLayout.init(width:height:alignment:)(&v267, 0, 1, v112, 0, v113, v114);
    *(_DWORD *)((char *)&v235 + 1) = *(_DWORD *)v247;
    DWORD1(v235) = *(_DWORD *)&v247[3];
    *(_DWORD *)((char *)&v237 + 9) = *(_DWORD *)v245;
    HIDWORD(v237) = *(_DWORD *)&v245[3];
    *(_DWORD *)((char *)v238 + 1) = *(_DWORD *)v244;
    DWORD1(v238[0]) = *(_DWORD *)&v244[3];
    HIDWORD(v238[2]) = *(_DWORD *)&v248[3];
    *(_DWORD *)((char *)&v238[2] + 9) = *(_DWORD *)v248;
    v252 = v268;
    v250 = v270;
    *(_QWORD *)&v232 = v97;
    *((_QWORD *)&v232 + 1) = v99;
    *(_QWORD *)&v233 = v91;
    *((_QWORD *)&v233 + 1) = v96;
    *(_QWORD *)&v234 = v217;
    *((_QWORD *)&v234 + 1) = 0x4014000000000000;
    LOBYTE(v235) = v100;
    *((double *)&v235 + 1) = v101;
    *(_QWORD *)&v236 = v103;
    *((_QWORD *)&v236 + 1) = v105;
    *(_QWORD *)&v237 = v107;
    BYTE8(v237) = v110;
    LOBYTE(v238[0]) = v108;
    *(_OWORD *)((char *)&v238[1] + 8) = 0u;
    *(_OWORD *)((char *)v238 + 8) = 0u;
    BYTE8(v238[2]) = v111;
    *(_QWORD *)&v239 = 0;
    *((_QWORD *)&v239 + 1) = v109;
    *(_QWORD *)&v240 = v267;
    BYTE8(v240) = v268;
    HIDWORD(v240) = *(_DWORD *)&v251[3];
    *(_DWORD *)((char *)&v240 + 9) = *(_DWORD *)v251;
    *(_QWORD *)&v241 = v269;
    BYTE8(v241) = v270;
    HIDWORD(v241) = *(_DWORD *)&v249[3];
    *(_DWORD *)((char *)&v241 + 9) = *(_DWORD *)v249;
    *(_OWORD *)v242 = v271;
    v116 = v223;
    static AccessibilityChildBehavior.combine.getter(v115);
    v117 = sub_100047110(&qword_1008262C8);
    v118 = sub_1000E0A18(&qword_1008262D0, &qword_1008262C8, (void (*)(void))sub_1001DA7E4);
    v119 = v212;
    View.accessibilityElement(children:)(v116, v117, v118);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v116, v225);
    v263 = v240;
    v264 = v241;
    v265 = *(_OWORD *)v242;
    v259 = v238[0];
    v260 = v238[1];
    v261 = v238[2];
    v262 = v239;
    v255 = v234;
    v256 = v235;
    v257 = v236;
    v258 = v237;
    v253 = v232;
    v254 = v233;
    sub_1001DA95C((uint64_t)&v253);
    v67 = v214;
    v120 = (void (*)(char *, char *, _QWORD *))v214[4];
    v226 = v91;
    v69 = v213;
    v121 = v119;
    v71 = v222;
    v120(v213, v121, v222);
    v122 = v219;
    ((void (*)(char *, char *, _QWORD *))v67[2])(v219, v69, v71);
    swift_storeEnumTagMultiPayload(v122, v218, 1);
    v123 = sub_100007050(&qword_100826280);
    v124 = sub_1000E0A18(&qword_100826288, &qword_100826280, (void (*)(void))sub_1001DA734);
    *(_QWORD *)&v232 = v123;
    *((_QWORD *)&v232 + 1) = v124;
    v125 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    *(_QWORD *)&v232 = v117;
    *((_QWORD *)&v232 + 1) = v118;
    v126 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v127 = (uint64_t)v221;
    _ConditionalContent<>.init(storage:)(v122, v220, v71, v125, v126);
    v78 = &qword_100826220;
    v128 = v229;
    sub_100021CC0(v127, v229, &qword_100826220);
    swift_storeEnumTagMultiPayload(v128, v227, 0);
    v129 = sub_1001DA628();
    v130 = sub_1001DA894();
    _ConditionalContent<>.init(storage:)(v128, v228, v230, v129, v130);
    v131 = (uint64_t)v226;
LABEL_33:
    swift_release(v131);
    v82 = v127;
LABEL_34:
    sub_10001BE90(v82, v78);
    return ((uint64_t (*)(char *, _QWORD *))v67[1])(v69, v71);
  }
  swift_retain(a1);
  v133 = MetricsPublisher.intervalsMetricsPublisher.getter(v132);
  v134 = swift_release(a1);
  v135 = IntervalsMetricsPublisher.intervalThisStep.getter(v134);
  v136 = swift_release(v133);
  if (!v135)
  {
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v27 + 104))(v29, enum case for StepType.rest(_:), v26, v136);
    sub_100109248();
    v137 = static NLSessionActivityGoal.makeOpenGoal()();
    v138 = a2;
    UUID.init()(v138);
    v139 = type metadata accessor for WorkoutStep(0);
    swift_allocObject(v139, *(unsigned int *)(v139 + 48), *(unsigned __int16 *)(v139 + 52));
    v135 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v29, v137, v138, v25, 0, 0);
  }
  v140 = WorkoutStep.activeTargetZone.getter(v136);
  swift_release(v135);
  if (v140)
  {
    v141 = (void *)objc_opt_self(UIScreen);
    swift_retain(a1);
    v222 = a2;
    swift_retain(v140);
    v142 = v226;
    v143 = objc_msgSend(v141, "mainScreen");
    objc_msgSend(v143, "scale");
    v145 = v144;

    v146 = objc_msgSend(v141, "mainScreen");
    objc_msgSend(v146, "nativeScale");
    v148 = v147;

    v151 = -2.0;
    if (v145 == v148)
      v151 = -6.0;
    v149.n128_u64[0] = -6.0;
    v150.n128_u64[0] = -6.0;
    v152 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v151, -6.0, v149, -6.0, v150, -6.0, -6.0);
    v153.n128_u64[0] = -4.0;
    v154.n128_u64[0] = -4.0;
    v155 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(-4.0, -4.0, v153, -4.0, v154, -4.0, -4.0);
    v156 = type metadata accessor for MetricsPublisher(0);
    v157 = sub_1000083D8((unint64_t *)&qword_100826318, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsPublisher, (uint64_t)&protocol conformance descriptor for MetricsPublisher);
    v158 = ObservedObject.init(wrappedValue:)(a1, v156, v157);
    v160 = v159;
    v161 = static Edge.Set.leading.getter(v158);
    if (qword_10081DF40 != -1)
      swift_once(&qword_10081DF40, sub_1004E9C18);
    v162 = EdgeInsets.init(_all:)(-*(double *)&qword_10086AD28);
    v164 = v163;
    v166 = v165;
    v168 = v167;
    v169 = static Edge.Set.trailing.getter();
    v246 = 0;
    v243 = 1;
    if (qword_10081D728 != -1)
      swift_once(&qword_10081D728, sub_1001D8E84);
    v170 = qword_10086A0B0;
    v171 = v246;
    v172 = v243;
    if (qword_10081D720 != -1)
      swift_once(&qword_10081D720, sub_1001D8E3C);
    v173 = qword_10086A0A8;
    v174 = static Alignment.leading.getter();
    v176 = _FrameLayout.init(width:height:alignment:)(&v267, 0, 1, v173, 0, v174, v175);
    *(_DWORD *)((char *)&v235 + 9) = *(_DWORD *)v247;
    HIDWORD(v235) = *(_DWORD *)&v247[3];
    *(_DWORD *)((char *)v238 + 1) = *(_DWORD *)v245;
    DWORD1(v238[0]) = *(_DWORD *)&v245[3];
    *(_DWORD *)((char *)v238 + 9) = *(_DWORD *)v244;
    HIDWORD(v238[0]) = *(_DWORD *)&v244[3];
    DWORD1(v239) = *(_DWORD *)&v248[3];
    *(_DWORD *)((char *)&v239 + 1) = *(_DWORD *)v248;
    v252 = v268;
    v250 = v270;
    *(_QWORD *)&v232 = v158;
    *((_QWORD *)&v232 + 1) = v160;
    *(_QWORD *)&v233 = v140;
    *((_QWORD *)&v233 + 1) = v142;
    *(_QWORD *)&v234 = v222;
    *((double *)&v234 + 1) = v152;
    *(double *)&v235 = v155;
    BYTE8(v235) = v161;
    *(double *)&v236 = v162;
    *((_QWORD *)&v236 + 1) = v164;
    *(_QWORD *)&v237 = v166;
    *((_QWORD *)&v237 + 1) = v168;
    LOBYTE(v238[0]) = v171;
    BYTE8(v238[0]) = v169;
    memset(&v238[1], 0, 32);
    LOBYTE(v239) = v172;
    *((_QWORD *)&v239 + 1) = 0;
    *(_QWORD *)&v240 = v170;
    *((_QWORD *)&v240 + 1) = v267;
    LOBYTE(v241) = v268;
    DWORD1(v241) = *(_DWORD *)&v251[3];
    *(_DWORD *)((char *)&v241 + 1) = *(_DWORD *)v251;
    *((_QWORD *)&v241 + 1) = v269;
    v242[0] = v270;
    *(_DWORD *)&v242[4] = *(_DWORD *)&v249[3];
    *(_DWORD *)&v242[1] = *(_DWORD *)v249;
    *(_OWORD *)&v242[8] = v271;
    v177 = v223;
    static AccessibilityChildBehavior.combine.getter(v176);
    v178 = sub_100047110(&qword_100826230);
    v179 = sub_1000E0A18(&qword_100826238, &qword_100826230, (void (*)(void))sub_1001DA578);
    v180 = v204;
    View.accessibilityElement(children:)(v177, v178, v179);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v177, v225);
    v263 = v240;
    v264 = v241;
    v265 = *(_OWORD *)v242;
    v266 = *(_QWORD *)&v242[16];
    v259 = v238[0];
    v260 = v238[1];
    v261 = v238[2];
    v262 = v239;
    v255 = v234;
    v256 = v235;
    v257 = v236;
    v258 = v237;
    v253 = v232;
    v254 = v233;
    sub_1001DA95C((uint64_t)&v253);
    v69 = v205;
    v67 = (_QWORD *)v206;
    v181 = v180;
    v71 = (_QWORD *)v209;
    (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v205, v181, v209);
    v182 = v208;
    ((void (*)(char *, char *, _QWORD *))v67[2])(v208, v69, v71);
    swift_storeEnumTagMultiPayload(v182, v207, 0);
    *(_QWORD *)&v232 = v178;
    *((_QWORD *)&v232 + 1) = v179;
    v183 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v184 = swift_getOpaqueTypeConformance2(v183, &opaque type descriptor for <<opaque return type of static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)>>, 1);
    v127 = (uint64_t)v210;
    _ConditionalContent<>.init(storage:)(v182, v71, v211, v183, v184);
    v78 = &qword_1008261F8;
    v185 = v229;
    sub_100021CC0(v127, v229, &qword_1008261F8);
    swift_storeEnumTagMultiPayload(v185, v227, 1);
    v186 = sub_1001DA628();
    v187 = sub_1001DA894();
    _ConditionalContent<>.init(storage:)(v185, v228, v230, v186, v187);
    v131 = v140;
    goto LABEL_33;
  }
  swift_retain(a1);
  v189 = v202;
  static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)(5, v226, a2, a1);
  v190 = swift_release(a1);
  v191 = v203;
  v192 = v208;
  v193 = v211;
  (*(void (**)(char *, char *, uint64_t, __n128))(v203 + 16))(v208, v189, v211, v190);
  swift_storeEnumTagMultiPayload(v192, v207, 1);
  v194 = sub_100007050(&qword_100826230);
  v195 = sub_1000E0A18(&qword_100826238, &qword_100826230, (void (*)(void))sub_1001DA578);
  *(_QWORD *)&v253 = v194;
  *((_QWORD *)&v253 + 1) = v195;
  v196 = swift_getOpaqueTypeConformance2(&v253, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v197 = swift_getOpaqueTypeConformance2(v196, &opaque type descriptor for <<opaque return type of static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)>>, 1);
  v198 = (uint64_t)v210;
  _ConditionalContent<>.init(storage:)(v192, v209, v193, v196, v197);
  v199 = v229;
  sub_100021CC0(v198, v229, &qword_1008261F8);
  swift_storeEnumTagMultiPayload(v199, v227, 1);
  v200 = sub_1001DA628();
  v201 = sub_1001DA894();
  _ConditionalContent<>.init(storage:)(v199, v228, v230, v200, v201);
  sub_10001BE90(v198, &qword_1008261F8);
  return (*(uint64_t (**)(char *, uint64_t))(v191 + 8))(v189, v193);
}

uint64_t sub_1001DA56C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001D90E0(*(_QWORD *)(v1 + 8), *(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1001DA578()
{
  return sub_1000E0A18(&qword_100826240, &qword_100826248, (void (*)(void))sub_1001DA59C);
}

uint64_t sub_1001DA59C()
{
  return sub_1000E0A18(&qword_100826250, &qword_100826258, (void (*)(void))sub_1001DA5C0);
}

uint64_t sub_1001DA5C0()
{
  return sub_1000E0A18(&qword_100826260, &qword_100826268, (void (*)(void))sub_1001DA5E4);
}

unint64_t sub_1001DA5E4()
{
  unint64_t result;

  result = qword_100826270;
  if (!qword_100826270)
  {
    result = swift_getWitnessTable(&unk_100634180, &type metadata for IntervalsActiveTargetZoneView);
    atomic_store(result, (unint64_t *)&qword_100826270);
  }
  return result;
}

unint64_t sub_1001DA628()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_100826278;
  if (!qword_100826278)
  {
    v1 = sub_100007050(&qword_100826220);
    v4 = sub_100007050(&qword_100826280);
    v5 = sub_1000E0A18(&qword_100826288, &qword_100826280, (void (*)(void))sub_1001DA734);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v2 = sub_100007050(&qword_1008262C8);
    v3 = sub_1000E0A18(&qword_1008262D0, &qword_1008262C8, (void (*)(void))sub_1001DA7E4);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826278);
  }
  return result;
}

uint64_t sub_1001DA734()
{
  return sub_1000E0A18(&qword_100826290, &qword_100826298, (void (*)(void))sub_1001DA758);
}

uint64_t sub_1001DA758()
{
  return sub_1000E0A18(&qword_1008262A0, &qword_1008262A8, (void (*)(void))sub_1001DA77C);
}

uint64_t sub_1001DA77C()
{
  return sub_1000E0A18(&qword_1008262B0, &qword_1008262B8, (void (*)(void))sub_1001DA7A0);
}

unint64_t sub_1001DA7A0()
{
  unint64_t result;

  result = qword_1008262C0;
  if (!qword_1008262C0)
  {
    result = swift_getWitnessTable(&unk_1006353E4, &type metadata for IntervalsHRZoneView);
    atomic_store(result, (unint64_t *)&qword_1008262C0);
  }
  return result;
}

uint64_t sub_1001DA7E4()
{
  return sub_1000E0A18(&qword_1008262D8, &qword_1008262E0, (void (*)(void))sub_1001DA808);
}

uint64_t sub_1001DA808()
{
  return sub_1000E0A18(&qword_1008262E8, &qword_1008262F0, (void (*)(void))sub_1001DA82C);
}

uint64_t sub_1001DA82C()
{
  return sub_1000E0A18(&qword_1008262F8, &qword_100826300, (void (*)(void))sub_1001DA850);
}

unint64_t sub_1001DA850()
{
  unint64_t result;

  result = qword_100826308;
  if (!qword_100826308)
  {
    result = swift_getWitnessTable(&unk_100640E38, &type metadata for IntervalsPowerZoneView);
    atomic_store(result, (unint64_t *)&qword_100826308);
  }
  return result;
}

unint64_t sub_1001DA894()
{
  unint64_t result;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  _QWORD v3[2];

  result = qword_100826310;
  if (!qword_100826310)
  {
    v1 = sub_100007050(&qword_1008261F8);
    v3[0] = sub_100007050(&qword_100826230);
    v3[1] = sub_1000E0A18(&qword_100826238, &qword_100826230, (void (*)(void))sub_1001DA578);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    swift_getOpaqueTypeConformance2(OpaqueTypeConformance2, &opaque type descriptor for <<opaque return type of static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826310);
  }
  return result;
}

uint64_t sub_1001DA95C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 24);

  swift_release(v3);
  swift_release(v2);
  return a1;
}

unint64_t sub_1001DA9A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826330;
  if (!qword_100826330)
  {
    v1 = sub_100007050(&qword_100826338);
    sub_1001DA628();
    sub_1001DA894();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826330);
  }
  return result;
}

uint64_t sub_1001DAA14(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v17;

  *(_WORD *)(v5 + 64) = 0;
  v11 = sub_100047110((uint64_t *)&unk_1008361E0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&v17, 0, 0, v11);
  *(_OWORD *)(v5 + 16) = v17;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 56) = a5;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  sub_10000BD30();
  objc_msgSend(v14, "addObserver:", v5, swift_retain(v5).n128_f64[0]);
  swift_release(v5);
  swift_release(a1);

  return v5;
}

uint64_t sub_1001DAB04()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  id v7;
  _QWORD v9[2];
  char v10;

  v1 = *(void **)(v0 + 32);
  v2 = *(void **)(v0 + 48);
  v3 = *(id *)(v0 + 40);
  v4 = v1;
  LODWORD(v2) = objc_msgSend(v2, "isWheelchairUser");
  v5 = *(unsigned __int8 *)(v0 + 64);
  v6 = type metadata accessor for UnitsSettingsDataProvider(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v9[0] = sub_1001DBF4C;
  v9[1] = sub_1000F8474(v3, v4, (int)v2, v5);
  v10 = 0;
  v7 = objc_allocWithZone((Class)sub_100047110(&qword_1008264C0));
  return UIHostingController.init(rootView:)(v9);
}

char *sub_1001DABB8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char v3;
  id v4;

  if ((sub_1001DB2B0() & 1) == 0)
    return 0;
  v1 = *(void **)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 64);
  v4 = objc_allocWithZone((Class)type metadata accessor for MoveModeSettingsViewController());
  return sub_10038D0AC(v1, v2, v3);
}

uint64_t sub_1001DAC1C()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 48), "removeObserver:", v0);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 66, 7);
}

uint64_t sub_1001DAC74(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[5] = a4;
  v5[6] = a5;
  v7 = type metadata accessor for AccountFitnessSettingsChanged(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v5[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_task_alloc(dword_10082636C);
  v5[16] = v13;
  *v13 = v5;
  v13[1] = sub_1001DAD58;
  v13[3] = a4;
  v13[4] = *a4;
  return swift_task_switch(sub_10000CAD0, 0, 0);
}

uint64_t sub_1001DAD58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001DADB4, 0, 0);
}

uint64_t sub_1001DADB4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  uint64_t v31;
  NSObject *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *log;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *(void **)(v1 + 136);
  if (v2)
  {
    v3 = static os_log_type_t.default.getter(a1);
    v4 = (void *)HKLogActivity;
    v5 = v3;
    if (os_log_type_enabled(HKLogActivity, v3))
    {
      v42 = *(_QWORD *)(v1 + 136);
      v6 = *(_QWORD *)(v1 + 48);
      v7 = v2;
      log = v4;
      v8 = swift_slowAlloc(22, -1);
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      v41 = swift_slowAlloc(32, -1);
      v43 = v41;
      *(_DWORD *)v8 = 136315394;
      v10 = _typeName(_:qualified:)(v6, 0);
      v12 = v11;
      *(_QWORD *)(v1 + 24) = sub_10003E8EC(v10, v11, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v8 + 4);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v8 + 12) = 2112;
      *(_QWORD *)(v1 + 32) = v7;
      v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v8 + 14);
      *v9 = v42;

      _os_log_impl((void *)&_mh_execute_header, log, v5, "%s last move mode sample: %@", (uint8_t *)v8, 0x16u);
      v14 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v9, 1, v14);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    v16 = *(_QWORD *)(v1 + 112);
    v15 = *(_QWORD *)(v1 + 120);
    v18 = *(_QWORD *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 104);
    v19 = *(_QWORD *)(v1 + 80);
    v20 = *(_QWORD *)(v1 + 88);
    v21 = *(_QWORD *)(v1 + 40);
    v22 = objc_msgSend(v2, "value");
    *(_BYTE *)(v21 + 64) = v22 == (id)2;
    static Calendar.current.getter(v22);
    v23 = objc_msgSend(v2, "_creationDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    LOBYTE(v23) = Calendar.isDateInToday(_:)(v18);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_BYTE *)(v21 + 65) = v23 & 1;
    v24 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v1 + 144) = static MainActor.shared.getter(v24);
    v25 = dispatch thunk of Actor.unownedExecutor.getter(v24, &protocol witness table for MainActor);
    return swift_task_switch(sub_1001DB1C4, v25, v26);
  }
  else
  {
    v28 = static os_log_type_t.default.getter(a1);
    v29 = (void *)HKLogActivity;
    v30 = v28;
    if (os_log_type_enabled(HKLogActivity, v28))
    {
      v31 = *(_QWORD *)(v1 + 48);
      v32 = v29;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v43 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = _typeName(_:qualified:)(v31, 0);
      v37 = v36;
      *(_QWORD *)(v1 + 16) = sub_10003E8EC(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v33 + 4);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v32, v30, "%s no last move mode sample; defaulting isAppleMoveTime and didSwitchMoveModeToday to false",
        v33,
        0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    v38 = *(_QWORD *)(v1 + 96);
    v39 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 120));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1001DB1C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  __n128 v8;
  unint64_t v9;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  v4 = v0[5];
  swift_release(v0[18]);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  ObjectType = swift_getObjectType(v5);
  AccountFitnessSettingsChanged.init()(v8);
  v9 = sub_1001DBD9C();
  dispatch thunk of EventHubProtocol.publish<A>(_:)(v1, v3, v9, ObjectType, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1001DB260, 0, 0);
}

uint64_t sub_1001DB260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001DB2B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  NSObject *v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  id v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  Class isa;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  void *v66;
  os_log_type_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  os_log_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  void *v79;
  os_log_type_t v80;
  NSObject *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD v96[3];
  char v97[8];
  _QWORD v98[3];
  char v99[8];
  uint64_t v100;
  uint64_t v101;
  id v102;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v3);
  v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)v0[4];
  v102 = 0;
  v11 = objc_msgSend(v10, "wheelchairUseWithError:", &v102);
  v12 = v102;
  if (v11)
  {
    v13 = v11;
    v14 = v102;
    v15 = objc_msgSend(v13, "wheelchairUse");

    if (v15 == (id)2)
    {
      v17 = static os_log_type_t.default.getter(v16);
      v18 = (void *)HKLogActivity;
      v19 = v17;
      if (os_log_type_enabled(HKLogActivity, v17))
      {
        v20 = v18;
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = (void *)swift_slowAlloc(32, -1);
        v102 = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = _typeName(_:qualified:)(v2, 0);
        v25 = v24;
        v100 = sub_10003E8EC(v23, v24, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v21 + 4);
        swift_bridgeObjectRelease(v25);
        _os_log_impl((void *)&_mh_execute_header, v20, v19, "%s - user is in wheelchair mode", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);

      }
      return 0;
    }
  }
  else
  {
    v94 = v7;
    v95 = v9;
    v27 = v2;
    v28 = v102;
    v29 = _convertNSErrorToError(_:)(v12);

    v31 = swift_willThrow(v30);
    v32 = static os_log_type_t.error.getter(v31);
    v33 = (void *)HKLogActivity;
    v34 = v32;
    if (os_log_type_enabled(HKLogActivity, v32))
    {
      swift_errorRetain(v29);
      swift_errorRetain(v29);
      v92 = v33;
      v35 = swift_slowAlloc(22, -1);
      v36 = (void *)swift_slowAlloc(64, -1);
      v102 = v36;
      *(_DWORD *)v35 = 136315394;
      v91 = v27;
      v37 = _typeName(_:qualified:)(v27, 0);
      v39 = v38;
      v100 = sub_10003E8EC(v37, v38, (uint64_t *)&v102);
      v93 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v35 + 4);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v35 + 12) = 2080;
      swift_getErrorValue(v29, v97, v96);
      v40 = Error.localizedDescription.getter(v96[1], v96[2]);
      v42 = v41;
      v100 = sub_10003E8EC(v40, v41, (uint64_t *)&v102);
      v6 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v35 + 14);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      v43 = v92;
      v44 = v34;
      v2 = v91;
      _os_log_impl((void *)&_mh_execute_header, v92, v44, "%s failed to load wheelchair status with error: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
      swift_errorRelease(v29);

    }
    else
    {
      v16 = swift_errorRelease(v29);
      v2 = v27;
    }
    v7 = v94;
    v9 = v95;
  }
  if ((v1[8] & 1) != 0 || *((_BYTE *)v1 + 65) == 1)
  {
    v45 = static os_log_type_t.default.getter(v16);
    v46 = HKLogActivity;
    swift_retain_n(v1, 2);
    if (os_log_type_enabled(v46, v45))
    {
      swift_retain_n(v1, 2);
      v47 = v46;
      v48 = swift_slowAlloc(24, -1);
      v49 = (void *)swift_slowAlloc(32, -1);
      v102 = v49;
      *(_DWORD *)v48 = 136315650;
      v50 = _typeName(_:qualified:)(v2, 0);
      v52 = v51;
      v100 = sub_10003E8EC(v50, v51, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v48 + 4);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v48 + 12) = 1024;
      v53 = *((unsigned __int8 *)v1 + 64);
      swift_release(v1);
      LODWORD(v100) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v48 + 14);
      swift_release(v1);
      *(_WORD *)(v48 + 18) = 1024;
      LODWORD(v52) = *((unsigned __int8 *)v1 + 65);
      swift_release(v1);
      LODWORD(v100) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v48 + 20);
      swift_release(v1);
      _os_log_impl((void *)&_mh_execute_header, v47, v45, "%s - isAppleMoveTime %{BOOL}d didSwitchMoveModeToday %{BOOL}d", (uint8_t *)v48, 0x18u);
      v26 = 1;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {
      swift_release_n(v1, 2);
      return 1;
    }
  }
  else
  {
    v102 = 0;
    v55 = objc_msgSend(v10, "dateOfBirthComponentsWithError:", &v102);
    v56 = v102;
    if (!v55)
    {
      v74 = v102;
      v75 = _convertNSErrorToError(_:)(v56);

      v77 = swift_willThrow(v76);
      v78 = static os_log_type_t.error.getter(v77);
      v79 = (void *)HKLogActivity;
      v80 = v78;
      if (os_log_type_enabled(HKLogActivity, v78))
      {
        swift_errorRetain(v75);
        swift_errorRetain(v75);
        v81 = v79;
        v82 = swift_slowAlloc(22, -1);
        v83 = (void *)swift_slowAlloc(64, -1);
        v102 = v83;
        *(_DWORD *)v82 = 136315394;
        v84 = _typeName(_:qualified:)(v2, 0);
        v86 = v85;
        v100 = sub_10003E8EC(v84, v85, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v82 + 4);
        swift_bridgeObjectRelease(v86);
        *(_WORD *)(v82 + 12) = 2080;
        swift_getErrorValue(v75, v99, v98);
        v87 = Error.localizedDescription.getter(v98[1], v98[2]);
        v89 = v88;
        v100 = sub_10003E8EC(v87, v88, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v82 + 14);
        swift_bridgeObjectRelease(v89);
        swift_errorRelease(v75);
        swift_errorRelease(v75);
        _os_log_impl((void *)&_mh_execute_header, v81, v80, "%s failed to load date of birth components with error: %s", (uint8_t *)v82, 0x16u);
        swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v82, -1, -1);
        swift_errorRelease(v75);

      }
      else
      {
        swift_errorRelease(v75);
      }
      return 0;
    }
    v57 = v55;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v56;

    v95 = v9;
    DateComponents.date.getter();
    v59 = type metadata accessor for Date(0);
    v60 = *(_QWORD *)(v59 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v5, 1, v59) != 1)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v5, v59);
    }
    v62 = FIAgeInYearsForDateOfBirth(isa);

    v63 = kActivityMoveModeMoveTimeMaximumAge;
    v26 = kActivityMoveModeMoveTimeMaximumAge >= v62;
    v65 = static os_log_type_t.default.getter(v64);
    v66 = (void *)HKLogActivity;
    v67 = v65;
    if (os_log_type_enabled(HKLogActivity, v65))
    {
      v92 = v66;
      v68 = swift_slowAlloc(28, -1);
      v69 = (void *)swift_slowAlloc(32, -1);
      v102 = v69;
      *(_DWORD *)v68 = 136315650;
      v94 = v7;
      v70 = _typeName(_:qualified:)(v2, 0);
      v72 = v71;
      v100 = sub_10003E8EC(v70, v71, (uint64_t *)&v102);
      v93 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v68 + 4);
      swift_bridgeObjectRelease(v72);
      *(_WORD *)(v68 + 12) = 2048;
      v100 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v68 + 14);
      *(_WORD *)(v68 + 22) = 1024;
      LODWORD(v100) = v63 >= v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v68 + 24);
      v73 = v92;
      _os_log_impl((void *)&_mh_execute_header, v92, v67, "%s ageInYears %ld shouldShowMoveModeSettings %{BOOL}d", (uint8_t *)v68, 0x1Cu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v93);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v95, v6);
    }
  }
  return v26;
}

id sub_1001DBC54()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone((Class)CHASActivitySetupMetricsCollectionViewController), "initWithPresentationContext:pregnancyStateProvider:", 6, *(_QWORD *)(v0 + 56));
}

id sub_1001DBC8C()
{
  return objc_msgSend(objc_allocWithZone((Class)CHASActivitySetupViewController), "initWithPresentationContext:", 6);
}

unint64_t sub_1001DBD9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826490;
  if (!qword_100826490)
  {
    v1 = type metadata accessor for AccountFitnessSettingsChanged(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountFitnessSettingsChanged, v1);
    atomic_store(result, (unint64_t *)&qword_100826490);
  }
  return result;
}

void sub_1001DBDE4(uint64_t a1)
{
  uint64_t v1;

  sub_1000120DC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1001DBDF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100047110(&qword_1008264A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001DBE60()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001DBE8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = (_QWORD *)v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1008264B4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000DA0E4;
  return sub_1001DAC74(a1, v4, v5, v7, v6);
}

uint64_t sub_1001DBF04()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DBF28()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DBF4C()
{
  uint64_t v0;

  return j__swift_retain_0(v0);
}

uint64_t initializeWithCopy for HistoryViewActionContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for HistoryViewActionContext(_QWORD *a1, _QWORD *a2)
{
  sub_1000F1A58(a1, a2);
  return a1;
}

uint64_t assignWithTake for HistoryViewActionContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryViewActionContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryViewActionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryViewActionContext()
{
  return &type metadata for HistoryViewActionContext;
}

uint64_t *sub_1001DC094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    v19 = *((_QWORD *)v18 + 3);
    v20 = swift_retain(v16);
    if (v19)
    {
      v21 = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = v21;
      (**(void (***)(char *, char *, uint64_t, __n128))(v19 - 8))(v17, v18, v19, v20);
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    }
  }
  return a1;
}

_QWORD *sub_1001DC1B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
  result = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  if (result[3])
    return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(result);
  return result;
}

uint64_t *sub_1001DC244(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __int128 v20;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v17 = *((_QWORD *)v16 + 3);
  v18 = swift_retain(v14);
  if (v17)
  {
    v19 = *((_QWORD *)v16 + 4);
    *((_QWORD *)v15 + 3) = v17;
    *((_QWORD *)v15 + 4) = v19;
    (**(void (***)(char *, char *, uint64_t, __n128))(v17 - 8))(v15, v16, v17, v18);
  }
  else
  {
    v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  }
  return a1;
}

uint64_t *sub_1001DC338(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  v15 = swift_release(v14);
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 3);
  if (!*(uint64_t *)((char *)a1 + v16 + 24))
  {
    if (v19)
    {
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
      (**(void (***)(char *, char *, __n128))(v19 - 8))(v17, v18, v15);
      return a1;
    }
LABEL_12:
    v20 = *(_OWORD *)v18;
    v21 = *((_OWORD *)v18 + 1);
    *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    *(_OWORD *)v17 = v20;
    *((_OWORD *)v17 + 1) = v21;
    return a1;
  }
  if (!v19)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v17);
    goto LABEL_12;
  }
  sub_1000F1A58(v17, v18);
  return a1;
}

char *sub_1001DC478(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  return a1;
}

char *sub_1001DC538(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  if (*(_QWORD *)&a1[v10 + 24])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v10]);
  v12 = *(_OWORD *)&a2[v10 + 16];
  *(_OWORD *)v11 = *(_OWORD *)&a2[v10];
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 4) = *(_QWORD *)&a2[v10 + 32];
  return a1;
}

uint64_t sub_1001DC62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DC638);
}

uint64_t sub_1001DC638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001DC6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DC6C4);
}

uint64_t sub_1001DC6C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HistoryItemsCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_100826520;
  if (!qword_100826520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HistoryItemsCardView);
  return result;
}

void sub_1001DC77C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = "(";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1001DC7FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF214, 1);
}

uint64_t sub_1001DC80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[7];

  v83 = a2;
  v82 = sub_100047110(&qword_1008265E8);
  __chkstk_darwin(v82);
  v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HistoryItemsCardView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v79 = sub_100047110(&qword_1008265B0);
  __chkstk_darwin(v79);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100047110(&qword_1008265F0);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_100826588);
  v12 = __chkstk_darwin(v11);
  v80 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v5 + 20);
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems);
  v17 = *(_QWORD *)(v16 + 16);
  v81 = v12;
  if (v17)
  {
    v18 = sub_1000252E0(v16 + 32, (uint64_t)v110);
    if ((*(_BYTE *)(v15 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size) & 1) != 0)
    {
      *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v18);
      *((_QWORD *)v9 + 1) = 0;
      v9[16] = 0;
      v76 = &v9[*(int *)(sub_100047110(&qword_1008265F8) + 44)];
      v19 = sub_1001DCFA8();
      sub_100363710((uint64_t)v19);
      v21 = v20;
      swift_bridgeObjectRelease(v19);
      *(_QWORD *)&v97 = v21;
      KeyPath = swift_getKeyPath(&unk_10062BFE0);
      sub_1001DDA38(a1, (uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      v22 = *(unsigned __int8 *)(v6 + 80);
      v23 = (v22 + 16) & ~v22;
      v24 = swift_allocObject(&unk_10078D528, v23 + v7, v22 | 7);
      sub_1001DDB3C((uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23);
      v25 = swift_allocObject(&unk_10078D550, 32, 7);
      *(_QWORD *)(v25 + 16) = sub_1001DDB80;
      *(_QWORD *)(v25 + 24) = v24;
      v26 = sub_100047110(&qword_100826600);
      v27 = sub_100047110(&qword_100826608);
      v28 = sub_100028384(&qword_100826610, &qword_100826600, (uint64_t)&protocol conformance descriptor for [A]);
      v29 = sub_1000DC0E8();
      v30 = sub_100028384(&qword_100826618, &qword_100826608, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      ForEach<>.init(_:id:content:)(&v97, KeyPath, sub_1001DDBF8, v25, v26, v27, v28, v29, v30);
      v31 = &qword_1008265B0;
      v32 = v78;
      sub_100021CC0((uint64_t)v9, v78, &qword_1008265B0);
      swift_storeEnumTagMultiPayload(v32, v77, 1);
      v33 = sub_100047110(&qword_100826598);
      v34 = sub_1001DD8C0(&qword_100826590, &qword_100826598, (void (*)(void))sub_1001DD87C);
      v35 = sub_100028384(&qword_1008265A8, &qword_1008265B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v36 = v80;
      _ConditionalContent<>.init(storage:)(v32, v33, v79, v34, v35);
      v37 = (__int128 *)v9;
    }
    else
    {
      sub_1000252E0((uint64_t)v110, (uint64_t)&v97 + 8);
      sub_100021CC0(a1 + *(int *)(v5 + 24), (uint64_t)&v100, &qword_10081F600);
      *(_QWORD *)&v97 = v15;
      swift_retain(v15);
      v65 = static Alignment.center.getter(v64);
      sub_1003EB3F4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v84, 0.0, 1, 0.0, 1, v65, v66);
      sub_1001DDC20(&v97);
      v107 = v94;
      v108 = v95;
      v109 = v96;
      v103 = v90;
      v104 = v91;
      v105 = v92;
      v106 = v93;
      v99 = v86;
      v100 = v87;
      v101 = v88;
      v102 = v89;
      v97 = v84;
      v98 = v85;
      v31 = &qword_100826598;
      v67 = v78;
      sub_100021CC0((uint64_t)&v97, v78, &qword_100826598);
      swift_storeEnumTagMultiPayload(v67, v77, 0);
      v68 = sub_100047110(&qword_100826598);
      v69 = sub_1001DD8C0(&qword_100826590, &qword_100826598, (void (*)(void))sub_1001DD87C);
      v70 = sub_100028384(&qword_1008265A8, &qword_1008265B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v36 = v80;
      _ConditionalContent<>.init(storage:)(v67, v68, v79, v69, v70);
      v37 = &v97;
    }
    sub_10001BE90((uint64_t)v37, v31);
    sub_100021CC0(v36, (uint64_t)v4, &qword_100826588);
    swift_storeEnumTagMultiPayload(v4, v82, 0);
    v71 = sub_100047110(&qword_1008265C0);
    v72 = sub_1001DD7E0();
    v73 = sub_1001DD8C0(&qword_1008265B8, &qword_1008265C0, (void (*)(void))sub_1001DD92C);
    _ConditionalContent<>.init(storage:)(v4, v81, v71, v72, v73);
    sub_10001BE90(v36, &qword_100826588);
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(v110);
  }
  else
  {
    v38 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x800000010068F060);
    v80 = Text.init(_:tableName:bundle:comment:)(v38);
    v40 = v39;
    v42 = v41;
    v44 = v43 & 1;
    v45 = swift_getKeyPath(&unk_10062C010);
    v46 = static Font.footnote.getter();
    v47 = swift_getKeyPath(&unk_10062C040);
    v49 = static HierarchicalShapeStyle.secondary.getter(v48);
    v50 = *(unsigned __int8 *)(*(_QWORD *)(a1 + v14) + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size);
    LODWORD(v79) = v50 ^ 1;
    if (v50)
      v51 = 0;
    else
      v51 = 0x7FF0000000000000;
    v52 = 0x4059000000000000;
    if (!v50)
      v52 = 0;
    v77 = v51;
    v78 = v52;
    *(_QWORD *)&v84 = v80;
    *((_QWORD *)&v84 + 1) = v40;
    LOBYTE(v85) = v44;
    *((_QWORD *)&v85 + 1) = v42;
    *(_QWORD *)&v86 = v45;
    BYTE8(v86) = 1;
    *(_QWORD *)&v87 = v47;
    *((_QWORD *)&v87 + 1) = v46;
    LODWORD(v88) = v49;
    v53 = static Alignment.center.getter(v49);
    sub_1003EB5A0(0.0, 1, 0.0, 1, INFINITY, 0, *(double *)&v78, v79, (uint64_t)&v97, 0.0, 1, *(double *)&v77, v50, v53, v54);
    sub_1000E4458(v80, v40, v44);
    swift_release(v46);
    swift_release(v47);
    swift_release(v45);
    swift_bridgeObjectRelease(v42);
    v55 = v106;
    *((_OWORD *)v4 + 8) = v105;
    *((_OWORD *)v4 + 9) = v55;
    *((_OWORD *)v4 + 10) = v107;
    *((_QWORD *)v4 + 22) = v108;
    v56 = v102;
    *((_OWORD *)v4 + 4) = v101;
    *((_OWORD *)v4 + 5) = v56;
    v57 = v104;
    *((_OWORD *)v4 + 6) = v103;
    *((_OWORD *)v4 + 7) = v57;
    v58 = v98;
    *(_OWORD *)v4 = v97;
    *((_OWORD *)v4 + 1) = v58;
    v59 = v100;
    *((_OWORD *)v4 + 2) = v99;
    *((_OWORD *)v4 + 3) = v59;
    swift_storeEnumTagMultiPayload(v4, v82, 1);
    v60 = sub_100047110(&qword_1008265C0);
    v61 = sub_1001DD7E0();
    v62 = sub_1001DD8C0(&qword_1008265B8, &qword_1008265C0, (void (*)(void))sub_1001DD92C);
    return _ConditionalContent<>.init(storage:)(v4, v81, v60, v61, v62);
  }
}

_QWORD *sub_1001DCFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for DynamicTypeSize(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v20 - v6;
  sub_1003F6E18((uint64_t)&v20 - v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DynamicTypeSize.xxxLarge(_:), v1);
  v8 = static DynamicTypeSize.< infix(_:_:)(v7, v5);
  v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v5, v1);
  v9(v7, v1);
  v10 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for HistoryItemsCardView(0) + 20));
  v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems);
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v10 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems));
    return (_QWORD *)v11;
  }
  else
  {
    if (*(_QWORD *)(v11 + 16) >= 2uLL)
      v13 = 2;
    else
      v13 = *(_QWORD *)(v11 + 16);
    v14 = type metadata accessor for __ContiguousArrayStorageBase(0);
    swift_bridgeObjectRetain(v11);
    v16 = swift_unknownObjectRetain_n(v15, 2);
    v17 = (_QWORD *)swift_dynamicCastClass(v16, v14);
    if (!v17)
    {
      swift_bridgeObjectRelease(v11);
      v17 = _swiftEmptyArrayStorage;
    }
    v18 = v17[2];
    swift_release(v17);
    if (v18 == v13)
    {
      v12 = (_QWORD *)swift_dynamicCastClass(v11, v14);
      swift_bridgeObjectRelease(v11);
      if (!v12)
      {
        swift_bridgeObjectRelease(v11);
        return _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v11);
      v12 = sub_100295BE8(v11, v11 + 32, 0, (2 * v13) | 1);
      swift_bridgeObjectRelease(v11);
    }
  }
  return v12;
}

_QWORD *sub_1001DD168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[11];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[3];

  v61 = a2;
  v62 = a1;
  v65 = a4;
  v60 = type metadata accessor for DynamicTypeSize(0);
  v59 = *(_QWORD *)(v60 - 8);
  v5 = __chkstk_darwin(v60);
  v58 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v53 - v7;
  v55 = type metadata accessor for Divider(0);
  v8 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100047110(&qword_100824520);
  __chkstk_darwin(v54);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100047110(&qword_100824528);
  v64 = *(_QWORD *)(v63 - 8);
  v13 = __chkstk_darwin(v63);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v56 = (uint64_t)&v53 - v16;
  v17 = sub_100047110(&qword_100826620);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v53 - v21;
  v23 = type metadata accessor for HistoryItemsCardView(0);
  v24 = *(_QWORD *)(a3 + *(int *)(v23 + 20));
  sub_1000252E0(v61, (uint64_t)&v68);
  sub_100021CC0(a3 + *(int *)(v23 + 24), (uint64_t)&v69, &qword_10081F600);
  v67 = v24;
  swift_retain(v24);
  v25 = sub_1001DCFA8();
  v26 = v25[2];
  v28 = swift_bridgeObjectRelease(v25);
  if (v26 - 1 == v62)
  {
    v29 = 1;
    v30 = v63;
  }
  else
  {
    v31 = Divider.init()(v27);
    v32 = static Alignment.center.getter(v31);
    _FrameLayout.init(width:height:alignment:)(v70, 0, 1, 0x3FE0000000000000, 0, v32, v33);
    v34 = v55;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v55);
    v35 = &v12[*(int *)(v54 + 36)];
    v36 = v70[1];
    *(_OWORD *)v35 = v70[0];
    *((_OWORD *)v35 + 1) = v36;
    *((_OWORD *)v35 + 2) = v70[2];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
    v37 = v57;
    sub_1003F6E18(v57);
    v38 = v59;
    v39 = v58;
    v40 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, enum case for DynamicTypeSize.xxxLarge(_:), v60);
    v41 = static DynamicTypeSize.< infix(_:_:)(v37, v39);
    v42 = *(void (**)(char *, uint64_t))(v38 + 8);
    v42(v39, v40);
    v43 = ((uint64_t (*)(uint64_t, uint64_t))v42)(v37, v40);
    if ((v41 & 1) != 0)
      v44 = 0x4024000000000000;
    else
      v44 = 0x4020000000000000;
    if ((v41 & 1) != 0)
      v45 = 0x404E000000000000;
    else
      v45 = 0;
    v46 = static Edge.Set.all.getter(v43);
    sub_100021CC0((uint64_t)v12, (uint64_t)v15, &qword_100824520);
    v47 = v63;
    v48 = &v15[*(int *)(v63 + 36)];
    *v48 = v46;
    *((_QWORD *)v48 + 1) = v44;
    *((_QWORD *)v48 + 2) = v45;
    *((_QWORD *)v48 + 3) = v44;
    *((_QWORD *)v48 + 4) = 0;
    v48[40] = 0;
    sub_10001BE90((uint64_t)v12, &qword_100824520);
    v49 = v56;
    sub_1001DDC64((uint64_t)v15, v56);
    sub_1001DDC64(v49, (uint64_t)v22);
    v29 = 0;
    v30 = v47;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v64 + 56))(v22, v29, 1, v30, v28);
  sub_1001DDCAC(&v67, (uint64_t)v66);
  sub_100021CC0((uint64_t)v22, (uint64_t)v20, &qword_100826620);
  v50 = v65;
  sub_1001DDCAC(v66, v65);
  v51 = sub_100047110(qword_100826628);
  sub_100021CC0((uint64_t)v20, v50 + *(int *)(v51 + 48), &qword_100826620);
  sub_10001BE90((uint64_t)v22, &qword_100826620);
  sub_1001DDC20(&v67);
  sub_10001BE90((uint64_t)v20, &qword_100826620);
  return sub_1001DDC20(v66);
}

uint64_t sub_1001DD5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100826560);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1001DC80C(v0, (uint64_t)v7);
  static AccessibilityChildBehavior.combine.getter(v8);
  v9 = sub_1001DD6F8();
  View.accessibilityElement(children:)(v4, v5, v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10001BE90((uint64_t)v7, &qword_100826560);
}

unint64_t sub_1001DD6F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826568;
  if (!qword_100826568)
  {
    v1 = sub_100007050(&qword_100826560);
    sub_1001DD75C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100826568);
  }
  return result;
}

unint64_t sub_1001DD75C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826570;
  if (!qword_100826570)
  {
    v1 = sub_100007050(&qword_100826578);
    sub_1001DD7E0();
    sub_1001DD8C0(&qword_1008265B8, &qword_1008265C0, (void (*)(void))sub_1001DD92C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826570);
  }
  return result;
}

unint64_t sub_1001DD7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826580;
  if (!qword_100826580)
  {
    v1 = sub_100007050(&qword_100826588);
    sub_1001DD8C0(&qword_100826590, &qword_100826598, (void (*)(void))sub_1001DD87C);
    sub_100028384(&qword_1008265A8, &qword_1008265B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826580);
  }
  return result;
}

unint64_t sub_1001DD87C()
{
  unint64_t result;

  result = qword_1008265A0;
  if (!qword_1008265A0)
  {
    result = swift_getWitnessTable(&unk_100631E4C, &type metadata for HistoryItemView);
    atomic_store(result, (unint64_t *)&qword_1008265A0);
  }
  return result;
}

uint64_t sub_1001DD8C0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007050(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001DD92C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008265C8;
  if (!qword_1008265C8)
  {
    v1 = sub_100007050(&qword_1008265D0);
    sub_1001DD9B0();
    sub_100028384(&qword_100820870, &qword_100820878, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008265C8);
  }
  return result;
}

unint64_t sub_1001DD9B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008265D8;
  if (!qword_1008265D8)
  {
    v1 = sub_100007050(&qword_1008265E0);
    sub_10010B230();
    sub_100028384(&qword_100823850, &qword_100823858, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008265D8);
  }
  return result;
}

uint64_t sub_1001DDA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HistoryItemsCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DDA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = type metadata accessor for HistoryItemsCardView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)));
  v9 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  if (v9[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001DDB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HistoryItemsCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1001DDB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HistoryItemsCardView(0) - 8) + 80);
  return sub_1001DD168(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

uint64_t sub_1001DDBD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DDBF8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD *))(v1 + 16))(*a1, a1 + 1);
}

_QWORD *sub_1001DDC20(_QWORD *a1)
{
  destroy for HistoryItemView(a1);
  return a1;
}

uint64_t sub_1001DDC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DDCAC(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for HistoryItemView(a2, a1);
  return a2;
}

uint64_t sub_1001DDCE8()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_100826560);
  v1[1] = sub_1001DD6F8();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1001DDD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1001DDD3C(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));
  return swift_release(*(_QWORD *)(a1 + 48));
}

uint64_t sub_1001DDD74(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = v3;
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v7);
  return a1;
}

uint64_t sub_1001DDDE0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain(v11);
  swift_release(v13);
  return a1;
}

uint64_t sub_1001DDE78(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Histogram1D(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Histogram1D(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ActivitySharingSectionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014E7CC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActivitySharingSectionView);
}

uint64_t sub_1001DDF84(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1006AF278, 1);
}

uint64_t sub_1001DDFB8()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100047110(&qword_1008266D8);
  Binding.projectedValue.getter(v0);
  return v2;
}

uint64_t sub_1001DE008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v55;
  id v56;
  int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77[16];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[7];
  _OWORD v84[2];
  char v85;

  v76 = a2;
  v4 = sub_100007050(&qword_1008266B0);
  v72 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Section(0, v4);
  v75 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v71 = (char *)&v55 - v6;
  v7 = sub_100007050(&qword_1008266B8);
  v64 = v5;
  v8 = type metadata accessor for ModifiedContent(0, v5, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  v74 = v9;
  __chkstk_darwin(v8);
  v68 = (char *)&v55 - v10;
  v62 = sub_1001DE69C();
  v59 = *(_QWORD *)(a1 + 24);
  v83[4] = v62;
  v83[5] = v59;
  v83[6] = &protocol witness table for EmptyView;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v5);
  v61 = WitnessTable;
  v12 = sub_1001DE828(&qword_1008266D0, &qword_1008266B8);
  v83[2] = WitnessTable;
  v83[3] = v12;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  *(_QWORD *)&v84[0] = v8;
  *((_QWORD *)&v84[0] + 1) = v65;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, v84, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 0);
  v69 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v63 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v58 = (char *)&v55 - v14;
  v15 = sub_100007050(&qword_100820658);
  v70 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v15);
  v73 = *(_QWORD *)(v70 - 8);
  v16 = __chkstk_darwin(v70);
  v60 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v67 = (uint64_t)&v55 - v18;
  v19 = type metadata accessor for SafeAreaPaddingModifier(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v55 - v27;
  v29 = *(void **)v2;
  v57 = *(unsigned __int8 *)(v2 + 8);
  v56 = v29;
  v30 = sub_1001DDFB8();
  v32 = v31;
  v34 = v33;
  v35 = static Edge.Set.horizontal.getter(v30);
  memset(v84, 0, sizeof(v84));
  v85 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)(v35, v84);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v28[*(int *)(v4 + 36)], v23, v19);
  *(_QWORD *)v28 = v56;
  v28[8] = v57;
  *((_QWORD *)v28 + 2) = v30;
  *((_QWORD *)v28 + 3) = v32;
  *((_QWORD *)v28 + 4) = v34;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  sub_1001DE794((uint64_t)v28, (uint64_t)v26);
  v78 = v72;
  v79 = v59;
  v80 = v2;
  v36 = v71;
  v37 = Section<>.init(header:content:)(v26, sub_1001DE7DC, v77, v4, v72, v62, v59);
  v38 = static Color.clear.getter(v37);
  v83[0] = v38;
  v39 = v68;
  v40 = v64;
  View.listRowBackground<A>(_:)(v83, v64, &type metadata for Color, v61, &protocol witness table for Color);
  v41 = swift_release(v38);
  v42 = (*(uint64_t (**)(char *, uint64_t, __n128))(v75 + 8))(v36, v40, v41);
  v43 = static VerticalEdge.Set.all.getter(v42);
  v44 = v58;
  v45 = v66;
  v46 = v65;
  View.listRowSeparator(_:edges:)(2, v43, v66, v65);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v39, v45);
  v83[0] = v45;
  v83[1] = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v83, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  v48 = (uint64_t)v60;
  v49 = v63;
  sub_10026780C(v63, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v49);
  sub_1001DE7E8((uint64_t)v28);
  v50 = sub_1001DE828(&qword_100820650, &qword_100820658);
  v81 = OpaqueTypeConformance2;
  v82 = v50;
  v51 = v70;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v70);
  v52 = v67;
  sub_10029340C(v48, v51, v67);
  v53 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
  v53(v48, v51);
  sub_100291778(v52, v51, v76);
  return ((uint64_t (*)(uint64_t, uint64_t))v53)(v52, v51);
}

uint64_t sub_1001DE584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v14 - v10;
  (*(void (**)(void))(v9 + 40))();
  sub_10029340C((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_100291778((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_1001DE65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001DE008(a1, a2);
}

unint64_t sub_1001DE69C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008266C0;
  if (!qword_1008266C0)
  {
    v1 = sub_100007050(&qword_1008266B0);
    sub_1001DE708();
    sub_1001DE74C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008266C0);
  }
  return result;
}

unint64_t sub_1001DE708()
{
  unint64_t result;

  result = qword_1008266C8;
  if (!qword_1008266C8)
  {
    result = swift_getWitnessTable(&unk_100633CD4, &type metadata for ActivitySharingSectionHeaderView);
    atomic_store(result, (unint64_t *)&qword_1008266C8);
  }
  return result;
}

unint64_t sub_1001DE74C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820688;
  if (!qword_100820688)
  {
    v1 = type metadata accessor for SafeAreaPaddingModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SafeAreaPaddingModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100820688);
  }
  return result;
}

uint64_t sub_1001DE794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008266B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DE7DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001DE584(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001DE7E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_1008266B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001DE828(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007050(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DE868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_100007050(&qword_1008266B0);
  v3 = type metadata accessor for Section(255, v2);
  v4 = sub_100007050(&qword_1008266B8);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  v15 = sub_1001DE69C();
  v16 = v1;
  v17 = &protocol witness table for EmptyView;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v3);
  v14 = sub_1001DE828(&qword_1008266D0, &qword_1008266B8);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v11 = v5;
  v12 = v6;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v11, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 0);
  v8 = sub_100007050(&qword_100820658);
  v9 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v8);
  v11 = v5;
  v12 = v6;
  swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
  sub_1001DE828(&qword_100820650, &qword_100820658);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyDevicesView(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  id v5;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = (id)v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for LegacyDevicesView(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t assignWithCopy for LegacyDevicesView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for LegacyDevicesView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for LegacyDevicesView()
{
  return &type metadata for LegacyDevicesView;
}

uint64_t sub_1001DEADC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF2E4, 1);
}

uint64_t sub_1001DEAEC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  NSString v78;
  NSString v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  char v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  char *v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  __int128 v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  _OWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t KeyPath;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD v211[7];
  char v212;
  _DWORD v213[2];
  _DWORD v214[2];
  _DWORD v215[2];
  _DWORD v216[2];
  _DWORD v217[2];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _OWORD v225[2];
  uint64_t v226;
  uint64_t v227;
  char v228;
  _BYTE v229[7];
  uint64_t v230;
  uint64_t v231;
  char v232;
  _BYTE v233[7];
  char v234;
  _BYTE v235[7];
  double v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  char v240;
  _BYTE v241[7];
  char v242;
  _BYTE v243[7];
  double v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  unsigned __int8 v249;
  _BYTE v250[7];
  _BYTE v251[7];
  unsigned __int8 v252;
  _BYTE v253[7];
  _BYTE v254[7];
  _BYTE v255[7];
  unsigned __int8 v256;

  v187 = a2;
  v188 = a3;
  v181 = a1;
  v186 = a4;
  v4 = sub_100047110(&qword_100820FE0);
  v179 = *(_QWORD *)(v4 - 8);
  v180 = v4;
  __chkstk_darwin(v4);
  v178 = (char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_1008266F8);
  v184 = *(_QWORD *)(v6 - 8);
  v185 = v6;
  __chkstk_darwin(v6);
  v177 = (char *)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100826700);
  v9 = __chkstk_darwin(v8);
  v210 = (uint64_t)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v196 = (uint64_t)&v175 - v11;
  v209 = sub_100047110(&qword_100826708);
  v195 = *(_QWORD *)(v209 - 8);
  v12 = __chkstk_darwin(v209);
  v197 = (char *)&v175 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v204 = (char *)&v175 - v14;
  v15 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v15);
  v17 = (uint64_t)&v175 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Font.TextStyle(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_1001E005C();
  v227 = v22;
  v70 = sub_100038CA0();
  v23 = Text.init<A>(_:)(&v226, &type metadata for String, v70);
  v25 = v24;
  v207 = v26;
  v28 = v27 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for Font.TextStyle.largeTitle(_:), v18);
  v29 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v17, 1, 1, v29);
  v30 = static Font.system(_:design:weight:)(v21, v17, 0, 1);
  sub_10001BE90(v17, &qword_10081F2F8);
  v31 = *(void (**)(char *, uint64_t))(v19 + 8);
  v32 = v70;
  v31(v21, v18);
  v33 = Font.bold()(v30);
  v34 = swift_release(v30);
  v35 = v207;
  v36 = Text.font(_:)(v33, v23, v25, v28, v207, v34);
  v193 = v37;
  v194 = v36;
  LODWORD(v17) = v38;
  v208 = v39;
  swift_release(v33);
  v40 = v23;
  v41 = v181;
  sub_1000E4458(v40, v25, v28);
  swift_bridgeObjectRelease(v35);
  KeyPath = swift_getKeyPath(&unk_10062C198);
  v191 = static Edge.Set.top.getter(KeyPath);
  v42 = EdgeInsets.init(_all:)(10.0);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v192 = static Edge.Set.bottom.getter(v49);
  v50 = EdgeInsets.init(_all:)(10.0);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v183 = v17;
  v256 = v17 & 1;
  v252 = 0;
  v249 = 0;
  v226 = sub_1001E0180();
  v227 = v57;
  v58 = Text.init<A>(_:)(&v226, &type metadata for String, v70);
  v60 = v59;
  v62 = v61;
  v64 = v63 & 1;
  v65 = ((uint64_t (*)(void))static Font.callout.getter)();
  v206 = Text.font(_:)(v65, v58, v60, v64, v62, v66);
  v207 = v67;
  v189 = v68;
  LODWORD(v70) = v69;
  swift_release(v65);
  sub_1000E4458(v58, v60, v64);
  swift_bridgeObjectRelease(v62);
  v205 = swift_getKeyPath(&unk_10062C198);
  v182 = static HierarchicalShapeStyle.secondary.getter(v71);
  v211[2] = v41;
  v211[3] = v187;
  v211[4] = v188;
  v72 = sub_100047110(&qword_100826710);
  v73 = sub_1001E02A8();
  List<>.init(content:)(sub_1001E029C, v211, v72, v73);
  v74 = sub_1002ACD40();
  v75 = sub_1001DFED4((uint64_t)v74);
  swift_bridgeObjectRelease(v74);
  v76 = *(_QWORD *)(v75 + 16);
  swift_bridgeObjectRelease(v75);
  if (v76 && sub_1001E0350())
  {
    v77 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v78 = String._bridgeToObjectiveC()();
    v79 = String._bridgeToObjectiveC()();
    v80 = objc_msgSend(v77, "localizedStringForKey:value:table:", v78, 0, v79);

    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;

    v226 = v81;
    v227 = v83;
    v84 = Text.init<A>(_:)(&v226, &type metadata for String, v32);
    v86 = v85;
    v88 = v87;
    v90 = v89 & 1;
    LODWORD(v226) = static HierarchicalShapeStyle.secondary.getter(v91);
    v92 = Text.foregroundStyle<A>(_:)(&v226, v84, v86, v90, v88, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v94 = v93;
    LODWORD(v176) = v70;
    v70 = v95;
    v96 = v41;
    v98 = v97 & 1;
    sub_1000E4458(v84, v86, v90);
    v99 = swift_bridgeObjectRelease(v88);
    v100 = static Font.callout.getter(v99);
    v102 = Text.font(_:)(v100, v92, v94, v98, v70, v101);
    v202 = v103;
    v203 = v102;
    LOBYTE(v86) = v104;
    v201 = v105;
    swift_release(v100);
    v200 = v86 & 1;
    v106 = v98;
    v41 = v96;
    sub_1000E4458(v92, v94, v106);
    v107 = v70;
    LOBYTE(v70) = v176;
    swift_bridgeObjectRelease(v107);
    v199 = swift_getKeyPath(&unk_10062C198);
    v198 = 1;
  }
  else
  {
    v202 = 0;
    v203 = 0;
    v200 = 0;
    v201 = 0;
    v199 = 0;
    v198 = 0;
  }
  v108 = sub_1001E04C0();
  if (v109)
  {
    v110 = v108;
    v111 = v109;
    v112 = (_QWORD *)swift_allocObject(&unk_10078D6D0, 40, 7);
    v113 = v187;
    v114 = v188;
    v112[2] = v41;
    v112[3] = v113;
    v112[4] = v114;
    __chkstk_darwin(v112);
    *(&v175 - 2) = v110;
    *(&v175 - 1) = v111;
    v115 = v41;
    swift_retain(v114);
    v116 = v178;
    Button.init(action:label:)(sub_1001E072C, v112, sub_1001E0764, &v175 - 4, &type metadata for Text, &protocol witness table for Text);
    swift_bridgeObjectRelease(v111);
    LOBYTE(v111) = static Edge.Set.top.getter(v117);
    v118 = EdgeInsets.init(_all:)(10.0);
    v176 = v48;
    v119 = v42;
    v120 = v50;
    v121 = v118;
    v187 = v44;
    v188 = v56;
    v122 = v52;
    v124 = v123;
    v181 = v46;
    v125 = v54;
    v127 = v126;
    v129 = v128;
    v131 = v179;
    v130 = v180;
    v132 = v177;
    (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v177, v116, v180);
    v133 = v185;
    v134 = &v132[*(int *)(v185 + 36)];
    *v134 = v111;
    *((double *)v134 + 1) = v121;
    *((_QWORD *)v134 + 2) = v124;
    v50 = v120;
    v42 = v119;
    v48 = v176;
    v52 = v122;
    *((_QWORD *)v134 + 3) = v127;
    *((_QWORD *)v134 + 4) = v129;
    v54 = v125;
    v46 = v181;
    v44 = v187;
    v56 = v188;
    v134[40] = 0;
    (*(void (**)(char *, uint64_t))(v131 + 8))(v116, v130);
    v135 = (uint64_t)v132;
    v136 = v196;
    sub_1001E076C(v135, v196);
    v137 = 0;
  }
  else
  {
    v137 = 1;
    v136 = v196;
    v133 = v185;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56))(v136, v137, 1, v133);
  v138 = v70 & 1;
  v139 = v256;
  LODWORD(v185) = v256;
  v217[0] = *(_DWORD *)v255;
  *(_DWORD *)((char *)v217 + 3) = *(_DWORD *)&v255[3];
  v216[0] = *(_DWORD *)v254;
  *(_DWORD *)((char *)v216 + 3) = *(_DWORD *)&v254[3];
  v215[0] = *(_DWORD *)v253;
  *(_DWORD *)((char *)v215 + 3) = *(_DWORD *)&v253[3];
  v140 = v252;
  LODWORD(v187) = v252;
  *(_DWORD *)((char *)v214 + 3) = *(_DWORD *)&v251[3];
  v214[0] = *(_DWORD *)v251;
  *(_DWORD *)((char *)v213 + 3) = *(_DWORD *)&v250[3];
  v213[0] = *(_DWORD *)v250;
  v141 = v249;
  LODWORD(v188) = v249;
  v212 = v138;
  v142 = *(void (**)(char *, char *, uint64_t))(v195 + 16);
  v143 = v197;
  v142(v197, v204, v209);
  sub_1001E05A8(v136, v210);
  *(_QWORD *)&v218 = v194;
  *((_QWORD *)&v218 + 1) = v193;
  LOBYTE(v219) = v139;
  *(_DWORD *)((char *)&v219 + 1) = *(_DWORD *)v255;
  DWORD1(v219) = *(_DWORD *)&v255[3];
  *((_QWORD *)&v219 + 1) = v208;
  *(_QWORD *)&v220 = KeyPath;
  BYTE8(v220) = 1;
  *(_DWORD *)((char *)&v220 + 9) = *(_DWORD *)v254;
  HIDWORD(v220) = *(_DWORD *)&v254[3];
  LOBYTE(v221) = v191;
  *(_DWORD *)((char *)&v221 + 1) = *(_DWORD *)v253;
  DWORD1(v221) = *(_DWORD *)&v253[3];
  *((double *)&v221 + 1) = v42;
  *(_QWORD *)&v222 = v44;
  *((_QWORD *)&v222 + 1) = v46;
  *(_QWORD *)&v223 = v48;
  BYTE8(v223) = v140;
  *(_DWORD *)((char *)&v223 + 9) = *(_DWORD *)v251;
  HIDWORD(v223) = *(_DWORD *)&v251[3];
  LOBYTE(v224) = v192;
  DWORD1(v224) = *(_DWORD *)&v250[3];
  *(_DWORD *)((char *)&v224 + 1) = *(_DWORD *)v250;
  *((double *)&v224 + 1) = v50;
  *(_QWORD *)&v225[0] = v52;
  *((_QWORD *)&v225[0] + 1) = v54;
  *(_QWORD *)&v225[1] = v56;
  BYTE8(v225[1]) = v141;
  v144 = v219;
  v145 = v186;
  *v186 = v218;
  v145[1] = v144;
  v146 = v221;
  v145[2] = v220;
  v145[3] = v146;
  v147 = v222;
  v148 = v223;
  *(_OWORD *)((char *)v145 + 121) = *(_OWORD *)((char *)v225 + 9);
  v149 = v225[0];
  v145[6] = v224;
  v145[7] = v149;
  v145[4] = v147;
  v145[5] = v148;
  v150 = v206;
  v151 = v189;
  *((_QWORD *)v145 + 18) = v206;
  *((_QWORD *)v145 + 19) = v151;
  *((_BYTE *)v145 + 160) = v138;
  v152 = v205;
  *((_QWORD *)v145 + 21) = v207;
  *((_QWORD *)v145 + 22) = v152;
  *((_BYTE *)v145 + 184) = 1;
  *((_DWORD *)v145 + 47) = v182;
  v153 = (int *)sub_100047110(&qword_100826728);
  v142((char *)v145 + v153[16], v143, v209);
  v154 = (char *)v145 + v153[20];
  *(_QWORD *)v154 = 0;
  v154[8] = 1;
  v155 = (char *)v145 + v153[24];
  v157 = v202;
  v156 = v203;
  *(_QWORD *)v155 = v203;
  *((_QWORD *)v155 + 1) = v157;
  v202 = v157;
  v203 = v156;
  v158 = v200;
  v159 = v201;
  *((_QWORD *)v155 + 2) = v200;
  *((_QWORD *)v155 + 3) = v159;
  v200 = v158;
  v201 = v159;
  v160 = v199;
  *((_QWORD *)v155 + 4) = v199;
  v199 = v160;
  v155[40] = v198;
  sub_1001E05A8(v210, (uint64_t)v145 + v153[28]);
  sub_1001E05F0((uint64_t)&v218);
  v161 = v150;
  v162 = v189;
  LOBYTE(v145) = v138;
  sub_1000E439C(v161, v189, v138);
  v163 = v207;
  swift_bridgeObjectRetain(v207);
  swift_retain(v205);
  sub_1001E063C(v156, v157, v158, v159, v160);
  LODWORD(v186) = v183 & 1;
  v164 = v193;
  v165 = v194;
  sub_1000E439C(v194, v193, v183 & 1);
  swift_bridgeObjectRetain(v208);
  v166 = KeyPath;
  swift_retain(KeyPath);
  v167 = v206;
  sub_1000E439C(v206, v162, (char)v145);
  swift_bridgeObjectRetain(v163);
  v168 = v205;
  swift_retain(v205);
  sub_10001BE90(v196, &qword_100826700);
  v169 = *(void (**)(char *, uint64_t))(v195 + 8);
  v170 = v209;
  v169(v204, v209);
  sub_1000E4458(v167, v162, (char)v145);
  swift_release(v168);
  v171 = v207;
  swift_bridgeObjectRelease(v207);
  sub_1000E4458(v165, v164, (char)v186);
  swift_release(v166);
  v172 = v208;
  swift_bridgeObjectRelease(v208);
  sub_10001BE90(v210, &qword_100826700);
  v173 = sub_1001E0678(v203, v202, v200, v201, v199);
  ((void (*)(char *, uint64_t, double))v169)(v197, v170, v173);
  sub_1000E4458(v206, v162, v212);
  swift_release(v168);
  swift_bridgeObjectRelease(v171);
  v226 = v165;
  v227 = v164;
  v228 = v185;
  *(_DWORD *)v229 = v217[0];
  *(_DWORD *)&v229[3] = *(_DWORD *)((char *)v217 + 3);
  v230 = v172;
  v231 = v166;
  v232 = 1;
  *(_DWORD *)v233 = v216[0];
  *(_DWORD *)&v233[3] = *(_DWORD *)((char *)v216 + 3);
  v234 = v191;
  *(_DWORD *)&v235[3] = *(_DWORD *)((char *)v215 + 3);
  *(_DWORD *)v235 = v215[0];
  v236 = v42;
  v237 = v44;
  v238 = v46;
  v239 = v48;
  v240 = v187;
  *(_DWORD *)&v241[3] = *(_DWORD *)((char *)v214 + 3);
  *(_DWORD *)v241 = v214[0];
  v242 = v192;
  *(_DWORD *)&v243[3] = *(_DWORD *)((char *)v213 + 3);
  *(_DWORD *)v243 = v213[0];
  v244 = v50;
  v245 = v52;
  v246 = v54;
  v247 = v56;
  v248 = v188;
  return sub_1001E06B4((uint64_t)&v226);
}

uint64_t sub_1001DF754()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v5 = sub_1002ACD40();
  v0 = sub_100047110(&qword_100826730);
  v1 = sub_100028384(&qword_100826738, &qword_100826730, (uint64_t)&protocol conformance descriptor for [A]);
  v2 = sub_1001E030C();
  v3 = sub_1001E07B4();
  return ForEach<>.init(_:content:)(&v5, sub_1001DF800, 0, v0, &type metadata for String, &type metadata for LegacyDeviceView, v1, v2, v3);
}

uint64_t sub_1001DF800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_BYTE *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 49) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v10);
}

uint64_t sub_1001DF86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_100038CA0();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_1001DF8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = sub_100047110(&qword_1008266E0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)v0;
  v6 = *(_QWORD *)(v0 + 8);
  v7 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v2, v8, v9, v10, v11);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v12 = sub_100047110(&qword_1008266E8);
  v13 = sub_1001DEAEC(v5, v6, v7, &v4[*(int *)(v12 + 44)]);
  v14 = static Edge.Set.all.getter(v13);
  v15 = sub_100028384(&qword_1008266F0, &qword_1008266E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.scenePadding(_:)(v14, v1, v15);
  return sub_10001BE90((uint64_t)v4, &qword_1008266E0);
}

__n128 sub_1001DF9CC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v4 = static HorizontalAlignment.leading.getter(a1);
  sub_1001DFA4C(a1, (uint64_t)&v11);
  v5 = v12;
  v6 = v13;
  v7 = v15;
  v8 = v16;
  result = v11;
  v10 = v14;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

double sub_1001DFA4C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v40 = a1[2];
  v41 = v3;
  v6 = sub_100038CA0();
  swift_bridgeObjectRetain(v3);
  v7 = Text.init<A>(_:)(&v40, &type metadata for String, v6);
  v37 = v8;
  v38 = v7;
  v39 = v9;
  v36 = v10 & 1;
  v40 = v4;
  v41 = v5;
  swift_bridgeObjectRetain(v5);
  v11 = Text.init<A>(_:)(&v40, &type metadata for String, v6);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter();
  v20 = Text.font(_:)(v18, v11, v13, v17, v15, v19);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_release(v18);
  v27 = v24 & 1;
  sub_1000E4458(v11, v13, v17);
  v28 = swift_bridgeObjectRelease(v15);
  LODWORD(v40) = static HierarchicalShapeStyle.secondary.getter(v28);
  v29 = Text.foregroundStyle<A>(_:)(&v40, v20, v22, v27, v26, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v31 = v30;
  v33 = v32;
  LOBYTE(v17) = v34 & 1;
  sub_1000E4458(v20, v22, v27);
  swift_bridgeObjectRelease(v26);
  LOBYTE(v40) = v36;
  *(_QWORD *)a2 = v38;
  *(_QWORD *)(a2 + 8) = v37;
  *(_BYTE *)(a2 + 16) = v36;
  *(_QWORD *)(a2 + 24) = v39;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v31;
  *(_BYTE *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v33;
  sub_1000E439C(v38, v37, v36);
  swift_bridgeObjectRetain(v39);
  sub_1000E439C(v29, v31, v17);
  swift_bridgeObjectRetain(v33);
  sub_1000E4458(v29, v31, v17);
  swift_bridgeObjectRelease(v33);
  sub_1000E4458(v38, v37, v40);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v39).n128_u64[0];
  return result;
}

__n128 sub_1001DFC2C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  _OWORD v21[9];

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    v8 = 0x746177656C707061;
  else
    v8 = 0x656E6F687069;
  v9 = Image.init(_internalSystemName:)(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  v10 = Image.resizable(capInsets:resizingMode:)(v7, v9, 0.0, 0.0, 0.0, 0.0);
  v11 = swift_release(v9);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v11);
  v12 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v13 = Color.init(_:)(v12);
  v14 = static Alignment.center.getter(v13);
  sub_1003EB758(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v21, 0.0, 1, 30.0, 0, v14, v15, v10, 0, 1, 0, v13);
  swift_release(v13);
  swift_release(v10);
  v16 = v21[7];
  *(_OWORD *)(a2 + 96) = v21[6];
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v21[8];
  v17 = v21[3];
  *(_OWORD *)(a2 + 32) = v21[2];
  *(_OWORD *)(a2 + 48) = v17;
  v18 = v21[5];
  *(_OWORD *)(a2 + 64) = v21[4];
  *(_OWORD *)(a2 + 80) = v18;
  result = (__n128)v21[1];
  *(_OWORD *)a2 = v21[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1001DFDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[4];
  _BYTE v12[16];
  _OWORD *v13;
  _OWORD v14[4];
  uint64_t v15;

  v4 = *(_OWORD *)(v2 + 48);
  v14[2] = *(_OWORD *)(v2 + 32);
  v14[3] = v4;
  v15 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v14[0] = *(_OWORD *)v2;
  v14[1] = v5;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_100047110(&qword_100826748);
  v13 = v14;
  v11[2] = v14;
  v6 = sub_100047110(&qword_100826750);
  v7 = sub_100047110(&qword_100826758);
  v8 = sub_100028384(&qword_100826760, &qword_100826750, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v9 = sub_1001E0B00();
  return Label.init(title:icon:)(sub_1001E0AF0, v12, sub_1001E0AF8, v11, v6, v7, v8, v9);
}

uint64_t sub_1001DFED4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result - 40;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  v7 = v5 + 72 * v3;
  v8 = v6 + 1;
  while (1)
  {
    if (v4 == v3)
      return (uint64_t)_swiftEmptyArrayStorage;
    if (v8 == ++v3)
      break;
    v9 = (uint64_t *)(v7 + 72);
    v10 = *(unsigned __int8 *)(v7 + 121);
    v7 += 72;
    if (v10 == 1)
    {
      v11 = v9[1];
      v12 = v9[3];
      v20 = v9[2];
      v21 = *v9;
      v13 = v9[5];
      v19 = v9[4];
      v18 = *((_BYTE *)v9 + 48);
      v14 = v9[8];
      v22 = v9[7];
      v23 = v5;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      v24 = v2;
      if ((result & 1) == 0)
        result = sub_100121878(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        result = sub_100121878(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[9 * v16];
      v17[4] = v21;
      v17[5] = v11;
      v17[6] = v20;
      v17[7] = v12;
      v17[8] = v19;
      v17[9] = v13;
      *((_BYTE *)v17 + 80) = v18;
      *((_BYTE *)v17 + 81) = 1;
      v5 = v23;
      v17[11] = v22;
      v17[12] = v14;
      v2 = v24;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E005C()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;

  v0 = sub_1002ACD40();
  v1 = sub_1001DFED4((uint64_t)v0);
  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v1);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, v4);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  return v6;
}

uint64_t sub_1001E0180()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;

  v0 = sub_1002ACD40();
  v1 = sub_1001DFED4((uint64_t)v0);
  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v1);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, v4);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  return v6;
}

uint64_t sub_1001E029C()
{
  return sub_1001DF754();
}

unint64_t sub_1001E02A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826718;
  if (!qword_100826718)
  {
    v1 = sub_100007050(&qword_100826710);
    sub_1001E030C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100826718);
  }
  return result;
}

unint64_t sub_1001E030C()
{
  unint64_t result;

  result = qword_100826720;
  if (!qword_100826720)
  {
    result = swift_getWitnessTable(&unk_10062C1E4, &type metadata for LegacyDeviceView);
    atomic_store(result, (unint64_t *)&qword_100826720);
  }
  return result;
}

BOOL sub_1001E0350()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v0 = sub_1002ACD40();
  v1 = v0[2];
  v13 = v0;
  if (v1)
  {
    v2 = v0 + 6;
    do
    {
      if ((*((_BYTE *)v2 + 33) & 1) == 0)
      {
        v7 = *(v2 - 2);
        v6 = *(v2 - 1);
        v8 = v2[1];
        v9 = v2[3];
        v15 = v2[2];
        v16 = *v2;
        v14 = *((_BYTE *)v2 + 32);
        v10 = v2[6];
        v17 = v2[5];
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100121878(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v4 = _swiftEmptyArrayStorage[2];
        v3 = _swiftEmptyArrayStorage[3];
        if (v4 >= v3 >> 1)
          sub_100121878(v3 > 1, v4 + 1, 1);
        _swiftEmptyArrayStorage[2] = v4 + 1;
        v5 = &_swiftEmptyArrayStorage[9 * v4];
        v5[4] = v7;
        v5[5] = v6;
        v5[6] = v16;
        v5[7] = v8;
        v5[8] = v15;
        v5[9] = v9;
        *((_BYTE *)v5 + 80) = v14;
        *((_BYTE *)v5 + 81) = 0;
        v5[11] = v17;
        v5[12] = v10;
      }
      v2 += 9;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease(v13);
  v11 = _swiftEmptyArrayStorage[2];
  swift_release(_swiftEmptyArrayStorage);
  return v11 != 0;
}

uint64_t sub_1001E04C0()
{
  NSString v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(OBBundle), "bundleWithIdentifier:", v0);

  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, "privacyFlow");
  if (!v2)
  {
LABEL_6:

    return 0;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "localizedButtonTitle");
  if (!v4)
  {

    goto LABEL_6;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

uint64_t sub_1001E05A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100826700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E05F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_1000E439C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

double sub_1001E063C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_1000E439C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

double sub_1001E0678(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_1000E4458(a1, a2, a3 & 1);
    swift_release(a5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001E06B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_1000E4458(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001E0700()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001E072C()
{
  uint64_t v0;

  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 24))(0xD00000000000001DLL, 0x800000010068F0C0);
}

uint64_t sub_1001E0764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001DF86C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001E076C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008266F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001E07B4()
{
  unint64_t result;

  result = qword_100826740;
  if (!qword_100826740)
  {
    result = swift_getWitnessTable(&unk_100640FDC, &type metadata for LegacyDevice);
    atomic_store(result, (unint64_t *)&qword_100826740);
  }
  return result;
}

uint64_t destroy for LegacyDevice(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for LegacyDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for LegacyDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for LegacyDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyDevice(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyDeviceView()
{
  return &type metadata for LegacyDeviceView;
}

uint64_t sub_1001E0A7C()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_1008266E0);
  v1[1] = sub_100028384(&qword_1008266F0, &qword_1008266E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.scenePadding(_:)>>, 1);
}

uint64_t sub_1001E0AE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF30C, 1);
}

double sub_1001E0AF0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1001DF9CC((_QWORD *)*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

double sub_1001E0AF8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1001DFC2C(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1001E0B00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826768;
  if (!qword_100826768)
  {
    v1 = sub_100007050(&qword_100826758);
    sub_1001E0B6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826768);
  }
  return result;
}

unint64_t sub_1001E0B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826770;
  if (!qword_100826770)
  {
    v1 = sub_100007050(&qword_100826778);
    sub_1001E0BF0();
    sub_100028384(&qword_1008237E0, &qword_1008237E8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826770);
  }
  return result;
}

unint64_t sub_1001E0BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826780;
  if (!qword_100826780)
  {
    v1 = sub_100007050(&qword_100826788);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826780);
  }
  return result;
}

uint64_t sub_1001E0C54()
{
  return sub_100028384(&qword_100826790, &qword_100826798, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_1001E0C88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v2 = swift_getKeyPath(&unk_10062C310);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

char *sub_1001E0CF8(void *a1, void *a2, void *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  objc_class *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  _QWORD aBlock[5];
  uint64_t v27;
  objc_super v28;

  v7 = sub_100047110((uint64_t *)&unk_100826820);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v3[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource__metrics];
  aBlock[0] = _swiftEmptyArrayStorage;
  v12 = v3;
  v13 = sub_100047110(&qword_100826810);
  Published.init(initialValue:)(aBlock, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v10, v7);
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columnSizes] = _swiftEmptyDictionarySingleton;
  v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_hasAggregateRow] = 1;
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_dataCalculator] = a2;
  v14 = a2;
  v15 = objc_msgSend(a3, "fitnessUIFormattingManager");
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_formattingManager] = v15;
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_workout] = a1;
  *(_QWORD *)&v12[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_defaultColumns] = &off_100780998;
  v16 = a1;

  v17 = (objc_class *)type metadata accessor for WorkoutDetailDownhillRunDataSource(0);
  v28.receiver = v12;
  v28.super_class = v17;
  v18 = (char *)objc_msgSendSuper2(&v28, "init");
  v19 = *(void **)&v18[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_dataCalculator];
  v20 = *(_QWORD *)&v18[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_workout];
  v21 = swift_allocObject(&unk_10078D808, 24, 7);
  *(_QWORD *)(v21 + 16) = v18;
  aBlock[4] = sub_1001E2BF8;
  v27 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E14F0;
  aBlock[3] = &unk_10078D820;
  v22 = _Block_copy(aBlock);
  v23 = v27;
  v24 = v18;
  objc_msgSend(v19, "downhillRunsForWorkout:completion:", v20, v22, swift_release(v23).n128_f64[0]);
  _Block_release(v22);

  return v24;
}

void sub_1001E0F90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t KeyPath;
  uint64_t v30;
  id v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void (*v40)(_QWORD *, _QWORD);
  uint64_t v41;
  __n128 v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[8];
  _QWORD aBlock[5];
  uint64_t v64;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = __chkstk_darwin(v10);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v15 = sub_100047110(&qword_10082CEC0);
    v16 = swift_allocObject(v15, 64, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100622F90;
    swift_getErrorValue(a2, v62, &v60);
    v17 = v60;
    v18 = v61;
    *(_QWORD *)(v16 + 56) = v61;
    v19 = sub_10004C480((_QWORD *)(v16 + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v19, v17, v18);
    swift_errorRetain(a2);
    print(_:separator:terminator:)(v16, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a2);
    return;
  }
  if (a1)
  {
    v57 = v12;
    v58 = v11;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v52 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v52 = a1;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v52);
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
    }
    v59 = v7;
    if (v20)
    {
      v56 = a3;
      aBlock[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v20);
      if (v20 < 0)
      {
LABEL_26:
        __break(1u);
        return;
      }
      v21 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
        else
          v22 = *(id *)(a1 + 8 * v21 + 32);
        v23 = v22;
        ++v21;
        v24 = type metadata accessor for WorkoutDurationMetrics();
        swift_allocObject(v24, 160, 7);
        v25 = sub_100354444(v23);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
        v26 = *(_QWORD *)(aBlock[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
        v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v25);
        specialized ContiguousArray._endMutation()(v27);
      }
      while (v20 != v21);
      v28 = (_QWORD *)aBlock[0];
      a3 = v56;
    }
    else
    {
      v28 = _swiftEmptyArrayStorage;
    }
    KeyPath = swift_getKeyPath(&unk_10062C2E8);
    v30 = swift_getKeyPath(&unk_10062C310);
    aBlock[0] = v28;
    v31 = a3;
    static Published.subscript.setter(aBlock, v31, KeyPath, v30);
    v32 = objc_allocWithZone((Class)type metadata accessor for DownhillRunsStatsBridge());
    v33 = (char *)sub_1002620D0(a1);
    v34 = *(_QWORD *)&v33[OBJC_IVAR___CHWorkoutDownhillRunsStats_downhillRunsStats];
    swift_retain_n(v34, 2);

    v35 = type metadata accessor for WorkoutDurationMetrics();
    swift_allocObject(v35, 160, 7);
    v56 = (void *)v34;
    v36 = sub_100354594(v34);
    v37 = swift_getKeyPath(&unk_10062C2E8);
    v38 = swift_getKeyPath(&unk_10062C310);
    swift_retain(v36);
    v40 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(aBlock, v31, v37, v38);
    v41 = *v39;
    if ((unint64_t)*v39 >> 62)
    {
      v53 = v41 & 0xFFFFFFFFFFFFFF8;
      if (v41 < 0)
        v53 = *v39;
      v55 = v53;
      swift_bridgeObjectRetain(v41);
      v55 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease(v41);
      if (v55 < 0)
      {
        __break(1u);
        goto LABEL_26;
      }
    }
    sub_10011EAA0(0, 0, v36);
    v40(aBlock, 0);
    swift_release(v37);
    swift_release(v38);
    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v43 = (void *)static OS_dispatch_queue.main.getter(v42);
    v44 = swift_allocObject(&unk_10078D858, 24, 7);
    *(_QWORD *)(v44 + 16) = v31;
    aBlock[4] = sub_1001E2C00;
    v64 = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_10078D870;
    v45 = _Block_copy(aBlock);
    v46 = v64;
    v47 = v31;
    swift_release(v46);
    static DispatchQoS.unspecified.getter(v48);
    aBlock[0] = _swiftEmptyArrayStorage;
    v49 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v50 = sub_100047110(&qword_100828C80);
    v51 = sub_10002FB08();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v50, v51, v6, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v45);
    _Block_release(v45);
    swift_release(v56);
    swift_release(v36);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v58);
  }
}

double sub_1001E1490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_1001E17AC();
  v0 = type metadata accessor for WorkoutDetailDownhillRunDataSource(0);
  v1 = sub_1000083D8(&qword_100826818, type metadata accessor for WorkoutDetailDownhillRunDataSource, (uint64_t)&unk_10062C290);
  v2 = ObservableObject<>.objectWillChange.getter(v0, v1);
  ObservableObjectPublisher.send()();
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

double sub_1001E14F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;
  double result;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = type metadata accessor for DownhillRunBridge();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_1001E156C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns);
    if (*(_QWORD *)(v2 + 16) > a1)
    {
      sub_1001A5750(*(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_formattingManager), *(_BYTE *)(v2 + a1 + 32));
      return;
    }
  }
  __break(1u);
}

void sub_1001E15A8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  _BYTE v7[24];

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns);
  if (*(_QWORD *)(v2 + 16) <= a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v3 = *(unsigned __int8 *)(v2 + a1 + 32);
  v4 = (uint64_t *)(v1 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columnSizes);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain(v5);
    sub_1004396A8(v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRelease(v5);
    else
      swift_bridgeObjectRelease(v5);
  }
}

uint64_t sub_1001E1668(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = result;
  if (*(_BYTE *)(v1 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_hasAggregateRow) == 1)
  {
    if (!result)
    {
      v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v4 = String._bridgeToObjectiveC()();
      v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
LABEL_6:

      return v6;
    }
LABEL_5:
    v7 = (void *)objc_opt_self(NSNumberFormatter);
    v8 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v2);
    v5 = objc_msgSend(v7, "localizedStringFromNumber:numberStyle:", v8, 0);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    goto LABEL_6;
  }
  v2 = result + 1;
  if (!__OFADD__(result, 1))
    goto LABEL_5;
  __break(1u);
  return result;
}

void sub_1001E17AC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  NSAttributedStringKey v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char v55[8];
  _QWORD *v56;
  unint64_t v57;

  v1 = v0;
  v46 = type metadata accessor for AttributedString(0);
  v45 = *(_QWORD *)(v46 - 8);
  v2 = __chkstk_darwin(v46);
  v44 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v5 = swift_getKeyPath(&unk_10062C310);
  static Published.subscript.getter(&v57, v1, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v57;
  if (v57 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v7)
  {
    v8 = 0;
    v9 = *(_QWORD **)&v1[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_defaultColumns];
    v10 = &v1[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columnSizes];
    v38 = v6 & 0xC000000000000001;
    v35 = v6 & 0xFFFFFFFFFFFFFF8;
    v43 = OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_workout;
    v34 = v6 + 32;
    v42 = OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_formattingManager;
    v50 = OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_hasAggregateRow;
    v53 = (char *)v9[2];
    v54 = v9;
    v49 = NSFontAttributeName;
    v48 = xmmword_100622F90;
    v47 = (char *)&type metadata for Any + 8;
    v40 = 0x800000010068E030;
    v39 = "";
    v37 = v6;
    v36 = v7;
    while (1)
    {
      if (v38)
      {
        v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      }
      else
      {
        if (v8 >= *(_QWORD *)(v35 + 16))
          goto LABEL_14;
        v51 = *(_QWORD *)(v34 + 8 * v8);
        swift_retain(v51);
      }
      v41 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      if (v53)
      {
        v52 = v8;
        swift_bridgeObjectRetain(v54);
        swift_beginAccess(v10, &v57, 0, 0);
        __asm { BR              X8 }
      }
      swift_release(v51);
      v8 = v41;
      if (v41 == v7)
        goto LABEL_19;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    if (v6 < 0)
      v11 = v6;
    else
      v11 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v6);
  }
LABEL_19:
  swift_bridgeObjectRelease(v6);
  v12 = *(_QWORD *)&v1[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_defaultColumns];
  v13 = *(_QWORD *)(v12 + 16);
  v14 = &v1[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columnSizes];
  v15 = v1;
  swift_bridgeObjectRetain(v12);
  swift_beginAccess(v14, v55, 0, 0);
  if (v13)
  {
    v16 = 0;
    v17 = v12 + 32;
    v18 = _swiftEmptyArrayStorage;
    v52 = v12;
    v53 = v15;
    v51 = v13;
    do
    {
      v54 = v18;
      v19 = 0;
      if (v16 <= v13)
        v20 = v13;
      else
        v20 = v16;
      v21 = v16 - v20;
      v22 = v17;
      while (1)
      {
        if (!(v21 + v19))
        {
          __break(1u);
          JUMPOUT(0x1001E223CLL);
        }
        v23 = *(_QWORD *)v14;
        if (*(_QWORD *)(*(_QWORD *)v14 + 16))
        {
          v24 = *(unsigned __int8 *)(v22 + v16);
          v25 = v17;
          swift_bridgeObjectRetain(*(_QWORD *)v14);
          sub_1004396A8(v24);
          v27 = v26;
          swift_bridgeObjectRelease(v23);
          v17 = v25;
          if ((v27 & 1) != 0)
            break;
        }
        ++v19;
        ++v22;
        if (v16 == --v13)
        {
          v12 = v52;
          v15 = v53;
          v18 = v54;
          goto LABEL_38;
        }
      }
      v18 = v54;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
      v56 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100121894(0, v18[2] + 1, 1);
        v18 = v56;
      }
      v12 = v52;
      v30 = v18[2];
      v29 = v18[3];
      if (v30 >= v29 >> 1)
      {
        sub_100121894(v29 > 1, v30 + 1, 1);
        v18 = v56;
      }
      v31 = v16 + 1;
      v16 += 1 + v19;
      v18[2] = v30 + 1;
      *((_BYTE *)v18 + v30 + 32) = v24;
      v32 = v31 == v13;
      v15 = v53;
      v13 = v51;
      v17 = v25;
    }
    while (!v32);
  }
  else
  {
    v18 = _swiftEmptyArrayStorage;
  }
LABEL_38:
  swift_bridgeObjectRelease(v12);

  v33 = *(_QWORD *)&v15[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns];
  *(_QWORD *)&v15[OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns] = v18;
  swift_bridgeObjectRelease(v33);
}

id sub_1001E22A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailDownhillRunDataSource(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E2380()
{
  return type metadata accessor for WorkoutDetailDownhillRunDataSource(0);
}

uint64_t type metadata accessor for WorkoutDetailDownhillRunDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1008267F8;
  if (!qword_1008267F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WorkoutDetailDownhillRunDataSource);
  return result;
}

void sub_1001E23C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1001E2460(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_10062C278;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_1001E2460(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100826808)
  {
    v2 = sub_100007050(&qword_100826810);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100826808);
  }
}

uint64_t sub_1001E24B8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns) + 16);
}

uint64_t sub_1001E24DC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_hasAggregateRow);
}

uint64_t sub_1001E24EC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for WorkoutDetailDownhillRunDataSource(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001E2528(uint64_t a1)
{
  uint64_t result;

  result = sub_1000083D8(&qword_100826818, type metadata accessor for WorkoutDetailDownhillRunDataSource, (uint64_t)&unk_10062C290);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001E2564@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v5 = swift_getKeyPath(&unk_10062C310);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001E25E0(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v5 = swift_getKeyPath(&unk_10062C310);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001E2654()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v2 = swift_getKeyPath(&unk_10062C310);
  static Published.subscript.getter(&v7, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v6 = v7;
    else
      v6 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  return v4;
}

void sub_1001E270C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t OpaqueTypeConformance2;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char v90;
  uint64_t v91;

  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v81 - v10;
  v12 = type metadata accessor for DynamicTypeSize(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100820D90);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v20 = *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_columns);
  if (*(_QWORD *)(v20 + 16) <= a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v83 = v13;
  v84 = v12;
  v85 = v19;
  v86 = v17;
  LODWORD(v87) = *(unsigned __int8 *)(v20 + a2 + 32);
  v21 = sub_1001A561C(v87);
  if (v21 == 0x72656B72616DLL && v22 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    goto LABEL_14;
  }
  v24 = v22;
  a2 = (unint64_t)v11;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x72656B72616DLL, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
LABEL_14:
    v88 = sub_1001E1668(a1);
    v89 = v48;
    v49 = sub_100038CA0();
    v50 = Text.init<A>(_:)(&v88, &type metadata for String, v49);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v58 = static Font.body.getter(v57);
    v60 = Text.font(_:)(v58, v50, v52, v56, v54, v59);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    swift_release(v58);
    v67 = v64 & 1;
    sub_1000E4458(v50, v52, v56);
    swift_bridgeObjectRelease(v54);
    sub_1001A5D38(v87);
    v69 = v68;
    v70 = Text.foregroundColor(_:)(v68, v60, v62, v67, v66);
    v72 = v71;
    LOBYTE(v56) = v73;
    v75 = v74;
    swift_release(v69);
    sub_1000E4458(v60, v62, v67);
    v76 = swift_bridgeObjectRelease(v66);
    v88 = v70;
    v89 = v72;
    v90 = v56 & 1;
    v91 = v75;
    v78 = v83;
    v77 = v84;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v83 + 104))(v15, enum case for DynamicTypeSize.large(_:), v84, v76);
    v79 = v85;
    View.dynamicTypeSize(_:)(v15, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v77);
    sub_1000E4458(v88, (uint64_t)v89, v90);
    swift_bridgeObjectRelease(v91);
    v88 = (uint64_t)&type metadata for Text;
    v89 = &protocol witness table for Text;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    AnyView.init<A>(_:)(v79, v86, OpaqueTypeConformance2);
    return;
  }
  v15 = (char *)v6;
  KeyPath = swift_getKeyPath(&unk_10062C2E8);
  v27 = swift_getKeyPath(&unk_10062C310);
  static Published.subscript.getter(&v88, v2, KeyPath, v27);
  swift_release(KeyPath);
  swift_release(v27);
  v6 = v88;
  if ((v88 & 0xC000000000000001) != 0)
  {
LABEL_17:
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v6);
    goto LABEL_12;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    v28 = *(_QWORD *)(v88 + 8 * a1 + 32);
    swift_retain(v28);
LABEL_12:
    v82 = a2;
    v86 = v28;
    swift_bridgeObjectRelease(v6);
    v29 = v87;
    sub_1001A601C(v28, *(void **)(v2 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_workout), 0, *(_QWORD *)(v2 + OBJC_IVAR___CHWorkoutDetailDownhillRunDataSource_formattingManager), v87, a2);
    v30 = v15;
    (*((void (**)(char *, unint64_t, uint64_t))v15 + 2))(v9, a2, v5);
    v31 = Text.init(_:)(v9);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    sub_1001A5D38(v29);
    v87 = v5;
    v39 = v38;
    v40 = Text.foregroundColor(_:)(v38, v31, v33, v37, v35);
    v42 = v41;
    v44 = v43;
    v46 = v45;
    swift_release(v39);
    sub_1000E4458(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    v88 = v40;
    v89 = v42;
    v90 = v44 & 1;
    v91 = v46;
    AnyView.init<A>(_:)(&v88, &type metadata for Text, &protocol witness table for Text);
    v47 = swift_release(v86);
    (*((void (**)(unint64_t, uint64_t, __n128))v30 + 1))(v82, v87, v47);
    return;
  }
  __break(1u);
}

uint64_t sub_1001E2BD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001E2BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001E0F90(a1, a2, *(void **)(v2 + 16));
}

double sub_1001E2C00()
{
  return sub_1001E1490();
}

NSString sub_1001E2C14()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A0D8 = (uint64_t)result;
  return result;
}

NSString sub_1001E2C48()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A0E0 = (uint64_t)result;
  return result;
}

void sub_1001E2D04(void *a1, uint64_t a2)
{
  sub_1001E2D58(a1, a2, &OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentDeviceDate, &qword_10081D740, &qword_10086A0D8, (uint64_t)sub_1001E2C14);
}

void sub_1001E2D34(void *a1, uint64_t a2)
{
  sub_1001E2D58(a1, a2, &OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentSelectedDate, &qword_10081D748, &qword_10086A0E0, (uint64_t)sub_1001E2C48);
}

void sub_1001E2D58(void *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  unsigned __int8 v13;
  void *v14;
  id v15;
  id v16;
  id v17;

  v12 = *a3;
  v13 = objc_msgSend(*(id *)(v6 + *a3), "isEqualToDate:", a1);
  v14 = *(void **)(v6 + v12);
  *(_QWORD *)(v6 + v12) = a1;
  v15 = a1;

  if ((v13 & 1) == 0)
  {
    v16 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v17 = v16;
    if (*a4 != -1)
    {
      swift_once(a4, a6);
      v16 = v17;
    }
    objc_msgSend(v16, "postNotificationName:object:", *a5, a2);

  }
}

void sub_1001E2E64(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain(a4);
  v9 = a1;
  a5(v8, a4);

  swift_unknownObjectRelease(a4);
}

id sub_1001E2F0C()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_dateCache], "removeObserver:", v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDateCache(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E3170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB54();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_10078D8D0, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  aBlock[4] = sub_1001E3510;
  v20 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_10078D8E8;
  v13 = _Block_copy(aBlock);
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10002FAC0();
  v16 = sub_100047110(&qword_100828C80);
  v17 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001E333C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001E3360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  char *v7;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  char v16[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentDeviceDate;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(Strong
                                                                   + OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentDeviceDate));
    v9 = Calendar.isDateInToday(_:)(v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((v9 & 1) == 0)
    {
      v10 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
      v11 = *(void **)&v7[v8];
      v12 = v7;
      LOBYTE(v11) = objc_msgSend(v11, "isEqualToDate:", v10);
      v13 = *(void **)&v7[v8];
      *(_QWORD *)&v7[v8] = v10;
      v14 = (char *)v10;

      if ((v11 & 1) != 0)
      {
        v7 = v12;
      }
      else
      {
        v7 = (char *)objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
        if (qword_10081D740 != -1)
          swift_once(&qword_10081D740, sub_1001E2C14);
        objc_msgSend(v7, "postNotificationName:object:", qword_10086A0D8, v12);

        v14 = v12;
      }

    }
  }
}

void sub_1001E3510()
{
  uint64_t v0;

  sub_1001E3360(v0);
}

ValueMetadata *type metadata accessor for ActivitySharingFriendListCompetitionViewRepresentable()
{
  return &type metadata for ActivitySharingFriendListCompetitionViewRepresentable;
}

char *sub_1001E352C(uint64_t a1, void *a2)
{
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v3 = type metadata accessor for ActivitySharingFriendListCompetitionView();
  v4 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "init");
  v5 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp40ActivitySharingFriendListCompetitionView_friend];
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp40ActivitySharingFriendListCompetitionView_friend] = a2;
  v6 = a2;

  v7 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp40ActivitySharingFriendListCompetitionView_competitionScoreView];
  v8 = objc_msgSend(v6, "currentCompetition");
  objc_msgSend(v7, "setFriend:competition:", v6, v8);

  v9 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp40ActivitySharingFriendListCompetitionView_competitionStageLabel];
  v10 = objc_msgSend(v6, "as_competitionStageString");
  objc_msgSend(v9, "setText:", v10);

  return v4;
}

char *sub_1001E3614(uint64_t a1)
{
  void **v1;

  return sub_1001E352C(a1, *v1);
}

uint64_t sub_1001E361C(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1001E364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E3710();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001E369C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E3710();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001E36EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E3710();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1001E3710()
{
  unint64_t result;

  result = qword_100826900;
  if (!qword_100826900)
  {
    result = swift_getWitnessTable(&unk_10062C3A8, &type metadata for ActivitySharingFriendListCompetitionViewRepresentable);
    atomic_store(result, (unint64_t *)&qword_100826900);
  }
  return result;
}

uint64_t sub_1001E3754@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  char v26;
  double v27;
  Swift::Double v28;
  uint64_t result;
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  char v35;
  char v36;
  _QWORD v37[2];
  __int128 v38;

  v32 = a5;
  v31 = a2 & 1;
  v10 = sub_100047110((uint64_t *)&unk_100828370);
  v11 = __chkstk_darwin(v10);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = (uint64_t)&v30[-v14];
  v16 = (int *)type metadata accessor for MetricDetailChartView(0);
  v17 = &a6[v16[9]];
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  sub_100021CC0(v15, (uint64_t)v13, (uint64_t *)&unk_100828370);
  State.init(wrappedValue:)(v17, v13, v10);
  sub_10001BE90(v15, (uint64_t *)&unk_100828370);
  v19 = &a6[v16[12]];
  v36 = 0;
  GestureState.init(wrappedValue:)(v37, &v36, &type metadata for Bool);
  v20 = v37[1];
  v21 = v38;
  *v19 = v37[0];
  *((_QWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 1) = v21;
  *a6 = a1;
  a6[1] = v31;
  sub_10004F8C8(a3, (uint64_t)&a6[v16[6]], type metadata accessor for MetricDetailViewModel);
  sub_10004F8C8(a4, (uint64_t)&a6[v16[7]], type metadata accessor for MetricFormattingHelper);
  v22 = v32;
  sub_100021CC0(v32, (uint64_t)&a6[v16[8]], &qword_10081F280);
  v23 = *(_QWORD *)(a3 + 16);
  v34 = a4;
  v35 = a1;
  swift_bridgeObjectRetain(v23);
  v24 = sub_100368E58((void (*)(uint64_t *__return_ptr, uint64_t))sub_1001E39F4, (uint64_t)v33, v23);
  swift_bridgeObjectRelease(v23);
  v25 = COERCE_DOUBLE(sub_10057165C((uint64_t)v24));
  LOBYTE(v15) = v26;
  swift_bridgeObjectRelease(v24);
  v27 = 0.0;
  if ((v15 & 1) == 0)
    v27 = v25;
  *(double *)&a6[v16[10]] = v27;
  v28 = Double.dynamicStepRoundUp(minValue:)(10.0);
  sub_10001BE90(v22, &qword_10081F280);
  sub_100011F54(a3, type metadata accessor for MetricDetailViewModel);
  result = sub_100011F54(a4, type metadata accessor for MetricFormattingHelper);
  *(Swift::Double *)&a6[v16[11]] = v28;
  return result;
}

uint64_t type metadata accessor for MetricDetailChartView(uint64_t a1)
{
  uint64_t result;

  result = qword_100826978;
  if (!qword_100826978)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricDetailChartView);
  return result;
}

void sub_1001E39F4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 v4;
  double v5;
  uint64_t v6;

  v4 = *(_BYTE *)(v2 + 24);
  objc_msgSend(*(id *)((char *)a1 + *(int *)(type metadata accessor for MetricChartData(0) + 24)), "doubleValueForUnit:", *a1);
  sub_100443B08(v4, v5);
  *a2 = v6;
}

uint64_t sub_1001E3A64(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t, __n128);
  id v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(uint64_t, uint64_t);
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  id v57;
  char *v58;
  uint64_t v59;
  void *v60;
  void (*v61)(void **, _QWORD, uint64_t, uint64_t);
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v74)(uint64_t, uint64_t);
  void *__dst;
  _QWORD *__dsta;
  uint64_t v77;
  uint64_t v78;
  __int128 v82;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v3 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)a1 = *a2;
    v22 = v21 + ((v3 + 16) & ~(unint64_t)v3);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
    v4 = a3[6];
    v5 = a1 + v4;
    v6 = (uint64_t)a2 + v4;
    v7 = *(void **)((char *)a2 + v4);
    v8 = *(void **)((char *)a2 + v4 + 8);
    *(_QWORD *)v5 = v7;
    *(_QWORD *)(v5 + 8) = v8;
    v9 = *(uint64_t *)((char *)a2 + v4 + 16);
    v10 = *(uint64_t *)((char *)a2 + v4 + 24);
    *(_QWORD *)(v5 + 16) = v9;
    *(_QWORD *)(v5 + 24) = v10;
    *(_BYTE *)(v5 + 40) = *((_BYTE *)a2 + v4 + 40);
    *(_QWORD *)(v5 + 32) = *(uint64_t *)((char *)a2 + v4 + 32);
    v11 = type metadata accessor for MetricDetailViewModel(0);
    v12 = *(int *)(v11 + 36);
    __dst = (void *)(v5 + v12);
    v77 = v11;
    v13 = (const void *)(v6 + v12);
    v14 = type metadata accessor for DateInterval(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v15 + 48);
    v17 = v7;
    v18 = v8;
    swift_bridgeObjectRetain(v9);
    v19 = swift_bridgeObjectRetain(v10);
    if (v16(v13, 1, v14, v19))
    {
      v20 = sub_100047110((uint64_t *)&unk_100827440);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *(_BYTE *)(v5 + *(int *)(v77 + 40)) = *(_BYTE *)(v6 + *(int *)(v77 + 40));
    v23 = *(int *)(v77 + 44);
    v24 = v5 + v23;
    v25 = v6 + v23;
    __dsta = (_QWORD *)type metadata accessor for Date(0);
    v78 = *(__dsta - 1);
    v74 = *(void (**)(uint64_t, uint64_t))(v78 + 16);
    v74(v24, v25);
    v26 = a3[7];
    v27 = a1 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = *(void **)((char *)a2 + v26);
    *(_QWORD *)(a1 + v26) = v29;
    v30 = type metadata accessor for MetricFormattingHelper(0);
    v31 = *(int *)(v30 + 20);
    v32 = v27 + v31;
    v33 = v28 + v31;
    v34 = type metadata accessor for AttributedString(0);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    v36 = v29;
    v35(v32, v33, v34);
    v37 = *(int *)(v30 + 24);
    v38 = *(void **)(v28 + v37);
    *(_QWORD *)(v27 + v37) = v38;
    v39 = a3[8];
    v40 = (_QWORD *)(a1 + v39);
    v41 = (uint64_t)a2 + v39;
    v42 = *(uint64_t *)((char *)a2 + v39);
    v43 = *(uint64_t *)((char *)a2 + v39 + 8);
    *v40 = v42;
    v40[1] = v43;
    v44 = v38;
    swift_retain(v42);
    swift_retain(v43);
    v45 = *(int *)(sub_100047110(&qword_10081F280) + 32);
    v46 = (void **)((char *)v40 + v45);
    v47 = (void **)(v41 + v45);
    v48 = type metadata accessor for MetricChartData(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_100047110(&qword_10081F090);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      v52 = v74;
      v51 = __dsta;
    }
    else
    {
      v53 = *v47;
      *v46 = *v47;
      v54 = *(int *)(v48 + 20);
      v55 = (char *)v46 + v54;
      v56 = (char *)v47 + v54;
      v57 = v53;
      v58 = v55;
      v52 = v74;
      v51 = __dsta;
      ((void (*)(char *, char *, _QWORD *))v74)(v58, v56, __dsta);
      v59 = *(int *)(v48 + 24);
      v60 = *(void **)((char *)v47 + v59);
      *(void **)((char *)v46 + v59) = v60;
      v61 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v49 + 56);
      v62 = v60;
      v61(v46, 0, 1, v48);
    }
    v22 = a1;
    v63 = a3[9];
    v64 = (char *)(a1 + v63);
    v65 = (char *)a2 + v63;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v78 + 48))((uint64_t)a2 + v63, 1, v51))
    {
      v66 = sub_100047110((uint64_t *)&unk_100828370);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, _QWORD *))v52)(v64, v65, v51);
      (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v78 + 56))(v64, 0, 1, v51);
    }
    v67 = *(int *)(sub_100047110(&qword_100826918) + 28);
    v68 = *(_QWORD *)&v65[v67];
    *(_QWORD *)&v64[v67] = v68;
    v69 = a3[11];
    *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(_QWORD *)(a1 + v69) = *(uint64_t *)((char *)a2 + v69);
    v70 = a3[12];
    v71 = a1 + v70;
    v72 = (uint64_t)a2 + v70;
    *(_BYTE *)v71 = *(_BYTE *)v72;
    v21 = *(_QWORD *)(v72 + 24);
    v82 = *(_OWORD *)(v72 + 8);
    *(_OWORD *)(v71 + 8) = v82;
    *(_QWORD *)(v71 + 24) = v21;
    swift_retain(v68);
    swift_retain(v82);
  }
  swift_retain(v21);
  return v22;
}

double sub_1001E3E38(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;

  v4 = a1 + a2[6];

  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 24));
  v5 = type metadata accessor for MetricDetailViewModel(0);
  v6 = v4 + *(int *)(v5 + 36);
  v7 = type metadata accessor for DateInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = v4 + *(int *)(v5 + 44);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = (id *)(a1 + a2[7]);

  v14 = type metadata accessor for MetricFormattingHelper(0);
  v15 = (char *)v13 + *(int *)(v14 + 20);
  v16 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);

  v17 = (_QWORD *)(a1 + a2[8]);
  swift_release(*v17);
  swift_release(v17[1]);
  v18 = (id *)((char *)v17 + *(int *)(sub_100047110(&qword_10081F280) + 32));
  v19 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
  {

    v12((uint64_t)v18 + *(int *)(v19 + 20), v10);
  }
  v20 = a1 + a2[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10))
    v12(v20, v10);
  v21 = sub_100047110(&qword_100826918);
  swift_release(*(_QWORD *)(v20 + *(int *)(v21 + 28)));
  v22 = a1 + a2[12];
  swift_release(*(_QWORD *)(v22 + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v22 + 24)).n128_u64[0];
  return result;
}

_BYTE *sub_1001E4028(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t, __n128);
  id v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(char *, char *, _QWORD *);
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  id v54;
  uint64_t v55;
  void *v56;
  void (*v57)(void **, _QWORD, uint64_t, uint64_t);
  id v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  void (*v71)(char *, char *, _QWORD *);
  _BYTE *__dst;
  _QWORD *__dsta;
  uint64_t v74;
  uint64_t v75;
  __int128 v79;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a3[6];
  v4 = &a1[v3];
  v5 = &a2[v3];
  v7 = *(void **)&a2[v3];
  v6 = *(void **)&a2[v3 + 8];
  *(_QWORD *)v4 = v7;
  *((_QWORD *)v4 + 1) = v6;
  v8 = *(_QWORD *)&a2[v3 + 16];
  v9 = *(_QWORD *)&a2[v3 + 24];
  *((_QWORD *)v4 + 2) = v8;
  *((_QWORD *)v4 + 3) = v9;
  v4[40] = a2[v3 + 40];
  *((_QWORD *)v4 + 4) = *(_QWORD *)&a2[v3 + 32];
  v10 = type metadata accessor for MetricDetailViewModel(0);
  v11 = *(int *)(v10 + 36);
  __dst = &v4[v11];
  v74 = v10;
  v12 = &v5[v11];
  v13 = type metadata accessor for DateInterval(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v14 + 48);
  v16 = v7;
  v17 = v6;
  swift_bridgeObjectRetain(v8);
  v18 = swift_bridgeObjectRetain(v9);
  if (v15(v12, 1, v13, v18))
  {
    v19 = sub_100047110((uint64_t *)&unk_100827440);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v4[*(int *)(v74 + 40)] = v5[*(int *)(v74 + 40)];
  v20 = *(int *)(v74 + 44);
  v21 = &v4[v20];
  v22 = &v5[v20];
  __dsta = (_QWORD *)type metadata accessor for Date(0);
  v75 = *(__dsta - 1);
  v71 = *(void (**)(char *, char *, _QWORD *))(v75 + 16);
  ((void (*)(_BYTE *, _BYTE *))v71)(v21, v22);
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(void **)&a2[v23];
  *(_QWORD *)&a1[v23] = v26;
  v27 = type metadata accessor for MetricFormattingHelper(0);
  v28 = *(int *)(v27 + 20);
  v29 = &v24[v28];
  v30 = &v25[v28];
  v31 = type metadata accessor for AttributedString(0);
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
  v33 = v26;
  v32(v29, v30, v31);
  v34 = *(int *)(v27 + 24);
  v35 = *(void **)&v25[v34];
  *(_QWORD *)&v24[v34] = v35;
  v36 = a3[8];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(_QWORD *)&a2[v36];
  v40 = *(_QWORD *)&a2[v36 + 8];
  *v37 = v39;
  v37[1] = v40;
  v41 = v35;
  swift_retain(v39);
  swift_retain(v40);
  v42 = *(int *)(sub_100047110(&qword_10081F280) + 32);
  v43 = (void **)((char *)v37 + v42);
  v44 = (void **)&v38[v42];
  v45 = type metadata accessor for MetricChartData(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_100047110(&qword_10081F090);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    v49 = v71;
    v48 = __dsta;
  }
  else
  {
    v50 = *v44;
    *v43 = *v44;
    v51 = *(int *)(v45 + 20);
    v52 = (char *)v43 + v51;
    v53 = (char *)v44 + v51;
    v54 = v50;
    v71(v52, v53, __dsta);
    v55 = *(int *)(v45 + 24);
    v56 = *(void **)((char *)v44 + v55);
    *(void **)((char *)v43 + v55) = v56;
    v57 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v46 + 56);
    v58 = v56;
    v57(v43, 0, 1, v45);
    v48 = __dsta;
    v49 = v71;
  }
  v59 = a3[9];
  v60 = &a1[v59];
  v61 = &a2[v59];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, _QWORD *))(v75 + 48))(&a2[v59], 1, v48))
  {
    v62 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    v49(v60, v61, v48);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v75 + 56))(v60, 0, 1, v48);
  }
  v63 = *(int *)(sub_100047110(&qword_100826918) + 28);
  v64 = *(_QWORD *)&v61[v63];
  *(_QWORD *)&v60[v63] = v64;
  v65 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v65] = *(_QWORD *)&a2[v65];
  v66 = a3[12];
  v67 = &a1[v66];
  v68 = &a2[v66];
  *v67 = *v68;
  v69 = *((_QWORD *)v68 + 3);
  v79 = *(_OWORD *)(v68 + 8);
  *(_OWORD *)(v67 + 8) = v79;
  *((_QWORD *)v67 + 3) = v69;
  swift_retain(v64);
  swift_retain(v79);
  swift_retain(v69);
  return a1;
}

_BYTE *sub_1001E43E0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_BYTE *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  void **v34;
  _BYTE *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void **, uint64_t, uint64_t);
  int v61;
  int v62;
  void *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  id v69;
  char *v70;
  uint64_t v71;
  void *v72;
  void (*v73)(void **, _QWORD, uint64_t, uint64_t);
  id v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v94;
  void *v95;
  id v96;
  uint64_t v97;
  void *v98;
  void *v99;
  id v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a3[6];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = *(void **)&a2[v4];
  v8 = *(void **)v5;
  *(_QWORD *)v5 = v7;
  v9 = v7;

  v10 = (void *)*((_QWORD *)v6 + 1);
  v11 = (void *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v10;
  v12 = v10;

  v13 = *((_QWORD *)v6 + 2);
  v14 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *((_QWORD *)v6 + 3);
  v16 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *((_QWORD *)v6 + 4);
  v5[40] = v6[40];
  *((_QWORD *)v5 + 4) = v17;
  v18 = (int *)type metadata accessor for MetricDetailViewModel(0);
  v19 = v18[9];
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = type metadata accessor for DateInterval(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100047110((uint64_t *)&unk_100827440);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v5[v18[10]] = v6[v18[10]];
  v28 = v18[11];
  v29 = &v5[v28];
  v30 = &v6[v28];
  v31 = type metadata accessor for Date(0);
  v102 = *(_QWORD *)(v31 - 8);
  v101 = *(void (**)(char *, char *, uint64_t))(v102 + 24);
  v101(v29, v30, v31);
  v32 = a2;
  v33 = a3[7];
  v34 = (void **)&a1[v33];
  v35 = &a2[v33];
  v36 = *(void **)&a2[v33];
  v37 = *v34;
  *v34 = v36;
  v38 = v36;

  v39 = type metadata accessor for MetricFormattingHelper(0);
  v40 = *(int *)(v39 + 20);
  v41 = (char *)v34 + v40;
  v42 = &v35[v40];
  v43 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v41, v42, v43);
  v44 = *(int *)(v39 + 24);
  v45 = *(void **)&v35[v44];
  v46 = *(void **)((char *)v34 + v44);
  *(void **)((char *)v34 + v44) = v45;
  v47 = v45;

  v48 = a3[8];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v51 = *(_QWORD *)&a1[v48];
  v52 = *(_QWORD *)&a2[v48];
  *(_QWORD *)&a1[v48] = v52;
  swift_retain(v52);
  swift_release(v51);
  v53 = *((_QWORD *)v50 + 1);
  v54 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v53;
  swift_retain(v53);
  swift_release(v54);
  v55 = *(int *)(sub_100047110(&qword_10081F280) + 32);
  v56 = (void **)&v49[v55];
  v57 = (void **)&v50[v55];
  v58 = type metadata accessor for MetricChartData(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      v63 = *v57;
      *v56 = *v57;
      v64 = *(int *)(v58 + 20);
      v65 = (char *)v56 + v64;
      v66 = (char *)v57 + v64;
      v67 = v102;
      v68 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
      v69 = v63;
      v70 = v66;
      v32 = a2;
      v68(v65, v70, v31);
      v71 = *(int *)(v58 + 24);
      v72 = *(void **)((char *)v57 + v71);
      *(void **)((char *)v56 + v71) = v72;
      v73 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v59 + 56);
      v74 = v72;
      v73(v56, 0, 1, v58);
      goto LABEL_14;
    }
  }
  else
  {
    if (!v62)
    {
      v94 = *v57;
      v95 = *v56;
      *v56 = *v57;
      v96 = v94;

      v101((char *)v56 + *(int *)(v58 + 20), (char *)v57 + *(int *)(v58 + 20), v31);
      v97 = *(int *)(v58 + 24);
      v98 = *(void **)((char *)v57 + v97);
      v99 = *(void **)((char *)v56 + v97);
      *(void **)((char *)v56 + v97) = v98;
      v100 = v98;

      goto LABEL_13;
    }
    sub_100011F54((uint64_t)v56, type metadata accessor for MetricChartData);
  }
  v75 = sub_100047110(&qword_10081F090);
  memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
LABEL_13:
  v67 = v102;
LABEL_14:
  v76 = a3[9];
  v77 = &a1[v76];
  v78 = &v32[v76];
  v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v80 = v79(&a1[v76], 1, v31);
  v81 = v79(v78, 1, v31);
  if (!v80)
  {
    if (!v81)
    {
      v101(v77, v78, v31);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v77, v31);
    goto LABEL_19;
  }
  if (v81)
  {
LABEL_19:
    v82 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v77, v78, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v77, 0, 1, v31);
LABEL_20:
  v83 = *(int *)(sub_100047110(&qword_100826918) + 28);
  v84 = *(_QWORD *)&v77[v83];
  v85 = *(_QWORD *)&v78[v83];
  *(_QWORD *)&v77[v83] = v85;
  swift_retain(v85);
  swift_release(v84);
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&v32[a3[10]];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&v32[a3[11]];
  v86 = a3[12];
  v87 = &a1[v86];
  v88 = &v32[v86];
  *v87 = v32[v86];
  v89 = *(_QWORD *)&a1[v86 + 8];
  v90 = *(_QWORD *)&v32[v86 + 8];
  *((_QWORD *)v87 + 1) = v90;
  swift_retain(v90);
  swift_release(v89);
  v91 = *((_QWORD *)v88 + 3);
  v92 = *((_QWORD *)v87 + 3);
  *((_QWORD *)v87 + 2) = *((_QWORD *)v88 + 2);
  *((_QWORD *)v87 + 3) = v91;
  swift_retain(v91);
  swift_release(v92);
  return a1;
}

_BYTE *sub_1001E48F4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v51;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_OWORD *)&a2[v6 + 16];
  *(_OWORD *)v7 = *(_OWORD *)&a2[v6];
  *((_OWORD *)v7 + 1) = v9;
  v7[40] = a2[v6 + 40];
  *((_QWORD *)v7 + 4) = *(_QWORD *)&a2[v6 + 32];
  v10 = (int *)type metadata accessor for MetricDetailViewModel(0);
  v11 = v10[9];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for DateInterval(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100047110((uint64_t *)&unk_100827440);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v7[v10[10]] = v8[v10[10]];
  v17 = v10[11];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v20 - 8);
  v21 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v21(v18, v19, v20);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v25 = type metadata accessor for MetricFormattingHelper(0);
  v26 = *(int *)(v25 + 20);
  v27 = &v23[v26];
  v28 = &v24[v26];
  v29 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  *(_QWORD *)&v23[*(int *)(v25 + 24)] = *(_QWORD *)&v24[*(int *)(v25 + 24)];
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = *(_QWORD *)&a2[v30 + 8];
  *v31 = *(_QWORD *)&a2[v30];
  v31[1] = v33;
  v34 = *(int *)(sub_100047110(&qword_10081F280) + 32);
  v35 = (_QWORD *)((char *)v31 + v34);
  v36 = &v32[v34];
  v37 = type metadata accessor for MetricChartData(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = sub_100047110(&qword_10081F090);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    *v35 = *v36;
    v21((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v20);
    *(_QWORD *)((char *)v35 + *(int *)(v37 + 24)) = *(_QWORD *)((char *)v36 + *(int *)(v37 + 24));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v40 = a3[9];
  v41 = &a1[v40];
  v42 = &a2[v40];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(&a2[v40], 1, v20))
  {
    v43 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v21(v41, v42, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v41, 0, 1, v20);
  }
  v44 = sub_100047110(&qword_100826918);
  *(_QWORD *)&v41[*(int *)(v44 + 28)] = *(_QWORD *)&v42[*(int *)(v44 + 28)];
  v45 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v45] = *(_QWORD *)&a2[v45];
  v46 = a3[12];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  return a1;
}

_BYTE *sub_1001E4C0C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void **, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  void *v67;
  uint64_t v68;
  void *v69;
  void (*v70)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a3[6];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = *(void **)&a1[v4];
  *(_QWORD *)&a1[v4] = *(_QWORD *)&a2[v4];

  v8 = (void *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);

  v9 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
  swift_bridgeObjectRelease(v9);
  v10 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = *((_QWORD *)v6 + 3);
  swift_bridgeObjectRelease(v10);
  *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
  v5[40] = v6[40];
  v11 = (int *)type metadata accessor for MetricDetailViewModel(0);
  v12 = v11[9];
  v13 = &v5[v12];
  v14 = &v6[v12];
  v15 = type metadata accessor for DateInterval(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100047110((uint64_t *)&unk_100827440);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v5[v11[10]] = v6[v11[10]];
  v21 = v11[11];
  v22 = &v5[v21];
  v23 = &v6[v21];
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v70 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  v70(v22, v23, v24);
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *(void **)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];

  v30 = type metadata accessor for MetricFormattingHelper(0);
  v31 = *(int *)(v30 + 20);
  v32 = &v27[v31];
  v33 = &v28[v31];
  v34 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = *(int *)(v30 + 24);
  v36 = *(void **)&v27[v35];
  *(_QWORD *)&v27[v35] = *(_QWORD *)&v28[v35];

  v37 = a3[8];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = *(_QWORD *)&a1[v37];
  *(_QWORD *)&a1[v37] = *(_QWORD *)&a2[v37];
  swift_release(v40);
  v41 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
  swift_release(v41);
  v42 = *(int *)(sub_100047110(&qword_10081F280) + 32);
  v43 = (void **)&v38[v42];
  v44 = (void **)&v39[v42];
  v45 = type metadata accessor for MetricChartData(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      *v43 = *v44;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v24);
      *(void **)((char *)v43 + *(int *)(v45 + 24)) = *(void **)((char *)v44 + *(int *)(v45 + 24));
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v49)
  {
    sub_100011F54((uint64_t)v43, type metadata accessor for MetricChartData);
LABEL_12:
    v50 = sub_100047110(&qword_10081F090);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_13;
  }
  v67 = *v43;
  *v43 = *v44;

  v70((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v24);
  v68 = *(int *)(v45 + 24);
  v69 = *(void **)((char *)v43 + v68);
  *(void **)((char *)v43 + v68) = *(void **)((char *)v44 + v68);

LABEL_13:
  v51 = a3[9];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v55 = v54(&a1[v51], 1, v24);
  v56 = v54(v53, 1, v24);
  if (!v55)
  {
    if (!v56)
    {
      v70(v52, v53, v24);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v24);
    goto LABEL_18;
  }
  if (v56)
  {
LABEL_18:
    v57 = sub_100047110((uint64_t *)&unk_100828370);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v52, v53, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v52, 0, 1, v24);
LABEL_19:
  v58 = *(int *)(sub_100047110(&qword_100826918) + 28);
  v59 = *(_QWORD *)&v52[v58];
  *(_QWORD *)&v52[v58] = *(_QWORD *)&v53[v58];
  swift_release(v59);
  v60 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v60] = *(_QWORD *)&a2[v60];
  v61 = a3[12];
  v62 = &a1[v61];
  v63 = &a2[v61];
  *v62 = a2[v61];
  v64 = *(_QWORD *)&a1[v61 + 8];
  *((_QWORD *)v62 + 1) = *(_QWORD *)&a2[v61 + 8];
  swift_release(v64);
  v65 = *((_QWORD *)v62 + 3);
  *((_OWORD *)v62 + 1) = *((_OWORD *)v63 + 1);
  swift_release(v65);
  return a1;
}

uint64_t sub_1001E50AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E50B8);
}

uint64_t sub_1001E50B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for MetricDetailViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for MetricFormattingHelper(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_100047110(&qword_10081F280);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_100047110(&qword_100826918);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + a3[12] + 16);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1001E51B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E51BC);
}

uint64_t sub_1001E51BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = type metadata accessor for MetricDetailViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for MetricFormattingHelper(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v13 = sub_100047110(&qword_10081F280);
  v9 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v13;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100047110(&qword_100826918);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[12] + 16) = (a2 - 1);
  return result;
}

void sub_1001E52B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  v10[0] = &unk_10062C4C8;
  v10[1] = &unk_10062C4E0;
  v2 = type metadata accessor for MetricDetailViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for MetricFormattingHelper(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001E53C8(319, (unint64_t *)&qword_100826988, &qword_10081F090, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001E53C8(319, (unint64_t *)&unk_100826990, (uint64_t *)&unk_100828370, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[7] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[8] = &unk_10062C4F8;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_1001E53C8(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_100007050(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1001E5420(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF520, 1);
}

uint64_t sub_1001E5430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for Font.TextStyle(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.TextStyle.title(_:), v0);
  static Font.Weight.semibold.getter(v4);
  v5 = static Font.system(_:weight:)(v3);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_10086A100 = v5;
  return result;
}

double sub_1001E54D0()
{
  double result;

  result = 4.0;
  xmmword_10086A110 = xmmword_10062C490;
  *(_OWORD *)&qword_10086A120 = xmmword_10062C490;
  return result;
}

uint64_t sub_1001E54E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;

  v75 = a2;
  v3 = sub_100047110(&qword_10081EE68);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v67 - v8;
  v74 = sub_100047110(&qword_1008269F0);
  __chkstk_darwin(v74);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_1008269F8);
  __chkstk_darwin(v12);
  v73 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100047110(&qword_100826A00);
  v14 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + *(int *)(type metadata accessor for MetricDetailChartView(0) + 24);
  v18 = type metadata accessor for MetricDetailViewModel(0);
  if (*(_BYTE *)(v17 + *(int *)(v18 + 40)) == 1)
  {
    sub_1001E5C2C((uint64_t)v16);
    v19 = v73;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v73, v16, v76);
    swift_storeEnumTagMultiPayload(v19, v12, 0);
    v72 = sub_100007050(&qword_100826A18);
    v71 = sub_100007050(&qword_100825DE8);
    v70 = sub_100007050(&qword_100826A20);
    v69 = sub_100007050(&qword_100826A28);
    v68 = sub_100007050(&qword_100826A30);
    v67 = sub_100007050(&qword_100826A38);
    v20 = sub_100007050(&qword_100826A40);
    v21 = sub_100007050(&qword_100824CE8);
    v22 = sub_100007050(&qword_100826A48);
    v23 = sub_100007050((uint64_t *)&unk_100828370);
    v24 = sub_100007050(&qword_100826A50);
    v25 = type metadata accessor for Date(255);
    v26 = sub_100028384(&qword_100826A58, &qword_100826A50, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v77 = v24;
    v78 = v25;
    v79 = v26;
    v80 = &protocol witness table for Date;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXSelection<A>(value:)>>, 1);
    v28 = sub_1001EAE8C();
    v77 = v22;
    v78 = v23;
    v79 = OpaqueTypeConformance2;
    v80 = (void *)v28;
    v29 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v30 = sub_1001CDF80((unint64_t *)&qword_100824CF0, &qword_100824CE8, (uint64_t)&protocol witness table for Date, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v77 = v20;
    v78 = v21;
    v79 = v29;
    v80 = (void *)v30;
    v31 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v32 = sub_100028384(&qword_100826A68, &qword_100826A38, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    v77 = v68;
    v78 = v67;
    v79 = v31;
    v80 = (void *)v32;
    v33 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v34 = sub_1001EAF08();
    v77 = v70;
    v78 = v69;
    v79 = v33;
    v80 = (void *)v34;
    v35 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v36 = sub_1001CDF80(&qword_100825DF0, &qword_100825DE8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v77 = v72;
    v78 = v71;
    v79 = v35;
    v80 = (void *)v36;
    v37 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v38 = sub_100028384(&qword_100826A88, &qword_1008269F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v39 = v19;
    v40 = v76;
    _ConditionalContent<>.init(storage:)(v39, v76, v74, v37, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v40);
  }
  else
  {
    *(_QWORD *)v11 = static VerticalAlignment.center.getter(v18);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 1;
    v42 = &v11[*(int *)(sub_100047110(&qword_100826A08) + 44)];
    ProgressView<>.init<>()();
    v43 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v43(v7, v9, v3);
    *(_QWORD *)v42 = 0;
    v42[8] = 1;
    v44 = sub_100047110(&qword_100826A10);
    v43(&v42[*(int *)(v44 + 48)], v7, v3);
    v45 = &v42[*(int *)(v44 + 64)];
    *(_QWORD *)v45 = 0;
    v45[8] = 1;
    v46 = *(void (**)(char *, uint64_t))(v4 + 8);
    v46(v9, v3);
    v46(v7, v3);
    v47 = v73;
    sub_100021CC0((uint64_t)v11, v73, &qword_1008269F0);
    swift_storeEnumTagMultiPayload(v47, v12, 1);
    v72 = sub_100007050(&qword_100826A18);
    v71 = sub_100007050(&qword_100825DE8);
    v70 = sub_100007050(&qword_100826A20);
    v69 = sub_100007050(&qword_100826A28);
    v68 = sub_100007050(&qword_100826A30);
    v67 = sub_100007050(&qword_100826A38);
    v48 = sub_100007050(&qword_100826A40);
    v49 = sub_100007050(&qword_100824CE8);
    v50 = sub_100007050(&qword_100826A48);
    v51 = sub_100007050((uint64_t *)&unk_100828370);
    v52 = sub_100007050(&qword_100826A50);
    v53 = type metadata accessor for Date(255);
    v54 = sub_100028384(&qword_100826A58, &qword_100826A50, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v77 = v52;
    v78 = v53;
    v79 = v54;
    v80 = &protocol witness table for Date;
    v55 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXSelection<A>(value:)>>, 1);
    v56 = sub_1001EAE8C();
    v77 = v50;
    v78 = v51;
    v79 = v55;
    v80 = (void *)v56;
    v57 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v58 = sub_1001CDF80((unint64_t *)&qword_100824CF0, &qword_100824CE8, (uint64_t)&protocol witness table for Date, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v77 = v48;
    v78 = v49;
    v79 = v57;
    v80 = (void *)v58;
    v59 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v60 = sub_100028384(&qword_100826A68, &qword_100826A38, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    v77 = v68;
    v78 = v67;
    v79 = v59;
    v80 = (void *)v60;
    v61 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v62 = sub_1001EAF08();
    v77 = v70;
    v78 = v69;
    v79 = v61;
    v80 = (void *)v62;
    v63 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v64 = sub_1001CDF80(&qword_100825DF0, &qword_100825DE8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v77 = v72;
    v78 = v71;
    v79 = v63;
    v80 = (void *)v64;
    v65 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v66 = sub_100028384(&qword_100826A88, &qword_1008269F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v47, v76, v74, v65, v66);
    return sub_10001BE90((uint64_t)v11, &qword_1008269F0);
  }
}

uint64_t sub_1001E5C2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  void (**v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t result;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)(char *, uint64_t);
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  _QWORD v120[2];
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;

  v2 = v1;
  v94 = a1;
  v3 = sub_100047110(&qword_100824C50);
  __chkstk_darwin(v3);
  v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v111);
  v107 = (uint64_t *)((char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100047110(&qword_100826A90);
  __chkstk_darwin(v7);
  v100 = (uint64_t *)((char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = sub_100047110(&qword_100826A50);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100047110(&qword_100826A48);
  v104 = *(void (***)(char *, uint64_t))(v105 - 8);
  __chkstk_darwin(v105);
  v119 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100826A40);
  v108 = *(_QWORD *)(v12 - 8);
  v109 = v12;
  __chkstk_darwin(v12);
  v106 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100047110(&qword_100826A30);
  v112 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v110 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_100826A20);
  v115 = *(_QWORD *)(v15 - 8);
  v116 = v15;
  __chkstk_darwin(v15);
  v113 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100047110(&qword_100826A18);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v117 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MetricDetailChartView(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Calendar.Component(0);
  __chkstk_darwin(v22);
  v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v18;
  v28 = v2 + *(int *)(v18 + 24);
  v29 = *(char **)(v28 + 32);
  v30 = *(unsigned __int8 *)(v28 + 40);
  v118 = v5;
  if (v30 == 1)
    v31 = (unsigned int *)*(&off_10078DAD0 + (_QWORD)v29);
  else
    v31 = (unsigned int *)&enum case for Calendar.Component.month(_:);
  v32 = *v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 104);
  v91 = v23;
  v90 = v24;
  v33(v26, v32, v23);
  v34 = sub_10041D6FC(v29, v30, 1.0);
  v35 = _swiftEmptyArrayStorage;
  if (v34)
    v35 = (_QWORD *)v34;
  v99 = v35;
  sub_10004F8C8(v2, (uint64_t)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricDetailChartView);
  v36 = *(unsigned __int8 *)(v19 + 80);
  v96 = ((v36 + 16) & ~v36) + v20;
  v37 = (v36 + 16) & ~v36;
  v97 = v37;
  v95 = v36 | 7;
  v38 = swift_allocObject(&unk_10078D9F8, v96, v36 | 7);
  v39 = sub_100047C88((uint64_t)v21, v38 + v37, type metadata accessor for MetricDetailChartView);
  v89 = &v86;
  __chkstk_darwin(v39);
  *(&v86 - 4) = v2;
  *(&v86 - 3) = (uint64_t)v26;
  *(&v86 - 2) = (uint64_t)sub_1001EAFB0;
  *(&v86 - 1) = v38;
  v88 = v38;
  v40 = sub_100047110(&qword_100826A98);
  v87 = v26;
  v41 = v40;
  v42 = sub_1001EAFF8();
  v43 = v10;
  Chart.init(content:)(sub_1001EAFEC, &v86 - 6, v41, v42);
  v102 = v27;
  v44 = sub_100047110(&qword_100826918);
  v45 = v100;
  State.projectedValue.getter(v100);
  v46 = type metadata accessor for Date(0);
  v47 = sub_100028384(&qword_100826A58, &qword_100826A50, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v98 = v2;
  v48 = v47;
  v49 = v103;
  View.chartXSelection<A>(value:)(v45, v103, v46, v47, &protocol witness table for Date);
  sub_10001BE90((uint64_t)v45, &qword_100826A90);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v43, v49);
  v50 = v107;
  State.wrappedValue.getter(v107, v44);
  sub_10004F8C8(v2, (uint64_t)v21, type metadata accessor for MetricDetailChartView);
  v51 = swift_allocObject(&unk_10078DA20, v96, v95);
  sub_100047C88((uint64_t)v21, v51 + v97, type metadata accessor for MetricDetailChartView);
  v122 = v49;
  v123 = v46;
  v124 = v48;
  v125 = &protocol witness table for Date;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.chartXSelection<A>(value:)>>, 1);
  v53 = sub_1001EAE8C();
  v54 = v106;
  v55 = v105;
  v56 = v111;
  v57 = v119;
  View.onChange<A>(of:initial:_:)(v50, 0, sub_1001EB548, v51, v105, v111, OpaqueTypeConformance2, v53);
  swift_release(v51);
  sub_10001BE90((uint64_t)v50, (uint64_t *)&unk_100828370);
  v104[1](v57, v55);
  v58 = v99;
  v121 = v99;
  v59 = (_QWORD *)type metadata accessor for ScaleType(0);
  v60 = *(void (***)(char *, uint64_t))(*(v59 - 1) + 56);
  v61 = (uint64_t)v118;
  v107 = v59;
  v104 = v60;
  ((void (*)(char *, uint64_t, uint64_t))v60)(v118, 1, 1);
  v62 = sub_100047110(&qword_100824CE8);
  v122 = v55;
  v123 = v56;
  v124 = OpaqueTypeConformance2;
  v125 = (void *)v53;
  v63 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v64 = sub_1001CDF80((unint64_t *)&qword_100824CF0, &qword_100824CE8, (uint64_t)&protocol witness table for Date, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v65 = v109;
  v66 = v110;
  View.chartXScale<A>(domain:type:)(&v121, v61, v109, v62, v63, v64);
  sub_10001BE90(v61, &qword_100824C50);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v54, v65);
  swift_bridgeObjectRelease(v58);
  v119 = (char *)&v86;
  __chkstk_darwin(v67);
  v68 = v98;
  *(&v86 - 2) = v98;
  v69 = sub_100047110(&qword_100826A38);
  v122 = v65;
  v123 = v62;
  v124 = v63;
  v125 = (void *)v64;
  v70 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
  v71 = sub_100028384(&qword_100826A68, &qword_100826A38, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v73 = v113;
  v72 = v114;
  View.chartXAxis<A>(content:)(sub_1001EB574, &v86 - 4, v114, v69, v70, v71);
  v74 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v66, v72);
  __chkstk_darwin(v74);
  *(&v86 - 2) = v68;
  v75 = sub_100047110(&qword_100826A28);
  v122 = v72;
  v123 = v69;
  v124 = v70;
  v125 = (void *)v71;
  v76 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  v77 = sub_1001EAF08();
  v78 = v116;
  v79 = v117;
  View.chartYAxis<A>(content:)(sub_1001EB57C, &v86 - 4, v116, v75, v76, v77);
  result = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v73, v78);
  v81 = *(double *)(v68 + *(int *)(v102 + 44));
  if (v81 < 0.0)
  {
    __break(1u);
  }
  else
  {
    v120[0] = 0;
    *(double *)&v120[1] = v81;
    ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))v104)(v61, 1, 1, v107);
    v82 = sub_100047110(&qword_100825DE8);
    v122 = v78;
    v123 = v75;
    v124 = v76;
    v125 = (void *)v77;
    v83 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v84 = sub_1001CDF80(&qword_100825DF0, &qword_100825DE8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v85 = v93;
    View.chartYScale<A>(domain:type:)(v120, v61, v93, v82, v83, v84);
    swift_release(v88);
    sub_10001BE90(v61, &qword_100824C50);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v79, v85);
    return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v87, v91);
  }
  return result;
}

uint64_t sub_1001E65E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v41 = (_QWORD *)a1;
  v38 = (char *)sub_100047110(&qword_100826C48);
  __chkstk_darwin(v38);
  v39 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081F090);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = type metadata accessor for MetricDetailChartView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for MetricChartData(0);
  v16 = *(_QWORD *)(v40 - 8);
  v17 = __chkstk_darwin(v40);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v36 - v20;
  v22 = *(unsigned __int8 *)(a2 + 1);
  sub_10004F8C8((uint64_t)v41, (uint64_t)&v36 - v20, v23);
  sub_10004F8C8(a2, (uint64_t)v15, type metadata accessor for MetricDetailChartView);
  if (v22 != 1)
  {
    sub_100011F54((uint64_t)v15, type metadata accessor for MetricDetailChartView);
    sub_100011F54((uint64_t)v21, type metadata accessor for MetricChartData);
LABEL_9:
    v30 = 0;
    return v30 & 1;
  }
  v37 = v19;
  v41 = v7;
  sub_10004F8C8((uint64_t)v21, (uint64_t)v12, type metadata accessor for MetricChartData);
  v24 = v40;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v40);
  v25 = sub_100047110(&qword_10081F280);
  Binding.wrappedValue.getter(v25);
  v26 = v39;
  v27 = v39 + *((int *)v38 + 12);
  sub_100021CC0((uint64_t)v12, v39, &qword_10081F090);
  sub_100021CC0((uint64_t)v10, v27, &qword_10081F090);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v29 = v26;
  if (v28(v26, 1, v24) == 1)
  {
    sub_10001BE90((uint64_t)v10, &qword_10081F090);
    sub_10001BE90((uint64_t)v12, &qword_10081F090);
    sub_100011F54((uint64_t)v15, type metadata accessor for MetricDetailChartView);
    sub_100011F54((uint64_t)v21, type metadata accessor for MetricChartData);
    if (v28(v27, 1, v40) == 1)
    {
      sub_10001BE90(v26, &qword_10081F090);
      v30 = 1;
      return v30 & 1;
    }
    goto LABEL_8;
  }
  v31 = (uint64_t)v21;
  v38 = v15;
  v32 = v41;
  sub_100021CC0(v29, (uint64_t)v41, &qword_10081F090);
  v33 = v40;
  if (v28(v27, 1, v40) == 1)
  {
    sub_10001BE90((uint64_t)v10, &qword_10081F090);
    sub_10001BE90((uint64_t)v12, &qword_10081F090);
    sub_100011F54((uint64_t)v38, type metadata accessor for MetricDetailChartView);
    sub_100011F54(v31, type metadata accessor for MetricChartData);
    sub_100011F54((uint64_t)v32, type metadata accessor for MetricChartData);
LABEL_8:
    sub_10001BE90(v29, &qword_100826C48);
    goto LABEL_9;
  }
  v35 = v37;
  sub_100047C88(v27, (uint64_t)v37, type metadata accessor for MetricChartData);
  sub_100139CE8();
  if ((static NSObject.== infix(_:_:)(*v32, *v35) & 1) != 0
    && (static Date.== infix(_:_:)((char *)v32 + *(int *)(v33 + 20), (char *)v35 + *(int *)(v33 + 20)) & 1) != 0)
  {
    v30 = static NSObject.== infix(_:_:)(*(_QWORD *)((char *)v32 + *(int *)(v33 + 24)), *(_QWORD *)((char *)v35 + *(int *)(v33 + 24)));
  }
  else
  {
    v30 = 0;
  }
  sub_100011F54((uint64_t)v35, type metadata accessor for MetricChartData);
  sub_10001BE90((uint64_t)v10, &qword_10081F090);
  sub_10001BE90((uint64_t)v12, &qword_10081F090);
  sub_100011F54((uint64_t)v38, type metadata accessor for MetricDetailChartView);
  sub_100011F54(v31, type metadata accessor for MetricChartData);
  sub_100011F54((uint64_t)v32, type metadata accessor for MetricChartData);
  sub_10001BE90(v29, &qword_10081F090);
  return v30 & 1;
}

uint64_t sub_1001E6A4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t OpaqueTypeConformance2;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  _QWORD v122[4];
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t KeyPath;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;

  v157 = a3;
  v158 = a4;
  v168 = a5;
  v169 = a2;
  v167 = sub_100047110(&qword_100826C18);
  __chkstk_darwin(v167);
  v166 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for AnnotationOverflowResolution.Boundary(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AnnotationOverflowResolution.Strategy(0);
  v9 = __chkstk_darwin(v8);
  v141 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v140 = (char *)&v123 - v11;
  v150 = type metadata accessor for AnnotationOverflowResolution(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for AnnotationPosition(0);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v14);
  v126 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100824DC8);
  __chkstk_darwin(v16);
  v124 = (char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for RuleMark(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100047110(&qword_100826B38);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100047110(&qword_100826B30);
  v133 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100047110(&qword_100826B20);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100047110(&qword_100826C20);
  v162 = *(_QWORD *)(v22 - 8);
  v163 = v22;
  __chkstk_darwin(v22);
  v136 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_10081F090);
  __chkstk_darwin(v24);
  v155 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for MetricChartData(0);
  v156 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v134 = (uint64_t)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100047110(&qword_100826B18);
  v28 = __chkstk_darwin(v27);
  v165 = (uint64_t)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v164 = (char *)&v123 - v30;
  v31 = type metadata accessor for Calendar.Component(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v31);
  v34 = (char *)&v123 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for MetricDetailChartView(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = v35;
  v153 = v35;
  v38 = *(_QWORD *)(v36 + 64);
  __chkstk_darwin(v35);
  v39 = (char *)&v123 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100047110(&qword_100826AB0);
  v159 = *(_QWORD *)(v161 - 8);
  v40 = __chkstk_darwin(v161);
  v160 = (char *)&v123 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v170 = (char *)&v123 - v42;
  v43 = *(int *)(v37 + 24);
  v151 = (char *)a1;
  v171 = *(_QWORD *)(a1 + v43 + 16);
  v44 = v171;
  KeyPath = swift_getKeyPath(&unk_10062C560);
  sub_10004F8C8(a1, (uint64_t)v39, type metadata accessor for MetricDetailChartView);
  (*(void (**)(char *, uint64_t *, uint64_t))(v32 + 16))(v34, v169, v31);
  v45 = *(unsigned __int8 *)(v36 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = *(unsigned __int8 *)(v32 + 80);
  v48 = (v38 + v47 + v46) & ~v47;
  v49 = (v33 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_10078DA98, v49 + 16, v45 | v47 | 7);
  sub_100047C88((uint64_t)v39, v50 + v46, type metadata accessor for MetricDetailChartView);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v50 + v48, v34, v31);
  v51 = (_QWORD *)(v50 + v49);
  v52 = v158;
  *v51 = v157;
  v51[1] = v52;
  swift_bridgeObjectRetain(v44);
  swift_retain(v52);
  v53 = sub_100047110(&qword_100825EA8);
  v54 = sub_100047110(&qword_100826AC0);
  v55 = sub_100028384(&qword_100825EB0, &qword_100825EA8, (uint64_t)&protocol conformance descriptor for [A]);
  v56 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v57 = sub_1001EB08C();
  v58 = v54;
  v59 = v154;
  v60 = v55;
  v61 = (uint64_t)v155;
  v62 = v56;
  v63 = v151;
  ForEach<>.init(_:id:content:)(&v171, KeyPath, sub_1001EBEB4, v50, v53, v58, v60, v62, v57);
  v64 = sub_100047110(&qword_10081F280);
  Binding.wrappedValue.getter(v64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v61, 1, v59) == 1)
  {
    sub_10001BE90(v61, &qword_10081F090);
    v65 = (uint64_t)v164;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v164, 1, 1, v163);
  }
  else
  {
    v66 = v134;
    sub_100047C88(v61, v134, type metadata accessor for MetricChartData);
    v67 = LocalizedStringKey.init(stringLiteral:)(1702125924, 0xE400000000000000);
    v69 = v68;
    v71 = v70;
    v73 = v72;
    v74 = v66 + *(int *)(v59 + 20);
    v75 = type metadata accessor for Calendar(0);
    v76 = (uint64_t)v126;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v126, 1, 1, v75);
    v77 = v71 & 1;
    v78 = v124;
    static PlottableValue.value<>(_:_:unit:calendar:)(v67, v69, v77, v73, v74, v169, v76);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v69);
    sub_10001BE90(v76, (uint64_t *)&unk_100827450);
    v79 = type metadata accessor for Date(0);
    v80 = v125;
    RuleMark.init<A>(x:yStart:yEnd:)(v78, 0, 1, 0, 1, v79, &protocol witness table for Date);
    v81 = v128;
    v82 = v129;
    ChartContent.zIndex(_:)(v129, &protocol witness table for RuleMark, -1.0);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v80, v82);
    v171 = v82;
    v172 = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v171, &opaque type descriptor for <<opaque return type of ChartContent.zIndex(_:)>>, 1);
    v84 = v132;
    v85 = v131;
    ChartContent.offset(x:yStart:yEnd:)(v131, OpaqueTypeConformance2, 0.0, -4.0, 0.0);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v81, v85);
    sub_1005F0EBC(*v63);
    v87 = Color.init(uiColor:)(v86);
    v175 = v87;
    v171 = v85;
    v172 = (void *)OpaqueTypeConformance2;
    v88 = swift_getOpaqueTypeConformance2(&v171, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:yStart:yEnd:)>>, 1);
    v89 = v137;
    v90 = v135;
    ChartContent.foregroundStyle<A>(_:)(&v175, v135, &type metadata for Color, v88, &protocol witness table for Color);
    v91 = swift_release(v87);
    v92 = (*(uint64_t (**)(char *, uint64_t, __n128))(v133 + 8))(v84, v90, v91);
    v93 = v145;
    v94 = static AnnotationPosition.top.getter(v92);
    v95 = v142;
    static AnnotationOverflowResolution.Boundary.chart.getter(v94);
    v96 = v140;
    static AnnotationOverflowResolution.Strategy.fit(to:)(v95);
    v97 = (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v95, v144);
    v98 = v141;
    static AnnotationOverflowResolution.Strategy.disabled.getter(v97);
    v99 = v148;
    v100 = AnnotationOverflowResolution.init(x:y:)(v96, v98);
    v169 = &v123;
    v101 = __chkstk_darwin(v100);
    v102 = static Alignment.center.getter(v101);
    v104 = v103;
    v105 = sub_100047110(&qword_100826B28);
    v171 = v90;
    v172 = &type metadata for Color;
    v173 = v88;
    v174 = &protocol witness table for Color;
    v122[2] = swift_getOpaqueTypeConformance2(&v171, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v122[3] = sub_1001EB3B8();
    v122[1] = v105;
    v106 = v139;
    v122[0] = v139;
    v107 = v136;
    ((void (*)(char *, uint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *))ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:))(v93, v102, v104, 0, 0, v99, sub_1001EBF44, v122);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v99, v150);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v93, v147);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v89, v106);
    v109 = v162;
    v108 = v163;
    v65 = (uint64_t)v164;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v164, v107, v163);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v65, 0, 1, v108);
    sub_100011F54(v66, type metadata accessor for MetricChartData);
  }
  v111 = v159;
  v110 = v160;
  v112 = *(void (**)(char *, char *, uint64_t))(v159 + 16);
  v113 = v170;
  v114 = v161;
  v112(v160, v170, v161);
  v115 = v165;
  sub_100021CC0(v65, v165, &qword_100826B18);
  sub_1000F0610(&qword_100826AA8, &qword_100826AB0, (void (*)(void))sub_1001EB08C, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  v116 = v166;
  v112(v166, v110, v114);
  sub_1001EB278();
  v117 = v167;
  v118 = (uint64_t)&v116[*(int *)(v167 + 48)];
  sub_100021CC0(v115, v118, &qword_100826B18);
  v119 = v168;
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v168, v116, v114);
  sub_100045AD4(v118, v119 + *(int *)(v117 + 48), &qword_100826B18);
  sub_10001BE90(v65, &qword_100826B18);
  v120 = *(void (**)(char *, uint64_t))(v111 + 8);
  v120(v113, v114);
  sub_10001BE90(v115, &qword_100826B18);
  return ((uint64_t (*)(char *, uint64_t))v120)(v110, v114);
}

uint64_t sub_1001E76E0@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  uint64_t OpaqueTypeConformance2;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t (*v125)(_QWORD);
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t (*v156)(_QWORD *);
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;

  v155 = a5;
  v156 = a4;
  v153 = a3;
  v135 = type metadata accessor for BarMark(0);
  v133 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100047110(&qword_100826C28);
  v130 = *(_QWORD *)(v136 - 8);
  v10 = __chkstk_darwin(v136);
  v131 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v134 = (char *)&v128 - v12;
  v13 = sub_100047110(&qword_10081F090);
  v14 = __chkstk_darwin(v13);
  v129 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v152 = (char *)&v128 - v16;
  v17 = sub_100047110(&qword_100826C30);
  __chkstk_darwin(v17);
  v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110(&qword_100824DC0);
  __chkstk_darwin(v20);
  v154 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v22);
  v24 = (char *)&v128 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100047110(&qword_100824DC8);
  __chkstk_darwin(v25);
  v158 = (char *)&v128 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for LineMark(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100047110(&qword_100826AD8);
  v147 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v146 = (char *)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100047110(&qword_100826C38);
  v150 = *(_QWORD *)(v29 - 8);
  v151 = v29;
  v30 = __chkstk_darwin(v29);
  v145 = (char *)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v148 = (char *)&v128 - v32;
  v33 = sub_100047110(&qword_100826AD0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v157 = (char *)&v128 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for MetricChartData(0);
  v37 = *(int *)(v36 + 24);
  v38 = a1;
  objc_msgSend(*(id *)((char *)a1 + v37), "doubleValueForUnit:", *a1);
  if ((v39 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(a6, 1, 1, v33);
  v139 = v34;
  v140 = v33;
  v141 = a6;
  v138 = a2;
  v40 = *a2;
  v137 = v36;
  if (v40 <= 0x11 && ((1 << v40) & 0x21D00) != 0)
  {
    v41 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    v48 = (char *)v38 + *(int *)(v36 + 20);
    v49 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v24, 1, 1, v49);
    static PlottableValue.value<>(_:_:unit:calendar:)(v41, v43, v45 & 1, v47, v48, v153, v24);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v43);
    sub_10001BE90((uint64_t)v24, (uint64_t *)&unk_100827450);
    v50 = (char *)v138;
    LOBYTE(v48) = *v138;
    v51 = sub_1005F0848(*v138);
    v53 = v52;
    v159 = v51;
    v160 = v52;
    objc_msgSend(*(id *)((char *)v38 + v37), "doubleValueForUnit:", *v38);
    v55 = v54;
    v153 = type metadata accessor for MetricDetailChartView(0);
    sub_100443B08(v48, v55);
    v163 = v56;
    v57 = sub_100038CA0();
    v58 = v154;
    static PlottableValue.value<A>(_:_:)(&v159, &v163, &type metadata for Double, &type metadata for String, &protocol witness table for Double, v57);
    swift_bridgeObjectRelease(v53);
    v59 = sub_1005F0848(v48);
    v61 = v60;
    v159 = v59;
    v160 = v60;
    v163 = 0x65756C6176;
    v164 = 0xE500000000000000;
    static PlottableValue.value<A>(_:_:)(&v159, &v163, &type metadata for String, &type metadata for String, &protocol witness table for String, v57);
    swift_bridgeObjectRelease(v61);
    v62 = type metadata accessor for Date(0);
    v63 = v142;
    v64 = LineMark.init<A, B, C>(x:y:series:)(v158, v58, v19, v62, &type metadata for Double, &type metadata for String, &protocol witness table for Date, &protocol witness table for Double, &protocol witness table for String);
    __chkstk_darwin(v64);
    v65 = v156;
    v124 = v50;
    v125 = (uint64_t (*)(_QWORD))v156;
    v126 = v155;
    v127 = v38;
    v66 = sub_100047110(&qword_100826AE8);
    v158 = (char *)sub_1001EB1F4();
    v67 = v146;
    v68 = v144;
    ChartContent.symbol<A>(symbol:)(sub_1001EBF8C, &v128 - 6, v144, v66, &protocol witness table for LineMark, v158);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v63, v68);
    LOBYTE(v43) = v65(v38);
    sub_1005F0EBC(*v50);
    v70 = Color.init(uiColor:)(v69);
    v71 = Color.gradient.getter(v70);
    swift_release(v70);
    v72 = sub_100047110(&qword_10081F280);
    v73 = (uint64_t)v152;
    Binding.wrappedValue.getter(v72);
    LOBYTE(v50) = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 48))(v73, 1) == 1;
    sub_10001BE90(v73, &qword_10081F090);
    v74 = 0.4;
    if (((v50 | v43) & 1) != 0)
      v74 = 1.0;
    v163 = v71;
    *(float *)&v164 = v74;
    v75 = sub_100047110(&qword_100826AE0);
    v159 = v68;
    v160 = v66;
    v161 = &protocol witness table for LineMark;
    v162 = v158;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v159, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    v77 = sub_100028384(&qword_100826B08, &qword_100826AE0, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
    v78 = v145;
    v79 = v149;
    ChartContent.foregroundStyle<A>(_:)(&v163, v149, v75, OpaqueTypeConformance2, v77);
    v80 = swift_release(v71);
    (*(void (**)(char *, uint64_t, __n128))(v147 + 8))(v67, v79, v80);
    v82 = v150;
    v81 = v151;
    v83 = v148;
    (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v148, v78, v151);
    v84 = v157;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v157, v83, v81);
    v85 = sub_100047110(&qword_100826C40);
    swift_storeEnumTagMultiPayload(v84, v85, 0);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v81);
  }
  else
  {
    v89 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
    v91 = v90;
    v93 = v92;
    v95 = v94;
    v96 = (char *)a1 + *(int *)(v36 + 20);
    v97 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v24, 1, 1, v97);
    v98 = v158;
    static PlottableValue.value<>(_:_:unit:calendar:)(v89, v91, v93 & 1, v95, v96, v153, v24);
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(v91);
    sub_10001BE90((uint64_t)v24, (uint64_t *)&unk_100827450);
    LOBYTE(v89) = *v138;
    v99 = sub_1005F0848(*v138);
    v101 = v100;
    v159 = v99;
    v160 = v100;
    objc_msgSend(*(id *)((char *)a1 + v37), "doubleValueForUnit:", *a1);
    v103 = v102;
    type metadata accessor for MetricDetailChartView(0);
    sub_100443B08(v89, v103);
    v163 = v104;
    v105 = sub_100038CA0();
    v106 = v154;
    static PlottableValue.value<A>(_:_:)(&v159, &v163, &type metadata for Double, &type metadata for String, &protocol witness table for Double, v105);
    swift_bridgeObjectRelease(v101);
    v107 = type metadata accessor for Date(0);
    v108 = v132;
    BarMark.init<A, B>(x:y:width:height:stacking:)(v98, v106, 0, 3, 0, 3, 0, v107, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double);
    LOBYTE(v101) = v156(a1);
    sub_1005F0EBC(v89);
    v110 = Color.init(uiColor:)(v109);
    v111 = Color.gradient.getter(v110);
    swift_release(v110);
    v112 = sub_100047110(&qword_10081F280);
    v113 = (uint64_t)v129;
    Binding.wrappedValue.getter(v112);
    LOBYTE(v110) = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 48))(v113, 1) == 1;
    sub_10001BE90(v113, &qword_10081F090);
    v114 = 0.4;
    if (((v110 | v101) & 1) != 0)
      v114 = 1.0;
    v159 = v111;
    *(float *)&v160 = v114;
    v115 = sub_100047110(&qword_100826AE0);
    v116 = sub_100028384(&qword_100826B08, &qword_100826AE0, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
    v117 = v131;
    v118 = v135;
    ChartContent.foregroundStyle<A>(_:)(&v159, v135, v115, &protocol witness table for BarMark, v116);
    v119 = swift_release(v111);
    (*(void (**)(char *, uint64_t, __n128))(v133 + 8))(v108, v118, v119);
    v120 = v130;
    v121 = v134;
    v122 = v136;
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v134, v117, v136);
    v84 = v157;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v157, v121, v122);
    v123 = sub_100047110(&qword_100826C40);
    swift_storeEnumTagMultiPayload(v84, v123, 1);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
  }
  v86 = (uint64_t)v84;
  v87 = v141;
  sub_100045AD4(v86, v141, &qword_100826AD0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v87, 0, 1, v140);
}

double sub_1001E82A0@<D0>(char *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  double result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v8 = sub_100047110(&qword_10081F090);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = a2(a3);
  sub_1005F0EBC(*a1);
  v12 = Color.init(uiColor:)(v11);
  v13 = Color.gradient.getter(v12);
  swift_release(v12);
  type metadata accessor for MetricDetailChartView(0);
  v14 = sub_100047110(&qword_10081F280);
  Binding.wrappedValue.getter(v14);
  v15 = type metadata accessor for MetricChartData(0);
  LOBYTE(v12) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v10, 1, v15) == 1;
  v16 = sub_10001BE90((uint64_t)v10, &qword_10081F090);
  if (((v12 | a2) & 1) != 0)
    v17 = 1.0;
  else
    v17 = 0.4;
  v18 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(&v25, 0x4020000000000000, 0, 0, 1, v18, v19);
  v20 = v25;
  v21 = v26;
  v22 = v27;
  v23 = v28;
  *(_QWORD *)a4 = v13;
  *(float *)(a4 + 8) = v17;
  *(_WORD *)(a4 + 12) = 256;
  *(_QWORD *)(a4 + 16) = v20;
  *(_BYTE *)(a4 + 24) = v21;
  *(_QWORD *)(a4 + 32) = v22;
  *(_BYTE *)(a4 + 40) = v23;
  result = *(double *)&v29;
  *(_OWORD *)(a4 + 48) = v29;
  return result;
}

uint64_t sub_1001E8430@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char v75;

  v69 = a3;
  v63 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v63);
  v68 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100047110(&qword_100825F60);
  __chkstk_darwin(v64);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for MetricDetailHeaderView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100047110(&qword_10081F298);
  __chkstk_darwin(v61);
  v65 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100047110(&qword_100826B50);
  __chkstk_darwin(v62);
  v67 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = (unsigned __int8 *)&a1[*(int *)(type metadata accessor for MetricDetailChartView(0) + 24)];
  sub_1001E890C();
  v66 = a1;
  v15 = type metadata accessor for MetricChartData(0);
  v16 = *(void **)(a2 + *(int *)(v15 + 24));
  if (qword_10081D750 != -1)
    swift_once(&qword_10081D750, sub_1001E5430);
  sub_100443F58(v16, v13, qword_10086A100, 0, 0, 0, (uint64_t)&v10[v8[7]]);
  v17 = *((_QWORD *)v14 + 4);
  v18 = v14[40];
  v19 = sub_10041D8D4(a2 + *(int *)(v15 + 20), v17, v18);
  v21 = v20;
  *(_QWORD *)&v71 = v17;
  BYTE8(v71) = v18;
  static Binding.constant(_:)(&v73, &v71, &type metadata for MetricDataProviderTimeScale);
  v60 = v73;
  v22 = v74;
  v23 = v75;
  v70 = 0;
  static Binding.constant(_:)(&v71, &v70, &type metadata for Int);
  v59 = v71;
  v24 = v72;
  v25 = &v10[v8[11]];
  v26 = type metadata accessor for Date(0);
  v27 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *v10 = v13;
  *(_QWORD *)&v10[v8[6]] = 0x3FE0000000000000;
  v28 = (uint64_t *)&v10[v8[8]];
  *v28 = v19;
  v28[1] = v21;
  v29 = &v10[v8[9]];
  *(_OWORD *)v29 = v60;
  *((_QWORD *)v29 + 2) = v22;
  v29[24] = v23;
  v30 = &v10[v8[10]];
  *(_OWORD *)v30 = v59;
  *((_QWORD *)v30 + 2) = v24;
  if (qword_10081D758 != -1)
    v27 = swift_once(&qword_10081D758, sub_1001E54D0);
  v60 = xmmword_10086A110;
  v31 = qword_10086A120;
  v32 = unk_10086A128;
  v33 = static Edge.Set.all.getter(v27);
  v34 = v65;
  sub_10004F8C8((uint64_t)v10, v65, type metadata accessor for MetricDetailHeaderView);
  v35 = v34 + *(int *)(v61 + 36);
  *(_BYTE *)v35 = v33;
  *(_OWORD *)(v35 + 8) = v60;
  *(_QWORD *)(v35 + 24) = v31;
  *(_QWORD *)(v35 + 32) = v32;
  *(_BYTE *)(v35 + 40) = 0;
  sub_100011F54((uint64_t)v10, type metadata accessor for MetricDetailHeaderView);
  v36 = v68;
  v37 = &v68[*(int *)(v63 + 20)];
  v38 = enum case for RoundedCornerStyle.continuous(_:);
  v39 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v37, v38, v39);
  __asm { FMOV            V0.2D, #5.0 }
  *v36 = _Q0;
  sub_1005F0EBC(*v66);
  v46 = Color.init(uiColor:)(v45);
  sub_10004F8C8((uint64_t)v36, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v47 = v64;
  *(_QWORD *)&v7[*(int *)(v64 + 52)] = v46;
  *(_WORD *)&v7[*(int *)(v47 + 56)] = 256;
  v48 = sub_100011F54((uint64_t)v36, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = (uint64_t)v67;
  v53 = (uint64_t)&v67[*(int *)(v62 + 36)];
  sub_100021CC0((uint64_t)v7, v53, &qword_100825F60);
  v54 = (uint64_t *)(v53 + *(int *)(sub_100047110(&qword_100826B70) + 36));
  *v54 = v49;
  v54[1] = v51;
  sub_100021CC0(v34, v52, &qword_10081F298);
  sub_10001BE90((uint64_t)v7, &qword_100825F60);
  v55 = sub_10001BE90(v34, &qword_10081F298);
  v56 = static Color.black.getter(v55);
  v57 = v69;
  sub_100021CC0(v52, v69, &qword_100826B50);
  *(_QWORD *)(v57 + *(int *)(sub_100047110(&qword_100826B28) + 36)) = v56;
  return sub_10001BE90(v52, &qword_100826B50);
}

uint64_t sub_1001E890C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  _QWORD v30[2];

  v28 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MetricDetailChartView(0);
  v11 = sub_100443CF0(*v0);
  v13 = v12;
  v30[0] = v11;
  v30[1] = v12;
  v14 = sub_100038CA0();
  v15 = StringProtocol.localizedUppercase.getter(&type metadata for String, v14);
  v17 = v16;
  v18 = swift_bridgeObjectRelease(v13);
  AttributeContainer.init()(v18);
  AttributedString.init(_:attributes:)(v15, v17, v10);
  KeyPath = swift_getKeyPath(&unk_10062C580);
  v19 = swift_getKeyPath(&unk_10062C5B0);
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.caption2(_:), v4);
  static Font.Weight.semibold.getter(v20);
  v21 = static Font.system(_:weight:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = v28;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v28);
  v23 = Font.leading(_:)(v3, v21);
  v24 = swift_release(v21);
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v22, v24);
  v30[0] = v23;
  v25 = sub_1000EA1DC();
  return AttributedString.subscript.setter(v30, v19, v25);
}

uint64_t sub_1001E8B2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MetricDetailChartView(0);
  v3 = sub_100047110(&qword_100826918);
  State.wrappedValue.getter(v2, v3);
  sub_1001E8BCC((uint64_t)v2);
  return sub_10001BE90((uint64_t)v2, (uint64_t *)&unk_100828370);
}

uint64_t sub_1001E8BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  void (*v44)(char *, uint64_t);
  __n128 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = type metadata accessor for DateComponents(0);
  v73 = *(_QWORD *)(v2 - 8);
  v74 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v60 - v6;
  v75 = type metadata accessor for MetricChartData(0);
  v69 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_10081F090);
  v11 = __chkstk_darwin(v10);
  v68 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v60 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v60 - v19;
  v21 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v21);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1;
  v29 = v28;
  v31 = v30;
  sub_100021CC0(v27, (uint64_t)v23, (uint64_t *)&unk_100828370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v23, 1, v29) == 1)
  {
    sub_10001BE90((uint64_t)v23, (uint64_t *)&unk_100828370);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v15, 1, 1, v75);
    type metadata accessor for MetricDetailChartView(0);
    v32 = v68;
    sub_100021CC0((uint64_t)v15, v68, &qword_10081F090);
    v33 = sub_100047110(&qword_10081F280);
    Binding.wrappedValue.setter(v32, v33);
    return sub_10001BE90((uint64_t)v15, &qword_10081F090);
  }
  v63 = v18;
  v64 = v31;
  v66 = v20;
  v67 = v15;
  v35 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v72 = v26;
  v65 = v29;
  v35(v26, v23, v29);
  v61 = type metadata accessor for MetricDetailChartView(0);
  v36 = v70 + *(int *)(v61 + 24);
  v37 = *(_QWORD *)(v36 + 16);
  v38 = *(_QWORD *)(v37 + 16);
  v62 = v37;
  if (v38)
  {
    v39 = v37 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    v71 = *(_QWORD *)(v69 + 72);
    swift_bridgeObjectRetain(v37);
    v40 = v74;
    while (1)
    {
      sub_10004F8C8(v39, (uint64_t)v9, type metadata accessor for MetricChartData);
      v41 = *(_QWORD *)(v36 + 32);
      v42 = *(_BYTE *)(v36 + 40);
      sub_10041DD1C((uint64_t)v72, v41, v42, (uint64_t)v7);
      sub_10041DD1C((uint64_t)&v9[*(int *)(v75 + 20)], v41, v42, (uint64_t)v5);
      v43 = static DateComponents.== infix(_:_:)(v7, v5);
      v44 = *(void (**)(char *, uint64_t))(v73 + 8);
      v44(v5, v40);
      v44(v7, v40);
      if ((v43 & 1) != 0)
        break;
      sub_100011F54((uint64_t)v9, type metadata accessor for MetricChartData);
      v39 += v71;
      if (!--v38)
        goto LABEL_9;
    }
    v48 = (uint64_t)v66;
    sub_100047C88((uint64_t)v9, (uint64_t)v66, type metadata accessor for MetricChartData);
    v46 = v69;
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v69 + 56);
    v49 = v48;
    v50 = 0;
  }
  else
  {
    v45 = swift_bridgeObjectRetain(v37);
LABEL_9:
    v46 = v69;
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v69 + 56);
    v48 = (uint64_t)v66;
    v49 = (uint64_t)v66;
    v50 = 1;
  }
  v51 = v75;
  v47(v49, v50, 1, v75, v45);
  swift_bridgeObjectRelease(v62);
  v52 = v63;
  sub_100021CC0(v48, (uint64_t)v63, &qword_10081F090);
  v53 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48))(v52, 1, v51);
  v54 = (uint64_t)v67;
  v55 = v68;
  v56 = (uint64_t)v72;
  if (v53 == 1)
  {
    sub_10001BE90((uint64_t)v52, &qword_10081F090);
LABEL_15:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v47)(v54, 1, 1, v51);
    goto LABEL_16;
  }
  objc_msgSend(*(id *)((char *)v52 + *(int *)(v51 + 24)), "doubleValueForUnit:", *v52);
  v58 = v57;
  sub_100011F54((uint64_t)v52, type metadata accessor for MetricChartData);
  if ((v58 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_15;
  sub_100021CC0(v48, v54, &qword_10081F090);
LABEL_16:
  sub_100021CC0(v54, v55, &qword_10081F090);
  v59 = sub_100047110(&qword_10081F280);
  Binding.wrappedValue.setter(v55, v59);
  sub_10001BE90(v54, &qword_10081F090);
  sub_10001BE90(v48, &qword_10081F090);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v56, v65);
}

uint64_t sub_1001E9104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v2 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MetricDetailChartView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = type metadata accessor for AxisMarkValues(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10041D5A8(*(_QWORD *)(a1 + *(int *)(v8 + 24) + 32), *(_BYTE *)(a1 + *(int *)(v8 + 24) + 40));
  sub_10004F8C8(a1, (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricDetailChartView);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10078DA70, v15 + v10, v14 | 7);
  v17 = sub_100047C88((uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for MetricDetailChartView);
  v18 = static AxisMarkPreset.automatic.getter(v17);
  static AxisMarkPosition.automatic.getter(v18);
  v19 = sub_100047110(&qword_100826BA8);
  v20 = sub_1001EB8C8();
  return AxisMarks.init(preset:position:values:content:)(v7, v4, v13, sub_1001EB860, v16, v19, v20);
}

uint64_t sub_1001E92CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];
  _OWORD v67[2];
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;

  v56[1] = a1;
  v65 = a2;
  v2 = type metadata accessor for AxisTick.Length(0);
  __chkstk_darwin(v2);
  v4 = (char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for AxisTick(0);
  v62 = *(_QWORD *)(v64 - 8);
  v5 = __chkstk_darwin(v64);
  v63 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v59 = (char *)v56 - v7;
  v61 = type metadata accessor for AxisGridLine(0);
  v58 = *(_QWORD *)(v61 - 8);
  v8 = __chkstk_darwin(v61);
  v60 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v56 - v10;
  v12 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v12);
  v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v15);
  v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v18);
  v20 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100047110(&qword_100826BC0);
  v26 = __chkstk_darwin(v25);
  v57 = (uint64_t)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)v56 - v28;
  AxisValue.as<A>(_:)(v21, v21, &protocol witness table for Date);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10001BE90((uint64_t)v20, (uint64_t *)&unk_100828370);
    v30 = sub_100047110(&qword_100826BD0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  }
  else
  {
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    v56[0] = v56;
    v32 = __chkstk_darwin(v31);
    v33 = static AxisValueLabelCollisionResolution.automatic.getter(v32);
    static AxisValueLabelOrientation.automatic.getter(v33);
    v54 = sub_100047110(&qword_100826BD8);
    v55 = sub_1001EB9D0();
    v53 = &v51;
    LOBYTE(v52) = 1;
    v50 = 1;
    v49 = 2;
    ((void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, char *, char, char *, _QWORD, char, _QWORD, int, double (*)@<D0>(__n128 *@<X8>)))AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:))(2, 0, 0, 1, 0, 0, 1, v17, v49, v14, 0, v50, 0, v52, sub_1001EB9C4);
    v34 = sub_100047110(&qword_100826BD0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v29, 0, 1, v34);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v67, 0, 0, &off_1007809C0, 0.5, 10.0, 0.0);
  v73[0] = v67[0];
  v73[1] = v67[1];
  v74 = v68;
  AxisGridLine.init(centered:stroke:)(2, v73);
  v35 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v69, 0, 0, &off_1007809E8, 0.5, 10.0, 0.0);
  v71[0] = v69[0];
  v71[1] = v69[1];
  v72 = v70;
  static AxisTick.Length.automatic.getter(v35);
  v36 = v59;
  AxisTick.init(centered:length:stroke:)(2, v4, v71);
  v37 = (uint64_t)v29;
  v38 = (uint64_t)v29;
  v39 = v57;
  sub_100021CC0(v38, v57, &qword_100826BC0);
  v66[0] = v39;
  v40 = v58;
  v41 = (uint64_t)v60;
  v42 = v61;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v60, v11, v61);
  v66[1] = v41;
  v43 = v62;
  v44 = (uint64_t)v63;
  v45 = v64;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v63, v36, v64);
  v66[2] = v44;
  sub_1005AC248(v66, v65);
  v46 = *(void (**)(char *, uint64_t))(v43 + 8);
  v46(v36, v45);
  v47 = *(void (**)(char *, uint64_t))(v40 + 8);
  v47(v11, v42);
  sub_10001BE90(v37, &qword_100826BC0);
  v46((char *)v44, v45);
  v47((char *)v41, v42);
  return sub_10001BE90(v39, &qword_100826BC0);
}

__n128 sub_1001E9894@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  Class isa;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __n128 result;
  unsigned __int16 v48;
  unsigned __int8 v49;
  __n128 *v50;
  id v51;
  Class v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __n128 v65;
  char v66;
  char v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE v73[4];
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __int128 v79;
  __n128 v80;
  __int16 v81;
  char v82;
  __int128 v83;
  __n128 v84;
  __int16 v85;
  unsigned __int8 v86;

  v78 = a3;
  v5 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v5);
  v7 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Calendar.Component(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for MetricDetailChartView(0);
  v17 = a1 + *(int *)(v16 + 24);
  if (*(_BYTE *)(v17 + 40) != 1)
  {
    if (qword_10081D760 != -1)
      swift_once(&qword_10081D760, sub_1001EAAD0);
    v26 = (id)qword_100826908;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v28 = objc_msgSend(v26, "stringFromDate:", isa);

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    *(_QWORD *)&v83 = v29;
    *((_QWORD *)&v83 + 1) = v31;
    v32 = sub_100038CA0();
    v33 = Text.init<A>(_:)(&v83, &type metadata for String, v32);
    v19 = v33;
    v20 = v34;
    v22 = v35;
    *(_QWORD *)&v79 = v33;
    *((_QWORD *)&v79 + 1) = v34;
    v21 = v36 & 1;
    v80.n128_u64[0] = v36 & 1;
    v80.n128_u64[1] = v35;
    LOBYTE(v81) = 0;
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v17 + 32);
  if (v18)
  {
    if (v18 == 1)
    {
      sub_1001E9F78(a2, (uint64_t *)&v83);
      v20 = *((_QWORD *)&v83 + 1);
      v19 = v83;
      v21 = v84.n128_u8[0];
      v22 = v84.n128_u64[1];
      v79 = v83;
      v80.n128_u64[0] = v84.n128_u8[0];
      v80.n128_u64[1] = v84.n128_u64[1];
      v81 = 0;
      sub_1000E439C(v83, *((uint64_t *)&v83 + 1), v84.n128_i8[0]);
      swift_bridgeObjectRetain(v22);
      v23 = sub_100047110(&qword_100826C10);
      v24 = sub_1001EBAD8(&qword_100826C08, &qword_100826C10);
      _ConditionalContent<>.init(storage:)(&v79, &type metadata for Text, v23, &protocol witness table for Text, v24);
      if (HIBYTE(v85))
        v25 = 256;
      else
        v25 = 0;
      v79 = v83;
      v80 = v84;
      v81 = v25 | v85;
      v82 = 1;
      goto LABEL_15;
    }
    static Calendar.current.getter(v16);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Calendar.Component.day(_:), v8);
    v37 = Calendar.component(_:from:)(v11, a2);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
    *(_QWORD *)&v83 = v37;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v83, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
    v40 = LocalizedStringKey.init(stringInterpolation:)(v7);
    v33 = Text.init(_:tableName:bundle:comment:)(v40);
    v19 = v33;
    v20 = v34;
    v22 = v41;
    *(_QWORD *)&v79 = v33;
    *((_QWORD *)&v79 + 1) = v34;
    v21 = v42 & 1;
    v80.n128_u64[0] = v42 & 1;
    v80.n128_u64[1] = v41;
    LOBYTE(v81) = 1;
LABEL_14:
    sub_1000E439C(v33, v34, v21);
    swift_bridgeObjectRetain(v22);
    _ConditionalContent<>.init(storage:)(&v79, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v79 = v83;
    v80 = v84;
    v81 = v85;
    v82 = 0;
LABEL_15:
    v43 = sub_100047110(&qword_100826BF0);
    v44 = sub_100047110(&qword_100826C00);
    v45 = sub_1001EBAD8((unint64_t *)&qword_100826BE8, &qword_100826BF0);
    v46 = sub_1001EBA54();
    _ConditionalContent<>.init(storage:)(&v79, v43, v44, v45, v46);
    sub_1000E4458(v19, v20, v21);
    swift_bridgeObjectRelease(v22);
    goto LABEL_16;
  }
  if (AxisValue.index.getter(v16) == 4)
  {
    LOBYTE(v81) = 0;
    v79 = 0u;
    v80 = 0u;
  }
  else
  {
    if (qword_10081D768 != -1)
      swift_once(&qword_10081D768, sub_1001EAB3C);
    v51 = (id)qword_100826910;
    v52 = Date._bridgeToObjectiveC()().super.isa;
    v53 = objc_msgSend(v51, "stringFromDate:", v52);

    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    *(_QWORD *)&v83 = v54;
    *((_QWORD *)&v83 + 1) = v56;
    v57 = sub_100038CA0();
    *(_QWORD *)&v79 = Text.init<A>(_:)(&v83, &type metadata for String, v57);
    *((_QWORD *)&v79 + 1) = v59;
    v80.n128_u64[0] = v58 & 1;
    v80.n128_u64[1] = v60;
    LOBYTE(v81) = 1;
  }
  _ConditionalContent<>.init(storage:)(&v79, &type metadata for EmptyView, &type metadata for Text, &protocol witness table for EmptyView, &protocol witness table for Text);
  v61 = *((_QWORD *)&v83 + 1);
  v76 = v84.n128_u64[0];
  v77 = v83;
  v79 = v83;
  v80 = v84;
  LOBYTE(v81) = v85;
  HIBYTE(v81) = 1;
  v75 = v84.n128_i64[1];
  v74 = v85;
  sub_1001EBB34(v83, *((uint64_t *)&v83 + 1), v84.n128_i8[0], v84.n128_i64[1], v85);
  v62 = sub_100047110(&qword_100826C10);
  v63 = sub_1001EBAD8(&qword_100826C08, &qword_100826C10);
  _ConditionalContent<>.init(storage:)(&v79, &type metadata for Text, v62, &protocol witness table for Text, v63);
  v64 = v83;
  v65 = v84;
  v66 = HIBYTE(v85);
  v67 = v85;
  if (HIBYTE(v85))
    v68 = 256;
  else
    v68 = 0;
  v79 = v83;
  v80 = v84;
  v81 = v68 | v85;
  v82 = 1;
  sub_1001EBB64(v83, *((uint64_t *)&v83 + 1), v84.n128_i8[0], v84.n128_i64[1], v85, SHIBYTE(v85));
  v69 = sub_100047110(&qword_100826BF0);
  v70 = sub_100047110(&qword_100826C00);
  v71 = sub_1001EBAD8((unint64_t *)&qword_100826BE8, &qword_100826BF0);
  v72 = sub_1001EBA54();
  _ConditionalContent<>.init(storage:)(&v79, v69, v70, v71, v72);
  sub_1001EBBA4(v77, v61, v76, v75, v74);
  sub_1001EBBD4(v64, *((uint64_t *)&v64 + 1), v65.n128_i8[0], v65.n128_i64[1], v67, v66);
LABEL_16:
  result = v84;
  v48 = v85;
  v49 = v86;
  v50 = v78;
  *v78 = (__n128)v83;
  v50[1] = result;
  v50[2].n128_u16[0] = v48;
  v50[2].n128_u8[2] = v49;
  return result;
}

uint64_t sub_1001E9F78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD v53[2];
  _QWORD v54[2];

  v51 = a1;
  v52 = a2;
  v2 = type metadata accessor for Date.FormatStyle.Symbol.Weekday(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FormatStyleCapitalizationContext(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110(&qword_100825CB8);
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110(&qword_100825CC0);
  __chkstk_darwin(v20);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Date.FormatStyle(0);
  v48 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v47 - v27;
  v29 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v22, 1, 1, v29);
  v30 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v19, 1, 1, v30);
  v32 = static Locale.autoupdatingCurrent.getter(v31);
  v33 = static Calendar.autoupdatingCurrent.getter(v32);
  v34 = static TimeZone.autoupdatingCurrent.getter(v33);
  static FormatStyleCapitalizationContext.unknown.getter(v34);
  v35 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v22, v19, v16, v13, v10, v7);
  static Date.FormatStyle.Symbol.Weekday.abbreviated.getter(v35);
  Date.FormatStyle.weekday(_:)(v4);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v4, v50);
  v36 = sub_1000083D8(&qword_100825EA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  Date.formatted<A>(_:)(v54, v26, v23, v36);
  v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v26, v23);
  v53[0] = v54[0];
  v53[1] = v54[1];
  v38 = sub_100038CA0();
  v39 = Text.init<A>(_:)(v53, &type metadata for String, v38);
  v41 = v40;
  LOBYTE(v26) = v42;
  v44 = v43;
  result = ((uint64_t (*)(char *, uint64_t))v37)(v28, v23);
  v46 = v52;
  *v52 = v39;
  v46[1] = v41;
  *((_BYTE *)v46 + 16) = v26 & 1;
  v46[3] = v44;
  return result;
}

uint64_t sub_1001EA2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a2;
  v3 = type metadata accessor for MetricDetailChartView(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v3);
  v5 = sub_100047110(&qword_100826A80);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AxisMarkValues(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100825E20);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_QWORD *)(a1 + *(int *)(v3 + 40)) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v20 = sub_100047110(&qword_100821568);
    v21 = swift_allocObject(v20, 56, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100624A40;
    *(_QWORD *)(v21 + 32) = 0;
    v22 = *(double *)(a1 + *(int *)(v3 + 44));
    *(double *)(v21 + 40) = v22 * 0.5;
    *(double *)(v21 + 48) = v22;
    sub_10004F8C8(a1, (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricDetailChartView);
    v23 = *(unsigned __int8 *)(v42 + 80);
    v24 = (v23 + 16) & ~v23;
    v25 = swift_allocObject(&unk_10078DA48, v24 + v4, v23 | 7);
    v26 = sub_100047C88((uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for MetricDetailChartView);
    v27 = static AxisMarkPreset.automatic.getter(v26);
    static AxisMarkPosition.automatic.getter(v27);
    v28 = sub_100047110(&qword_100826B78);
    v29 = sub_1000F0610(&qword_100826B80, &qword_100826B78, (void (*)(void))sub_1001EB594, (uint64_t)&protocol conformance descriptor for <A> A?);
    v30 = v43;
    AxisMarks.init<A>(preset:position:values:content:)(v12, v9, v21, sub_1001EB588, v25, v28, &type metadata for Double, v29, &protocol witness table for Double);
    v32 = v44;
    v31 = v45;
    v33 = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v46, v30, v45);
    v34 = sub_100047110(&qword_100826B98);
    swift_storeEnumTagMultiPayload(v33, v34, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v30, v31);
  }
  else
  {
    v36 = static AxisMarkValues.automatic(desiredCount:roundLowerBound:roundUpperBound:)(3, 0, 2, 2);
    v37 = static AxisMarkPreset.automatic.getter(v36);
    static AxisMarkPosition.automatic.getter(v37);
    v38 = type metadata accessor for AxisGridLine(0);
    AxisMarks.init(preset:position:values:content:)(v12, v9, v15, sub_1001EA680, 0, v38, &protocol witness table for AxisGridLine);
    v39 = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v46, v19, v16);
    v40 = sub_100047110(&qword_100826B98);
    swift_storeEnumTagMultiPayload(v39, v40, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t sub_1001EA680()
{
  _OWORD v1[2];
  uint64_t v2;

  v2 = 0;
  memset(v1, 0, sizeof(v1));
  return AxisGridLine.init(centered:stroke:)(2, v1);
}

uint64_t sub_1001EA6B0@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;

  v53 = a2;
  v51 = sub_100047110(&qword_100826BA0);
  __chkstk_darwin(v51);
  v50 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100826B78);
  __chkstk_darwin(v4);
  v52 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisGridLine(0);
  v49 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - v9;
  v11 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110(&qword_100824D28);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v46 - v22;
  AxisValue.as<A>(_:)(&type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((BYTE8(v54[0]) & 1) != 0)
  {
    v24 = sub_100047110(&qword_100826B90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v53, 1, 1, v24);
  }
  else
  {
    type metadata accessor for MetricDetailChartView(0);
    sub_1004458A0(*a1);
    *(_QWORD *)&v54[0] = v26;
    *((_QWORD *)&v54[0] + 1) = v27;
    v28 = static AxisValueLabelCollisionResolution.automatic.getter(v26);
    static AxisValueLabelOrientation.automatic.getter(v28);
    v29 = sub_100038CA0();
    AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(v54, 2, 0, 0, 1, 0, 0, 1, v16, 2, v13, 0, 1, 0, 1, &type metadata for String, v29);
    memset(v54, 0, sizeof(v54));
    v55 = 0;
    v30 = AxisGridLine.init(centered:stroke:)(2, v54);
    v31 = v23;
    v47 = v23;
    v32 = v18;
    v33 = *(void (**)(char *, char *, uint64_t, __n128))(v18 + 16);
    v33(v21, v31, v17, v30);
    v34 = v21;
    v46 = v21;
    v35 = v10;
    v36 = v48;
    v37 = v49;
    v38 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v38(v48, v35, v6);
    sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    v39 = v50;
    ((void (*)(char *, char *, uint64_t))v33)(v50, v34, v17);
    v40 = v51;
    v41 = &v39[*(int *)(v51 + 48)];
    v38(v41, v36, v6);
    v42 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v52, v39, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v42 + *(int *)(v40 + 48), v41, v6);
    v43 = *(void (**)(char *, uint64_t))(v37 + 8);
    v43(v35, v6);
    v44 = *(void (**)(char *, uint64_t))(v32 + 8);
    v44(v47, v17);
    v43(v36, v6);
    v44(v46, v17);
    v45 = sub_100047110(&qword_100826B90);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v42, 0, 1, v45);
    return sub_100045AD4(v42, v53, &qword_100826B78);
  }
}

void sub_1001EAAD0()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setDateFormat:", v1);

  qword_100826908 = (uint64_t)v0;
}

id sub_1001EAB3C()
{
  id result;

  result = sub_1001EAB58();
  qword_100826910 = (uint64_t)result;
  return result;
}

id sub_1001EAB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = type metadata accessor for Locale.Language(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100825CB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v12 = static Locale.current.getter(v11);
  Locale.language.getter(v12);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Locale.Language.languageCode.getter(v13);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v14 = type metadata accessor for Locale.LanguageCode(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) == 1)
  {
    sub_10001BE90((uint64_t)v10, &qword_100825CB0);
  }
  else
  {
    v16 = Locale.LanguageCode.identifier.getter();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v14);
    v24 = v16;
    v25 = v18;
    v22 = 26746;
    v23 = 0xE200000000000000;
    v19 = sub_100038CA0();
    if ((StringProtocol.contains<A>(_:)(&v22, &type metadata for String, &type metadata for String, v19, v19) & 1) != 0)
    {
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v24 = v16;
      v25 = v18;
      v22 = 24938;
      v23 = 0xE200000000000000;
      StringProtocol.contains<A>(_:)(&v22, &type metadata for String, &type metadata for String, v19, v19);
      swift_bridgeObjectRelease(v18);
    }
  }
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setLocalizedDateFormatFromTemplate:", v20);

  return v11;
}

uint64_t sub_1001EADA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD v13[9];

  v3 = sub_100047110(&qword_1008269E0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001E54E8(v1, (uint64_t)v5);
  Hasher.init(_seed:)(v13, 0);
  sub_10038EE28((uint64_t)v13);
  v6 = Hasher._finalize()();
  v7 = Int.entityIdentifierString.getter(v6);
  v9 = v8;
  sub_100021CC0((uint64_t)v5, a1, &qword_1008269E0);
  v10 = (uint64_t *)(a1 + *(int *)(sub_100047110(&qword_1008269E8) + 52));
  *v10 = v7;
  v10[1] = v9;
  return sub_10001BE90((uint64_t)v5, &qword_1008269E0);
}

unint64_t sub_1001EAE8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826A60;
  if (!qword_100826A60)
  {
    v1 = sub_100007050((uint64_t *)&unk_100828370);
    sub_1000083D8((unint64_t *)&qword_100824D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100826A60);
  }
  return result;
}

unint64_t sub_1001EAF08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826A70;
  if (!qword_100826A70)
  {
    v1 = sub_100007050(&qword_100826A28);
    sub_100028384(&qword_100825E18, &qword_100825E20, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    sub_100028384(&qword_100826A78, &qword_100826A80, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826A70);
  }
  return result;
}

uint64_t sub_1001EAFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailChartView(0) - 8) + 80);
  return sub_1001E65E8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1001EAFEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001E6A4C(*(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

unint64_t sub_1001EAFF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826AA0;
  if (!qword_100826AA0)
  {
    v1 = sub_100007050(&qword_100826A98);
    sub_1000F0610(&qword_100826AA8, &qword_100826AB0, (void (*)(void))sub_1001EB08C, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    sub_1001EB278();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100826AA0);
  }
  return result;
}

uint64_t sub_1001EB08C()
{
  return sub_1000F0610(&qword_100826AB8, &qword_100826AC0, (void (*)(void))sub_1001EB0B0, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_1001EB0B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;

  result = qword_100826AC8;
  if (!qword_100826AC8)
  {
    v1 = sub_100007050(&qword_100826AD0);
    v2 = sub_100007050(&qword_100826AD8);
    v3 = sub_100007050(&qword_100826AE0);
    v6 = type metadata accessor for LineMark(255);
    v7 = sub_100007050(&qword_100826AE8);
    v8 = &protocol witness table for LineMark;
    v9 = sub_1001EB1F4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    v5 = sub_100028384(&qword_100826B08, &qword_100826AE0, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
    v6 = v2;
    v7 = v3;
    v8 = (void *)OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v6 = type metadata accessor for BarMark(255);
    v7 = v3;
    v8 = &protocol witness table for BarMark;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826AC8);
  }
  return result;
}

unint64_t sub_1001EB1F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826AF0;
  if (!qword_100826AF0)
  {
    v1 = sub_100007050(&qword_100826AE8);
    sub_100028384(&qword_100826AF8, &qword_100826B00, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826AF0);
  }
  return result;
}

unint64_t sub_1001EB278()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  result = qword_100826B10;
  if (!qword_100826B10)
  {
    v1 = sub_100007050(&qword_100826B18);
    v2 = sub_100007050(&qword_100826B20);
    v3 = sub_100007050(&qword_100826B28);
    v4 = sub_100007050(&qword_100826B30);
    v5 = sub_100007050(&qword_100826B38);
    v10 = type metadata accessor for RuleMark(255);
    v11 = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.zIndex(_:)>>, 1);
    v10 = v5;
    v11 = (void *)OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.offset(x:yStart:yEnd:)>>, 1);
    v10 = v4;
    v11 = &type metadata for Color;
    v12 = v7;
    v13 = &protocol witness table for Color;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v9 = sub_1001EB3B8();
    v10 = v2;
    v11 = (void *)v3;
    v12 = v8;
    v13 = (void *)v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100826B10);
  }
  return result;
}

unint64_t sub_1001EB3B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826B40;
  if (!qword_100826B40)
  {
    v1 = sub_100007050(&qword_100826B28);
    sub_1001EB43C();
    sub_100028384(&qword_1008237E0, &qword_1008237E8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826B40);
  }
  return result;
}

unint64_t sub_1001EB43C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826B48;
  if (!qword_100826B48)
  {
    v1 = sub_100007050(&qword_100826B50);
    sub_1001EB4C0();
    sub_100028384(&qword_100826B68, &qword_100826B70, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826B48);
  }
  return result;
}

unint64_t sub_1001EB4C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826B58;
  if (!qword_100826B58)
  {
    v1 = sub_100007050(&qword_10081F298);
    sub_1000083D8(&qword_100826B60, type metadata accessor for MetricDetailHeaderView, (uint64_t)&unk_100629528);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826B58);
  }
  return result;
}

uint64_t sub_1001EB548()
{
  type metadata accessor for MetricDetailChartView(0);
  return sub_1001E8B2C();
}

uint64_t sub_1001EB574()
{
  uint64_t v0;

  return sub_1001E9104(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001EB57C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001EA2D4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001EB588(uint64_t a1)
{
  return sub_1001EB86C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EA6B0);
}

unint64_t sub_1001EB594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826B88;
  if (!qword_100826B88)
  {
    v1 = sub_100007050(&qword_100826B90);
    sub_100028384(&qword_100824D30, &qword_100824D28, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100826B88);
  }
  return result;
}

uint64_t sub_1001EB624()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  id *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for MetricDetailChartView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v26 = *(_QWORD *)(v2 + 64);
  v27 = v0;
  v5 = v0 + v4;
  v6 = v0 + v4 + v1[6];

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
  v7 = type metadata accessor for MetricDetailViewModel(0);
  v8 = v6 + *(int *)(v7 + 36);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = v6 + *(int *)(v7 + 44);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);
  v15 = (id *)(v5 + v1[7]);

  v16 = type metadata accessor for MetricFormattingHelper(0);
  v17 = (char *)v15 + *(int *)(v16 + 20);
  v18 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);

  v19 = (_QWORD *)(v5 + v1[8]);
  swift_release(*v19);
  swift_release(v19[1]);
  v20 = (id *)((char *)v19 + *(int *)(sub_100047110(&qword_10081F280) + 32));
  v21 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {

    v14((uint64_t)v20 + *(int *)(v21 + 20), v12);
  }
  v22 = v5 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v22, 1, v12))
    v14(v22, v12);
  v23 = sub_100047110(&qword_100826918);
  swift_release(*(_QWORD *)(v22 + *(int *)(v23 + 28)));
  v24 = v5 + v1[12];
  swift_release(*(_QWORD *)(v24 + 8));
  swift_release(*(_QWORD *)(v24 + 24));
  return swift_deallocObject(v27, v4 + v26, v3 | 7);
}

uint64_t sub_1001EB860(uint64_t a1)
{
  return sub_1001EB86C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001E92CC);
}

uint64_t sub_1001EB86C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailChartView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1001EB8C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826BB0;
  if (!qword_100826BB0)
  {
    v1 = sub_100007050(&qword_100826BA8);
    sub_1001EB948();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100826BB0);
  }
  return result;
}

unint64_t sub_1001EB948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826BB8;
  if (!qword_100826BB8)
  {
    v1 = sub_100007050(&qword_100826BC0);
    sub_100028384(&qword_100826BC8, &qword_100826BD0, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100826BB8);
  }
  return result;
}

double sub_1001EB9C4@<D0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1001E9894(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

unint64_t sub_1001EB9D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826BE0;
  if (!qword_100826BE0)
  {
    v1 = sub_100007050(&qword_100826BD8);
    sub_1001EBAD8((unint64_t *)&qword_100826BE8, &qword_100826BF0);
    sub_1001EBA54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826BE0);
  }
  return result;
}

unint64_t sub_1001EBA54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826BF8;
  if (!qword_100826BF8)
  {
    v1 = sub_100007050(&qword_100826C00);
    sub_1001EBAD8(&qword_100826C08, &qword_100826C10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826BF8);
  }
  return result;
}

uint64_t sub_1001EBAD8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007050(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1001EBB34(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    sub_1000E439C(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

double sub_1001EBB64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  double result;

  if ((a6 & 1) != 0)
    return sub_1001EBB34(a1, a2, a3, a4, a5 & 1);
  sub_1000E439C(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

double sub_1001EBBA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    sub_1000E4458(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

double sub_1001EBBD4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  double result;

  if ((a6 & 1) != 0)
    return sub_1001EBBA4(a1, a2, a3, a4, a5 & 1);
  sub_1000E4458(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t sub_1001EBC14()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  id *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int *)type metadata accessor for MetricDetailChartView(0);
  v2 = *((_QWORD *)v1 - 1);
  v34 = *(unsigned __int8 *)(v2 + 80);
  v32 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for Calendar.Component(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v35 = v4;
  v36 = v3;
  v31 = *(_QWORD *)(v4 + 64);
  v33 = (v34 + 16) & ~v34;
  v6 = v0 + v33;
  v7 = v0 + v33 + v1[6];

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = type metadata accessor for MetricDetailViewModel(0);
  v9 = v7 + *(int *)(v8 + 36);
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = v7 + *(int *)(v8 + 44);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = (id *)(v6 + v1[7]);

  v17 = type metadata accessor for MetricFormattingHelper(0);
  v18 = (char *)v16 + *(int *)(v17 + 20);
  v19 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);

  v20 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v20);
  swift_release(v20[1]);
  v21 = (id *)((char *)v20 + *(int *)(sub_100047110(&qword_10081F280) + 32));
  v22 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
  {

    v15((uint64_t)v21 + *(int *)(v22 + 20), v13);
  }
  v23 = v6 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v23, 1, v13))
    v15(v23, v13);
  v24 = (v33 + v32 + v5) & ~v5;
  v25 = (v31 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = v34 | v5 | 7;
  v27 = sub_100047110(&qword_100826918);
  swift_release(*(_QWORD *)(v23 + *(int *)(v27 + 28)));
  v28 = v6 + v1[12];
  swift_release(*(_QWORD *)(v28 + 8));
  v29 = swift_release(*(_QWORD *)(v28 + 24));
  (*(void (**)(uint64_t, uint64_t, __n128))(v35 + 8))(v0 + v24, v36, v29);
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  return swift_deallocObject(v0, v25 + 16, v26);
}

uint64_t sub_1001EBEB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(type metadata accessor for MetricDetailChartView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for Calendar.Component(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001E76E0(a1, (unsigned __int8 *)(v2 + v6), v2 + v9, *(uint64_t (**)(_QWORD *))v10, *(_QWORD *)(v10 + 8), a2);
}

uint64_t sub_1001EBF44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001E8430(*(char **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001EBF58()
{
  return 8;
}

uint64_t sub_1001EBF64(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1001EBF6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_1001EBF80(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

double sub_1001EBF8C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001E82A0(*(char **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1001EBF98()
{
  return sub_100028384(&qword_100826C50, &qword_1008269E8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
}

uint64_t sub_1001EBFC4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, char *a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;
  char *v32;

  *(_QWORD *)a9 = swift_getKeyPath(&unk_10062C648);
  v18 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(a9, v18, 0);
  v19 = (int *)type metadata accessor for CardTypeConfigurationRoomView(0);
  v20 = v19[10];
  v21 = type metadata accessor for DashboardCardCellViewCache();
  v22 = swift_allocObject(v21, 40, 7);
  *(_BYTE *)(v22 + 16) = 1;
  *(_QWORD *)(v22 + 24) = sub_10043D6F8((uint64_t)_swiftEmptyArrayStorage);
  v23 = sub_10043D6F8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&a9[v20] = v22;
  *(_QWORD *)(v22 + 32) = v23;
  v24 = &a9[v19[15]];
  v25 = enum case for DynamicTypeSize.accessibility1(_:);
  v26 = type metadata accessor for DynamicTypeSize(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104);
  v27(v24, v25, v26);
  v27(&a9[v19[16]], enum case for DynamicTypeSize.xLarge(_:), v26);
  a9[v19[5]] = a1;
  result = sub_100045AD4(a2, (uint64_t)&a9[v19[6]], &qword_100832410);
  *(_QWORD *)&a9[v19[7]] = a3;
  *(_QWORD *)&a9[v19[8]] = a5;
  *(_QWORD *)&a9[v19[9]] = a6;
  v29 = &a9[v19[11]];
  *(_QWORD *)v29 = a7;
  v29[8] = a8 & 1;
  v30 = &a9[v19[12]];
  *(_QWORD *)v30 = a10;
  v30[8] = a11 & 1;
  v31 = &a9[v19[13]];
  *(_QWORD *)v31 = a12;
  *((_QWORD *)v31 + 1) = a13;
  v32 = &a9[v19[14]];
  *(_QWORD *)v32 = a4;
  *((_QWORD *)v32 + 1) = 0;
  return result;
}

uint64_t type metadata accessor for CardTypeConfigurationRoomView(uint64_t a1)
{
  uint64_t result;

  result = qword_100826CB0;
  if (!qword_100826CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardTypeConfigurationRoomView);
  return result;
}

double sub_1001EC1F4()
{
  double result;

  result = 0.0;
  xmmword_10086A130 = xmmword_10062C5F0;
  *(_OWORD *)&qword_10086A140 = xmmword_10062C5F0;
  return result;
}

double sub_1001EC20C()
{
  double result;

  result = 20.0;
  xmmword_10086A150 = xmmword_10062C600;
  *(_OWORD *)&qword_10086A160 = xmmword_10062C610;
  return result;
}

void sub_1001EC22C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  void (*v69)(char *);
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t KeyPath;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  char *v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  __n128 v122;
  int v123;
  void (*v124)(char *);
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  id v169;
  NSString v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  char *v193;
  void (*v194)(char *);
  char *v195;
  char v196;
  char *v197;
  char *v198;
  char *v199;
  void (*v200)(char *, char *, uint64_t);
  char *v201;
  char *v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t);
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  id v240;
  void *v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(char *, uint64_t);
  __n128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  void (*v329)(char *, char *, uint64_t);
  uint64_t v330;
  uint64_t v331;
  void (*v332)(char *, uint64_t);
  uint64_t v333;
  char *v334;
  uint64_t v335;
  void (*v336)(char *, char *, uint64_t);
  char *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  void (*v343)(char *);
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  char v361;
  uint64_t v362;
  char *v363;
  int v364;

  v275 = a2;
  v297 = type metadata accessor for ControlSize(0);
  v296 = *(_QWORD *)(v297 - 8);
  __chkstk_darwin(v297);
  v295 = (char *)&v269 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = type metadata accessor for BorderedProminentButtonStyle(0);
  v292 = *(_QWORD *)(v293 - 8);
  __chkstk_darwin(v293);
  v291 = (char *)&v269 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CardTypeConfigurationRoomView(0);
  v308 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v309 = v10;
  v310 = (uint64_t)&v269 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = sub_100047110(&qword_100826D30);
  v312 = *(_QWORD *)(v313 - 8);
  __chkstk_darwin(v313);
  v311 = (char *)&v269 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = sub_100047110(&qword_100826D38);
  __chkstk_darwin(v279);
  v337 = (char *)&v269 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = sub_100047110(&qword_100826D40);
  v282 = *(_QWORD *)(v283 - 8);
  __chkstk_darwin(v283);
  v281 = (char *)&v269 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_100047110(&qword_100826D48);
  __chkstk_darwin(v280);
  v284 = (char *)&v269 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = sub_100047110(&qword_100826D50);
  __chkstk_darwin(v286);
  v287 = (uint64_t)&v269 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = sub_100047110(&qword_100826D58);
  v289 = *(_QWORD *)(v290 - 8);
  __chkstk_darwin(v290);
  v288 = (char *)&v269 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = sub_100047110(&qword_100826D60);
  __chkstk_darwin(v285);
  v294 = (char *)&v269 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_100047110(&qword_100826D68);
  __chkstk_darwin(v269);
  v298 = (char *)&v269 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = sub_100047110(&qword_100826D70);
  v19 = __chkstk_darwin(v271);
  v274 = (uint64_t)&v269 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v270 = (uint64_t)&v269 - v22;
  __chkstk_darwin(v21);
  v273 = (uint64_t)&v269 - v23;
  v24 = type metadata accessor for PageTabViewStyle.IndexDisplayMode(0);
  __chkstk_darwin(v24);
  v302 = (char *)&v269 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v307 = type metadata accessor for PageTabViewStyle(0);
  v306 = *(_QWORD *)(v307 - 8);
  __chkstk_darwin(v307);
  v305 = (char *)&v269 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = sub_100047110(&qword_100826D78);
  v303 = *(_QWORD *)(v304 - 8);
  __chkstk_darwin(v304);
  v301 = (char *)&v269 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = sub_100047110(&qword_100826D80);
  v347 = *(_QWORD *)(v335 - 8);
  v28 = __chkstk_darwin(v335);
  v272 = (char *)&v269 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v300 = (char *)&v269 - v31;
  __chkstk_darwin(v30);
  v334 = (char *)&v269 - v32;
  v33 = sub_100047110(&qword_100826D88);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v269 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v299 = sub_100047110(&qword_100826D90);
  v37 = __chkstk_darwin(v299);
  v333 = (uint64_t)&v269 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v346 = (uint64_t)&v269 - v39;
  v329 = (void (*)(char *, char *, uint64_t))type metadata accessor for Font.Leading(0);
  v327 = *((_QWORD *)v329 - 1);
  __chkstk_darwin(v329);
  v328 = (char *)&v269 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = type metadata accessor for Font.TextStyle(0);
  v325 = *(_QWORD *)(v326 - 8);
  __chkstk_darwin(v326);
  v324 = (char *)&v269 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v354 = sub_100047110(&qword_100825FB8);
  v42 = __chkstk_darwin(v354);
  v349 = (char *)&v269 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v352 = (char *)&v269 - v44;
  v45 = type metadata accessor for DynamicTypeSize(0);
  v46 = *(_QWORD **)(v45 - 8);
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v269 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v51 = (char *)&v269 - v50;
  v353 = sub_100047110(&qword_100825FC0);
  v52 = __chkstk_darwin(v353);
  v350 = (char *)&v269 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v351 = (uint64_t)&v269 - v54;
  v317 = sub_100047110(&qword_100825FC8);
  v316 = *(_QWORD *)(v317 - 8);
  __chkstk_darwin(v317);
  v315 = (char *)&v269 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v314 = sub_100047110(&qword_100826D98);
  __chkstk_darwin(v314);
  v57 = (char *)&v269 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v318 = sub_100047110(&qword_100826DA0);
  __chkstk_darwin(v318);
  v323 = (uint64_t)&v269 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = sub_100047110(&qword_100826DA8);
  v59 = __chkstk_darwin(v321);
  v330 = (uint64_t)&v269 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __chkstk_darwin(v59);
  v322 = (uint64_t)&v269 - v62;
  __chkstk_darwin(v61);
  v348 = (uint64_t)&v269 - v63;
  v344 = v9;
  v64 = *(int *)(v9 + 20);
  v345 = a1;
  v319 = v64;
  v356 = sub_10011E43C(*(_BYTE *)(a1 + v64));
  v357 = v65;
  v320 = sub_100038CA0();
  v356 = Text.init<A>(_:)(&v356, &type metadata for String, v320);
  v357 = v66;
  LOBYTE(v358) = v67 & 1;
  v359 = v68;
  v69 = (void (*)(char *))v46[13];
  v342 = enum case for DynamicTypeSize.xSmall(_:);
  v69(v51);
  v341 = enum case for DynamicTypeSize.xxxLarge(_:);
  v343 = v69;
  v69(v49);
  v70 = v51;
  v71 = v49;
  v340 = sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v51, v49, v45, v340) & 1) == 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v276 = v36;
  v277 = v34;
  v278 = v33;
  v72 = v354;
  v73 = v352;
  v74 = &v352[*(int *)(v354 + 48)];
  v75 = (void (*)(char *, char *, uint64_t))v46[4];
  v338 = v70;
  v75(v352, v70, v45);
  v339 = v71;
  v75(v74, v71, v45);
  v76 = v349;
  v77 = &v349[*(int *)(v72 + 48)];
  v78 = (void (*)(char *, char *, uint64_t))v46[2];
  v78(v349, v73, v45);
  v336 = v78;
  v78(v77, v74, v45);
  v79 = (uint64_t)v350;
  v75(v350, v76, v45);
  v80 = (void (*)(char *, uint64_t))v46[1];
  v80(v77, v45);
  v81 = &v76[*(int *)(v72 + 48)];
  v75(v76, v73, v45);
  v75(v81, v74, v45);
  v82 = v353;
  v75((char *)(v79 + *(int *)(v353 + 36)), v81, v45);
  v332 = v80;
  v80(v76, v45);
  v83 = v351;
  sub_100045AD4(v79, v351, &qword_100825FC0);
  v84 = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  v85 = v315;
  v331 = v84;
  View.dynamicTypeSize<A>(_:)(v83, &type metadata for Text, v82, &protocol witness table for Text, v84);
  sub_10001BE90(v83, &qword_100825FC0);
  sub_1000E4458(v356, v357, v358);
  swift_bridgeObjectRelease(v359);
  KeyPath = swift_getKeyPath(&unk_10062C760);
  v87 = v316;
  v88 = v317;
  (*(void (**)(char *, char *, uint64_t))(v316 + 16))(v57, v85, v317);
  v89 = &v57[*(int *)(v314 + 36)];
  *(_QWORD *)v89 = KeyPath;
  v89[8] = 1;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v88);
  v90 = v325;
  v91 = v324;
  v92 = v326;
  v93.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v325 + 104))(v324, enum case for Font.TextStyle.title(_:), v326);
  static Font.Weight.bold.getter(v93);
  v94 = static Font.system(_:weight:)(v91);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
  LODWORD(v326) = enum case for Font.Leading.tight(_:);
  v95 = v327;
  v325 = *(_QWORD *)(v327 + 104);
  v96 = v328;
  v97 = v329;
  ((void (*)(char *))v325)(v328);
  v98 = Font.leading(_:)(v96, v94);
  v99 = swift_release(v94);
  v327 = *(_QWORD *)(v95 + 8);
  ((void (*)(char *, void (*)(char *, char *, uint64_t), __n128))v327)(v96, v97, v99);
  v100 = swift_getKeyPath(&unk_10062C790);
  v101 = v323;
  sub_100021CC0((uint64_t)v57, v323, &qword_100826D98);
  v102 = (uint64_t *)(v101 + *(int *)(v318 + 36));
  *v102 = v100;
  v102[1] = v98;
  v103 = sub_10001BE90((uint64_t)v57, &qword_100826D98);
  v104 = v345;
  v105 = v345 + *(int *)(v344 + 48);
  if (*(_BYTE *)(v105 + 8))
    v106 = 54.0;
  else
    v106 = *(double *)v105 * 0.09;
  v107 = static Edge.Set.all.getter(v103);
  v108 = v322;
  sub_100021CC0(v101, v322, &qword_100826DA0);
  v109 = v108 + *(int *)(v321 + 36);
  *(_BYTE *)v109 = v107;
  *(double *)(v109 + 8) = v106;
  *(_OWORD *)(v109 + 16) = xmmword_100625620;
  *(_QWORD *)(v109 + 32) = 0x404E000000000000;
  *(_BYTE *)(v109 + 40) = 0;
  sub_10001BE90(v101, &qword_100826DA0);
  sub_100045AD4(v108, v348, &qword_100826DA8);
  v356 = sub_10011E794(*(_BYTE *)(v104 + v319));
  v357 = v110;
  v111 = Text.init<A>(_:)(&v356, &type metadata for String, v320);
  v113 = v112;
  v115 = v114;
  v324 = v116;
  v117 = swift_getKeyPath(&unk_10062C760);
  v119 = static Font.body.getter(v118);
  ((void (*)(char *, _QWORD, _QWORD))v325)(v96, v326, v97);
  v36 = (char *)Font.leading(_:)(v96, v119);
  v120 = swift_release(v119);
  ((void (*)(char *, void (*)(char *, char *, uint64_t), __n128))v327)(v96, v97, v120);
  v121 = swift_getKeyPath(&unk_10062C790);
  v123 = static HierarchicalShapeStyle.secondary.getter(v122);
  v356 = v111;
  v357 = v113;
  LOBYTE(v358) = v115 & 1;
  v359 = v324;
  v360 = v117;
  v361 = 1;
  v362 = v121;
  v363 = v36;
  v124 = v343;
  v364 = v123;
  v125 = v338;
  ((void (*)(char *, _QWORD, uint64_t))v343)(v338, v342, v45);
  v126 = v339;
  ((void (*)(char *, _QWORD, uint64_t))v124)(v339, v341, v45);
  v127 = v125;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v125, v126, v45, v340) & 1) == 0)
    goto LABEL_21;
  v128 = v126;
  v129 = v127;
  v130 = v354;
  v131 = v352;
  v132 = &v352[*(int *)(v354 + 48)];
  v75(v352, v129, v45);
  v75(v132, v128, v45);
  v133 = v130;
  v134 = v349;
  v135 = &v349[*(int *)(v130 + 48)];
  v136 = v336;
  v336(v349, v131, v45);
  v136(v135, v132, v45);
  v137 = (uint64_t)v350;
  v75(v350, v134, v45);
  v138 = v332;
  v332(v135, v45);
  v139 = &v134[*(int *)(v133 + 48)];
  v75(v134, v131, v45);
  v75(v139, v132, v45);
  v140 = v353;
  v141 = v137 + *(int *)(v353 + 36);
  v329 = v75;
  v75((char *)v141, v139, v45);
  v138(v134, v45);
  v142 = v351;
  sub_100045AD4(v137, v351, &qword_100825FC0);
  v143 = sub_100047110(&qword_1008265D0);
  v144 = sub_1001DD92C();
  v145 = v276;
  View.dynamicTypeSize<A>(_:)(v142, v143, v140, v144, v331);
  sub_10001BE90(v142, &qword_100825FC0);
  v146 = v359;
  v147 = v360;
  v148 = v362;
  v149 = v363;
  sub_1000E4458(v356, v357, v358);
  swift_release(v148);
  swift_release(v147);
  swift_bridgeObjectRelease(v146);
  swift_release(v149);
  LOBYTE(v146) = static Edge.Set.all.getter(v150);
  v151 = v277;
  v152 = v333;
  v153 = v278;
  (*(void (**)(uint64_t, char *, uint64_t))(v277 + 16))(v333, v145, v278);
  v154 = v152 + *(int *)(v299 + 36);
  *(_BYTE *)v154 = (_BYTE)v146;
  *(_OWORD *)(v154 + 8) = xmmword_10062C610;
  *(_OWORD *)(v154 + 24) = xmmword_10062C610;
  *(_BYTE *)(v154 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v151 + 8))(v145, v153);
  sub_100045AD4(v152, v346, &qword_100826D90);
  v155 = v345;
  v355 = *(_OWORD *)(v345 + *(int *)(v344 + 56));
  sub_100047110(&qword_10081F1D8);
  v156 = State.projectedValue.getter(&v356);
  __chkstk_darwin(v156);
  *(&v269 - 2) = v155;
  v157 = sub_100047110(&qword_100826DB0);
  v158 = sub_1001F146C();
  v159 = v301;
  v160 = TabView.init(selection:content:)(&v356, sub_1001F1464, &v269 - 4, &type metadata for Int, v157, &protocol witness table for Int, v158);
  v161 = v302;
  static PageTabViewStyle.IndexDisplayMode.automatic.getter(v160);
  v162 = v305;
  PageTabViewStyle.init(indexDisplayMode:)(v161);
  v163 = sub_100028384(&qword_100826DE0, &qword_100826D78, (uint64_t)&protocol conformance descriptor for TabView<A, B>);
  v164 = v300;
  v165 = v304;
  v166 = v307;
  View.tabViewStyle<A>(_:)(v162, v304, v307, v163, &protocol witness table for PageTabViewStyle);
  (*(void (**)(char *, uint64_t))(v306 + 8))(v162, v166);
  (*(void (**)(char *, uint64_t))(v303 + 8))(v159, v165);
  (*(void (**)(char *, char *, uint64_t))(v347 + 32))(v334, v164, v335);
  v167 = sub_1001EF2EC();
  v168 = v354;
  if (v167)
  {
    v169 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v170 = String._bridgeToObjectiveC()();
    v171 = objc_msgSend(v169, "localizedStringForKey:value:table:", v170, 0, 0);

    v328 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
    v344 = v172;

    LOBYTE(v169) = static Edge.Set.all.getter(v173);
    v2 = EdgeInsets.init(_all:)(10.0);
    v3 = v174;
    v4 = v175;
    v5 = v176;
    v327 = v169;
    v326 = 1;
  }
  else
  {
    v326 = 0;
    v328 = 0;
    v344 = 0;
    v327 = 0;
    v2 = 0.0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  v177 = v310;
  sub_10004F8C8(v155, v310, type metadata accessor for CardTypeConfigurationRoomView);
  v178 = *(unsigned __int8 *)(v308 + 80);
  v179 = (v178 + 16) & ~v178;
  v180 = swift_allocObject(&unk_10078DB40, v179 + v309, v178 | 7);
  v181 = sub_100047C88(v177, v180 + v179, type metadata accessor for CardTypeConfigurationRoomView);
  __chkstk_darwin(v181);
  *(&v269 - 2) = v155;
  v182 = sub_100047110(&qword_100826DE8);
  v183 = sub_100028384(&qword_100826DF0, &qword_100826DE8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v184 = v311;
  v185 = Button.init(action:label:)(sub_1001F1558, v180, sub_1001F1584, &v269 - 4, v182, v183);
  v186 = static FitnessAccessibilityIdentifier.CardTypeConfigurationRoomView.addOrSwapButton.getter(v185);
  v188 = v187;
  v189 = sub_100028384(&qword_100826DF8, &qword_100826D30, (uint64_t)&protocol conformance descriptor for Button<A>);
  v190 = v186;
  v191 = v313;
  View.accessibilityIdentifier(_:)(v190, v188, v313, v189);
  v192 = swift_bridgeObjectRelease(v188);
  (*(void (**)(char *, uint64_t, __n128))(v312 + 8))(v184, v191, v192);
  v193 = v338;
  v194 = v343;
  ((void (*)(char *, _QWORD, uint64_t))v343)(v338, v342, v45);
  v195 = v339;
  ((void (*)(char *, _QWORD, uint64_t))v194)(v339, v341, v45);
  v196 = dispatch thunk of static Comparable.<= infix(_:_:)(v193, v195, v45, v340);
  v36 = (char *)v336;
  if ((v196 & 1) == 0)
    goto LABEL_22;
  v197 = v352;
  v198 = &v352[*(int *)(v168 + 48)];
  v199 = v193;
  v200 = v329;
  v329(v352, v199, v45);
  v200(v198, v195, v45);
  v201 = v349;
  v202 = &v349[*(int *)(v168 + 48)];
  ((void (*)(char *, char *, uint64_t))v36)(v349, v197, v45);
  ((void (*)(char *, char *, uint64_t))v36)(v202, v198, v45);
  v203 = (uint64_t)v350;
  v200(v350, v201, v45);
  v204 = v332;
  v332(v202, v45);
  v205 = &v201[*(int *)(v168 + 48)];
  v200(v201, v197, v45);
  v200(v205, v198, v45);
  v206 = v353;
  v200((char *)(v203 + *(int *)(v353 + 36)), v205, v45);
  v204(v201, v45);
  v207 = v351;
  sub_100045AD4(v203, v351, &qword_100825FC0);
  v208 = sub_1001F158C();
  v209 = v281;
  v210 = (uint64_t)v337;
  View.dynamicTypeSize<A>(_:)(v207, v279, v206, v208, v331);
  sub_10001BE90(v207, &qword_100825FC0);
  sub_10001BE90(v210, &qword_100826D38);
  if (sub_1001EF4B8())
  {
    v211 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v212 = Color.init(_:)(v211);
  }
  else
  {
    v213 = sub_100032490();
    v212 = Color.init(uiColor:)(v213);
  }
  v214 = v212;
  v215 = (uint64_t)v294;
  v216 = v282;
  v217 = (uint64_t)v284;
  v218 = v283;
  (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v284, v209, v283);
  *(_QWORD *)(v217 + *(int *)(v280 + 36)) = v214;
  (*(void (**)(char *, uint64_t))(v216 + 8))(v209, v218);
  LOBYTE(v214) = sub_1001EF4B8();
  v219 = swift_getKeyPath(&unk_10062C7C0);
  v220 = swift_allocObject(&unk_10078DB68, 17, 7);
  *(_BYTE *)(v220 + 16) = v214 & 1;
  v221 = v287;
  sub_100021CC0(v217, v287, &qword_100826D48);
  v222 = v286;
  v223 = (uint64_t *)(v221 + *(int *)(v286 + 36));
  *v223 = v219;
  v223[1] = (uint64_t)sub_1000F7088;
  v223[2] = v220;
  v224 = sub_10001BE90(v217, &qword_100826D48);
  v225 = v291;
  BorderedProminentButtonStyle.init()(v224);
  v226 = sub_1001F1640();
  v227 = sub_1000083D8((unint64_t *)&qword_10081F2E8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v228 = v288;
  v229 = v293;
  View.buttonStyle<A>(_:)(v225, v222, v293, v226, v227);
  (*(void (**)(char *, uint64_t))(v292 + 8))(v225, v229);
  sub_10001BE90(v221, &qword_100826D50);
  v230 = v296;
  v231 = v295;
  v232 = v297;
  (*(void (**)(char *, _QWORD, uint64_t))(v296 + 104))(v295, enum case for ControlSize.large(_:), v297);
  v233 = swift_getKeyPath(&unk_10062C7F0);
  v234 = (uint64_t *)(v215 + *(int *)(v285 + 36));
  v235 = sub_100047110(&qword_10081F2F0);
  (*(void (**)(char *, char *, uint64_t))(v230 + 16))((char *)v234 + *(int *)(v235 + 28), v231, v232);
  *v234 = v233;
  v236 = v289;
  v237 = v290;
  (*(void (**)(uint64_t, char *, uint64_t))(v289 + 16))(v215, v228, v290);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v231, v232);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v228, v237);
  if (sub_1001EF4B8())
  {
    v238 = sub_100032490();
    v239 = Color.init(uiColor:)(v238);
    v36 = v298;
    v45 = v348;
    goto LABEL_18;
  }
  v240 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  v36 = v298;
  v45 = v348;
  if (v240)
  {
    v241 = v240;
    v242 = objc_msgSend(v240, "nonGradientTextColor");

    if (v242)
    {
      v239 = Color.init(uiColor:)(v242);
LABEL_18:
      v243 = swift_getKeyPath(&unk_10062C820);
      *(_QWORD *)&v355 = v239;
      swift_retain(v239);
      v244 = AnyShapeStyle.init<A>(_:)(&v355, &type metadata for Color, &protocol witness table for Color);
      sub_100021CC0(v215, (uint64_t)v36, &qword_100826D60);
      swift_release(v239);
      v245 = (uint64_t *)&v36[*(int *)(v269 + 36)];
      *v245 = v243;
      v245[1] = v244;
      v246 = sub_10001BE90(v215, &qword_100826D60);
      if (qword_10081D770 == -1)
      {
LABEL_19:
        v354 = xmmword_10086A130;
        v247 = qword_10086A140;
        v248 = unk_10086A148;
        v249 = static Edge.Set.all.getter(v246);
        v250 = v270;
        sub_100021CC0((uint64_t)v36, v270, &qword_100826D68);
        v251 = v250 + *(int *)(v271 + 36);
        *(_BYTE *)v251 = v249;
        *(_OWORD *)(v251 + 8) = v354;
        *(_QWORD *)(v251 + 24) = v247;
        *(_QWORD *)(v251 + 32) = v248;
        *(_BYTE *)(v251 + 40) = 0;
        sub_10001BE90((uint64_t)v36, &qword_100826D68);
        v252 = v273;
        sub_100045AD4(v250, v273, &qword_100826D70);
        v253 = v330;
        sub_100021CC0(v45, v330, &qword_100826DA8);
        v254 = v333;
        sub_100021CC0(v346, v333, &qword_100826D90);
        v255 = *(void (**)(char *, char *, uint64_t))(v347 + 16);
        v256 = v272;
        v257 = v334;
        v258 = v335;
        v255(v272, v334, v335);
        v259 = v274;
        sub_100021CC0(v252, v274, &qword_100826D70);
        v260 = v275;
        sub_100021CC0(v253, v275, &qword_100826DA8);
        v261 = (int *)sub_100047110(&qword_100826E18);
        sub_100021CC0(v254, v260 + v261[12], &qword_100826D90);
        v262 = v260 + v261[16];
        *(_QWORD *)v262 = 0;
        *(_BYTE *)(v262 + 8) = 0;
        v255((char *)(v260 + v261[20]), v256, v258);
        v263 = v260 + v261[24];
        *(_QWORD *)v263 = 0;
        *(_BYTE *)(v263 + 8) = 0;
        v264 = v260 + v261[28];
        v265 = v326;
        *(_QWORD *)v264 = 0;
        *(_QWORD *)(v264 + 8) = v265;
        v266 = v344;
        *(_QWORD *)(v264 + 16) = v328;
        *(_QWORD *)(v264 + 24) = v266;
        *(_QWORD *)(v264 + 32) = v327;
        *(double *)(v264 + 40) = v2;
        *(_QWORD *)(v264 + 48) = v3;
        *(_QWORD *)(v264 + 56) = v4;
        *(_QWORD *)(v264 + 64) = v5;
        *(_BYTE *)(v264 + 72) = 0;
        sub_100021CC0(v259, v260 + v261[32], &qword_100826D70);
        swift_bridgeObjectRetain(v266);
        sub_10001BE90(v252, &qword_100826D70);
        v267 = *(void (**)(char *, uint64_t))(v347 + 8);
        v267(v257, v258);
        sub_10001BE90(v346, &qword_100826D90);
        sub_10001BE90(v348, &qword_100826DA8);
        sub_10001BE90(v259, &qword_100826D70);
        v268 = swift_bridgeObjectRelease(v266);
        ((void (*)(char *, uint64_t, __n128))v267)(v256, v258, v268);
        sub_10001BE90(v254, &qword_100826D90);
        sub_10001BE90(v330, &qword_100826DA8);
        return;
      }
LABEL_23:
      v246 = swift_once(&qword_10081D770, sub_1001EC1F4);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001EDF68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for CardTypeConfigurationRoomView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a1 + *(int *)(__chkstk_darwin(v2) + 28));
  swift_bridgeObjectRetain(v5);
  sub_100363724(v6);
  v8 = v7;
  swift_bridgeObjectRelease(v5);
  v20 = v8;
  KeyPath = swift_getKeyPath(&unk_10062C8F8);
  sub_10004F8C8(a1, (uint64_t)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CardTypeConfigurationRoomView);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_10078DB90, v11 + v4, v10 | 7);
  sub_100047C88((uint64_t)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for CardTypeConfigurationRoomView);
  v13 = swift_allocObject(&unk_10078DBB8, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1001F1BB4;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = sub_100047110(&qword_100826EA0);
  v15 = sub_100047110(&qword_100826DC8);
  v16 = sub_100028384(&qword_100826EA8, &qword_100826EA0, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = sub_1001F14D0();
  return ForEach<>.init(_:id:content:)(&v20, KeyPath, sub_1001DDBF8, v13, v14, v15, v16, &protocol witness table for Int, v17);
}

uint64_t sub_1001EE0FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = sub_100047110(&qword_100826DD8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v9, v12, v13, v14, v15);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v16 = sub_100047110(&qword_100826EB0);
  v17 = sub_1001EE1F4(a2, a3, a1, (uint64_t)&v11[*(int *)(v16 + 44)]);
  LOBYTE(a3) = static Edge.Set.all.getter(v17);
  sub_100021CC0((uint64_t)v11, a4, &qword_100826DD8);
  v18 = a4 + *(int *)(sub_100047110(&qword_100826DC8) + 36);
  *(_BYTE *)v18 = a3;
  *(_OWORD *)(v18 + 8) = xmmword_10062C620;
  *(_OWORD *)(v18 + 24) = xmmword_10062C620;
  *(_BYTE *)(v18 + 40) = 0;
  return sub_10001BE90((uint64_t)v11, &qword_100826DD8);
}

uint64_t sub_1001EE1F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  double v101;
  uint64_t v102;
  void (*v103)(uint64_t, _QWORD, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t result;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(char *, uint64_t, uint64_t);
  char *v114;
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  char v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  double v177;
  _OWORD v178[2];
  uint64_t v179;

  v161 = (char *)a3;
  v168 = a2;
  v151 = a1;
  v150 = a4;
  v141 = sub_100047110(&qword_100825FB8);
  v5 = __chkstk_darwin(v141);
  v143 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v139 = (char *)&v138 - v7;
  v146 = sub_100047110(&qword_100825FC0);
  v8 = __chkstk_darwin(v146);
  v140 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v144 = (uint64_t)&v138 - v10;
  *(_QWORD *)&v164 = type metadata accessor for Font.Leading(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100047110(&qword_100826EB8);
  v147 = *(_QWORD *)(v149 - 8);
  v12 = __chkstk_darwin(v149);
  v148 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v142 = (char *)&v138 - v15;
  __chkstk_darwin(v14);
  v145 = (char *)&v138 - v16;
  v160 = sub_100047110(&qword_100826EC0);
  __chkstk_darwin(v160);
  v159 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DynamicTypeSize(0);
  v167 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v166 = (char *)&v138 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v138 - v21;
  v165 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v165);
  v24 = (_OWORD *)((char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = (int *)type metadata accessor for DashboardCardView(0);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v138 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v152 = sub_100047110(&qword_100821218);
  __chkstk_darwin(v152);
  v29 = (char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100047110(&qword_100821220);
  __chkstk_darwin(v153);
  v31 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100047110(&qword_100826EC8);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v33 = (char *)&v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100047110(&qword_100826ED0);
  __chkstk_darwin(v156);
  v154 = (uint64_t)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100047110(&qword_100826ED8);
  v35 = __chkstk_darwin(v158);
  v138 = (uint64_t)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v38 = (char *)&v138 - v37;
  sub_1000252E0((uint64_t)a1, (uint64_t)&v169);
  v39 = type metadata accessor for CardTypeConfigurationRoomView(0);
  memset(v178, 0, sizeof(v178));
  v179 = 0;
  v40 = *(_QWORD *)(v168 + *(int *)(v39 + 40));
  *v27 = swift_getKeyPath(&unk_10062C648);
  v41 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(v27, v41, 0);
  sub_10002411C(&v169, (uint64_t)v27 + v25[5]);
  sub_100045AD4((uint64_t)v178, (uint64_t)v27 + v25[6], &qword_10081F600);
  *(_QWORD *)((char *)v27 + v25[7]) = v40;
  *((_BYTE *)v27 + v25[8]) = 1;
  *((_BYTE *)v27 + v25[9]) = 0;
  sub_10004F8C8((uint64_t)v27, (uint64_t)v29, type metadata accessor for DashboardCardView);
  v29[*(int *)(v152 + 36)] = 0;
  swift_retain(v40);
  sub_100011F54((uint64_t)v27, type metadata accessor for DashboardCardView);
  v42 = (char *)v24 + *(int *)(v165 + 20);
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  __asm { FMOV            V0.2D, #20.0 }
  *v24 = _Q0;
  v50 = v153;
  v51 = (uint64_t)&v31[*(int *)(v153 + 36)];
  sub_10004F8C8((uint64_t)v24, v51, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v51 + *(int *)(sub_100047110(&qword_100821238) + 36)) = 256;
  sub_100021CC0((uint64_t)v29, (uint64_t)v31, &qword_100821218);
  sub_100011F54((uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10001BE90((uint64_t)v29, &qword_100821218);
  v52 = v151;
  v53 = v151[3];
  v54 = v151[4];
  sub_100016804(v151, v53);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54);
  sub_1001EEE78(v55 & 1, v22);
  v56 = sub_1001F1C2C();
  View.dynamicTypeSize(_:)(v22, v50, v56);
  v57 = *(void (**)(char *, uint64_t))(v167 + 8);
  v165 = (uint64_t)v22;
  v153 = (uint64_t)v57;
  v57(v22, v18);
  sub_10001BE90((uint64_t)v31, &qword_100821220);
  v58 = v155;
  v59 = (uint64_t)v159;
  v60 = v157;
  (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v159, v33, v157);
  v61 = v59 + *(int *)(v160 + 36);
  v62 = (uint64_t)v161;
  *(_QWORD *)v61 = v161;
  *(_BYTE *)(v61 + 8) = 0;
  v63 = v154;
  sub_100021CC0(v59, v154, &qword_100826EC0);
  v64 = v63 + *(int *)(v156 + 36);
  *(_QWORD *)v64 = v62;
  *(_WORD *)(v64 + 8) = 0;
  sub_10001BE90(v59, &qword_100826EC0);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v60);
  v65 = v52[3];
  v66 = v52[4];
  sub_100016804(v52, v65);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
  v161 = v38;
  sub_100045AD4(v63, (uint64_t)v38, &qword_100826ED0);
  v67 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x800000010068F450);
  v68 = Text.init(_:tableName:bundle:comment:)(v67);
  v70 = v69;
  v72 = v71;
  v74 = v73 & 1;
  v75 = static Font.footnote.getter();
  v76 = v163;
  v77 = v162;
  v78 = v164;
  (*(void (**)(char *, _QWORD, _QWORD))(v163 + 104))(v162, enum case for Font.Leading.tight(_:), v164);
  v79 = Font.leading(_:)(v77, v75);
  v80 = swift_release(v75);
  v81.n128_f64[0] = (*(double (**)(char *, uint64_t, __n128))(v76 + 8))(v77, v78, v80);
  v82 = Text.font(_:)(v79, v68, v70, v74, v72, v81);
  v84 = v83;
  LOBYTE(v75) = v85;
  v87 = v86;
  swift_release(v79);
  LOBYTE(v79) = v75 & 1;
  sub_1000E4458(v68, v70, v74);
  v88 = swift_bridgeObjectRelease(v72);
  LODWORD(v169) = static HierarchicalShapeStyle.secondary.getter(v88);
  v89 = Text.foregroundStyle<A>(_:)(&v169, v82, v84, v75 & 1, v87, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v91 = v90;
  v93 = v92;
  v95 = v94;
  sub_1000E4458(v82, v84, v79);
  swift_bridgeObjectRelease(v87);
  if (qword_10081D778 != -1)
    v96 = swift_once(&qword_10081D778, sub_1001EC20C);
  v164 = xmmword_10086A150;
  v97 = qword_10086A160;
  v98 = unk_10086A168;
  v99 = static Edge.Set.all.getter(v96);
  v100 = sub_1001EEFB0();
  v101 = 0.0;
  if ((v100 & 1) != 0)
    v101 = 1.0;
  *(_QWORD *)&v169 = v89;
  *((_QWORD *)&v169 + 1) = v91;
  v170 = v93 & 1;
  v171 = v95;
  v172 = v99;
  v173 = v164;
  v174 = v97;
  v175 = v98;
  v176 = 0;
  v177 = v101;
  v102 = v167;
  v103 = *(void (**)(uint64_t, _QWORD, uint64_t))(v167 + 104);
  v104 = v165;
  v103(v165, enum case for DynamicTypeSize.xSmall(_:), v18);
  v105 = v166;
  v103((uint64_t)v166, enum case for DynamicTypeSize.xxxLarge(_:), v18);
  v106 = sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v104, v105, v18, v106);
  if ((result & 1) != 0)
  {
    v108 = v105;
    v109 = v104;
    v110 = v141;
    v111 = v139;
    v112 = &v139[*(int *)(v141 + 48)];
    v113 = *(void (**)(char *, uint64_t, uint64_t))(v102 + 32);
    v113(v139, v109, v18);
    v113(v112, (uint64_t)v108, v18);
    v114 = v143;
    v115 = &v143[*(int *)(v110 + 48)];
    v116 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
    v116(v143, v111, v18);
    v116(v115, v112, v18);
    v117 = (uint64_t)v140;
    v113(v140, (uint64_t)v114, v18);
    v118 = (void (*)(char *, uint64_t))v153;
    ((void (*)(char *, uint64_t))v153)(v115, v18);
    v119 = &v114[*(int *)(v110 + 48)];
    v113(v114, (uint64_t)v111, v18);
    v113(v119, (uint64_t)v112, v18);
    v120 = v146;
    v113((char *)(v117 + *(int *)(v146 + 36)), (uint64_t)v119, v18);
    v118(v114, v18);
    v121 = v144;
    sub_100045AD4(v117, v144, &qword_100825FC0);
    v122 = sub_100047110(&qword_100826F00);
    v123 = sub_1001F1D78();
    v124 = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v125 = v142;
    View.dynamicTypeSize<A>(_:)(v121, v122, v120, v123, v124);
    sub_10001BE90(v121, &qword_100825FC0);
    v126 = v171;
    sub_1000E4458(v169, *((uint64_t *)&v169 + 1), v170);
    v127 = swift_bridgeObjectRelease(v126);
    v128 = v147;
    v129 = v145;
    v130 = v149;
    (*(void (**)(char *, char *, uint64_t, __n128))(v147 + 32))(v145, v125, v149, v127);
    v131 = (uint64_t)v161;
    v132 = v138;
    sub_100021CC0((uint64_t)v161, v138, &qword_100826ED8);
    v133 = *(void (**)(char *, char *, uint64_t))(v128 + 16);
    v134 = v148;
    v133(v148, v129, v130);
    v135 = v150;
    sub_100021CC0(v132, v150, &qword_100826ED8);
    v136 = sub_100047110(&qword_100826F10);
    v133((char *)(v135 + *(int *)(v136 + 48)), v134, v130);
    v137 = *(void (**)(char *, uint64_t))(v128 + 8);
    v137(v129, v130);
    sub_10001BE90(v131, &qword_100826ED8);
    v137(v134, v130);
    return sub_10001BE90(v132, &qword_100826ED8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EEE78@<X0>(char a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  sub_1003F6E18((uint64_t)&v18 - v10);
  v12 = type metadata accessor for CardTypeConfigurationRoomView(0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14 = 64;
  if ((a1 & 1) == 0)
    v14 = 60;
  v13(v9, v2 + *(int *)(v12 + v14), v5);
  sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v9, v11, v5) & 1) != 0)
    v15 = v9;
  else
    v15 = v11;
  v13(a2, (uint64_t)v15, v5);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
}

uint64_t sub_1001EEFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  sub_1001EF800((uint64_t)&v19);
  if (v20)
  {
    sub_10002411C(&v19, (uint64_t)v22);
    v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CardTypeConfigurationRoomView(0) + 36));
    KeyPath = swift_getKeyPath(&unk_10062C850);
    v3 = swift_getKeyPath(&unk_10062C878);
    static Published.subscript.getter(&v19, v1, KeyPath, v3);
    swift_release(KeyPath);
    swift_release(v3);
    v4 = *(_QWORD *)(v19 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain(v19);
      v18 = v5;
      v6 = (unsigned __int8 *)(v5 + 49);
      do
      {
        v7 = *(_QWORD *)(v6 - 17);
        v8 = *(_QWORD *)(v6 - 9);
        v9 = *(v6 - 1);
        v10 = *v6;
        v11 = v23;
        v12 = v24;
        sub_100016804(v22, v23);
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
        sub_1000EB3F4(v7, v8, v9);
        v14 = (v13(v11, v12) & 1) == 0;
        sub_1000252E0((uint64_t)v22, (uint64_t)&v19);
        if (v10 != v14)
        {
          v15 = v20;
          v16 = v21;
          sub_100016804(&v19, v20);
          (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
          __asm { BR              X8 }
        }
        _s10FitnessApp24HistoryViewActionContextVwxx_0(&v19);
        sub_1000EB41C(v7, v8, v9);
        v6 += 24;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease_n(v18, 2);
    }
    else
    {
      swift_bridgeObjectRelease(v19);
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v22);
  }
  else
  {
    sub_10001BE90((uint64_t)&v19, &qword_100832410);
  }
  return 0;
}

BOOL sub_1001EF2EC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  _BYTE v16[24];
  uint64_t v17;

  v0 = sub_100047110(&qword_100820058);
  __chkstk_darwin(v0);
  v2 = &v16[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for FriendsHighlightCard(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v16[-v8 - 8];
  sub_1001EF800((uint64_t)v16);
  if (!v17)
  {
    sub_10001BE90((uint64_t)v16, &qword_100832410);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_7;
  }
  v10 = sub_100047110(&qword_1008200C0);
  v11 = swift_dynamicCast(v2, v16, v10, v3, 6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, v11 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_7:
    sub_10001BE90((uint64_t)v2, &qword_100820058);
    return 0;
  }
  sub_100047C88((uint64_t)v2, (uint64_t)v9, type metadata accessor for FriendsHighlightCard);
  v12 = v9[*(int *)(v3 + 44)];
  sub_100047C88((uint64_t)v9, (uint64_t)v7, type metadata accessor for FriendsHighlightCard);
  if ((v12 & 1) != 0)
  {
    v13 = v7[*(int *)(v3 + 48)];
    sub_100011F54((uint64_t)v7, type metadata accessor for FriendsHighlightCard);
    return (v13 & 1) == 0;
  }
  sub_100011F54((uint64_t)v7, type metadata accessor for FriendsHighlightCard);
  return 1;
}

BOOL sub_1001EF4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  sub_1001EF800((uint64_t)&v19);
  if (v20)
  {
    sub_10002411C(&v19, (uint64_t)v22);
    v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CardTypeConfigurationRoomView(0) + 36));
    KeyPath = swift_getKeyPath(&unk_10062C850);
    v3 = swift_getKeyPath(&unk_10062C878);
    static Published.subscript.getter(&v19, v1, KeyPath, v3);
    swift_release(KeyPath);
    swift_release(v3);
    v4 = *(_QWORD *)(v19 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain(v19);
      v18 = v5;
      v6 = (unsigned __int8 *)(v5 + 49);
      do
      {
        v7 = *(_QWORD *)(v6 - 17);
        v8 = *(_QWORD *)(v6 - 9);
        v9 = *(v6 - 1);
        v10 = *v6;
        v11 = v23;
        v12 = v24;
        sub_100016804(v22, v23);
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
        sub_1000EB3F4(v7, v8, v9);
        v14 = (v13(v11, v12) & 1) == 0;
        sub_1000252E0((uint64_t)v22, (uint64_t)&v19);
        if (v10 != v14)
        {
          v15 = v20;
          v16 = v21;
          sub_100016804(&v19, v20);
          (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
          __asm { BR              X8 }
        }
        _s10FitnessApp24HistoryViewActionContextVwxx_0(&v19);
        sub_1000EB41C(v7, v8, v9);
        v6 += 24;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease_n(v18, 2);
    }
    else
    {
      swift_bridgeObjectRelease(v19);
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v22);
  }
  else
  {
    sub_10001BE90((uint64_t)&v19, &qword_100832410);
  }
  return sub_1001EF2EC();
}

_QWORD *sub_1001EF800@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;

  v3 = type metadata accessor for CardTypeConfigurationRoomView(0);
  v4 = sub_100047110(&qword_10081F1D8);
  result = State.wrappedValue.getter(&v7, v4);
  v6 = *(_QWORD *)(v1 + *(int *)(v3 + 28));
  if ((int64_t)v7 >= *(_QWORD *)(v6 + 16))
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    result = State.wrappedValue.getter(&v7, v4);
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(_QWORD *)(v6 + 16))
    {
      return (_QWORD *)sub_1000252E0(v6 + 40 * v7 + 32, a1);
    }
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001EF8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_1001EF800((uint64_t)&v35);
  if (v36)
  {
    sub_10002411C(&v35, (uint64_t)&v38);
    v2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CardTypeConfigurationRoomView(0) + 36));
    KeyPath = swift_getKeyPath(&unk_10062C850);
    v4 = swift_getKeyPath(&unk_10062C878);
    static Published.subscript.getter(&v35, v2, KeyPath, v4);
    swift_release(KeyPath);
    swift_release(v4);
    v5 = *(_QWORD *)(v35 + 16);
    if (v5)
    {
      v31 = a1;
      swift_bridgeObjectRetain(v35);
      v32 = v6;
      v7 = (unsigned __int8 *)(v6 + 49);
      do
      {
        v8 = *(_QWORD *)(v7 - 17);
        v9 = *(_QWORD *)(v7 - 9);
        v10 = *(v7 - 1);
        v11 = *v7;
        v12 = v40;
        v13 = v41;
        sub_100016804(&v38, v40);
        v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 24);
        sub_1000EB3F4(v8, v9, v10);
        LODWORD(v14) = (v14(v12, v13) & 1) == 0;
        sub_1000252E0((uint64_t)&v38, (uint64_t)&v35);
        if (v11 != (_DWORD)v14)
        {
          v15 = v36;
          v16 = v37;
          sub_100016804(&v35, v36);
          (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
          __asm { BR              X8 }
        }
        _s10FitnessApp24HistoryViewActionContextVwxx_0(&v35);
        sub_1000EB41C(v8, v9, v10);
        v7 += 24;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease_n(v32, 2);
      a1 = v31;
    }
    else
    {
      swift_bridgeObjectRelease(v35);
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&v38);
  }
  else
  {
    sub_10001BE90((uint64_t)&v35, &qword_100832410);
  }
  v17 = (int *)type metadata accessor for CardTypeConfigurationRoomView(0);
  sub_100021CC0(a1 + v17[6], (uint64_t)&v35, &qword_100832410);
  if (!v36)
  {
    sub_10001BE90((uint64_t)&v35, &qword_100832410);
    v24 = (uint64_t *)(a1 + v17[14]);
    v25 = *v24;
    v26 = v24[1];
    v38 = *v24;
    v39 = v26;
    v27 = sub_100047110(&qword_10081F1D8);
    result = State.wrappedValue.getter(&v35, v27);
    v29 = *(_QWORD *)(a1 + v17[7]);
    if ((uint64_t)v35 >= *(_QWORD *)(v29 + 16))
      return result;
    v38 = v25;
    v39 = v26;
    State.wrappedValue.getter(&v35, v27);
    if ((v35 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v35 < *(_QWORD *)(v29 + 16))
      {
        sub_1000252E0(v29 + 40 * v35 + 32, (uint64_t)&v38);
        sub_1000252E0((uint64_t)&v38, (uint64_t)&v35);
        v34 = 0;
        memset(v33, 0, sizeof(v33));
        sub_10058C67C(0, (uint64_t)&v35, (uint64_t)v33);
        sub_10001BE90((uint64_t)v33, &qword_100832410);
        sub_10001BE90((uint64_t)&v35, &qword_100832410);
        v30 = sub_100360DFC((uint64_t)&v38, 0, 1);
        (*(void (**)(uint64_t, double))(a1 + v17[13]))(1, v30);
        return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(&v38);
      }
LABEL_25:
      __break(1u);
      JUMPOUT(0x1001EFE30);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10002411C(&v35, (uint64_t)&v38);
  v18 = (uint64_t *)(a1 + v17[14]);
  v19 = *v18;
  v20 = v18[1];
  *(_QWORD *)&v35 = *v18;
  *((_QWORD *)&v35 + 1) = v20;
  v21 = sub_100047110(&qword_10081F1D8);
  State.wrappedValue.getter(v33, v21);
  v22 = *(_QWORD *)(a1 + v17[7]);
  if (*(uint64_t *)&v33[0] < *(_QWORD *)(v22 + 16))
  {
    *(_QWORD *)&v35 = v19;
    *((_QWORD *)&v35 + 1) = v20;
    State.wrappedValue.getter(v33, v21);
    if ((*(_QWORD *)&v33[0] & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)&v33[0] < *(_QWORD *)(v22 + 16))
    {
      sub_1000252E0(v22 + 40 * *(_QWORD *)&v33[0] + 32, (uint64_t)&v35);
      v23 = sub_10035C4D0((uint64_t)&v38, (uint64_t)&v35);
      (*(void (**)(_QWORD, double))(a1 + v17[13]))(0, v23);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(&v35);
      return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(&v38);
    }
    __break(1u);
    goto LABEL_24;
  }
  return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(&v38);
}

uint64_t sub_1001EFE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100047110(&qword_100826E20);
  return sub_1001EFEAC(a1, (_QWORD *)(a2 + *(int *)(v4 + 44)));
}

uint64_t sub_1001EFEAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t OpaqueTypeConformance2;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;

  v85 = a2;
  v84 = sub_100047110(&qword_100826E28);
  v73 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v72 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100047110(&qword_100826E30);
  __chkstk_darwin(v80);
  v83 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100826E38);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100047110(&qword_100826E40);
  __chkstk_darwin(v74);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100047110(&qword_100826E48);
  __chkstk_darwin(v78);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100047110(&qword_100826E50);
  v77 = *(_QWORD *)(v82 - 8);
  v12 = __chkstk_darwin(v82);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v71 - v15;
  v17 = type metadata accessor for CardTypeConfigurationRoomView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110(&qword_100826E58);
  v21 = __chkstk_darwin(v20);
  v81 = (uint64_t)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v79 = (char *)&v71 - v23;
  v24 = sub_1001EEFB0();
  sub_10004F8C8(a1, (uint64_t)v19, type metadata accessor for CardTypeConfigurationRoomView);
  if ((v24 & 1) != 0)
  {
    sub_100011F54((uint64_t)v19, type metadata accessor for CardTypeConfigurationRoomView);
LABEL_5:
    v48 = LocalizedStringKey.init(stringLiteral:)(0x445241435F444441, 0xEF4E4F545455425FLL);
    Label<>.init(_:systemImage:)(v48);
    KeyPath = swift_getKeyPath(&unk_10062C898);
    v51 = v75;
    v50 = v76;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v9, v7, v76);
    v52 = &v9[*(int *)(v74 + 36)];
    *(_QWORD *)v52 = KeyPath;
    *((_QWORD *)v52 + 1) = 2;
    v52[16] = 0;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v50);
    v53 = swift_getKeyPath(&unk_10062C8C8);
    sub_100021CC0((uint64_t)v9, (uint64_t)v11, &qword_100826E40);
    v54 = v78;
    v55 = (uint64_t *)&v11[*(int *)(v78 + 36)];
    *v55 = v53;
    v55[1] = 0x3FE999999999999ALL;
    v56 = sub_10001BE90((uint64_t)v9, &qword_100826E40);
    v57 = static Font.Weight.semibold.getter(v56);
    v58 = sub_1001F1820();
    View.fontWeight(_:)(*(_QWORD *)&v57, 0, v54, v58);
    sub_10001BE90((uint64_t)v11, &qword_100826E48);
    v59 = v77;
    v60 = v82;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v16, v14, v82);
    v61 = v83;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v83, v16, v60);
    swift_storeEnumTagMultiPayload(v61, v80, 0);
    v86 = v54;
    v87 = v58;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v86, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v63 = sub_100007050(&qword_100826E88);
    v64 = sub_1001F1940();
    v86 = v63;
    v87 = v64;
    v65 = swift_getOpaqueTypeConformance2(&v86, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v47 = (uint64_t)v79;
    _ConditionalContent<>.init(storage:)(v61, v60, v84, OpaqueTypeConformance2, v65);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v60);
    goto LABEL_6;
  }
  sub_100021CC0((uint64_t)&v19[*(int *)(v17 + 24)], (uint64_t)&v86, &qword_100832410);
  sub_100011F54((uint64_t)v19, type metadata accessor for CardTypeConfigurationRoomView);
  v25 = v89;
  sub_10001BE90((uint64_t)&v86, &qword_100832410);
  if (!v25)
    goto LABEL_5;
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x800000010068F430);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v77 = v30;
  v33 = v32 & 1;
  v34 = swift_getKeyPath(&unk_10062C898);
  v35 = swift_getKeyPath(&unk_10062C8C8);
  v86 = v27;
  v87 = v29;
  v88 = v33;
  v89 = v31;
  v90 = v34;
  v91 = 2;
  v92 = 0;
  v93 = v35;
  v94 = 0x3FE999999999999ALL;
  v36 = static Font.Weight.semibold.getter(v35);
  v37 = sub_100047110(&qword_100826E88);
  v38 = sub_1001F1940();
  v39 = v72;
  View.fontWeight(_:)(*(_QWORD *)&v36, 0, v37, v38);
  sub_1000E4458(v27, v29, v33);
  swift_release(v35);
  swift_release(v34);
  v40 = swift_bridgeObjectRelease(v77);
  v41 = v73;
  v43 = v83;
  v42 = v84;
  (*(void (**)(char *, char *, uint64_t, __n128))(v73 + 16))(v83, v39, v84, v40);
  swift_storeEnumTagMultiPayload(v43, v80, 1);
  v44 = sub_1001F1820();
  v86 = v78;
  v87 = v44;
  v45 = swift_getOpaqueTypeConformance2(&v86, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v86 = v37;
  v87 = v38;
  v46 = swift_getOpaqueTypeConformance2(&v86, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v47 = (uint64_t)v79;
  _ConditionalContent<>.init(storage:)(v43, v82, v42, v45, v46);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v42);
LABEL_6:
  v66 = v81;
  sub_100021CC0(v47, v81, &qword_100826E58);
  v67 = v85;
  *v85 = 0;
  *((_BYTE *)v67 + 8) = 0;
  v68 = sub_100047110(&qword_100826E98);
  sub_100021CC0(v66, (uint64_t)v67 + *(int *)(v68 + 48), &qword_100826E58);
  v69 = (char *)v67 + *(int *)(v68 + 64);
  *(_QWORD *)v69 = 0;
  v69[8] = 0;
  sub_10001BE90(v47, &qword_100826E58);
  return sub_10001BE90(v66, &qword_100826E58);
}

uint64_t sub_1001F05A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v4 = sub_100047110(&qword_100826D18);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v5, v8, v9, v10, v11);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v12 = sub_100047110(&qword_100826D20);
  sub_1001EC22C(v2, (uint64_t)&v7[*(int *)(v12 + 44)]);
  v14 = static Edge.Set.top.getter(v13);
  LOBYTE(v2) = v14;
  v15 = static SafeAreaRegions.all.getter(v14);
  sub_100021CC0((uint64_t)v7, a1, &qword_100826D18);
  v16 = a1 + *(int *)(sub_100047110(&qword_100826D28) + 36);
  *(_QWORD *)v16 = v15;
  *(_BYTE *)(v16 + 8) = v2;
  return sub_10001BE90((uint64_t)v7, &qword_100826D18);
}

void sub_1001F0688(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1001F06B0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

_QWORD *sub_1001F06D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  id v44;
  id v45;
  __n128 v46;
  char *v48;
  char *v49;
  uint64_t v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14 + 24);
    if (v17)
    {
      v18 = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 3) = v17;
      *((_QWORD *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      v19 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v19;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v22;
    v23 = *(void **)((char *)a2 + v21);
    *(_QWORD *)((char *)a1 + v21) = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = *(void **)((char *)a2 + v24);
    *(_QWORD *)((char *)a1 + v24) = v26;
    v50 = *(_QWORD *)((char *)a2 + v25);
    *(_QWORD *)((char *)a1 + v25) = v50;
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    v33 = a3[13];
    v34 = a3[14];
    v35 = (_QWORD *)((char *)a1 + v33);
    v36 = (_QWORD *)((char *)a2 + v33);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = (_QWORD *)((char *)a1 + v34);
    v39 = (_QWORD *)((char *)a2 + v34);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = a3[15];
    v48 = (char *)a2 + v41;
    v49 = (char *)a1 + v41;
    v42 = type metadata accessor for DynamicTypeSize(0);
    v43 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v42 - 8) + 16);
    swift_bridgeObjectRetain(v22);
    v44 = v23;
    v45 = v26;
    swift_retain(v50);
    swift_retain(v37);
    v46 = swift_retain(v40);
    v43(v49, v48, v42, v46);
    ((void (*)(char *, char *, uint64_t))v43)((char *)a1 + a3[16], (char *)a2 + a3[16], v42);
  }
  return a1;
}

uint64_t sub_1001F08F4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  void (*v10)(char *, uint64_t);

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  if (v6[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7]));

  swift_release(*(_QWORD *)((char *)a1 + a2[10]));
  swift_release(*(_QWORD *)((char *)a1 + a2[13] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[14] + 8));
  v7 = (char *)a1 + a2[15];
  v8 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v10(v7, v8);
  return ((uint64_t (*)(char *, uint64_t))v10)((char *)a1 + a2[16], v8);
}

_QWORD *sub_1001F0A10(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  id v42;
  id v43;
  __n128 v44;
  char *v46;
  char *v47;
  uint64_t v48;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 24);
  if (v15)
  {
    v16 = *((_QWORD *)v14 + 4);
    *((_QWORD *)v13 + 3) = v15;
    *((_QWORD *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  v21 = *(void **)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v21;
  v22 = a3[9];
  v23 = a3[10];
  v24 = *(void **)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = v24;
  v48 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v48;
  v25 = a3[11];
  v26 = a3[12];
  v27 = (char *)a1 + v25;
  v28 = (char *)a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = (char *)a1 + v26;
  v30 = (char *)a2 + v26;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  v31 = a3[13];
  v32 = a3[14];
  v33 = (_QWORD *)((char *)a1 + v31);
  v34 = (_QWORD *)((char *)a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = (_QWORD *)((char *)a1 + v32);
  v37 = (_QWORD *)((char *)a2 + v32);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = a3[15];
  v46 = (char *)a2 + v39;
  v47 = (char *)a1 + v39;
  v40 = type metadata accessor for DynamicTypeSize(0);
  v41 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v40 - 8) + 16);
  swift_bridgeObjectRetain(v20);
  v42 = v21;
  v43 = v24;
  swift_retain(v48);
  swift_retain(v35);
  v44 = swift_retain(v38);
  v41(v47, v46, v40, v44);
  ((void (*)(char *, char *, uint64_t))v41)((char *)a1 + a3[16], (char *)a2 + a3[16], v40);
  return a1;
}

_QWORD *sub_1001F0C04(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 24);
  if (!*(_QWORD *)((char *)a1 + v12 + 24))
  {
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      (**(void (***)(char *, char *))(v15 - 8))(v13, v14);
      goto LABEL_13;
    }
LABEL_12:
    v16 = *(_OWORD *)v14;
    v17 = *((_OWORD *)v14 + 1);
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    *(_OWORD *)v13 = v16;
    *((_OWORD *)v13 + 1) = v17;
    goto LABEL_13;
  }
  if (!v15)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v13);
    goto LABEL_12;
  }
  sub_1000F1A58(v13, v14);
LABEL_13:
  v18 = a3[7];
  v19 = *(_QWORD *)((char *)a2 + v18);
  v20 = *(_QWORD *)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = *(void **)((char *)a2 + v21);
  v23 = *(void **)((char *)a1 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  v24 = v22;

  v25 = a3[9];
  v26 = *(void **)((char *)a2 + v25);
  v27 = *(void **)((char *)a1 + v25);
  *(_QWORD *)((char *)a1 + v25) = v26;
  v28 = v26;

  v29 = a3[10];
  v30 = *(_QWORD *)((char *)a2 + v29);
  v31 = *(_QWORD *)((char *)a1 + v29);
  *(_QWORD *)((char *)a1 + v29) = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = a3[11];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *(_QWORD *)v33 = v35;
  v36 = a3[12];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  v40 = a3[13];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  v43 = v42[1];
  v44 = v41[1];
  *v41 = *v42;
  v41[1] = v43;
  swift_retain(v43);
  swift_release(v44);
  v45 = a3[14];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  *v46 = *v47;
  v48 = v46[1];
  v49 = v47[1];
  v46[1] = v49;
  swift_retain(v49);
  swift_release(v48);
  v50 = a3[15];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for DynamicTypeSize(0);
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24);
  v54(v51, v52, v53);
  v54((char *)a1 + a3[16], (char *)a2 + a3[16], v53);
  return a1;
}

char *sub_1001F0E78(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  v12 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[11];
  v15 = a3[12];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  v21 = a3[15];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  v24 = type metadata accessor for DynamicTypeSize(0);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(&a1[a3[16]], &a2[a3[16]], v24);
  return a1;
}

char *sub_1001F0FFC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v9 = &a1[v8];
  if (*(_QWORD *)&a1[v8 + 24])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v8]);
  v10 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v10;
  *((_QWORD *)v9 + 4) = *(_QWORD *)&a2[v8 + 32];
  v11 = a3[7];
  v12 = *(_QWORD *)&a1[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_bridgeObjectRelease(v12);
  v13 = a3[8];
  v14 = *(void **)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];

  v15 = a3[9];
  v16 = *(void **)&a1[v15];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];

  v17 = a3[10];
  v18 = *(_QWORD *)&a1[v17];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  swift_release(v18);
  v19 = a3[11];
  v20 = a3[12];
  v21 = &a1[v19];
  v22 = &a2[v19];
  v21[8] = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = &a1[v20];
  v24 = &a2[v20];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[13];
  v26 = *(_QWORD *)&a1[v25 + 8];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  swift_release(v26);
  v27 = a3[14];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *((_QWORD *)v28 + 1);
  v32 = *(_QWORD *)v29;
  v31 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = v32;
  *((_QWORD *)v28 + 1) = v31;
  swift_release(v30);
  v33 = a3[15];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for DynamicTypeSize(0);
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40);
  v37(v34, v35, v36);
  v37(&a1[a3[16]], &a2[a3[16]], v36);
  return a1;
}

uint64_t sub_1001F11F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F11FC);
}

uint64_t sub_1001F11FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    v10 = a1 + *(int *)(a3 + 60);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001F12A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F12B4);
}

uint64_t sub_1001F12B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for DynamicTypeSize(0);
    v12 = a1 + *(int *)(a4 + 60);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1001F135C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];
  uint64_t v7;
  uint64_t v8;

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10062C6B0;
    v6[2] = &unk_10062C6C8;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = &unk_10062C6E0;
    v6[8] = &unk_10062C6E0;
    v6[9] = (char *)&value witness table for () + 64;
    v6[10] = &unk_10062C6F8;
    v4 = type metadata accessor for DynamicTypeSize(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001F1444(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF570, 1);
}

uint64_t sub_1001F1464()
{
  uint64_t v0;

  return sub_1001EDF68(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1001F146C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826DB8;
  if (!qword_100826DB8)
  {
    v1 = sub_100007050(&qword_100826DB0);
    sub_1001F14D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100826DB8);
  }
  return result;
}

unint64_t sub_1001F14D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826DC0;
  if (!qword_100826DC0)
  {
    v1 = sub_100007050(&qword_100826DC8);
    sub_100028384(&qword_100826DD0, &qword_100826DD8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826DC0);
  }
  return result;
}

_QWORD *sub_1001F1558()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CardTypeConfigurationRoomView(0) - 8) + 80);
  return sub_1001EF8E4(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1001F1584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001EFE60(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001F158C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826E00;
  if (!qword_100826E00)
  {
    v1 = sub_100007050(&qword_100826D38);
    sub_100028384(&qword_100826DF8, &qword_100826D30, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E00);
  }
  return result;
}

uint64_t sub_1001F1630()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1001F1640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826E08;
  if (!qword_100826E08)
  {
    v1 = sub_100007050(&qword_100826D50);
    sub_1001F16C4();
    sub_100028384(&qword_10081F7E0, &qword_10081F7E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E08);
  }
  return result;
}

unint64_t sub_1001F16C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100826E10;
  if (!qword_100826E10)
  {
    v1 = sub_100007050(&qword_100826D48);
    v2[0] = sub_100007050(&qword_100826D38);
    v2[1] = sub_100007050(&qword_100825FC0);
    v2[2] = sub_1001F158C();
    v2[3] = sub_100028384(&qword_100825FD0, &qword_100825FC0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100028384(&qword_1008237E0, &qword_1008237E8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E10);
  }
  return result;
}

void sub_1001F17D4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1001F17FC(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

unint64_t sub_1001F1820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826E60;
  if (!qword_100826E60)
  {
    v1 = sub_100007050(&qword_100826E48);
    sub_1001F18A4();
    sub_100028384(&qword_100826E78, &qword_100826E80, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E60);
  }
  return result;
}

unint64_t sub_1001F18A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826E68;
  if (!qword_100826E68)
  {
    v1 = sub_100007050(&qword_100826E40);
    sub_100028384(&qword_100826E70, &qword_100826E38, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100028384(&qword_1008255A0, &qword_1008255A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E68);
  }
  return result;
}

unint64_t sub_1001F1940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826E90;
  if (!qword_100826E90)
  {
    v1 = sub_100007050(&qword_100826E88);
    sub_1001F19E4((unint64_t *)&qword_100825598, &qword_100825590, &qword_1008255A0, &qword_1008255A8);
    sub_100028384(&qword_100826E78, &qword_100826E80, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826E90);
  }
  return result;
}

uint64_t sub_1001F19E4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007050(a2);
    sub_100028384(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F1A68()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);

  v1 = (int *)type metadata accessor for CardTypeConfigurationRoomView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (char *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*(_QWORD *)v6);
  }
  v9 = &v6[v1[6]];
  if (*((_QWORD *)v9 + 3))
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
  v10 = v4 + v5;
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[7]]);

  swift_release(*(_QWORD *)&v6[v1[10]]);
  swift_release(*(_QWORD *)&v6[v1[13] + 8]);
  swift_release(*(_QWORD *)&v6[v1[14] + 8]);
  v11 = &v6[v1[15]];
  v12 = type metadata accessor for DynamicTypeSize(0);
  v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(&v6[v1[16]], v12);
  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_1001F1BB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CardTypeConfigurationRoomView(0) - 8) + 80);
  return sub_1001EE0FC(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

uint64_t sub_1001F1C08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001F1C2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826EE0;
  if (!qword_100826EE0)
  {
    v1 = sub_100007050(&qword_100821220);
    sub_1001F1CB0();
    sub_100028384(&qword_100823800, &qword_100821238, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826EE0);
  }
  return result;
}

unint64_t sub_1001F1CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826EE8;
  if (!qword_100826EE8)
  {
    v1 = sub_100007050(&qword_100821218);
    sub_1000083D8(&qword_100826EF0, type metadata accessor for DashboardCardView, (uint64_t)&unk_100623EB0);
    sub_1001F1D34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826EE8);
  }
  return result;
}

unint64_t sub_1001F1D34()
{
  unint64_t result;

  result = qword_100826EF8;
  if (!qword_100826EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_100826EF8);
  }
  return result;
}

unint64_t sub_1001F1D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826F08;
  if (!qword_100826F08)
  {
    v1 = sub_100007050(&qword_100826F00);
    sub_100192040();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826F08);
  }
  return result;
}

unint64_t sub_1001F1DE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100826F18;
  if (!qword_100826F18)
  {
    v1 = sub_100007050(&qword_100826D28);
    sub_100028384(&qword_100826F20, &qword_100826D18, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100826F18);
  }
  return result;
}

char *sub_1001F1E6C(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  objc_super v18;

  v9 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrow;
  type metadata accessor for TrendArrowIndicatorView();
  v10 = v4;
  *(_QWORD *)&v4[v9] = sub_1005AEF5C();
  v11 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  *(_QWORD *)&v10[v11] = sub_1004C2368();
  v12 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel;
  *(_QWORD *)&v10[v12] = sub_1004C2368();
  v13 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_divider;
  sub_10001E724(0, (unint64_t *)&qword_100821308, UIView_ptr);
  *(_QWORD *)&v10[v13] = sub_1005AEEC8();
  v10[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection] = 1;

  v18.receiver = v10;
  v18.super_class = (Class)type metadata accessor for TrendDetailSummaryView();
  v14 = (char *)objc_msgSendSuper2(&v18, "initWithFrame:", a1, a2, a3, a4);
  v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrow];
  v16 = v14;
  objc_msgSend(v16, "addSubview:", v15);
  objc_msgSend(v16, "addSubview:", *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel]);
  objc_msgSend(v16, "addSubview:", *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel]);
  objc_msgSend(v16, "addSubview:", *(_QWORD *)&v16[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_divider]);
  sub_1001F217C();
  sub_1001F22AC();

  return v16;
}

void sub_1001F201C(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;

  v7 = v6;
  v12 = *(_QWORD *)(v6 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrow);
  sub_1004E4168(a1);
  v14 = v13;
  v15 = *(id *)&v13[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient];

  v16 = *(void **)(v12 + OBJC_IVAR____TtC10FitnessApp23TrendArrowIndicatorView_gradientColors);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp23TrendArrowIndicatorView_gradientColors) = v15;
  v17 = v15;

  sub_10047E818();
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection) = (_BYTE)a2;
  sub_10047F60C(a2, a6);
  v18 = *(void **)(v7 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel);
  objc_msgSend(v18, "setAttributedText:", a3);
  sub_1004E4168(a1);
  v20 = v19;
  v21 = *(id *)&v19[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  objc_msgSend(v18, "setTextColor:", v21);
  v22 = *(void **)(v7 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel);
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setText:", v23);

}

void sub_1001F217C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel);
  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "labelColor");
  objc_msgSend(v1, "setTextColor:", v3);

  v4 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel);
  v5 = objc_msgSend(v2, "secondaryLabelColor");
  objc_msgSend(v4, "setTextColor:", v5);

  objc_msgSend(v4, "setNumberOfLines:", 0);
  v6 = (void *)sub_100036218();
  objc_msgSend(v1, "setFont:", v6);

  v7 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCaption1);
  objc_msgSend(v4, "setFont:", v7);

}

void sub_1001F22AC()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  Class isa;
  uint64_t v71;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel];
  v2 = objc_msgSend(v1, "leadingAnchor");
  v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrow];
  v4 = objc_msgSend(v3, "trailingAnchor");
  v59 = objc_msgSend(v2, "constraintEqualToAnchor:constant:", v4, 8.0);

  v5 = objc_msgSend(v1, "trailingAnchor");
  v6 = objc_msgSend(v0, "trailingAnchor");
  v58 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v6, -16.0);

  v7 = objc_msgSend(v1, "topAnchor");
  v8 = objc_msgSend(v0, "topAnchor");
  v57 = objc_msgSend(v7, "constraintEqualToAnchor:constant:", v8, 11.0);

  v9 = objc_msgSend(v3, "leadingAnchor");
  v10 = objc_msgSend(v0, "leadingAnchor");
  v55 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, 16.0);

  v11 = objc_msgSend(v3, "widthAnchor");
  v53 = objc_msgSend(v11, "constraintEqualToConstant:", 60.0);

  v12 = objc_msgSend(v3, "heightAnchor");
  v51 = objc_msgSend(v12, "constraintEqualToConstant:", 60.0);

  v13 = objc_msgSend(v3, "topAnchor");
  v14 = objc_msgSend(v1, "topAnchor");
  objc_msgSend(v1, "_capOffsetFromBoundsTop");
  v49 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, -v15);

  v16 = objc_msgSend(v3, "bottomAnchor");
  v17 = objc_msgSend(v0, "bottomAnchor");
  v47 = objc_msgSend(v16, "constraintLessThanOrEqualToAnchor:constant:", v17, -11.0);

  v18 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel];
  v19 = objc_msgSend(v18, "leadingAnchor");
  v20 = objc_msgSend(v1, "leadingAnchor");
  v69 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  v21 = objc_msgSend(v18, "trailingAnchor");
  v22 = objc_msgSend(v1, "trailingAnchor");
  v67 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  v23 = objc_msgSend(v18, "topAnchor");
  v24 = objc_msgSend(v1, "bottomAnchor");
  v65 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  v25 = objc_msgSend(v18, "bottomAnchor");
  v26 = objc_msgSend(v0, "bottomAnchor");
  v64 = objc_msgSend(v25, "constraintLessThanOrEqualToAnchor:constant:", v26, -11.0);

  v27 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_divider];
  v28 = objc_msgSend(v27, "leadingAnchor");
  v29 = objc_msgSend(v0, "leadingAnchor");
  v63 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v29, 16.0);

  v30 = objc_msgSend(v27, "trailingAnchor");
  v31 = objc_msgSend(v0, "trailingAnchor");
  v62 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  v32 = objc_msgSend(v27, "heightAnchor");
  if (qword_10081DD78 != -1)
    swift_once(&qword_10081DD78, sub_100442F3C);
  v61 = objc_msgSend(v32, "constraintEqualToConstant:", *(double *)&qword_10086AA08);

  v33 = objc_msgSend(v27, "bottomAnchor");
  v34 = objc_msgSend(v0, "bottomAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  v46 = (id)objc_opt_self(NSLayoutConstraint);
  v36 = sub_100047110((uint64_t *)&unk_100828340);
  v37 = swift_allocObject(v36, 160, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100626C10;
  *(_QWORD *)(v37 + 32) = v55;
  *(_QWORD *)(v37 + 40) = v53;
  *(_QWORD *)(v37 + 48) = v51;
  *(_QWORD *)(v37 + 56) = v49;
  *(_QWORD *)(v37 + 64) = v47;
  *(_QWORD *)(v37 + 72) = v59;
  *(_QWORD *)(v37 + 80) = v58;
  *(_QWORD *)(v37 + 88) = v57;
  *(_QWORD *)(v37 + 96) = v69;
  *(_QWORD *)(v37 + 104) = v67;
  *(_QWORD *)(v37 + 112) = v65;
  *(_QWORD *)(v37 + 120) = v64;
  *(_QWORD *)(v37 + 128) = v63;
  *(_QWORD *)(v37 + 136) = v62;
  *(_QWORD *)(v37 + 144) = v61;
  *(_QWORD *)(v37 + 152) = v35;
  v71 = v37;
  specialized Array._endMutation()(v37);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  v56 = v55;
  v54 = v53;
  v52 = v51;
  v50 = v49;
  v48 = v47;
  v38 = v59;
  v39 = v58;
  v40 = v57;
  v60 = v69;
  v68 = v67;
  v66 = v65;
  v41 = v64;
  v42 = v63;
  v43 = v62;
  v44 = v61;
  v45 = v35;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "activateConstraints:", isa, swift_bridgeObjectRelease(v71).n128_f64[0]);

}

uint64_t sub_1001F2A98(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrow;
  type metadata accessor for TrendArrowIndicatorView();
  v5 = v1;
  *(_QWORD *)&v1[v4] = sub_1005AEF5C();
  v6 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_valueLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  *(_QWORD *)&v5[v6] = sub_1004C2368();
  v7 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_coachingLabel;
  *(_QWORD *)&v5[v7] = sub_1004C2368();
  v8 = OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_divider;
  sub_10001E724(0, (unint64_t *)&qword_100821308, UIView_ptr);
  v9 = sub_1005AEEC8();

  *(_QWORD *)&v5[v8] = v9;
  v5[OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection] = 1;

  v10 = *(void **)&v5[v8];
  v11 = type metadata accessor for TrendDetailSummaryView();
  swift_deallocPartialClassInstance(v5, v11, 41, 7);
  return 0;
}

id sub_1001F2BDC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrendDetailSummaryView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TrendDetailSummaryView()
{
  return objc_opt_self(_TtC10FitnessApp22TrendDetailSummaryView);
}

void sub_1001F2C84()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)*(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection);
  if ((_DWORD)v1 == 1)
    sub_10047F60C(v1, 0);
  else
    sub_10047FF70(v1);
}

void sub_1001F2CD0()
{
  _QWORD *v0;

  sub_10047F60C((void *)*(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection), *(_BYTE *)(*v0 + OBJC_IVAR____TtC10FitnessApp22TrendDetailSummaryView_arrowDirection) != 1);
}

char *sub_1001F2D1C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat Width;
  char *v19;
  char *v20;
  char *result;
  char *v22;
  objc_super v23;
  CGRect v24;

  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_historyTypes] = _swiftEmptyArrayStorage;
  v5 = &v2[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_selectedHistoryType];
  *(_QWORD *)v5 = 0;
  *((_WORD *)v5 + 4) = 512;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterViewController] = 0;
  v6 = &v2[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame];
  v7 = (void *)objc_opt_self(UIScreen);
  v8 = v2;
  v9 = objc_msgSend(v7, "mainScreen");
  objc_msgSend(v9, "bounds");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v24.origin.x = v11;
  v24.origin.y = v13;
  v24.size.width = v15;
  v24.size.height = v17;
  Width = CGRectGetWidth(v24);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((CGFloat *)v6 + 2) = Width;
  *((_QWORD *)v6 + 3) = 0x404F000000000000;
  v19 = &v8[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_action];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  swift_retain(a2);

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for HistoryFilterUIViewController();
  v20 = (char *)objc_msgSendSuper2(&v23, "initWithNibName:bundle:", 0, 0);
  result = (char *)objc_msgSend(v20, "view");
  if (result)
  {
    v22 = result;
    objc_msgSend(result, "setFrame:", *(double *)&v20[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame], *(double *)&v20[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 8], *(double *)&v20[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 16], *(double *)&v20[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 24]);

    sub_1001F2EC0();
    swift_release(a2);
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001F2EC0()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[6];
  uint64_t v27;
  __int16 v28;

  v1 = v0;
  v2 = objc_msgSend(v0, "view");
  if (!v2)
    goto LABEL_21;
  v3 = v2;
  v4 = objc_msgSend(v2, "subviews");

  v5 = sub_1001F32FC();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v11 = v6;
    else
      v11 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (!v7)
      goto LABEL_14;
  }
  if (v7 < 1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    else
      v9 = *(id *)(v6 + 8 * i + 32);
    v10 = v9;
    objc_msgSend(v9, "removeFromSuperview");

  }
LABEL_14:
  swift_bridgeObjectRelease_n(v6, 2);
  v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_selectedHistoryType];
  v13 = *(_WORD *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_selectedHistoryType + 8];
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_historyTypes];
  v15 = swift_allocObject(&unk_10078DC80, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v1);
  v27 = v12;
  v28 = v13;
  swift_bridgeObjectRetain(v14);
  State.init(wrappedValue:)(v26, &v27, &type metadata for HistoryItemFilterValue);
  v26[3] = v14;
  v26[4] = sub_1001F335C;
  v26[5] = v15;
  v16 = objc_allocWithZone((Class)sub_100047110(&qword_100826FC8));
  v17 = UIHostingController.init(rootView:)(v26);
  v18 = OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterViewController;
  v19 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterViewController];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterViewController] = v17;

  v20 = *(void **)&v1[v18];
  if (!v20)
    return;
  v21 = v20;
  v22 = objc_msgSend(v21, "view");
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v22, "setFrame:", *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame], *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 8], *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 16], *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame + 24]);
    v24 = objc_msgSend(v1, "view");
    if (v24)
    {
      v25 = v24;
      objc_msgSend(v24, "addSubview:", v23);

      v21 = v25;
      goto LABEL_18;
    }
LABEL_22:
    __break(1u);
    return;
  }
LABEL_18:

}

void sub_1001F3140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char *v10;
  char *v11;
  uint64_t v12;
  char v13[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v9 = *(void (**)(uint64_t, uint64_t))(Strong
                                                 + OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_action);
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_action + 8);
    swift_retain(v8);

    v9(a1, a2);
    swift_release(v8);
  }
  swift_beginAccess(v5, &v12, 0, 0);
  v10 = (char *)swift_unknownObjectWeakLoadStrong(v5);
  if (v10)
  {
    v11 = &v10[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_selectedHistoryType];
    *(_QWORD *)v11 = a1;
    *((_WORD *)v11 + 4) = a2;

  }
}

id sub_1001F3260()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HistoryFilterUIViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HistoryFilterUIViewController()
{
  return objc_opt_self(_TtC10FitnessApp29HistoryFilterUIViewController);
}

unint64_t sub_1001F32FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821308;
  if (!qword_100821308)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100821308);
  }
  return result;
}

uint64_t sub_1001F3338()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001F335C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001F3140(a1, a2, v2);
}

void sub_1001F3364()
{
  char *v0;
  char *v1;
  char *v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  CGFloat Width;
  CGRect v13;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_historyTypes] = &_swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_selectedHistoryType];
  *(_QWORD *)v1 = 0;
  *((_WORD *)v1 + 4) = 512;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterViewController] = 0;
  v2 = &v0[OBJC_IVAR____TtC10FitnessApp29HistoryFilterUIViewController_filterFrame];
  v3 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v13.origin.x = v5;
  v13.origin.y = v7;
  v13.size.width = v9;
  v13.size.height = v11;
  Width = CGRectGetWidth(v13);
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((CGFloat *)v2 + 2) = Width;
  *((_QWORD *)v2 + 3) = 0x404F000000000000;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x800000010068F5D0, "FitnessApp/HistoryFilterUIViewController.swift", 46, 2, 66, 0);
  __break(1u);
}

_QWORD *sub_1001F3480(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for DailyGoalChartPoint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for DailyGoalChartPoint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for DailyGoalChartPoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyGoalChartPoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DailyGoalChartPoint()
{
  return &type metadata for DailyGoalChartPoint;
}

ValueMetadata *type metadata accessor for FriendCardActionContext()
{
  return &type metadata for FriendCardActionContext;
}

_QWORD *sub_1001F35EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v35);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for FriendCard(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v14 = v11[16];
    sub_1000EB3F4(*(_QWORD *)v11, v13, v14);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    v10[16] = v14;
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    v15 = v8[9];
    v16 = *(void **)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v16;
    v17 = v8[10];
    v18 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v18;
    v19 = v8[11];
    v20 = *(void **)((char *)a2 + v19);
    *(_QWORD *)((char *)a1 + v19) = v20;
    v21 = v8[12];
    v22 = *(void **)((char *)a2 + v21);
    *(_QWORD *)((char *)a1 + v21) = v22;
    v23 = v8[13];
    v24 = *(void **)((char *)a2 + v23);
    *(_QWORD *)((char *)a1 + v23) = v24;
    v25 = *(int *)(a3 + 20);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *((_QWORD *)v27 + 3);
    v29 = v16;
    v30 = v18;
    v31 = v20;
    v32 = v22;
    v33 = v24;
    if (v28)
    {
      v34 = *((_QWORD *)v27 + 4);
      *((_QWORD *)v26 + 3) = v28;
      *((_QWORD *)v26 + 4) = v34;
      (**(void (***)(char *, char *, uint64_t))(v28 - 8))(v26, v27, v28);
    }
    else
    {
      v36 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v36;
      *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
    }
  }
  return a1;
}

_QWORD *sub_1001F376C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  _QWORD *result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for FriendCard(0);
  sub_1000EB41C(*(_QWORD *)(a1 + v5[5]), *(_QWORD *)(a1 + v5[5] + 8), *(_BYTE *)(a1 + v5[5] + 16));

  result = (_QWORD *)(a1 + *(int *)(a2 + 20));
  if (result[3])
    return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(result);
  return result;
}

uint64_t sub_1001F382C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  __int128 v34;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for FriendCard(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  sub_1000EB3F4(*(_QWORD *)v10, v12, v13);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = v13;
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  v14 = v7[9];
  v15 = *(void **)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = v7[10];
  v17 = *(void **)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  v18 = v7[11];
  v19 = *(void **)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v19;
  v20 = v7[12];
  v21 = *(void **)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v22 = v7[13];
  v23 = *(void **)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = *(int *)(a3 + 20);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(v26 + 24);
  v28 = v15;
  v29 = v17;
  v30 = v19;
  v31 = v21;
  v32 = v23;
  if (v27)
  {
    v33 = *(_QWORD *)(v26 + 32);
    *(_QWORD *)(v25 + 24) = v27;
    *(_QWORD *)(v25 + 32) = v33;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    v34 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v34;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  }
  return a1;
}

uint64_t sub_1001F3980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for FriendCard(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  sub_1000EB3F4(*(_QWORD *)v10, v12, v13);
  v14 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  v16 = *(_BYTE *)(v9 + 16);
  *(_BYTE *)(v9 + 16) = v13;
  sub_1000EB41C(v14, v15, v16);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  v17 = v7[9];
  v18 = *(void **)(a1 + v17);
  v19 = *(void **)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v19;
  v20 = v19;

  v21 = v7[10];
  v22 = *(void **)(a1 + v21);
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  v24 = v23;

  v25 = v7[11];
  v26 = *(void **)(a1 + v25);
  v27 = *(void **)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  v28 = v27;

  v29 = v7[12];
  v30 = *(void **)(a1 + v29);
  v31 = *(void **)(a2 + v29);
  *(_QWORD *)(a1 + v29) = v31;
  v32 = v31;

  v33 = v7[13];
  v34 = *(void **)(a2 + v33);
  v35 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = v34;
  v36 = v34;

  v37 = *(int *)(a3 + 20);
  v38 = a1 + v37;
  v39 = (__int128 *)(a2 + v37);
  v40 = *((_QWORD *)v39 + 3);
  if (!*(_QWORD *)(a1 + v37 + 24))
  {
    if (v40)
    {
      *(_QWORD *)(v38 + 24) = v40;
      *(_QWORD *)(v38 + 32) = *((_QWORD *)v39 + 4);
      (**(void (***)(uint64_t, __int128 *))(v40 - 8))(v38, v39);
      return a1;
    }
LABEL_7:
    v41 = *v39;
    v42 = v39[1];
    *(_QWORD *)(v38 + 32) = *((_QWORD *)v39 + 4);
    *(_OWORD *)v38 = v41;
    *(_OWORD *)(v38 + 16) = v42;
    return a1;
  }
  if (!v40)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)v38);
    goto LABEL_7;
  }
  sub_1000F1A58((_QWORD *)v38, v39);
  return a1;
}

uint64_t sub_1001F3B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for FriendCard(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  *(_QWORD *)(a1 + v7[10]) = *(_QWORD *)(a2 + v7[10]);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  return a1;
}

uint64_t sub_1001F3C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for FriendCard(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 16);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v14 = *(_BYTE *)(v9 + 16);
  *(_BYTE *)(v9 + 16) = v11;
  sub_1000EB41C(v12, v13, v14);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  v15 = v7[9];
  v16 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);

  v17 = v7[10];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = v7[11];
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);

  v21 = v7[12];
  v22 = *(void **)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);

  v23 = v7[13];
  v24 = *(void **)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);

  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  if (*(_QWORD *)(a1 + v25 + 24))
    _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(a1 + v25));
  v27 = *(_OWORD *)(a2 + v25 + 16);
  *(_OWORD *)v26 = *(_OWORD *)(a2 + v25);
  *(_OWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a2 + v25 + 32);
  return a1;
}

uint64_t sub_1001F3D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F3D60);
}

uint64_t sub_1001F3D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for FriendCard(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1001F3DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F3DF8);
}

uint64_t sub_1001F3DF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FriendCard(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  return result;
}

uint64_t type metadata accessor for FriendCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_100827028;
  if (!qword_100827028)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendCardView);
  return result;
}

uint64_t sub_1001F3EB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for FriendCard(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001F3F20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF728, 1);
}

uint64_t sub_1001F3F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v39 = a1;
  v37 = sub_100047110(&qword_10081EE68);
  v2 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100047110(&qword_100827060);
  v5 = __chkstk_darwin(v38);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_100047110(&qword_100827068);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100827070);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void **)(v1 + *(int *)(type metadata accessor for FriendCard(0) + 40));
  if (v17)
  {
    v18 = v17;
    sub_1001F4274(v18, (uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v16, v13);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v19 = sub_100007050(&qword_100827078);
    v20 = sub_100007050(&qword_100827080);
    v21 = sub_1001F4AAC();
    v40 = v20;
    v41 = v21;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v40 = v19;
    v41 = OpaqueTypeConformance2;
    v23 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    v24 = sub_1001F4C9C();
    _ConditionalContent<>.init(storage:)(v12, v13, v38, v23, v24);

    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    v26 = ProgressView<>.init<>()();
    v27 = static Alignment.center.getter(v26);
    v29 = sub_1003EB98C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v7, 0.0, 1, INFINITY, 0, v27, v28);
    (*(void (**)(char *, uint64_t, double))(v2 + 8))(v4, v37, v29);
    sub_1001F4A64((uint64_t)v7, (uint64_t)v9);
    sub_100021CC0((uint64_t)v9, (uint64_t)v12, &qword_100827060);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v30 = sub_100007050(&qword_100827078);
    v31 = sub_100007050(&qword_100827080);
    v32 = sub_1001F4AAC();
    v40 = v31;
    v41 = v32;
    v33 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v40 = v30;
    v41 = v33;
    v34 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    v35 = sub_1001F4C9C();
    _ConditionalContent<>.init(storage:)(v12, v13, v38, v34, v35);
    return sub_10001BE90((uint64_t)v9, &qword_100827060);
  }
}

uint64_t sub_1001F4274@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t OpaqueTypeConformance2;
  __n128 v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v3 = v2;
  v36 = a1;
  v43 = a2;
  v5 = type metadata accessor for FriendCardView(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v6;
  __chkstk_darwin(v5);
  v40 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for AccessibilityChildBehavior(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008270A8);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100827098);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100827080);
  __chkstk_darwin(v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100047110(&qword_100827078);
  v38 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F45D0(v3, a1, (uint64_t)v12);
  sub_100021CC0((uint64_t)v12, (uint64_t)v15, &qword_1008270A8);
  v15[*(int *)(v13 + 36)] = 0;
  v22 = sub_10001BE90((uint64_t)v12, &qword_1008270A8);
  v23 = static Alignment.center.getter(v22);
  sub_1003EB934(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, INFINITY, 0, v23, v24);
  v25 = sub_10001BE90((uint64_t)v15, &qword_100827098);
  static AccessibilityChildBehavior.combine.getter(v25);
  v26 = sub_1001F4AAC();
  View.accessibilityElement(children:)(v9, v16, v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v39);
  sub_10001BE90((uint64_t)v18, &qword_100827080);
  v27 = v40;
  sub_10004F8C8(v3, v40, type metadata accessor for FriendCardView);
  v28 = *(unsigned __int8 *)(v41 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = swift_allocObject(&unk_10078DD70, v29 + v42, v28 | 7);
  v31 = v36;
  *(_QWORD *)(v30 + 16) = v36;
  sub_100047C88(v27, v30 + v29, type metadata accessor for FriendCardView);
  v32 = v31;
  v44[0] = v16;
  v44[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v44, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.onTapGesture(count:perform:)(1, sub_1001F4E14, v30, v19, OpaqueTypeConformance2);
  v34 = swift_release(v30);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v38 + 8))(v21, v19, v34);
}

uint64_t sub_1001F45D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;

  v60 = a2;
  v5 = (int *)type metadata accessor for FriendCardRingsView(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v58 = (uint64_t)&v55 - v9;
  v59 = sub_100047110(&qword_1008270D8);
  __chkstk_darwin(v59);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FriendCompetitionView(0);
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v17 = (char *)&v55 - v16;
  v18 = (int *)type metadata accessor for FriendCard(0);
  v19 = *(void **)(a1 + v18[12]);
  if (!v19)
    goto LABEL_6;
  v20 = v19;
  if (!objc_msgSend(v20, "stage") || !*(_QWORD *)(a1 + v18[9]))
  {

LABEL_6:
    v36 = v18[11];
    v56 = v12;
    v57 = a3;
    v37 = *(void **)(a1 + v36);
    v38 = (uint64_t)v11;
    v39 = *(void **)(a1 + v18[13]);
    v40 = a1 + v18[5];
    v41 = *(_QWORD *)v40;
    v42 = *(_QWORD *)(v40 + 8);
    v43 = *(_BYTE *)(v40 + 16);
    *v8 = swift_getKeyPath(&unk_10062CA90);
    v44 = sub_100047110(&qword_1008325D0);
    swift_storeEnumTagMultiPayload(v8, v44, 0);
    v45 = v60;
    *(_QWORD *)((char *)v8 + v5[5]) = v60;
    *(_QWORD *)((char *)v8 + v5[6]) = v37;
    *(_QWORD *)((char *)v8 + v5[7]) = v39;
    v46 = (char *)v8 + v5[8];
    *(_QWORD *)v46 = v41;
    *((_QWORD *)v46 + 1) = v42;
    v46[16] = v43;
    v32 = type metadata accessor for FriendCardRingsView;
    v47 = (uint64_t)v8;
    v48 = v58;
    sub_100047C88(v47, v58, type metadata accessor for FriendCardRingsView);
    sub_10004F8C8(v48, v38, type metadata accessor for FriendCardRingsView);
    swift_storeEnumTagMultiPayload(v38, v59, 1);
    v49 = v37;
    v50 = v39;
    v51 = v45;
    sub_1000EB3F4(v41, v42, v43);
    v52 = sub_1000083D8(&qword_1008270C0, type metadata accessor for FriendCompetitionView, (uint64_t)&unk_10063EC90);
    v53 = sub_1000083D8(&qword_1008270C8, type metadata accessor for FriendCardRingsView, (uint64_t)&unk_10063FDE8);
    _ConditionalContent<>.init(storage:)(v38, v56, v5, v52, v53);
    v35 = v48;
    return sub_100011F54(v35, v32);
  }
  v21 = *(void **)(a1 + v18[9]);
  v22 = a1 + v18[5];
  v23 = *(_QWORD *)v22;
  v57 = *(_QWORD *)(v22 + 8);
  v58 = v23;
  v24 = v12;
  LODWORD(v56) = *(unsigned __int8 *)(v22 + 16);
  *v15 = swift_getKeyPath(&unk_10062CA90);
  v25 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(v15, v25, 0);
  *(_QWORD *)((char *)v15 + *(int *)(v12 + 20)) = v21;
  v26 = *(int *)(v12 + 24);
  v27 = v60;
  *(_QWORD *)((char *)v15 + v26) = v60;
  *(_QWORD *)((char *)v15 + *(int *)(v24 + 28)) = v20;
  v28 = (char *)v15 + *(int *)(v24 + 32);
  v29 = v57;
  *(_QWORD *)v28 = v23;
  *((_QWORD *)v28 + 1) = v29;
  LOBYTE(v23) = v56;
  v28[16] = v56;
  sub_100047C88((uint64_t)v15, (uint64_t)v17, type metadata accessor for FriendCompetitionView);
  sub_10004F8C8((uint64_t)v17, (uint64_t)v11, type metadata accessor for FriendCompetitionView);
  swift_storeEnumTagMultiPayload(v11, v59, 0);
  v30 = v21;
  v31 = v27;
  sub_1000EB3F4(v58, v29, v23);
  v32 = type metadata accessor for FriendCompetitionView;
  v33 = sub_1000083D8(&qword_1008270C0, type metadata accessor for FriendCompetitionView, (uint64_t)&unk_10063EC90);
  v34 = sub_1000083D8(&qword_1008270C8, type metadata accessor for FriendCardRingsView, (uint64_t)&unk_10063FDE8);
  _ConditionalContent<>.init(storage:)(v11, v24, v5, v33, v34);
  v35 = (uint64_t)v17;
  return sub_100011F54(v35, v32);
}

uint64_t sub_1001F49AC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD v8[4];
  _QWORD v9[3];
  uint64_t v10;

  v4 = type metadata accessor for FriendCardView(0);
  sub_100021CC0(a2 + *(int *)(v4 + 20), (uint64_t)v9, &qword_10081F600);
  if (!v10)
    return sub_10001BE90((uint64_t)v9, &qword_10081F600);
  v8[3] = &type metadata for FriendCardActionContext;
  v8[0] = a1;
  v5 = *sub_100016804(v9, v10);
  v6 = a1;
  sub_10040AE60(a2, (uint64_t)v8, v5);
  sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828420);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
}

uint64_t sub_1001F4A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100827060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F4AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827088;
  if (!qword_100827088)
  {
    v1 = sub_100007050(&qword_100827080);
    sub_1001F4B18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827088);
  }
  return result;
}

unint64_t sub_1001F4B18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827090;
  if (!qword_100827090)
  {
    v1 = sub_100007050(&qword_100827098);
    sub_1001F4B9C();
    sub_100028384(&qword_10081F650, &qword_10081F658, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827090);
  }
  return result;
}

unint64_t sub_1001F4B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008270A0;
  if (!qword_1008270A0)
  {
    v1 = sub_100007050(&qword_1008270A8);
    sub_1001F4C00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1008270A0);
  }
  return result;
}

unint64_t sub_1001F4C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008270B0;
  if (!qword_1008270B0)
  {
    v1 = sub_100007050(&qword_1008270B8);
    sub_1000083D8(&qword_1008270C0, type metadata accessor for FriendCompetitionView, (uint64_t)&unk_10063EC90);
    sub_1000083D8(&qword_1008270C8, type metadata accessor for FriendCardRingsView, (uint64_t)&unk_10063FDE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008270B0);
  }
  return result;
}

unint64_t sub_1001F4C9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008270D0;
  if (!qword_1008270D0)
  {
    v1 = sub_100007050(&qword_100827060);
    sub_100028384((unint64_t *)&qword_10081EE60, &qword_10081EE68, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008270D0);
  }
  return result;
}

uint64_t sub_1001F4D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;

  v1 = type metadata accessor for FriendCardView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  v7 = (int *)type metadata accessor for FriendCard(0);
  sub_1000EB41C(*(_QWORD *)(v0 + v4 + v7[5]), *(_QWORD *)(v0 + v4 + v7[5] + 8), *(_BYTE *)(v0 + v4 + v7[5] + 16));

  v8 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  if (v8[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v8);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001F4E14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FriendCardView(0) - 8) + 80);
  return sub_1001F49AC(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

unint64_t sub_1001F4E50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_1008270E0;
  if (!qword_1008270E0)
  {
    v1 = sub_100007050(&qword_1008270E8);
    v2 = sub_100007050(&qword_100827078);
    v4 = sub_100007050(&qword_100827080);
    v5 = sub_1001F4AAC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_1001F4C9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008270E0);
  }
  return result;
}

char *sub_1001F4F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSString v17;
  char *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  objc_super v40;

  swift_getObjectType(v3);
  v6 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_insetContentView;
  v7 = objc_allocWithZone((Class)UIView);
  v8 = v3;
  v9 = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v6] = v9;
  v10 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view;
  type metadata accessor for TrendListMetricView();
  *(_QWORD *)&v8[v10] = sub_1005AEF5C();
  v11 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_detailLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  *(_QWORD *)&v8[v11] = sub_1004C2368();
  v12 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_button;
  v13 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v8[v12] = v13;
  v14 = &v8[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_selectionFunction];
  *(_QWORD *)v14 = ASFriendListDisplayMode.id.getter;
  *((_QWORD *)v14 + 1) = 0;
  v8[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_arrowDirection] = 1;
  v15 = &v8[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_metric];
  v16 = type metadata accessor for TrendListMetric(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);

  if (a3)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v17 = 0;
  }
  v40.receiver = v8;
  v40.super_class = (Class)type metadata accessor for TrendingDownTableViewCell(0);
  v18 = (char *)objc_msgSendSuper2(&v40, "initWithStyle:reuseIdentifier:", a1, v17);

  v19 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_insetContentView;
  v20 = *(void **)&v18[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_insetContentView];
  v21 = v18;
  v22 = v20;
  v23 = sub_100032478();
  objc_msgSend(v22, "setBackgroundColor:", v23);

  v24 = objc_msgSend(*(id *)&v18[v19], "layer");
  objc_msgSend(v24, "setCornerRadius:", sub_10003249C());

  v25 = *(void **)&v18[v19];
  v26 = *(void **)&v21[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_button];
  objc_msgSend(v25, "addSubview:", v26);
  objc_msgSend(v26, "addTarget:action:forControlEvents:", v21, "selectionButtonTappedWithSender:", 64);
  v27 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view;
  objc_msgSend(v25, "addSubview:", *(_QWORD *)&v21[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view]);
  v28 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_detailLabel;
  objc_msgSend(v25, "addSubview:", *(_QWORD *)&v21[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_detailLabel]);
  v29 = objc_msgSend(v21, "contentView");
  objc_msgSend(v29, "addSubview:", v25);

  objc_msgSend(*(id *)&v21[v27], "setUserInteractionEnabled:", 0);
  v30 = *(void **)&v21[v28];
  objc_msgSend(v30, "setUserInteractionEnabled:", 0);
  sub_1001F53E8();
  v31 = (void *)objc_opt_self(UIFont);
  v32 = v30;
  v33 = objc_msgSend(v31, "_preferredFontForTextStyle:variant:", UIFontTextStyleCaption1, 256);
  objc_msgSend(v32, "setFont:", v33);

  v34 = *(void **)&v21[v28];
  v35 = (void *)objc_opt_self(UIColor);
  v36 = v34;
  v37 = objc_msgSend(v35, "secondaryLabelColor");
  objc_msgSend(v36, "setTextColor:", v37);

  v38 = *(id *)&v21[v28];
  objc_msgSend(v38, "setNumberOfLines:", 0);

  return v21;
}

void sub_1001F53E8()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;
  id v12;
  double v13;
  id v14;
  id v15;
  id v16;
  double v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  double v34;
  double v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  Class isa;
  uint64_t v79;

  v1 = v0;
  swift_getObjectType(v0);
  v2 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_insetContentView];
  v3 = objc_msgSend(v2, "topAnchor");
  v4 = objc_msgSend(v0, "contentView");
  v5 = objc_msgSend(v4, "topAnchor");

  v70 = objc_msgSend(v3, "constraintEqualToAnchor:constant:", v5, sub_100032C24());
  v6 = objc_msgSend(v2, "leadingAnchor");
  v7 = objc_msgSend(v0, "contentView");
  v8 = objc_msgSend(v7, "leadingAnchor");

  sub_100032C24();
  v68 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, v9);

  v10 = objc_msgSend(v2, "trailingAnchor");
  v11 = objc_msgSend(v0, "contentView");
  v12 = objc_msgSend(v11, "trailingAnchor");

  sub_100032C24();
  v66 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v12, -v13);

  v14 = objc_msgSend(v2, "bottomAnchor");
  v15 = objc_msgSend(v0, "contentView");
  v16 = objc_msgSend(v15, "bottomAnchor");

  sub_100032C24();
  v64 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v16, -v17);

  v18 = *(char **)&v0[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view];
  v19 = objc_msgSend(v18, "leadingAnchor");
  v20 = objc_msgSend(v2, "leadingAnchor");
  v62 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  v21 = objc_msgSend(v18, "trailingAnchor");
  v22 = objc_msgSend(v2, "trailingAnchor");
  v60 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  v23 = objc_msgSend(v18, "topAnchor");
  v24 = objc_msgSend(v2, "topAnchor");
  v58 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  v25 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_detailLabel];
  v26 = objc_msgSend(v25, "topAnchor");
  v27 = objc_msgSend(v18, "bottomAnchor");
  v57 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v27, -14.0);

  v28 = objc_msgSend(v25, "leadingAnchor");
  v29 = objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10FitnessApp19TrendListMetricView_titleLabel], "leadingAnchor");
  v76 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  v30 = objc_msgSend(v25, "trailingAnchor");
  v31 = objc_msgSend(v2, "trailingAnchor");
  v77 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v31, -16.0);

  v32 = objc_msgSend(v25, "bottomAnchor");
  v33 = objc_msgSend(v2, "bottomAnchor");
  v75 = objc_msgSend(v32, "constraintEqualToAnchor:constant:", v33, -14.0);

  LODWORD(v34) = 1148846080;
  objc_msgSend(v25, "setContentHuggingPriority:forAxis:", 1, v34);
  LODWORD(v35) = 1148846080;
  objc_msgSend(v25, "setContentCompressionResistancePriority:forAxis:", 1, v35);
  v36 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_button];
  v37 = objc_msgSend(v36, "leadingAnchor");
  v38 = objc_msgSend(v2, "leadingAnchor");
  v74 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

  v39 = objc_msgSend(v36, "trailingAnchor");
  v40 = objc_msgSend(v2, "trailingAnchor");
  v73 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  v41 = objc_msgSend(v36, "topAnchor");
  v42 = objc_msgSend(v2, "topAnchor");
  v72 = objc_msgSend(v41, "constraintEqualToAnchor:", v42);

  v43 = objc_msgSend(v36, "bottomAnchor");
  v44 = objc_msgSend(v2, "bottomAnchor");
  v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

  v56 = (id)objc_opt_self(NSLayoutConstraint);
  v46 = sub_100047110((uint64_t *)&unk_100828340);
  v47 = swift_allocObject(v46, 152, 7);
  *(_OWORD *)(v47 + 16) = xmmword_10062CAC0;
  *(_QWORD *)(v47 + 32) = v70;
  *(_QWORD *)(v47 + 40) = v68;
  *(_QWORD *)(v47 + 48) = v66;
  *(_QWORD *)(v47 + 56) = v64;
  *(_QWORD *)(v47 + 64) = v62;
  *(_QWORD *)(v47 + 72) = v60;
  *(_QWORD *)(v47 + 80) = v58;
  *(_QWORD *)(v47 + 88) = v57;
  *(_QWORD *)(v47 + 96) = v76;
  *(_QWORD *)(v47 + 104) = v77;
  *(_QWORD *)(v47 + 112) = v75;
  *(_QWORD *)(v47 + 120) = v74;
  *(_QWORD *)(v47 + 128) = v73;
  *(_QWORD *)(v47 + 136) = v72;
  *(_QWORD *)(v47 + 144) = v45;
  v79 = v47;
  specialized Array._endMutation()(v47);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  v71 = v70;
  v69 = v68;
  v67 = v66;
  v65 = v64;
  v63 = v62;
  v61 = v60;
  v59 = v58;
  v48 = v57;
  v49 = v76;
  v50 = v77;
  v51 = v75;
  v52 = v74;
  v53 = v73;
  v54 = v72;
  v55 = v45;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v56, "activateConstraints:", isa, swift_bridgeObjectRelease(v79).n128_f64[0]);

}

uint64_t sub_1001F5C5C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_insetContentView;
  v5 = objc_allocWithZone((Class)UIView);
  v6 = v2;
  v7 = objc_msgSend(v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v2[v4] = v7;
  v8 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view;
  type metadata accessor for TrendListMetricView();
  *(_QWORD *)&v6[v8] = sub_1005AEF5C();
  v9 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_detailLabel;
  sub_10001E724(0, &qword_1008261E0, UILabel_ptr);
  *(_QWORD *)&v6[v9] = sub_1004C2368();
  v10 = OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_button;
  v11 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  *(_QWORD *)&v6[v10] = v11;
  v12 = &v6[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_selectionFunction];
  *(_QWORD *)v12 = ASFriendListDisplayMode.id.getter;
  *((_QWORD *)v12 + 1) = 0;
  v6[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_arrowDirection] = 1;
  v13 = (uint64_t)&v6[OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_metric];
  v14 = type metadata accessor for TrendListMetric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);

  swift_release(*((_QWORD *)v12 + 1));
  sub_1001F6168(v13);

  v15 = type metadata accessor for TrendingDownTableViewCell(0);
  swift_deallocPartialClassInstance(v6, v15, *(unsigned int *)((swift_isaMask & *(_QWORD *)v6) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v6) + 0x34));
  return 0;
}

id sub_1001F5E68()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrendingDownTableViewCell(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001F5F18()
{
  return type metadata accessor for TrendingDownTableViewCell(0);
}

uint64_t type metadata accessor for TrendingDownTableViewCell(uint64_t a1)
{
  uint64_t result;

  result = qword_100827148;
  if (!qword_100827148)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrendingDownTableViewCell);
  return result;
}

void sub_1001F5F5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = &unk_10062CB00;
  sub_1001F5FF4(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_1001F5FF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100827158)
  {
    v2 = type metadata accessor for TrendListMetric(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100827158);
  }
}

id sub_1001F6048()
{
  _QWORD *v0;
  id result;

  result = (id)*(unsigned __int8 *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view)
                                  + OBJC_IVAR____TtC10FitnessApp19TrendListMetricView_arrowDirection);
  if ((_DWORD)result != 1)
    return sub_10047FF70(result);
  return result;
}

double sub_1001F6098()
{
  _QWORD *v0;
  char *v1;
  double v2;
  uint64_t v3;
  char *v4;
  double result;

  v1 = *(char **)(*v0 + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_view);
  v2 = dbl_10062CB30[v1[OBJC_IVAR____TtC10FitnessApp19TrendListMetricView_arrowDirection]];
  v3 = swift_allocObject(&unk_10078DDF0, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v4 = v1;
  sub_100151A58((uint64_t)sub_1001F6140, v3, v2);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_1001F611C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001F6140()
{
  uint64_t v0;

  sub_1004ABD58(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001F6148()
{
  return 0x676E69646E657254;
}

uint64_t sub_1001F6168(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10082EDD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F61A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(char *, __n128);
  __n128 v12;
  _BYTE v14[24];

  v1 = sub_100047110(&qword_10082EDD0);
  __chkstk_darwin(v1);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for TrendListMetric(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_metric;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_metric, v14, 0, 0);
  sub_1001F62D8(v8, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return sub_1001F6168((uint64_t)v3);
  sub_1001F6320((uint64_t)v3, (uint64_t)v7);
  v11 = *(void (**)(char *, __n128))(v0
                                              + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_selectionFunction);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp25TrendingDownTableViewCell_selectionFunction + 8);
  v12 = swift_retain(v10);
  v11(v7, v12);
  swift_release(v10);
  return sub_1001F6364((uint64_t)v7);
}

uint64_t sub_1001F62D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10082EDD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F6320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrendListMetric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F6364(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrendListMetric(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1001F63A0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1001F7DC0(v1, (uint64_t)&v14);
  v3 = v14;
  sub_1001F7DC0(v1, (uint64_t)&v15);
  if (v23 < 0)
  {
    v23 &= ~0x80u;
    v12 = v3;
    NSObject.hash(into:)(a1);
    sub_1001F81CC(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6928);
  }
  else
  {
    v4 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v9 = v19;
    v8 = v20;
    v11 = v21;
    v10 = v22;
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(a1, v4, v5);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v6, v7);
    swift_bridgeObjectRelease(v7);
    if (v8)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(a1, v9, v8);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  }
  return result;
}

Swift::Int sub_1001F64E8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v12[9];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  sub_1001F7DC0(v0, (uint64_t)&v13);
  v1 = v13;
  Hasher.init(_seed:)(v12, 0);
  sub_1001F7DC0(v0, (uint64_t)&v14);
  if (v22 < 0)
  {
    v22 &= ~0x80u;
    v10 = v1;
    NSObject.hash(into:)(v12);
    sub_1001F81CC(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6928);
  }
  else
  {
    v2 = v14;
    v3 = v15;
    v4 = v16;
    v5 = v17;
    v7 = v18;
    v6 = v19;
    v9 = v20;
    v8 = v21;
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v12, v2, v3);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(v12, v4, v5);
    swift_bridgeObjectRelease(v5);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v12, v7, v6);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v12, v9, v8);
    swift_bridgeObjectRelease(v8);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001F663C()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_1001F7DC0(v0, (uint64_t)v2);
  return sub_1001F64E8();
}

double sub_1001F6670(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[72];

  sub_1001F7DC0(v1, (uint64_t)v4);
  return sub_1001F63A0(a1);
}

Swift::Int sub_1001F66AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  _QWORD v13[9];

  v3 = *(void **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v10 = *(char *)(v1 + 64);
  Hasher.init(_seed:)(v13, a1);
  if (v10 < 0)
  {
    v11 = v3;
    NSObject.hash(into:)(v13);
    sub_1001F6928(v3, v2, v5, v4, v7, v6, v9, v8, v10);
  }
  else
  {
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v13, v3, v2);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v13, v5, v4);
    swift_bridgeObjectRelease(v4);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v13, v7, v6);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v13, v9, v8);
    swift_bridgeObjectRelease(v8);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001F67EC(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];
  _BYTE v5[72];

  sub_1001F7DC0(a1, (uint64_t)v4);
  sub_1001F7DC0(a2, (uint64_t)v5);
  return sub_1001F7FC8((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_1001F6834()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for WorkoutDetailMapAndWeatherView.ViewModel()
{
  return objc_opt_self(_TtCV10FitnessApp30WorkoutDetailMapAndWeatherView9ViewModel);
}

ValueMetadata *type metadata accessor for WorkoutDetailMapAndWeatherView()
{
  return &type metadata for WorkoutDetailMapAndWeatherView;
}

id sub_1001F6890(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 < 0)
    return a1;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a8);
  swift_bridgeObjectRetain(a2);
  return (id)swift_bridgeObjectRetain(a4);
}

void destroy for WeatherItem(uint64_t a1)
{
  sub_1001F6928(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

void sub_1001F6928(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 < 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a6);
  }
}

uint64_t initializeWithCopy for WeatherItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1001F6890(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for WeatherItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1001F6890(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_1001F6928(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for WorkoutDetailWeatherElementView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for WeatherItem(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_1001F6928(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for WeatherItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 64) & 0x7E | (*(unsigned __int8 *)(a1 + 64) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for WeatherItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 64) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_1001F6C1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64) >> 7;
}

uint64_t sub_1001F6C28(uint64_t result)
{
  *(_BYTE *)(result + 64) &= ~0x80u;
  return result;
}

uint64_t sub_1001F6C38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = *(_BYTE *)(result + 64) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for WeatherItem()
{
  return &type metadata for WeatherItem;
}

uint64_t sub_1001F6C5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AF86C, 1);
}

uint64_t sub_1001F6C6C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for WorkoutDetailMapAndWeatherView.ViewModel();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_1001F6CA4()
{
  qword_100827160 = sub_10005F11C();
}

void sub_1001F6CC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, __n128);
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];

  v89 = a3;
  v91 = sub_100047110(&qword_100827230);
  v88 = *(_QWORD *)(v91 - 8);
  v5 = __chkstk_darwin(v91);
  v90 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v87 = (char *)&v83 - v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
    v10 = ((unint64_t)(v9 - 1) >> 1) + 1;
  else
    v10 = 0;
  v97[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v8);
  sub_1001218B8(0, v10, 0);
  v11 = v97[0];
  if (v9)
  {
    v85 = a1;
    v86 = a2;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v92 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v93 = v9;
    a2 = 2;
    a1 = 32;
    v96 = v8;
    while (1)
    {
      v15 = v9 >= a2 ? a2 : v9;
      if (v92 == v14)
        break;
      v16 = v11;
      if (v9 >= (uint64_t)(v14 + 2))
        v11 = v14 + 2;
      else
        v11 = v9;
      if (v11 < v14)
        goto LABEL_74;
      v17 = *(_QWORD *)(v8 + 16);
      if (v17 < v14 || v17 < v11)
        goto LABEL_75;
      v94 = a1;
      v95 = v13;
      v18 = type metadata accessor for __ContiguousArrayStorageBase(0);
      swift_bridgeObjectRetain(v8);
      v20 = swift_unknownObjectRetain_n(v19, 2);
      v21 = (_QWORD *)swift_dynamicCastClass(v20, v18);
      if (!v21)
      {
        swift_bridgeObjectRelease(v8);
        v21 = _swiftEmptyArrayStorage;
      }
      v22 = v21[2];
      swift_release(v21);
      if (v15 + v12 == v22)
      {
        v23 = v96;
        v24 = (_QWORD *)swift_dynamicCastClass(v96, v18);
        v11 = v16;
        v25 = v94;
        if (!v24)
        {
          swift_bridgeObjectRelease(v23);
          v24 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        v84 = v15 + v12;
        v23 = v96;
        swift_bridgeObjectRelease(v96);
        v24 = _swiftEmptyArrayStorage;
        v29 = v14 == v11;
        v11 = v16;
        v25 = v94;
        if (!v29)
        {
          v30 = v84;
          if (v84 < 1)
          {
            if (v84 < 0)
            {
LABEL_79:
              _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_81:
              __break(1u);
              return;
            }
          }
          else
          {
            v31 = sub_100047110(&qword_1008220F8);
            v24 = (_QWORD *)swift_allocObject(v31, 72 * v84 + 32, 7);
            v32 = j__malloc_size(v24);
            v30 = v84;
            v24[2] = v84;
            v24[3] = 2 * ((uint64_t)(v32 - 32) / 72);
          }
          v33 = (unint64_t)(v24 + 4);
          if (v23 + v95 + 32 < (unint64_t)&v24[9 * v30 + 4] && v33 < v23 + v95 + v25 + 72 * v15)
          {
LABEL_80:
            _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            goto LABEL_81;
          }
          swift_arrayInitWithCopy(v33);
        }
      }
      swift_bridgeObjectRelease(v23);
      v97[0] = v11;
      v27 = *(_QWORD *)(v11 + 16);
      v26 = *(_QWORD *)(v11 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_1001218B8(v26 > 1, v27 + 1, 1);
        v11 = v97[0];
      }
      *(_QWORD *)(v11 + 16) = v27 + 1;
      v28 = v11 + 8 * v27;
      v8 = v96;
      v13 = v95 + 144;
      *(_QWORD *)(v28 + 32) = v24;
      a2 += 2;
      v12 -= 2;
      a1 = v25 - 144;
      v14 += 2;
      --v10;
      v9 = v93;
      if (!v10)
      {
        if (v14 >= v93)
        {
LABEL_61:
          v14 = v11;
          swift_bridgeObjectRelease(v8);
          a1 = v85;
          a2 = v86;
          goto LABEL_63;
        }
        v34 = v8 + v13 + 32;
        v35 = v14 + 2;
        a2 = -(uint64_t)v14;
        while (1)
        {
          v36 = v11;
          v11 = v9 >= v35 ? v35 : v9;
          a1 = v14 + 2;
          v37 = v9 >= (uint64_t)(v14 + 2) ? v14 + 2 : v9;
          if (v37 < (uint64_t)v14)
            goto LABEL_76;
          v38 = *(_QWORD *)(v8 + 16);
          if (v38 < v14 || v38 < v37)
            goto LABEL_77;
          v40 = type metadata accessor for __ContiguousArrayStorageBase(0);
          swift_bridgeObjectRetain(v8);
          v42 = swift_unknownObjectRetain_n(v41, 2);
          v43 = (_QWORD *)swift_dynamicCastClass(v42, v40);
          if (!v43)
          {
            swift_bridgeObjectRelease(v8);
            v43 = _swiftEmptyArrayStorage;
          }
          v44 = v11 + a2;
          v45 = v43[2];
          swift_release(v43);
          if (v44 == v45)
          {
            v8 = v96;
            v46 = (_QWORD *)swift_dynamicCastClass(v96, v40);
            if (!v46)
            {
              swift_bridgeObjectRelease(v8);
              v46 = _swiftEmptyArrayStorage;
            }
          }
          else
          {
            v8 = v96;
            swift_bridgeObjectRelease(v96);
            v46 = _swiftEmptyArrayStorage;
            if (v14 != v37)
            {
              if (v44 < 1)
              {
                if (v44 < 0)
                  goto LABEL_79;
              }
              else
              {
                v49 = sub_100047110(&qword_1008220F8);
                v46 = (_QWORD *)swift_allocObject(v49, 72 * v44 + 32, 7);
                v50 = j__malloc_size(v46);
                v46[2] = v44;
                v46[3] = 2 * ((uint64_t)(v50 - 32) / 72);
              }
              v51 = (unint64_t)(v46 + 4);
              if (v34 < (unint64_t)&v46[9 * v44 + 4] && v51 < v34 + 72 * v44)
                goto LABEL_80;
              swift_arrayInitWithCopy(v51);
            }
          }
          swift_bridgeObjectRelease(v8);
          v11 = v36;
          v97[0] = v36;
          v48 = *(_QWORD *)(v36 + 16);
          v47 = *(_QWORD *)(v36 + 24);
          if (v48 >= v47 >> 1)
          {
            sub_1001218B8(v47 > 1, v48 + 1, 1);
            v11 = v97[0];
          }
          v35 += 2;
          *(_QWORD *)(v11 + 16) = v48 + 1;
          *(_QWORD *)(v11 + 8 * v48 + 32) = v46;
          a2 -= 2;
          v34 += 144;
          v14 = a1;
          v9 = v93;
          if (a1 >= v93)
            goto LABEL_61;
        }
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v14 = v97[0];
  swift_bridgeObjectRelease(v8);
LABEL_63:
  v52 = *(_QWORD *)(a2 + 16);
  KeyPath = swift_getKeyPath(&unk_10062CCA0);
  v54 = swift_getKeyPath(&unk_10062CCC8);
  swift_retain(v52);
  static Published.subscript.getter(v97, v55, KeyPath, v54);
  swift_release(KeyPath);
  swift_release(v54);
  v56 = v97[0];
  swift_release(v97[0]);
  if (v56)
  {
    swift_release(v52);
    goto LABEL_66;
  }
  v57 = swift_getKeyPath(&unk_10062CCE8);
  v58 = swift_getKeyPath(&unk_10062CD10);
  static Published.subscript.getter(v97, v52, v57, v58);
  swift_release(v52);
  swift_release(v57);
  swift_release(v58);
  if (LOBYTE(v97[0]) == 1)
  {
LABEL_66:
    v59 = type metadata accessor for WorkoutDetailMapView.ViewModel(0);
    v60 = sub_1001F8260();
    swift_retain(v52);
    v62 = ObservedObject.init(wrappedValue:)(v61, v59, v60);
    v96 = v62;
    v11 = v63;
    if (qword_10081D780 == -1)
    {
LABEL_67:
      v64 = qword_100827160;
      if (*(_QWORD *)(v14 + 16))
        v65 = 0;
      else
        v65 = qword_100827160;
      v66 = static Edge.Set.all.getter(v62);
      goto LABEL_71;
    }
LABEL_78:
    v62 = swift_once(&qword_10081D780, sub_1001F6CA4);
    goto LABEL_67;
  }
  v96 = 0;
  v11 = 0;
  v66 = 0;
  v64 = 0;
  v65 = 0;
LABEL_71:
  v67 = *(_QWORD *)(v14 + 16);
  v97[0] = 0;
  v97[1] = v67;
  v68 = swift_getKeyPath(&unk_10062CD38);
  v69 = (_QWORD *)swift_allocObject(&unk_10078DF30, 40, 7);
  v69[2] = v14;
  v69[3] = a1;
  v69[4] = a2;
  swift_retain(a2);
  v70 = sub_100047110(&qword_100821138);
  v71 = sub_100047110(&qword_100827238);
  v72 = sub_10011DC2C();
  v73 = sub_100028384(&qword_100827240, &qword_100827238, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v74 = v87;
  ForEach<>.init(_:id:content:)(v97, v68, sub_1001F8254, v69, v70, v71, v72, &protocol witness table for Int, v73);
  v75 = v88;
  v76 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  v78 = v90;
  v77 = v91;
  v76(v90, v74, v91);
  v79 = v89;
  *v89 = v96;
  v79[1] = v11;
  v79[2] = v66;
  v79[3] = v64;
  v79[4] = 0;
  v79[5] = v65;
  v79[6] = 0;
  *((_BYTE *)v79 + 56) = 0;
  v80 = sub_100047110(&qword_100827248);
  v76((char *)v79 + *(int *)(v80 + 48), v78, v77);
  v81 = *(void (**)(char *, uint64_t, __n128))(v75 + 8);
  v82 = swift_retain(v11);
  v81(v74, v77, v82);
  ((void (*)(char *, uint64_t))v81)(v78, v77);
  swift_release(v11);
}

uint64_t sub_1001F751C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = a3;
  v9 = sub_100047110(&qword_100827258);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100827260);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v46 - v16;
  v18 = sub_100047110(&qword_100827268);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v46 - v23;
  v25 = *a1;
  if (v25 < 1)
  {
    v27 = type metadata accessor for Divider(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v24, 1, 1, v27);
    if (v25 < 0)
    {
      __break(1u);
      goto LABEL_8;
    }
  }
  else
  {
    Divider.init()(v22);
    v26 = type metadata accessor for Divider(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 0, 1, v26);
  }
  if ((unint64_t)v25 >= *(_QWORD *)(a2 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v46 = v12;
  v47 = v21;
  v48 = v17;
  v49 = a5;
  v28 = *(_QWORD *)(a2 + 8 * v25 + 32);
  swift_bridgeObjectRetain(v28);
  *(_QWORD *)v11 = static VerticalAlignment.bottom.getter(v29);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  sub_100047110(&qword_100827270);
  v51 = v28;
  KeyPath = swift_getKeyPath(&unk_10062CD50);
  v31 = swift_allocObject(&unk_10078DF58, 32, 7);
  *(_QWORD *)(v31 + 16) = v50;
  *(_QWORD *)(v31 + 24) = a4;
  swift_retain(a4);
  v32 = sub_100047110(&qword_100821508);
  v33 = sub_100047110(&qword_100827278);
  v34 = sub_100028384(&qword_100827280, &qword_100821508, (uint64_t)&protocol conformance descriptor for [A]);
  v35 = sub_1001F82D4();
  v36 = sub_1001F8318();
  v37 = ForEach<>.init(_:id:content:)(&v51, KeyPath, sub_1001F82CC, v31, v32, v33, v34, v35, v36);
  if (qword_10081D780 != -1)
LABEL_9:
    v37 = swift_once(&qword_10081D780, sub_1001F6CA4);
  v38 = qword_100827160;
  v39 = static Edge.Set.all.getter(v37);
  sub_100021CC0((uint64_t)v11, (uint64_t)v15, &qword_100827258);
  v40 = &v15[*(int *)(v46 + 36)];
  *v40 = v39;
  *((_QWORD *)v40 + 1) = v38;
  *((_QWORD *)v40 + 2) = 0;
  *((_QWORD *)v40 + 3) = v38;
  *((_QWORD *)v40 + 4) = 0;
  v40[40] = 0;
  sub_10001BE90((uint64_t)v11, &qword_100827258);
  v41 = (uint64_t)v48;
  sub_100045AD4((uint64_t)v15, (uint64_t)v48, &qword_100827260);
  v42 = (uint64_t)v47;
  sub_100021CC0((uint64_t)v24, (uint64_t)v47, &qword_100827268);
  sub_100021CC0(v41, (uint64_t)v15, &qword_100827260);
  v43 = v49;
  sub_100021CC0(v42, v49, &qword_100827268);
  v44 = sub_100047110(&qword_1008272D8);
  sub_100021CC0((uint64_t)v15, v43 + *(int *)(v44 + 48), &qword_100827260);
  sub_10001BE90(v41, &qword_100827260);
  sub_10001BE90((uint64_t)v24, &qword_100827268);
  sub_10001BE90((uint64_t)v15, &qword_100827260);
  return sub_10001BE90(v42, &qword_100827268);
}

double sub_1001F78E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double result;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  _OWORD v49[13];
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[14];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;

  v8 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v15 = *(char *)(a1 + 64);
  v48 = *(_BYTE *)(a1 + 64);
  if (v15 < 0)
  {
    v47 = *(void **)a1;
    v24 = v8;
    v29 = v7;
    v46 = v7;
    v30 = static HorizontalAlignment.center.getter(v24, v25, v26, v27, v28);
    v31 = v24;
    v32 = ((uint64_t (*)(void))static Alignment.leading.getter)();
    sub_1003EBB98(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v51, 0.0, 1, 0.0, 1, v32, v33, v30, 0, 0, v31);
    v45 = v10;
    sub_1001F6928(v47, v29, v10, v9, v11, v12, v14, v13, v48);
    v60[6] = v57;
    v60[7] = v58;
    v60[8] = v59;
    v60[2] = v53;
    v60[3] = v54;
    v60[4] = v55;
    v60[5] = v56;
    v60[0] = v51;
    v60[1] = v52;
    sub_1001F848C((uint64_t)v60);
    sub_100045AD4((uint64_t)v60, (uint64_t)&v61, &qword_1008272E0);
    sub_1001F8498((uint64_t)&v51);
    sub_1001F8498((uint64_t)&v51);
    v34 = sub_100047110(&qword_1008272A0);
    v35 = sub_100047110(&qword_1008272C0);
    v36 = sub_1001F8384();
    v37 = sub_1001F8408();
    _ConditionalContent<>.init(storage:)(&v61, v34, v35, v36, v37);
    sub_1001F6928(v47, v46, v45, v9, v11, v12, v14, v13, v48);
    sub_1001F84C0((uint64_t)&v51);
    sub_1001F84C0((uint64_t)&v51);
    v71 = v49[10];
    v72 = v49[11];
    v73 = v49[12];
    v74 = v50;
    v67 = v49[6];
    v68 = v49[7];
    v69 = v49[8];
    v70 = v49[9];
    v63 = v49[2];
    v64 = v49[3];
    v65 = v49[4];
    v66 = v49[5];
    v61 = v49[0];
    v62 = v49[1];
  }
  else
  {
    v16 = v15 & 1;
    v51 = (unint64_t)static HorizontalAlignment.center.getter(a1, a2, a3, a4, a5);
    LOBYTE(v52) = 0;
    *((_QWORD *)&v52 + 1) = v8;
    *(_QWORD *)&v53 = v7;
    *((_QWORD *)&v53 + 1) = v10;
    *(_QWORD *)&v54 = v9;
    *((_QWORD *)&v54 + 1) = v11;
    *(_QWORD *)&v55 = v12;
    *((_QWORD *)&v55 + 1) = v14;
    *(_QWORD *)&v56 = v13;
    BYTE8(v56) = v16;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v7);
    v17 = swift_bridgeObjectRetain(v9);
    v18 = static Alignment.leading.getter(v17);
    sub_1003EB9E4(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 1, v60, 0.0, 1, 0.0, 1, v18, v19);
    sub_1001F6928(v8, v7, v10, v9, v11, v12, v14, v13, v48);
    sub_1001F84E8((uint64_t)v60);
    sub_100045AD4((uint64_t)v60, (uint64_t)v49, &qword_1008272E0);
    v20 = sub_100047110(&qword_1008272A0);
    v21 = sub_100047110(&qword_1008272C0);
    v22 = sub_1001F8384();
    v23 = sub_1001F8408();
    _ConditionalContent<>.init(storage:)(v49, v20, v21, v22, v23);
  }
  v38 = v72;
  *(_OWORD *)(a6 + 160) = v71;
  *(_OWORD *)(a6 + 176) = v38;
  *(_OWORD *)(a6 + 192) = v73;
  *(_BYTE *)(a6 + 208) = v74;
  v39 = v68;
  *(_OWORD *)(a6 + 96) = v67;
  *(_OWORD *)(a6 + 112) = v39;
  v40 = v70;
  *(_OWORD *)(a6 + 128) = v69;
  *(_OWORD *)(a6 + 144) = v40;
  v41 = v64;
  *(_OWORD *)(a6 + 32) = v63;
  *(_OWORD *)(a6 + 48) = v41;
  v42 = v66;
  *(_OWORD *)(a6 + 64) = v65;
  *(_OWORD *)(a6 + 80) = v42;
  result = *(double *)&v61;
  v44 = v62;
  *(_OWORD *)a6 = v61;
  *(_OWORD *)(a6 + 16) = v44;
  return result;
}

uint64_t sub_1001F7C60@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v3 = sub_100047110(&qword_100827218);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v4, v9, v10, v11, v12);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v13 = sub_100047110(&qword_100827220);
  sub_1001F6CC0(v8, v7, (uint64_t *)&v6[*(int *)(v13 + 44)]);
  if (qword_10081D780 != -1)
    v14 = swift_once(&qword_10081D780, sub_1001F6CA4);
  v15 = qword_100827160;
  v16 = static Edge.Set.all.getter(v14);
  sub_100021CC0((uint64_t)v6, a1, &qword_100827218);
  v17 = a1 + *(int *)(sub_100047110(&qword_100827228) + 36);
  *(_BYTE *)v17 = v16;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = v15;
  *(_BYTE *)(v17 + 40) = 0;
  return sub_10001BE90((uint64_t)v6, &qword_100827218);
}

unint64_t sub_1001F7D7C()
{
  unint64_t result;

  result = qword_100827210;
  if (!qword_100827210)
  {
    result = swift_getWitnessTable(&unk_10062CC34, &type metadata for WeatherItem);
    atomic_store(result, (unint64_t *)&qword_100827210);
  }
  return result;
}

uint64_t sub_1001F7DC0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t sub_1001F7DE8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062CCE8);
  v5 = swift_getKeyPath(&unk_10062CD10);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001F7E64(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062CCE8);
  v5 = swift_getKeyPath(&unk_10062CD10);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001F7ED4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062CCA0);
  v5 = swift_getKeyPath(&unk_10062CCC8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001F7F50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062CCA0);
  v5 = swift_getKeyPath(&unk_10062CCC8);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001F7FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD v33[8];
  char v34;

  sub_1001F7DC0(a1, (uint64_t)v33);
  if (v34 < 0)
  {
    v34 &= ~0x80u;
    v17 = v33[0];
    sub_1001F7DC0(a2, (uint64_t)&v24);
    if (v32 < 0)
    {
      v32 &= ~0x80u;
      v18 = v24;
      sub_100139CE8();
      sub_1001F81CC(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6890);
      sub_1001F81CC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6890);
      v16 = static NSObject.== infix(_:_:)(v17, v18);
      sub_1001F81CC(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6928);
      sub_1001F81CC(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1001F6928);
      return v16 & 1;
    }
    goto LABEL_16;
  }
  v5 = v33[0];
  v4 = v33[1];
  v6 = v33[2];
  v7 = v33[3];
  v9 = v33[4];
  v8 = v33[5];
  v10 = v33[6];
  v11 = v33[7];
  sub_1001F7DC0(a2, (uint64_t)&v24);
  if (v32 < 0)
  {
LABEL_16:
    v16 = 0;
    return v16 & 1;
  }
  v22 = v11;
  v13 = v26;
  v12 = v27;
  v14 = v29;
  v23 = v28;
  v20 = v31;
  v21 = v30;
  if (v5 == v24 && v4 == v25
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v24, v25, 0), v16 = 0, (v15 & 1) != 0))
  {
    if (v6 == v13 && v7 == v12
      || (v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v13, v12, 0) & 1) != 0))
    {
      if (v8)
      {
        if (v14)
        {
          if (v9 != v23 || v8 != v14)
          {
            v16 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, v23, v14, 0) & 1) == 0)
              return v16 & 1;
          }
LABEL_19:
          if (v10 == v21 && v22 == v20)
            v16 = 1;
          else
            v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v22, v21, v20, 0);
          return v16 & 1;
        }
      }
      else if (!v14)
      {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
  }
  return v16 & 1;
}

uint64_t sub_1001F81CC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_1001F8228()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001F8254@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1001F751C(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t sub_1001F8260()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827250;
  if (!qword_100827250)
  {
    v1 = type metadata accessor for WorkoutDetailMapView.ViewModel(255);
    result = swift_getWitnessTable(&unk_10063C6A8, v1);
    atomic_store(result, (unint64_t *)&qword_100827250);
  }
  return result;
}

uint64_t sub_1001F82A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_1001F82CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1001F78E4(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a2, a3, a4);
}

unint64_t sub_1001F82D4()
{
  unint64_t result;

  result = qword_100827288;
  if (!qword_100827288)
  {
    result = swift_getWitnessTable(&unk_10062CC5C, &type metadata for WeatherItem);
    atomic_store(result, (unint64_t *)&qword_100827288);
  }
  return result;
}

unint64_t sub_1001F8318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827290;
  if (!qword_100827290)
  {
    v1 = sub_100007050(&qword_100827278);
    sub_1001F8384();
    sub_1001F8408();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827290);
  }
  return result;
}

unint64_t sub_1001F8384()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827298;
  if (!qword_100827298)
  {
    v1 = sub_100007050(&qword_1008272A0);
    sub_100028384(&qword_1008272A8, &qword_1008272B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827298);
  }
  return result;
}

unint64_t sub_1001F8408()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008272B8;
  if (!qword_1008272B8)
  {
    v1 = sub_100007050(&qword_1008272C0);
    sub_100028384(&qword_1008272C8, &qword_1008272D0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008272B8);
  }
  return result;
}

uint64_t sub_1001F848C(uint64_t result)
{
  *(_BYTE *)(result + 208) = 1;
  return result;
}

uint64_t sub_1001F8498(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 24);
  return a1;
}

uint64_t sub_1001F84C0(uint64_t a1)
{

  return a1;
}

uint64_t sub_1001F84E8(uint64_t result)
{
  *(_BYTE *)(result + 208) = 0;
  return result;
}

unint64_t sub_1001F84F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008272E8;
  if (!qword_1008272E8)
  {
    v1 = sub_100007050(&qword_100827228);
    sub_100028384((unint64_t *)&unk_1008272F0, &qword_100827218, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008272E8);
  }
  return result;
}

uint64_t sub_1001F8578()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

void sub_1001F85AC(void *a1)
{
  bzero(a1, 0x728uLL);
}

uint64_t sub_1001F85B4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1001F85CC(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *sub_1001F85F0(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100047314(0, v2, 0);
    v5 = (uint64_t *)(a1 + 32);
    v6 = *(void **)(a2 + 24);
    do
    {
      v8 = *v5++;
      v7 = v8;
      v9 = objc_msgSend(v6, "activitySummaryForCacheIndex:", v8);
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_100047314(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001F86E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v20;
  char v21;
  _QWORD *v22;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_1000419C0(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v9 = *(_QWORD *)(type metadata accessor for DateComponents(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      sub_1000412FC(v10, a2, a3, (double *)&v20);
      if (v4)
        break;
      v4 = 0;
      v12 = v20;
      v13 = v21;
      v22 = v6;
      v15 = v6[2];
      v14 = v6[3];
      if (v15 >= v14 >> 1)
      {
        v18 = v20;
        sub_1000419C0(v14 > 1, v15 + 1, 1);
        v12 = v18;
        v6 = v22;
      }
      v6[2] = v15 + 1;
      v16 = &v6[3 * v15];
      *((_OWORD *)v16 + 2) = v12;
      *((_BYTE *)v16 + 48) = v13;
      v10 += v11;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

uint64_t sub_1001F8820(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  char v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v28 = sub_100047110(&qword_100821658);
  v7 = *(_QWORD *)(v28 - 8);
  result = __chkstk_darwin(v28);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v30 = _swiftEmptyArrayStorage;
  result = sub_1000471B8(0, v12 & ~(v12 >> 63), 0);
  if (a2 >= v29 && (v12 & 0x8000000000000000) == 0)
  {
    v15 = *a3;
    v14 = a3[1];
    v25[1] = v3;
    v26 = v14 + 32;
    v13 = v30;
    v16 = *(_QWORD *)(v14 + 16);
    v17 = v29;
    if (v16 <= v29)
      v16 = v29;
    v27 = v16;
    v18 = v15;
    v19 = (_BYTE *)(v15 + 24 * v29 + 48);
    while (a2 != v17)
    {
      if (v29 < 0)
        goto LABEL_19;
      if (v27 == v17)
        goto LABEL_20;
      Date.init(timeIntervalSinceReferenceDate:)(result, *(double *)(v26 + 8 * v17));
      if (v17 >= *(_QWORD *)(v18 + 16))
      {
        v20 = 0uLL;
        v21 = 1;
      }
      else
      {
        v20 = *((_OWORD *)v19 - 1);
        v21 = *v19;
      }
      v22 = &v10[*(int *)(v28 + 48)];
      *(_OWORD *)v22 = v20;
      v22[16] = v21;
      v30 = v13;
      v24 = v13[2];
      v23 = v13[3];
      if (v24 >= v23 >> 1)
      {
        sub_1000471B8(v23 > 1, v24 + 1, 1);
        v13 = v30;
      }
      v13[2] = v24 + 1;
      result = sub_100045AD4((uint64_t)v10, (uint64_t)v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v24, &qword_100821658);
      ++v17;
      v19 += 24;
      if (a2 == v17)
        return (uint64_t)v13;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1001F8A14()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F8A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10032BFF0(a1, a2, v2);
}

uint64_t sub_1001F8A40()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[4];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
    swift_bridgeObjectRelease(v0[11]);
    swift_bridgeObjectRelease(v0[12]);
    swift_bridgeObjectRelease(v0[18]);
    swift_bridgeObjectRelease(v0[19]);
  }
  return swift_deallocObject(v0, 209, 7);
}

uint64_t sub_1001F8A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = v6 + v5;
  v8 = (v6 + v5 + 23) & 0xFFFFFFFFFFFFFFF8;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v6, v1);
  v10 = (_QWORD *)(v0 + v8);
  v11 = *(_QWORD *)(v0 + v8 + 16);
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[9]);
    swift_bridgeObjectRelease(v10[10]);
    swift_bridgeObjectRelease(v10[16]);
    swift_bridgeObjectRelease(v10[17]);
  }
  v12 = (v7 + 239) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12 + 8));
  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v13 + 9, v3 | 7);
}

uint64_t sub_1001F8BA4(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10001E724(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F8BE4()
{
  unint64_t result;

  result = qword_100827478;
  if (!qword_100827478)
  {
    result = swift_getWitnessTable(&unk_10062CE68, &type metadata for ActivityStatisticsBuilder.BuilderError);
    atomic_store(result, (unint64_t *)&qword_100827478);
  }
  return result;
}

uint64_t sub_1001F8C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1001F8CD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1001F8CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;
  id v15;
  double v16;

  specialized ContiguousArray.reserveCapacity(_:)(0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v10 = *(void **)(a1 + 32 + 8 * v6);
      if (!v10
        || (v11 = *(_QWORD *)(a2 + 16), v6 >= *(_QWORD *)(v11 + 16))
        || (v12 = v11 + v5, (*(_BYTE *)(v12 + 48) & 1) != 0))
      {
        v7 = 0;
      }
      else
      {
        v13 = *(double *)(v12 + 32);
        v14 = v10;
        v15 = objc_msgSend(v14, "_unit");
        objc_msgSend(v14, "doubleValueForUnit:", v15);
        v7 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v15, v16 / v13);

      }
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      v5 += 24;
    }
    while (v4 != v6);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_1001F8E74(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "activeEnergyBurned");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "kilocalorieUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001F98F0(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "activeEnergyBurnedGoal");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "kilocalorieUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FA36C(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "appleExerciseTime");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "minuteUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FADE8(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "appleExerciseTimeGoal");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "minuteUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FB864(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "appleStandHours");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FC2E0(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "appleStandHoursGoal");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FCD5C(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "distanceWalkingRunning");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

void sub_1001FD7D8(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(char *, uint64_t);
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  double v42;
  double v43;
  BOOL v44;
  double *v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  _BOOL4 v74;
  double v75;
  unint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  _BOOL4 v91;
  double v92;
  double *v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  char v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  uint64_t v130;
  unsigned int v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  id v140;
  _QWORD v141[7];
  _QWORD v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;

  v120 = a2;
  v137 = type metadata accessor for Calendar.Component(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v113 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = DateInterval.start.getter(v11);
  v16 = DateInterval.end.getter(v15);
  v17 = Date.timeIntervalSinceReferenceDate.getter(v16);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  sub_10003D1C0(v14, (uint64_t)v141, v17, v19);
  v20 = (_QWORD *)v141[0];
  v119 = v141[1];
  v21 = v141[2];
  v22 = *(double *)&v141[3];
  v23 = *(double *)&v141[4];
  v24 = *(double *)&v141[5];
  v25 = *(double *)&v141[6];
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v10, v6);
  v133 = v13;
  v134 = v6;
  v132 = v26;
  v26(v13, v6);
  v27 = 0.0;
  sub_10003D1C0(7, (uint64_t)v142, 0.0, 6.0);
  v28 = (_QWORD *)v142[0];
  v29 = v142[1];
  v118 = v142[2];
  v129 = *(double *)&v142[3];
  v128 = *(double *)&v142[4];
  v127 = *(double *)&v142[5];
  v126 = *(double *)&v142[6];
  sub_10003D1C0(7, (uint64_t)&v143, 0.0, 6.0);
  v138 = v143;
  v30 = v144;
  v31 = v145;
  v125 = v146;
  v124 = v147;
  v123 = v148;
  v122 = v149;
  v139 = v14;
  if (!v14)
  {
    v35 = 0.0;
    v36 = 0.0;
    v107 = v120;
LABEL_111:
    *(double *)a3 = v36;
    *(double *)(a3 + 8) = v35;
    v108 = v119;
    *(_QWORD *)(a3 + 16) = v20;
    *(_QWORD *)(a3 + 24) = v108;
    *(_QWORD *)(a3 + 32) = v21;
    *(double *)(a3 + 40) = v22;
    *(double *)(a3 + 48) = v23;
    *(double *)(a3 + 56) = v24;
    *(double *)(a3 + 64) = v25;
    *(_QWORD *)(a3 + 72) = v28;
    *(_QWORD *)(a3 + 80) = v29;
    v109 = v129;
    *(_QWORD *)(a3 + 88) = v118;
    *(double *)(a3 + 96) = v109;
    v110 = v127;
    *(double *)(a3 + 104) = v128;
    *(double *)(a3 + 112) = v110;
    *(double *)(a3 + 120) = v126;
    *(double *)(a3 + 128) = v138;
    *(_QWORD *)(a3 + 136) = v30;
    v111 = v125;
    *(_QWORD *)(a3 + 144) = v31;
    *(double *)(a3 + 152) = v111;
    v112 = v123;
    *(double *)(a3 + 160) = v124;
    *(double *)(a3 + 168) = v112;
    *(double *)(a3 + 176) = v122;
    *(double *)(a3 + 184) = v27;
    *(_BYTE *)(a3 + 192) = v107;
    return;
  }
  v113 = v144;
  v114 = v145;
  v115 = v29;
  v116 = v21;
  v117 = a3;
  v131 = enum case for Calendar.Component.weekday(_:);
  swift_bridgeObjectRetain(a1);
  v32 = 0;
  v33 = 0;
  v34 = (id *)(a1 + 40);
  v35 = 0.0;
  v36 = 0.0;
  v130 = a1;
  while (1)
  {
    if (!*v34)
      goto LABEL_5;
    v38 = (uint64_t)*(v34 - 1);
    v39 = *v34;
    v40 = objc_msgSend(v39, "_flightsClimbed");
    v41 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
    objc_msgSend(v40, "doubleValueForUnit:", v41);
    v43 = v42;

    v44 = v33 >= v20[2];
    v140 = v39;
    if (!v44)
      break;
LABEL_17:
    v47 = v28;
    v48 = v20;
    if (qword_10081D550 != -1)
      swift_once(&qword_10081D550, sub_10000968C);
    v49 = type metadata accessor for Calendar(0);
    sub_10003CE9C(v49, (uint64_t)qword_100869D28);
    v50 = v136;
    v51 = v135;
    v52 = v137;
    v53 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, v131, v137);
    v54 = (double)v38;
    v55 = v133;
    Date.init(timeIntervalSinceReferenceDate:)(v53, v54);
    v56 = Calendar.component(_:from:)(v51, v55);
    v132(v55, v134);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v57 = v56 - 1;
    if (v57 > 6)
    {
      v20 = v48;
      v28 = v47;
    }
    else
    {
      v28 = v47;
      v58 = v47[2];
      if (v57 >= v58)
      {
        v20 = v48;
        *(double *)&v65 = v138;
      }
      else
      {
        v59 = v35;
        v60 = v36;
        v121 = v24;
        v61 = v22;
        v62 = v25;
        v63 = v23;
        v64 = (double *)&v47[3 * v57];
        v20 = v48;
        *(double *)&v65 = v138;
        if (((_BYTE)v64[6] & 1) != 0)
        {
          v66 = 1.0;
          v67 = 0.0;
        }
        else
        {
          v67 = v64[4];
          v66 = v64[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v28 = sub_1004DEE58(v47);
        v58 = v28[2];
        if (v57 >= v58)
          goto LABEL_113;
        v68 = (v43 + v67 * v66) / (v66 + 1.0);
        v69 = (double *)&v28[3 * v57];
        v69[4] = v68;
        v69[5] = v66 + 1.0;
        *((_BYTE *)v69 + 48) = 0;
        v70 = v129;
        v71 = v129 < v68;
        if (v129 < v68)
          v70 = (v43 + v67 * v66) / (v66 + 1.0);
        v129 = v70;
        v72 = v128;
        if (v71)
          v72 = v66 + 1.0;
        v128 = v72;
        v73 = v127;
        v74 = v127 < 0.0;
        if (v68 < v127)
          v74 = 1;
        if (v74)
          v73 = (v43 + v67 * v66) / (v66 + 1.0);
        v127 = v73;
        v75 = v126;
        if (v74)
          v75 = v66 + 1.0;
        v126 = v75;
        v23 = v63;
        v25 = v62;
        v22 = v61;
        v24 = v121;
        v36 = v60;
        v35 = v59;
      }
      v76 = *((_QWORD *)v65 + 2);
      if (v57 < v76)
      {
        v138 = v35;
        v77 = v36;
        v78 = v24;
        v79 = v22;
        v80 = v25;
        v81 = v23;
        v82 = &v65[3 * v57];
        if (((_BYTE)v82[6] & 1) != 0)
        {
          v83 = 1.0;
          v84 = 0.0;
        }
        else
        {
          v84 = v82[4];
          v83 = v82[5];
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          *(double *)&v65 = COERCE_DOUBLE(sub_1004DEE58(v65));
        v76 = *((_QWORD *)v65 + 2);
        if (v57 >= v76)
          goto LABEL_114;
        v85 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v86 = &v65[3 * v57];
        v86[4] = v85;
        v86[5] = v83 + 1.0;
        *((_BYTE *)v86 + 48) = 0;
        v87 = v125;
        v88 = v125 < v85;
        if (v125 < v85)
          v87 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v125 = v87;
        v89 = v124;
        if (v88)
          v89 = v83 + 1.0;
        v124 = v89;
        v90 = v123;
        v91 = v123 < 0.0;
        if (v85 < v123)
          v91 = 1;
        if (v91)
          v90 = (v84 * v83 + 1.0) / (v83 + 1.0);
        v123 = v90;
        v92 = v122;
        if (v91)
          v92 = v83 + 1.0;
        v122 = v92;
        v58 = v28[2];
        v23 = v81;
        v25 = v80;
        v22 = v79;
        v24 = v78;
        v36 = v77;
        v35 = v138;
      }
      v93 = v65 + 4;
      v27 = 0.0;
      if (v58 && (v28[6] & 1) == 0 && v76 && ((_BYTE)v65[6] & 1) == 0)
      {
        v94 = *((double *)v28 + 4) / *v93;
        if (v94 <= 0.0)
          v94 = 0.0;
        if (*v93 > 0.0)
          v27 = v94;
        else
          v27 = 0.0;
      }
      if (v58 > 1)
      {
        v95 = (double *)(v28 + 7);
        if ((v28[9] & 1) == 0 && v76 > 1)
        {
          v96 = v65 + 7;
          if (((_BYTE)v65[9] & 1) == 0 && *v96 > 0.0 && *v95 / *v96 > v27)
            v27 = *v95 / *v96;
        }
      }
      if (v58 > 2)
      {
        v97 = (double *)(v28 + 10);
        if ((v28[12] & 1) == 0 && v76 > 2)
        {
          v98 = v65 + 10;
          if (((_BYTE)v65[12] & 1) == 0 && *v98 > 0.0 && *v97 / *v98 > v27)
            v27 = *v97 / *v98;
        }
      }
      if (v58 > 3)
      {
        v99 = (double *)(v28 + 13);
        if ((v28[15] & 1) == 0 && v76 > 3)
        {
          v100 = v65 + 13;
          if (((_BYTE)v65[15] & 1) == 0 && *v100 > 0.0 && *v99 / *v100 > v27)
            v27 = *v99 / *v100;
        }
      }
      if (v58 > 4)
      {
        v101 = (double *)(v28 + 16);
        if ((v28[18] & 1) == 0 && v76 > 4)
        {
          v102 = v65 + 16;
          if (((_BYTE)v65[18] & 1) == 0 && *v102 > 0.0 && *v101 / *v102 > v27)
            v27 = *v101 / *v102;
        }
      }
      if (v58 > 5)
      {
        v103 = (double *)(v28 + 19);
        if ((v28[21] & 1) == 0 && v76 > 5)
        {
          v104 = v65 + 19;
          if (((_BYTE)v65[21] & 1) == 0 && *v104 > 0.0 && *v103 / *v104 > v27)
            v27 = *v103 / *v104;
        }
      }
      v138 = *(double *)&v65;
      if (v58 > 6)
      {
        v105 = (double *)(v28 + 22);
        if ((v28[24] & 1) == 0 && v76 > 6)
        {
          v106 = v65 + 22;
          if (((_BYTE)v65[24] & 1) == 0 && *v106 > 0.0 && *v105 / *v106 > v27)
            v27 = *v105 / *v106;
        }
      }
    }
    v37 = v35 * v36 + v43;
    v35 = v35 + 1.0;
    v36 = v37 / v35;

    a1 = v130;
LABEL_5:
    ++v33;
    v34 += 2;
    v32 += 3;
    if (v139 == v33)
    {
      swift_bridgeObjectRelease(a1);
      v107 = v120;
      a3 = v117;
      v21 = v116;
      v29 = v115;
      v31 = v114;
      v30 = v113;
      goto LABEL_111;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    v20 = sub_1004DEE58(v20);
  if (v33 < v20[2])
  {
    v45 = (double *)&v20[v32];
    v45[4] = v43;
    v45[5] = 1.0;
    *((_BYTE *)v45 + 48) = 0;
    if (v22 < v43)
    {
      v22 = v43;
      v23 = 1.0;
    }
    v46 = v24 < 0.0;
    if (v43 < v24)
      v46 = 1;
    if (v46)
    {
      v24 = v43;
      v25 = 1.0;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for ActivityStatisticsBuilder.BuilderError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001FE294 + 4 * byte_10062CD80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001FE2B4 + 4 * byte_10062CD85[v4]))();
}

_BYTE *sub_1001FE294(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001FE2B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001FE2BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001FE2C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001FE2CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001FE2D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActivityStatisticsBuilder.BuilderError()
{
  return &type metadata for ActivityStatisticsBuilder.BuilderError;
}

unint64_t sub_1001FE2F4()
{
  unint64_t result;

  result = qword_1008274E8;
  if (!qword_1008274E8)
  {
    result = swift_getWitnessTable(&unk_10062CE40, &type metadata for ActivityStatisticsBuilder.BuilderError);
    atomic_store(result, (unint64_t *)&qword_1008274E8);
  }
  return result;
}

uint64_t sub_1001FE358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  void *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;

  v56 = a8;
  v54 = a7;
  v53 = a6;
  v52 = a5;
  v51 = a4;
  v50 = a3;
  v49 = a2;
  v47 = a1;
  v55 = a10;
  v11 = type metadata accessor for Reply(0);
  v57 = *(_QWORD *)(v11 - 8);
  v46 = *(_QWORD *)(v57 + 64);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_10081E640);
  v48 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v48 + 64);
  __chkstk_darwin(v14);
  v58[0] = 0;
  v58[1] = 0xE000000000000000;
  v16 = State.init(wrappedValue:)(&v59, v58, &type metadata for String);
  v17 = v60;
  *(_OWORD *)(a9 + 56) = v59;
  *(_QWORD *)(a9 + 72) = v17;
  *(_BYTE *)(a9 + 80) = FocusState.init<>()(v16) & 1;
  *(_QWORD *)(a9 + 88) = v18;
  *(_BYTE *)(a9 + 96) = v19 & 1;
  v20 = (int *)type metadata accessor for ActivitySharingReplyEditView(0);
  v21 = (void *)(a9 + v20[11]);
  v22 = (_OWORD *)ReplyLayoutValues.phoneValues.unsafeMutableAddressor();
  swift_beginAccess(v22, v58, 0, 0);
  v59 = *v22;
  v23 = v22[1];
  v24 = v22[2];
  v25 = v22[4];
  v62 = v22[3];
  v63 = v25;
  v61 = v24;
  v60 = v23;
  v26 = v22[5];
  v27 = v22[6];
  v28 = v22[8];
  v66 = v22[7];
  v67 = v28;
  v64 = v26;
  v65 = v27;
  v29 = v22[9];
  v30 = v22[10];
  v31 = v22[11];
  v71 = *((_BYTE *)v22 + 192);
  v69 = v30;
  v70 = v31;
  v68 = v29;
  memmove(v21, v22, 0xC1uLL);
  v32 = v49;
  *(_QWORD *)a9 = v47;
  *(_QWORD *)(a9 + 8) = v32;
  *(_BYTE *)(a9 + 16) = v50;
  v33 = v52;
  *(_QWORD *)(a9 + 24) = v51;
  *(_QWORD *)(a9 + 32) = v33;
  v34 = v54;
  *(_QWORD *)(a9 + 40) = v53;
  *(_QWORD *)(a9 + 48) = v34;
  v35 = v56;
  sub_100021CC0(v56, a9 + v20[9], &qword_10081E640);
  v36 = a9 + v20[10];
  v37 = v55;
  sub_10004F8C8(v55, v36, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  sub_100021CC0(v35, (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10081E640);
  v38 = v37;
  sub_10004F8C8(v37, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  v39 = *(unsigned __int8 *)(v48 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = *(unsigned __int8 *)(v57 + 80);
  v42 = (v15 + v41 + v40) & ~v41;
  v43 = swift_allocObject(&unk_10078E390, v42 + v46, v39 | v41 | 7);
  sub_100045AD4((uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v43 + v40, &qword_10081E640);
  sub_100047C88((uint64_t)v13, v43 + v42, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  sub_100202D6C((uint64_t)&v59);
  sub_100011F54(v38, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  result = sub_10001BE90(v35, &qword_10081E640);
  *(_QWORD *)(a9 + 104) = sub_100202D08;
  *(_QWORD *)(a9 + 112) = v43;
  *(_BYTE *)(a9 + 120) = 0;
  return result;
}

uint64_t sub_1001FE6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for Reply(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_10081E640);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100021CC0(a1, (uint64_t)v9, &qword_10081E640);
  sub_10004F8C8(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  v10 = type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  sub_100200730((uint64_t)v9, (uint64_t)v6);
  return v11;
}

uint64_t sub_1001FE7A4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  v84 = a2;
  v83 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v83);
  v82 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Color.RGBColorSpace(0);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v72 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_1008277C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100047110(&qword_1008277C8);
  __chkstk_darwin(v71);
  v69 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100047110(&qword_1008277D0);
  __chkstk_darwin(v75);
  v73 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100047110(&qword_1008277D8);
  v10 = __chkstk_darwin(v81);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v80 = (uint64_t)&v68 - v13;
  v70 = type metadata accessor for ActivitySharingReplyEditView(0);
  v14 = *(_QWORD *)(v70 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v70);
  v16 = sub_100047110(&qword_1008277E0);
  v78 = *(_QWORD *)(v16 - 8);
  v79 = v16;
  v17 = __chkstk_darwin(v16);
  v77 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v68 - v20;
  v22 = static Color.clear.getter(v19);
  v23 = static SafeAreaRegions.all.getter(v22);
  v24 = static Edge.Set.all.getter(v23);
  *(_QWORD *)&v85 = v22;
  *((_QWORD *)&v85 + 1) = v23;
  LOWORD(v86) = v24;
  sub_10004F8C8(a1, (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActivitySharingReplyEditView);
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_10078E318, v26 + v15, v25 | 7);
  sub_100047C88((uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, type metadata accessor for ActivitySharingReplyEditView);
  v28 = sub_100047110(&qword_1008277E8);
  v29 = sub_100202878();
  v30 = v21;
  View.onTapGesture(count:perform:)(1, sub_10020286C, v27, v28, v29);
  swift_release(v27);
  swift_release(v85);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v31, v32, v33, v34, v35);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v36 = sub_100047110(&qword_100827808);
  sub_1001FEDB8(a1, (uint64_t)&v7[*(int *)(v36 + 44)]);
  v37 = *(double *)(a1 + *(int *)(v70 + 44));
  v38 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v72, enum case for Color.RGBColorSpace.sRGB(_:), v76);
  v39 = Color.init(_:white:opacity:)(v38, v37, 1.0);
  v40 = static Edge.Set.all.getter(v39);
  v41 = v69;
  sub_100021CC0((uint64_t)v7, v69, &qword_1008277C0);
  v42 = v41 + *(int *)(v71 + 36);
  *(_QWORD *)v42 = v39;
  *(_BYTE *)(v42 + 8) = v40;
  sub_10001BE90((uint64_t)v7, &qword_1008277C0);
  v43 = v82;
  v44 = &v82[*(int *)(v83 + 20)];
  v45 = enum case for RoundedCornerStyle.continuous(_:);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
  __asm { FMOV            V0.2D, #12.0 }
  *v43 = _Q0;
  v52 = (uint64_t)v73;
  v53 = (uint64_t)&v73[*(int *)(v75 + 36)];
  sub_10004F8C8((uint64_t)v43, v53, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v53 + *(int *)(sub_100047110(&qword_100821238) + 36)) = 256;
  sub_100021CC0(v41, v52, &qword_1008277C8);
  sub_100011F54((uint64_t)v43, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v54 = sub_10001BE90(v41, &qword_1008277C8);
  v55 = static Alignment.center.getter(v54);
  _FrameLayout.init(width:height:alignment:)(&v85, 0x406FC00000000000, 0, 0, 1, v55, v56);
  sub_100021CC0(v52, (uint64_t)v12, &qword_1008277D0);
  v57 = &v12[*(int *)(v81 + 36)];
  v58 = v86;
  *(_OWORD *)v57 = v85;
  *((_OWORD *)v57 + 1) = v58;
  *((_OWORD *)v57 + 2) = v87;
  sub_10001BE90(v52, &qword_1008277D0);
  v59 = v80;
  sub_100045AD4((uint64_t)v12, v80, &qword_1008277D8);
  v60 = v77;
  v61 = v78;
  v62 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
  v63 = v79;
  v62(v77, v30, v79);
  sub_100021CC0(v59, (uint64_t)v12, &qword_1008277D8);
  v64 = v84;
  v62(v84, v60, v63);
  v65 = sub_100047110(&qword_100827810);
  sub_100021CC0((uint64_t)v12, (uint64_t)&v64[*(int *)(v65 + 48)], &qword_1008277D8);
  sub_10001BE90(v59, &qword_1008277D8);
  v66 = *(void (**)(char *, uint64_t))(v61 + 8);
  v66(v30, v63);
  sub_10001BE90((uint64_t)v12, &qword_1008277D8);
  return ((uint64_t (*)(char *, uint64_t))v66)(v60, v63);
}

uint64_t sub_1001FED68(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = a1[1];
  v2 = *((_BYTE *)a1 + 16);
  v6 = *a1;
  v7 = v1;
  v8 = v2;
  v5 = 0;
  v3 = sub_100047110(&qword_100820FF8);
  return Binding.wrappedValue.setter(&v5, v3);
}

uint64_t sub_1001FEDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(char *, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)();
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  double v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v157 = a2;
  v3 = sub_100047110(&qword_100827818);
  v4 = __chkstk_darwin(v3);
  v140 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v139 = (uint64_t *)((char *)&v126 - v6);
  v136 = type metadata accessor for Color.RGBColorSpace(0);
  v134 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v135 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for Divider(0);
  v128 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v127 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100047110(&qword_100824520);
  __chkstk_darwin(v126);
  v132 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100047110(&qword_100827820);
  __chkstk_darwin(v129);
  v133 = (uint64_t)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100047110(&qword_100827828);
  v11 = __chkstk_darwin(v131);
  v138 = (uint64_t)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v137 = (uint64_t)&v126 - v13;
  v14 = sub_100047110(&qword_100827830);
  v15 = __chkstk_darwin(v14);
  v156 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v155 = (uint64_t)&v126 - v17;
  v154 = type metadata accessor for ActivitySharingReplyEditView(0);
  v148 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v144 = v18;
  v153 = (uint64_t)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100047110(&qword_100827838);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100047110(&qword_100827840);
  __chkstk_darwin(v142);
  v24 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100047110(&qword_100827848);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v143 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100047110(&qword_100827850);
  __chkstk_darwin(v158);
  v145 = (char *)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100047110(&qword_100827858);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100047110(&qword_100827860);
  v28 = __chkstk_darwin(v149);
  v160 = (uint64_t)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v159 = (uint64_t)&v126 - v30;
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x800000010068FAB0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = a1;
  v39 = *(_QWORD *)(a1 + 72);
  v161 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)&v162 = v39;
  sub_100047110(&qword_100827868);
  State.projectedValue.getter(&v164);
  TextField<>.init(_:text:onEditingChanged:onCommit:)(v31, v33, v35 & 1, v37, v164, v165, v166, v167, ASFriendListDisplayMode.id.getter, 0, ASFriendListDisplayMode.id.getter, 0);
  if (qword_10081D788 != -1)
    swift_once(&qword_10081D788, sub_1002004A8);
  v40 = qword_10086A178;
  KeyPath = swift_getKeyPath(&unk_10062D110);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v24, v22, v19);
  v42 = v142;
  v43 = (uint64_t *)&v24[*(int *)(v142 + 36)];
  *v43 = KeyPath;
  v43[1] = v40;
  v44 = *(void (**)(char *, uint64_t, __n128))(v20 + 8);
  v45 = swift_retain(v40);
  v44(v22, v19, v45);
  v46 = *(_QWORD *)(v38 + 88);
  v47 = *(_BYTE *)(v38 + 96);
  LOBYTE(v161) = *(_BYTE *)(v38 + 80);
  *((_QWORD *)&v161 + 1) = v46;
  LOBYTE(v162) = v47;
  v141 = sub_100047110(&qword_100827870);
  FocusState.projectedValue.getter(&v164);
  v48 = v164;
  v49 = v165;
  v50 = v166;
  v51 = sub_100202968();
  v52 = v143;
  View.focused(_:)(v48, v49, v50, v42, v51);
  swift_release(v49);
  swift_release(v48);
  sub_10001BE90((uint64_t)v24, &qword_100827840);
  v53 = v153;
  sub_10004F8C8(v38, v153, type metadata accessor for ActivitySharingReplyEditView);
  v54 = *(unsigned __int8 *)(v148 + 80);
  v55 = (v54 + 16) & ~v54;
  v56 = v55 + v144;
  v57 = v54 | 7;
  v58 = swift_allocObject(&unk_10078E340, v55 + v144, v54 | 7);
  sub_100047C88(v53, v58 + v55, type metadata accessor for ActivitySharingReplyEditView);
  v59 = v146;
  v60 = (uint64_t)v145;
  v61 = v147;
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v145, v52, v147);
  v62 = (uint64_t (**)())(v60 + *(int *)(v158 + 36));
  *v62 = sub_100202A08;
  v62[1] = (uint64_t (*)())v58;
  v62[2] = 0;
  v62[3] = 0;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v52, v61);
  v63 = *(_QWORD *)(v38 + 88);
  v64 = *(_BYTE *)(v38 + 96);
  LOBYTE(v164) = *(_BYTE *)(v38 + 80);
  v165 = v63;
  LOBYTE(v166) = v64;
  FocusState.wrappedValue.getter(&v161, v141);
  LOBYTE(v164) = v161;
  sub_10004F8C8(v38, v53, type metadata accessor for ActivitySharingReplyEditView);
  v65 = swift_allocObject(&unk_10078E368, v56, v57);
  sub_100047C88(v53, v65 + v55, type metadata accessor for ActivitySharingReplyEditView);
  v66 = sub_100202AA0();
  v67 = v150;
  View.onChange<A>(of:initial:_:)(&v164, 0, sub_100202A54, v65, v158, &type metadata for Bool, v66, &protocol witness table for Bool);
  swift_release(v65);
  v68 = sub_10001BE90(v60, &qword_100827850);
  v69 = (double *)(v38 + *(int *)(v154 + 44));
  v70 = *((_QWORD *)v69 + 3);
  LOBYTE(v65) = static Edge.Set.all.getter(v68);
  v71 = v151;
  v72 = v160;
  v73 = v152;
  (*(void (**)(uint64_t, char *, uint64_t))(v151 + 16))(v160, v67, v152);
  v74 = v72 + *(int *)(v149 + 36);
  *(_BYTE *)v74 = v65;
  *(_QWORD *)(v74 + 8) = 0x4028000000000000;
  *(_QWORD *)(v74 + 16) = v70;
  *(_QWORD *)(v74 + 24) = 0;
  *(_QWORD *)(v74 + 32) = v70;
  *(_BYTE *)(v74 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v73);
  sub_100045AD4(v72, v159, &qword_100827860);
  v75 = *(_QWORD *)(v38 + 104);
  v76 = *(_QWORD *)(v38 + 112);
  v77 = *(unsigned __int8 *)(v38 + 120);
  v78 = type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
  v79 = sub_1000083D8(&qword_1008277B8, type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel, (uint64_t)&unk_10062CF20);
  v80 = StateObject.wrappedValue.getter(v75, v76, v77, v78, v79);
  v81 = swift_getKeyPath(&unk_10062CFE8);
  v82 = swift_getKeyPath(&unk_10062D010);
  static Published.subscript.getter(&v164, v80, v81, v82);
  swift_release(v80);
  swift_release(v81);
  swift_release(v82);
  if (v164 == 1)
  {
    v84 = v127;
    v85 = Divider.init()(v83);
    v86 = *((_QWORD *)v69 + 8);
    v87 = static Alignment.center.getter(v85);
    _FrameLayout.init(width:height:alignment:)(&v161, 0, 1, v86, 0, v87, v88);
    v89 = v128;
    v90 = (uint64_t)v132;
    v91 = v130;
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v132, v84, v130);
    v92 = (_OWORD *)(v90 + *(int *)(v126 + 36));
    v93 = v162;
    *v92 = v161;
    v92[1] = v93;
    v92[2] = v163;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v84, v91);
    v94 = v69[6];
    v95 = v135;
    (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v135, enum case for Color.RGBColorSpace.sRGB(_:), v136);
    v96 = Color.init(_:white:opacity:)(v95, v94, 1.0);
    LOBYTE(v89) = static Edge.Set.all.getter(v96);
    v97 = v133;
    sub_100021CC0(v90, v133, &qword_100824520);
    v98 = v97 + *(int *)(v129 + 36);
    *(_QWORD *)v98 = v96;
    *(_BYTE *)(v98 + 8) = v89;
    v99 = sub_10001BE90(v90, &qword_100824520);
    v100 = *((_QWORD *)v69 + 7);
    LOBYTE(v96) = static Edge.Set.all.getter(v99);
    v101 = v138;
    sub_100021CC0(v97, v138, &qword_100827820);
    v102 = v101 + *(int *)(v131 + 36);
    *(_BYTE *)v102 = v96;
    *(_QWORD *)(v102 + 8) = 0x4020000000000000;
    *(_QWORD *)(v102 + 16) = v100;
    *(_QWORD *)(v102 + 24) = 0x4028000000000000;
    *(_QWORD *)(v102 + 32) = v100;
    *(_BYTE *)(v102 + 40) = 0;
    sub_10001BE90(v97, &qword_100827820);
    v103 = v137;
    v104 = sub_100045AD4(v101, v137, &qword_100827828);
    v105 = static VerticalAlignment.center.getter(v104);
    v106 = (uint64_t)v139;
    *v139 = v105;
    *(_QWORD *)(v106 + 8) = 0;
    *(_BYTE *)(v106 + 16) = 0;
    v107 = sub_100047110(&qword_1008278A0);
    sub_1001FFC68(v38, v106 + *(int *)(v107 + 44));
    sub_100021CC0(v103, v101, &qword_100827828);
    v108 = v140;
    sub_100021CC0(v106, v140, &qword_100827818);
    v109 = v156;
    sub_100021CC0(v101, v156, &qword_100827828);
    v110 = sub_100047110(&qword_1008278A8);
    sub_100021CC0(v108, v109 + *(int *)(v110 + 48), &qword_100827818);
    sub_10001BE90(v106, &qword_100827818);
    sub_10001BE90(v103, &qword_100827828);
    sub_10001BE90(v108, &qword_100827818);
    sub_10001BE90(v101, &qword_100827828);
    v111 = sub_100047110(&qword_100827890);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v109, 0, 1, v111);
    v112 = v155;
    v113 = sub_100045AD4(v109, v155, &qword_100827830);
  }
  else
  {
    v114 = sub_100047110(&qword_100827890);
    v112 = v155;
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v155, 1, 1, v114);
    v109 = v156;
  }
  v115 = static Alignment.center.getter(v113);
  _FrameLayout.init(width:height:alignment:)(&v164, 0, 1, 0x4028000000000000, 0, v115, v116);
  v158 = v164;
  LODWORD(v156) = v165;
  v155 = v166;
  LODWORD(v154) = v167;
  v117 = v168;
  v118 = v169;
  v120 = v159;
  v119 = v160;
  sub_100021CC0(v159, v160, &qword_100827860);
  sub_100021CC0(v112, v109, &qword_100827830);
  v121 = v157;
  sub_100021CC0(v119, v157, &qword_100827860);
  v122 = v109;
  v123 = sub_100047110(&qword_100827898);
  sub_100021CC0(v122, v121 + *(int *)(v123 + 48), &qword_100827830);
  v124 = v121 + *(int *)(v123 + 64);
  *(_QWORD *)v124 = 0;
  *(_BYTE *)(v124 + 8) = 1;
  *(_QWORD *)(v124 + 16) = v158;
  *(_BYTE *)(v124 + 24) = v156;
  *(_QWORD *)(v124 + 32) = v155;
  *(_BYTE *)(v124 + 40) = v154;
  *(_QWORD *)(v124 + 48) = v117;
  *(_QWORD *)(v124 + 56) = v118;
  sub_10001BE90(v112, &qword_100827830);
  sub_10001BE90(v120, &qword_100827860);
  sub_10001BE90(v122, &qword_100827830);
  return sub_10001BE90(v119, &qword_100827860);
}

uint64_t sub_1001FFAD4(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_BYTE *)(a1 + 96);
  v5[1] = *(_BYTE *)(a1 + 80);
  v6 = v1;
  v7 = v2;
  v5[0] = 1;
  v3 = sub_100047110(&qword_100827870);
  return FocusState.wrappedValue.setter(v5, v3);
}

void sub_1001FFB30(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if ((*a2 & 1) == 0)
  {
    v2 = sub_100047110(&qword_100827868);
    State.wrappedValue.getter(&v8, v2);
    v4 = v8;
    v3 = v9;
    swift_bridgeObjectRelease(v9);
    v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v5 = v4 & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = sub_100047110(&qword_100820FF8);
      Binding.wrappedValue.getter(v6);
      if (v8 == 1)
      {
        State.wrappedValue.getter(&v8, v2);
        v7 = sub_100047110((uint64_t *)&unk_1008223D0);
        Binding.wrappedValue.setter(&v8, v7);
        LOBYTE(v8) = 0;
        Binding.wrappedValue.setter(&v8, v6);
      }
    }
  }
}

void sub_1001FFC68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;

  v4 = sub_100047110(&qword_1008278B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100047110(&qword_1008278B8);
  v7 = __chkstk_darwin(v50);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v48 - v10;
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(unsigned __int8 *)(a1 + 120);
  v15 = type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
  v16 = sub_1000083D8(&qword_1008277B8, type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel, (uint64_t)&unk_10062CF20);
  v17 = StateObject.wrappedValue.getter(v12, v13, v14, v15, v16);
  KeyPath = swift_getKeyPath(&unk_10062CF58);
  v19 = swift_getKeyPath(&unk_10062CF80);
  static Published.subscript.getter(&v51, v17, KeyPath, v19);
  swift_release(v17);
  swift_release(KeyPath);
  swift_release(v19);
  if (v51)
  {
    v21 = v51;
    v22 = Image.init(uiImage:)(v21);
    v23 = static Edge.Set.leading.getter(v22);
    v24 = type metadata accessor for ActivitySharingReplyEditView(0);
    v25 = EdgeInsets.init(_all:)(*(double *)(a1 + *(int *)(v24 + 44) + 80));
    v27 = v26;
    v29 = v28;
    v31 = v30;

    v49 = v23;
  }
  else
  {
    v22 = 0;
    v49 = 0;
    v25 = 0.0;
    v27 = 0;
    v29 = 0;
    v31 = 0;
  }
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v20);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  sub_100047110(&qword_1008278C0);
  v32 = StateObject.wrappedValue.getter(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120), v15, v16);
  v33 = swift_getKeyPath(&unk_10062CFA0);
  v34 = swift_getKeyPath(&unk_10062CFC8);
  static Published.subscript.getter(&v51, v32, v33, v34);
  swift_release(v32);
  swift_release(v33);
  swift_release(v34);
  v35 = swift_getKeyPath(&unk_10062D148);
  v36 = sub_100047110((uint64_t *)&unk_100827578);
  v37 = sub_100028384(&qword_1008278C8, (uint64_t *)&unk_100827578, (uint64_t)&protocol conformance descriptor for [A]);
  v38 = sub_1000083D8(&qword_1008278D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  ForEach<>.init(_:id:content:)(&v51, v35, sub_10020007C, 0, v36, &type metadata for Text, v37, v38, &protocol witness table for Text);
  v39 = type metadata accessor for ActivitySharingReplyEditView(0);
  v40 = a1 + *(int *)(v39 + 44);
  v41 = *(_QWORD *)(v40 + 104);
  v42 = *(_QWORD *)(v40 + 112);
  v43 = static Edge.Set.all.getter(v39);
  sub_100021CC0((uint64_t)v6, (uint64_t)v9, &qword_1008278B0);
  v44 = &v9[*(int *)(v50 + 36)];
  *v44 = v43;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v41;
  *((_QWORD *)v44 + 3) = 0;
  *((_QWORD *)v44 + 4) = v42;
  v44[40] = 0;
  sub_10001BE90((uint64_t)v6, &qword_1008278B0);
  sub_100045AD4((uint64_t)v9, (uint64_t)v11, &qword_1008278B8);
  sub_100021CC0((uint64_t)v11, (uint64_t)v9, &qword_1008278B8);
  v45 = v49;
  *(_QWORD *)a2 = v22;
  *(_QWORD *)(a2 + 8) = v45;
  *(double *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v31;
  *(_BYTE *)(a2 + 48) = 0;
  v46 = sub_100047110(&qword_1008278D8);
  sub_100021CC0((uint64_t)v9, a2 + *(int *)(v46 + 48), &qword_1008278B8);
  v47 = a2 + *(int *)(v46 + 64);
  *(_QWORD *)v47 = 0;
  *(_BYTE *)(v47 + 8) = 1;
  swift_retain(v22);
  sub_10001BE90((uint64_t)v11, &qword_1008278B8);
  sub_10001BE90((uint64_t)v9, &qword_1008278B8);
  swift_release(v22);
}

uint64_t sub_10020007C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  result = Text.init(_:)(v6);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_100200108(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_100200174, v3, v4);
}

uint64_t sub_100200174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 104);
  v2 = *(_QWORD *)(v1 + 112);
  v4 = *(unsigned __int8 *)(v1 + 120);
  v5 = type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
  v6 = sub_1000083D8(&qword_1008277B8, type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel, (uint64_t)&unk_10062CF20);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10082755C);
  v0[7] = v7;
  *v7 = v0;
  v7[1] = sub_100200214;
  return sub_10020093C();
}

uint64_t sub_100200214()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v2);
  return swift_task_switch(sub_10016D124, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100200268()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062CF58);
  v2 = swift_getKeyPath(&unk_10062CF80);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002002D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v2;
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v8);
  v13 = sub_100047110(&qword_100827790);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v16 = static Alignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = v17;
  v18 = sub_100047110(&qword_100827798);
  sub_1001FE7A4(v4, &v16[*(int *)(v18 + 44)]);
  sub_10004F8C8(v4, (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActivitySharingReplyEditView);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_10078E2F0, v20 + v12, v19 | 7);
  v22 = sub_100047C88((uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for ActivitySharingReplyEditView);
  static TaskPriority.userInitiated.getter(v22);
  v23 = (char *)(a2 + *(int *)(sub_100047110(&qword_1008277B0) + 36));
  v24 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v23[*(int *)(v24 + 20)], v10, v6);
  *(_QWORD *)v23 = &unk_1008277A8;
  *((_QWORD *)v23 + 1) = v21;
  sub_100021CC0((uint64_t)v16, a2, &qword_100827790);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return sub_10001BE90((uint64_t)v16, &qword_100827790);
}

uint64_t sub_1002004A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t result;
  uint64_t v16;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  v11 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = static Font.system(_:design:weight:)(v10, v6, 0, 1);
  sub_10001BE90((uint64_t)v6, &qword_10081F2F8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v13 = Font.leading(_:)(v3, v12);
  v14 = swift_release(v12);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v14);
  qword_10086A178 = v13;
  return result;
}

uint64_t sub_100200650()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062CFA0);
  v2 = swift_getKeyPath(&unk_10062CFC8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002006C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10062CFE8);
  v2 = swift_getKeyPath(&unk_10062D010);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100200730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CHWorkoutDetailHeartRateTableViewCell *v24;

  v22 = a1;
  v23 = a2;
  v21 = sub_100047110(&qword_10083B500);
  v3 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_1008276E0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008276D8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__iconImage;
  v24 = 0;
  v15 = sub_100047110(&qword_100827568);
  Published.init(initialValue:)(&v24, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  v16 = v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__labels;
  v24 = &_swiftEmptyArrayStorage;
  v17 = sub_100047110((uint64_t *)&unk_100827578);
  Published.init(initialValue:)(&v24, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  v18 = v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__isLoaded;
  LOBYTE(v24) = 0;
  Published.init(initialValue:)(&v24, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v18, v5, v21);
  v19 = v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_renderer;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)(v19 + 32) = 0;
  sub_100045AD4(v22, v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_payload, &qword_10081E640);
  sub_100047C88(v23, v2 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_reply, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  return v2;
}

uint64_t sub_10020093C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[14] = v0;
  v2 = type metadata accessor for AttributedString(0);
  v1[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[16] = v3;
  v1[17] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081E640);
  v1[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v1[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[20] = v6;
  v1[21] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v1[22] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v1[23] = v8;
  v1[24] = v9;
  return swift_task_switch(sub_100200A1C, v8, v9);
}

uint64_t sub_100200A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  sub_100021CC0(*(_QWORD *)(v0 + 112)+ OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_payload, v3, &qword_10081E640);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 144);
    swift_release(*(_QWORD *)(v0 + 176));
    sub_10001BE90(v4, &qword_10081E640);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    v9 = v8 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_reply;
    v10 = (_QWORD *)swift_task_alloc(async function pointer to static ActivityRendererFactory.activityRenderer(for:payload:)[1]);
    *(_QWORD *)(v0 + 200) = v10;
    *v10 = v0;
    v10[1] = sub_100200B34;
    return static ActivityRendererFactory.activityRenderer(for:payload:)(v0 + 56, v9, *(_QWORD *)(v0 + 168));
  }
}

uint64_t sub_100200B34()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));
  return swift_task_switch(sub_100200B80, *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192));
}

void sub_100200B80()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = swift_release(*(_QWORD *)(v0 + 176));
  if (!*(_QWORD *)(v0 + 80))
  {
    (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152), v1);
    sub_10001BE90(v0 + 56, &qword_1008276D0);
LABEL_36:
    v40 = *(_QWORD *)(v0 + 136);
    v41 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v41);
    swift_task_dealloc(v40);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = *(_QWORD *)(v0 + 112);
  sub_10002411C((__int128 *)(v0 + 56), v0 + 16);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  sub_100016804((_QWORD *)(v0 + 16), v3);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = objc_msgSend(v5, "image");

  KeyPath = swift_getKeyPath(&unk_10062CF58);
  v8 = swift_getKeyPath(&unk_10062CF80);
  *(_QWORD *)(v0 + 96) = v6;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 96, v2, KeyPath, v8);
  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  sub_100016804((_QWORD *)(v0 + 16), v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  v12 = v11;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v22 = v11;
    else
      v22 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v13 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (!v13)
      goto LABEL_20;
  }
  else
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (!v13)
      goto LABEL_20;
  }
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  for (i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
    else
      v16 = *(id *)(v12 + 8 * i + 32);
    v17 = v16;
    v18 = objc_msgSend(v16, "attributedText");

    if (v18)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v21 >= v20 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
      specialized Array._endMutation()(v15);
    }
  }
LABEL_20:
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v12);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_22;
LABEL_35:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v32 = *(_QWORD *)(v0 + 160);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 112);
    v36 = swift_getKeyPath(&unk_10062CFA0);
    v37 = swift_getKeyPath(&unk_10062CFC8);
    *(_QWORD *)(v0 + 104) = _swiftEmptyArrayStorage;
    swift_retain(v35);
    static Published.subscript.setter(v0 + 104, v35, v36, v37);
    v38 = swift_getKeyPath(&unk_10062CFE8);
    v39 = swift_getKeyPath(&unk_10062D010);
    *(_BYTE *)(v0 + 208) = 1;
    swift_retain(v35);
    static Published.subscript.setter(v0 + 208, v35, v38, v39);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + 16));
    goto LABEL_36;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v31 = _swiftEmptyArrayStorage;
  else
    v31 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v23 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v23)
    goto LABEL_35;
LABEL_22:
  sub_1001218E4(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v25 = *(_QWORD *)(v0 + 128);
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, _swiftEmptyArrayStorage);
      else
        v26 = (id)_swiftEmptyArrayStorage[v24 + 4];
      AttributedString.init(_:)(v26);
      v28 = _swiftEmptyArrayStorage[2];
      v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1)
        sub_1001218E4(v27 > 1, v28 + 1, 1);
      v29 = *(_QWORD *)(v0 + 136);
      v30 = *(_QWORD *)(v0 + 120);
      ++v24;
      _swiftEmptyArrayStorage[2] = v28 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v28, v29, v30);
    }
    while (v23 != v24);
    goto LABEL_35;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_100200FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__iconImage;
  v2 = sub_100047110(&qword_1008276D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__labels;
  v4 = sub_100047110(&qword_1008276E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel__isLoaded;
  v6 = sub_100047110(&qword_10083B500);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_10001BE90(v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_payload, &qword_10081E640);
  sub_100011F54(v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_reply, (uint64_t (*)(_QWORD))&type metadata accessor for Reply);
  sub_10001BE90(v0 + OBJC_IVAR____TtCV10FitnessApp28ActivitySharingReplyEditView33ActivitySharingReplyEditViewModel_renderer, &qword_1008276D0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002010D8()
{
  return type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
}

uint64_t type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100827548, (uint64_t)&nominal type descriptor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel);
}

void sub_1002010F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[6];

  sub_1000DBE4C(319, &qword_100827560, &qword_100827568);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000DBE4C(319, &qword_100827570, (uint64_t *)&unk_100827578);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10004D6D8();
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10014F7C0(319);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for Reply(319);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            v12[5] = "(";
            swift_updateClassMetadata2(a1, 256, 6, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t sub_1002011F4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ActivitySharingReplyEditView.ActivitySharingReplyEditViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100201230@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062CF58);
  v5 = swift_getKeyPath(&unk_10062CF80);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1002012B0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062CF58);
  v5 = swift_getKeyPath(&unk_10062CF80);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_100201328@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062CFA0);
  v5 = swift_getKeyPath(&unk_10062CFC8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1002013A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062CFA0);
  v5 = swift_getKeyPath(&unk_10062CFC8);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10020141C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10062CFE8);
  v5 = swift_getKeyPath(&unk_10062D010);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100201498(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10062CFE8);
  v5 = swift_getKeyPath(&unk_10062D010);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100201518(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  id v51;
  char v53;
  uint64_t v54;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[3];
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    v10 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v10;
    v11 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v11;
    v12 = a2[9];
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v13 = a2[11];
    *(_QWORD *)(a1 + 88) = v13;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v14 = a2[13];
    v54 = a2[14];
    v53 = *((_BYTE *)a2 + 120);
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    swift_retain(v13);
    sub_1002017D4(v14, v54);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v54;
    *(_BYTE *)(a1 + 120) = v53;
    v15 = a3[9];
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100047110(&qword_10081E640);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = a3[10];
    v22 = a1 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *(_QWORD *)v22 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)(v22 + 8) = v24;
    *(_BYTE *)(v22 + 16) = *((_BYTE *)a2 + v21 + 16);
    v25 = (int *)type metadata accessor for Reply(0);
    v26 = v25[6];
    v27 = v22 + v26;
    v28 = v23 + v26;
    v29 = type metadata accessor for UUID(0);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
    v31 = swift_bridgeObjectRetain(v24);
    v30(v27, v28, v29, v31);
    v32 = v25[7];
    v33 = (_QWORD *)(v22 + v32);
    v34 = (_QWORD *)(v23 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v25[8];
    v37 = v22 + v36;
    v38 = v23 + v36;
    v39 = type metadata accessor for Date(0);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v39 - 8) + 16);
    v41 = swift_bridgeObjectRetain(v35);
    v40(v37, v38, v39, v41);
    v42 = a3[11];
    v43 = a1 + v42;
    v44 = (uint64_t)a2 + v42;
    v45 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v45;
    v46 = *(_OWORD *)(v44 + 48);
    *(_OWORD *)(v43 + 32) = *(_OWORD *)(v44 + 32);
    *(_OWORD *)(v43 + 48) = v46;
    v47 = *(_OWORD *)(v44 + 80);
    *(_OWORD *)(v43 + 64) = *(_OWORD *)(v44 + 64);
    *(_OWORD *)(v43 + 80) = v47;
    v48 = *(_OWORD *)(v44 + 112);
    *(_OWORD *)(v43 + 96) = *(_OWORD *)(v44 + 96);
    *(_OWORD *)(v43 + 112) = v48;
    *(_OWORD *)(v43 + 128) = *(_OWORD *)(v44 + 128);
    v49 = *(void **)(v44 + 144);
    *(_QWORD *)(v43 + 144) = v49;
    *(_BYTE *)(v43 + 152) = *(_BYTE *)(v44 + 152);
    v50 = *(_OWORD *)(v44 + 176);
    *(_OWORD *)(v43 + 160) = *(_OWORD *)(v44 + 160);
    *(_OWORD *)(v43 + 176) = v50;
    *(_BYTE *)(v43 + 192) = *(_BYTE *)(v44 + 192);
    v51 = v49;
  }
  return a1;
}

uint64_t sub_1002017D4(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

void sub_1002017DC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_release(a1[9]);
  swift_release(a1[11]);
  sub_100201918(a1[13], a1[14]);
  v4 = (char *)a1 + a2[9];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + a2[10];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  v8 = (int *)type metadata accessor for Reply(0);
  v9 = &v7[v8[6]];
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v8[7] + 8]);
  v11 = &v7[v8[8]];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

}

uint64_t sub_100201918(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_100201920(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  id v50;
  char v52;
  uint64_t v53;

  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = a2[3];
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[9];
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v12 = a2[11];
  *(_QWORD *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v13 = a2[13];
  v53 = a2[14];
  v52 = *((_BYTE *)a2 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  swift_retain(v12);
  sub_1002017D4(v13, v53);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v53;
  *(_BYTE *)(a1 + 120) = v52;
  v14 = a3[9];
  v15 = (void *)(a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100047110(&qword_10081E640);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = *(uint64_t *)((char *)a2 + v20 + 8);
  *(_QWORD *)v21 = *(uint64_t *)((char *)a2 + v20);
  *(_QWORD *)(v21 + 8) = v23;
  *(_BYTE *)(v21 + 16) = *((_BYTE *)a2 + v20 + 16);
  v24 = (int *)type metadata accessor for Reply(0);
  v25 = v24[6];
  v26 = v21 + v25;
  v27 = v22 + v25;
  v28 = type metadata accessor for UUID(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
  v30 = swift_bridgeObjectRetain(v23);
  v29(v26, v27, v28, v30);
  v31 = v24[7];
  v32 = (_QWORD *)(v21 + v31);
  v33 = (_QWORD *)(v22 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v24[8];
  v36 = v21 + v35;
  v37 = v22 + v35;
  v38 = type metadata accessor for Date(0);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
  v40 = swift_bridgeObjectRetain(v34);
  v39(v36, v37, v38, v40);
  v41 = a3[11];
  v42 = a1 + v41;
  v43 = (uint64_t)a2 + v41;
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  v45 = *(_OWORD *)(v43 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_OWORD *)(v42 + 48) = v45;
  v46 = *(_OWORD *)(v43 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(v43 + 64);
  *(_OWORD *)(v42 + 80) = v46;
  v47 = *(_OWORD *)(v43 + 112);
  *(_OWORD *)(v42 + 96) = *(_OWORD *)(v43 + 96);
  *(_OWORD *)(v42 + 112) = v47;
  *(_OWORD *)(v42 + 128) = *(_OWORD *)(v43 + 128);
  v48 = *(void **)(v43 + 144);
  *(_QWORD *)(v42 + 144) = v48;
  *(_BYTE *)(v42 + 152) = *(_BYTE *)(v43 + 152);
  v49 = *(_OWORD *)(v43 + 176);
  *(_OWORD *)(v42 + 160) = *(_OWORD *)(v43 + 160);
  *(_OWORD *)(v42 + 176) = v49;
  *(_BYTE *)(v42 + 192) = *(_BYTE *)(v43 + 192);
  v50 = v48;
  return a1;
}

uint64_t *sub_100201BB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[5] = a2[5];
  v14 = a2[6];
  v15 = a1[6];
  a1[6] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[7] = a2[7];
  v16 = a2[8];
  v17 = a1[8];
  a1[8] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a1[9];
  v19 = a2[9];
  a1[9] = v19;
  swift_retain(v19);
  swift_release(v18);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v20 = a1[11];
  v21 = a2[11];
  a1[11] = v21;
  swift_retain(v21);
  swift_release(v20);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v22 = a2[13];
  v23 = a2[14];
  v24 = *((_BYTE *)a2 + 120);
  sub_1002017D4(v22, v23);
  v25 = a1[13];
  v26 = a1[14];
  a1[13] = v22;
  a1[14] = v23;
  *((_BYTE *)a1 + 120) = v24;
  sub_100201918(v25, v26);
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_6;
  }
  if (v34)
  {
LABEL_6:
    v35 = sub_100047110(&qword_10081E640);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_7:
  v36 = a3[10];
  v37 = (uint64_t)a1 + v36;
  v38 = (uint64_t)a2 + v36;
  *(_QWORD *)v37 = *(uint64_t *)((char *)a2 + v36);
  v39 = *(uint64_t *)((char *)a2 + v36 + 8);
  v40 = *(uint64_t *)((char *)a1 + v36 + 8);
  *(_QWORD *)(v37 + 8) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
  v41 = (int *)type metadata accessor for Reply(0);
  v42 = v41[6];
  v43 = v37 + v42;
  v44 = v38 + v42;
  v45 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = v41[7];
  v47 = (_QWORD *)(v37 + v46);
  v48 = (_QWORD *)(v38 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v41[8];
  v52 = v37 + v51;
  v53 = v38 + v51;
  v54 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = a3[11];
  v56 = (uint64_t)a1 + v55;
  v57 = (uint64_t)a2 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
  *(_QWORD *)(v56 + 24) = *(_QWORD *)(v57 + 24);
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
  *(_QWORD *)(v56 + 40) = *(_QWORD *)(v57 + 40);
  *(_QWORD *)(v56 + 48) = *(_QWORD *)(v57 + 48);
  *(_QWORD *)(v56 + 56) = *(_QWORD *)(v57 + 56);
  *(_QWORD *)(v56 + 64) = *(_QWORD *)(v57 + 64);
  *(_QWORD *)(v56 + 72) = *(_QWORD *)(v57 + 72);
  *(_QWORD *)(v56 + 80) = *(_QWORD *)(v57 + 80);
  *(_QWORD *)(v56 + 88) = *(_QWORD *)(v57 + 88);
  *(_QWORD *)(v56 + 96) = *(_QWORD *)(v57 + 96);
  *(_QWORD *)(v56 + 104) = *(_QWORD *)(v57 + 104);
  *(_QWORD *)(v56 + 112) = *(_QWORD *)(v57 + 112);
  *(_QWORD *)(v56 + 120) = *(_QWORD *)(v57 + 120);
  *(_QWORD *)(v56 + 128) = *(_QWORD *)(v57 + 128);
  *(_QWORD *)(v56 + 136) = *(_QWORD *)(v57 + 136);
  v58 = *(void **)(v57 + 144);
  v59 = *(void **)(v56 + 144);
  *(_QWORD *)(v56 + 144) = v58;
  v60 = v58;

  *(_BYTE *)(v56 + 152) = *(_BYTE *)(v57 + 152);
  *(_QWORD *)(v56 + 160) = *(_QWORD *)(v57 + 160);
  *(_QWORD *)(v56 + 168) = *(_QWORD *)(v57 + 168);
  *(_QWORD *)(v56 + 176) = *(_QWORD *)(v57 + 176);
  *(_QWORD *)(v56 + 184) = *(_QWORD *)(v57 + 184);
  *(_BYTE *)(v56 + 192) = *(_BYTE *)(v57 + 192);
  return a1;
}

uint64_t sub_100201F80(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v7 = a3[9];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = v6;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100047110(&qword_10081E640);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[10];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)(a2 + v13);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(a2 + v13 + 16);
  v16 = (int *)type metadata accessor for Reply(0);
  v17 = v16[6];
  v18 = v14 + v17;
  v19 = v15 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)(v14 + v16[7]) = *(_OWORD *)(v15 + v16[7]);
  v21 = v16[8];
  v22 = v14 + v21;
  v23 = v15 + v21;
  v24 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_OWORD *)(v27 + 176);
  *(_OWORD *)(v26 + 160) = *(_OWORD *)(v27 + 160);
  *(_OWORD *)(v26 + 176) = v28;
  *(_BYTE *)(v26 + 192) = *(_BYTE *)(v27 + 192);
  v29 = *(_OWORD *)(v27 + 112);
  *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
  *(_OWORD *)(v26 + 112) = v29;
  v30 = *(_OWORD *)(v27 + 144);
  *(_OWORD *)(v26 + 128) = *(_OWORD *)(v27 + 128);
  *(_OWORD *)(v26 + 144) = v30;
  v31 = *(_OWORD *)(v27 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v26 + 48) = v31;
  v32 = *(_OWORD *)(v27 + 80);
  *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
  *(_OWORD *)(v26 + 80) = v32;
  v33 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v33;
  return a1;
}

uint64_t *sub_100202164(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_release(v8);
  v9 = a1[4];
  a1[4] = a2[4];
  swift_release(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[8];
  v13 = a1[8];
  a1[7] = a2[7];
  a1[8] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a1[9];
  a1[9] = a2[9];
  swift_release(v14);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v15 = a1[11];
  a1[11] = a2[11];
  swift_release(v15);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  v16 = *((_BYTE *)a2 + 120);
  v17 = a1[13];
  v18 = a1[14];
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *((_BYTE *)a1 + 120) = v16;
  sub_100201918(v17, v18);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100047110(&qword_10081E640);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  v28 = a3[10];
  v29 = (uint64_t)a1 + v28;
  v30 = (uint64_t)a2 + v28;
  v31 = *(uint64_t *)((char *)a2 + v28 + 8);
  v32 = *(uint64_t *)((char *)a1 + v28 + 8);
  *(_QWORD *)v29 = *(uint64_t *)((char *)a2 + v28);
  *(_QWORD *)(v29 + 8) = v31;
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  v33 = (int *)type metadata accessor for Reply(0);
  v34 = v33[6];
  v35 = v29 + v34;
  v36 = v30 + v34;
  v37 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = v33[7];
  v39 = (_QWORD *)(v29 + v38);
  v40 = (uint64_t *)(v30 + v38);
  v42 = *v40;
  v41 = v40[1];
  v43 = v39[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease(v43);
  v44 = v33[8];
  v45 = v29 + v44;
  v46 = v30 + v44;
  v47 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v45, v46, v47);
  v48 = a3[11];
  v49 = (uint64_t)a1 + v48;
  v50 = (uint64_t)a2 + v48;
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
  *(_QWORD *)(v49 + 40) = *(_QWORD *)(v50 + 40);
  v52 = *(_OWORD *)(v50 + 64);
  *(_OWORD *)(v49 + 48) = *(_OWORD *)(v50 + 48);
  *(_OWORD *)(v49 + 64) = v52;
  v53 = *(_OWORD *)(v50 + 96);
  *(_OWORD *)(v49 + 80) = *(_OWORD *)(v50 + 80);
  *(_OWORD *)(v49 + 96) = v53;
  v54 = *(_OWORD *)(v50 + 128);
  *(_OWORD *)(v49 + 112) = *(_OWORD *)(v50 + 112);
  *(_OWORD *)(v49 + 128) = v54;
  v55 = *(void **)((char *)a1 + v48 + 144);
  *(_QWORD *)(v49 + 144) = *(_QWORD *)(v50 + 144);

  *(_BYTE *)(v49 + 152) = *(_BYTE *)(v50 + 152);
  *(_QWORD *)(v49 + 160) = *(_QWORD *)(v50 + 160);
  *(_OWORD *)(v49 + 168) = *(_OWORD *)(v50 + 168);
  *(_QWORD *)(v49 + 184) = *(_QWORD *)(v50 + 184);
  *(_BYTE *)(v49 + 192) = *(_BYTE *)(v50 + 192);
  return a1;
}

uint64_t sub_100202440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020244C);
}

uint64_t sub_10020244C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_10081E640);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = type metadata accessor for Reply(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1002024F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002024FC);
}

uint64_t sub_1002024FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100047110(&qword_10081E640);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for Reply(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ActivitySharingReplyEditView(uint64_t a1)
{
  return sub_100024334(a1, qword_100827740, (uint64_t)&nominal type descriptor for ActivitySharingReplyEditView);
}

void sub_1002025B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_10062D030;
  v6[1] = &unk_10062D048;
  v6[2] = &unk_10062D060;
  v6[3] = &unk_10062D078;
  v6[4] = &unk_10062D090;
  sub_10014F7C0(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Reply(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = &unk_10062D0A8;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_100202670(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AFA54, 1);
}

uint64_t sub_100202684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ActivitySharingReplyEditView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1008277A4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000DA0E4;
  return sub_100200108(v3);
}

uint64_t sub_1002026EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for ActivitySharingReplyEditView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 64));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 88));
  sub_100201918(*(_QWORD *)(v6 + 104), *(_QWORD *)(v6 + 112));
  v7 = v0 + v4 + v1[9];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = v3 | 7;
  v11 = v4 + v5;
  v12 = v6 + v1[10];
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  v13 = (int *)type metadata accessor for Reply(0);
  v14 = v12 + v13[6];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[7] + 8));
  v16 = v12 + v13[8];
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);

  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10020286C()
{
  return sub_100202A14((uint64_t (*)(uint64_t))sub_1001FED68);
}

unint64_t sub_100202878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008277F0;
  if (!qword_1008277F0)
  {
    v1 = sub_100007050(&qword_1008277E8);
    sub_1002028FC();
    sub_100028384(&qword_10081F650, &qword_10081F658, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008277F0);
  }
  return result;
}

unint64_t sub_1002028FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008277F8;
  if (!qword_1008277F8)
  {
    v1 = sub_100007050(&qword_100827800);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008277F8);
  }
  return result;
}

unint64_t sub_100202968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827878;
  if (!qword_100827878)
  {
    v1 = sub_100007050(&qword_100827840);
    sub_100028384(&qword_100827880, &qword_100827838, (uint64_t)&protocol conformance descriptor for TextField<A>);
    sub_100028384(&qword_100823850, &qword_100823858, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827878);
  }
  return result;
}

uint64_t sub_100202A08()
{
  return sub_100202A14(sub_1001FFAD4);
}

uint64_t sub_100202A14(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ActivitySharingReplyEditView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void sub_100202A54(uint64_t a1, _BYTE *a2)
{
  type metadata accessor for ActivitySharingReplyEditView(0);
  sub_1001FFB30(a1, a2);
}

unint64_t sub_100202AA0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100827888;
  if (!qword_100827888)
  {
    v1 = sub_100007050(&qword_100827850);
    v2[0] = sub_100007050(&qword_100827840);
    v2[1] = sub_100202968();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.focused(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827888);
  }
  return result;
}

unint64_t sub_100202B38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008278E0;
  if (!qword_1008278E0)
  {
    v1 = sub_100007050(&qword_1008277B0);
    sub_100028384(&qword_1008278E8, &qword_100827790, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000083D8((unint64_t *)&qword_100823278, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008278E0);
  }
  return result;
}

uint64_t sub_100202BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(sub_100047110(&qword_10081E640) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (int *)type metadata accessor for Reply(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v3, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v3, v9);
  v11 = v2 | v7 | 7;
  v12 = (v3 + v4 + v7) & ~v7;
  v13 = v12 + v8;
  v14 = v0 + v12;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12 + 8));
  v15 = v14 + v5[6];
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v5[7] + 8));
  v17 = v14 + v5[8];
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_100202D08()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_100047110(&qword_10081E640) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Reply(0) - 8) + 80);
  return sub_1001FE6B0(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_100202D6C(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 144);
  return a1;
}

id sub_10020307C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OnboardingNavigationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for OnboardingNavigationController()
{
  return objc_opt_self(CHOnboardingNavigationController);
}

uint64_t sub_10020322C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for PickerLabelStyle()
{
  return &type metadata for PickerLabelStyle;
}

uint64_t sub_100203260(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AFB00, 1);
}

uint64_t sub_100203270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t result;
  uint64_t v20;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  v11 = enum case for Font.Design.default(_:);
  v12 = type metadata accessor for Font.Design(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v6, v11, v12);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
  v15 = static Font.Weight.semibold.getter(v14);
  v16 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v15, 0);
  sub_100184224((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v17 = Font.leading(_:)(v3, v16);
  v18 = swift_release(v16);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v18);
  qword_10086A180 = v17;
  return result;
}

uint64_t sub_100203438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.caption2(_:), v4);
  static Font.Weight.semibold.getter(v8);
  v9 = static Font.system(_:weight:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v10 = Font.leading(_:)(v3, v9);
  swift_release(v9);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_10086A188 = v10;
  return result;
}

id sub_100203564@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  id result;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v3 = sub_100047110(&qword_1008279A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_1008279A8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*((_QWORD *)v1 + 3) + 16);
  v57 = v3;
  v58 = a1;
  if (v11 < 2)
  {
    v22 = (void *)*((_QWORD *)v1 + 5);
    v59 = *v1;
    v60 = *((_QWORD *)v1 + 2);
    v23 = sub_100047110(&qword_100823EE8);
    Binding.wrappedValue.getter(v23);
    result = objc_msgSend(v22, "stringFromInteger:", v62);
    if (result)
    {
      v24 = result;
      v56 = (uint64_t *)v6;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v27 = v26;

      *(_QWORD *)&v59 = v25;
      *((_QWORD *)&v59 + 1) = v27;
      v28 = sub_100038CA0();
      v29 = Text.init<A>(_:)(&v59, &type metadata for String, v28);
      v32 = v31;
      v34 = v33;
      v36 = v35;
      if (qword_10081D790 != -1)
        swift_once(&qword_10081D790, sub_100203270);
      v37 = v34 & 1;
      v38 = Text.font(_:)(qword_10086A180, v29, v32, v34 & 1, v36, v30);
      v40 = v39;
      v42 = v41;
      v44 = v43 & 1;
      sub_1000E4458(v29, v32, v37);
      v45 = swift_bridgeObjectRelease(v36);
      v46 = static Color.secondary.getter(v45);
      v47 = Text.foregroundColor(_:)(v46, v38, v40, v44, v42);
      v49 = v48;
      v51 = v50;
      v53 = v52;
      swift_release(v46);
      sub_1000E4458(v38, v40, v44);
      swift_bridgeObjectRelease(v42);
      *(_QWORD *)v5 = v47;
      *((_QWORD *)v5 + 1) = v49;
      v5[16] = v51 & 1;
      *((_QWORD *)v5 + 3) = v53;
      swift_storeEnumTagMultiPayload(v5, v57, 1);
      v54 = sub_100028384(&qword_1008279B0, &qword_1008279A8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      return (id)_ConditionalContent<>.init(storage:)(v5, v56, &type metadata for Text, v54, &protocol witness table for Text);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v56 = &v55;
    v12 = __chkstk_darwin(v8);
    *(&v55 - 2) = (uint64_t)v1;
    __chkstk_darwin(v12);
    *(&v55 - 2) = (uint64_t)v1;
    v13 = sub_100047110(&qword_1008279B8);
    v14 = sub_100047110(&qword_1008279C0);
    v15 = sub_100007050(&qword_1008279C8);
    v16 = sub_100028384(&qword_1008279D0, &qword_1008279C8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v17 = sub_1002043F0();
    *(_QWORD *)&v59 = v15;
    *((_QWORD *)&v59 + 1) = &type metadata for PickerLabelStyle;
    v60 = v16;
    v61 = v17;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v19 = sub_100028384(&qword_1008279E0, &qword_1008279C0, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    Menu.init(content:label:)(sub_1002043E0, &v55 - 4, sub_1002043E8, &v55 - 4, v13, v14, OpaqueTypeConformance2, v19);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v10, v6);
    swift_storeEnumTagMultiPayload(v5, v57, 0);
    v20 = sub_100028384(&qword_1008279B0, &qword_1008279A8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    _ConditionalContent<>.init(storage:)(v5, v6, &type metadata for Text, v20, &protocol witness table for Text);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t sub_100203974(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v13[16];
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v2 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v15 = *a1;
  v16 = *((_QWORD *)a1 + 2);
  v9 = sub_100047110(&qword_100823EE8);
  Binding.projectedValue.getter(v9);
  v14 = a1;
  v10 = sub_100047110(&qword_100827A08);
  v11 = sub_1002044E0();
  return Picker<>.init(_:selection:content:)(v2, v4, v6 & 1, v8, &v17, sub_1002044D8, v13, &type metadata for Int, v10, &protocol witness table for Int, v11);
}

uint64_t sub_100203A60(uint64_t *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[3];
  v19 = v2;
  v16 = v2;
  KeyPath = swift_getKeyPath(&unk_10062D2C0);
  v4 = *a1;
  v5 = a1[1];
  v6 = (void *)a1[5];
  v17 = a1[4];
  v18 = v4;
  v7 = (_OWORD *)swift_allocObject(&unk_10078E510, 64, 7);
  v8 = *((_OWORD *)a1 + 1);
  v7[1] = *(_OWORD *)a1;
  v7[2] = v8;
  v7[3] = *((_OWORD *)a1 + 2);
  swift_bridgeObjectRetain(v2);
  sub_100126C98(&v19);
  sub_10010799C(&v18);
  swift_retain(v5);
  sub_10010799C(&v17);
  v9 = v6;
  v10 = sub_100047110(&qword_100827A58);
  v11 = sub_100047110(&qword_100827A20);
  v12 = sub_100028384(&qword_100827A60, &qword_100827A58, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = sub_100204698();
  v14 = sub_100204544();
  return ForEach<>.init(_:id:content:)(&v16, KeyPath, sub_100204690, v7, v10, v11, v12, v13, v14);
}

id sub_100203B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = *a1;
  result = objc_msgSend(*(id *)(a2 + 40), "stringFromInteger:", *a1);
  if (result)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    v14[0] = v7;
    v14[1] = v9;
    v10 = sub_100038CA0();
    result = (id)Text.init<A>(_:)(v14, &type metadata for String, v10);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = v12 & 1;
    *(_QWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v4;
    *(_BYTE *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = v4;
    *(_WORD *)(a3 + 56) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100203C40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v2 = sub_100047110(&qword_1008279C8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1;
  v12 = a1;
  v6 = sub_100047110(&qword_1008279E8);
  v7 = sub_100204444();
  Label.init(title:icon:)(sub_100204434, v13, sub_10020443C, v11, &type metadata for Text, v6, &protocol witness table for Text, v7);
  v8 = sub_100028384(&qword_1008279D0, &qword_1008279C8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v9 = sub_1002043F0();
  View.labelStyle<A>(_:)(v9, v2, &type metadata for PickerLabelStyle, v8, v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100203D5C(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = (void *)*((_QWORD *)a1 + 5);
  v35 = *a1;
  v36 = *((_QWORD *)a1 + 2);
  v4 = sub_100047110(&qword_100823EE8);
  Binding.wrappedValue.getter(v4);
  v5 = objc_msgSend(v3, "stringFromInteger:", v37);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

    *(_QWORD *)&v35 = v7;
    *((_QWORD *)&v35 + 1) = v9;
    v10 = sub_100038CA0();
    v11 = Text.init<A>(_:)(&v35, &type metadata for String, v10);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    if (qword_10081D790 != -1)
      swift_once(&qword_10081D790, sub_100203270);
    v19 = v16 & 1;
    v20 = Text.font(_:)(qword_10086A180, v11, v14, v19, v18, v12);
    v22 = v21;
    v24 = v23;
    v26 = v25 & 1;
    sub_1000E4458(v11, v14, v19);
    v27 = swift_bridgeObjectRelease(v18);
    v28 = static Color.secondary.getter(v27);
    v29 = Text.foregroundColor(_:)(v28, v20, v22, v26, v24);
    v31 = v30;
    LOBYTE(v19) = v32;
    v34 = v33;
    swift_release(v28);
    sub_1000E4458(v20, v22, v26);
    swift_bridgeObjectRelease(v24);
    *(_QWORD *)a2 = v29;
    *(_QWORD *)(a2 + 8) = v31;
    *(_BYTE *)(a2 + 16) = v19 & 1;
    *(_QWORD *)(a2 + 24) = v34;
  }
  else
  {
    __break(1u);
  }
}

double sub_100203EFC@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = Image.init(systemName:)(0xD000000000000017, 0x800000010068FB90);
  if (qword_10081D798 != -1)
    swift_once(&qword_10081D798, sub_100203438);
  v5 = qword_10086A188;
  KeyPath = swift_getKeyPath(&unk_10062D258);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = swift_getKeyPath(&unk_10062D288);
  *a2 = v4;
  a2[1] = KeyPath;
  a2[2] = v5;
  a2[3] = v8;
  a2[4] = v7;
  swift_retain(v5);
  *(_QWORD *)&result = swift_retain(v7).n128_u64[0];
  return result;
}

id sub_100203FB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100203564(a1);
}

uint64_t sub_100203FEC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  char *v25;

  v25 = a1;
  v1 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v24 = *(_QWORD *)(v1 - 8);
  v2 = v24;
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v24 - v6;
  v8 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v24 - v14;
  v16 = LabelStyleConfiguration.title.getter(v13);
  LabelStyleConfiguration.icon.getter(v16);
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17(v12, v15, v8);
  v18 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v18(v5, v7, v1);
  v19 = v25;
  v17(v25, v12, v8);
  v20 = sub_100047110(&qword_100827988);
  v18(&v19[*(int *)(v20 + 48)], v5, v1);
  v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v7, v1);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v15, v8);
  v21(v5, v1);
  return ((uint64_t (*)(char *, uint64_t))v22)(v12, v8);
}

uint64_t sub_10020418C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4000000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = sub_100047110(&qword_100827980);
  return sub_100203FEC((char *)(a2 + *(int *)(v3 + 44)));
}

void destroy for YearlyDropdownMenu(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));

}

uint64_t *initializeWithCopy for YearlyDropdownMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[4];
  v7 = (void *)a2[5];
  a1[4] = v6;
  a1[5] = (uint64_t)v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  v8 = v7;
  return a1;
}

uint64_t *assignWithCopy for YearlyDropdownMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = (void *)a2[5];
  v13 = (void *)a1[5];
  a1[5] = (uint64_t)v12;
  v14 = v12;

  return a1;
}

_QWORD *assignWithTake for YearlyDropdownMenu(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = (void *)a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for YearlyDropdownMenu()
{
  return &type metadata for YearlyDropdownMenu;
}

uint64_t sub_1002043A4()
{
  return sub_100028384(&qword_100827990, &qword_100827998, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_1002043D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AFB28, 1);
}

uint64_t sub_1002043E0()
{
  uint64_t v0;

  return sub_100203974(*(__int128 **)(v0 + 16));
}

uint64_t sub_1002043E8()
{
  uint64_t v0;

  return sub_100203C40(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1002043F0()
{
  unint64_t result;

  result = qword_1008279D8;
  if (!qword_1008279D8)
  {
    result = swift_getWitnessTable(&unk_10062D1B4, &type metadata for PickerLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1008279D8);
  }
  return result;
}

void sub_100204434(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100203D5C(*(__int128 **)(v1 + 16), a1);
}

double sub_10020443C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100203EFC(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100204444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008279F0;
  if (!qword_1008279F0)
  {
    v1 = sub_100007050(&qword_1008279E8);
    sub_1001D2DD0();
    sub_100028384(&qword_1008279F8, &qword_100827A00, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008279F0);
  }
  return result;
}

uint64_t sub_1002044D8()
{
  uint64_t v0;

  return sub_100203A60(*(uint64_t **)(v0 + 16));
}

unint64_t sub_1002044E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827A10;
  if (!qword_100827A10)
  {
    v1 = sub_100007050(&qword_100827A08);
    sub_100204544();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100827A10);
  }
  return result;
}

unint64_t sub_100204544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827A18;
  if (!qword_100827A18)
  {
    v1 = sub_100007050(&qword_100827A20);
    sub_1002045C8();
    sub_100028384(&qword_100827A48, &qword_100827A50, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827A18);
  }
  return result;
}

unint64_t sub_1002045C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827A28;
  if (!qword_100827A28)
  {
    v1 = sub_100007050(&qword_100827A30);
    sub_100028384(&qword_100827A38, &qword_100827A40, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827A28);
  }
  return result;
}

uint64_t sub_10020464C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

id sub_100204690@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100203B98(a1, v2 + 16, a2);
}

unint64_t sub_100204698()
{
  unint64_t result;

  result = qword_100827A68;
  if (!qword_100827A68)
  {
    result = swift_getWitnessTable(&unk_10063BD14, &type metadata for MetricDataProviderTimeScale);
    atomic_store(result, (unint64_t *)&qword_100827A68);
  }
  return result;
}

unint64_t sub_1002046E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827A70;
  if (!qword_100827A70)
  {
    v1 = sub_100007050(&qword_100827A78);
    sub_100028384(&qword_1008279B0, &qword_1008279A8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100827A70);
  }
  return result;
}

uint64_t sub_100204764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  id v20;
  void *v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;

  v27 = a1;
  v1 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(NSTimeZone), "localTimeZone");
  static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

  Date.init()(v16);
  v17 = TimeZone.secondsFromGMT(for:)(v10);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (__OFSUB__(0, v17))
  {
    __break(1u);
  }
  else
  {
    v20 = objc_msgSend(v26, "_startDate");
    if (v20)
    {
      v21 = v20;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v22(v3, 0, 1, v7);
    }
    else
    {
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v22(v3, 1, 1, v7);
    }
    sub_1001B9DF4((uint64_t)v3, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    {
      sub_10018DFE8((uint64_t)v6);
      v23 = 1;
      v24 = v27;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v6, v7);
      v25 = sub_10018DFE8((uint64_t)v6);
      v24 = v27;
      Date.addingTimeInterval(_:)(v25, (double)-v17);
      v18(v10, v7);
      v23 = 0;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v24, v23, 1, v7);
  }
  return result;
}

id sub_1002049C4(char a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v4 = objc_msgSend(objc_allocWithZone((Class)HKActivitySummary), "init");
  objc_msgSend(v4, "setActivityMoveMode:", 1);
  v5 = (void *)objc_opt_self(HKUnit);
  v6 = objc_msgSend(v5, "kilocalorieUnit");
  v7 = (void *)objc_opt_self(HKQuantity);
  v8 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v6, 100.0);

  objc_msgSend(v4, "setActiveEnergyBurned:", v8);
  v9 = objc_msgSend(v5, "kilocalorieUnit");
  v10 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v9, 100.0);

  objc_msgSend(v4, "setActiveEnergyBurnedGoal:", v10);
  objc_msgSend(v4, "setDeprecatedPauseForInternalSwiftClient:", a2 & 1);
  if ((a1 & 1) == 0)
  {
    v11 = objc_msgSend(v5, "minuteUnit");
    v12 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v11, 30.0);

    objc_msgSend(v4, "setAppleExerciseTime:", v12);
    v13 = objc_msgSend(v5, "minuteUnit");
    v14 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v13, 30.0);

    objc_msgSend(v4, "setExerciseTimeGoal:", v14);
    v15 = objc_msgSend(v5, "countUnit");
    v16 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v15, 12.0);

    objc_msgSend(v4, "setStandHoursGoal:", v16);
    v17 = objc_msgSend(v5, "countUnit");
    v18 = objc_msgSend(v7, "quantityWithUnit:doubleValue:", v17, 12.0);

    objc_msgSend(v4, "setAppleStandHours:", v18);
  }
  return v4;
}

unint64_t sub_100204C80()
{
  unint64_t result;

  result = qword_100827A80;
  if (!qword_100827A80)
  {
    result = swift_getWitnessTable(&unk_10062D370, &type metadata for OpenFitnessPlusForYouIntent);
    atomic_store(result, (unint64_t *)&qword_100827A80);
  }
  return result;
}

unint64_t sub_100204CC8()
{
  unint64_t result;

  result = qword_100827A88;
  if (!qword_100827A88)
  {
    result = swift_getWitnessTable(&unk_10062D398, &type metadata for OpenFitnessPlusForYouIntent);
    atomic_store(result, (unint64_t *)&qword_100827A88);
  }
  return result;
}

uint64_t sub_100204D0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AFBB0, 1);
}

uint64_t sub_100204D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B1618(a1, a2, a3, (uint64_t (*)(void))sub_100204D28);
}

unint64_t sub_100204D28()
{
  unint64_t result;

  result = qword_100827A90;
  if (!qword_100827A90)
  {
    result = swift_getWitnessTable(&unk_10062D2E0, &type metadata for OpenFitnessPlusForYouIntent);
    atomic_store(result, (unint64_t *)&qword_100827A90);
  }
  return result;
}

uint64_t sub_100204D6C(uint64_t a1)
{
  return sub_1001B167C(a1, qword_10086A190, 0x726F46206E65704FLL, 0xEC000000756F5920);
}

uint64_t sub_100204D94(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[15] = a1;
  v2 = type metadata accessor for URLComponents(0);
  v1[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[17] = v3;
  v1[18] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081E640);
  v1[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10082E5E0);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v1[21] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v1[22] = v7;
  v1[23] = v8;
  return swift_task_switch(sub_100204E70, v7, v8);
}

uint64_t sub_100204E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSURL *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = v0[20];
  v2 = v0[16];
  v3 = v0[17];
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  URLComponents.init(string:)(0xD000000000000018, 0x800000010068FBD0);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v4(v1, 1, v2))
  {
    v5 = sub_100047110(&qword_1008396C0);
    v6 = type metadata accessor for URLQueryItem(0);
    v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) | 7);
    *(_OWORD *)(v7 + 16) = xmmword_100622F90;
    URLQueryItem.init(name:value:)(0x696669746E656469, 0xEA00000000007265, 0x756F59726F66, 0xE600000000000000);
    URLComponents.queryItems.setter(v7);
  }
  v8 = v0[20];
  v9 = v0[16];
  v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication", 0);
  v0[24] = v10;
  if (v4(v8, 1, v9))
  {
    v11 = v0[19];
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = 0;
  }
  else
  {
    v14 = v0[19];
    v16 = v0[17];
    v15 = v0[18];
    v17 = v0[16];
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v16 + 16))(v15, v0[20], v17);
    URLComponents.url.getter(v18);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    v13 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v14, 1, v19) != 1)
    {
      v22 = v0[19];
      URL._bridgeToObjectiveC()(v21);
      v13 = v23;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    }
  }
  v24 = v0 + 2;
  v0[25] = v13;
  v0[7] = v0 + 26;
  v0[2] = v0;
  v0[3] = sub_1002050FC;
  v25 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v26 = v0 + 10;
  v26[1] = 0x40000000;
  v26[2] = sub_1003123B4;
  v26[3] = &unk_10078E5F0;
  v26[4] = v25;
  objc_msgSend(v10, "openURL:withCompletionHandler:", v13, v26);
  return swift_continuation_await(v24);
}

uint64_t sub_1002050FC()
{
  uint64_t v0;

  return swift_task_switch(sub_100205140, *(_QWORD *)(*(_QWORD *)v0 + 176), *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t sub_100205140()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v0 + 192);
  v1 = *(void **)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 168));

  static IntentResult.result<>()(v6);
  sub_100112A1C(v3);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002051C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B13F8(&qword_10081D7A0, (uint64_t)qword_10086A190, (uint64_t)sub_100204D6C, a1);
}

uint64_t sub_1002051DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100827AEC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  return sub_100204D94(a1);
}

uint64_t sub_10020522C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100204D28();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100205258()
{
  unint64_t result;

  result = qword_100827AA0;
  if (!qword_100827AA0)
  {
    result = swift_getWitnessTable(&unk_10062D40C, &type metadata for SearchFitnessPlusIntent);
    atomic_store(result, (unint64_t *)&qword_100827AA0);
  }
  return result;
}

unint64_t sub_1002052A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100827AA8;
  if (!qword_100827AA8)
  {
    v1 = type metadata accessor for StringSearchCriteria(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for StringSearchCriteria, v1);
    atomic_store(result, (unint64_t *)&qword_100827AA8);
  }
  return result;
}

uint64_t sub_1002052E8(uint64_t a1)
{
  return sub_1001B167C(a1, qword_10086A1A8, 0x4620686372616553, 0xEF2B7373656E7469);
}

uint64_t sub_100205314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = sub_100047110(&qword_100827AE0);
  v1 = type metadata accessor for StringSearchScope(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + *(_QWORD *)(v2 + 72), v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_100622F90;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v5 + v4, enum case for StringSearchScope.general(_:), v1);
  qword_10086A1C0 = v5;
  return result;
}

_QWORD *sub_1002053A8@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_1002053C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[15] = a1;
  v2[16] = a2;
  v3 = type metadata accessor for URLComponents(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081E640);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StringSearchCriteria(0);
  v2[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[22] = v7;
  v2[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10082E5E0);
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100205498, 0, 0);
}

uint64_t sub_100205498()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0[24];
  v2 = v0[17];
  v3 = v0[18];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  URLComponents.init(string:)(0xD00000000000001ALL, 0x800000010068FBB0);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[25] = v4;
  if (!v4(v1, 1, v2))
  {
    v5 = (_QWORD *)v0[23];
    v6 = v0[21];
    v7 = v0[22];
    v8 = sub_100047110(&qword_1008396C0);
    v9 = type metadata accessor for URLQueryItem(0);
    v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) | 7);
    *(_OWORD *)(v10 + 16) = xmmword_100622F90;
    v11 = IntentParameter.wrappedValue.getter(v5);
    v12 = StringSearchCriteria.term.getter(v11);
    v14 = v13;
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v5, v6);
    URLQueryItem.init(name:value:)(0x7972657571, 0xE500000000000000, v12, v14);
    swift_bridgeObjectRelease(v14);
    URLComponents.queryItems.setter(v10);
  }
  v0[26] = objc_opt_self(UIApplication);
  v15 = type metadata accessor for MainActor(0);
  v0[27] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  return swift_task_switch(sub_100205648, v16, v17);
}

uint64_t sub_100205648()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 224) = objc_msgSend(*(id *)(v0 + 208), "sharedApplication", swift_release(*(_QWORD *)(v0 + 216)).n128_f64[0]);
  return swift_task_switch(sub_1002056A0, 0, 0);
}

uint64_t sub_1002056A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSURL *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 200))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 160);
  if (v3)
  {
    v5 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    v6 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v1, v2);
    URLComponents.url.getter(v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v2);
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v6 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) != 1)
    {
      v13 = *(_QWORD *)(v0 + 160);
      URL._bridgeToObjectiveC()(v12);
      v6 = v14;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  v15 = v0 + 16;
  *(_QWORD *)(v0 + 232) = v6;
  v16 = *(void **)(v0 + 224);
  *(_QWORD *)(v0 + 56) = v0 + 240;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10020581C;
  v17 = swift_continuation_init(v0 + 16, 0);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v18 = (_QWORD *)(v0 + 80);
  v18[1] = 0x40000000;
  v18[2] = sub_1003123B4;
  v18[3] = &unk_10078E5D8;
  v18[4] = v17;
  objc_msgSend(v16, "openURL:withCompletionHandler:", v6, v18);
  return swift_continuation_await(v15);
}

uint64_t sub_10020581C()
{
  return swift_task_switch(sub_100205868, 0, 0);
}

uint64_t sub_100205868()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);

  static IntentResult.result<>()(v6);
  sub_100112A1C(v3);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1002058EC@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  if (qword_10081D7B0 != -1)
    swift_once(&qword_10081D7B0, sub_100205314);
  v2 = qword_10086A1C0;
  *a1 = qword_10086A1C0;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

_QWORD *sub_10020593C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10020595C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for StringSearchCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  IntentParameter.wrappedValue.setter(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

unint64_t sub_1002059F8()
{
  unint64_t result;

  result = qword_100827AB0;
  if (!qword_100827AB0)
  {
    result = swift_getWitnessTable(&unk_10062D434, &type metadata for SearchFitnessPlusIntent);
    atomic_store(result, (unint64_t *)&qword_100827AB0);
  }
  return result;
}

unint64_t sub_100205A40()
{
  unint64_t result;

  result = qword_100827AB8;
  if (!qword_100827AB8)
  {
    result = swift_getWitnessTable(&unk_10062D4C4, &type metadata for SearchFitnessPlusIntent);
    atomic_store(result, (unint64_t *)&qword_100827AB8);
  }
  return result;
}

unint64_t sub_100205A88()
{
  unint64_t result;

  result = qword_100827AC0;
  if (!qword_100827AC0)
  {
    result = swift_getWitnessTable(&unk_10062D4EC, &type metadata for SearchFitnessPlusIntent);
    atomic_store(result, (unint64_t *)&qword_100827AC0);
  }
  return result;
}

uint64_t sub_100205ACC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AFB88, 1);
}

uint64_t sub_100205ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B1618(a1, a2, a3, (uint64_t (*)(void))sub_1002059F8);
}

uint64_t sub_100205AE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B13F8(&qword_10081D7A8, (uint64_t)qword_10086A1A8, (uint64_t)sub_1002052E8, a1);
}

uint64_t sub_100205B04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100827ADC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000EA380;
  return sub_1002053C8(a1, v4);
}

uint64_t sub_100205B5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_1008201C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047110(&qword_100827AD0);
  LocalizedStringResource.init(stringLiteral:)(0x6169726574697243, 0xE800000000000000);
  LocalizedStringResource.init(stringLiteral:)(0x6320686372616553, 0xEF61697265746972);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v16 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for InputConnectionBehavior.default(_:), v2);
  result = IntentParameter<>.init(title:description:requestValueDialog:inputConnectionBehavior:)(v15, v11, v8, v5);
  *a1 = result;
  return result;
}

uint64_t sub_100205D44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002059F8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for SearchFitnessPlusIntent()
{
  return &type metadata for SearchFitnessPlusIntent;
}

ValueMetadata *type metadata accessor for OpenFitnessPlusForYouIntent()
{
  return &type metadata for OpenFitnessPlusForYouIntent;
}

uint64_t sub_100205D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  sub_100047110(&qword_1008201E0);
  v0 = type metadata accessor for AppDependencyManager(0);
  v6 = 0u;
  v7 = 0u;
  v8 = 0;
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(&v6, v1);
  v3 = sub_100047110(&qword_1008201E8);
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  result = AppDependency.__allocating_init(key:manager:)(&v6, v4);
  qword_10086A1C8 = v2;
  unk_10086A1D0 = result;
  return result;
}

uint64_t sub_100205E38()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100008398(v7, qword_10086A1D8);
  sub_10003CE9C(v7, (uint64_t)qword_10086A1D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x800000010068FD60);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

uint64_t sub_100205F48(char *a1, char *a2)
{
  return sub_10038FEB8(*a1, *a2);
}

unint64_t sub_100205F58()
{
  unint64_t result;

  result = qword_100827AF0;
  if (!qword_100827AF0)
  {
    result = swift_getWitnessTable(&unk_10062D58C, &type metadata for WorkoutSplitEntity.SplitType);
    atomic_store(result, (unint64_t *)&qword_100827AF0);
  }
  return result;
}

Swift::Int sub_100205F9C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6D6F74737563;
  else
    v2 = 0x647261646E617473;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100206018(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6D6F74737563;
  else
    v2 = 0x647261646E617473;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100206070(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6D6F74737563;
  else
    v3 = 0x647261646E617473;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1002060E8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100780BA0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100206144(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x647261646E617473;
  if (*v1)
    v2 = 0x6D6F74737563;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_100206184()
{
  unint64_t result;

  result = qword_100827AF8;
  if (!qword_100827AF8)
  {
    result = swift_getWitnessTable(&unk_10062D6BC, &type metadata for WorkoutSplitEntity.SplitType);
    atomic_store(result, (unint64_t *)&qword_100827AF8);
  }
  return result;
}

unint64_t sub_1002061CC()
{
  unint64_t result;

  result = qword_100827B00;
  if (!qword_100827B00)
  {
    result = swift_getWitnessTable(&unk_10062D6F4, &type metadata for WorkoutSplitEntity.SplitType);
    atomic_store(result, (unint64_t *)&qword_100827B00);
  }
  return result;
}

unint64_t sub_100206214()
{
  unint64_t result;

  result = qword_100827B08;
  if (!qword_100827B08)
  {
    result = swift_getWitnessTable(&unk_10062D5F4, &type metadata for WorkoutSplitEntity.SplitType);
    atomic_store(result, (unint64_t *)&qword_100827B08);
  }
  return result;
}

uint64_t sub_100206258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100206214();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

