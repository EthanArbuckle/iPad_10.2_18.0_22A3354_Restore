uint64_t sub_10000522C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100832590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005274(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[2] = &unk_100634B60;
    v5[3] = &unk_100634B78;
    v5[4] = v5[0];
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100005374(uint64_t a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  os_log_t v27;
  void *Strong;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  os_log_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v3 = v2;
  v6 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR___WODataLinkMonitor_currentWorkoutState;
  v16 = (_QWORD *)&unk_10082F000;
  if (*(_QWORD *)&v3[OBJC_IVAR___WODataLinkMonitor_currentWorkoutState] != a1)
  {
    v40 = v11;
    static WOLog.dataLink.getter(v10);
    v17 = v3;
    v18 = Logger.logObject.getter(v17);
    v39 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v39))
    {
      v36 = v18;
      v37 = v9;
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v42[0] = v20;
      *(_DWORD *)v19 = 136315394;
      v21 = v20;
      v38 = a2;
      v22 = 0xE600000000000000;
      v23 = 0x657669746341;
      switch(a1)
      {
        case 0:
          goto LABEL_8;
        case 1:
          v23 = 0xD00000000000001ELL;
          v22 = 0x800000010069ACA0;
          goto LABEL_8;
        case 2:
          v23 = 0x726F576E49746F4ELL;
          v22 = 0xEC00000074756F6BLL;
          goto LABEL_8;
        case 3:
          v22 = 0x800000010069AC80;
          v23 = 0xD000000000000012;
LABEL_8:
          v41 = sub_10003E8EC(v23, v22, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 4);
          swift_bridgeObjectRelease(v22);
          *(_WORD *)(v19 + 12) = 2080;
          v24 = *(_QWORD *)&v3[v15];
          v25 = 0xE600000000000000;
          v26 = 0x657669746341;
          switch(v24)
          {
            case 0:
              break;
            case 1:
              v26 = 0xD00000000000001ELL;
              v25 = 0x800000010069ACA0;
              break;
            case 2:
              v26 = 0x726F576E49746F4ELL;
              v25 = 0xEC00000074756F6BLL;
              break;
            case 3:
              v25 = 0x800000010069AC80;
              v26 = 0xD000000000000012;
              break;
            default:

              v41 = v24;
              goto LABEL_22;
          }
          v41 = sub_10003E8EC(v26, v25, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 14);

          swift_bridgeObjectRelease(v25);
          v27 = v36;
          _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v39, "Updating workout state to %s from %s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v19, -1, -1);

          (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v37);
          v16 = &unk_10082F000;
          LOBYTE(a2) = v38;
          goto LABEL_13;
        default:

          v41 = a1;
LABEL_22:
          result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DataLinkWorkoutState, &v41, &type metadata for DataLinkWorkoutState, &type metadata for Int);
          __break(1u);
          return result;
      }
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v9);
LABEL_13:
    *(_QWORD *)&v3[v15] = a1;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(&v17[OBJC_IVAR___WODataLinkMonitor_delegate]);
    if (Strong)
    {
      v29 = Strong;
      objc_msgSend(Strong, "updateWorkoutState:shouldShowTimeout:", a1, a2 & 1);
      swift_unknownObjectRelease(v29);
    }
    v30 = *(_QWORD **)&v17[OBJC_IVAR___WODataLinkMonitor_metricPlatterAnalytics];
    if (a1)
    {
      if (a1 == 2)
        sub_1001BA6D0();
    }
    else
    {
      v31 = v30[3];
      v30[2] = 0;
      v30[3] = 0;
      swift_bridgeObjectRelease(v31);
      v30[4] = 0;
      v32 = sub_100435F68((uint64_t)_swiftEmptyArrayStorage);
      swift_beginAccess(v30 + 5, v42, 1, 0);
      v33 = v30[5];
      v30[5] = v32;
      v12 = swift_bridgeObjectRelease(v33);
    }
  }
  v34 = *(_QWORD *)&v3[v16[225]];
  dispatch thunk of DataLinkClient.sessionUUID.getter(v12);
  sub_100012328(v34, (uint64_t)v8, *(_QWORD *)&v3[v15]);
  return sub_10004D914((uint64_t)v8);
}

void sub_1000057F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = "\b";
  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    sub_1000066A8(319);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = "\b";
      v11 = &unk_10062E078;
      v12 = &unk_10062E090;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

void sub_1000058A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, void *);
  id v9;

  v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

id sub_100005914()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:variant:", UIFontTextStyleBody, 256);
  qword_100835450 = (uint64_t)result;
  return result;
}

uint64_t sub_10000595C()
{
  uint64_t v0;

  type metadata accessor for WidgetCenter(0);
  v0 = static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();
  return swift_release(v0);
}

void sub_100005990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  _BYTE v13[24];

  v10 = a6 + 16;
  swift_beginAccess(a6 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    sub_1000297D0(a2, a5, a7 & 1);

  }
}

uint64_t sub_100005A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Calendar.Identifier(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  sub_100008398(v4, qword_100869D10);
  sub_10003CE9C(v4, (uint64_t)qword_100869D10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v0);
  Calendar.init(identifier:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t type metadata accessor for DataLinkMonitor()
{
  return objc_opt_self(WODataLinkMonitor);
}

void sub_100005B68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10083A0B0)
  {
    v2 = type metadata accessor for DateComponents(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10083A0B0);
  }
}

uint64_t sub_100005BBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Calendar(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AwardsActivityTileDataModel()
{
  return objc_opt_self(_TtC10FitnessApp27AwardsActivityTileDataModel);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for FitnessAppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11);
  exit((int)v8);
}

uint64_t sub_100005CE0()
{
  uint64_t v0;

  swift_getObjectType(v0);
  return dispatch thunk of UnfairLock.acquire<A>(_:)(sub_10004EDF4);
}

uint64_t sub_100005D44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = "\b";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActivityQueryExecutor()
{
  return objc_opt_self(_TtC10FitnessApp21ActivityQueryExecutor);
}

uint64_t type metadata accessor for CHAwardsDataProvider()
{
  return objc_opt_self(CHAwardsDataProvider);
}

void *sub_100005E74(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000242F8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for RemoteParticipant(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for RemoteParticipant(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_100005F48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100047110(&qword_100832C70);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v32 = 1 << *(_BYTE *)(v5 + 32);
    v33 = v3;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v23 >= v14)
          goto LABEL_36;
        v24 = v10[v23];
        ++v9;
        if (!v24)
        {
          v9 = v23 + 1;
          if (v23 + 1 >= v14)
            goto LABEL_36;
          v24 = v10[v9];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v9 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v24 = v10[v9];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v9 = v25;
          }
        }
LABEL_33:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
        swift_retain(*((_QWORD *)&v34 + 1));
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v30);
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

id sub_1000061F8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DataLinkMonitor()), "init");
  qword_10086A610 = (uint64_t)result;
  return result;
}

unint64_t sub_100006224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10082C900;
  if (!qword_10082C900)
  {
    v1 = objc_opt_self(HKActivitySummary);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10082C900);
  }
  return result;
}

uint64_t type metadata accessor for TrophyCasePrefetcher()
{
  return objc_opt_self(_TtC10FitnessApp20TrophyCasePrefetcher);
}

id sub_1000062E0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleCallout);
  qword_1008227B0 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for FitnessAppDelegate()
{
  return objc_opt_self(CHFitnessAppDelegate);
}

void sub_100006344(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081ECE0)
  {
    v2 = type metadata accessor for ScrollViewProxy(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081ECE0);
  }
}

uint64_t sub_100006398(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[24];

  result = type metadata accessor for CompletedWorkoutShareItemProvider(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100644668;
    v5[2] = &unk_100644680;
    v5[3] = &unk_100644698;
    v5[4] = &unk_100644680;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[7] = &unk_100644668;
    v5[8] = &unk_100644680;
    v5[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[10] = &unk_100644680;
    v5[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[12] = &unk_100644680;
    v5[13] = &unk_100644680;
    v5[14] = &unk_100644680;
    result = type metadata accessor for ActivitySharingSettings(319);
    if (v4 <= 0x3F)
    {
      v5[15] = *(_QWORD *)(result - 8) + 64;
      v5[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[18] = &unk_1006446B0;
      v5[19] = &unk_1006446B0;
      v5[20] = &unk_1006446C8;
      v5[21] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[23] = (char *)&value witness table for Builtin.BridgeObject + 64;
      return swift_updateClassMetadata2(a1, 256, 24, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t type metadata accessor for FitnessAppBadgeAggregator()
{
  return objc_opt_self(CHFitnessAppBadgeAggregator);
}

void sub_1000064EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10000654C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Calendar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000065C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[26];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = "\b";
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_10062ECF0;
  v4[6] = &unk_10062ECF0;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = &unk_10062ECF0;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[20] = &unk_10062ED08;
  v4[21] = &unk_10062ED08;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[22] = *(_QWORD *)(result - 8) + 64;
    v4[23] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256, 26, v4, a1 + 80);
  }
  return result;
}

void sub_1000066A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100827F18)
  {
    v2 = type metadata accessor for AttributedString(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100827F18);
  }
}

void sub_1000066FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *Strong;
  void *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v4);
  v7._countAndFlagsBits = 0xD00000000000007BLL;
  v7._object = (void *)0x8000000100695060;
  v8._object = (void *)0x8000000100695100;
  v8._countAndFlagsBits = 0xD000000000000022;
  Logger.trace(file:function:)(v7, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if ((sub_10002130C() & 1) != 0)
  {
    v9 = sub_1002AA778();
    if (!v9)
      return;
  }
  else
  {
    if ((sub_1000205AC() & 1) == 0)
      return;
    v9 = sub_1002AA9EC();
    if (!v9)
      return;
  }
  v10 = objc_allocWithZone((Class)UINavigationController);
  v11 = v9;
  v12 = objc_msgSend(v10, "initWithRootViewController:", v11);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_delegate);
  if (Strong)
  {
    v14 = Strong;
    objc_msgSend(Strong, "presentModelOnSummaryTabWithViewController:", v12);

    swift_unknownObjectRelease(v14);
  }
  else
  {

  }
}

uint64_t type metadata accessor for FitnessSettingsProvider()
{
  return objc_opt_self(_TtC10FitnessApp23FitnessSettingsProvider);
}

uint64_t sub_1000068B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = "\t";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

id sub_100006964(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "_preferredFontForTextStyle:variant:", *a2, 256);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for ActivitySharingNavigationCoordinator()
{
  return objc_opt_self(CHActivitySharingNavigationCoordinator);
}

void sub_1000069D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Strong;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE v14[24];

  v2 = sub_100047110(&qword_100828440);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_avatarSettingsProvider);
    v8 = v7[3];
    v9 = v7[4];
    sub_100016804(v7, v8);
    dispatch thunk of AvatarSettingsCoordinating.fetchAvatarSettings()(v8, v9);
    v10 = type metadata accessor for AvatarSettings(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) == 1)
    {
      sub_10001BE90((uint64_t)v4, &qword_100828440);
      v12 = 0;
    }
    else
    {
      v12 = (void *)AvatarSettings.contact.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
    }
    dispatch thunk of AccountButton.updateContact(_:)(v12);

  }
}

void sub_100006B18(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_marketingBannerViewController);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t sub_100006B68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for RemoteParticipant(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

void sub_100006CEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100823FC0)
  {
    v2 = type metadata accessor for Calendar(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100823FC0);
  }
}

uint64_t sub_100006DA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for ContentAvailability(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

void sub_100006E20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100831CC0)
  {
    v2 = type metadata accessor for Artwork(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100831CC0);
  }
}

uint64_t type metadata accessor for ActivitySummaryChangeListener()
{
  return objc_opt_self(_TtC10FitnessApp29ActivitySummaryChangeListener);
}

uint64_t sub_100006F08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100006F7C()
{
  uint64_t v0;

  v0 = type metadata accessor for Calendar(0);
  sub_100008398(v0, qword_100869D40);
  sub_10003CE9C(v0, (uint64_t)qword_100869D40);
  return static Calendar.autoupdatingCurrent.getter();
}

void sub_100006FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_100018FAC();

  }
}

uint64_t sub_10000701C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100007050(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for TodayActivityTile()
{
  return objc_opt_self(_TtC10FitnessApp17TodayActivityTile);
}

uint64_t type metadata accessor for SeymourCatalogItemDataProvider()
{
  return objc_opt_self(_TtC10FitnessApp30SeymourCatalogItemDataProvider);
}

uint64_t sub_1000070D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_resignActiveObserver);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_unknownObjectRelease(v4);
}

double sub_100007124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t Strong;
  double result;
  uint64_t v8;
  _BYTE v9[24];

  v5 = a5 + 16;
  swift_beginAccess(a5 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v8 = Strong;
    sub_100008A28();
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

void sub_1000071BC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "scale");
  v2 = v1;

  qword_10086AA00 = v2;
}

unint64_t sub_10000721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t result;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  uint64_t v36;

  if (a3)
  {
    v7 = static os_log_type_t.error.getter(a1);
    v8 = (void *)HKLogActivity;
    v9 = v7;
    if (os_log_type_enabled(HKLogActivity, v7))
    {
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      log = v8;
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v36 = v11;
      *(_DWORD *)v10 = 136315394;
      v12 = _typeName(_:qualified:)(a5, 0);
      v14 = v13;
      v32 = sub_10003E8EC(v12, v13, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v10 + 4);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v10 + 12) = 2080;
      swift_getErrorValue(a3, v35, v34);
      v15 = Error.localizedDescription.getter(v34[1], v34[2]);
      v17 = v16;
      v32 = v15;
      v33 = v16;
      v18 = sub_100047110(&qword_10082B520);
      v19 = Optional.description.getter(v18);
      v21 = v20;
      swift_bridgeObjectRelease(v17);
      v32 = sub_10003E8EC(v19, v21, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v10 + 14);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, log, v9, "%s failed to load last move mode category sample with error: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    v32 = 0;
    goto LABEL_22;
  }
  if (!a2)
    goto LABEL_20;
  if (!((unint64_t)a2 >> 62))
  {
    v23 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v23)
      goto LABEL_8;
LABEL_19:
    swift_bridgeObjectRelease(a2);
    goto LABEL_20;
  }
  if (a2 >= 0)
    v29 = a2 & 0xFFFFFFFFFFFFFF8;
  else
    v29 = a2;
  swift_bridgeObjectRetain(a2);
  v23 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v23)
    goto LABEL_19;
LABEL_8:
  result = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_24:
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(a2 + 8 * result + 32);
LABEL_13:
    v26 = v25;
    swift_bridgeObjectRelease(a2);
    v27 = objc_opt_self(HKCategorySample);
    v28 = swift_dynamicCastObjCClass(v26, v27);
    if (v28)
    {
LABEL_21:
      v32 = v28;
LABEL_22:
      v30 = sub_100047110(&qword_1008264A0);
      return CheckedContinuation.resume(returning:)(&v32, v30);
    }

LABEL_20:
    v28 = 0;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_100007704(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  v2 = type metadata accessor for ShelfLockupAttributedTagStrings(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Artwork(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = &unk_10063A548;
      v10[3] = &unk_10063A548;
      sub_100006E20(319);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v10[5] = &unk_10063A560;
        v10[6] = &unk_10063A560;
        v10[7] = &unk_10063A560;
        v8 = type metadata accessor for URL(319);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100007944@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100047110((uint64_t *)&unk_1008282C0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v9, 0, 0, v4);
  v5 = v10;
  v6 = v11;
  sub_100016804(v9, v10);
  dispatch thunk of ArtworkImageLoading.fetchRequest(_:priority:)(a1, 33, v5, v6);
  v7 = sub_100047110(&qword_100822168);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
}

void sub_100007CA4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  id v13[2];

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_10001E724(0, (unint64_t *)&qword_100828970, CNContact_ptr);
  v5 = sub_100148FE0(&qword_100822080, (unint64_t *)&qword_100828970, CNContact_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v13[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (!v2)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease(a1);
  if (v6)
  {
LABEL_10:
    if (v6 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_100142B5C((Swift::Int *)v13, v9, (unint64_t *)&qword_100828970, CNContact_ptr, &qword_100822088);

      }
    }
    else
    {
      v10 = (void **)(a1 + 32);
      do
      {
        v11 = *v10++;
        sub_100142B5C((Swift::Int *)v13, v11, (unint64_t *)&qword_100828970, CNContact_ptr, &qword_100822088);

        --v6;
      }
      while (v6);
    }
  }
}

unint64_t sub_100007EC8()
{
  unint64_t result;
  void *v1;
  char *v2;
  uint64_t v3;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (unint64_t)objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (result)
  {
    v1 = (void *)result;
    v2 = (char *)objc_msgSend((id)result, "fitnessMode");

    if ((unint64_t)(v2 - 1) >= 3)
    {
      v4 = static os_log_type_t.fault.getter(v3);
      v5 = (void *)HKLogActivity;
      v6 = v4;
      result = os_log_type_enabled(HKLogActivity, v4);
      if ((_DWORD)result)
      {
        v7 = v5;
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v11 = v9;
        *(_DWORD *)v8 = 136315138;
        v10 = sub_10003E8EC(0x53746E6572727563, 0xEE007972616D6D75, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4);
        _os_log_impl((void *)&_mh_execute_header, v7, v6, "%s found unexpected fitness mode; falling back to paired summary",
          v8,
          0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        swift_slowDealloc(v8, -1, -1);

        return 0;
      }
    }
    else
    {
      return 0x100u >> (8 * ((_BYTE)v2 - 1));
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100008064(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6 = CFSTR("range");
  v7 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("ActivitySummaryCacheChangedNotification"), v4, v5);

}

void sub_100008208(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32), a2));
  v3 = (void *)qword_10083E088;
  qword_10083E088 = (uint64_t)v2;

  v4 = objc_claimAutoreleasedReturnValue(+[NSCalendar hk_gregorianCalendarWithUTCTimeZone](NSCalendar, "hk_gregorianCalendarWithUTCTimeZone"));
  v5 = (void *)qword_10083E078;
  qword_10083E078 = v4;

}

uint64_t sub_100008348(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v5;

  v5 = type metadata accessor for UIListContentConfiguration(0);
  sub_100008398(v5, a2);
  sub_10003CE9C(v5, (uint64_t)a2);
  return a3();
}

uint64_t *sub_100008398(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000083D8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100008510(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[3] = &unk_100647348;
  v8[4] = &unk_100647348;
  v8[5] = &unk_100647348;
  v8[6] = &unk_100647360;
  sub_1000087BC(319, (unint64_t *)&qword_100823E60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v11 = &unk_100647348;
    v12 = (char *)&value witness table for Builtin.Int32 + 64;
    v13 = (char *)&value witness table for Builtin.Int32 + 64;
    sub_10004D6D8();
    if (v5 <= 0x3F)
    {
      v14 = *(_QWORD *)(v4 - 8) + 64;
      sub_1000087BC(319, &qword_10083B468, (uint64_t (*)(uint64_t))type metadata accessor for CHFriendsSetupPhase, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v7 <= 0x3F)
      {
        v15 = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 14, v8, a1 + 80);
      }
    }
  }
}

void sub_100008620(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[12];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14[0] = &unk_100632E28;
  v14[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v14[2] = &unk_100632E40;
  v14[3] = &unk_100632E58;
  v14[4] = &unk_100632E58;
  v14[5] = &unk_100632E58;
  v14[6] = &unk_100632E70;
  v14[7] = &unk_100632E88;
  v14[8] = &unk_100632E28;
  v14[9] = &unk_100632E28;
  v14[10] = &unk_100632E28;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v14[11] = *(_QWORD *)(v2 - 8) + 64;
    sub_100008814(319, (unint64_t *)&qword_100823E60, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      v16 = &unk_100632EA0;
      v17 = v15;
      sub_100008814(319, &qword_10082C370, (uint64_t (*)(uint64_t))&type metadata accessor for IntroSheet);
      if (v7 <= 0x3F)
      {
        v18 = *(_QWORD *)(v6 - 8) + 64;
        sub_100008814(319, &qword_10082C378, (uint64_t (*)(uint64_t))&type metadata accessor for WhatsNewSheet);
        if (v9 <= 0x3F)
        {
          v19 = *(_QWORD *)(v8 - 8) + 64;
          sub_100008814(319, &qword_10082C380, (uint64_t (*)(uint64_t))&type metadata accessor for ContentAvailability);
          if (v11 <= 0x3F)
          {
            v20 = *(_QWORD *)(v10 - 8) + 64;
            sub_100008814(319, &qword_10082C388, (uint64_t (*)(uint64_t))&type metadata accessor for NoticePrivacyPreference);
            if (v13 <= 0x3F)
            {
              v21 = *(_QWORD *)(v12 - 8) + 64;
              swift_updateClassMetadata2(a1, 256, 19, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

void sub_1000087BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_100008814(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

double sub_100008A28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v1 = *v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_10078D3E0, 48, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v6[5] = v1;
  swift_retain(v0);
  v7 = sub_10020D9C0((uint64_t)v4, (uint64_t)&unk_1008264B8, (uint64_t)v6);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

void sub_100008AEC()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "briskColors");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "nonGradientTextColor");

    if (v2)
    {
      qword_100835458 = (uint64_t)v2;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double sub_100008B5C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v7;
  void (*v8)(id, uint64_t, void *);
  uint64_t v9;
  id v10;
  id v11;
  double result;

  v5 = a3;
  v8 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v9 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
  }
  swift_retain(v7);
  v10 = a2;
  v11 = a4;
  v8(v10, v5, a4);
  swift_release(v7);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

id sub_100008BFC(void *a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  char *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_chartQueryRetryInterval] = 0x3FC3333333333333;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_chartQuery] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_basalEnergyCalculationRetryInterval] = 0x3FC3333333333333;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_basalEnergyQuery] = 0;
  v3 = OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_watchSourcePredicate;
  v4 = (void *)objc_opt_self(HKQuery);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "_predicateForObjectsFromAppleWatches");
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp21ActivityQueryExecutor_healthStore] = a1;
  v6 = a1;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for ActivityQueryExecutor();
  return objc_msgSendSuper2(&v8, "init");
}

void sub_100008CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  NSObject *v25;
  uint8_t *v26;
  void (*v27)(_BYTE *, uint64_t);
  double v28;
  _BYTE v29[24];

  v1 = v0;
  v2 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v2);
  v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = __chkstk_darwin(v7);
  v12 = &v29[-v11 - 8];
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists) & 1) == 0)
  {
    v17 = static os_log_type_t.default.getter(v10);
    v16 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v16, "Application active, watch cloudKit status is inactive", 53, 2, _swiftEmptyArrayStorage);
    goto LABEL_5;
  }
  v13 = v1 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastWatchCloudKitAccountFetchTimestamp;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastWatchCloudKitAccountFetchTimestamp, v29, 0, 0);
  sub_100031D7C(v13, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v14 = sub_10001BE90((uint64_t)v4, (uint64_t *)&unk_100828370);
    v15 = static os_log_type_t.default.getter(v14);
    v16 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Application active, watch cloudKit status has never been successfully fetched", 77, 2, _swiftEmptyArrayStorage);
LABEL_5:

LABEL_6:
    sub_10000B010(v18);
    return;
  }
  v19 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v12, v4, v5);
  Date.init()(v19);
  v20 = Date.timeIntervalSince(_:)(v12);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = (void *)HKLogActivity;
  v24 = v22;
  if (os_log_type_enabled(HKLogActivity, v22))
  {
    v25 = v23;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v26 = 134217984;
    v28 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v26 + 4);
    _os_log_impl((void *)&_mh_execute_header, v25, v24, "Application active, time since last fetch of watch cloudKit status: %f", v26, 0xCu);
    swift_slowDealloc(v26, -1, -1);

  }
  v27 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v27(v9, v5);
  v18 = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v12, v5);
  if (v20 > 3600.0)
    goto LABEL_6;
}

void sub_10000904C()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "nonGradientTextColor");

  }
  else
  {
    v2 = 0;
  }
  qword_100829AE8 = (uint64_t)v2;
}

_QWORD *initializeBufferWithCopyOfBuffer for ActivitySharingHighlightDataProvider.State(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100009298()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10023122C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v22);
  }
  v0 = (void *)sub_100010CB8();
  v1 = sub_10000FA94();
  sub_10021E224(v1, v0);
  v3 = v2;
  v4 = (uint64_t)sub_100296BC0(v2);
  swift_bridgeObjectRelease(v3);
  if (v4 < 0)
    v5 = 1;
  else
    v5 = ((unint64_t)v4 >> 62) & 1;
  if ((_DWORD)v5 != 1)
  {
    if (*(uint64_t *)(v4 + 16) >= 50)
      v6 = 50;
    else
      v6 = *(_QWORD *)(v4 + 16);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(v4);
  v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  result = swift_release(v4);
  if (v6 >= 50)
    v6 = 50;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(v4);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    result = swift_release(v4);
    if ((v25 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v4);
      v13 = _CocoaArrayWrapper.endIndex.getter(v26);
      v20 = swift_release(v4);
      if (v13 < v6)
      {
        __break(1u);
        goto LABEL_33;
      }
LABEL_9:
      if ((v4 & 0xC000000000000001) != 0 && v6)
      {
        sub_10001E724(0, (unint64_t *)&qword_100828970, CNContact_ptr);
        v7 = 0;
        do
        {
          v8 = v7 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v7);
          v7 = v8;
        }
        while (v6 != v8);
      }
      if ((_DWORD)v5)
      {
        v9 = swift_bridgeObjectRetain(v4);
        v10 = _CocoaArrayWrapper.subscript.getter(0, v6, v4, v9);
        v5 = v11;
        v13 = v12;
        v6 = v14;
        swift_release_n(v4, 2);
        v4 = v10;
        if ((v6 & 1) != 0)
        {
LABEL_18:
          v16 = type metadata accessor for __ContiguousArrayStorageBase(0);
          v17 = swift_unknownObjectRetain_n(v4, 2);
          v18 = (_QWORD *)swift_dynamicCastClass(v17, v16);
          if (!v18)
          {
            swift_unknownObjectRelease(v4);
            v18 = _swiftEmptyArrayStorage;
          }
          v19 = v18[2];
          v20 = swift_release(v18);
          if (!__OFSUB__((unint64_t)v6 >> 1, v13))
          {
            v20 = v4;
            if (v19 == ((unint64_t)v6 >> 1) - v13)
            {
              v15 = (_QWORD *)swift_dynamicCastClass(v4, v16);
              if (!v15)
              {
                swift_unknownObjectRelease(v4);
                v15 = _swiftEmptyArrayStorage;
              }
              goto LABEL_24;
            }
            goto LABEL_34;
          }
LABEL_33:
          __break(1u);
LABEL_34:
          swift_unknownObjectRelease(v20);
        }
      }
      else
      {
        v13 = 0;
        v5 = v4 + 32;
        v6 = (2 * v6) | 1;
        if ((v6 & 1) != 0)
          goto LABEL_18;
      }
      v15 = sub_100296A14(v4, v5, v13, v6);
LABEL_24:
      swift_unknownObjectRelease(v4);
      sub_10000F728((uint64_t)v15);
      return swift_release(v15);
    }
  }
  __break(1u);
  return result;
}

void sub_1000095C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000095DC(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  uint64_t v6;
  void (*v7)(id, uint64_t (*)(), uint64_t, void *);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v7 = *(void (**)(id, uint64_t (*)(), uint64_t, void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject(&unk_10078D458, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain(v6);
  v11 = a2;
  v10 = a4;
  v7(v11, sub_100106890, v9, a4);
  swift_release(v6);
  swift_release(v9);

}

uint64_t sub_10000968C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100047110((uint64_t *)&unk_10082ED90);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar(0);
  sub_100008398(v3, qword_100869D28);
  sub_10003CE9C(v3, (uint64_t)qword_100869D28);
  v4 = objc_msgSend((id)objc_opt_self(NSCalendar), "hk_gregorianCalendarWithUTCTimeZone");
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  return Calendar.locale.setter(v2);
}

void sub_100009788(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;

  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a2 + 16) || (a3 & 1) != 0)
  {
    v3 = static os_log_type_t.default.getter(a1);
    v4 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "[TrophyCasePrefetcher] did update awards, prefetching now", 57, 2, _swiftEmptyArrayStorage);

    sub_100018248();
  }
  else
  {
    v5 = static os_log_type_t.default.getter(a1);
    v6 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "[TrophyCasePrefetcher] did update awards but no relevant updates, skipping prefetching", 86, 2, _swiftEmptyArrayStorage);

  }
}

_QWORD *sub_100009870(char *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE v13[24];

  v1[4] = _swiftEmptyArrayStorage;
  v1[5] = 0;
  v1[6] = 0;
  v1[7] = _swiftEmptyArrayStorage;
  v1[2] = a1;
  v1[3] = _swiftEmptyArrayStorage;
  v3 = swift_allocObject(&unk_10078C960, 24, 7);
  swift_weakInit(v3 + 16, v1);
  v4 = swift_allocObject(&unk_10078C988, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_10003BDBC;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = &a1[OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers];
  swift_beginAccess(&a1[OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers], v13, 33, 0);
  v6 = *(_QWORD **)v5;
  v7 = a1;
  swift_retain_n(v3, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(_QWORD *)v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_10004C908(0, v6[2] + 1, 1, v6);
    *(_QWORD *)v5 = v6;
  }
  v10 = v6[2];
  v9 = v6[3];
  if (v10 >= v9 >> 1)
  {
    v6 = sub_10004C908((_QWORD *)(v9 > 1), v10 + 1, 1, v6);
    *(_QWORD *)v5 = v6;
  }
  v6[2] = v10 + 1;
  v11 = &v6[2 * v10];
  v11[4] = sub_10003BD6C;
  v11[5] = v4;
  swift_endAccess(v13);
  swift_release_n(v3, 2);
  sub_100019A58();
  return v1;
}

void sub_1000099D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[3];

  if (a2)
  {
    v5 = static os_log_type_t.error.getter(a1);
    v6 = (void *)HKLogActivity;
    v7 = sub_100047110((uint64_t *)&unk_100827460);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100622F90;
    v20[0] = a2;
    v9 = v6;
    v10 = sub_100047110(&qword_10081F7B8);
    v11 = Optional.description.getter(v10);
    v13 = v12;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_100038CF8();
    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v13;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v9, "Error fetching activity sharing badge count %@", 46, 2, v8);

    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v15 = a3 + 16;
    swift_beginAccess(a3 + 16, v20, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v15);
    if (Strong)
    {
      v17 = (void *)Strong;
      *(_QWORD *)(Strong + OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedActivitySharingCount) = a4;
      v18 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR___CHFitnessAppBadgeAggregator_delegate);
      if (v18)
      {
        v19 = v18;
        objc_msgSend(v18, "aggregator:didUpdateActivitySharingBadgeCount:", v17, a4);
        swift_unknownObjectRelease(v19);
      }
      sub_10002A828(0, 0);

    }
  }
  sub_10000DBD0();
}

uint64_t sub_100009B4C()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100045AD4((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_100828420);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return v4;
  }
  else
  {
    sub_10001BE90((uint64_t)v6, (uint64_t *)&unk_100828420);
  }
  return 0;
}

uint64_t sub_100009C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100009CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "[TrophyCasePrefetcher] app will enter foreground, prefetching now", 65, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v2, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_100018248();

  }
}

uint64_t destroy for Histogram1D(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

id sub_100009F5C(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  uint64_t ObjectType;
  __int128 v11;
  objc_super v12;

  v3 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_amsBag];
  v4 = OBJC_IVAR___CHFitnessAppContext_eventHub;
  v5 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_navigator];
  v6 = (objc_class *)type metadata accessor for SeymourNotificationResponseCoordinator();
  v11 = *(_OWORD *)&a1[v4];
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC10FitnessApp38SeymourNotificationResponseCoordinator_amsBag] = v3;
  *(_OWORD *)&v7[OBJC_IVAR____TtC10FitnessApp38SeymourNotificationResponseCoordinator_eventHub] = v11;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10FitnessApp38SeymourNotificationResponseCoordinator_urlNavigator] = v5;
  v12.receiver = v7;
  v12.super_class = v6;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v11);
  swift_retain(v5);
  v8 = objc_msgSendSuper2(&v12, "init");

  ObjectType = swift_getObjectType(v1);
  swift_deallocPartialClassInstance(v1, ObjectType, 40, 7);
  return v8;
}

uint64_t sub_10000A054(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(a1 + a2[7], v5);
  v8 = a1 + a2[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t type metadata accessor for BackgroundTaskAssertion()
{
  return objc_opt_self(CHBackgroundTaskAssertion);
}

uint64_t sub_10000A414(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v5 = a2 & 1;
  v6 = sub_100047110(&qword_10083A008);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100016804(a1, v10);
  v12 = sub_10004ED94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OnboardingCoordinator.Criteria.CodingKeys, &type metadata for OnboardingCoordinator.Criteria.CodingKeys, v12, v10, v11);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v5, &v21, v6);
  if (!v2)
  {
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v20, v6);
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 16) & 1, &v19, v6);
    v18 = 3;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 24) & 1, &v18, v6);
    v17 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2) & 1, &v17, v6);
    v16 = 5;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 40) & 1, &v16, v6);
    v15 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2) & 1, &v15, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10000A5F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  Class *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[24];

  v5 = sub_100047110(&qword_10082FF70);
  __chkstk_darwin(v5);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100047110(&qword_10082FF78);
  __chkstk_darwin(v8);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = sub_100047110(&qword_100824DE0);
  __chkstk_darwin(v11);
  v13 = (Class *)&v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100021CC0(a1, (uint64_t)v10, &qword_10082FF78);
  sub_100021CC0(a2, (uint64_t)v7, &qword_10082FF70);
  v14 = v2[3];
  swift_retain(v14);
  sub_10002655C((uint64_t)v10, (uint64_t)v7, v14, v13);
  v15 = (uint64_t)v2 + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection, v21, 33, 0);
  sub_10004F3C0((uint64_t)v13, v15);
  result = swift_endAccess(v21);
  v17 = (void (*)(uint64_t))v2[4];
  if (v17)
  {
    v18 = v2[5];
    v19 = swift_retain(v18);
    v17(v19);
    return sub_100022BA4((uint64_t)v17, v18);
  }
  return result;
}

uint64_t sub_10000A934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  void *v5;
  uint64_t v6;

  v2 = OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges);
  *(_QWORD *)(v1 + OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v3);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___CHFitnessAppBadgeAggregator_delegate);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, "aggregator:didUpdateEngagmentBadgeCount:", v1, *(_QWORD *)(*(_QWORD *)(v1 + v2) + 16));
    swift_unknownObjectRelease(v5);
  }
  v6 = swift_allocObject(&unk_1007897C8, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, v1);
  swift_retain(v6);
  sub_10002A828(sub_10004F770, v6);
  return swift_release_n(v6, 2);
}

void sub_10000A9F0(char a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Log.default.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 67109120;
    v18 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "FitnessAppBadgeAggregator: updateAmeliaBadge, hasBadge: %{BOOL}d", v16, 8u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  *(_BYTE *)(v4 + OBJC_IVAR___CHFitnessAppBadgeAggregator_hasAmeliaBadge) = a1 & 1;
  sub_10002A828(a2, a3);
}

id sub_10000AB48()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("UNIT_TESTING"));

  return v1;
}

void sub_10000AB8C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id *v23;
  _BYTE *WeakRetained;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  void *v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id location;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD block[4];
  id v39[2];
  _BYTE v40[128];

  v9 = a3;
  v10 = a4;
  v11 = a6;
  v13 = v11;
  if (!v11)
  {
    v29 = v10;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v15 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v35 != v17)
            objc_enumerationMutation(v9);
          v19 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "sourceRevision"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "productType"));
          v22 = objc_msgSend(v21, "containsString:", CFSTR("Watch"));

          objc_msgSend(v19, "_setIsWatchWorkout:", v22);
        }
        v16 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
      }
      while (v16);
    }
    v23 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v25 = WeakRetained;
    v13 = 0;
    v10 = v29;
    if (!WeakRetained)
      goto LABEL_22;
    if (WeakRetained[172])
    {
      v26 = objc_loadWeakRetained(v23);
      objc_msgSend(v26, "_handleInitialResults:", v9);

      *((_BYTE *)v25 + 172) = 0;
LABEL_15:
      *((_BYTE *)v25 + 185) = 0;
LABEL_22:

      goto LABEL_23;
    }
    if (objc_msgSend(v29, "count"))
    {
      v27 = objc_loadWeakRetained(v23);
      objc_msgSend(v27, "_handleRemovedObjects:", v29);

      if (!objc_msgSend(v9, "count"))
        goto LABEL_21;
    }
    else if (!objc_msgSend(v9, "count"))
    {
      goto LABEL_15;
    }
    os_unfair_lock_lock((os_unfair_lock_t)v25 + 42);
    objc_msgSend(*((id *)v25 + 2), "insertSamples:", v9);
    os_unfair_lock_unlock((os_unfair_lock_t)v25 + 42);
LABEL_21:
    objc_msgSend(v25, "_recreateFilterObjects");
    objc_initWeak(&location, *((id *)v25 + 25));
    v28 = *((_QWORD *)v25 + 19);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1000B59D4;
    v30[3] = &unk_100779FA8;
    v30[4] = v25;
    objc_copyWeak(&v31, v23);
    objc_copyWeak(&v32, &location);
    dispatch_async(v28, v30);
    objc_destroyWeak(&v32);
    objc_destroyWeak(&v31);
    objc_destroyWeak(&location);
    goto LABEL_22;
  }
  _HKInitializeLogging(v11, v12);
  v14 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
    sub_1005F2D50((uint64_t)v13, v14);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5994;
  block[3] = &unk_100779870;
  v39[1] = *(id *)(a1 + 40);
  objc_copyWeak(v39, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(v39);
LABEL_23:

}

void sub_10000B010(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v2 = OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountFetchInProgress;
  v3 = v1[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountFetchInProgress];
  v4 = static os_log_type_t.default.getter(a1);
  v5 = HKLogActivity;
  v11 = v5;
  if ((v3 & 1) != 0)
  {
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "NSS fetch already in progress", 29, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Asking NSS for watch accounts", 29, 2, _swiftEmptyArrayStorage);

    v1[v2] = 1;
    v6 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_nanoSystemSettingsManager];
    v7 = swift_allocObject(&unk_1007AA3D0, 24, 7);
    *(_QWORD *)(v7 + 16) = v1;
    aBlock[4] = sub_100582DE4;
    v13 = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100581B18;
    aBlock[3] = &unk_1007AA3E8;
    v8 = _Block_copy(aBlock);
    v9 = v13;
    v10 = v1;
    objc_msgSend(v6, "getAccountsInfo:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);
  }
}

void sub_10000B16C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSIndexSet *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _UNKNOWN **v32;

  v1 = v0;
  v2 = type metadata accessor for IndexSet(0);
  v31 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v31 - v15;
  v17 = static Calendar.current.getter(v14);
  Date.init()(v17);
  Calendar.startOfDay(for:)(v13);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = objc_msgSend(*(id *)(*(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityDataProvider]+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache), "activitySummaryForCacheIndex:", sub_1000237E8());
  if (v19)
  {
    v20 = v19;
    v21 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_achievementLocalizationProvider];
    v22 = objc_msgSend(v21, "activityMoveMode");
    if (v22 == objc_msgSend(v20, "activityMoveMode"))
    {
      v18(v16, v9);

      return;
    }
    objc_msgSend(v21, "setActivityMoveMode:", objc_msgSend(v20, "activityMoveMode"));
    v23 = objc_msgSend(v1, "tableView");
    if (!v23)
    {
      __break(1u);
      return;
    }
    v24 = v23;
    v32 = &off_100780DE8;
    v25 = sub_100028404((unint64_t *)&qword_1008282A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
    v26 = sub_100047110(&qword_1008282B0);
    v27 = sub_1000283C4((unint64_t *)&qword_1008282B8, &qword_1008282B0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v26, v27, v2, v25);
    IndexSet._bridgeToObjectiveC()(v28);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v2);
    objc_msgSend(v24, "reloadSections:withRowAnimation:", v30, 100);

  }
  v18(v16, v9);
}

void sub_10000B600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;

  v2 = v1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  v4 = v1 + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection;
  v5 = type metadata accessor for CatalogTipSection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v2 + 24) = a1;
  v6 = type metadata accessor for CatalogTipDataProvider(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = swift_retain_n(a1, 2);
  v8 = CatalogTipDataProvider.init(dependencies:)(v7);
  *(_QWORD *)(v2 + 16) = v8;
  sub_10004DF0C();
  swift_retain(v8);
  v9 = swift_retain(v2);
  dispatch thunk of CatalogTipDataProvider.delegate.setter(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(v2 + 16);
  v11 = swift_retain(v10);
  dispatch thunk of CatalogTipDataProvider.activate()(v11);
  swift_release(v10);
  swift_release(a1);
  return v2;
}

void sub_10000B700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  char v20;
  id v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v22 - v12;
  v14 = static Calendar.current.getter(v11);
  Date.init()(v14);
  Calendar.startOfDay(for:)(v10);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_activityDataProvider)+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache), "activitySummaryForCacheIndex:", sub_1000237E8());
  if (v16)
  {
    v17 = v16;
    v18 = v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_activityMoveMode;
    v19 = *(id *)(v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_activityMoveMode);
    v20 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_activityMoveMode + 8);
    v21 = objc_msgSend(v16, "activityMoveMode");
    if ((v20 & 1) == 0 && v19 == v21)
    {
      v15(v13, v6);

      return;
    }
    *(_QWORD *)v18 = objc_msgSend(v17, "activityMoveMode");
    *(_BYTE *)(v18 + 8) = 0;
    sub_100016238();

  }
  v15(v13, v6);
}

void sub_10000B8B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t Strong;
  void *v5;
  id v6;
  id v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.info.getter();
  v3 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "ActivityTileViewController fetch user first name", 48, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v1, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = objc_retain(*(id *)(Strong
                           + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_achievementLocalizationProvider));

    v7 = (id)FIUICopyUserFirstNameFromAddressBook();
    objc_msgSend(v6, "setName:", v7);

  }
}

uint64_t destroy for ActivityDayHistogram(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[8]);
}

void sub_10000B9CC(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  os_log_type_t v26;
  void *v27;
  NSObject *v28;
  uint8_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CHWorkoutDetailHeartRateTableViewCell *aBlock;
  _QWORD v35[4];
  uint64_t v36;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0 || a3)
  {
    v26 = static os_log_type_t.default.getter(v14);
    v27 = (void *)HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, v26))
    {
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      v28 = v27;
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      if (a3)
      {
        swift_errorRetain(a3);
        v31 = _swift_stdlib_bridgeErrorToNSError(a3);
        aBlock = (CHWorkoutDetailHeartRateTableViewCell *)v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v35, v29 + 4);
      }
      else
      {
        aBlock = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v35, v29 + 4);
        v31 = 0;
      }
      *v30 = v31;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v28, v26, "Failed to fetch phone account info with error: %@", v29, 0xCu);
      v32 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
  }
  else
  {
    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v18 = (void *)static OS_dispatch_queue.main.getter(v17);
    v19 = swift_allocObject(&unk_1007AA588, 32, 7);
    *(_BYTE *)(v19 + 16) = a1 & 1;
    *(_QWORD *)(v19 + 24) = a4;
    v35[3] = sub_10004E72C;
    v36 = v19;
    aBlock = (CHWorkoutDetailHeartRateTableViewCell *)_NSConcreteStackBlock;
    v35[0] = 1107296256;
    v35[1] = sub_10002D0F8;
    v35[2] = &unk_1007AA5A0;
    v20 = _Block_copy(&aBlock);
    v21 = v36;
    swift_retain(a4);
    swift_release(v21);
    static DispatchQoS.unspecified.getter(v22);
    aBlock = &_swiftEmptyArrayStorage;
    v23 = sub_10002FAC0();
    v24 = sub_100047110(&qword_100828C80);
    v25 = sub_10002FB08();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v24, v25, v8, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

void sub_10000BD30()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;

  v1 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "activityMoveModeChangeType");
  if (v2)
  {
    v3 = v2;
    v4 = swift_allocObject(&unk_10078D408, 24, 7);
    swift_weakInit(v4 + 16, v0);
    v5 = objc_allocWithZone((Class)HKObserverQuery);
    v8[4] = sub_10004FA48;
    v9 = v4;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000095DC;
    v8[3] = &unk_10078D420;
    v6 = _Block_copy(v8);
    v7 = objc_msgSend(v5, "initWithSampleType:predicate:updateHandler:", v3, 0, v6, swift_retain(v4).n128_f64[0]);

    _Block_release(v6);
    swift_release(v9);
    objc_msgSend(*(id *)(v0 + 32), "executeQuery:", v7, swift_release(v4).n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

void sub_10000BE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  const char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[5];
  uint64_t v25;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  HIDWORD(v23) = -1;
  v3 = (const char *)HKStandalonePhoneFitnessModeDidUpdateNotification;
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v4 = static OS_dispatch_queue.main.getter();
  v5 = swift_allocObject(&unk_1007A90D8, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v1);
  v6 = swift_allocObject(&unk_1007A9150, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = ObjectType;
  aBlock[4] = (uint64_t)sub_100554B3C;
  v25 = v6;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003B91BC;
  aBlock[3] = (uint64_t)&unk_1007A9168;
  v7 = _Block_copy(aBlock);
  swift_release(v25);
  LODWORD(v3) = notify_register_dispatch(v3, (int *)&v23 + 1, v4, v7);
  _Block_release(v7);

  if ((_DWORD)v3 || (v18 = HIDWORD(v23), HIDWORD(v23) == -1))
  {
    v9 = static os_log_type_t.error.getter(v8);
    v10 = (void *)HKLogActivity;
    v11 = v9;
    if (os_log_type_enabled(HKLogActivity, v9))
    {
      v12 = v10;
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      aBlock[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = _typeName(_:qualified:)(ObjectType, 0);
      v17 = v16;
      v22 = sub_10003E8EC(v15, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 4);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v11, "%s failed to register for HKStandalonePhoneFitnessModeDidUpdateNotification notification", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
  }
  else
  {
    v19 = sub_100047110(&qword_1008220C8);
    v20 = swift_allocObject(v19, 36, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100622F90;
    *(_DWORD *)(v20 + 32) = v18;
    v21 = *(_QWORD *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_notifyTokens);
    *(_QWORD *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_notifyTokens) = v20;
    swift_bridgeObjectRelease(v21);
  }
}

void sub_10000C120(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  char *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t ObjectType;
  _BYTE v22[24];

  v2 = type metadata accessor for BadgingCountsUpdated(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v11 = (char *)Strong;
    if ((*(_BYTE *)(Strong + OBJC_IVAR___CHFitnessAppBadgeAggregator_isBrowsingSeymour) & 1) == 0)
    {
      static Log.default.getter(Strong);
      v12._countAndFlagsBits = 0xD000000000000065;
      v12._object = (void *)0x800000010068BFB0;
      v13._object = (void *)0x800000010068C020;
      v13._countAndFlagsBits = 0xD000000000000013;
      Logger.trace(file:function:)(v12, v13);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v14 = *(_QWORD *)&v11[OBJC_IVAR___CHFitnessAppBadgeAggregator_appBadgeCount];
      v15 = *(_QWORD *)&v11[OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges];
      swift_bridgeObjectRetain(v15);
      v17 = sub_10004C800(v16);
      v18 = swift_bridgeObjectRelease(v15);
      BadgingCountsUpdated.init(appBadgeCount:seymourTabBadges:)(v14, v17, v18);
      v19 = *(_QWORD *)&v11[OBJC_IVAR___CHFitnessAppBadgeAggregator_eventHub + 8];
      ObjectType = swift_getObjectType(*(_QWORD *)&v11[OBJC_IVAR___CHFitnessAppBadgeAggregator_eventHub]);
      dispatch thunk of EventHubProtocol.publish<A>(_:)(v5, v2, &protocol witness table for BadgingCountsUpdated, ObjectType, v19);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

  }
}

uint64_t sub_10000C2DC(int a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(&unk_100789E30, 44, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a4;
  *(_DWORD *)(v16 + 40) = a1;
  aBlock[4] = sub_10004F758;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100789E48;
  v17 = _Block_copy(aBlock);
  v18 = v28;
  v19 = a3;
  swift_errorRetain(a2);
  swift_retain(a4);
  swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100047110(&qword_100828C80);
  v23 = sub_100028384((unint64_t *)&qword_1008268F0, &qword_100828C80, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

uint64_t sub_10000C510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  Class isa;
  NSString v16;
  _BYTE v18[16];

  v1 = v0;
  swift_getObjectType(v0);
  v2 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = JSONEncoder.init()();
  v4 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 1);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 2);
  v6 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 3);
  v7 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 4);
  v8 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 5);
  v9 = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 6);
  v18[0] = *(_BYTE *)(v1 + OBJC_IVAR___CHOnboardingCoordinator_criteria);
  v18[1] = v4;
  v18[2] = v5;
  v18[3] = v6;
  v18[4] = v7;
  v18[5] = v8;
  v18[6] = v9;
  v10 = sub_10004ECC0();
  v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(v18, &type metadata for OnboardingCoordinator.Criteria, v10);
  v13 = v12;
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setObject:forKey:", isa, v16);

  sub_10004D9E4(v11, v13);
  return swift_release(v3);
}

uint64_t sub_10000C780(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  char v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10003A4B8();
    v4 = *(char **)(v3 + 24);
    v5 = swift_allocObject(&unk_1007919E0, 24, 7);
    swift_weakInit(v5 + 16, v3);
    v6 = swift_allocObject(&unk_100791B48, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_10003A2DC;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = &v4[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_observers];
    swift_beginAccess(&v4[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_observers], v12, 33, 0);
    v8 = v4;
    swift_retain(v3);
    swift_retain_n(v5, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v7);
    v11 = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0x8000000000000000;
    sub_100030CA0((uint64_t)sub_10003A2B4, v6, v3, isUniquelyReferenced_nonNull_native);
    v10 = *(_QWORD *)v7;
    *(_QWORD *)v7 = v11;
    swift_bridgeObjectRelease(v10);
    swift_endAccess(v12);

    swift_release_n(v3, 2);
    return swift_release_n(v5, 2);
  }
  return result;
}

void sub_10000C8D0(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  objc_super v18;

  v2 = v1;
  v4 = sub_100047110(&qword_100828440);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for ActivityTileViewController();
  v18.receiver = v2;
  v18.super_class = v7;
  objc_msgSendSuper2(&v18, "viewWillAppear:", a1 & 1);
  v8 = objc_msgSend(v2, "navigationController");
  if (v8)
  {
    v9 = v8;
    v10 = objc_opt_self(CHActivityHistoryNavigationController);
    v11 = (void *)swift_dynamicCastObjCClass(v9, v10);
    if (!v11)

    objc_msgSend(v11, "detachPalette");
  }
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_avatarSettingsProvider + 24];
  v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_avatarSettingsProvider + 32];
  sub_100016804(&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_avatarSettingsProvider], v12);
  dispatch thunk of AvatarSettingsCoordinating.fetchAvatarSettings()(v12, v13);
  v14 = type metadata accessor for AvatarSettings(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
  {
    sub_10001BE90((uint64_t)v6, &qword_100828440);
    v16 = 0;
  }
  else
  {
    v16 = (void *)AvatarSettings.contact.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v14);
  }
  dispatch thunk of AccountButton.updateContact(_:)(v16);

  v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10081D7D8 != -1)
    swift_once(&qword_10081D7D8, sub_10004CDAC);
  objc_msgSend(v17, "postNotificationName:object:", qword_10086A208, v2);

}

uint64_t sub_10000CAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15;

  v15 = *(_OWORD *)(v0 + 24);
  static String._unconditionallyBridgeFromObjectiveC(_:)(HKSampleSortIdentifierStartDate);
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSSortDescriptor);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithKey:ascending:", v4, 0, swift_bridgeObjectRelease(v2).n128_f64[0]);
  *(_QWORD *)(v0 + 40) = v5;

  static String._unconditionallyBridgeFromObjectiveC(_:)(_HKObjectSortIdentifierCreationDate);
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSSortDescriptor);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithKey:ascending:", v9, 0, swift_bridgeObjectRelease(v7).n128_f64[0]);
  *(_QWORD *)(v0 + 48) = v10;

  v11 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v11;
  *(_QWORD *)(v11 + 16) = v5;
  *(_QWORD *)(v11 + 24) = v10;
  *(_OWORD *)(v11 + 32) = v15;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v12;
  v13 = sub_100047110(&qword_100826498);
  *v12 = v0;
  v12[1] = sub_10004F9CC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000028, 0x800000010068EFD0, sub_1001DBDE4, v11, v13);
}

uint64_t sub_10000CC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t (*)(), uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;

  v1 = sub_100047110((uint64_t *)&unk_1008396A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  v8 = sub_100047110(&qword_100830B30);
  v9 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  v30 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_bookmarkClient + 24);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_bookmarkClient + 32);
  sub_100016804((_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_bookmarkClient), v12);
  dispatch thunk of BookmarkClientProtocol.queryAllPlaylists()(v12, v13);
  v14 = swift_allocObject(&unk_100799F18, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16);
  v15 = swift_allocObject(&unk_10079B228, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1003A350C;
  *(_QWORD *)(v15 + 24) = v14;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  v16 = *(unsigned __int8 *)(v2 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v3 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_10079B250, v18 + 16, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19 + v17, v4, v1);
  v20 = (uint64_t (**)(uint64_t *))(v19 + v18);
  *v20 = sub_1003A3524;
  v20[1] = (uint64_t (*)(uint64_t *))v15;
  v21 = sub_100047110(&qword_1008282F0);
  Promise.init(asyncOperation:)(sub_1003A3538, v19, v21);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  v22 = v29;
  v23 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v29);
  v25 = v24;
  v26 = swift_allocObject(&unk_10079B278, 32, 7);
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  v23(sub_1001104CC, v26);
  swift_release(v25);
  v27 = swift_release(v26);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v30 + 8))(v11, v22, v27);
}

uint64_t sub_10000CEAC(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v25 = a1;
  v27 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110((uint64_t *)&unk_100832590);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB54();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInteractive(_:), v9);
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10000522C(v25, (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_1007A3910, v15 + v8, v14 | 7);
  v17 = v26;
  *(_QWORD *)(v16 + 16) = v26;
  sub_10004DA28((uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  aBlock[4] = sub_10004E550;
  v33 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_1007A3928;
  v18 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v17);
  v31 = _swiftEmptyArrayStorage;
  v19 = sub_10002FAC0();
  v20 = sub_100047110(&qword_100828C80);
  v21 = sub_10002FB08();
  v22 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v20, v21, v27, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v2, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
  return swift_release(v33);
}

uint64_t sub_10000D148(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;
  _BYTE v28[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10081E0B0 != -1)
    swift_once(&qword_10081E0B0, sub_10004F61C);
  v11 = byte_10083D1A0;
  swift_beginAccess(a1 + 16, v28, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (Strong)
  {
    v13 = Strong;
    *(_QWORD *)(Strong + 64) = sub_1000115A0(a2, v11);
    *(_QWORD *)(v13 + 72) = v14;
    *(_BYTE *)(v13 + 80) = v15 & 1;
    swift_release(v13);
  }
  sub_10002FB54();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  aBlock[4] = sub_10004E0BC;
  v27 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100791B10;
  v18 = _Block_copy(aBlock);
  v19 = v27;
  swift_retain(a1);
  swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100047110(&qword_100828C80);
  v23 = sub_100028384((unint64_t *)&qword_1008268F0, &qword_100828C80, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_10000D3B0(_QWORD *a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  objc_class *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  objc_super v35;
  _QWORD *v36;

  v34 = a1;
  v31 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_observers] = _swiftEmptyArrayStorage;
  sub_1000252E0((uint64_t)a1, (uint64_t)&v2[OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_awardsDataProvider]);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_badgeImageFactory] = a2;
  v28 = sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v32 = v2;
  static DispatchQoS.utility.getter(a2);
  v36 = _swiftEmptyArrayStorage;
  v13 = sub_1000083D8(&qword_10082DEA0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v30 = v13;
  v14 = sub_100047110(&qword_10082DEA8);
  v29 = v14;
  v15 = sub_1000283C4(&qword_10082DEB0, &qword_10082DEA8);
  v16 = v9;
  v17 = v14;
  v18 = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v17, v15, v7, v13);
  v19 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v21 = v33;
  v22 = v31;
  v20(v33, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v31);
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100698420, v12, v16, v21, 0);
  v24 = v32;
  *(_QWORD *)&v32[OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_utilityQueue] = v23;
  static DispatchQoS.userInitiated.getter();
  v36 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v15, v18, v30);
  v20(v21, v19, v22);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_userInitiatedQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x8000000100698450, v12, v16, v21, 0);

  v25 = (objc_class *)type metadata accessor for TrophyCasePrefetcher();
  v35.receiver = v24;
  v35.super_class = v25;
  v26 = objc_msgSendSuper2(&v35, "init");
  sub_10000FCD8();

  _s10FitnessApp24HistoryViewActionContextVwxx_0(v34);
  return v26;
}

uint64_t sub_10000D6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;

  v1 = sub_100047110((uint64_t *)&unk_1008396A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  v8 = sub_100047110(&qword_100830B30);
  v9 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  v30 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR___CHFitnessAppContext_bookmarkClient + 24);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR___CHFitnessAppContext_bookmarkClient + 32);
  sub_100016804((_QWORD *)(v0 + OBJC_IVAR___CHFitnessAppContext_bookmarkClient), v12);
  dispatch thunk of BookmarkClientProtocol.queryAllPlaylists()(v12, v13);
  v14 = swift_allocObject(&unk_1007A77A8, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16);
  v15 = swift_allocObject(&unk_1007A77D0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1005387A4;
  *(_QWORD *)(v15 + 24) = v14;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  v16 = *(unsigned __int8 *)(v2 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v3 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1007A77F8, v18 + 16, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19 + v17, v4, v1);
  v20 = (uint64_t (**)(uint64_t *))(v19 + v18);
  *v20 = sub_1003A3524;
  v20[1] = (uint64_t (*)(uint64_t *))v15;
  v21 = sub_100047110(&qword_1008282F0);
  Promise.init(asyncOperation:)(sub_1005387C8, v19, v21);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  v22 = v29;
  v23 = (void (*)(uint64_t (*)(uint64_t), uint64_t))Promise.operation.getter(v29);
  v25 = v24;
  v26 = swift_allocObject(&unk_1007A7820, 32, 7);
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  v23(sub_1002AC884, v26);
  swift_release(v25);
  v27 = swift_release(v26);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v30 + 8))(v11, v22, v27);
}

unint64_t sub_10000D90C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  const mach_header_64 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = sub_100047110(&qword_100839FF8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)objc_opt_self(UIApplication);
  objc_msgSend(v7, "isRunningInStoreDemoMode");
  v8 = objc_msgSend(v7, "sharedApplication");
  objc_msgSend(v8, "launchedToTest");

  v9 = a1[3];
  v10 = a1[4];
  sub_100016804(a1, v9);
  v11 = sub_10004ED94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OnboardingCoordinator.Criteria.CodingKeys, &type metadata for OnboardingCoordinator.Criteria.CodingKeys, v11, v9, v10);
  if (v1)
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  v32 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v3);
  v31 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v3);
  v30 = 2;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v3);
  v29 = 3;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v3);
  v28 = 4;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v3);
  v27 = 5;
  HIDWORD(v23) = KeyedDecodingContainer.decode(_:forKey:)(&v27, v3);
  v26 = 6;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  v17 = 0x1000000000000;
  if ((v16 & 1) == 0)
    v17 = 0;
  v18 = 0x10000000000;
  if ((v23 & 0x100000000) == 0)
    v18 = 0;
  v19 = &_mh_execute_header;
  if ((v24 & 1) == 0)
    v19 = 0;
  v20 = 0x1000000;
  if ((v25 & 1) == 0)
    v20 = 0;
  v21 = 0x10000;
  if ((v14 & 1) == 0)
    v21 = 0;
  v22 = 256;
  if ((v13 & 1) == 0)
    v22 = 0;
  return v22 & 0xFFFFFFFFFFFFFFFELL | v12 & 1 | v21 | v20 | (unint64_t)v19 | v18 | v17;
}

void sub_10000DBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v1 = OBJC_IVAR___CHBackgroundTaskAssertion_state;
  if (*(_BYTE *)(v0 + OBJC_IVAR___CHBackgroundTaskAssertion_state) == 1
    && (v2 = (uint64_t *)(v0 + OBJC_IVAR___CHBackgroundTaskAssertion_identifier),
        (*(_BYTE *)(v0 + OBJC_IVAR___CHBackgroundTaskAssertion_identifier + 8) & 1) == 0))
  {
    v4 = *v2;
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    objc_msgSend(v5, "endBackgroundTask:", v4);

    *v2 = 0;
    *((_BYTE *)v2 + 8) = 1;
    *(_BYTE *)(v0 + v1) = 3;
  }
  else
  {
    v3 = static os_log_type_t.error.getter();
    v6 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v6, "Background task invalidated outside of acquired state", 53, 2, &_swiftEmptyArrayStorage);

  }
}

char *sub_10000DCDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t ObjectType;
  _QWORD v18[5];

  v1 = type metadata accessor for EventDispatchStrategy(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB54();
  v5 = v0;
  v7 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for EventDispatchStrategy.async(_:), v1);
  v18[3] = type metadata accessor for DispatchTimerProvider(0);
  v18[4] = &protocol witness table for DispatchTimerProvider;
  sub_10004C480(v18);
  DispatchTimerProvider.init()();
  v8 = type metadata accessor for EventHub(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = EventHub.init(queue:dispatchStrategy:timerProvider:)(v7, v4, v18);
  type metadata accessor for ContentAvailabilityClient(0);
  swift_retain(v9);
  v11 = static OS_dispatch_queue.main.getter(v10);
  v12 = ContentAvailabilityClient.__allocating_init(eventHub:queue:)(v9, &protocol witness table for EventHub, v11);

  v13 = (char *)objc_allocWithZone((Class)type metadata accessor for SeymourAvailabilityManager(0));
  v14 = sub_10002AE04(v12, v9, v13);
  swift_release(v9);
  ObjectType = swift_getObjectType(v5);
  swift_deallocPartialClassInstance(v5, ObjectType, *(unsigned int *)((swift_isaMask & *v5) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v5) + 0x34));
  return v14;
}

id sub_10000DE6C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  int v13;
  uint64_t v14;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kASDomain);
  v1 = v0;
  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4)
  {
    v5 = kASActivitySharingIsSetup;
    v6 = v4;
    v4 = objc_msgSend(v6, "BOOLForKey:", v5);
    v7 = static os_log_type_t.default.getter();
    v8 = (void *)HKLogActivity;
    v9 = v7;
    if (os_log_type_enabled(HKLogActivity, v7))
    {
      v10 = v8;
      v11 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 67109120;
      v13 = (int)v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v9, "Checking defaults for fitness friends setup: %{BOOL}d", v11, 8u);
      swift_slowDealloc(v11, -1, -1);

    }
  }
  return v4;
}

void sub_10000DFD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;
  char v26[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v11 = (void *)Strong;
    v21 = v6;
    v22 = v3;
    v12 = *(void **)(Strong + OBJC_IVAR___CHHistoryDataProvider_queue);
    if (v12)
    {
      v13 = swift_allocObject(&unk_10079CD00, 24, 7);
      swift_unknownObjectWeakInit(v13 + 16, v11);
      aBlock[4] = sub_10004F20C;
      v25 = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002D0F8;
      aBlock[3] = &unk_10079CE30;
      v14 = _Block_copy(aBlock);
      v15 = v12;
      v16 = swift_retain(v13);
      static DispatchQoS.unspecified.getter(v16);
      v23 = _swiftEmptyArrayStorage;
      v17 = sub_10002FAC0();
      v18 = sub_100047110(&qword_100828C80);
      v19 = sub_10002FB08();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v2, v17);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v14);
      _Block_release(v14);

      (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
      v20 = v25;
      swift_release(v13);
      swift_release(v20);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10000E1EC(uint64_t a1, uint64_t a2)
{
  char v3;
  os_log_type_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = (void *)HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    v6 = v5;
    v7 = swift_slowAlloc(18, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67109378;
    LODWORD(v11) = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, (char *)&v11 + 4, v7 + 4);
    *(_WORD *)(v7 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v9 = _swift_stdlib_bridgeErrorToNSError(a2);
      v11 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 10);
    }
    else
    {
      v11 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 10);
      v9 = 0;
    }
    *v8 = v9;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v6, v4, "Notification authorization granted: %{BOOL}d, error: %@", (uint8_t *)v7, 0x12u);
    v10 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
}

void sub_10000E3B4(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = static os_log_type_t.default.getter(a1);
  v5 = (void *)HKLogActivity;
  v6 = v4;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    v7 = v5;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v20 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = _typeName(_:qualified:)(a2, 0);
    v12 = v11;
    v18 = sub_10003E8EC(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v8 + 4);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "%s stopping Activity goal query", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  v13 = OBJC_IVAR___CHOnboardingCoordinator_activityGoalsQuery;
  v14 = *(void **)(a1 + OBJC_IVAR___CHOnboardingCoordinator_activityGoalsQuery);
  if (v14)
  {
    v15 = *(void **)(a1 + OBJC_IVAR___CHOnboardingCoordinator_healthStore);
    v16 = v14;
    objc_msgSend(v15, "stopQuery:", v16);
    v17 = *(void **)(a1 + v13);
    *(_QWORD *)(a1 + v13) = 0;

  }
}

uint64_t initializeBufferWithCopyOfBuffer for AccountDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t initializeWithCopy for ActivityDayHistogram(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t initializeWithCopy for Histogram1D(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10000E694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v45 = a1;
  v3 = sub_100047110(&qword_10082C3B0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v44 = sub_100047110((uint64_t *)&unk_100836170);
  v9 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (char *)&v40 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v15);
  v18._countAndFlagsBits = 0xD00000000000007BLL;
  v18._object = (void *)0x8000000100695060;
  v19._object = (void *)0x8000000100695160;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  Logger.trace(file:function:)(v18, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient + 24);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient + 32);
  sub_100016804((_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient), v21);
  dispatch thunk of EngagementClientProtocol.queryIntroSheet()(v21, v20);
  v22 = swift_allocObject(&unk_100793D08, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v2);
  v23 = swift_allocObject(&unk_100793E20, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1002AC67C;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = v41;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v41, v8, v3);
  v25 = *(unsigned __int8 *)(v4 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v5 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100793E48, v27 + 16, v25 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v28 + v26, v24, v3);
  v29 = (uint64_t (**)(uint64_t))(v28 + v27);
  *v29 = sub_1002AC6AC;
  v29[1] = (uint64_t (*)(uint64_t))v23;
  v30 = v42;
  Promise.init(asyncOperation:)(sub_1002AC6C0, v28, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  v31 = swift_allocObject(&unk_100793E70, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1002AA730;
  *(_QWORD *)(v31 + 24) = 0;
  v33 = v43;
  v32 = v44;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v43, v30, v44);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = (v10 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_100793E98, v36 + 16, v34 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37 + v35, v33, v32);
  v38 = (_QWORD *)(v37 + v36);
  *v38 = sub_1001104C4;
  v38[1] = v31;
  Promise.init(asyncOperation:)(sub_100110010, v37, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v30, v32);
}

uint64_t sub_10000E9F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v45 = a1;
  v3 = sub_100047110(&qword_100822E88);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v44 = sub_100047110((uint64_t *)&unk_100836170);
  v9 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (char *)&v40 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v15);
  v18._countAndFlagsBits = 0xD00000000000007BLL;
  v18._object = (void *)0x8000000100695060;
  v19._object = (void *)0x80000001006951A0;
  v19._countAndFlagsBits = 0xD00000000000001ALL;
  Logger.trace(file:function:)(v18, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailabilityClient + 24);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailabilityClient + 32);
  sub_100016804((_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailabilityClient), v21);
  dispatch thunk of ContentAvailabilityClientProtocol.queryContentAvailability()(v21, v20);
  v22 = swift_allocObject(&unk_100793D08, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v2);
  v23 = swift_allocObject(&unk_100793F60, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1002AC730;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = v41;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v41, v8, v3);
  v25 = *(unsigned __int8 *)(v4 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v5 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100793F88, v27 + 16, v25 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v28 + v26, v24, v3);
  v29 = (uint64_t (**)(uint64_t))(v28 + v27);
  *v29 = sub_1002AC760;
  v29[1] = (uint64_t (*)(uint64_t))v23;
  v30 = v42;
  Promise.init(asyncOperation:)(sub_10016AE1C, v28, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  v31 = swift_allocObject(&unk_100793FB0, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1002AA5C4;
  *(_QWORD *)(v31 + 24) = 0;
  v33 = v43;
  v32 = v44;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v43, v30, v44);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = (v10 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_100793FD8, v36 + 16, v34 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37 + v35, v33, v32);
  v38 = (_QWORD *)(v37 + v36);
  *v38 = sub_1001104C4;
  v38[1] = v31;
  Promise.init(asyncOperation:)(sub_100110010, v37, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v30, v32);
}

uint64_t sub_10000ED50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v45 = a1;
  v3 = sub_100047110(&qword_10082C3A8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v44 = sub_100047110((uint64_t *)&unk_100836170);
  v9 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (char *)&v40 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v15);
  v18._countAndFlagsBits = 0xD00000000000007BLL;
  v18._object = (void *)0x8000000100695060;
  v19._object = (void *)0x8000000100695130;
  v19._countAndFlagsBits = 0xD000000000000021;
  Logger.trace(file:function:)(v18, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient + 24);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient + 32);
  sub_100016804((_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient), v21);
  dispatch thunk of EngagementClientProtocol.queryWhatsNewSheet()(v21, v20);
  v22 = swift_allocObject(&unk_100793D08, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v2);
  v23 = swift_allocObject(&unk_100793D80, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1002AC5F4;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = v41;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v41, v8, v3);
  v25 = *(unsigned __int8 *)(v4 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v5 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100793DA8, v27 + 16, v25 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v28 + v26, v24, v3);
  v29 = (uint64_t (**)(uint64_t))(v28 + v27);
  *v29 = sub_1002AC624;
  v29[1] = (uint64_t (*)(uint64_t))v23;
  v30 = v42;
  Promise.init(asyncOperation:)(sub_1002AC638, v28, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  v31 = swift_allocObject(&unk_100793DD0, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1002AA754;
  *(_QWORD *)(v31 + 24) = 0;
  v33 = v43;
  v32 = v44;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v43, v30, v44);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = (v10 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_100793DF8, v36 + 16, v34 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37 + v35, v33, v32);
  v38 = (uint64_t (**)(uint64_t))(v37 + v36);
  *v38 = sub_10010FFFC;
  v38[1] = (uint64_t (*)(uint64_t))v31;
  Promise.init(asyncOperation:)(sub_100110010, v37, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v30, v32);
}

uint64_t sub_10000F0B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v45 = a1;
  v3 = sub_100047110(&qword_100823018);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v44 = sub_100047110((uint64_t *)&unk_100836170);
  v9 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (char *)&v40 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v15);
  v18._countAndFlagsBits = 0xD00000000000007BLL;
  v18._object = (void *)0x8000000100695060;
  v19._object = (void *)0x8000000100695180;
  v19._countAndFlagsBits = 0xD000000000000018;
  Logger.trace(file:function:)(v18, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_privacyPreferenceClient + 24);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_privacyPreferenceClient + 32);
  sub_100016804((_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_privacyPreferenceClient), v21);
  dispatch thunk of PrivacyPreferenceClientProtocol.fetchNoticePrivacyPreference(ignoreCaches:)(0, v21, v20);
  v22 = swift_allocObject(&unk_100793D08, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v2);
  v23 = swift_allocObject(&unk_100793EC0, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1002AC6E0;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = v41;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v41, v8, v3);
  v25 = *(unsigned __int8 *)(v4 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v5 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100793EE8, v27 + 16, v25 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v28 + v26, v24, v3);
  v29 = (uint64_t (**)(uint64_t))(v28 + v27);
  *v29 = sub_1002AC710;
  v29[1] = (uint64_t (*)(uint64_t))v23;
  v30 = v42;
  Promise.init(asyncOperation:)(sub_10016AE50, v28, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  v31 = swift_allocObject(&unk_100793F10, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1002AA70C;
  *(_QWORD *)(v31 + 24) = 0;
  v33 = v43;
  v32 = v44;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v43, v30, v44);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = (v10 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_100793F38, v36 + 16, v34 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37 + v35, v33, v32);
  v38 = (_QWORD *)(v37 + v36);
  *v38 = sub_1001104C4;
  v38[1] = v31;
  Promise.init(asyncOperation:)(sub_100110010, v37, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v30, v32);
}

uint64_t sub_10000F414()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  NSString v14;
  id v15;
  int v16;
  uint64_t v17;
  double v18;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v21[12];
  unsigned int v22;
  _OWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;

  v0 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v0);
  v2 = &v21[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v9 = &v21[-v8];
  v10 = (void *)objc_opt_self(NSUserDefaults);
  v11 = objc_msgSend(v10, "standardUserDefaults");
  v12 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v11, "BOOLForKey:", v12);

  v13 = objc_msgSend(v10, "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "objectForKey:", v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(v23, v15);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_100025D58((uint64_t)v23, (uint64_t)v24);
  if (!v25)
  {
    sub_10001BE90((uint64_t)v24, (uint64_t *)&unk_100828420);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_10;
  }
  v16 = swift_dynamicCast(v2, v24, (char *)&type metadata for Any + 8, v3, 6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, v16 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_10:
    sub_10001BE90((uint64_t)v2, (uint64_t *)&unk_100828370);
    return 0;
  }
  v17 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v9, v2, v3);
  Date.init()(v17);
  v18 = Date.timeIntervalSince(_:)(v9);
  v19 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v19(v6, v3);
  v19(v9, v3);
  if (v18 < 600.0)
    return v22;
  else
    return 0;
}

unint64_t destroy for ActivitySharingFriendListDataProvider.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[1]);
    return swift_bridgeObjectRelease(a1[2]);
  }
  return result;
}

uint64_t sub_10000F728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[16];
  id v28;
  void *v29;

  v3 = sub_100047110(&qword_10081E650);
  v4 = __chkstk_darwin(v3);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = static os_log_type_t.default.getter(v4);
  v8 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "ReachableContactDataSource started reachability query.", 54, 2, _swiftEmptyArrayStorage);

  v29 = &_swiftEmptyDictionarySingleton;
  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v10 = 4;
    while (1)
    {
      v11 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1)
          : *(id *)(a1 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v28 = v11;
      sub_1005D1BC4(&v29, &v28);

      ++v10;
      if (v13 == v9)
      {
        swift_bridgeObjectRelease(a1);
        v14 = v29;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  v14 = &_swiftEmptyDictionarySingleton;
LABEL_16:
  v16 = swift_allocObject(&unk_1007AD158, 24, 7);
  *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
  sub_1005D1678((uint64_t)v14);
  v18 = v17;
  if (ASManateeContainerEnabled())
  {
    v19 = *(_QWORD *)(v1 + 48);
    v20 = (_QWORD *)swift_allocObject(&unk_1007AD1D0, 40, 7);
    v20[2] = v16;
    v20[3] = v1;
    v20[4] = v14;
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
    v22 = swift_allocObject(&unk_1007AD1F8, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, v19);
    v23 = (_QWORD *)swift_allocObject(&unk_1007AD220, 64, 7);
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v22;
    v23[5] = v18;
    v23[6] = sub_1005D2F30;
    v23[7] = v20;
    swift_retain(v16);
    swift_retain(v1);
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
    v24 = sub_10020D9C0((uint64_t)v6, (uint64_t)&unk_10083D180, (uint64_t)v23);
  }
  else
  {
    v25 = sub_10004CEFC(v18);
    swift_bridgeObjectRelease(v18);
    v20 = (_QWORD *)swift_allocObject(&unk_1007AD180, 40, 7);
    v20[2] = v16;
    v20[3] = v1;
    v20[4] = v14;
    v24 = swift_allocObject(&unk_1007AD1A8, 32, 7);
    *(_QWORD *)(v24 + 16) = v1;
    *(_QWORD *)(v24 + 24) = v16;
    swift_retain_n(v16, 2);
    swift_retain_n(v1, 2);
    sub_1000171E8(v25, (uint64_t)sub_100017A30, (uint64_t)v20, (uint64_t)sub_1005D2EF0, v24);
    v18 = v25;
  }
  swift_release(v16);
  swift_bridgeObjectRelease(v18);
  swift_release(v20);
  return swift_release(v24);
}

uint64_t sub_10000FA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __n128 v6;
  char v7;
  uint64_t result;
  id v9;
  _QWORD *v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)_PSContactSuggester), "init");
    v10 = _swiftEmptyArrayStorage;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v9, "contactSuggestionsWithMaxSuggestions:excludeContactsWithIdentifiers:", 10, isa);

    v13 = sub_10001E724(0, &qword_10083D168, _PSContactSuggestion_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    swift_retain(v1);
    v15 = sub_1005D2D10(v14);
    swift_bridgeObjectRelease(v14);
    swift_release(v1);
    v26 = (unint64_t)_swiftEmptyArrayStorage;
    v16 = v15[2];
    if (v16)
    {
      swift_bridgeObjectRetain(v15);
      for (i = 0; i != v16; ++i)
      {
        v19 = (void *)v15[i + 4];
        if (v19)
        {
          v20 = v19;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
          v22 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v21 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v22 >= v21 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
          specialized Array._endMutation()(v18);
        }
      }
      swift_bridgeObjectRelease(v15);
      v10 = (_QWORD *)v26;
    }
    swift_bridgeObjectRelease(v15);
    sub_100007CA4((uint64_t)v10);
    v24 = v23;

    swift_bridgeObjectRelease(v10);
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_10000FCD8()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[5];
  uint64_t v11;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v3 = swift_allocObject(&unk_1007957E8, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v0);
  v10[4] = sub_10004EF90;
  v11 = v3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1000398D4;
  v10[3] = &unk_1007958A0;
  v4 = _Block_copy(v10);
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationWillEnterForegroundNotification, 0, v2, v4, swift_release(v11).n128_f64[0]);
  _Block_release(v4);

  v6 = sub_100047110(&qword_10082CEC0);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100622F90;
  *(_QWORD *)(v7 + 56) = swift_getObjectType(v5);
  *(_QWORD *)(v7 + 32) = v5;
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_observers);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_observers) = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t _s10FitnessApp37ActivitySharingFriendListDataProviderC5StateOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
  }
  else
  {
    v4 = a2[1];
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
  }
  return a1;
}

uint64_t sub_10000FFA8()
{
  char *v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  _QWORD aBlock[5];
  uint64_t v20;

  ObjectType = swift_getObjectType(v0);
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)aBlock - v8;
  Date.init()(v7);
  if (objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_workoutProvider], "dataAvailable"))
  {
    v10 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_operationQueue];
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
    v11 = *(unsigned __int8 *)(v3 + 80);
    v12 = (v11 + 24) & ~v11;
    v13 = (v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = swift_allocObject(&unk_10078FCB0, v13 + 8, v11 | 7);
    *(_QWORD *)(v14 + 16) = v0;
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v14 + v12, v6, v2);
    *(_QWORD *)(v14 + v13) = ObjectType;
    aBlock[4] = sub_10002E7E8;
    v20 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_10078FCC8;
    v15 = _Block_copy(aBlock);
    v16 = v20;
    v17 = v0;
    swift_release(v16);
    objc_msgSend(v10, "addOperationWithBlock:", v15);
    _Block_release(v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

void sub_100010160()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  _BYTE *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v1 = *(void **)(v0 + OBJC_IVAR___CHFitnessAppBadgeAggregator_activitySharingClient);
  if (v1)
  {
    v2 = objc_allocWithZone((Class)type metadata accessor for BackgroundTaskAssertion());
    v3 = v1;
    v4 = objc_msgSend(v2, "init");
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v6 = swift_allocObject(&unk_100789908, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, v4);
    v19 = sub_10016ADF0;
    v20 = v6;
    v15 = _NSConcreteStackBlock;
    v16 = 1107296256;
    v17 = sub_10002D0F8;
    v18 = &unk_100789DA8;
    v7 = _Block_copy(&v15);
    v8 = objc_msgSend(v5, "beginBackgroundTaskWithExpirationHandler:", v7, swift_release(v20).n128_f64[0]);
    _Block_release(v7);

    v9 = &v4[OBJC_IVAR___CHBackgroundTaskAssertion_identifier];
    *(_QWORD *)v9 = v8;
    v9[8] = 0;
    v4[OBJC_IVAR___CHBackgroundTaskAssertion_state] = 1;
    v10 = swift_allocObject(&unk_1007897C8, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v0);
    v11 = swift_allocObject(&unk_100789DE0, 32, 7);
    *(_QWORD *)(v11 + 16) = v4;
    *(_QWORD *)(v11 + 24) = v10;
    v19 = sub_10004F768;
    v20 = v11;
    v15 = _NSConcreteStackBlock;
    v16 = 1107296256;
    v17 = sub_1000064EC;
    v18 = &unk_100789DF8;
    v12 = _Block_copy(&v15);
    v13 = v20;
    v14 = v4;
    objc_msgSend(v3, "appBadgeCountWithCompletion:", v12, swift_release(v13).n128_f64[0]);
    _Block_release(v12);

  }
}

uint64_t sub_100010368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  double (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;

  v109 = a2;
  v110 = a3;
  v4 = sub_100047110((uint64_t *)&unk_1008283A0);
  __chkstk_darwin(v4);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Artwork(0);
  v103 = *(_QWORD *)(v6 - 8);
  v104 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for StandardArtworkDescriptor(0);
  v98 = *(_QWORD *)(v100 - 8);
  v8 = __chkstk_darwin(v100);
  v99 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v96 = (char *)&v89 - v10;
  v11 = type metadata accessor for ArtworkDescriptor(0);
  v12 = __chkstk_darwin(v11);
  v97 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v95 = (char *)&v89 - v14;
  v15 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  v101 = *(_QWORD *)(v15 - 8);
  v102 = v15;
  __chkstk_darwin(v15);
  v105 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110(&qword_10081E640);
  __chkstk_darwin(v21);
  v23 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100047110(&qword_10082FF70);
  __chkstk_darwin(v26);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CatalogLockup(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D8CC(a1, (uint64_t)v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    swift_release(v109);
    sub_10001BE90(a1, &qword_10082FF70);
    sub_10001BE90((uint64_t)v28, &qword_10082FF70);
LABEL_7:
    v42 = v110;
    v43 = type metadata accessor for CatalogTipSectionItem(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  }
  v91 = v18;
  v92 = v17;
  v33 = v105;
  v34 = v107;
  v93 = a1;
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v32, v28, v29);
  CatalogLockup.streamingURL.getter(v35);
  v36 = v106;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v23, 1, v108) == 1)
  {
    v37 = sub_10001BE90((uint64_t)v23, &qword_10081E640);
    v38 = static Log.default.getter(v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "[CatalogTipSectionItem] Streaming url not found for tip lockup", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    swift_release(v109);
    sub_10001BE90(v93, &qword_10082FF70);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v20, v92);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    goto LABEL_7;
  }
  v106 = *(_QWORD *)(v36 + 32);
  v90 = v25;
  ((void (*)(char *, char *, uint64_t))v106)(v25, v23, v108);
  v45 = sub_100047110((uint64_t *)&unk_1008397B0);
  v92 = v29;
  v46 = v109;
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v111, 0, 0, v45);
  v47 = v112;
  v48 = v113;
  sub_100016804(v111, v112);
  v91 = v30;
  v49 = v33;
  v50.n128_f64[0] = MediaTagStringBuilding.makeAttributedTagStrings(for:)(v32, v47, v48);
  v51 = (uint64_t)v95;
  v52 = CatalogLockup.artworkDescriptor.getter(v50);
  v53 = v96;
  ArtworkDescriptor.standardArtworkDescriptor.getter(v52);
  v54 = sub_100327A9C(v51);
  v55 = v34;
  StandardArtworkDescriptor.artwork.getter(v54);
  v56 = *(double (**)(char *, uint64_t))(v98 + 8);
  v57 = v53;
  v58 = v100;
  v59.n128_f64[0] = v56(v57, v100);
  v60 = (uint64_t)v97;
  v61 = CatalogLockup.artworkDescriptor.getter(v59);
  v62 = v99;
  ArtworkDescriptor.standardArtworkDescriptor.getter(v61);
  v63 = sub_100327A9C(v60);
  v64 = StandardArtworkDescriptor.cropCode.getter(v63);
  v97 = v65;
  v98 = v64;
  v66 = ((uint64_t (*)(char *, uint64_t))v56)(v62, v58);
  v67 = CatalogLockup.identifier.getter(v66);
  v99 = v68;
  v100 = v67;
  v69 = (uint64_t)v94;
  v70 = CatalogLockup.streamingArtwork.getter();
  v71 = CatalogLockup.streamingArtworkCropCode.getter(v70);
  v95 = v72;
  v96 = (char *)v71;
  v73 = CatalogLockup.streamingSubtitle.getter();
  v75 = v74;
  v76 = CatalogLockup.streamingTitle.getter();
  v78 = v77;
  swift_release(v46);
  sub_10001BE90(v93, &qword_10082FF70);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v32, v92);
  v79 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v80 = v110;
  ((void (*)(uint64_t, char *, uint64_t))v106)(v110 + v79[12], v90, v108);
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v80, v49, v102);
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v80 + v79[5], v55, v104);
  v81 = (uint64_t *)(v80 + v79[6]);
  v82 = v97;
  *v81 = v98;
  v81[1] = (uint64_t)v82;
  v83 = (uint64_t *)(v80 + v79[7]);
  v84 = v99;
  *v83 = v100;
  v83[1] = (uint64_t)v84;
  sub_10004D884(v69, v80 + v79[8]);
  v85 = (_QWORD *)(v80 + v79[9]);
  v86 = v95;
  *v85 = v96;
  v85[1] = v86;
  v87 = (uint64_t *)(v80 + v79[10]);
  *v87 = v73;
  v87[1] = v75;
  v88 = (uint64_t *)(v80 + v79[11]);
  *v88 = v76;
  v88[1] = v78;
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v111);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v79 - 1) + 56))(v80, 0, 1, v79);
}

char *sub_100010A54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  id v17;
  Class isa;
  id v19;
  id v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  Class v24;
  objc_class *v25;
  objc_class *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;

  v1 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_calendar;
  v12 = qword_10081D558;
  v13 = v0;
  if (v12 != -1)
    swift_once(&qword_10081D558, sub_100006F7C);
  v14 = &v13[v11];
  v15 = sub_10003CE9C(v1, (uint64_t)qword_100869D40);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v16(v14, v15, v1);
  v17 = objc_allocWithZone((Class)HKDateCache);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v17, "initWithCalendar:", isa);

  *(_QWORD *)&v13[OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_dateCache] = v19;
  v16(v4, v15, v1);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSDate), "init");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

  Calendar.startOfDay(for:)(v8);
  v21 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22 = v8;
  v23 = v30;
  v21(v22, v30);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v24 = Date._bridgeToObjectiveC()().super.isa;
  v21(v10, v23);
  *(_QWORD *)&v13[OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentDeviceDate] = v24;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_currentSelectedDate] = v24;
  v25 = v24;

  v26 = (objc_class *)type metadata accessor for ActivityDateCache(0);
  v31.receiver = v13;
  v31.super_class = v26;
  v27 = (char *)objc_msgSendSuper2(&v31, "init");
  objc_msgSend(*(id *)&v27[OBJC_IVAR____TtC10FitnessApp17ActivityDateCache_dateCache], "ch_addObserver:", v27);

  return v27;
}

uint64_t sub_100010CB8()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[16];

  v1 = objc_msgSend(objc_allocWithZone((Class)CNFavorites), "initWithContactStore:", *(_QWORD *)(v0 + 24));
  v2 = objc_msgSend(v1, "entries");
  v3 = sub_10001E724(0, (unint64_t *)&unk_10083D170, CNFavoritesEntry_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  swift_retain(v0);
  v5 = sub_1005D2B40(v4);
  swift_bridgeObjectRelease(v4);
  swift_release(v0);
  v6 = (uint64_t)_swiftEmptyArrayStorage;
  v25 = (unint64_t)_swiftEmptyArrayStorage;
  v7 = v5[2];
  if (v7)
  {
    swift_bridgeObjectRetain(v5);
    for (i = 0; i != v7; ++i)
    {
      v10 = (void *)v5[i + 4];
      if (v10)
      {
        v11 = v10;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v9);
      }
    }
    swift_bridgeObjectRelease(v5);
    v6 = v25;
  }
  swift_bridgeObjectRelease(v5);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v24 = v6;
    else
      v24 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v15 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v16 = static os_log_type_t.default.getter(v14);
  v17 = (void *)HKLogActivity;
  v18 = v16;
  if (os_log_type_enabled(HKLogActivity, v16))
  {
    v19 = v17;
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134217984;
    v25 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v20 + 4);
    _os_log_impl((void *)&_mh_execute_header, v19, v18, "Found %ld suggestions from Favorites.", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);

  }
  sub_100007CA4(v6);
  v22 = v21;

  swift_bridgeObjectRelease(v6);
  return v22;
}

unint64_t sub_100010FC0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  unint64_t v6;
  id v7;
  NSString v8;
  unsigned __int8 v9;
  id v10;
  NSString v11;
  id v12;
  NSString v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const mach_header_64 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  const mach_header_64 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  NSString v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD v44[2];
  _OWORD v45[2];
  _QWORD v46[4];

  v0 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = JSONDecoder.init()();
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "objectForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v45, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_100025D58((uint64_t)v45, (uint64_t)v46);
  if (v46[3])
  {
    if ((swift_dynamicCast(v44, v46, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v26 = v44[0];
      v25 = v44[1];
      v6 = sub_10004EC7C();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v46, &type metadata for OnboardingCoordinator.Criteria, v26, v25, &type metadata for OnboardingCoordinator.Criteria, v6);
      v40 = v26;
      v41 = v25;
      v42 = v1;
      v23 = LOBYTE(v46[0]);
      LODWORD(v24) = BYTE1(v46[0]);
      LODWORD(v1) = BYTE2(v46[0]);
      LODWORD(v25) = BYTE3(v46[0]);
      LODWORD(v26) = BYTE4(v46[0]);
      LODWORD(v27) = BYTE5(v46[0]);
      LODWORD(v28) = BYTE6(v46[0]);
      v29 = objc_msgSend(v2, "standardUserDefaults");
      v30 = String._bridgeToObjectiveC()();
      v43 = objc_msgSend(v29, "hk_keyExists:", v30);

      if ((v43 & 1) != 0)
      {
        sub_10004D9E4(v40, v41);
      }
      else
      {
        v31 = objc_msgSend(v2, "standardUserDefaults");
        v32 = 0x1000000000000;
        if (!(_DWORD)v28)
          v32 = 0;
        v33 = 0x10000000000;
        if (!(_DWORD)v27)
          v33 = 0;
        v34 = &_mh_execute_header;
        if (!(_DWORD)v26)
          v34 = 0;
        v35 = 0x1000000;
        if (!(_DWORD)v25)
          v35 = 0;
        v36 = 0x10000;
        if (!(_DWORD)v1)
          v36 = 0;
        v37 = 256;
        if (!(_DWORD)v24)
          v37 = 0;
        v38 = sub_10002A5B4(v37 | v23 | v36 | v35 | (unint64_t)v34 | v33 | v32) == 5;
        v39 = String._bridgeToObjectiveC()();
        objc_msgSend(v31, "setBool:forKey:", v38, v39);
        sub_10004D9E4(v40, v41);

      }
      swift_release(v42);
      goto LABEL_11;
    }
  }
  else
  {
    sub_1000F996C((uint64_t)v46);
  }
  v7 = objc_msgSend(v2, "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "hk_keyExists:", v8);

  if ((v9 & 1) == 0)
  {
    v10 = objc_msgSend(v2, "standardUserDefaults");
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setBool:forKey:", 0, v11);

  }
  v12 = objc_msgSend(v2, "standardUserDefaults");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "BOOLForKey:", v13);

  v15 = sub_10055464C(v14, v14, 0, 0);
  swift_release(v1);
  v24 = (v15 >> 8) & 1;
  LODWORD(v23) = v15 & 1;
  v1 = (v15 >> 16) & 1;
  v25 = (v15 >> 24) & 1;
  v26 = HIDWORD(v15) & 1;
  v27 = (v15 >> 40) & 1;
  v28 = HIWORD(v15) & 1;
LABEL_11:
  v16 = 0x1000000000000;
  if (!(_DWORD)v28)
    v16 = 0;
  v17 = 0x10000000000;
  if (!(_DWORD)v27)
    v17 = 0;
  v18 = &_mh_execute_header;
  if (!(_DWORD)v26)
    v18 = 0;
  v19 = 0x1000000;
  if (!(_DWORD)v25)
    v19 = 0;
  v20 = 0x10000;
  if (!(_DWORD)v1)
    v20 = 0;
  v21 = 256;
  if (!(_DWORD)v24)
    v21 = 0;
  return v21 | v23 | v20 | v19 | (unint64_t)v18 | v17 | v16;
}

uint64_t sub_100011450(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v24 = *(void **)a1;
  v22 = *(void **)(a1 + 16);
  v23 = *(void **)(a1 + 8);
  v20 = *(void **)(a1 + 32);
  v21 = *(void **)(a1 + 24);
  v18 = *(void **)(a1 + 48);
  v19 = *(void **)(a1 + 40);
  v16 = *(void **)(a1 + 64);
  v17 = *(void **)(a1 + 56);
  v14 = *(void **)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 72);
  v2 = *(void **)(a1 + 104);
  v12 = *(void **)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 88);
  v3 = *(void **)(a1 + 112);
  v4 = *(void **)(a1 + 120);
  v5 = *(void **)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 184);
  v10 = *(void **)(a1 + 200);
  swift_release(*(_QWORD *)(a1 + 208));

  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);

  swift_release(v13);
  swift_release(v15);

  return a1;
}

uint64_t sub_1000115A0(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t);
  uint64_t v56;
  void *v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;

  v4 = type metadata accessor for Calendar(0);
  v78 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v73 - v14;
  v16 = type metadata accessor for DateComponents(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v23 = (char *)&v73 - v22;
  if ((a2 & 1) == 0)
  {
    v75 = v10;
    v76 = v21;
    v77 = v20;
    v80 = 0;
    v25 = objc_msgSend(a1, "dateOfBirthComponentsWithError:", &v80);
    v26 = v80;
    if (v25)
    {
      v27 = v25;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v26;

      v80 = 0;
      v29 = objc_msgSend(a1, "biologicalSexWithError:", &v80);
      v30 = v80;
      if (v29)
      {
        v31 = v29;
        v32 = v80;
        objc_msgSend(v31, "biologicalSex");

        Date.init()(v33);
        if (qword_10081D548 != -1)
          swift_once(&qword_10081D548, sub_100005A80);
        v34 = sub_10003CE9C(v4, (uint64_t)qword_100869D10);
        Calendar.date(from:)(v23);
        v35 = v75;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v9, 1, v75) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v13, v9, v35);
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v6, v34, v4);
          v49 = sub_100047110((uint64_t *)&unk_100828720);
          v73 = type metadata accessor for Calendar.Component(0);
          v50 = *(_QWORD *)(v73 - 8);
          v51 = *(unsigned __int8 *)(v50 + 80);
          v52 = (v51 + 32) & ~v51;
          v53 = swift_allocObject(v49, v52 + *(_QWORD *)(v50 + 72), v51 | 7);
          *(_OWORD *)(v53 + 16) = xmmword_100622F90;
          v54 = v53 + v52;
          v55 = *(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104);
          v56 = v73;
          v55(v54, enum case for Calendar.Component.year(_:), v73);
          v74 = sub_1002302F0(v53);
          swift_setDeallocating(v53);
          swift_arrayDestroy(v54, 1, v56);
          swift_deallocClassInstance(v53, 32, 7);
          v57 = v74;
          Calendar.dateComponents(_:from:to:)(v74, v13, v15);
          v58 = swift_bridgeObjectRelease(v57);
          v59 = (*(uint64_t (**)(char *, uint64_t, __n128))(v78 + 8))(v6, v4, v58);
          v60 = DateComponents.year.getter(v59);
          if ((v61 & 1) == 0)
          {
            v24 = v60;
            v62 = v77;
            v63 = *(void (**)(char *, uint64_t))(v76 + 8);
            v63(v19, v77);
            v64 = *(void (**)(char *, uint64_t))(v79 + 8);
            v65 = v13;
            v66 = v75;
            v64(v65, v75);
            v64(v15, v66);
            v63(v23, v62);
            return v24;
          }
          v67 = sub_10025DD20();
          v37 = swift_allocError(&type metadata for CharacteristicError, v67, 0, 0);
          swift_willThrow(v37);
          v68 = v77;
          v69 = *(void (**)(char *, uint64_t))(v76 + 8);
          v69(v19, v77);
          v70 = *(void (**)(char *, uint64_t))(v79 + 8);
          v71 = v13;
          v72 = v75;
          v70(v71, v75);
          v70(v15, v72);
          v40 = ((uint64_t (*)(char *, uint64_t))v69)(v23, v68);
          goto LABEL_12;
        }
        sub_10001BE90((uint64_t)v9, (uint64_t *)&unk_100828370);
        v36 = sub_10025DD20();
        v37 = swift_allocError(&type metadata for CharacteristicError, v36, 0, 0);
        swift_willThrow(v37);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v15, v35);
      }
      else
      {
        v41 = v80;
        v37 = _convertNSErrorToError(_:)(v30);

        swift_willThrow(v42);
      }
      v40 = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v23, v77);
    }
    else
    {
      v38 = v80;
      v37 = _convertNSErrorToError(_:)(v26);

      v40 = swift_willThrow(v39);
    }
LABEL_12:
    v43 = static os_log_type_t.error.getter(v40);
    v44 = (void *)HKLogActivity;
    v45 = sub_100047110((uint64_t *)&unk_100827460);
    v46 = swift_allocObject(v45, 72, 7);
    *(_OWORD *)(v46 + 16) = xmmword_100622F90;
    *(_QWORD *)(v46 + 56) = &type metadata for String;
    *(_QWORD *)(v46 + 64) = sub_100038CF8();
    *(_QWORD *)(v46 + 32) = 0xD00000000000003DLL;
    *(_QWORD *)(v46 + 40) = 0x80000001006930B0;
    v47 = v44;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v47, "%@ failed to fetch trends user characteristics", 46, 2, v46);

    swift_bridgeObjectRelease(v46);
    swift_errorRelease(v37);
    return 0;
  }
  return 34;
}

void sub_100011B88(void *a1, char *a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[5];
  uint64_t v14;

  v4 = (void *)objc_opt_self(NSNotificationCenter);
  v5 = objc_msgSend(v4, "defaultCenter");
  objc_msgSend(v5, "addObserver:selector:name:object:", a2, "didReceiveNotificationWithNote:", UIApplicationSignificantTimeChangeNotification, 0);

  v6 = objc_msgSend(v4, "defaultCenter");
  if (qword_10081DED8 != -1)
    swift_once(&qword_10081DED8, sub_10004CDE0);
  objc_msgSend(v6, "addObserver:selector:name:object:", a2, "didReceiveNotificationWithNote:", qword_10086ACE0, 0);

  v7 = objc_msgSend(v4, "defaultCenter");
  if (qword_10081D640 != -1)
    swift_once(&qword_10081D640, sub_10004CE14);
  objc_msgSend(v7, "addObserver:selector:name:object:", a2, "wheelchairUseChangedWithNote:", qword_100869F70, 0);

  if ((uint64_t)objc_msgSend(a1, "numberOfActivitySummaries") >= 1)
    sub_10000FFA8();
  v8 = *(void **)&a2[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_workoutProvider];
  v9 = swift_allocObject(&unk_10079C338, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  v13[4] = sub_10004F2E8;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10002D0F8;
  v13[3] = &unk_10079C350;
  v10 = _Block_copy(v13);
  v11 = v14;
  v12 = a2;
  objc_msgSend(v8, "addUpdateHandler:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
}

id sub_100011DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSString v16;
  id v17;
  id v18;
  objc_super v20;

  v4 = v3;
  v7 = OBJC_IVAR____TtC10FitnessApp22CatalogTipActivityTile_catalogTipView;
  v8 = objc_allocWithZone((Class)type metadata accessor for CatalogTipPlainView(0));
  v9 = v4;
  v10 = objc_msgSend(v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = sub_100032490();
  objc_msgSend(v10, "setBackgroundColor:", v11);

  v12 = objc_msgSend(v10, "layer");
  objc_msgSend(v12, "setCornerRadius:", 12.0);

  v13 = UIView.forAutoLayout()(objc_msgSend(v10, "setClipsToBounds:", 1));
  *(_QWORD *)&v4[v7] = v13;
  v14 = &v9[OBJC_IVAR____TtC10FitnessApp22CatalogTipActivityTile_tipSectionItem];
  v15 = type metadata accessor for CatalogTipSectionItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);

  if (a3)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v16 = 0;
  }
  v20.receiver = v9;
  v20.super_class = (Class)type metadata accessor for CatalogTipActivityTile(0);
  v17 = objc_msgSendSuper2(&v20, "initWithStyle:reuseIdentifier:", a1, v16);

  v18 = v17;
  sub_10001C378();

  return v18;
}

uint64_t sub_100011F54(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_100011F90(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  __n128 v11;
  char *v12;
  char *v13;
  uint64_t v14;
  double result;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v7 = &v4[v6[5]];
  v8 = type metadata accessor for Artwork(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(char *, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[6] + 8]);
  v11 = swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[7] + 8]);
  v12 = &v4[v6[8]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v9 + 48))(v12, 1, v8, v11))
    v10(v12, v8);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[9] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v6[11] + 8]);
  v13 = &v4[v6[12]];
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(id *)((char *)a1 + *(int *)(a2 + 28) + 8)).n128_u64[0];
  return result;
}

void sub_1000120DC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  void *v27;
  id v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v30 = a5;
  v31 = a4;
  v8 = sub_100047110(&qword_1008264A0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "activityMoveModeChangeType");
  if (v13)
  {
    v14 = v13;
    v15 = sub_100047110((uint64_t *)&unk_100828340);
    v16 = swift_allocObject(v15, 48, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100629280;
    *(_QWORD *)(v16 + 32) = a2;
    *(_QWORD *)(v16 + 40) = a3;
    aBlock[0] = v16;
    v17 = specialized Array._endMutation()(v16);
    v18 = aBlock[0];
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v17);
    v19 = *(unsigned __int8 *)(v9 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_10078D390, v21 + 8, v19 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + v20, v11, v8);
    *(_QWORD *)(v22 + v21) = v30;
    v23 = objc_allocWithZone((Class)HKSampleQuery);
    sub_10001E724(0, &qword_1008264A8, NSSortDescriptor_ptr);
    v24 = a2;
    v25 = a3;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    aBlock[4] = sub_10004F960;
    v33 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100008B5C;
    aBlock[3] = &unk_10078D3A8;
    v27 = _Block_copy(aBlock);
    v28 = objc_msgSend(v23, "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:", v14, 0, 1, isa, v27);

    _Block_release(v27);
    *(_QWORD *)&v29 = swift_release(v33).n128_u64[0];
    objc_msgSend(*(id *)(v31 + 32), "executeQuery:", v28, v29);

  }
  else
  {
    __break(1u);
  }
}

void sub_100012328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __n128 v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  __n128 v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  uint8_t *v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  const char *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  __n128 v202;
  char *v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  NSObject *v217;
  os_log_type_t v218;
  uint8_t *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  __n128 v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  _QWORD v264[4];

  v244 = a3;
  v255 = a1;
  v256 = a2;
  v3 = sub_100047110(&qword_10082B968);
  __chkstk_darwin(v3);
  v233 = (char *)&v230 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081E650);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v230 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v243 = (char *)&v230 - v9;
  v10 = type metadata accessor for Logger(0);
  v252 = *(_QWORD *)(v10 - 8);
  v253 = v10;
  v11 = __chkstk_darwin(v10);
  v234 = (char *)&v230 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v254 = (char *)&v230 - v14;
  v15 = __chkstk_darwin(v13);
  v238 = (char *)&v230 - v16;
  v17 = __chkstk_darwin(v15);
  v237 = (char *)&v230 - v18;
  v19 = __chkstk_darwin(v17);
  v236 = (char *)&v230 - v20;
  v21 = __chkstk_darwin(v19);
  v241 = (char *)&v230 - v22;
  v23 = __chkstk_darwin(v21);
  v232 = (char *)&v230 - v24;
  v25 = __chkstk_darwin(v23);
  v231 = (char *)&v230 - v26;
  v27 = __chkstk_darwin(v25);
  v235 = (char *)&v230 - v28;
  __chkstk_darwin(v27);
  v242 = (char *)&v230 - v29;
  v30 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v30);
  v249 = (char *)&v230 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for MirroredWidgetAttributes.ContentState(0);
  __chkstk_darwin(v248);
  v247 = (char *)&v230 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_100047110(&qword_10082B970);
  v245 = *(_QWORD *)(v246 - 8);
  v33 = __chkstk_darwin(v246);
  v240 = (char *)&v230 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = v34;
  __chkstk_darwin(v33);
  v251 = (char *)&v230 - v35;
  v36 = type metadata accessor for MirroredWidgetAttributes(0);
  v257 = *(_QWORD *)(v36 - 8);
  v258 = v36;
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v230 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v259 = (char *)&v230 - v40;
  v41 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v41);
  v43 = (char *)&v230 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for UUID(0);
  v260 = *(_QWORD *)(v44 - 8);
  v45 = __chkstk_darwin(v44);
  v47 = (char *)&v230 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v45);
  v50 = (char *)&v230 - v49;
  __chkstk_darwin(v48);
  v250 = (char *)&v230 - v51;
  v52 = type metadata accessor for DispatchPredicate(0);
  v53 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v55 = (uint64_t *)((char *)&v230 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002FB54();
  *v55 = static OS_dispatch_queue.main.getter(v56);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v53 + 104))(v55, enum case for DispatchPredicate.onQueue(_:), v52);
  v57 = _dispatchPreconditionTest(_:)(v55);
  (*(void (**)(_QWORD *, uint64_t))(v53 + 8))(v55, v52);
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_80;
  }
  sub_10004D954(v256, (uint64_t)v43);
  v58 = v260;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v43, 1, v44) == 1)
  {
    v59 = sub_10001BE90((uint64_t)v43, (uint64_t *)&unk_10082E690);
    v60 = v254;
    v61 = static WOLog.dataLink.getter(v59);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "No active session, tearing down all activities.", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v252 + 8))(v60, v253);
    sub_100047110(&qword_10082B978);
    v52 = static Activity.activities.getter();
    if (!((unint64_t)v52 >> 62))
    {
      v65 = v52 & 0xFFFFFFFFFFFFF8;
      v66 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v66)
      {
LABEL_7:
        if (v66 >= 1)
        {
          v67 = 0;
          v260 = v52 & 0xC000000000000001;
          v259 = (char *)&type metadata for () + 8;
          v68 = v52;
          while (1)
          {
            if (v260)
            {
              v71 = specialized _ArrayBuffer._getElementSlowPath(_:)(v67, v52);
            }
            else
            {
              v71 = *(_QWORD *)(v52 + 8 * v67 + 32);
              swift_retain(v71);
            }
            v72 = type metadata accessor for TaskPriority(0);
            v73 = *(_QWORD *)(v72 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v8, 1, 1, v72);
            v74 = (_QWORD *)swift_allocObject(&unk_1007937B0, 40, 7);
            v74[2] = 0;
            v75 = v74 + 2;
            v74[3] = 0;
            v74[4] = v71;
            v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48))(v8, 1, v72);
            v77 = swift_retain(v71);
            if (v76 == 1)
            {
              sub_10001BE90((uint64_t)v8, &qword_10081E650);
              v78 = 0;
              v79 = *v75;
              if (!*v75)
                goto LABEL_18;
            }
            else
            {
              v85 = TaskPriority.rawValue.getter(v77);
              (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v72);
              v78 = v85;
              v79 = *v75;
              if (!*v75)
              {
LABEL_18:
                v82 = 0;
                v84 = 0;
                goto LABEL_19;
              }
            }
            v80 = v74[3];
            ObjectType = swift_getObjectType(v79);
            swift_unknownObjectRetain(v79);
            v82 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v80);
            v84 = v83;
            swift_unknownObjectRelease(v79);
LABEL_19:
            v86 = swift_allocObject(&unk_1007937D8, 32, 7);
            *(_QWORD *)(v86 + 16) = &unk_10082B988;
            *(_QWORD *)(v86 + 24) = v74;
            if (v84 | v82)
            {
              v264[0] = 0;
              v264[1] = 0;
              v69 = v264;
              v264[2] = v82;
              v264[3] = v84;
            }
            else
            {
              v69 = 0;
            }
            ++v67;
            v70 = swift_task_create(v78 | 0x1C00, v69, v259, &unk_1008282A0, v86);
            swift_release(v71);
            swift_release(v70);
            v52 = v68;
            if (v66 == v67)
              goto LABEL_84;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_84:
      swift_bridgeObjectRelease(v52);
      return;
    }
LABEL_80:
    if (v52 < 0)
      v227 = v52;
    else
      v227 = v52 & 0xFFFFFFFFFFFFFF8;
    v66 = _CocoaArrayWrapper.endIndex.getter(v227);
    if (v66)
      goto LABEL_7;
    goto LABEL_84;
  }
  v87 = v250;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v250, v43, v44);
  v88 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v256 = v44;
  v88(v50, v87, v44);
  MirroredWidgetAttributes.init(uuid:)(v50);
  v89 = swift_retain(v255);
  v90 = v247;
  MirroredWidgetAttributes.ContentState.init(publisher:)(v89);
  v91 = type metadata accessor for Date(0);
  v92 = v249;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v249, 1, 1, v91);
  v93 = sub_10029935C(&qword_10082B990, (uint64_t)&protocol conformance descriptor for MirroredWidgetAttributes.ContentState);
  v94 = sub_10029935C(&qword_10082B998, (uint64_t)&protocol conformance descriptor for MirroredWidgetAttributes.ContentState);
  v95 = sub_10029935C(&qword_10082B9A0, (uint64_t)&protocol conformance descriptor for MirroredWidgetAttributes.ContentState);
  ActivityContent.init(state:staleDate:relevanceScore:)(v90, v92, v248, v93, v94, v95, 0.0);
  v263 = (unint64_t)_swiftEmptyArrayStorage;
  v96 = sub_100047110(&qword_10082B978);
  v97 = static Activity.activities.getter();
  v98 = v97;
  if (!((unint64_t)v97 >> 62))
  {
    v65 = v97 & 0xFFFFFFFFFFFFF8;
    v99 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
    v249 = (char *)v96;
    if (v99)
      goto LABEL_23;
LABEL_88:
    swift_bridgeObjectRelease(v98);
    v100 = 0;
    v117 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_39;
    goto LABEL_89;
  }
  if (v97 >= 0)
    v97 &= 0xFFFFFFFFFFFFFF8uLL;
  v99 = _CocoaArrayWrapper.endIndex.getter(v97);
  v249 = (char *)v96;
  if (!v99)
    goto LABEL_88;
LABEL_23:
  if (v99 < 1)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v100 = 0;
  v101 = 0;
  v254 = (char *)(v98 & 0xC000000000000001);
  v255 = v98;
  do
  {
    v103 = v100;
    if (v254)
    {
      v104 = specialized _ArrayBuffer._getElementSlowPath(_:)(v101, v98);
    }
    else
    {
      v104 = *(_QWORD *)(v98 + 8 * v101 + 32);
      swift_retain(v104);
    }
    v105 = Activity.attributes.getter();
    MirroredWidgetAttributes.uuid.getter(v105);
    v106 = (*(uint64_t (**)(char *, uint64_t))(v257 + 8))(v39, v258);
    MirroredWidgetAttributes.uuid.getter(v106);
    v107 = static UUID.== infix(_:_:)(v50, v47);
    v108 = *(void (**)(char *, uint64_t))(v260 + 8);
    v109 = v256;
    v108(v47, v256);
    v108(v50, v109);
    if ((v107 & 1) != 0)
    {
      if (v103)
      {
        v110 = swift_retain(v103);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v110);
        v112 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v111 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v112 >= v111 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
        v102 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v112, v103);
        specialized Array._endMutation()(v102);
        swift_release(v103);
      }
      v100 = v104;
    }
    else
    {
      v113 = swift_retain(v104);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v113);
      v115 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v114 = *(_QWORD *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x18);
      v100 = v103;
      if (v115 >= v114 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1);
      v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v104);
      specialized Array._endMutation()(v116);
      swift_release(v104);
    }
    ++v101;
    v98 = v255;
  }
  while (v99 != v101);
  swift_bridgeObjectRelease(v255);
  v117 = v263;
  if (!(v263 >> 62))
  {
LABEL_39:
    v118 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain(v100);
    if (!v118)
      goto LABEL_44;
    goto LABEL_40;
  }
LABEL_89:
  if (v117 < 0)
    v228 = v117;
  else
    v228 = v117 & 0xFFFFFFFFFFFFFF8;
  swift_retain(v100);
  swift_bridgeObjectRetain(v117);
  v229 = _CocoaArrayWrapper.endIndex.getter(v228);
  swift_bridgeObjectRelease(v117);
  if (v229)
  {
LABEL_40:
    swift_bridgeObjectRetain(v117);
    v119 = v242;
    static WOLog.dataLink.getter(v120);
    v121 = swift_bridgeObjectRetain_n(v117, 2);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.default.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = swift_slowAlloc(32, -1);
      v262 = v125;
      *(_DWORD *)v124 = 136315138;
      v126 = swift_bridgeObjectRetain(v117);
      v127 = Array.description.getter(v126);
      v129 = v128;
      swift_bridgeObjectRelease(v117);
      v261 = sub_10003E8EC(v127, v129, &v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v124 + 4);
      swift_bridgeObjectRelease_n(v117, 2);
      swift_bridgeObjectRelease(v129);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Ending stale activities %s", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);

      (*(void (**)(char *, uint64_t))(v252 + 8))(v242, v253);
    }
    else
    {

      swift_bridgeObjectRelease_n(v117, 2);
      (*(void (**)(char *, uint64_t))(v252 + 8))(v119, v253);
    }
    v130 = type metadata accessor for TaskPriority(0);
    v131 = (uint64_t)v243;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v243, 1, 1, v130);
    v132 = (_QWORD *)swift_allocObject(&unk_100793800, 40, 7);
    v132[2] = 0;
    v132[3] = 0;
    v132[4] = v117;
    v133 = sub_10020D9C0(v131, (uint64_t)&unk_10082B9B0, (uint64_t)v132);
    swift_release(v133);
  }
LABEL_44:
  v65 = v244;
  if (!v244)
  {
    v145 = v263;
    if (v100)
    {
      swift_retain(v100);
      swift_bridgeObjectRelease(v145);
      v146 = v241;
      static WOLog.dataLink.getter(v147);
      v148 = swift_retain_n(v100, 2);
      v149 = Logger.logObject.getter(v148);
      v150 = static os_log_type_t.default.getter(v149);
      if (os_log_type_enabled(v149, v150))
      {
        v151 = (uint8_t *)swift_slowAlloc(12, -1);
        v152 = swift_slowAlloc(32, -1);
        v261 = v100;
        v262 = v152;
        *(_DWORD *)v151 = 136315138;
        swift_retain(v100);
        v153 = String.init<A>(describing:)(&v261, v249);
        v155 = v154;
        v261 = sub_10003E8EC(v153, v154, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v151 + 4);
        swift_release_n(v100, 2);
        swift_bridgeObjectRelease(v155);
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "Updating current activity %s with new content", v151, 0xCu);
        swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v152, -1, -1);
        swift_slowDealloc(v151, -1, -1);

      }
      else
      {

        swift_release_n(v100, 2);
      }
      (*(void (**)(char *, uint64_t))(v252 + 8))(v146, v253);
      v191 = v240;
      v192 = v239;
      v193 = type metadata accessor for TaskPriority(0);
      v194 = (uint64_t)v243;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 56))(v243, 1, 1, v193);
      v195 = v245;
      v196 = v251;
      v197 = v246;
      (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v191, v251, v246);
      v198 = *(unsigned __int8 *)(v195 + 80);
      v199 = (v198 + 40) & ~v198;
      v200 = (char *)swift_allocObject(&unk_100793850, v199 + v192, v198 | 7);
      *((_QWORD *)v200 + 2) = 0;
      *((_QWORD *)v200 + 3) = 0;
      *((_QWORD *)v200 + 4) = v100;
      (*(void (**)(char *, char *, uint64_t))(v195 + 32))(&v200[v199], v191, v197);
      swift_retain(v100);
      v201 = sub_10020D9C0(v194, (uint64_t)&unk_10082B9D0, (uint64_t)v200);
      swift_release_n(v100, 3);
      v202 = swift_release(v201);
      (*(void (**)(char *, uint64_t, __n128))(v195 + 8))(v196, v197, v202);
      goto LABEL_74;
    }
    v157 = swift_bridgeObjectRelease(v263);
    v158 = type metadata accessor for ActivityAuthorizationInfo(0, v157);
    swift_allocObject(v158, *(unsigned int *)(v158 + 48), *(unsigned __int16 *)(v158 + 52));
    v159 = ActivityAuthorizationInfo.init()();
    v160 = ActivityAuthorizationInfo.areActivitiesEnabled.getter();
    if ((v160 & 1) != 0)
    {
      v161 = v235;
      v162 = static WOLog.dataLink.getter(v160);
      v163 = Logger.logObject.getter(v162);
      v164 = static os_log_type_t.default.getter(v163);
      if (os_log_type_enabled(v163, v164))
      {
        v165 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v165 = 0;
        _os_log_impl((void *)&_mh_execute_header, v163, v164, "Live activities are enabled", v165, 2u);
        v166 = v165;
        v161 = v235;
        swift_slowDealloc(v166, -1, -1);
      }

      v167 = *(void (**)(char *, uint64_t))(v252 + 8);
      v167(v161, v253);
      v168 = type metadata accessor for PushType(0);
      v169 = (uint64_t)v233;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 56))(v233, 1, 1, v168);
      v170 = v249;
      v212 = static Activity.request(attributes:content:pushType:)(v259, v251, v169);
      v213 = v170;
      v214 = sub_10001BE90(v169, &qword_10082B968);
      v215 = v231;
      static WOLog.dataLink.getter(v214);
      v216 = swift_retain_n(v212, 2);
      v217 = Logger.logObject.getter(v216);
      v218 = static os_log_type_t.default.getter(v217);
      if (os_log_type_enabled(v217, v218))
      {
        v220 = (uint8_t *)swift_slowAlloc(12, -1);
        v221 = swift_slowAlloc(32, -1);
        v261 = v212;
        v262 = v221;
        *(_DWORD *)v220 = 136315138;
        swift_retain(v212);
        v222 = String.init<A>(describing:)(&v261, v213);
        v224 = v223;
        v261 = sub_10003E8EC(v222, v223, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v220 + 4);
        swift_release_n(v212, 2);
        swift_bridgeObjectRelease(v224);
        _os_log_impl((void *)&_mh_execute_header, v217, v218, "Started activity: %s", v220, 0xCu);
        swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v221, -1, -1);
        swift_slowDealloc(v220, -1, -1);
        swift_release(v212);

        v225 = swift_release(v159);
        v226 = v231;
      }
      else
      {
        swift_release_n(v212, 3);

        v225 = swift_release(v159);
        v226 = v215;
      }
      ((void (*)(char *, uint64_t, __n128))v167)(v226, v253, v225);
    }
    else
    {
      v203 = v232;
      v204 = static WOLog.dataLink.getter(v160);
      v205 = Logger.logObject.getter(v204);
      v206 = static os_log_type_t.error.getter(v205);
      if (os_log_type_enabled(v205, v206))
      {
        v207 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v207 = 0;
        _os_log_impl((void *)&_mh_execute_header, v205, v206, "Live activities are not enabled", v207, 2u);
        swift_slowDealloc(v207, -1, -1);
      }

      swift_release(v159);
      (*(void (**)(char *, uint64_t))(v252 + 8))(v203, v253);
    }
LABEL_73:
    (*(void (**)(char *, uint64_t, __n128))(v245 + 8))(v251, v246, v156);
LABEL_74:
    (*(void (**)(char *, uint64_t))(v257 + 8))(v259, v258);
    (*(void (**)(char *, uint64_t))(v260 + 8))(v250, v256);
    return;
  }
  if (!v100)
  {
    v156 = swift_bridgeObjectRelease(v263);
    goto LABEL_73;
  }
  switch(v244)
  {
    case 1:
      v171 = v263;
      swift_retain(v100);
      swift_bridgeObjectRelease(v171);
      v172 = v236;
      static WOLog.dataLink.getter(v173);
      v174 = swift_retain_n(v100, 2);
      v175 = Logger.logObject.getter(v174);
      v176 = static os_log_type_t.default.getter(v175);
      if (os_log_type_enabled(v175, v176))
      {
        v177 = (uint8_t *)swift_slowAlloc(12, -1);
        v178 = swift_slowAlloc(32, -1);
        v261 = v100;
        v262 = v178;
        *(_DWORD *)v177 = 136315138;
        swift_retain(v100);
        v179 = String.init<A>(describing:)(&v261, v249);
        v181 = v180;
        v261 = sub_10003E8EC(v179, v180, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v177 + 4);
        swift_release_n(v100, 2);
        swift_bridgeObjectRelease(v181);
        v182 = "Ignoring tear down of existing activity %s as we are waiting for a publisher update.";
LABEL_63:
        _os_log_impl((void *)&_mh_execute_header, v175, v176, v182, v177, 0xCu);
        swift_arrayDestroy(v178, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v178, -1, -1);
        swift_slowDealloc(v177, -1, -1);
        v189 = v100;
        v190 = 3;
LABEL_65:
        swift_release_n(v189, v190);

        (*(void (**)(char *, uint64_t))(v252 + 8))(v172, v253);
        goto LABEL_73;
      }
LABEL_64:
      v189 = v100;
      v190 = 5;
      goto LABEL_65;
    case 2:
      v134 = v263;
      swift_retain(v100);
      swift_bridgeObjectRelease(v134);
      v135 = v237;
      static WOLog.dataLink.getter(v136);
      v137 = swift_retain_n(v100, 2);
      v138 = Logger.logObject.getter(v137);
      v139 = static os_log_type_t.default.getter(v138);
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (uint8_t *)swift_slowAlloc(12, -1);
        v141 = swift_slowAlloc(32, -1);
        v261 = v100;
        v262 = v141;
        *(_DWORD *)v140 = 136315138;
        swift_retain(v100);
        v142 = String.init<A>(describing:)(&v261, v249);
        v144 = v143;
        v261 = sub_10003E8EC(v142, v143, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v140 + 4);
        swift_release_n(v100, 2);
        swift_bridgeObjectRelease(v144);
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "Ending current activity %s as the workout has ended.", v140, 0xCu);
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v140, -1, -1);

      }
      else
      {

        swift_release_n(v100, 2);
      }
      (*(void (**)(char *, uint64_t))(v252 + 8))(v135, v253);
      v208 = type metadata accessor for TaskPriority(0);
      v209 = (uint64_t)v243;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v208 - 8) + 56))(v243, 1, 1, v208);
      v210 = (_QWORD *)swift_allocObject(&unk_100793828, 40, 7);
      v210[2] = 0;
      v210[3] = 0;
      v210[4] = v100;
      swift_retain(v100);
      v211 = sub_10020D9C0(v209, (uint64_t)&unk_10082B9C0, (uint64_t)v210);
      swift_release_n(v100, 3);
      v156 = swift_release(v211);
      goto LABEL_73;
    case 3:
      v183 = v263;
      swift_retain(v100);
      swift_bridgeObjectRelease(v183);
      v172 = v238;
      static WOLog.dataLink.getter(v184);
      v185 = swift_retain_n(v100, 2);
      v175 = Logger.logObject.getter(v185);
      v176 = static os_log_type_t.default.getter(v175);
      if (os_log_type_enabled(v175, v176))
      {
        v177 = (uint8_t *)swift_slowAlloc(12, -1);
        v178 = swift_slowAlloc(32, -1);
        v261 = v100;
        v262 = v178;
        *(_DWORD *)v177 = 136315138;
        swift_retain(v100);
        v186 = String.init<A>(describing:)(&v261, v249);
        v188 = v187;
        v261 = sub_10003E8EC(v186, v187, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262, v177 + 4);
        swift_release_n(v100, 2);
        swift_bridgeObjectRelease(v188);
        v182 = "Ignoring tear down of existing activity %s as we are waiting for a timeout";
        goto LABEL_63;
      }
      goto LABEL_64;
  }
LABEL_96:
  v262 = v65;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DataLinkWorkoutState, &v262, &type metadata for DataLinkWorkoutState, &type metadata for Int);
  __break(1u);
}

uint64_t *sub_100013C38(void *a1, void *a2, void *a3, void *a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  _QWORD *v47;

  v6 = v5;
  v11 = *v6;
  v36 = a1;
  v37 = v11;
  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v14 - 8);
  v43 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS.QoSClass(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v6 + 3) = xmmword_100630D40;
  v6[8] = 0;
  v6[9] = 0;
  *((_BYTE *)v6 + 80) = 1;
  v6[11] = 0;
  *((_BYTE *)v6 + 96) = 3;
  v6[13] = 0;
  v6[14] = 0;
  v6[15] = (uint64_t)_swiftEmptyArrayStorage;
  v6[2] = (uint64_t)a2;
  v6[3] = (uint64_t)a3;
  v6[4] = (uint64_t)a4;
  *((_BYTE *)v6 + 40) = a5;
  v40 = a2;
  v39 = a3;
  v38 = a4;
  sub_10001A1AC();
  sub_10002FB54();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchQoS.QoSClass.userInitiated(_:), v17);
  v35 = static OS_dispatch_queue.global(qos:)(v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v21 = swift_allocObject(&unk_1007919E0, 24, 7);
  swift_weakInit(v21 + 16, v6);
  v22 = (_QWORD *)swift_allocObject(&unk_100791AD0, 40, 7);
  v24 = v36;
  v23 = v37;
  v22[2] = v21;
  v22[3] = v24;
  v22[4] = v23;
  aBlock[4] = sub_10004E0C4;
  v47 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100791AE8;
  v25 = _Block_copy(aBlock);
  swift_retain(v21);
  v26 = v24;
  static DispatchQoS.unspecified.getter(v26);
  v45 = _swiftEmptyArrayStorage;
  v27 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100047110(&qword_100828C80);
  v29 = sub_100028384((unint64_t *)&qword_1008268F0, &qword_100828C80, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v28, v29, v41, v27);
  v31 = (void *)v35;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v43);
  v32 = v47;
  swift_release(v21);
  swift_release(v32);
  return v6;
}

void sub_100013FBC()
{
  id v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  CGRect v9;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;

  v9.origin.x = v2;
  v9.origin.y = v4;
  v9.size.width = v6;
  v9.size.height = v8;
  CGRectGetWidth(v9);
}

_QWORD *sub_100014068(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  id v10;
  id v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v3;
  v11 = v4;
  v9(v6, v7, v8);
  v12 = (int *)type metadata accessor for CatalogTipSectionItem(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = v7 + v13;
  v16 = type metadata accessor for Artwork(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v14, v15, v16);
  v19 = v12[6];
  v20 = &v6[v19];
  v21 = (_QWORD *)(v7 + v19);
  v22 = v21[1];
  *(_QWORD *)v20 = *v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = v12[7];
  v24 = &v6[v23];
  v25 = (_QWORD *)(v7 + v23);
  v26 = v25[1];
  *(_QWORD *)v24 = *v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = v12[8];
  v28 = &v6[v27];
  v29 = (const void *)(v7 + v27);
  v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v17 + 48);
  swift_bridgeObjectRetain(v22);
  v31 = swift_bridgeObjectRetain(v26);
  if (v30(v29, 1, v16, v31))
  {
    v32 = sub_100047110((uint64_t *)&unk_1008283A0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v18(v28, (uint64_t)v29, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v28, 0, 1, v16);
  }
  v33 = v12[9];
  v34 = &v6[v33];
  v35 = (_QWORD *)(v7 + v33);
  v36 = v35[1];
  *(_QWORD *)v34 = *v35;
  *((_QWORD *)v34 + 1) = v36;
  v37 = v12[10];
  v38 = &v6[v37];
  v39 = (_QWORD *)(v7 + v37);
  v40 = v39[1];
  *(_QWORD *)v38 = *v39;
  *((_QWORD *)v38 + 1) = v40;
  v41 = v12[11];
  v42 = &v6[v41];
  v43 = (_QWORD *)(v7 + v41);
  v44 = v43[1];
  *(_QWORD *)v42 = *v43;
  *((_QWORD *)v42 + 1) = v44;
  v45 = v12[12];
  v46 = &v6[v45];
  v47 = v7 + v45;
  v48 = type metadata accessor for URL(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v48 - 8) + 16);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v40);
  v50 = swift_bridgeObjectRetain(v44);
  v49(v46, v47, v48, v50);
  v51 = *(int *)(a3 + 28);
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)(a2 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  return a1;
}

uint64_t sub_100014278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  NSString v10;
  Class isa;
  id v12;
  id v13;
  Class v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  id v19[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v8, "setFormattingContext:", 2);
  v9 = (void *)objc_opt_self(NSDateFormatter);
  v10 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = objc_msgSend(v9, "dateFormatFromTemplate:options:locale:", v10, 0, isa);

  objc_msgSend(v8, "setDateFormat:", v12);
  Date.init()();
  v13 = objc_msgSend(v19[1], "navigationItem");
  v14 = Date._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v8, "stringFromDate:", v14);

  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v17 = v16;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
  }
  objc_msgSend(v13, "_setWeeTitle:", v15);

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

char *sub_10001448C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  char *v4;
  id v5;
  void *v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  _BYTE v16[24];
  _QWORD aBlock[3];
  void *ObjectType;
  void (*v19)(uint64_t);
  uint64_t v20;
  objc_super v21;

  v1 = &v0[OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_noteListener];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v2 = OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers;
  v3 = (void *)objc_opt_self(NSHashTable);
  v4 = v0;
  *(_QWORD *)&v0[v2] = objc_msgSend(v3, "weakObjectsHashTable");

  v21.receiver = v4;
  v21.super_class = (Class)type metadata accessor for ActivitySummaryChangeListener();
  v5 = objc_msgSendSuper2(&v21, "init");
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = (char *)v5;
  v8 = objc_msgSend(v6, "defaultCenter");
  if (qword_10081DED8 != -1)
    swift_once(&qword_10081DED8, sub_10004CDE0);
  v9 = qword_10086ACE0;
  v10 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v11 = swift_allocObject(&unk_1007A48A0, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v7);
  v19 = sub_10004DF80;
  v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000398D4;
  ObjectType = &unk_1007A48B8;
  v12 = _Block_copy(aBlock);
  v13 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", v9, 0, v10, v12, swift_release(v20).n128_f64[0]);
  _Block_release(v12);

  ObjectType = (void *)swift_getObjectType(v13);
  aBlock[0] = v13;
  v14 = (uint64_t)&v7[OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_noteListener];
  swift_beginAccess(&v7[OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_noteListener], v16, 33, 0);
  sub_10004C69C((uint64_t)aBlock, v14);
  swift_endAccess(v16);
  return v7;
}

uint64_t sub_1000146A8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::String v20;
  Swift::String v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(uint64_t (*)(), uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55[24];

  v1 = v0;
  v2 = sub_100047110((uint64_t *)&unk_100836170);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v51 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  __chkstk_darwin(v6);
  v53 = (char *)&v50 - v9;
  v10 = type metadata accessor for TVConnectionManager.State(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v52 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v50 - v18;
  static Log.default.getter(v17);
  v20._countAndFlagsBits = 0xD00000000000006DLL;
  v20._object = (void *)0x800000010069F880;
  v21._object = (void *)0x800000010069F9A0;
  v21._countAndFlagsBits = 0xD000000000000010;
  Logger.trace(file:function:)(v20, v21);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v54 = v13;
  v22(v19, v13);
  v23 = (uint64_t)&v1[OBJC_IVAR___NLTVConnectionManager_state];
  swift_beginAccess(&v1[OBJC_IVAR___NLTVConnectionManager_state], v55, 0, 0);
  sub_1000243C8(v23, (uint64_t)v12);
  LODWORD(v23) = swift_getEnumCaseMultiPayload(v12, v10);
  result = sub_1000242F8((uint64_t)v12);
  if ((_DWORD)v23 == 2)
  {
    v25 = (uint64_t (*)(char *, uint64_t))v22;
    v26 = *(_QWORD *)&v1[OBJC_IVAR___NLTVConnectionManager_participantClient + 24];
    v27 = *(_QWORD *)&v1[OBJC_IVAR___NLTVConnectionManager_participantClient + 32];
    sub_100016804(&v1[OBJC_IVAR___NLTVConnectionManager_participantClient], v26);
    dispatch thunk of RemoteParticipantClientProtocol.beginDiscoveringParticipantsWithRole(_:)(0, v26, v27);
    v28 = swift_allocObject(&unk_1007A0BE8, 24, 7);
    *(_QWORD *)(v28 + 16) = v1;
    v29 = swift_allocObject(&unk_1007A0C10, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_10046B960;
    *(_QWORD *)(v29 + 24) = v28;
    v30 = swift_allocObject(&unk_1007A0C38, 32, 7);
    *(_QWORD *)(v30 + 16) = sub_10046BAF0;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = v51;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v51, v8, v2);
    v32 = *(unsigned __int8 *)(v3 + 80);
    v33 = (v32 + 16) & ~v32;
    v34 = (v4 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = swift_allocObject(&unk_1007A0C60, v34 + 16, v32 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v35 + v33, v31, v2);
    v36 = (_QWORD *)(v35 + v34);
    *v36 = sub_10046BB10;
    v36[1] = v30;
    v37 = v1;
    v38 = v53;
    Promise.init(asyncOperation:)(sub_10046B8C8, v35, (char *)&type metadata for () + 8);
    v39 = *(void (**)(char *, uint64_t))(v3 + 8);
    v39(v8, v2);
    v40 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v2);
    v42 = v41;
    v43 = swift_allocObject(&unk_1007A0C88, 32, 7);
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = 0;
    v40(sub_1001104CC, v43);
    swift_release(v42);
    swift_release(v43);
    v44 = ((uint64_t (*)(char *, uint64_t))v39)(v38, v2);
    v45 = v52;
    v46 = static Log.default.getter(v44);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "[TV Connection] Began discovering advertising TVs", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    return v25(v45, v54);
  }
  return result;
}

double sub_100014AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  CHWorkoutDetailHeartRateTableViewCell *v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t (*)(uint64_t), uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  double result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v12 = sub_100047110(&qword_100832AE0);
  v61 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v59 = v13;
  v60 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10004D28C(0x65uLL);
  v18 = static Log.triage.getter(v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(32, -1);
    v56 = a6;
    v22 = v21;
    v23 = swift_slowAlloc(32, -1);
    v53 = v23;
    *(_DWORD *)v22 = 134218498;
    v63 = v62;
    v64 = v23;
    v54 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v22 + 4);
    *(_WORD *)(v22 + 12) = 2080;
    v52 = v22 + 14;
    v24 = StaticString.description.getter(a2, a3, a4);
    v55 = a2;
    v25 = v12;
    v26 = a3;
    v27 = a4;
    a4 = a5;
    v29 = (CHWorkoutDetailHeartRateTableViewCell *)v28;
    v63 = sub_10003E8EC(v24, v28, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v52);
    v30 = v29;
    a5 = a4;
    LOBYTE(a4) = v27;
    a3 = v26;
    v12 = v25;
    a2 = v55;
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
    *(_WORD *)(v22 + 22) = 2048;
    v63 = a5;
    a1 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v22 + 24);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Converting from Promise to Async-Await. Created at: %ld:%s:%lu", (uint8_t *)v22, 0x20u);
    v38 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v58);
  v40 = v60;
  v39 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, a1, v12);
  v41 = *(unsigned __int8 *)(v39 + 80);
  v42 = (v41 + 56) & ~v41;
  v43 = swift_allocObject(&unk_10079E7D0, v42 + v59, v41 | 7);
  *(_QWORD *)(v43 + 16) = v62;
  *(_QWORD *)(v43 + 24) = a2;
  *(_QWORD *)(v43 + 32) = a3;
  *(_BYTE *)(v43 + 40) = a4;
  *(_QWORD *)(v43 + 48) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v43 + v42, v40, v12);
  v44 = sub_100047110(&qword_100824368);
  v45 = (void (*)(uint64_t (*)(uint64_t), uint64_t, __n128))Promise.operation.getter(v44);
  v47 = v46;
  v48 = swift_allocObject(&unk_10079E7F8, 32, 7);
  *(_QWORD *)(v48 + 16) = sub_100419CAC;
  *(_QWORD *)(v48 + 24) = v43;
  v49 = swift_retain(v43);
  v45(sub_100167CD8, v48, v49);
  swift_release(v43);
  swift_release(v47);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

uint64_t sub_100014E00(char a1)
{
  char *v1;
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t active;
  objc_super v17;

  v3 = (objc_class *)type metadata accessor for ActivityTileViewController();
  v17.receiver = v1;
  v17.super_class = v3;
  objc_msgSendSuper2(&v17, "viewDidAppear:", a1 & 1);
  v4 = objc_msgSend(v1, "navigationController");
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "setDelegate:", v1);

  }
  v6 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_achievementTransitionAnimator];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_achievementTransitionAnimator] = 0;

  v7 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_transitionAnimatorFromViewController];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_transitionAnimatorFromViewController] = 0;

  v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_visibility] = 2;
  if ((v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_initialPresentation + 8] & 1) != 0)
  {
    v9 = static os_log_type_t.default.getter(v8);
    v10 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "ActivityTileViewController no initial presentation", 50, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    objc_msgSend(v1, "presentAppSettingsShowingPane:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_initialPresentation]);
  }
  v12 = sub_100028404(&qword_100828430, v11, (uint64_t (*)(uint64_t))type metadata accessor for ActivityTileViewController, (uint64_t)&unk_10062E4E8);
  v14 = sub_100028404(&qword_100828438, v13, (uint64_t (*)(uint64_t))type metadata accessor for ActivityTileViewController, (uint64_t)&unk_10062E478);
  active = MetricResignActiveObserving<>.addResignActiveObserver()(v3, v12, v14);
  return dispatch thunk of MarketingPaletteBannerPresenter.onAppear()(active);
}

uint64_t type metadata accessor for ActivityTileViewController()
{
  return objc_opt_self(_TtC10FitnessApp26ActivityTileViewController);
}

uint64_t sub_100014FAC()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t);
  _BYTE *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (**v48)(uint64_t);
  char *v49;
  void (*v50)(uint64_t (*)(), uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  void (*v55)(uint64_t, char *, uint64_t);
  unint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v1 = v0;
  v63 = sub_100047110((uint64_t *)&unk_100836170);
  v2 = *(_QWORD *)(v63 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = __chkstk_darwin(v63);
  v62 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v55 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v55 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v55 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  result = __chkstk_darwin(v13);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_isActive;
  if ((v1[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_isActive] & 1) == 0)
  {
    static Log.default.getter(result);
    v19._object = (void *)0x8000000100695060;
    v59 = 0x8000000100695060;
    v19._countAndFlagsBits = 0xD00000000000007BLL;
    v20._countAndFlagsBits = 0x6574617669746361;
    v20._object = (void *)0xEA00000000002928;
    Logger.trace(file:function:)(v19, v20);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v1[v18] = 1;
    v21 = sub_100047110(&qword_100823020);
    v22 = *(_QWORD *)(v2 + 72);
    v60 = v12;
    v23 = *(unsigned __int8 *)(v2 + 80);
    v24 = (v23 + 32) & ~v23;
    v61 = v23 | 7;
    v25 = swift_allocObject(v21, v24 + 4 * v22, v23 | 7);
    *(_OWORD *)(v25 + 16) = xmmword_100624D00;
    v58 = v10;
    sub_10000E9F0(v25 + v24);
    sub_10000F0B0(v25 + v24 + v22);
    sub_10000E694(v25 + v24 + 2 * v22);
    sub_10000ED50(v25 + v24 + 3 * v22);
    v64 = v25;
    sub_10002FB54();
    v27 = (void *)static OS_dispatch_queue.main.getter(v26);
    v28 = static PromiseConstants.defaultMaxConcurrentOperations.getter();
    v29 = sub_100047110(&qword_100823028);
    v30 = sub_10004D240();
    static Promise<>.parallel<A>(queue:maxConcurrent:_:)(v27, v28, &v64, v29, v30);
    swift_bridgeObjectRelease(v25);

    v31 = swift_allocObject(&unk_100794000, 24, 7);
    *(_QWORD *)(v31 + 16) = v1;
    v32 = swift_allocObject(&unk_100794028, 32, 7);
    *(_QWORD *)(v32 + 16) = sub_10004DDF4;
    *(_QWORD *)(v32 + 24) = v31;
    v33 = swift_allocObject(&unk_100794050, 32, 7);
    *(_QWORD *)(v33 + 16) = sub_1002AC7A4;
    *(_QWORD *)(v33 + 24) = v32;
    v57 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    v34 = v62;
    v35 = v63;
    v57(v62, v7, v63);
    v36 = (v23 + 16) & ~v23;
    v37 = v2;
    v38 = (v3 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = v38 + 16;
    v39 = swift_allocObject(&unk_100794078, v38 + 16, v61);
    v55 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
    v55(v39 + v36, v34, v35);
    v40 = (uint64_t (**)(uint64_t))(v39 + v38);
    *v40 = sub_10016AEE4;
    v40[1] = (uint64_t (*)(uint64_t))v33;
    v41 = v1;
    v42 = v58;
    Promise.init(asyncOperation:)(sub_10016AEF8, v39, (char *)&type metadata for () + 8);
    v43 = *(void (**)(char *, uint64_t))(v37 + 8);
    v43(v7, v35);
    v44 = (_QWORD *)swift_allocObject(&unk_1007940A0, 40, 7);
    v44[2] = 0xD00000000000007BLL;
    v44[3] = v59;
    v44[4] = 135;
    v45 = swift_allocObject(&unk_1007940C8, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_1002AC7F4;
    *(_QWORD *)(v45 + 24) = v44;
    v46 = v42;
    v57(v7, v42, v35);
    v47 = swift_allocObject(&unk_1007940F0, v56, v61);
    v55(v47 + v36, v7, v35);
    v48 = (uint64_t (**)(uint64_t))(v47 + v38);
    *v48 = sub_1002AC810;
    v48[1] = (uint64_t (*)(uint64_t))v45;
    v49 = v60;
    Promise.init(asyncOperation:)(sub_1002AC824, v47, (char *)&type metadata for () + 8);
    v43(v46, v35);
    v50 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v35);
    v52 = v51;
    v53 = swift_allocObject(&unk_100794118, 32, 7);
    *(_QWORD *)(v53 + 16) = 0;
    *(_QWORD *)(v53 + 24) = 0;
    v50(sub_1001104CC, v53);
    swift_release(v52);
    v54 = swift_release(v53);
    return ((uint64_t (*)(char *, uint64_t, __n128))v43)(v49, v35, v54);
  }
  return result;
}

void sub_10001543C(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  NSObject *v18;
  uint8_t *v19;
  _BYTE *Strong;
  char v21;
  char v22;
  _BYTE *v23;
  char v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  void *v48;
  char v49;
  id v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[24];
  _BYTE v81[24];
  _BYTE v82[24];
  uint64_t v83;
  _BYTE v84[24];
  uint64_t v85;
  _BYTE v86[24];
  char v87[24];
  char v88[24];
  char v89[24];
  int v90;
  int v91;

  v77 = a1;
  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v75 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v5);
  v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v74 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v74 - v11;
  v13 = a2 + 16;
  v15 = static os_log_type_t.default.getter(v14);
  v16 = (void *)HKLogActivity;
  v17 = v15;
  if (os_log_type_enabled(HKLogActivity, v15))
  {
    v18 = v16;
    v19 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109120;
    v90 = v77 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v19 + 4);
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "Successfully fetched phone account info from healthstore: %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1, -1);

  }
  swift_beginAccess(v13, &v90, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v13);
  if (!Strong
    || (v21 = Strong[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive],
        Strong,
        v22 = v77,
        (v21 & 1) == 0))
  {
    v22 = 0;
  }
  swift_beginAccess(v13, v89, 0, 0);
  v23 = (_BYTE *)swift_unknownObjectWeakLoadStrong(v13);
  if (v23)
  {
    v24 = v23[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive];

    v25 = v24 & (v77 ^ 1);
  }
  else
  {
    v25 = 0;
  }
  swift_beginAccess(v13, v88, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v13);
  if (!v26)
  {
    v44 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v12, 1, 1, v44);
    goto LABEL_20;
  }
  v27 = (void *)v26;
  v28 = v26 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp;
  swift_beginAccess(v26 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp, v87, 0, 0);
  sub_100031D7C(v28, (uint64_t)v12);

  v29 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v31(v12, 1, v29) == 1)
  {
LABEL_20:
    sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_100828370);
    goto LABEL_21;
  }
  v32 = sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_100828370);
  if ((v22 & 1) != 0)
  {
    swift_beginAccess(v13, &v79, 0, 0);
    v33 = swift_unknownObjectWeakLoadStrong(v13);
    if (v33)
    {
      v34 = (void *)v33;
      v35 = v33 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp;
      swift_beginAccess(v33 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp, &v78, 0, 0);
      sub_100031D7C(v35, (uint64_t)v9);

      if (v31(v9, 1, v29) != 1)
      {
        v36 = sub_10001BE90((uint64_t)v9, (uint64_t *)&unk_100828370);
        v37 = static os_log_type_t.default.getter(v36);
        v38 = HKLogActivity;
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Phone status is transitioning to active", 39, 2, &_swiftEmptyArrayStorage);

        swift_beginAccess(v13, v81, 0, 0);
        v39 = swift_unknownObjectWeakLoadStrong(v13);
        if (v39)
        {
          v40 = (void *)v39;
          sub_100580BC0(1);

        }
        swift_beginAccess(v13, v80, 0, 0);
        v41 = swift_unknownObjectWeakLoadStrong(v13);
        if (v41)
        {
          v42 = (void *)v41;
          if ((*(_BYTE *)(v41 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists) & 1) == 0)
          {
            *(_BYTE *)(v41 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists) = 1;
            v43 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            v86[0] = 1;
LABEL_40:
            NSUserDefaults.set<A>(_:for:)(v86, 0xD000000000000031, 0x80000001006A6FD0, &type metadata for Bool);

            goto LABEL_41;
          }
          goto LABEL_41;
        }
        goto LABEL_21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v9, 1, 1, v29);
    }
    v32 = sub_10001BE90((uint64_t)v9, (uint64_t *)&unk_100828370);
  }
  if ((v25 & 1) != 0)
  {
    v69 = static os_log_type_t.default.getter(v32);
    v70 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Phone status is transitioning to inactive", 41, 2, &_swiftEmptyArrayStorage);

    swift_beginAccess(v13, v81, 0, 0);
    v71 = swift_unknownObjectWeakLoadStrong(v13);
    if (v71)
    {
      v72 = (void *)v71;
      sub_100580BC0(0);

    }
    swift_beginAccess(v13, v80, 0, 0);
    v73 = swift_unknownObjectWeakLoadStrong(v13);
    if (v73)
    {
      v42 = (void *)v73;
      if (*(_BYTE *)(v73 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists) == 1)
      {
        *(_BYTE *)(v73 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists) = 0;
        v43 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v86[0] = 0;
        goto LABEL_40;
      }
LABEL_41:

    }
  }
LABEL_21:
  swift_beginAccess(v13, v86, 0, 0);
  v45 = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong(v13);
  if (!v45
    || (v46 = v45[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive],
        v45,
        v46 != (v77 & 1)))
  {
    swift_beginAccess(v13, &v85, 0, 0);
    v47 = swift_unknownObjectWeakLoadStrong(v13);
    if (v47)
    {
      v48 = (void *)v47;
      v49 = v77 & 1;
      if (*(_BYTE *)(v47 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive) != (v77 & 1))
      {
        *(_BYTE *)(v47 + OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive) = v49;
        v50 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v84[0] = v49;
        NSUserDefaults.set<A>(_:for:)(v84, 0xD000000000000031, 0x80000001006A7260, &type metadata for Bool);

      }
    }
    swift_beginAccess(v13, v84, 0, 0);
    v51 = swift_unknownObjectWeakLoadStrong(v13);
    if (v51)
    {
      v52 = (_BYTE *)v51;
      v53 = sub_100581FD0(v51);
      v54 = v53;
      v56 = FIDeviceMeetsMinimumOSVersionDaytona(v53, v55);
      v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_currentlyPairedWatchIsMinimumVersion] = v56;
      v57 = static os_log_type_t.default.getter(v56);
      v58 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Handling account status change", 30, 2, &_swiftEmptyArrayStorage);

      v59 = type metadata accessor for TaskPriority(0);
      v60 = (uint64_t)v75;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v75, 1, 1, v59);
      v61 = swift_allocObject(&unk_1007AA5D8, 41, 7);
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = v52;
      *(_BYTE *)(v61 + 40) = v54 & 1;
      v62 = v52;
      v63 = sub_10020D9C0(v60, (uint64_t)&unk_10083B518, v61);
      swift_release(v63);

    }
  }
  swift_beginAccess(v13, &v83, 0, 0);
  v64 = swift_unknownObjectWeakLoadStrong(v13);
  if (v64)
  {
    v65 = (char *)v64;
    v66 = (uint64_t)v76;
    Date.init()(v64);
    v67 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
    v68 = (uint64_t)&v65[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp];
    swift_beginAccess(&v65[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp], v82, 33, 0);
    sub_10004D99C(v66, v68);
    swift_endAccess(v82);

  }
}

id sub_100015C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;

  static String._unconditionallyBridgeFromObjectiveC(_:)(ACHNanoLifestyleUserDefaultsDomainName);
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSUserDefaults);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithSuiteName:", v9);

  if (!v10)
    return 0;
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "BOOLForKey:", v12);

  if ((_DWORD)v13)
  {
    v14 = static os_log_type_t.default.getter();
    v15 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, a3, a4, 2, &_swiftEmptyArrayStorage);

  }
  return v13;
}

char *sub_100015D60(void *a1, void *a2, void *a3, void *a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  objc_class *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 v31;
  char *v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v37;
  void *v38;
  objc_super v39;

  v38 = a2;
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener;
  v13 = objc_allocWithZone((Class)type metadata accessor for ActivitySummaryChangeListener());
  v14 = v4;
  *(_QWORD *)&v4[v12] = objc_msgSend(v13, "init");
  v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = 0;
  v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isOriginalWheelchairObserver] = 1;
  v15 = &v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar];
  v16 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_minValueThresholdForActiveMinutes] = 0x3F1A36E2EB1C432DLL;
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.userInitiated(_:), v8);
  v17 = static OS_dispatch_queue.global(qos:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue] = v17;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_healthStore] = a1;
  v18 = objc_allocWithZone((Class)type metadata accessor for ActivityQueryExecutor());
  v19 = a1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor] = sub_100008BFC(v19);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActivityChartDataCache(0)), "init");
  v20 = (void *)objc_opt_self(ActivitySummaryCache);
  objc_msgSend(v20, "setHealthStore:", v19);
  v21 = objc_msgSend(v20, "sharedInstance");
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache] = v21;
  objc_msgSend(v21, "loadDataIfNeeded");
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider] = a3;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider] = a4;
  v22 = v38;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache] = v38;
  v23 = a3;
  v24 = a4;
  v25 = v22;

  v26 = (objc_class *)type metadata accessor for ActivityDataProvider(0);
  v39.receiver = v14;
  v39.super_class = v26;
  v27 = (char *)objc_msgSendSuper2(&v39, "init");
  v28 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache;
  v29 = *(void **)&v27[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache];
  v30 = v27;
  v31 = objc_msgSend(v29, "isWheelchairUser");
  v30[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = v31;
  objc_msgSend(*(id *)&v27[v28], "addObserver:", v30);
  v32 = *(char **)&v30[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener];
  v33 = *(void **)&v32[OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers];
  v34 = v30;
  v35 = v32;
  objc_msgSend(v33, "addObject:", v34);

  return v34;
}

uint64_t sub_100016084(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v44;

  v6 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (_QWORD *)(a1 + v14);
  v19 = (_QWORD *)(a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[8];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
  swift_bridgeObjectRetain(v17);
  v25 = swift_bridgeObjectRetain(v20);
  if (v24(v23, 1, v10, v25))
  {
    v26 = sub_100047110((uint64_t *)&unk_1008283A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v12(v22, v23, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
  }
  v27 = a3[9];
  v28 = a3[10];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (_QWORD *)(a1 + v28);
  v33 = (_QWORD *)(a2 + v28);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = a3[11];
  v36 = a3[12];
  v37 = (_QWORD *)(a1 + v35);
  v38 = (_QWORD *)(a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  v42 = type metadata accessor for URL(0);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v42 - 8) + 16);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v34);
  v44 = swift_bridgeObjectRetain(v39);
  v43(v40, v41, v42, v44);
  return a1;
}

void sub_100016238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  __n128 v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  id v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  _QWORD aBlock[5];
  _QWORD *v88;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(void **)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_achievementsDataProvider + 24);
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_achievementsDataProvider + 32);
  sub_100016804((_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_achievementsDataProvider), v10);
  v12 = dispatch thunk of AAUIAwardsDataProviding.topThreeAchievements()(v10, v11);
  v13 = v12;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 >= 0)
      v12 &= 0xFFFFFFFFFFFFFF8uLL;
    v14 = _CocoaArrayWrapper.endIndex.getter(v12);
  }
  else
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v85 = v6;
  v86 = v3;
  v83 = v9;
  v84 = v7;
  if (v14 < 3)
  {
    swift_bridgeObjectRelease(v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_keyAwards))
      goto LABEL_22;
    goto LABEL_17;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v13);
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v13);
LABEL_11:
    v16 = v22;
    swift_bridgeObjectRelease(v13);
    v23 = v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_keyAwards;
    v24 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_keyAwards);
    if (v24)
    {
      if (v18)
      {
        v79 = v5;
        v80 = v2;
        v26 = *(void **)(v23 + 16);
        v76 = *(void **)(v23 + 8);
        v25 = v76;
        v74 = v26;
        v75 = sub_10001E724(0, (unint64_t *)&qword_10082BBF0, ACHAchievement_ptr);
        v27 = v24;
        v28 = v25;
        v29 = v26;
        v30 = v18;
        v31 = v17;
        v32 = v16;
        v78 = v18;
        v33 = v16;
        v34 = v17;
        v35 = v32;
        v36 = v27;
        v82 = v28;
        v81 = v29;
        v37 = v30;
        v38 = v31;
        v39 = v35;
        v17 = v34;
        v16 = v33;
        v18 = v78;
        v40 = v39;
        sub_100218540(v24, v76, v74);
        sub_100218540(v18, v17, v16);
        v76 = v36;
        v41 = static NSObject.== infix(_:_:)(v36, v37);
        v77 = v40;
        if ((v41 & 1) != 0)
        {
          v42 = v82;
          v43 = v81;
          v73 = v38;
          v74 = v43;
          v44 = v38;
          v45 = v42;
          v46 = v44;
          v47 = v40;
          v48 = v46;
          v49 = v45;
          if ((static NSObject.== infix(_:_:)(v45, v46) & 1) != 0)
          {
            v50 = static NSObject.== infix(_:_:)(v74, v47);

            v51 = v48;
            v52 = v50 ^ 1;
          }
          else
          {

            v51 = v46;
            v52 = 1;
          }

          v68 = v81;
          v67 = v82;
          v38 = v73;
          v66 = v74;
        }
        else
        {
          v52 = 1;
          v66 = v38;
          v49 = v37;
          v68 = v81;
          v67 = v82;
        }

        v69 = v76;
        v70 = v77;

        v5 = v79;
        v2 = v80;
        if ((v52 & 1) == 0)
          goto LABEL_22;
      }
    }
    else if (!v18)
    {
LABEL_22:
      v71 = static os_log_type_t.default.getter(v15);
      v86 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v86, "AwardsActivityTileDataModel keyAwards did not change. Not updating UI", 69, 2, _swiftEmptyArrayStorage);
      sub_100016828(v18, v17, v16);

      return;
    }
LABEL_17:
    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v54 = (void *)static OS_dispatch_queue.main.getter(v53);
    v55 = swift_allocObject(&unk_100793B70, 24, 7);
    swift_unknownObjectWeakInit(v55 + 16, v1);
    v56 = (_QWORD *)swift_allocObject(&unk_100793C38, 48, 7);
    v56[2] = v18;
    v56[3] = v17;
    v56[4] = v16;
    v56[5] = v55;
    aBlock[4] = sub_1002AA590;
    v88 = v56;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_100793C50;
    v57 = _Block_copy(aBlock);
    v58 = v88;
    sub_100218540(v18, v17, v16);
    v59 = swift_release(v58);
    v60 = v16;
    v61 = v17;
    v62 = v83;
    static DispatchQoS.unspecified.getter(v59);
    aBlock[0] = _swiftEmptyArrayStorage;
    v63 = sub_100028404((unint64_t *)&qword_1008268E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v64 = sub_100047110(&qword_100828C80);
    v65 = sub_10002FB08();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v64, v65, v2, v63);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v62, v5, v57);
    _Block_release(v57);

    sub_100016828(v18, v61, v60);
    (*((void (**)(char *, uint64_t))v86 + 1))(v5, v2);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v62, v85);
    return;
  }
  v19 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v19 == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v19 >= 3)
  {
    v20 = *(void **)(v13 + 40);
    v21 = *(void **)(v13 + 48);
    v18 = *(id *)(v13 + 32);
    v17 = v20;
    v22 = v21;
    goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

_QWORD *sub_100016804(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_100016828(void *a1, void *a2, void *a3)
{
  if (a1)
  {

  }
}

uint64_t sub_100016864(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

_QWORD *sub_100016AFC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *result;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[5];
  _QWORD *v49;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_10083D198);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InvitationDestinationCoordinator(0)), "init");
  v17 = (char *)v2 + OBJC_IVAR____TtC10FitnessApp27ReachableContactsDataSource__friendSuggestionList;
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100047110(&qword_100823988);
  Published.init(initialValue:)(aBlock, v18);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  v2[4] = a1;
  v19 = a1;
  v20 = objc_msgSend(v19, "allDestinationsForActiveOrPendingFriends");
  if (v20)
  {
    v21 = v20;
    v22 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for String, &protocol witness table for String);

  }
  else
  {
    v22 = &_swiftEmptySetSingleton;
  }
  v2[2] = v22;
  v23 = (void *)objc_opt_self(ASReachabilityManager);
  result = objc_msgSend(v23, "sharedInstanceForServiceIdentifier:", kASiCloudServiceIdentifier);
  if (result)
  {
    v25 = result;
    v41 = v19;
    result = objc_msgSend(v23, "sharedInstanceForServiceIdentifier:", kASiMessageServiceIdentifier);
    if (result)
    {
      v26 = result;
      v27 = sub_100047110((uint64_t *)&unk_100828340);
      v28 = swift_allocObject(v27, 48, 7);
      *(_OWORD *)(v28 + 16) = xmmword_100629280;
      *(_QWORD *)(v28 + 32) = v25;
      *(_QWORD *)(v28 + 40) = v26;
      aBlock[0] = v28;
      specialized Array._endMutation()(v28);
      v2[5] = aBlock[0];
      v29 = objc_allocWithZone((Class)CNContactStore);
      v30 = v25;
      v31 = v26;
      v2[3] = objc_msgSend(v29, "init");
      sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
      v32 = (void *)static OS_dispatch_queue.global(qos:)(v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      aBlock[4] = sub_10004E160;
      v49 = v2;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002D0F8;
      aBlock[3] = &unk_1007AD2D8;
      v33 = _Block_copy(aBlock);
      swift_retain(v2);
      static DispatchQoS.unspecified.getter(v34);
      v47 = _swiftEmptyArrayStorage;
      v35 = sub_10002FAC0();
      v36 = sub_100047110(&qword_100828C80);
      v37 = sub_10002FB08();
      v38 = v44;
      v39 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v36, v37, v46, v35);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v38, v33);
      _Block_release(v33);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v39);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
      swift_release(v49);
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100016F1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  void (*v23)(uint64_t);
  uint64_t v24;

  if ((sub_10000AB48() & 1) == 0)
  {
    v1 = (void *)objc_opt_self(NSNotificationCenter);
    v2 = objc_msgSend(v1, "defaultCenter");
    if (qword_10081D640 != -1)
      swift_once(&qword_10081D640, sub_10004CE14);
    v3 = (void *)qword_100869F70;
    v4 = (void *)objc_opt_self(NSOperationQueue);
    v5 = v3;
    v6 = objc_msgSend(v4, "mainQueue");
    v7 = swift_allocObject(&unk_100793B70, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, v0);
    v23 = sub_1002AA59C;
    v24 = v7;
    v19 = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_1000398D4;
    v22 = &unk_100793C78;
    v8 = _Block_copy(&v19);
    v9 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v5, 0, v6, v8, swift_release(v24).n128_f64[0]);
    _Block_release(v8);

    v10 = objc_msgSend(v1, "defaultCenter");
    v11 = kFIUIFitnessUnitPreferencesDidChangeNotification;
    v12 = objc_msgSend(v4, "mainQueue");
    v13 = swift_allocObject(&unk_100793B70, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v0);
    v23 = sub_100039DAC;
    v24 = v13;
    v19 = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_1000398D4;
    v22 = &unk_100793CA0;
    v14 = _Block_copy(&v19);
    v15 = objc_msgSend(v10, "addObserverForName:object:queue:usingBlock:", v11, 0, v12, v14, swift_release(v24).n128_f64[0]);
    _Block_release(v14);

    v16 = sub_100047110(&qword_10082CEC0);
    v17 = swift_allocObject(v16, 96, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v17 + 56) = swift_getObjectType(v9);
    *(_QWORD *)(v17 + 32) = v9;
    *(_QWORD *)(v17 + 88) = swift_getObjectType(v15);
    *(_QWORD *)(v17 + 64) = v15;
    v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_observers);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_observers) = v17;
    swift_bridgeObjectRelease(v18);
  }
}

void sub_1000171E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  Class isa;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void **aBlock;
  uint64_t v28;
  double (*v29)(uint64_t, uint64_t);
  void *v30;
  id (*v31)(void *);
  _QWORD *v32;

  v8 = *(_QWORD *)(v5 + 40);
  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v5 + 40));
    if (v9)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v8);
    return;
  }
  if (v8 < 0)
    v22 = *(_QWORD *)(v5 + 40);
  else
    v22 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v9 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v9)
    goto LABEL_14;
LABEL_3:
  if (v9 < 1)
  {
    __break(1u);
  }
  else
  {
    v10 = 0;
    v24 = v8 & 0xC000000000000001;
    v23 = v8;
    do
    {
      if (v24)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      else
        v11 = *(id *)(v8 + 8 * v10 + 32);
      v12 = v11;
      ++v10;
      isa = Set._bridgeToObjectiveC()().super.isa;
      v14 = (_QWORD *)swift_allocObject(&unk_1007AD248, 40, 7);
      v14[2] = a2;
      v14[3] = a3;
      v14[4] = v12;
      v31 = sub_1005D3290;
      v32 = v14;
      aBlock = _NSConcreteStackBlock;
      v28 = 1107296256;
      v29 = sub_100017900;
      v30 = &unk_1007AD260;
      v15 = _Block_copy(&aBlock);
      v16 = v32;
      swift_retain(a3);
      v17 = v12;
      swift_release(v16);
      v18 = (_QWORD *)swift_allocObject(&unk_1007AD298, 40, 7);
      v18[2] = a4;
      v18[3] = a5;
      v18[4] = v17;
      v31 = sub_100017980;
      v32 = v18;
      aBlock = _NSConcreteStackBlock;
      v28 = 1107296256;
      v29 = sub_100017900;
      v30 = &unk_1007AD2B0;
      v19 = _Block_copy(&aBlock);
      v20 = v32;
      v21 = v17;
      swift_retain(a5);
      swift_release(v20);
      objc_msgSend(v21, "queryDestinations:updateHandler:completionHandler:", isa, v15, v19);
      _Block_release(v19);
      _Block_release(v15);

      v8 = v23;
    }
    while (v9 != v10);
    swift_bridgeObjectRelease(v23);
  }
}

uint64_t sub_100017444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (**v33)(uint64_t *);
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(uint64_t (*)(), uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD aBlock[5];
  uint64_t v65;

  v1 = v0;
  v58 = sub_100047110(&qword_100823048);
  v2 = *(_QWORD *)(v58 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = __chkstk_darwin(v58);
  v57 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - v5;
  v60 = sub_100047110((uint64_t *)&unk_100836170);
  v62 = *(_QWORD *)(v60 - 8);
  v7 = *(_QWORD *)(v62 + 64);
  v8 = __chkstk_darwin(v60);
  v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v56 - v10;
  __chkstk_darwin(v9);
  v63 = (char *)&v56 - v11;
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundTaskAssertion()), "init");
  v13 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v14 = swift_allocObject(&unk_100789908, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v12);
  aBlock[4] = sub_10016ADF0;
  v65 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100789C40;
  v15 = _Block_copy(aBlock);
  v16 = objc_msgSend(v13, "beginBackgroundTaskWithExpirationHandler:", v15, swift_release(v65).n128_f64[0]);
  _Block_release(v15);

  v17 = &v12[OBJC_IVAR___CHBackgroundTaskAssertion_identifier];
  *(_QWORD *)v17 = v16;
  v17[8] = 0;
  v12[OBJC_IVAR___CHBackgroundTaskAssertion_state] = 1;
  v18 = *(_QWORD **)(v0 + OBJC_IVAR___CHFitnessAppBadgeAggregator_engagementAppBadgeProvider);
  v19 = v18[5];
  v20 = v18[6];
  sub_100016804(v18 + 2, v19);
  v21 = v6;
  dispatch thunk of EngagementClientProtocol.queryEngagementBadges()(v19, v20);
  v22 = swift_allocObject(&unk_1007897C8, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v1);
  v23 = swift_allocObject(&unk_100789C78, 32, 7);
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v12;
  v24 = swift_allocObject(&unk_100789CA0, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10016AFD0;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = v57;
  v26 = v21;
  v27 = v21;
  v28 = v58;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v57, v26, v58);
  v29 = *(unsigned __int8 *)(v2 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = (v3 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_100789CC8, v31 + 16, v29 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v32 + v30, v25, v28);
  v33 = (uint64_t (**)(uint64_t *))(v32 + v31);
  *v33 = sub_10016B00C;
  v33[1] = (uint64_t (*)(uint64_t *))v24;
  v34 = v12;
  v35 = v59;
  Promise.init(asyncOperation:)(sub_10016B020, v32, (char *)&type metadata for () + 8);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v27, v28);
  v36 = swift_allocObject(&unk_100789CF0, 24, 7);
  *(_QWORD *)(v36 + 16) = v34;
  v37 = swift_allocObject(&unk_100789D18, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_10016B058;
  *(_QWORD *)(v37 + 24) = v36;
  v39 = v61;
  v38 = v62;
  v40 = v60;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v61, v35, v60);
  v41 = *(unsigned __int8 *)(v38 + 80);
  v42 = v38;
  v43 = (v41 + 16) & ~v41;
  v44 = (v7 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject(&unk_100789D40, v44 + 16, v41 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v45 + v43, v39, v40);
  v46 = (_QWORD *)(v45 + v44);
  *v46 = sub_1001104C4;
  v46[1] = v37;
  v47 = v34;
  v48 = v63;
  Promise.init(asyncOperation:)(sub_100110010, v45, (char *)&type metadata for () + 8);
  v49 = *(void (**)(char *, uint64_t))(v42 + 8);
  v49(v35, v40);
  v50 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v40);
  v52 = v51;
  v53 = swift_allocObject(&unk_100789D68, 32, 7);
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 24) = 0;
  v50(sub_1001104CC, v53);

  swift_release(v52);
  v54 = swift_release(v53);
  return ((uint64_t (*)(char *, uint64_t, __n128))v49)(v48, v40, v54);
}

double sub_100017900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  double result;

  v2 = a2;
  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v5 = sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
    v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v5, &protocol witness table for String);
  }
  swift_retain(v3);
  v4(v2);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

id sub_100017980(void *a1)
{
  uint64_t v1;

  return sub_10001799C(a1, *(void (**)(id, uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(id *)(v1 + 32));
}

id sub_10001799C(id result, void (*a2)(id, uint64_t, uint64_t), int a3, id a4)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v5 = result;
    result = objc_msgSend(a4, "serviceIdentifier");
    if (result)
    {
      v6 = result;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v9 = v8;

      a2(v5, v7, v9);
      return (id)swift_bridgeObjectRelease(v9);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_100017A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_100017A3C(a1, a2, a3, v3[2], v3[3], v3[4]);
}

void sub_100017A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  __n128 v27;
  char v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  id v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;
  uint64_t v58;
  int64_t v59;
  int64_t v61;
  _BYTE v62[24];
  char v63[24];
  char v64[32];

  v6 = (_QWORD *)a1;
  v7 = (_QWORD *)(a4 + 16);
  v58 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v7, v64, 0, 0);
  swift_beginAccess(v7, v63, 0, 0);
  v11 = 0;
  v59 = (unint64_t)(v8 + 63) >> 6;
  v51 = v6;
  v57 = v7;
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v11 << 6);
LABEL_21:
    if (*(_QWORD *)(*v7 + 16) >= 0xBuLL)
    {
LABEL_48:
      swift_release(v6);
      return;
    }
    v17 = (uint64_t *)(v6[6] + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(void **)(v6[7] + 8 * v13);
    v21 = v6[2];
    swift_bridgeObjectRetain(v18);
    if (v21)
    {
      swift_bridgeObjectRetain(v18);
      v22 = v20;
      v23 = v19;
      v24 = sub_100438F74(v19, v18);
      if ((v25 & 1) == 0)
      {
        v61 = v11;
        swift_bridgeObjectRelease(v18);
        goto LABEL_29;
      }
      v26 = *(id *)(v6[7] + 8 * v24);
      v27 = swift_bridgeObjectRelease(v18);
      if (Int.init(truncating:)(v26, v27) == 1)
      {
        v61 = v11;
        v28 = sub_1002D41B4(v19, v18, *(_QWORD *)(a5 + 16));

        if ((v28 & 1) != 0)
        {

          goto LABEL_34;
        }
        goto LABEL_29;
      }

      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v23 = v19;
      v61 = v11;
      v29 = v20;
LABEL_29:
      if (*(_QWORD *)(a6 + 16))
      {
        swift_bridgeObjectRetain(v18);
        v30 = v23;
        v31 = sub_100438F74(v23, v18);
        if ((v32 & 1) != 0)
        {
          v33 = *(id *)(*(_QWORD *)(a6 + 56) + 8 * v31);
          v34 = objc_msgSend(v33, "identifier", swift_bridgeObjectRelease(v18).n128_f64[0]);
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v37 = v36;

          LOBYTE(v34) = sub_1005D3030(v35, v37);
          swift_bridgeObjectRelease(v37);
          if ((v34 & 1) != 0)
          {

            swift_bridgeObjectRelease(v18);
            goto LABEL_47;
          }
          v54 = v30;
          v7 = v57;
          v38 = *v57;
          v39 = *(_QWORD *)(*v57 + 16);
          if (v39)
          {
            swift_bridgeObjectRetain_n(*v57, 2);
            v53 = v38;
            v40 = (uint64_t *)(v38 + 72);
            while (1)
            {
              v41 = *(v40 - 3);
              v43 = *(v40 - 1);
              v42 = *v40;
              v44 = (id)*(v40 - 5);
              swift_bridgeObjectRetain(v41);
              swift_bridgeObjectRetain(v43);
              if (objc_msgSend(v44, "isEqual:", v33, swift_bridgeObjectRetain(v42).n128_f64[0]))
                break;
              swift_bridgeObjectRelease(v42);
              swift_bridgeObjectRelease(v43);
              swift_bridgeObjectRelease(v41);

              v40 += 6;
              if (!--v39)
              {
                swift_bridgeObjectRelease_n(v53, 2);
                v6 = v51;
                v7 = v57;
                goto LABEL_41;
              }
            }
            swift_bridgeObjectRelease(v42);
            swift_bridgeObjectRelease(v43);
            swift_bridgeObjectRelease(v41);

            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease_n(v53, 2);
            v6 = v51;
LABEL_47:
            v7 = v57;
            v11 = v61;
          }
          else
          {
LABEL_41:
            swift_beginAccess(v7, v62, 33, 0);
            v45 = (_QWORD *)*v7;
            swift_bridgeObjectRetain(v18);
            v46 = v33;
            swift_bridgeObjectRetain(a3);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
            *v7 = v45;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v45 = sub_100141BD0(0, v45[2] + 1, 1, v45);
              *v7 = v45;
            }
            v49 = v45[2];
            v48 = v45[3];
            if (v49 >= v48 >> 1)
            {
              v45 = sub_100141BD0((_QWORD *)(v48 > 1), v49 + 1, 1, v45);
              *v7 = v45;
            }
            v45[2] = v49 + 1;
            v50 = &v45[6 * v49];
            v50[4] = v46;
            v50[5] = v54;
            v50[6] = v18;
            v50[7] = a2;
            v50[8] = a3;
            v50[9] = _swiftEmptyArrayStorage;
            swift_endAccess(v62);

            swift_bridgeObjectRelease(v18);
            v11 = v61;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n(v18, 2);
          v11 = v61;
        }
      }
      else
      {

LABEL_34:
        swift_bridgeObjectRelease(v18);
        v11 = v61;
      }
    }
  }
  v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v14 >= v59)
    goto LABEL_48;
  v15 = *(_QWORD *)(v58 + 8 * v14);
  ++v11;
  if (v15)
    goto LABEL_20;
  v11 = v14 + 1;
  if (v14 + 1 >= v59)
    goto LABEL_48;
  v15 = *(_QWORD *)(v58 + 8 * v11);
  if (v15)
    goto LABEL_20;
  v11 = v14 + 2;
  if (v14 + 2 >= v59)
    goto LABEL_48;
  v15 = *(_QWORD *)(v58 + 8 * v11);
  if (v15)
  {
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_21;
  }
  v16 = v14 + 3;
  if (v16 >= v59)
    goto LABEL_48;
  v15 = *(_QWORD *)(v58 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v59)
      goto LABEL_48;
    v15 = *(_QWORD *)(v58 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_50:
  __break(1u);
}

void sub_100018218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_100018248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int IsRightToLeft;
  int v14;
  int v15;
  id v16;
  id v17;
  int v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void (**v50)(char *, uint64_t);
  _QWORD *v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void (*v56)();
  uint64_t v57;
  __int128 v58[3];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v50 = *(void (***)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(UIApplication);
  v9 = objc_msgSend(v8, "sharedApplication");
  v10 = objc_msgSend(v9, "applicationState");

  if (v10)
  {
    v12 = static os_log_type_t.default.getter(v11);
    v50 = (void (**)(char *, uint64_t))HKLogActivity;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v50, "[TrophyCasePrefetcher] Skipping prefetching because app is not active", 69, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    IsRightToLeft = FIUILocaleIsRightToLeft();
    v48 = v2;
    v14 = IsRightToLeft ^ 1;
    v40 = v0;
    v45 = v1;
    v15 = IsRightToLeft;
    v44 = IsRightToLeft;
    v16 = objc_msgSend(v8, "sharedApplication");
    v47 = v5;
    v17 = objc_msgSend(v16, "preferredContentSizeCategory");

    LOBYTE(v16) = UIContentSizeCategory.isAccessibilityCategory.getter(v17);
    if ((v16 & 1) != 0)
      v18 = v15;
    else
      v18 = v14;
    v49 = v18;
    v19 = objc_msgSend(v8, "sharedApplication");
    v20 = objc_msgSend(v19, "preferredContentSizeCategory");

    v46 = UIContentSizeCategory.isAccessibilityCategory.getter(v20);
    v21 = v40;
    v22 = v40 + OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_awardsDataProvider;
    v23 = swift_allocObject(&unk_1007957E8, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, v21);
    sub_1000252E0(v22, (uint64_t)v58);
    v24 = swift_allocObject(&unk_100795810, 64, 7);
    sub_10002411C(v58, v24 + 16);
    *(_QWORD *)(v24 + 56) = v23;
    v56 = sub_1002FD71C;
    v57 = v24;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_10002D0F8;
    v55 = &unk_100795828;
    v25 = _Block_copy(&aBlock);
    v26 = swift_retain(v23);
    static DispatchQoS.unspecified.getter(v26);
    v51 = _swiftEmptyArrayStorage;
    v27 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = v27;
    v28 = sub_100047110(&qword_100828C80);
    v41 = v28;
    v43 = sub_1000283C4((unint64_t *)&qword_1008268F0, &qword_100828C80);
    v29 = v28;
    v30 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v29, v43, v45, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v25);
    _Block_release(v25);
    v31 = *(void (**)(char *, uint64_t))(v48 + 8);
    v31(v4, v30);
    v32 = v50[1];
    v33 = v47;
    v32(v7, v47);
    v34 = v57;
    swift_release(v23);
    swift_release(v34);
    v50 = *(void (***)(char *, uint64_t))(v21 + OBJC_IVAR____TtC10FitnessApp20TrophyCasePrefetcher_utilityQueue);
    v35 = swift_allocObject(&unk_1007957E8, 24, 7);
    swift_unknownObjectWeakInit(v35 + 16, v21);
    sub_1000252E0(v22, (uint64_t)v58);
    v36 = swift_allocObject(&unk_100795860, 77, 7);
    *(_QWORD *)(v36 + 16) = v35;
    *(_DWORD *)(v36 + 24) = v49;
    sub_10002411C(v58, v36 + 32);
    *(_DWORD *)(v36 + 72) = v44;
    *(_BYTE *)(v36 + 76) = (v46 & 1) == 0;
    v56 = sub_1002FD754;
    v57 = v36;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_10002D0F8;
    v55 = &unk_100795878;
    v37 = _Block_copy(&aBlock);
    v38 = swift_retain(v35);
    static DispatchQoS.unspecified.getter(v38);
    v51 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v41, v43, v30, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v37);
    _Block_release(v37);
    v31(v4, v30);
    v32(v7, v33);
    v39 = v57;
    swift_release(v35);
    swift_release(v39);
  }
}

uint64_t destroy for ActivitySharingTabView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 88));

  swift_release(*(_QWORD *)(a1 + 144));
  swift_release(*(_QWORD *)(a1 + 152));
  swift_release(*(_QWORD *)(a1 + 168));
  swift_release(*(_QWORD *)(a1 + 184));

  return swift_release(*(_QWORD *)(a1 + 208));
}

char *sub_100018848(void *a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  char *v18;
  id v19;
  NSString v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  const char *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[5];
  uint64_t v43;
  objc_super v44;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_dataProvider] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_healthStore] = a2;
  v15 = (objc_class *)type metadata accessor for TrendsAvailabilityManager();
  v44.receiver = v2;
  v44.super_class = v15;
  v37 = a1;
  v36 = a2;
  v16 = objc_msgSendSuper2(&v44, "init");
  v17 = qword_10081E0B0;
  v18 = (char *)v16;
  if (v17 != -1)
    swift_once(&qword_10081E0B0, sub_10004F61C);
  if ((byte_10083D1A0 & 1) == 0)
  {
    if (qword_10081E0B8 != -1)
      swift_once(&qword_10081E0B8, sub_10004EAD0);
    if ((byte_10083D1A1 & 1) == 0)
    {
      v19 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v20 = String._bridgeToObjectiveC()();
      v21 = objc_msgSend(v19, "integerForKey:", v20);

      if ((unint64_t)v21 <= 3
        && *(id *)&v18[OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability] != v21)
      {
        *(_QWORD *)&v18[OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability] = v21;
        v22 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
        if (qword_10081DE28 != -1)
          swift_once(&qword_10081DE28, sub_10004E610);
        objc_msgSend(v22, "postNotificationName:object:", qword_10086AC40, v18);

      }
      v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v35 = "activitySummaryDidChangeWithNote:";
      v24 = qword_10081DED8;
      v25 = v18;
      if (v24 != -1)
        swift_once(&qword_10081DED8, sub_10004CDE0);
      objc_msgSend(v23, "addObserver:selector:name:object:", v25, v35, qword_10086ACE0, 0);

    }
  }
  sub_10002FB54();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.userInteractive(_:), v11);
  v26 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v27 = swift_allocObject(&unk_1007A3960, 24, 7);
  *(_QWORD *)(v27 + 16) = v18;
  aBlock[4] = sub_10004E570;
  v43 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_1007A3978;
  v28 = _Block_copy(aBlock);
  v29 = v18;
  static DispatchQoS.unspecified.getter(v29);
  v41 = _swiftEmptyArrayStorage;
  v30 = sub_10002FAC0();
  v31 = sub_100047110(&qword_100828C80);
  v32 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v31, v32, v5, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v28);

  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  swift_release(v43);
  return v29;
}

uint64_t sub_100018CD0(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  id v28;
  NSString v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;

  _StringGuts.grow(_:)(154);
  v2._countAndFlagsBits = 0xD00000000000002FLL;
  v2._object = (void *)0x80000001006A58A0;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x4D6F6D6544736928;
  v3._object = (void *)0xED0000203A65646FLL;
  String.append(_:)(v3);
  if ((a1 & 0x10000000000) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if ((a1 & 0x10000000000) != 0)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0xD00000000000001ALL;
  v7._object = (void *)0x80000001006A58D0;
  String.append(_:)(v7);
  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x65766F4D73616820;
  v11._object = (void *)0xEE00203A6C616F47;
  String.append(_:)(v11);
  if ((a1 & 1) != 0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0xD000000000000018;
  v15._object = (void *)0x80000001006A58F0;
  String.append(_:)(v15);
  if ((a1 & 0x100) != 0)
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if ((a1 & 0x100) != 0)
    v17 = 0xE400000000000000;
  else
    v17 = 0xE500000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v17);
  v19._object = (void *)0x80000001006A5910;
  v19._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v19);
  if ((a1 & 0x10000) != 0)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if ((a1 & 0x10000) != 0)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x6E61745373616820;
  v23._object = (void *)0xEF203A6C616F4764;
  String.append(_:)(v23);
  if ((a1 & 0x1000000) != 0)
    v24 = 1702195828;
  else
    v24 = 0x65736C6166;
  if ((a1 & 0x1000000) != 0)
    v25 = 0xE400000000000000;
  else
    v25 = 0xE500000000000000;
  v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease(v25);
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  v27._object = (void *)0x80000001006A5930;
  String.append(_:)(v27);
  v28 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "BOOLForKey:", v29);

  if (v30)
    v31 = 1702195828;
  else
    v31 = 0x65736C6166;
  if (v30)
    v32 = 0xE400000000000000;
  else
    v32 = 0xE500000000000000;
  v33 = v32;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease(v32);
  v34._countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  return 0;
}

void sub_100018FAC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v2 = Notification.userInfo.getter();
  if (v2)
  {
    v3 = v2;
    v24[0] = 0x65676E6172;
    v24[1] = 0xE500000000000000;
    AnyHashable.init<A>(_:)(v25, v24, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v3 + 16) && (v4 = sub_10004C814((uint64_t)v25), (v5 & 1) != 0))
    {
      sub_10003E9BC(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease(v3);
    sub_10004CC10((uint64_t)v25);
    if (!*((_QWORD *)&v27 + 1))
    {
      sub_1000F996C((uint64_t)&v26);
      return;
    }
    v6 = sub_100047110(&qword_1008373D8);
    if ((swift_dynamicCast(v24, &v26, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
    {
      v7 = v24[0];
      if (v24[0] >> 62)
      {
        if (v24[0] < 0)
          v0 = (id)v24[0];
        else
          v0 = (id)(v24[0] & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(v24[0]);
        v8 = (char *)_CocoaArrayWrapper.endIndex.getter(v0);
        if (v8)
        {
LABEL_10:
          if ((v7 & 0xC000000000000001) != 0)
          {
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
          }
          else
          {
            if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_43;
            }
            v9 = *(id *)(v7 + 32);
          }
          v1 = (uint64_t)v9;
          v0 = objc_msgSend(v9, "longLongValue", swift_bridgeObjectRelease(v7).n128_f64[0]);

          v10 = v8 - 1;
          if (!__OFSUB__(v8, 1))
          {
            if ((v7 & 0xC000000000000001) != 0)
            {
              v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
            }
            else
            {
              if (((unint64_t)v10 & 0x8000000000000000) != 0)
              {
LABEL_51:
                __break(1u);
                goto LABEL_52;
              }
              if ((unint64_t)v10 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_52:
                __break(1u);
                return;
              }
              v11 = *(id *)(v7 + 8 * (_QWORD)v10 + 32);
            }
            v12 = v11;
            v8 = (char *)objc_msgSend(v11, "longLongValue", swift_bridgeObjectRelease(v7).n128_f64[0]);

            v13 = objc_msgSend(*(id *)(v23 + OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers), "allObjects");
            v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, (char *)&type metadata for Swift.AnyObject + 8);

            if (!((unint64_t)v1 >> 62))
            {
              v14 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v14)
              {
LABEL_22:
                if (v14 >= 1)
                {
                  for (i = 0; i != v14; ++i)
                  {
                    if ((v1 & 0xC000000000000001) != 0)
                    {
                      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
                    }
                    else
                    {
                      v16 = *(_QWORD *)(v1 + 8 * i + 32);
                      swift_unknownObjectRetain(v16);
                    }
                    ObjectType = swift_getObjectType(v16);
                    v18 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ActivitySummaryChangeObserving);
                    if (v18)
                      v19 = v18;
                    else
                      v19 = 0;
                    if (v18)
                      v20 = v16;
                    else
                      v20 = 0;
                    if (v20)
                    {
                      v21 = swift_getObjectType(v20);
                      (*(void (**)(uint64_t, id, char *, uint64_t, uint64_t))(v19 + 8))(v23, v0, v8, v21, v19);
                    }
                    swift_unknownObjectRelease(v16);
                  }
                  goto LABEL_48;
                }
                __break(1u);
                goto LABEL_51;
              }
LABEL_48:
              swift_bridgeObjectRelease(v1);
              return;
            }
LABEL_44:
            if (v1 < 0)
              v22 = v1;
            else
              v22 = v1 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v1);
            v14 = _CocoaArrayWrapper.endIndex.getter(v22);
            swift_bridgeObjectRelease(v1);
            if (v14)
              goto LABEL_22;
            goto LABEL_48;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
      }
      else
      {
        v8 = *(char **)((v24[0] & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v24[0]);
        if (v8)
          goto LABEL_10;
      }
      swift_bridgeObjectRelease_n(v7, 2);
    }
  }
}

_QWORD *initializeWithCopy for ActivitySharingTabView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  v8 = *(void **)(a2 + 32);
  v7 = *(void **)(a2 + 40);
  a1[4] = v8;
  a1[5] = v7;
  v9 = *(void **)(a2 + 48);
  v10 = *(void **)(a2 + 56);
  a1[6] = v9;
  a1[7] = v10;
  v11 = *(void **)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  a1[8] = v11;
  a1[9] = v12;
  v32 = *(void **)(a2 + 80);
  v33 = *(_QWORD *)(a2 + 88);
  a1[10] = v32;
  a1[11] = v33;
  v34 = *(void **)(a2 + 96);
  v35 = *(void **)(a2 + 104);
  a1[12] = v34;
  a1[13] = v35;
  v13 = *(void **)(a2 + 120);
  v36 = *(void **)(a2 + 112);
  a1[14] = v36;
  a1[15] = v13;
  v38 = v13;
  v39 = *(void **)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 136);
  a1[16] = v39;
  a1[17] = v14;
  v37 = *(_QWORD *)(a2 + 144);
  v42 = *(_QWORD *)(a2 + 152);
  a1[18] = v37;
  a1[19] = v42;
  v41 = *(_QWORD *)(a2 + 168);
  a1[20] = *(_QWORD *)(a2 + 160);
  a1[21] = v41;
  v40 = *(_QWORD *)(a2 + 184);
  a1[22] = *(_QWORD *)(a2 + 176);
  a1[23] = v40;
  v43 = *(void **)(a2 + 200);
  a1[24] = *(_QWORD *)(a2 + 192);
  a1[25] = v43;
  v44 = *(_QWORD *)(a2 + 208);
  a1[26] = v44;
  v15 = v3;
  v16 = v4;
  v17 = v6;
  v18 = v5;
  v19 = v8;
  v20 = v7;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  swift_retain(v12);
  v24 = v32;
  swift_retain(v33);
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v38;
  v29 = v39;
  swift_retain(v37);
  swift_retain(v42);
  swift_retain(v41);
  swift_retain(v40);
  v30 = v43;
  swift_retain(v44);
  return a1;
}

void sub_100019464(char a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSString v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSString v29;
  double v30;
  char **v31;
  id v32;
  void *v33;
  id v34;
  id v35;

  if ((a1 & 1) != 0)
    v3 = 0x800000010068B490;
  else
    v3 = 0xE500000000000000;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "mainBundle");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, 0, 0);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  swift_bridgeObjectRelease(v3);
  v12 = (uint64_t *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8);
  *v12 = v9;
  v12[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = *(void **)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  v15 = v12[1];
  if (v15)
  {
    swift_bridgeObjectRetain(v12[1]);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v14, "setText:", v16);

  if ((a1 & 1) != 0)
    v17 = 0x800000010068B470;
  else
    v17 = 0xEB000000004C4542;
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  v19 = objc_msgSend(v5, "mainBundle");
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "localizedStringForKey:value:table:", v20, 0, 0);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  swift_bridgeObjectRelease(v17);
  v25 = (uint64_t *)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  v26 = *(_QWORD *)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8);
  *v25 = v22;
  v25[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = *(void **)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  v28 = v25[1];
  if (v28)
  {
    swift_bridgeObjectRetain(v25[1]);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v29 = 0;
  }
  objc_msgSend(v27, "setText:", v29);

  v30 = 1.0;
  if ((a1 & 1) != 0)
  {
    v30 = 0.0;
    v31 = &selRef_wheelchairSpriteSheet;
  }
  else
  {
    v31 = &selRef_defaultSpriteSheet;
  }
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair), "setAlpha:", v30);
  v32 = objc_msgSend((id)objc_opt_self(ARUISpriteSheetFactory), *v31);
  v33 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  v34 = objc_msgSend(v33, "ringGroup");
  objc_msgSend(v34, "setSpriteSheet:", v32);

  v35 = objc_msgSend(v33, "ringGroup");
  objc_msgSend(v35, "playSpriteAnimation");

}

double sub_1000197D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10001E724(0, &qword_10082EA78, HKCategorySample_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

void sub_100019840(uint64_t a1)
{
  uint64_t v1;

  sub_100019848(a1, v1);
}

void sub_100019848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;
  _BYTE v27[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v13 = (void *)Strong;
    v23 = v5;
    v14 = *(void **)(Strong + OBJC_IVAR___CHHistoryDataProvider_queue);
    v15 = v14;

    if (v14)
    {
      v16 = swift_allocObject(&unk_10079CDF0, 32, 7);
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = a1;
      aBlock[4] = sub_10002D124;
      v26 = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002D0F8;
      aBlock[3] = &unk_10079CE08;
      v17 = _Block_copy(aBlock);
      swift_retain(a2);
      swift_bridgeObjectRetain(a1);
      static DispatchQoS.unspecified.getter(v18);
      v24 = _swiftEmptyArrayStorage;
      v19 = sub_10002FAC0();
      v20 = sub_100047110(&qword_100828C80);
      v21 = sub_10002FB08();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v4, v19);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v17);
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_release(v26);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100019A58()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **aBlock;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void *v29;
  double (*v30)(uint64_t);
  uint64_t v31;

  v1 = *v0;
  if ((sub_10000AB48() & 1) == 0)
  {
    v2 = (void *)objc_opt_self(NSNotificationCenter);
    v3 = objc_msgSend(v2, "defaultCenter");
    v25 = v1;
    v4 = (void *)objc_opt_self(NSOperationQueue);
    v5 = objc_msgSend(v4, "mainQueue");
    v6 = swift_allocObject(&unk_10078C960, 24, 7);
    swift_weakInit(v6 + 16, v0);
    v30 = sub_1001BEAF0;
    v31 = v6;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1000398D4;
    v29 = &unk_10078C9F0;
    v7 = _Block_copy(&aBlock);
    v8 = objc_msgSend(v3, "addObserverForName:object:queue:usingBlock:", UIApplicationSignificantTimeChangeNotification, 0, v5, v7, swift_release(v31).n128_f64[0]);
    _Block_release(v7);

    v9 = objc_msgSend(v2, "defaultCenter");
    v10 = kFIUIFitnessUnitPreferencesDidChangeNotification;
    v11 = objc_msgSend(v4, "mainQueue");
    v12 = swift_allocObject(&unk_10078C960, 24, 7);
    swift_weakInit(v12 + 16, v0);
    v30 = sub_100039BFC;
    v31 = v12;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1000398D4;
    v29 = &unk_10078CA18;
    v13 = _Block_copy(&aBlock);
    v14 = objc_msgSend(v9, "addObserverForName:object:queue:usingBlock:", v10, 0, v11, v13, swift_release(v31).n128_f64[0]);
    _Block_release(v13);

    v15 = objc_msgSend(v2, "defaultCenter");
    v16 = kFIMindfulnessSessionDataProviderDidUpdateNotification;
    v17 = objc_msgSend(v4, "mainQueue");
    v18 = swift_allocObject(&unk_10078C960, 24, 7);
    swift_weakInit(v18 + 16, v0);
    v19 = swift_allocObject(&unk_10078CA50, 32, 7);
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v25;
    v30 = sub_100039A80;
    v31 = v19;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1000398D4;
    v29 = &unk_10078CA68;
    v20 = _Block_copy(&aBlock);
    v21 = objc_msgSend(v15, "addObserverForName:object:queue:usingBlock:", v16, 0, v17, v20, swift_release(v31).n128_f64[0]);
    _Block_release(v20);

    v22 = sub_100047110(&qword_10082CEC0);
    v23 = swift_allocObject(v22, 128, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100624A40;
    *(_QWORD *)(v23 + 56) = swift_getObjectType(v8);
    *(_QWORD *)(v23 + 32) = v8;
    *(_QWORD *)(v23 + 88) = swift_getObjectType(v14);
    *(_QWORD *)(v23 + 64) = v14;
    *(_QWORD *)(v23 + 120) = swift_getObjectType(v21);
    *(_QWORD *)(v23 + 96) = v21;
    v24 = v0[7];
    v0[7] = v23;
    swift_bridgeObjectRelease(v24);
  }
}

void sub_100019DFC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void **aBlock;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void *v26;
  void (*v27)(uint64_t);
  uint64_t v28;

  if ((sub_10000AB48() & 1) == 0)
  {
    v1 = (void *)objc_opt_self(NSNotificationCenter);
    v2 = objc_msgSend(v1, "defaultCenter");
    v3 = (void *)objc_opt_self(NSOperationQueue);
    v4 = objc_msgSend(v3, "mainQueue");
    v5 = swift_allocObject(&unk_1007946E0, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v27 = sub_1002B86F4;
    v28 = v5;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_1000398D4;
    v26 = &unk_1007946F8;
    v6 = _Block_copy(&aBlock);
    v22 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", UIApplicationSignificantTimeChangeNotification, 0, v4, v6, swift_release(v28).n128_f64[0]);
    _Block_release(v6);

    v7 = objc_msgSend(v1, "defaultCenter");
    if (qword_10081D640 != -1)
      swift_once(&qword_10081D640, sub_10004CE14);
    v8 = (id)qword_100869F70;
    v9 = objc_msgSend(v3, "mainQueue");
    v10 = swift_allocObject(&unk_1007946E0, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v0);
    v27 = sub_1002B86FC;
    v28 = v10;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_1000398D4;
    v26 = &unk_100794720;
    v11 = _Block_copy(&aBlock);
    v12 = objc_msgSend(v7, "addObserverForName:object:queue:usingBlock:", v8, 0, v9, v11, swift_release(v28).n128_f64[0]);
    _Block_release(v11);

    v13 = objc_msgSend(v1, "defaultCenter");
    v14 = kFIUIFitnessUnitPreferencesDidChangeNotification;
    v15 = objc_msgSend(v3, "mainQueue");
    v16 = swift_allocObject(&unk_1007946E0, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, v0);
    v27 = sub_100039E84;
    v28 = v16;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_1000398D4;
    v26 = &unk_100794748;
    v17 = _Block_copy(&aBlock);
    v18 = objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", v14, 0, v15, v17, swift_release(v28).n128_f64[0]);
    _Block_release(v17);

    v19 = sub_100047110(&qword_10082CEC0);
    v20 = swift_allocObject(v19, 128, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100624A40;
    *(_QWORD *)(v20 + 56) = swift_getObjectType(v22);
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 88) = swift_getObjectType(v12);
    *(_QWORD *)(v20 + 64) = v12;
    *(_QWORD *)(v20 + 120) = swift_getObjectType(v18);
    *(_QWORD *)(v20 + 96) = v18;
    v21 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_observers);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_observers) = v20;
    swift_bridgeObjectRelease(v21);
  }
}

void sub_10001A1AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void **aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  void *v28;
  uint64_t v29;

  if ((sub_10000AB48() & 1) == 0)
  {
    v1 = (void *)objc_opt_self(NSNotificationCenter);
    v2 = objc_msgSend(v1, "defaultCenter");
    if (qword_10081DE28 != -1)
      swift_once(&qword_10081DE28, sub_10004E610);
    v3 = qword_10086AC40;
    v4 = (void *)objc_opt_self(NSOperationQueue);
    v5 = objc_msgSend(v4, "mainQueue");
    v6 = swift_allocObject(&unk_1007919E0, 24, 7);
    swift_weakInit(v6 + 16, v0);
    v28 = sub_10025DC7C;
    v29 = v6;
    aBlock = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_1000398D4;
    v27 = &unk_100791A48;
    v7 = _Block_copy(&aBlock);
    v23 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v3, 0, v5, v7, swift_release(v29).n128_f64[0]);
    _Block_release(v7);

    v8 = objc_msgSend(v1, "defaultCenter");
    if (qword_10081D640 != -1)
      swift_once(&qword_10081D640, sub_10004CE14);
    v9 = (id)qword_100869F70;
    v10 = objc_msgSend(v4, "mainQueue");
    v11 = swift_allocObject(&unk_1007919E0, 24, 7);
    swift_weakInit(v11 + 16, v0);
    v28 = sub_10025DCA0;
    v29 = v11;
    aBlock = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_1000398D4;
    v27 = &unk_100791A70;
    v12 = _Block_copy(&aBlock);
    v13 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", v9, 0, v10, v12, swift_release(v29).n128_f64[0]);
    _Block_release(v12);

    v14 = objc_msgSend(v1, "defaultCenter");
    v15 = kFIUIFitnessUnitPreferencesDidChangeNotification;
    v16 = objc_msgSend(v4, "mainQueue");
    v17 = swift_allocObject(&unk_1007919E0, 24, 7);
    swift_weakInit(v17 + 16, v0);
    v28 = sub_100039CD4;
    v29 = v17;
    aBlock = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_1000398D4;
    v27 = &unk_100791A98;
    v18 = _Block_copy(&aBlock);
    v19 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", v15, 0, v16, v18, swift_release(v29).n128_f64[0]);
    _Block_release(v18);

    v20 = sub_100047110(&qword_10082CEC0);
    v21 = swift_allocObject(v20, 128, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100624A40;
    *(_QWORD *)(v21 + 56) = swift_getObjectType(v23);
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 88) = swift_getObjectType(v13);
    *(_QWORD *)(v21 + 64) = v13;
    *(_QWORD *)(v21 + 120) = swift_getObjectType(v19);
    *(_QWORD *)(v21 + 96) = v19;
    v22 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 120) = v21;
    swift_bridgeObjectRelease(v22);
  }
}

uint64_t sub_10001A578()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___WODataLinkMonitor_delegate], 0);
  *(_QWORD *)&v0[OBJC_IVAR___WODataLinkMonitor_currentWorkoutState] = 2;
  *(_QWORD *)&v0[OBJC_IVAR___WODataLinkMonitor_workoutStateCancellable] = 0;
  v5 = OBJC_IVAR___WODataLinkMonitor_workoutStateUpdateWaiting;
  v6 = sub_100047110(&qword_10082F770);
  v7 = swift_allocObject(v6, 24, 7);
  *(_DWORD *)(v7 + 20) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_QWORD *)&v0[v5] = v7;
  v8 = OBJC_IVAR___WODataLinkMonitor_metricPlatterAnalytics;
  v9 = type metadata accessor for MetricPlatterAnalytics();
  v10 = (_QWORD *)swift_allocObject(v9, 48, 7);
  v10[2] = 0;
  v10[3] = 0;
  *(_QWORD *)&v0[v8] = v10;
  *(_QWORD *)&v0[OBJC_IVAR___WODataLinkMonitor_observers] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR___WODataLinkMonitor_failedToEndWorkoutRetryCountMax] = 5;
  v10[4] = 0;
  v10[5] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v0[OBJC_IVAR___WODataLinkMonitor_failedToEndWorkoutRetrySeconds] = 0x4008000000000000;
  v11 = v0;
  v12 = static WOLog.dataLink.getter(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Init'ing the DataLinkMonitor", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v16 = type metadata accessor for MetricsPublisher(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = MetricsPublisher.init()();
  *(_QWORD *)&v11[OBJC_IVAR___WODataLinkMonitor_publisher] = v17;
  v18 = type metadata accessor for DataLinkClient(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = swift_retain_n(v17, 2);
  *(_QWORD *)&v11[OBJC_IVAR___WODataLinkMonitor_client] = DataLinkClient.init(metricsPublisher:)(v19);

  v20 = (objc_class *)type metadata accessor for DataLinkMonitor();
  v40.receiver = v11;
  v40.super_class = v20;
  v21 = (char *)objc_msgSendSuper2(&v40, "init");
  v22 = MetricsPublisher.workoutStatePublisher.getter(v21);
  v23 = type metadata accessor for WorkoutStatePublisher(0);
  v24 = sub_1000083D8(&qword_10082F230, (uint64_t (*)(uint64_t))&type metadata accessor for WorkoutStatePublisher, (uint64_t)&protocol conformance descriptor for WorkoutStatePublisher);
  v25 = ObservableObject<>.objectWillChange.getter(v23, v24);
  swift_release(v22);
  v39 = v25;
  v26 = swift_allocObject(&unk_100797F98, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v21);
  v27 = type metadata accessor for ObservableObjectPublisher(0);
  v28 = Publisher<>.sink(receiveValue:)(sub_10035B7EC, v26, v27, &protocol witness table for ObservableObjectPublisher);
  swift_release(v26);
  swift_release(v39);
  v29 = *(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_workoutStateCancellable];
  *(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_workoutStateCancellable] = v28;
  swift_release(v29);
  v30 = OBJC_IVAR___WODataLinkMonitor_client;
  v31 = *(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_client];
  v32 = swift_allocObject(&unk_100797F98, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, v21);
  swift_retain(v31);
  swift_retain(v32);
  dispatch thunk of DataLinkClient.presenceDidChangeHandler.setter(sub_10035B7F4, v32);
  swift_release(v31);
  swift_release(v32);
  v33 = *(_QWORD *)&v21[v30];
  v34 = swift_allocObject(&unk_100797F98, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v21);
  swift_retain(v33);
  swift_retain(v34);
  dispatch thunk of DataLinkClient.notificationHandler.setter(sub_10035B7FC, v34);
  swift_release(v33);
  swift_release(v34);
  sub_10001C698();
  if (*(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_currentWorkoutState] >= 4uLL)
  {
    v39 = *(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_currentWorkoutState];
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DataLinkWorkoutState, &v39, &type metadata for DataLinkWorkoutState, &type metadata for Int);
    __break(1u);
  }
  else
  {
    sub_100005374(2, (*(_QWORD *)&v21[OBJC_IVAR___WODataLinkMonitor_currentWorkoutState] & 0xFLL) == 3);
    v35 = *(_QWORD *)&v21[v30];
    v36 = swift_retain(v35);
    dispatch thunk of DataLinkClient.activateLink()(v36);
    swift_release(v35);

    swift_release(v17);
    return (uint64_t)v21;
  }
  return result;
}

id sub_10001ADE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  Swift::String v31;
  Swift::String v32;
  _BYTE *v33;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v38;
  void *v39;
  id v40;
  NSString v41;
  unsigned int v42;
  id v43;
  NSString v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  id result;
  void *v51;
  id v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t (**v67)@<X0>(uint64_t@<X8>);
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t (**v76)(uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (**v88)@<X0>(uint64_t@<X8>);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(uint64_t, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (**v124)(uint64_t);
  char *v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  void (*v134)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  void (*v167)(uint64_t, char *, uint64_t);
  _QWORD *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  _BYTE *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  _OWORD v179[2];
  uint64_t aBlock[3];
  void *v181;
  void (*v182)();
  uint64_t v183;

  v162 = sub_100047110(&qword_100823018);
  v161 = *(_QWORD *)(v162 - 8);
  v0 = __chkstk_darwin(v162);
  v159 = (char *)&v149 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = v1;
  __chkstk_darwin(v0);
  v160 = (char *)&v149 - v2;
  v157 = sub_100047110(&qword_100822E88);
  v156 = *(_QWORD *)(v157 - 8);
  v3 = *(_QWORD *)(v156 + 64);
  v4 = __chkstk_darwin(v157);
  v154 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v155 = (char *)&v149 - v5;
  v166 = sub_100047110((uint64_t *)&unk_100836170);
  v168 = *(_QWORD **)(v166 - 8);
  v6 = v168[8];
  v7 = __chkstk_darwin(v166);
  v163 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v164 = (char *)&v149 - v9;
  v10 = __chkstk_darwin(v8);
  v165 = (char *)&v149 - v11;
  v12 = __chkstk_darwin(v10);
  v169 = (char *)&v149 - v13;
  v14 = __chkstk_darwin(v12);
  v172 = (char *)&v149 - v15;
  v16 = __chkstk_darwin(v14);
  v171 = (char *)&v149 - v17;
  __chkstk_darwin(v16);
  v170 = (char *)&v149 - v18;
  v167 = (void (*)(uint64_t, char *, uint64_t))sub_100047110((uint64_t *)&unk_100828370);
  v19 = __chkstk_darwin(v167);
  v21 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v177 = (char *)&v149 - v22;
  v23 = type metadata accessor for Logger(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v149 - v29;
  static Log.default.getter(v28);
  v31._countAndFlagsBits = 0xD000000000000065;
  v31._object = (void *)0x800000010068BFB0;
  v32._object = (void *)0x800000010068C040;
  v32._countAndFlagsBits = 0xD000000000000012;
  Logger.trace(file:function:)(v31, v32);
  v173 = *(char **)(v24 + 8);
  v174 = (char *)v23;
  ((void (*)(char *, uint64_t))v173)(v30, v23);
  v33 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundTaskAssertion()), "init");
  v34 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v35 = swift_allocObject(&unk_100789908, 24, 7);
  swift_unknownObjectWeakInit(v35 + 16, v33);
  v182 = sub_10016ADF0;
  v183 = v35;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10002D0F8;
  v181 = &unk_100789920;
  v36 = _Block_copy(aBlock);
  v37 = objc_msgSend(v34, "beginBackgroundTaskWithExpirationHandler:", v36, swift_release(v183).n128_f64[0]);
  _Block_release(v36);

  v38 = &v33[OBJC_IVAR___CHBackgroundTaskAssertion_identifier];
  *(_QWORD *)v38 = v37;
  v38[8] = 0;
  v33[OBJC_IVAR___CHBackgroundTaskAssertion_state] = 1;
  v176 = swift_allocObject(&unk_100789958, 24, 7);
  *(_QWORD *)(v176 + 16) = v33;
  v39 = (void *)objc_opt_self(NSUserDefaults);
  v175 = v33;
  v40 = objc_msgSend(v39, "standardUserDefaults");
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v40, "BOOLForKey:", v41);

  v43 = objc_msgSend(v39, "standardUserDefaults");
  v44 = String._bridgeToObjectiveC()();
  v45 = objc_msgSend(v43, "objectForKey:", v44);

  if (v45)
  {
    _bridgeAnyObjectToAny(_:)(v179, v45);
    swift_unknownObjectRelease(v45);
  }
  else
  {
    memset(v179, 0, sizeof(v179));
  }
  sub_100025D58((uint64_t)v179, (uint64_t)aBlock);
  v46 = (uint64_t)v177;
  if (v181)
  {
    v47 = type metadata accessor for Date(0);
    v48 = swift_dynamicCast(v46, aBlock, (char *)&type metadata for Any + 8, v47, 6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, v48 ^ 1u, 1, v47);
  }
  else
  {
    sub_10001BE90((uint64_t)aBlock, (uint64_t *)&unk_100828420);
    v49 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v46, 1, 1, v49);
  }
  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (result)
  {
    v51 = result;
    v52 = objc_msgSend(result, "fitnessMode");

    if (v52 == (id)2)
      v54 = v42;
    else
      v54 = 0;
    if (v54 == 1
      && (v55 = type metadata accessor for Date(0),
          v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v46, 1, v55),
          (_DWORD)v53 == 1))
    {
      v56 = swift_allocObject(&unk_100789980, 17, 7);
      *(_BYTE *)(v56 + 16) = 2;
      v152 = swift_allocObject(&unk_100789980, 17, 7);
      *(_BYTE *)(v152 + 16) = 2;
      v153 = swift_allocObject(&unk_100789980, 17, 7);
      *(_BYTE *)(v153 + 16) = 2;
      v57 = *(_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_contentAvailabilityClient + 24);
      v58 = *(_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_contentAvailabilityClient + 32);
      sub_100016804((_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_contentAvailabilityClient), v57);
      v59 = v155;
      dispatch thunk of ContentAvailabilityClientProtocol.queryContentAvailability()(v57, v58);
      v60 = v156;
      v61 = v154;
      v62 = v157;
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v154, v59, v157);
      v63 = *(unsigned __int8 *)(v60 + 80);
      v64 = (v63 + 16) & ~v63;
      v65 = (v3 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      v66 = swift_allocObject(&unk_1007899A8, v65 + 16, v63 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v66 + v64, v61, v62);
      v67 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v66 + v65);
      *v67 = sub_10016AE08;
      v67[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v56;
      v150 = v56;
      swift_retain(v56);
      v154 = (char *)&type metadata for () + 8;
      v68 = v171;
      Promise.init(asyncOperation:)(sub_10016AE1C, v66, (char *)&type metadata for () + 8);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v62);
      v69 = swift_allocObject(&unk_1007899D0, 32, 7);
      *(_QWORD *)(v69 + 16) = sub_100169DA8;
      *(_QWORD *)(v69 + 24) = 0;
      v70 = v168;
      v156 = v168[2];
      v71 = v172;
      v72 = v166;
      ((void (*)(char *, char *, uint64_t))v156)(v172, v68, v166);
      v73 = *((unsigned __int8 *)v70 + 80);
      v157 = v73 | 7;
      v151 = (v73 + 16) & ~v73;
      v173 = (char *)((v6 + v151 + 7) & 0xFFFFFFFFFFFFFFF8);
      v174 = v173 + 16;
      v74 = v173;
      v75 = swift_allocObject(&unk_1007899F8, v173 + 16, v73 | 7);
      v167 = (void (*)(uint64_t, char *, uint64_t))v70[4];
      v167(v75 + ((v73 + 16) & ~v73), v71, v72);
      v76 = (uint64_t (**)(uint64_t))&v74[v75];
      *v76 = sub_10010FFFC;
      v76[1] = (uint64_t (*)(uint64_t))v69;
      v77 = v154;
      Promise.init(asyncOperation:)(sub_100110010, v75, v154);
      v155 = (char *)v70[1];
      ((void (*)(char *, uint64_t))v155)(v68, v72);
      v78 = *(_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_privacyPreferenceClient + 24);
      v79 = *(_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_privacyPreferenceClient + 32);
      sub_100016804((_QWORD *)(v178 + OBJC_IVAR___CHFitnessAppBadgeAggregator_privacyPreferenceClient), v78);
      v80 = v160;
      dispatch thunk of PrivacyPreferenceClientProtocol.fetchNoticePrivacyPreference(ignoreCaches:)(0, v78, v79);
      v81 = v161;
      v82 = v159;
      v83 = v162;
      (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v159, v80, v162);
      v84 = *(unsigned __int8 *)(v81 + 80);
      v85 = (v84 + 16) & ~v84;
      v86 = (v158 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
      v87 = swift_allocObject(&unk_100789A20, v86 + 16, v84 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v87 + v85, v82, v83);
      v88 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v87 + v86);
      v89 = v152;
      *v88 = sub_10016AE3C;
      v88[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v89;
      swift_retain(v89);
      v90 = v172;
      Promise.init(asyncOperation:)(sub_10016AE50, v87, v77);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v83);
      v91 = swift_allocObject(&unk_100789A48, 32, 7);
      *(_QWORD *)(v91 + 16) = sub_10016A038;
      *(_QWORD *)(v91 + 24) = 0;
      v92 = v169;
      v93 = v90;
      v94 = (void (*)(uint64_t, char *, uint64_t))v156;
      ((void (*)(char *, char *, uint64_t))v156)(v169, v90, v72);
      v95 = v157;
      v96 = swift_allocObject(&unk_100789A70, v174, v157);
      v167(v96 + v151, v92, v72);
      v97 = &v173[v96];
      *(_QWORD *)v97 = sub_1001104C4;
      *((_QWORD *)v97 + 1) = v91;
      v98 = v171;
      v99 = v96;
      v100 = v154;
      Promise.init(asyncOperation:)(sub_100110010, v99, v154);
      ((void (*)(char *, uint64_t))v155)(v93, v72);
      v101 = v153;
      swift_retain(v153);
      Promise.init(asyncOperation:)(sub_10016AE70, v101, v100);
      v102 = sub_100047110(&qword_100823020);
      v103 = v168[9];
      v104 = (v73 + 32) & ~v73;
      v105 = swift_allocObject(v102, 3 * v103 + v104, v95);
      *(_OWORD *)(v105 + 16) = xmmword_100624A40;
      v106 = v105 + v104;
      v94(v106, v170, v72);
      v94(v106 + v103, v98, v72);
      v94(v106 + 2 * v103, v93, v72);
      aBlock[0] = v105;
      sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
      v108 = (void *)static OS_dispatch_queue.main.getter(v107);
      v109 = static PromiseConstants.defaultMaxConcurrentOperations.getter();
      v110 = sub_100047110(&qword_100823028);
      v111 = sub_100028384((unint64_t *)&qword_100823030, &qword_100823028, (uint64_t)&protocol conformance descriptor for [A]);
      v112 = v164;
      static Promise<>.parallel<A>(queue:maxConcurrent:_:)(v108, v109, aBlock, v110, v111);
      swift_bridgeObjectRelease(v105);

      v113 = swift_allocObject(&unk_1007897C8, 24, 7);
      swift_unknownObjectWeakInit(v113 + 16, v178);
      v114 = (_QWORD *)swift_allocObject(&unk_100789A98, 64, 7);
      v115 = v152;
      v116 = v150;
      v114[2] = v152;
      v114[3] = v116;
      v117 = v153;
      v114[4] = v153;
      v114[5] = v113;
      v118 = v176;
      v114[6] = sub_10004F7CC;
      v114[7] = v118;
      v119 = swift_allocObject(&unk_100789AC0, 32, 7);
      *(_QWORD *)(v119 + 16) = sub_10016AEBC;
      *(_QWORD *)(v119 + 24) = v114;
      v120 = swift_allocObject(&unk_100789AE8, 32, 7);
      *(_QWORD *)(v120 + 16) = sub_10016AECC;
      *(_QWORD *)(v120 + 24) = v119;
      v121 = v163;
      ((void (*)(char *, char *, uint64_t))v156)(v163, v112, v72);
      v122 = swift_allocObject(&unk_100789B10, v174, v157);
      v123 = v151;
      v167(v122 + v151, v121, v72);
      v124 = (uint64_t (**)(uint64_t))&v173[v122];
      *v124 = sub_10016AEE4;
      v124[1] = (uint64_t (*)(uint64_t))v120;
      swift_retain(v116);
      swift_retain(v115);
      swift_retain(v117);
      swift_retain(v118);
      v125 = v165;
      v126 = v154;
      Promise.init(asyncOperation:)(sub_10016AEF8, v122, v154);
      v127 = (void (*)(char *, uint64_t))v155;
      ((void (*)(char *, uint64_t))v155)(v112, v72);
      v128 = swift_allocObject(&unk_100789B38, 32, 7);
      *(_QWORD *)(v128 + 16) = sub_10004F7CC;
      *(_QWORD *)(v128 + 24) = v118;
      v129 = swift_allocObject(&unk_100789B60, 32, 7);
      *(_QWORD *)(v129 + 16) = sub_10016AF0C;
      *(_QWORD *)(v129 + 24) = v128;
      ((void (*)(char *, char *, uint64_t))v156)(v112, v125, v72);
      v130 = swift_allocObject(&unk_100789B88, v174, v157);
      v167(v130 + v123, v112, v72);
      v131 = &v173[v130];
      *(_QWORD *)v131 = sub_1001104C4;
      *((_QWORD *)v131 + 1) = v129;
      swift_retain(v118);
      v132 = v169;
      Promise.init(asyncOperation:)(sub_100110010, v130, v126);
      v127(v125, v72);
      v133 = v132;
      v134 = (void (*)(uint64_t (*)(uint64_t), uint64_t))Promise.operation.getter(v72);
      v136 = v135;
      v137 = swift_allocObject(&unk_100789BB0, 32, 7);
      *(_QWORD *)(v137 + 16) = 0;
      *(_QWORD *)(v137 + 24) = 0;
      v134(sub_100110028, v137);

      swift_release(v118);
      swift_release(v136);
      v138 = swift_release(v137);
      ((void (*)(char *, uint64_t, __n128))v127)(v133, v72, v138);
      v127(v172, v72);
      v127(v171, v72);
      v127(v170, v72);
      v46 = (uint64_t)v177;
      swift_release(v116);
      swift_release(v152);
      swift_release(v153);
    }
    else
    {
      static Log.default.getter(v53);
      v139 = sub_100031D7C(v46, (uint64_t)v21);
      v140 = Logger.logObject.getter(v139);
      v141 = static os_log_type_t.default.getter(v140);
      if (os_log_type_enabled(v140, v141))
      {
        v142 = swift_slowAlloc(24, -1);
        v143 = swift_slowAlloc(32, -1);
        aBlock[0] = v143;
        *(_DWORD *)v142 = 67109634;
        LODWORD(v179[0]) = v52 == (id)2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v179, (char *)v179 + 4, v142 + 4);
        *(_WORD *)(v142 + 8) = 1024;
        LODWORD(v179[0]) = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v179, (char *)v179 + 4, v142 + 10);
        *(_WORD *)(v142 + 14) = 2080;
        v144 = Optional.description.getter(v167);
        v146 = v145;
        *(_QWORD *)&v179[0] = sub_10003E8EC(v144, v145, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v179, (char *)v179 + 8, v142 + 16);
        swift_bridgeObjectRelease(v146);
        sub_10001BE90((uint64_t)v21, (uint64_t *)&unk_100828370);
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "FitnessAppBadgeAggregator: not badging for Amelia\nisStandalonePhone: %{BOOL}d\nhasCompletedOnboardingInSydneyA: %{BOOL}d\nlastIntroSheetViewDate: %s", (uint8_t *)v142, 0x18u);
        swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v143, -1, -1);
        swift_slowDealloc(v142, -1, -1);
      }
      else
      {
        sub_10001BE90((uint64_t)v21, (uint64_t *)&unk_100828370);
      }

      ((void (*)(char *, char *))v173)(v27, v174);
      v148 = v175;
      v147 = v176;
      swift_retain(v176);
      sub_10000A9F0(0, sub_10004F7CC, v147);

      swift_release_n(v147, 2);
    }
    return (id)sub_10001BE90(v46, (uint64_t *)&unk_100828370);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001BE90(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100047110(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10001BECC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void **aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void *v30;
  void (*v31)(uint64_t);
  uint64_t v32;

  if ((sub_10000AB48() & 1) == 0)
  {
    v1 = (void *)objc_opt_self(NSNotificationCenter);
    v2 = objc_msgSend(v1, "defaultCenter");
    v3 = (void *)objc_opt_self(NSOperationQueue);
    v4 = objc_msgSend(v3, "mainQueue");
    v5 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v31 = sub_10004E44C;
    v32 = v5;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_1000398D4;
    v30 = &unk_10078F578;
    v6 = _Block_copy(&aBlock);
    v26 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", UIApplicationDidBecomeActiveNotification, 0, v4, v6, swift_release(v32).n128_f64[0]);
    _Block_release(v6);

    v7 = objc_msgSend(v1, "defaultCenter");
    v8 = objc_msgSend(v3, "mainQueue");
    v9 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16, v0);
    v31 = sub_10021862C;
    v32 = v9;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_1000398D4;
    v30 = &unk_10078F5A0;
    v10 = _Block_copy(&aBlock);
    v11 = objc_msgSend(v7, "addObserverForName:object:queue:usingBlock:", UIApplicationDidEnterBackgroundNotification, 0, v8, v10, swift_release(v32).n128_f64[0]);
    _Block_release(v10);

    v12 = objc_msgSend(v1, "defaultCenter");
    v13 = objc_msgSend(v3, "mainQueue");
    v14 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v14 + 16, v0);
    v31 = sub_100218634;
    v32 = v14;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_1000398D4;
    v30 = &unk_10078F5C8;
    v15 = _Block_copy(&aBlock);
    v16 = objc_msgSend(v12, "addObserverForName:object:queue:usingBlock:", UIApplicationSignificantTimeChangeNotification, 0, v13, v15, swift_release(v32).n128_f64[0]);
    _Block_release(v15);

    v17 = objc_msgSend(v1, "defaultCenter");
    if (qword_10081D640 != -1)
      swift_once(&qword_10081D640, sub_10004CE14);
    v18 = (id)qword_100869F70;
    v19 = objc_msgSend(v3, "mainQueue");
    v20 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v0);
    v31 = sub_10021863C;
    v32 = v20;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_1000398D4;
    v30 = &unk_10078F5F0;
    v21 = _Block_copy(&aBlock);
    v22 = objc_msgSend(v17, "addObserverForName:object:queue:usingBlock:", v18, 0, v19, v21, swift_release(v32).n128_f64[0]);
    _Block_release(v21);

    v23 = sub_100047110(&qword_10082CEC0);
    v24 = swift_allocObject(v23, 160, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100624D00;
    *(_QWORD *)(v24 + 56) = swift_getObjectType(v26);
    *(_QWORD *)(v24 + 32) = v26;
    *(_QWORD *)(v24 + 88) = swift_getObjectType(v11);
    *(_QWORD *)(v24 + 64) = v11;
    *(_QWORD *)(v24 + 120) = swift_getObjectType(v16);
    *(_QWORD *)(v24 + 96) = v16;
    *(_QWORD *)(v24 + 152) = swift_getObjectType(v22);
    *(_QWORD *)(v24 + 128) = v22;
    v25 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_observers);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_observers) = v24;
    swift_bridgeObjectRelease(v25);
  }
}

void sub_10001C378()
{
  char *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  double v22;
  id v23;
  uint64_t v24;
  void *v25;
  Class isa;

  swift_getObjectType(v0);
  v1 = objc_msgSend(v0, "contentView");
  v2 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp22CatalogTipActivityTile_catalogTipView];
  objc_msgSend(v1, "addSubview:", v2);

  v25 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100047110((uint64_t *)&unk_100828340);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100623750;
  v5 = objc_msgSend(v2, "topAnchor");
  v6 = objc_msgSend(v0, "contentView");
  v7 = objc_msgSend(v6, "topAnchor");

  v8 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v7, sub_100032C24());
  *(_QWORD *)(v4 + 32) = v8;
  v9 = objc_msgSend(v2, "leadingAnchor");
  v10 = objc_msgSend(v0, "contentView");
  v11 = objc_msgSend(v10, "leadingAnchor");

  sub_100032C24();
  v13 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v11, v12);

  *(_QWORD *)(v4 + 40) = v13;
  v14 = objc_msgSend(v2, "trailingAnchor");
  v15 = objc_msgSend(v0, "contentView");
  v16 = objc_msgSend(v15, "trailingAnchor");

  sub_100032C24();
  v18 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v16, -v17);

  *(_QWORD *)(v4 + 48) = v18;
  v19 = objc_msgSend(v2, "bottomAnchor");
  v20 = objc_msgSend(v0, "contentView");
  v21 = objc_msgSend(v20, "bottomAnchor");

  sub_100032C24();
  v23 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v21, -v22);

  *(_QWORD *)(v4 + 56) = v23;
  specialized Array._endMutation()(v24);
  sub_100039898();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

uint64_t sub_10001C698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _QWORD, uint64_t);
  void (*v7)(_BYTE *, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v25[24];
  _OWORD v26[2];

  v1 = type metadata accessor for DataLinkCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10081D6B8 != -1)
    swift_once(&qword_10081D6B8, sub_10004EB14);
  v5 = qword_10086A018;
  v6 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104);
  v6(v4, enum case for DataLinkCommand.resume(_:), v1);
  sub_10001CB30(v5, (uint64_t)v4, v26);
  v7 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v7(v4, v1);
  v8 = (_QWORD *)(v0 + OBJC_IVAR___WODataLinkMonitor_observers);
  swift_beginAccess(v0 + OBJC_IVAR___WODataLinkMonitor_observers, v25, 33, 0);
  v9 = (_QWORD *)*v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  *v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_10001CA24(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = sub_10001CA24((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v12 + 1;
  sub_100038FD4(v26, &v9[4 * v12 + 4]);
  swift_endAccess(v25);
  if (qword_10081D6C8 != -1)
    swift_once(&qword_10081D6C8, sub_10004EF98);
  v13 = qword_10086A038;
  v6(v4, enum case for DataLinkCommand.pause(_:), v1);
  sub_10001CB30(v13, (uint64_t)v4, v26);
  v7(v4, v1);
  swift_beginAccess(v8, v25, 33, 0);
  v14 = (_QWORD *)*v8;
  v15 = swift_isUniquelyReferenced_nonNull_native(*v8);
  *v8 = v14;
  if ((v15 & 1) == 0)
  {
    v14 = sub_10001CA24(0, v14[2] + 1, 1, v14);
    *v8 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = sub_10001CA24((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *v8 = v14;
  }
  v14[2] = v17 + 1;
  sub_100038FD4(v26, &v14[4 * v17 + 4]);
  swift_endAccess(v25);
  if (qword_10081D6D8 != -1)
    swift_once(&qword_10081D6D8, sub_10004F1B8);
  v18 = qword_10086A058;
  v6(v4, enum case for DataLinkCommand.markSegment(_:), v1);
  sub_10001CB30(v18, (uint64_t)v4, v26);
  v7(v4, v1);
  swift_beginAccess(v8, v25, 33, 0);
  v19 = (_QWORD *)*v8;
  v20 = swift_isUniquelyReferenced_nonNull_native(*v8);
  *v8 = v19;
  if ((v20 & 1) == 0)
  {
    v19 = sub_10001CA24(0, v19[2] + 1, 1, v19);
    *v8 = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    v19 = sub_10001CA24((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    *v8 = v19;
  }
  v19[2] = v22 + 1;
  sub_100038FD4(v26, &v19[4 * v22 + 4]);
  return swift_endAccess(v25);
}

_QWORD *sub_10001CA24(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_10082CEC0);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004CA14(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001CB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v20;

  v4 = v3;
  v8 = type metadata accessor for DataLinkCommand(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v12 = swift_allocObject(&unk_100797F98, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_100797FC0, v14 + v10, v13 | 7);
  *(_QWORD *)(v15 + 16) = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_10035B6F8;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000398D4;
  aBlock[3] = &unk_100797FD8;
  v16 = _Block_copy(aBlock);
  v17 = objc_msgSend(v11, "addObserverForName:object:queue:usingBlock:", a1, 0, 0, v16, swift_release(v20).n128_f64[0]);
  _Block_release(v16);

  result = swift_getObjectType(v17);
  a3[3] = result;
  *a3 = v17;
  return result;
}

char *sub_10001CCE4(void *a1)
{
  _BYTE *v1;
  char *v3;
  __n128 v4;
  void *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void ***v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  objc_class *v18;
  char *v19;
  NSString v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v52;
  uint64_t v53;
  void **aBlock;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  objc_super v60;

  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_allHistoryItems] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_stackHistoryItems] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_historyTypeCounts] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_activityTypeCounts] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_allMindfulnessSessions] = _swiftEmptyArrayStorage;
  v1[OBJC_IVAR___CHHistoryDataProvider_hasInitialWorkouts] = 0;
  v1[OBJC_IVAR___CHHistoryDataProvider_hasInitialMindfulnessSessions] = 0;
  v1[OBJC_IVAR___CHHistoryDataProvider_shouldForceReload] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___CHHistoryDataProvider_queue] = 0;
  type metadata accessor for Dependencies(0);
  v57 = (void *)type metadata accessor for DefaultWheelchairStatus(0);
  v58 = &protocol witness table for DefaultWheelchairStatus;
  sub_10004C480(&aBlock);
  v3 = v1;
  DefaultWheelchairStatus.init()();
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v5 = (void *)static OS_dispatch_queue.main.getter(v4);
  v53 = static Dependencies.browsing(wheelchairStatus:queue:)(&aBlock, v5);

  _s10FitnessApp24HistoryViewActionContextVwxx_0(&aBlock);
  v6 = sub_100047110((uint64_t *)&unk_1008361E0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&aBlock, 0, 0, v6);
  v7 = aBlock;
  v8 = v55;
  v9 = (void ***)&v3[OBJC_IVAR___CHHistoryDataProvider_eventHub];
  *v9 = aBlock;
  v9[1] = (void **)v8;
  v10 = type metadata accessor for SubscriptionToken(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = swift_unknownObjectRetain(v7);
  *(_QWORD *)&v3[OBJC_IVAR___CHHistoryDataProvider_subscriptionToken] = SubscriptionToken.init(eventHub:)(v11, v8);
  *(_QWORD *)&v3[OBJC_IVAR___CHHistoryDataProvider_healthStore] = a1;
  v12 = objc_allocWithZone((Class)CHWorkoutDataProvider);
  v13 = a1;
  v14 = v12;
  v15 = v13;
  v52 = v13;
  v16 = objc_msgSend(v14, "initWithHealthStore:");
  *(_QWORD *)&v3[OBJC_IVAR___CHHistoryDataProvider_workoutDataProvider] = v16;
  v17 = objc_msgSend(objc_allocWithZone((Class)FIMindfulnessSessionDataProvider), "initWithHealthStore:", v15);
  *(_QWORD *)&v3[OBJC_IVAR___CHHistoryDataProvider_mindfulnessSessionDataProvider] = v17;

  v18 = (objc_class *)type metadata accessor for HistoryDataProvider();
  v60.receiver = v3;
  v60.super_class = v18;
  v19 = (char *)objc_msgSendSuper2(&v60, "init");
  v20 = String._bridgeToObjectiveC()();
  v21 = (id)HKCreateSerialDispatchQueue(v19, v20);

  v22 = *(void **)&v19[OBJC_IVAR___CHHistoryDataProvider_queue];
  *(_QWORD *)&v19[OBJC_IVAR___CHHistoryDataProvider_queue] = v21;

  v23 = *(_QWORD *)&v19[OBJC_IVAR___CHHistoryDataProvider_eventHub + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v19[OBJC_IVAR___CHHistoryDataProvider_eventHub]);
  v25 = type metadata accessor for PlaylistsUpdated(0);
  v26 = *(_QWORD *)&v19[OBJC_IVAR___CHHistoryDataProvider_subscriptionToken];
  v27 = swift_allocObject(&unk_10079CD00, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16, v19);
  swift_retain(v27);
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(&aBlock, v25, v26, sub_1003C5D20, v27, v25, &protocol witness table for PlaylistsUpdated, ObjectType, v23);
  swift_release(v27);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&aBlock);
  swift_release(v27);
  v28 = swift_allocObject(&unk_10079CD00, 24, 7);
  swift_unknownObjectWeakInit(v28 + 16, v19);
  v29 = OBJC_IVAR___CHHistoryDataProvider_workoutDataProvider;
  v30 = *(void **)&v19[OBJC_IVAR___CHHistoryDataProvider_workoutDataProvider];
  v58 = sub_10004F22C;
  v59 = v28;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_10002D0F8;
  v57 = &unk_10079CD18;
  v31 = _Block_copy(&aBlock);
  v32 = v59;
  v33 = v30;
  swift_retain(v28);
  objc_msgSend(v33, "addUpdateHandler:", v31, swift_release(v32).n128_f64[0]);
  _Block_release(v31);

  v34 = *(void **)&v19[v29];
  v58 = sub_10004F22C;
  v59 = v28;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_10002D0F8;
  v57 = &unk_10079CD40;
  v35 = _Block_copy(&aBlock);
  v36 = v59;
  swift_retain(v28);
  v37 = v34;
  objc_msgSend(v37, "addAnimatedUpdateHandler:", v35, swift_release(v36).n128_f64[0]);
  _Block_release(v35);

  v38 = (void *)objc_opt_self(NSNotificationCenter);
  v39 = objc_msgSend(v38, "defaultCenter");
  v40 = kFIMindfulnessSessionDataProviderDidUpdateNotification;
  v41 = (void *)objc_opt_self(NSOperationQueue);
  v42 = objc_msgSend(v41, "mainQueue");
  v43 = swift_allocObject(&unk_10079CD00, 24, 7);
  swift_unknownObjectWeakInit(v43 + 16, v19);
  v58 = sub_10003A014;
  v59 = v43;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_1000398D4;
  v57 = &unk_10079CD68;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v39, "addObserverForName:object:queue:usingBlock:", v40, 0, v42, v44, swift_release(v59).n128_f64[0]);
  _Block_release(v44);
  swift_unknownObjectRelease(v45);

  v46 = objc_msgSend(v38, "defaultCenter");
  v47 = objc_msgSend(v41, "mainQueue");
  v48 = swift_allocObject(&unk_10079CD00, 24, 7);
  swift_unknownObjectWeakInit(v48 + 16, v19);
  v58 = sub_1003C5D28;
  v59 = v48;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_1000398D4;
  v57 = &unk_10079CD90;
  v49 = _Block_copy(&aBlock);
  v50 = objc_msgSend(v46, "addObserverForName:object:queue:usingBlock:", UIApplicationWillEnterForegroundNotification, 0, v47, v49, swift_release(v59).n128_f64[0]);

  _Block_release(v49);
  swift_release(v53);
  swift_release(v28);
  swift_unknownObjectRelease(v50);

  return v19;
}

void sub_10001D350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability);
  sub_10001D718();
  if (qword_10081E0B0 != -1)
    v11 = swift_once(&qword_10081E0B0, sub_10004F61C);
  if ((byte_10083D1A0 & 1) == 0)
  {
    if (qword_10081E0B8 != -1)
      v11 = swift_once(&qword_10081E0B8, sub_10004EAD0);
    if ((byte_10083D1A1 & 1) == 0)
    {
      v32 = (id)objc_opt_self(NSUserDefaults);
      v12 = objc_msgSend(v32, "standardUserDefaults");
      v13 = String._bridgeToObjectiveC()();
      v33 = v3;
      v14 = v13;
      v15 = objc_msgSend(v12, "integerForKey:", v13);

      v3 = v33;
      if ((unint64_t)v15 <= 3 && *(id *)(v0 + v9) != v15)
      {
        v16 = objc_msgSend(v32, "standardUserDefaults");
        v17 = *(_QWORD *)(v0 + v9);
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v16, "setInteger:forKey:", v17, v18);

        v3 = v33;
      }
    }
  }
  if (*(_QWORD *)(v0 + v9) != v10)
  {
    v19 = static os_log_type_t.default.getter(v11);
    v20 = (void *)HKLogActivity;
    v21 = sub_100047110((uint64_t *)&unk_100827460);
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v22 + 56) = &type metadata for Int;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v22 + 32) = v10;
    v23 = *(_QWORD *)(v1 + v9);
    *(_QWORD *)(v22 + 96) = &type metadata for Int;
    *(_QWORD *)(v22 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v22 + 72) = v23;
    v24 = v20;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v24, "TrendsAvailabilityManager - availability changed from %d->%d", (_DWORD)v32, v33);

    swift_bridgeObjectRelease(v22);
    sub_10002FB54();
    v25 = (void *)static OS_dispatch_queue.main.getter();
    v26 = swift_allocObject(&unk_1007A38C0, 24, 7);
    swift_unknownObjectWeakInit(v26 + 16, v1);
    aBlock[4] = sub_1004AD7D8;
    v37 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_1007A38D8;
    v27 = _Block_copy(aBlock);
    v28 = swift_release(v37);
    static DispatchQoS.unspecified.getter(v28);
    aBlock[0] = _swiftEmptyArrayStorage;
    v29 = sub_10002FAC0();
    v30 = sub_100047110(&qword_100828C80);
    v31 = sub_10002FB08();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v2, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
  }
}

void sub_10001D718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void (*v47)(char *);
  void (*v48)(char *, uint64_t);
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  id v100;

  v99 = type metadata accessor for DateInterval(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v98 = (char *)&v87 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110((uint64_t *)&unk_100828370);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v87 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v87 - v16;
  v18 = __chkstk_darwin(v15);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v25 = (char *)&v87 - v24;
  if (qword_10081E0B0 != -1)
  {
    v93 = v22;
    v94 = v21;
    v92 = v23;
    v20 = swift_once(&qword_10081E0B0, sub_10004F61C);
    v23 = v92;
    v22 = v93;
    v21 = v94;
  }
  if ((byte_10083D1A0 & 1) != 0)
    goto LABEL_7;
  if (qword_10081E0B8 != -1)
  {
    v93 = v22;
    v94 = v21;
    v92 = v23;
    v20 = swift_once(&qword_10081E0B8, sub_10004EAD0);
    v23 = v92;
    v22 = v93;
    v21 = v94;
  }
  if ((byte_10083D1A1 & 1) != 0)
  {
LABEL_7:
    v26 = static os_log_type_t.default.getter(v20);
    v27 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "TrendsAvailabilityManager - shouldBypassAvailabilityCheck is true", 65, 2, _swiftEmptyArrayStorage);

    v28 = OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability;
    v29 = 3;
LABEL_8:
    *(_QWORD *)(v0 + v28) = v29;
    return;
  }
  v92 = v23;
  v93 = v22;
  v94 = v21;
  v96 = v25;
  v30 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_healthStore);
  v31 = FIExperienceTypeWithHealthStore(v30);
  if (v31 != 1)
  {
    v44 = static os_log_type_t.default.getter(v31);
    v45 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "TrendsAvailabilityManager - unavailable due experience type", 59, 2, _swiftEmptyArrayStorage);

    v28 = OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability;
    v29 = 1;
    goto LABEL_8;
  }
  v95 = v13;
  v90 = v12;
  v91 = v0;
  v89 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_dataProvider);
  v32 = *(id *)(v89 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache);
  v33 = objc_msgSend(v32, "activitySummaryForCacheIndex:", objc_msgSend(v32, "latestActivitySummaryIndex"));

  if (!v33)
  {
    v100 = 0;
    v34 = objc_msgSend(v30, "activityMoveModeWithError:", &v100);
    v35 = v100;
    if (!v34)
    {
      v58 = v100;
      v59 = _convertNSErrorToError(_:)(v35);

      swift_willThrow();
      v60 = swift_errorRelease(v59);
      v61 = static os_log_type_t.default.getter(v60);
      v62 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "TrendsAvailabilityManager - activityMoveMode not available", 58, 2, _swiftEmptyArrayStorage);

      return;
    }
    v33 = v34;
    v36 = v100;
  }
  v37 = objc_msgSend(v33, "activityMoveMode");

  v39 = v91;
  v40 = v95;
  v41 = v96;
  if (v37 == (id)2)
  {
    v42 = static os_log_type_t.default.getter(v38);
    v43 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "TrendsAvailabilityManager - unavailable due to move mode", 56, 2, _swiftEmptyArrayStorage);

    *(_QWORD *)(v39 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability) = 1;
    return;
  }
  Date.init()(v38);
  if (qword_10081D558 != -1)
    swift_once(&qword_10081D558, sub_100006F7C);
  v46 = type metadata accessor for Calendar(0);
  sub_10003CE9C(v46, (uint64_t)qword_100869D40);
  v47 = *(void (**)(char *))(v3 + 104);
  LODWORD(v88) = enum case for Calendar.Component.day(_:);
  v47(v5);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v5, -365, v41, 0);
  v48 = *(void (**)(char *, uint64_t))(v3 + 8);
  v48(v5, v2);
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v50 = v90;
  if (v49(v11, 1, v90) == 1)
  {
    v9 = v11;
    v51 = v50;
    v52 = v95;
LABEL_22:
    v55 = sub_10001BE90((uint64_t)v9, (uint64_t *)&unk_100828370);
    v56 = static os_log_type_t.default.getter(v55);
    v57 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "TrendsAvailabilityManager - failed to calculate date for last year/90 days", 74, 2, _swiftEmptyArrayStorage);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v96, v51);
    return;
  }
  v53 = v11;
  v54 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 32);
  v54(v94, v53, v50);
  ((void (*)(char *, _QWORD, uint64_t))v47)(v5, v88, v2);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v5, -90, v96, 0);
  v48(v5, v2);
  v51 = v50;
  if (v49(v9, 1, v50) == 1)
  {
    v52 = v95;
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v50);
    goto LABEL_22;
  }
  v63 = v93;
  v54(v93, v9, v50);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  v64(v17, v94, v50);
  v65 = v92;
  v66 = v96;
  v64(v92, (uint64_t)v96, v51);
  v67 = v98;
  DateInterval.init(start:end:)(v17, v65);
  v88 = sub_100048630();
  v68 = *(void (**)(char *, uint64_t))(v97 + 8);
  v69 = v99;
  v68(v67, v99);
  v64(v17, v63, v51);
  v64(v65, (uint64_t)v66, v51);
  v70 = v17;
  v71 = v88;
  DateInterval.init(start:end:)(v70, v65);
  v72 = sub_100048630();
  v68(v67, v69);
  v73 = sub_1000D3E9C();
  v74 = v73;
  v75 = v95;
  if (v71 < 180 || v72 < 45)
  {
    v78 = static os_log_type_t.default.getter(v73);
    v79 = (void *)HKLogActivity;
    v80 = sub_100047110((uint64_t *)&unk_100827460);
    v81 = v75;
    v82 = v51;
    v83 = swift_allocObject(v80, 112, 7);
    *(_OWORD *)(v83 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v83 + 56) = &type metadata for Int;
    *(_QWORD *)(v83 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v83 + 32) = v71;
    *(_QWORD *)(v83 + 96) = &type metadata for Int;
    *(_QWORD *)(v83 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v83 + 72) = v72;
    v84 = v79;
    os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v84, "TrendsAvailabilityManager - more data required yearSummaryCount=%d ninetyDaySummaryCount=%d", v87, v88);

    swift_bridgeObjectRelease(v83);
    v85 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v85(v93, v82);
    v85(v94, v82);
    v85((uint64_t)v66, v82);
    v77 = OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability;
    if (!v74)
    {
      v86 = 2;
      goto LABEL_30;
    }
  }
  else
  {
    v76 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v76(v93, v51);
    v76(v94, v51);
    v76((uint64_t)v66, v51);
    v77 = OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability;
  }
  v86 = 3;
LABEL_30:
  *(_QWORD *)(v91 + v77) = v86;
}

void sub_10001E02C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  Swift::Int v22;
  id v23;
  char *v24;
  CHWorkoutDetailHeartRateTableViewCell *v25;
  id v26;
  unint64_t v27;
  unsigned __int8 *cellInset;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  CHWorkoutDetailHeartRateTableViewCell *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  uint64_t v39;
  CHWorkoutDetailHeartRateTableViewCell *v40;
  CHWorkoutDetailHeartRateTableViewCell *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  CHWorkoutDetailHeartRateTableViewCell *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __n128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  CHWorkoutDetailHeartRateTableViewCell *v66;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)((char *)v0
                 + OBJC_IVAR____TtC10FitnessApp36ActivitySharingHighlightDataProvider_friendListSectionManager);
  if (objc_msgSend(v11, "hasInitializedFriendData", v8))
  {
    v12 = objc_msgSend(v11, "allFriends");
    if (v12)
    {
      v13 = v12;
      v61 = v7;
      v62 = v6;
      v63 = v2;
      v14 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
      v15 = sub_10001E6E4((unint64_t *)&qword_10082E5A0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
      v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15);

      if ((v16 & 0xC000000000000001) != 0)
      {
        v17 = &_swiftEmptySetSingleton;
        v66 = (CHWorkoutDetailHeartRateTableViewCell *)&_swiftEmptySetSingleton;
        if (v16 < 0)
          v18 = v16;
        else
          v18 = v16 & 0xFFFFFFFFFFFFFF8;
        v19 = __CocoaSet.makeIterator()(v18);
        v20 = __CocoaSet.Iterator.next()(v19);
        if (v20)
        {
          v21 = &selRef_setRightBarButtonItems_animated_;
          v60 = v10;
          do
          {
            v64 = v20;
            swift_dynamicCast(&v65, &v64, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
            v23 = v65;
            if ((objc_msgSend(v65, "isMe") & 1) == 0
              && objc_msgSend(v23, v21[132])
              && (objc_msgSend(v23, "isActivityDataCurrentlyVisibleToMe") & 1) != 0)
            {
              v24 = v5;
              v26 = v65;
              v25 = v66;
              v27 = *(_QWORD *)v66->cellPadding;
              if (*(_QWORD *)v66->cellInset <= v27)
              {
                sub_10014337C(v27 + 1);
                v25 = v66;
              }
              v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)v25[1].heartRateController);
              cellInset = v25[1].cellInset;
              v29 = -1 << LOBYTE(v25[1].super.super.super.super.isa);
              v30 = v22 & ~v29;
              v31 = v30 >> 6;
              if (((-1 << v30) & ~*(_QWORD *)&v25[1].cellInset[8 * (v30 >> 6)]) != 0)
              {
                v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)&v25[1].cellInset[8 * (v30 >> 6)])) | v30 & 0x7FFFFFFFFFFFFFC0;
              }
              else
              {
                v33 = 0;
                v34 = (unint64_t)(63 - v29) >> 6;
                do
                {
                  if (++v31 == v34 && (v33 & 1) != 0)
                  {
                    __break(1u);
                    swift_release(v66);
                    __break(1u);
                    return;
                  }
                  v35 = v31 == v34;
                  if (v31 == v34)
                    v31 = 0;
                  v33 |= v35;
                  v36 = *(_QWORD *)&cellInset[8 * v31];
                }
                while (v36 == -1);
                v32 = __clz(__rbit64(~v36)) + (v31 << 6);
              }
              *(_QWORD *)&cellInset[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
              *(_QWORD *)(*(_QWORD *)v25[1].cellPadding + 8 * v32) = v26;
              ++*(_QWORD *)v25->cellPadding;
              v5 = v24;
              v10 = v60;
              v21 = &selRef_setRightBarButtonItems_animated_;
            }
            else
            {

            }
            v20 = __CocoaSet.Iterator.next()(v22);
          }
          while (v20);
          v17 = v66;
        }
        swift_release(v19);
      }
      else
      {
        v17 = (void *)sub_1002D09A8(v16);
      }
      v2 = v63;
      swift_retain(v1);
      sub_10001E75C((uint64_t)v17, v1);
      v37 = v38;
      swift_release(v1);
      swift_release(v17);
      v7 = v61;
      v6 = v62;
    }
    else
    {
      v37 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
    }
    v39 = Date.init()(v12);
    __chkstk_darwin(v39);
    *(&v60 - 2) = v10;
    sub_10001E4E4((uint64_t (*)(char *))sub_1002CEB54, (uint64_t)(&v60 - 4), v37);
    v41 = v40;
    v66 = v40;
    swift_bridgeObjectRetain(v40);
    sub_10001EA84(&v66);
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    v49 = v66;
    if (*(_QWORD *)v66->cellPadding >= 0xAuLL)
      v50 = 10;
    else
      v50 = *(_QWORD *)v66->cellPadding;
    v51 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ActivitySharingHighlight(0) - 8) + 80);
    v52 = (char *)v49 + ((v51 + 32) & ~v51);
    v53 = (2 * v50) | 1;
    v54 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v5, 1, 1, v54);
    type metadata accessor for MainActor(0);
    swift_retain(v1);
    swift_retain(v49);
    v56 = static MainActor.shared.getter(v55);
    v57 = (_QWORD *)swift_allocObject(&unk_100795118, 80, 7);
    v57[2] = v56;
    v57[3] = &protocol witness table for MainActor;
    v57[4] = v49;
    v57[5] = v52;
    v57[6] = 0;
    v57[7] = v53;
    v57[8] = v1;
    v57[9] = v2;
    v58 = sub_10020D9C0((uint64_t)v5, (uint64_t)&unk_10082D438, (uint64_t)v57);
    swift_release(v49);
    v59 = swift_release(v58);
    (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v59);
  }
}

void sub_10001E4E4(uint64_t (*a1)(char *), uint64_t a2, CHWorkoutDetailHeartRateTableViewCell *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD v33[2];
  CHWorkoutDetailHeartRateTableViewCell *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v7 = type metadata accessor for ActivitySharingHighlight(0);
  v37 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v36 = (uint64_t)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v18 = (char *)v33 - v17;
  v38 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)a3->cellPadding;
  if (v35)
  {
    v19 = 0;
    v20 = _swiftEmptyArrayStorage;
    v33[1] = a2;
    v34 = a3;
    v33[0] = a1;
    while (v19 < *(_QWORD *)a3->cellPadding)
    {
      v21 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      v22 = *(_QWORD *)(v37 + 72);
      sub_1000DA808((uint64_t)a3 + v21 + v22 * v19, (uint64_t)v18);
      v23 = a1(v18);
      if (v3)
      {
        sub_1000DA1C0((uint64_t)v18);
        swift_release(v20);
        swift_bridgeObjectRelease(a3, v26, v27, v28, v29, v30, v31, v32);
        return;
      }
      if ((v23 & 1) != 0)
      {
        sub_100047C88((uint64_t)v18, v36, type metadata accessor for ActivitySharingHighlight);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
          sub_100121A60(0, v20[2] + 1, 1);
        v20 = v38;
        v25 = v38[2];
        v24 = v38[3];
        if (v25 >= v24 >> 1)
        {
          sub_100121A60(v24 > 1, v25 + 1, 1);
          v20 = v38;
        }
        v20[2] = v25 + 1;
        sub_100047C88(v36, (uint64_t)v20 + v21 + v25 * v22, type metadata accessor for ActivitySharingHighlight);
        a3 = v34;
        a1 = (uint64_t (*)(char *))v33[0];
      }
      else
      {
        sub_1000DA1C0((uint64_t)v18);
      }
      if (v35 == ++v19)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(a3, v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t sub_10001E6E4(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10001E724(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001E724(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10001E75C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  CHWorkoutDetailHeartRateTableViewCell *v36;
  void *v37;
  _QWORD v38[5];
  CHWorkoutDetailHeartRateTableViewCell *v39;

  v3 = v2;
  v5 = a1;
  v39 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
    v9 = sub_10001E6E4((unint64_t *)&qword_10082E5A0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
    v10 = Set.Iterator.init(_cocoa:)(v38, v7, v8, v9);
    v5 = v38[0];
    v35 = v38[1];
    v11 = v38[2];
    v12 = v38[3];
    v13 = v38[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v17 = (unint64_t)(v11 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v18 = (CHWorkoutDetailHeartRateTableViewCell *)__CocoaSet.Iterator.next()(v10);
  if (!v18)
    goto LABEL_38;
  v19 = v18;
  v36 = v18;
  v20 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
  swift_unknownObjectRetain(v19);
  swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
  v21 = v37;
  swift_unknownObjectRelease(v19);
  v22 = v12;
  v23 = v13;
  if (!v21)
    goto LABEL_38;
  while (1)
  {
    v37 = v21;
    sub_1002CCDA0(&v37, a2, &v36);

    if (v3)
    {
      sub_100133140(v5);
      swift_bridgeObjectRelease(v39, v28, v29, v30, v31, v32, v33, v34);
      return;
    }
    sub_10013CC04((uint64_t)v36);
    v12 = v22;
    v13 = v23;
    if (v5 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v13)
      break;
    v23 = (v13 - 1) & v13;
    v24 = __clz(__rbit64(v13)) | (v12 << 6);
    v22 = v12;
LABEL_27:
    v21 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v24);
    if (!v21)
      goto LABEL_38;
  }
  v22 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    return;
  }
  if (v22 >= v17)
    goto LABEL_38;
  v25 = *(_QWORD *)(v35 + 8 * v22);
  if (v25)
  {
LABEL_26:
    v23 = (v25 - 1) & v25;
    v24 = __clz(__rbit64(v25)) + (v22 << 6);
    goto LABEL_27;
  }
  v26 = v12 + 2;
  if (v12 + 2 >= v17)
    goto LABEL_38;
  v25 = *(_QWORD *)(v35 + 8 * v26);
  if (v25)
    goto LABEL_25;
  v26 = v12 + 3;
  if (v12 + 3 >= v17)
    goto LABEL_38;
  v25 = *(_QWORD *)(v35 + 8 * v26);
  if (v25)
    goto LABEL_25;
  v26 = v12 + 4;
  if (v12 + 4 >= v17)
    goto LABEL_38;
  v25 = *(_QWORD *)(v35 + 8 * v26);
  if (v25)
  {
LABEL_25:
    v22 = v26;
    goto LABEL_26;
  }
  v22 = v12 + 5;
  if (v12 + 5 >= v17)
    goto LABEL_38;
  v25 = *(_QWORD *)(v35 + 8 * v22);
  if (v25)
    goto LABEL_26;
  v27 = v12 + 6;
  while (v17 != v27)
  {
    v25 = *(_QWORD *)(v35 + 8 * v27++);
    if (v25)
    {
      v22 = v27 - 1;
      goto LABEL_26;
    }
  }
LABEL_38:
  sub_100133140(v5);
}

void sub_10001EA84(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for ActivitySharingHighlight(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10001EB04(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10001EB2C(v5);
  *a1 = v3;
}

uint64_t sub_10001EB04(_QWORD *a1)
{
  return sub_10001EB18(0, a1[2], 0, a1);
}

uint64_t sub_10001EB18(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000476D8(a1, a2, a3, a4, &qword_100821618, type metadata accessor for ActivitySharingHighlight);
}

void sub_10001EB2C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::Int v25;
  unint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  Swift::Int v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  Swift::Int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  CHWorkoutDetailHeartRateTableViewCell *v133;
  CHWorkoutDetailHeartRateTableViewCell *v134;
  SEL v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  char *v142;
  uint64_t v143;
  CHWorkoutDetailHeartRateTableViewCell *v144;
  Swift::Int v145;
  Swift::Int v146;
  uint64_t v147;
  Swift::Int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;

  v2 = v1;
  v156 = type metadata accessor for ActivitySharingHighlight(0);
  v150 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v147 = (uint64_t)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v157 = (uint64_t)&v142 - v6;
  __chkstk_darwin(v7);
  v153 = (uint64_t)&v142 - v8;
  __chkstk_darwin(v9);
  v152 = (uint64_t)&v142 - v10;
  v11 = a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if (v11 < 0)
      goto LABEL_142;
    if (v11)
      sub_1002CF964(0, v11, 1, a1);
    return;
  }
  if (v11 >= 0)
    v20 = v11;
  else
    v20 = v11 + 1;
  if (v11 < -1)
    goto LABEL_150;
  v145 = v12;
  if (v11 < 2)
  {
    v24 = (char *)_swiftEmptyArrayStorage;
    v149 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
    v144 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v26 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v26 >= 2)
      {
        v127 = *a1;
        do
        {
          v128 = v26 - 2;
          if (v26 < 2)
            goto LABEL_137;
          if (!v127)
            goto LABEL_149;
          v121 = v24;
          v129 = *(_QWORD *)&v24[16 * v128 + 32];
          v130 = *(_QWORD *)&v24[16 * v26 + 24];
          sub_1002CFE78(v127 + *(_QWORD *)(v150 + 72) * v129, v127 + *(_QWORD *)(v150 + 72) * *(_QWORD *)&v24[16 * v26 + 16], v127 + *(_QWORD *)(v150 + 72) * v130, v149);
          if (v2)
            goto LABEL_117;
          if (v130 < v129)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
            v121 = sub_100147754((uint64_t)v24);
          if (v128 >= *((_QWORD *)v121 + 2))
            goto LABEL_139;
          v131 = &v121[16 * v128 + 32];
          *(_QWORD *)v131 = v129;
          *((_QWORD *)v131 + 1) = v130;
          v132 = *((_QWORD *)v121 + 2);
          if (v26 > v132)
            goto LABEL_140;
          memmove(&v121[16 * v26 + 16], &v121[16 * v26 + 32], 16 * (v132 - v26));
          *((_QWORD *)v121 + 2) = v132 - 1;
          v26 = v132 - 1;
          v24 = v121;
        }
        while (v132 > 2);
      }
      v133 = (CHWorkoutDetailHeartRateTableViewCell *)v24;
LABEL_119:
      swift_bridgeObjectRelease(v133, v13, v14, v15, v16, v17, v18, v19);
      v134 = v144;
      *(_QWORD *)v144->cellPadding = 0;
      swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);
      return;
    }
  }
  else
  {
    v21 = v20 >> 1;
    v22 = static Array._allocateBufferUninitialized(minimumCapacity:)(v20 >> 1, v156);
    *(_QWORD *)(v22 + 16) = v21;
    v23 = *(unsigned __int8 *)(v150 + 80);
    v144 = (CHWorkoutDetailHeartRateTableViewCell *)v22;
    v149 = v22 + ((v23 + 32) & ~v23);
  }
  v25 = 0;
  v24 = (char *)_swiftEmptyArrayStorage;
  v155 = a1;
  while (1)
  {
    v27 = v25;
    v28 = v25 + 1;
    if (v25 + 1 >= v11)
    {
      v35 = v25 + 1;
      goto LABEL_57;
    }
    v29 = *a1;
    v30 = *(_QWORD *)(v150 + 72);
    v31 = v152;
    sub_1000DA808(v29 + v30 * v28, v152);
    v32 = v29 + v30 * v27;
    v148 = v27;
    v33 = v153;
    sub_1000DA808(v32, v153);
    LODWORD(v154) = Date.isAfter(date:)(v33 + *(int *)(v156 + 24));
    v34 = v33;
    v27 = v148;
    sub_1000DA1C0(v34);
    sub_1000DA1C0(v31);
    v35 = v27 + 2;
    v151 = v29;
    v158 = v30;
    if (v27 + 2 < v11)
    {
      v143 = v2;
      v36 = v30 * v28;
      v37 = v29;
      v38 = v30 * v35;
      while (1)
      {
        v39 = v11;
        v40 = v35;
        v41 = v152;
        sub_1000DA808(v37 + v38, v152);
        v42 = v153;
        sub_1000DA808(v37 + v36, v153);
        v43 = Date.isAfter(date:)(v42 + *(int *)(v156 + 24));
        sub_1000DA1C0(v42);
        sub_1000DA1C0(v41);
        if (((v154 ^ v43) & 1) != 0)
          break;
        v35 = v40 + 1;
        v37 += v158;
        v11 = v39;
        if (v39 == v40 + 1)
        {
          v35 = v39;
          v27 = v148;
          goto LABEL_23;
        }
      }
      v35 = v40;
      v27 = v148;
      v11 = v39;
LABEL_23:
      v2 = v143;
    }
    if ((v154 & 1) == 0)
      break;
    if (v35 < v27)
      goto LABEL_143;
    if (v27 >= v35)
      break;
    v146 = v11;
    v142 = v24;
    v44 = 0;
    v45 = v27;
    v46 = v158;
    v47 = v158 * (v35 - 1);
    v48 = v35 * v158;
    v49 = v45;
    v50 = v45 * v158;
    a1 = v155;
    do
    {
      if (v49 != v35 + v44 - 1)
      {
        v53 = v35;
        v54 = v151;
        if (!v151)
          goto LABEL_148;
        v55 = v151 + v50;
        v154 = v151 + v47;
        sub_1002D11CC(v151 + v50, v147);
        if (v50 < v47 || v55 >= v54 + v48)
        {
          v51 = v54 + v50;
          v52 = v154;
          swift_arrayInitWithTakeFrontToBack(v51);
        }
        else
        {
          v52 = v154;
          if (v50 != v47)
            swift_arrayInitWithTakeBackToFront(v55);
        }
        sub_1002D11CC(v147, v52);
        a1 = v155;
        v35 = v53;
        v46 = v158;
      }
      ++v49;
      --v44;
      v47 -= v46;
      v48 -= v46;
      v50 += v46;
    }
    while (v49 < v35 + v44);
    v24 = v142;
    v27 = v148;
    v11 = v146;
    if (v35 < v146)
      goto LABEL_40;
LABEL_57:
    if (v35 < v27)
      goto LABEL_136;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    v154 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v24 = sub_100147150(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
    v76 = *((_QWORD *)v24 + 2);
    v75 = *((_QWORD *)v24 + 3);
    v26 = v76 + 1;
    if (v76 >= v75 >> 1)
      v24 = sub_100147150((char *)(v75 > 1), v76 + 1, 1, v24);
    *((_QWORD *)v24 + 2) = v26;
    v77 = v24 + 32;
    v78 = &v24[16 * v76 + 32];
    v79 = v154;
    *(_QWORD *)v78 = v27;
    *((_QWORD *)v78 + 1) = v79;
    if (v76)
    {
      while (1)
      {
        v80 = v26 - 1;
        if (v26 >= 4)
        {
          v85 = &v77[16 * v26];
          v86 = *((_QWORD *)v85 - 8);
          v87 = *((_QWORD *)v85 - 7);
          v91 = __OFSUB__(v87, v86);
          v88 = v87 - v86;
          if (v91)
            goto LABEL_125;
          v90 = *((_QWORD *)v85 - 6);
          v89 = *((_QWORD *)v85 - 5);
          v91 = __OFSUB__(v89, v90);
          v83 = v89 - v90;
          v84 = v91;
          if (v91)
            goto LABEL_126;
          v92 = v26 - 2;
          v93 = &v77[16 * v26 - 32];
          v95 = *(_QWORD *)v93;
          v94 = *((_QWORD *)v93 + 1);
          v91 = __OFSUB__(v94, v95);
          v96 = v94 - v95;
          if (v91)
            goto LABEL_128;
          v91 = __OFADD__(v83, v96);
          v97 = v83 + v96;
          if (v91)
            goto LABEL_131;
          if (v97 >= v88)
          {
            v115 = &v77[16 * v80];
            v117 = *(_QWORD *)v115;
            v116 = *((_QWORD *)v115 + 1);
            v91 = __OFSUB__(v116, v117);
            v118 = v116 - v117;
            if (v91)
              goto LABEL_135;
            v108 = v83 < v118;
            goto LABEL_94;
          }
        }
        else
        {
          if (v26 != 3)
          {
            v109 = *((_QWORD *)v24 + 4);
            v110 = *((_QWORD *)v24 + 5);
            v91 = __OFSUB__(v110, v109);
            v102 = v110 - v109;
            v103 = v91;
            goto LABEL_88;
          }
          v82 = *((_QWORD *)v24 + 4);
          v81 = *((_QWORD *)v24 + 5);
          v91 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          v84 = v91;
        }
        if ((v84 & 1) != 0)
          goto LABEL_127;
        v92 = v26 - 2;
        v98 = &v77[16 * v26 - 32];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v101 = __OFSUB__(v99, v100);
        v102 = v99 - v100;
        v103 = v101;
        if (v101)
          goto LABEL_130;
        v104 = &v77[16 * v80];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v91 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v91)
          goto LABEL_133;
        if (__OFADD__(v102, v107))
          goto LABEL_134;
        if (v102 + v107 >= v83)
        {
          v108 = v83 < v107;
LABEL_94:
          if (v108)
            v80 = v92;
          goto LABEL_96;
        }
LABEL_88:
        if ((v103 & 1) != 0)
          goto LABEL_129;
        v111 = &v77[16 * v80];
        v113 = *(_QWORD *)v111;
        v112 = *((_QWORD *)v111 + 1);
        v91 = __OFSUB__(v112, v113);
        v114 = v112 - v113;
        if (v91)
          goto LABEL_132;
        if (v114 < v102)
          goto LABEL_14;
LABEL_96:
        v119 = v80 - 1;
        if (v80 - 1 >= v26)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        v120 = *a1;
        if (!*a1)
          goto LABEL_147;
        v121 = v24;
        v122 = &v77[16 * v119];
        v123 = *(_QWORD *)v122;
        v124 = &v77[16 * v80];
        v125 = *((_QWORD *)v124 + 1);
        sub_1002CFE78(v120 + *(_QWORD *)(v150 + 72) * *(_QWORD *)v122, v120 + *(_QWORD *)(v150 + 72) * *(_QWORD *)v124, v120 + *(_QWORD *)(v150 + 72) * v125, v149);
        if (v2)
        {
LABEL_117:
          v133 = (CHWorkoutDetailHeartRateTableViewCell *)v121;
          goto LABEL_119;
        }
        if (v125 < v123)
          goto LABEL_122;
        if (v80 > *((_QWORD *)v121 + 2))
          goto LABEL_123;
        *(_QWORD *)v122 = v123;
        *(_QWORD *)&v77[16 * v119 + 8] = v125;
        v126 = *((_QWORD *)v121 + 2);
        if (v80 >= v126)
          goto LABEL_124;
        v24 = v121;
        v26 = v126 - 1;
        memmove(&v77[16 * v80], v124 + 16, 16 * (v126 - 1 - v80));
        *((_QWORD *)v121 + 2) = v126 - 1;
        a1 = v155;
        if (v126 <= 2)
          goto LABEL_14;
      }
    }
    v26 = 1;
LABEL_14:
    v11 = a1[1];
    v25 = v154;
    if (v154 >= v11)
      goto LABEL_105;
  }
  a1 = v155;
  if (v35 >= v11)
    goto LABEL_57;
LABEL_40:
  if (__OFSUB__(v35, v27))
    goto LABEL_141;
  if (v35 - v27 >= v145)
    goto LABEL_57;
  if (__OFADD__(v27, v145))
    goto LABEL_144;
  if (v27 + v145 >= v11)
    v56 = v11;
  else
    v56 = v27 + v145;
  if (v56 >= v27)
  {
    if (v35 != v56)
    {
      v148 = v27;
      v142 = v24;
      v143 = v2;
      v57 = *(_QWORD *)(v150 + 72);
      v58 = v57 * (v35 - 1);
      v151 = v57;
      v59 = v35 * v57;
      v146 = v56;
      do
      {
        v61 = 0;
        v62 = v148;
        v154 = v35;
        while (1)
        {
          v158 = v62;
          v63 = *a1;
          v64 = v59;
          v65 = v59 + v61 + *a1;
          v66 = a1;
          v67 = v152;
          sub_1000DA808(v65, v152);
          v68 = v58;
          v69 = v58 + v61 + v63;
          v70 = v153;
          sub_1000DA808(v69, v153);
          LOBYTE(v63) = Date.isAfter(date:)(v70 + *(int *)(v156 + 24));
          sub_1000DA1C0(v70);
          sub_1000DA1C0(v67);
          if ((v63 & 1) == 0)
            break;
          v71 = *v66;
          if (!*v66)
            goto LABEL_146;
          v59 = v64;
          v72 = v71 + v64 + v61;
          v58 = v68;
          v73 = v71 + v68 + v61;
          sub_1002D11CC(v72, v157);
          swift_arrayInitWithTakeFrontToBack(v72);
          sub_1002D11CC(v157, v73);
          v61 -= v151;
          v62 = v158 + 1;
          v60 = v154;
          a1 = v155;
          if (v154 == v158 + 1)
            goto LABEL_50;
        }
        v60 = v154;
        a1 = v66;
        v58 = v68;
        v59 = v64;
LABEL_50:
        v35 = v60 + 1;
        v58 += v151;
        v59 += v151;
      }
      while (v35 != v146);
      v35 = v146;
      v24 = v142;
      v2 = v143;
      v27 = v148;
    }
    goto LABEL_57;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t type metadata accessor for ActivitySharingHighlight(uint64_t a1)
{
  uint64_t result;

  result = qword_1008289D0;
  if (!qword_1008289D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingHighlight);
  return result;
}

uint64_t sub_10001F4EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9;
  uint64_t v11;
  void (*v12)(id, uint64_t, uint64_t, void *, void *);
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v9 = a3;
  v12 = *(void (**)(id, uint64_t, uint64_t, void *, void *))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v13 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v13);
  }
  if (a4)
  {
    v14 = sub_10001E724(0, &qword_10083A018, HKDeletedObject_ptr);
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v14);
  }
  swift_retain(v11);
  v15 = a2;
  v16 = a5;
  v17 = a6;
  v12(v15, v9, a4, a5, a6);
  swift_release(v11);

  swift_bridgeObjectRelease(a4);
  return swift_bridgeObjectRelease(v9);
}

void sub_10001F5EC(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  id v31;
  id v32;
  Class isa;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v44;
  void **aBlock;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v3 = static os_log_type_t.default.getter(a1);
  v4 = (void *)HKLogActivity;
  v5 = v3;
  if (os_log_type_enabled(HKLogActivity, v3))
  {
    v6 = v4;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (void **)swift_slowAlloc(32, -1);
    aBlock = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = _typeName(_:qualified:)(a2, 0);
    v11 = v10;
    v44 = sub_10003E8EC(v9, v10, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &aBlock, v7 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "%s starting Activity goal query", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  v12 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v12);
  v14 = objc_msgSend(ObjCClassFromMetadata, "calorieGoal");
  if (!v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v14;
  v16 = (void *)objc_opt_self(HKQueryDescriptor);
  v17 = objc_msgSend(v16, "queryDescriptorWithSampleType:", v15);

  v18 = objc_msgSend(ObjCClassFromMetadata, "moveMinuteGoal");
  if (!v18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v19 = v18;
  v20 = objc_msgSend(v16, "queryDescriptorWithSampleType:", v18);

  v21 = objc_msgSend(ObjCClassFromMetadata, "exerciseGoal");
  if (!v21)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22 = v21;
  v23 = objc_msgSend(v16, "queryDescriptorWithSampleType:", v21);

  v24 = objc_msgSend(ObjCClassFromMetadata, "standGoal");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v16, "queryDescriptorWithSampleType:", v24);

    v27 = sub_100047110((uint64_t *)&unk_100828340);
    v28 = (void **)swift_allocObject(v27, 64, 7);
    *((_OWORD *)v28 + 1) = xmmword_100623750;
    v28[4] = v17;
    v28[5] = v20;
    v28[6] = v23;
    v28[7] = v26;
    aBlock = v28;
    specialized Array._endMutation()(v28);
    v29 = aBlock;
    v30 = swift_allocObject(&unk_1007A90D8, 24, 7);
    swift_unknownObjectWeakInit(v30 + 16, a1);
    v31 = objc_allocWithZone((Class)HKAnchoredObjectQuery);
    sub_10001E724(0, &qword_10083A010, HKQueryDescriptor_ptr);
    v42 = v17;
    v41 = v20;
    v40 = v23;
    v32 = v26;
    swift_retain(v30);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    v49 = sub_10004EDD8;
    v50 = v30;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_10001F4EC;
    v48 = &unk_1007A90F0;
    v34 = _Block_copy(&aBlock);
    v35 = objc_msgSend(v31, "initWithQueryDescriptors:anchor:limit:resultsHandler:", isa, 0, 0, v34);

    _Block_release(v34);
    v36 = v50;
    swift_release(v30);
    swift_release(v36);
    v37 = swift_allocObject(&unk_1007A90D8, 24, 7);
    swift_unknownObjectWeakInit(v37 + 16, a1);
    v49 = sub_100554AFC;
    v50 = v37;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_10001F4EC;
    v48 = &unk_1007A9118;
    v38 = _Block_copy(&aBlock);
    swift_release(v50);
    objc_msgSend(v35, "setUpdateHandler:", v38);
    _Block_release(v38);
    objc_msgSend(*(id *)(a1 + OBJC_IVAR___CHOnboardingCoordinator_healthStore), "executeQuery:", v35);
    v39 = *(void **)(a1 + OBJC_IVAR___CHOnboardingCoordinator_activityGoalsQuery);
    *(_QWORD *)(a1 + OBJC_IVAR___CHOnboardingCoordinator_activityGoalsQuery) = v35;

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_10001FAA4(void *a1, void *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  __n128 v25;
  void *v26;
  id v27;
  objc_class *v28;
  id v29;
  void *v30;
  _BYTE *v31;
  id v32;
  NSString v33;
  unsigned __int8 v34;
  uint64_t v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  void *v42;
  os_log_type_t v43;
  _BOOL8 v44;
  uint64_t v45;
  _BYTE *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  const char *v55;
  NSObject *v56;
  uint64_t v57;
  void *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  const char *v63;
  __n128 v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  char *v80;
  id v81;
  char *v82;
  id v83;
  void *v84;
  void **aBlock;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  objc_super v91;

  v83 = a1;
  v84 = a2;
  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v82 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10083B4F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10083B500);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive] = 0;
  v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists] = 0;
  v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountAssumedToExist] = 0;
  v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountFetchInProgress] = 2;
  v13 = &v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastPhoneCloudKitAccountFetchTimestamp];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_lastWatchCloudKitAccountFetchTimestamp], 1, 1, v14);
  v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_currentlyPairedWatchIsMinimumVersion] = 0;
  *(_DWORD *)&v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingCloudKitAccountStatusChangedToken] = -1;
  *(_DWORD *)&v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingGatewayStatusChangedToken] = -1;
  v16 = &v2[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator__activitySharingIsSetup];
  v17 = v2;
  LOBYTE(aBlock) = sub_10000DE6C() & 1;
  Published.init(initialValue:)(&aBlock, &type metadata for Bool);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v12, v9);
  v18 = &v17[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator__setupPhase];
  aBlock = 0;
  type metadata accessor for CHFriendsSetupPhase(0);
  Published.init(initialValue:)(&aBlock, v19);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v18, v8, v5);
  v20 = v83;
  v21 = v84;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_friendManager] = v83;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_friendListSectionManager] = v21;
  v22 = sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v23 = v20;
  v24 = v21;
  v84 = (void *)v22;
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  v27 = objc_msgSend(objc_allocWithZone((Class)NSSManager), "initWithQueue:", v26);

  if (v27)
  {
    v83 = v23;
    *(_QWORD *)&v17[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_nanoSystemSettingsManager] = v27;

    v28 = (objc_class *)type metadata accessor for FriendsSetupCoordinator(0);
    v91.receiver = v17;
    v91.super_class = v28;
    v29 = objc_msgSendSuper2(&v91, "init");
    v30 = (void *)objc_opt_self(NSUserDefaults);
    v31 = v29;
    v32 = objc_msgSend(v30, "standardUserDefaults");
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v32, "BOOLForKey:", v33);

    v35 = OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive;
    v31[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_phoneCloudKitAccountIsActive] = v34;
    v36 = objc_msgSend(v30, "standardUserDefaults");
    v37 = String._bridgeToObjectiveC()();
    LOBYTE(v33) = objc_msgSend(v36, "BOOLForKey:", v37);

    v38 = OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists;
    v31[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountExists] = (_BYTE)v33;
    v39 = sub_10000F414();
    v40 = OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountAssumedToExist;
    v31[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_watchCloudKitAccountAssumedToExist] = v39 & 1;
    v41 = static os_log_type_t.default.getter(v39);
    v42 = (void *)HKLogActivity;
    v43 = v41;
    v44 = os_log_type_enabled(HKLogActivity, v41);
    if (v44)
    {
      v46 = v31;
      v47 = v42;
      v48 = swift_slowAlloc(20, -1);
      *(_DWORD *)v48 = 67109632;
      LODWORD(aBlock) = v31[v35];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v48 + 4);
      *(_WORD *)(v48 + 8) = 1024;
      LODWORD(aBlock) = v31[v38];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v48 + 10);
      *(_WORD *)(v48 + 14) = 1024;
      LODWORD(aBlock) = v31[v40];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v48 + 16);

      _os_log_impl((void *)&_mh_execute_header, v47, v43, "Initializing account status from cache: [phone=%{BOOL}d, [watch=%{BOOL}d, [watch(assumed)=%{BOOL}d", (uint8_t *)v48, 0x14u);
      swift_slowDealloc(v48, -1, -1);

    }
    v31[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_currentlyPairedWatchIsMinimumVersion] = FIDeviceMeetsMinimumOSVersionDaytona(v44, v45);
    v49 = type metadata accessor for TaskPriority(0);
    v50 = (uint64_t)v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v82, 1, 1, v49);
    v51 = (_QWORD *)swift_allocObject(&unk_1007AA4E8, 48, 7);
    v51[2] = 0;
    v51[3] = 0;
    v51[4] = v31;
    v51[5] = v24;
    v81 = v24;
    v52 = v31;
    v53 = sub_10020D9C0(v50, (uint64_t)&unk_10083B510, (uint64_t)v51);
    v54 = swift_release(v53);
    v55 = (const char *)kASCloudKitAccountStatusChangedNotificationKey;
    v56 = static OS_dispatch_queue.main.getter(v54);
    v57 = swift_allocObject(&unk_1007AA498, 24, 7);
    swift_unknownObjectWeakInit(v57 + 16);
    v89 = sub_100582F78;
    v90 = v57;
    aBlock = _NSConcreteStackBlock;
    v86 = 1107296256;
    v87 = sub_1003B91BC;
    v88 = &unk_1007AA500;
    v58 = _Block_copy(&aBlock);
    swift_release(v90);
    v59 = (int *)&v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingCloudKitAccountStatusChangedToken];
    swift_beginAccess(&v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingCloudKitAccountStatusChangedToken], &aBlock, 33, 0);
    notify_register_dispatch(v55, v59, v56, v58);
    swift_endAccess(&aBlock);
    _Block_release(v58);

    v61 = static os_log_type_t.default.getter(v60);
    v62 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Registered a callback for CloudKit address changed notifications", 64, 2, &_swiftEmptyArrayStorage);

    v63 = (const char *)kASGatewayStatusChangedNotificationKey;
    v65 = static OS_dispatch_queue.main.getter(v64);
    v66 = swift_allocObject(&unk_1007AA498, 24, 7);
    swift_unknownObjectWeakInit(v66 + 16);
    v89 = sub_100582F80;
    v90 = v66;
    aBlock = _NSConcreteStackBlock;
    v86 = 1107296256;
    v87 = sub_1003B91BC;
    v88 = &unk_1007AA528;
    v67 = _Block_copy(&aBlock);
    swift_release(v90);
    v68 = (int *)&v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingGatewayStatusChangedToken];
    swift_beginAccess(&v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_activitySharingGatewayStatusChangedToken], &aBlock, 33, 0);
    notify_register_dispatch(v63, v68, v65, v67);
    swift_endAccess(&aBlock);
    _Block_release(v67);

    v70 = static os_log_type_t.default.getter(v69);
    v71 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Registered a callback for Watch pairing changed notifications", 61, 2, &_swiftEmptyArrayStorage);

    v73 = static os_log_type_t.default.getter(v72);
    v74 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Asking for phone account", 24, 2, &_swiftEmptyArrayStorage);

    v75 = *(void **)&v52[OBJC_IVAR____TtC10FitnessApp23FriendsSetupCoordinator_friendManager];
    v76 = swift_allocObject(&unk_1007AA498, 24, 7);
    swift_unknownObjectWeakInit(v76 + 16);
    v89 = sub_10004E738;
    v90 = v76;
    aBlock = _NSConcreteStackBlock;
    v86 = 1107296256;
    v87 = sub_1000058A4;
    v88 = &unk_1007AA550;
    v77 = _Block_copy(&aBlock);
    objc_msgSend(v75, "cloudKitAccountStatusWithCompletion:", v77, swift_release(v90).n128_f64[0]);
    _Block_release(v77);
    sub_10000B010(v78);
    v79 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v80 = v52;
    objc_msgSend(v79, "addObserver:selector:name:object:", v80, "applicationDidBecomeActive", UIApplicationDidBecomeActiveNotification, 0);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100020354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v17[7];
  char v18;
  uint64_t v19;
  char v20;
  _BYTE v21[24];

  v1 = sub_100047110(&qword_10082C3B8);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for NoticePrivacyPreference(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_userDefaults);
  v9 = String._bridgeToObjectiveC()();
  LOBYTE(v8) = objc_msgSend(v8, "BOOLForKey:", v9);

  if ((v8 & 1) != 0)
    return 0;
  v10 = v0 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_noticePrivacyPreference;
  swift_beginAccess(v10, v21, 0, 0);
  sub_100021CC0(v10, (uint64_t)v3, &qword_10082C3B8);
  v11 = 1;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10001BE90((uint64_t)v3, &qword_10082C3B8);
    return 0;
  }
  v12 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v3, v4);
  v19 = NoticePrivacyPreference.state.getter(v12);
  v20 = v13 & 1;
  v18 = 1;
  v14 = sub_100020568();
  v15 = sub_100020524();
  LOBYTE(v14) = static PortableEnum<>.== infix(_:_:)(&v19, &v18, &type metadata for NoticePrivacyPreference.State, v14, v15);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  if ((v14 & 1) == 0)
    return 0;
  return v11;
}

unint64_t sub_100020524()
{
  unint64_t result;

  result = qword_100823040;
  if (!qword_100823040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoticePrivacyPreference.State, &type metadata for NoticePrivacyPreference.State);
    atomic_store(result, (unint64_t *)&qword_100823040);
  }
  return result;
}

unint64_t sub_100020568()
{
  unint64_t result;

  result = qword_100823038;
  if (!qword_100823038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoticePrivacyPreference.State, &type metadata for NoticePrivacyPreference.State);
    atomic_store(result, (unint64_t *)&qword_100823038);
  }
  return result;
}

uint64_t sub_1000205AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  void (*v87)(char *, uint64_t);
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  double v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  double v109;
  uint64_t (*v110)(char *, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  _BOOL4 v116;
  char *v117;
  uint8_t *v118;
  uint8_t *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char v150[24];
  char v151[24];
  uint64_t v152;
  char v153[8];
  uint64_t v154;

  v142 = type metadata accessor for DateComponents(0);
  v135 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v141 = (char *)&v123 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for Calendar(0);
  v134 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v139 = (char *)&v123 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110((uint64_t *)&unk_100828370);
  v4 = __chkstk_darwin(v3);
  v128 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v129 = (char *)&v123 - v7;
  v8 = __chkstk_darwin(v6);
  v132 = (char *)&v123 - v9;
  __chkstk_darwin(v8);
  v148 = (char *)&v123 - v10;
  v136 = type metadata accessor for Date(0);
  v138 = *(_QWORD *)(v136 - 8);
  v11 = __chkstk_darwin(v136);
  v126 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v130 = (char *)&v123 - v14;
  v15 = __chkstk_darwin(v13);
  v131 = (char *)&v123 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v123 - v18;
  __chkstk_darwin(v17);
  v143 = (char *)&v123 - v20;
  v145 = type metadata accessor for WhatsNewSheet(0);
  v21 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v23 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_10082C398);
  v25 = __chkstk_darwin(v24);
  v144 = (uint64_t)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v123 - v27;
  v149 = type metadata accessor for Logger(0);
  v147 = *(_QWORD *)(v149 - 8);
  v29 = __chkstk_darwin(v149);
  v127 = (char *)&v123 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v146 = (char *)&v123 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v123 - v34;
  static Log.default.getter(v33);
  v36 = v0;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v133 = v19;
  if (v39)
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v137 = v23;
    v125 = v41;
    *(_DWORD *)v40 = 136315138;
    v154 = v41;
    v124 = v40 + 4;
    v42 = (uint64_t)&v36[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_whatsNewSheetConfiguraion];
    swift_beginAccess(&v36[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_whatsNewSheetConfiguraion], v150, 0, 0);
    sub_100021CC0(v42, (uint64_t)v28, &qword_10082C398);
    v43 = Optional.description.getter(v24);
    v45 = v44;
    sub_10001BE90((uint64_t)v28, &qword_10082C398);
    v152 = sub_10003E8EC(v43, v45, &v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v124);

    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "SeymourDiscoverySheetCoordinator: evaluate should show what's new sheet %s", v40, 0xCu);
    v46 = v125;
    swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
    v23 = v137;
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
  v47 = *(uint64_t (**)(char *, uint64_t))(v147 + 8);
  v48 = v35;
  v49 = v149;
  v50 = v47(v48, v149);
  v51 = v36;
  v52 = v36[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_forceShowingWhatsNewSheet];
  v53 = v148;
  if (v52 == 1)
  {
    v54 = v146;
    v55 = static Log.default.getter(v50);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "SeymourDiscoverySheetCoordinator: forceShowingWhatsNewSheet", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    v47(v54, v49);
    return 1;
  }
  if ((sub_100021A8C() & 1) == 0 || (sub_100020354() & 1) != 0)
    return 0;
  v60 = (uint64_t)&v51[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_whatsNewSheetConfiguraion];
  swift_beginAccess(&v51[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_whatsNewSheetConfiguraion], &v154, 0, 0);
  v61 = v60;
  v62 = v144;
  sub_100021CC0(v61, v144, &qword_10082C398);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v62, 1, v145) == 1)
  {
    v63 = &qword_10082C398;
    v64 = v62;
LABEL_18:
    sub_10001BE90(v64, v63);
    return 0;
  }
  v146 = v51;
  v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32))(v23, v62, v145);
  v66 = v143;
  v67 = Date.init()(v65);
  v68 = v139;
  v69 = static Calendar.current.getter(v67);
  v70 = v141;
  WhatsNewSheet.startDate.getter(v69);
  Calendar.date(from:)(v70);
  v71 = *(void (**)(char *, uint64_t))(v135 + 8);
  v71(v70, v142);
  v72 = *(void (**)(char *, uint64_t))(v134 + 8);
  v72(v68, v140);
  v73 = v21;
  v74 = v138;
  v75 = v136;
  v147 = *(_QWORD *)(v138 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v147)(v53, 1, v136) == 1)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v66, v75);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v145);
    v63 = (uint64_t *)&unk_100828370;
    v64 = (uint64_t)v53;
    goto LABEL_18;
  }
  v144 = v73;
  v137 = v23;
  v76 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v77 = v133;
  v76(v133, v53, v75);
  sub_1000083D8((unint64_t *)&qword_1008274E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v78 = dispatch thunk of static Comparable.< infix(_:_:)(v66, v77, v75);
  if ((v78 & 1) != 0)
  {
    v79 = *(void (**)(char *, uint64_t))(v74 + 8);
    v79(v77, v75);
    v80 = v66;
LABEL_27:
    v96 = v75;
LABEL_28:
    v79(v80, v96);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v137, v145);
    return 0;
  }
  v81 = v139;
  v82 = static Calendar.current.getter(v78);
  v83 = v141;
  v84 = v137;
  WhatsNewSheet.expirationDate.getter(v82);
  v85 = v132;
  Calendar.date(from:)(v83);
  v71(v83, v142);
  v72(v81, v140);
  v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v147;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v147)(v85, 1, v75) == 1)
  {
    v87 = *(void (**)(char *, uint64_t))(v138 + 8);
    v87(v133, v75);
    v87(v143, v75);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v84, v145);
    v63 = (uint64_t *)&unk_100828370;
    v64 = (uint64_t)v85;
    goto LABEL_18;
  }
  v88 = v131;
  v76(v131, v85, v75);
  v89 = v143;
  if ((static Date.< infix(_:_:)(v143, v88) & 1) == 0)
  {
    v79 = *(void (**)(char *, uint64_t))(v138 + 8);
    v79(v88, v75);
    v79(v133, v75);
    v80 = v89;
    goto LABEL_27;
  }
  result = WhatsNewSheet.introSheetTriggerConditionInDays.getter();
  if ((unsigned __int128)(result * (__int128)24) >> 64 != (24 * result) >> 63)
  {
    __break(1u);
    goto LABEL_45;
  }
  v90 = v130;
  v91 = (uint64_t)v129;
  if ((unsigned __int128)(24 * result * (__int128)60) >> 64 != (1440 * result) >> 63)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v92 = 86400 * result;
  if ((unsigned __int128)(1440 * result * (__int128)60) >> 64 != (86400 * result) >> 63)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v93 = (uint64_t)&v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastIntroSheetViewDate];
  swift_beginAccess(&v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastIntroSheetViewDate], &v152, 0, 0);
  sub_100021CC0(v93, v91, (uint64_t *)&unk_100828370);
  v94 = v136;
  if (v86(v91, 1, v136) == 1)
  {
    v95 = *(void (**)(char *, uint64_t))(v138 + 8);
    v95(v88, v94);
    v95(v133, v94);
    v95(v143, v94);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v137, v145);
    v63 = (uint64_t *)&unk_100828370;
    v64 = v91;
    goto LABEL_18;
  }
  v97 = (double)v92;
  v76(v90, (char *)v91, v94);
  v98 = v143;
  if (Date.timeIntervalSince(_:)(v90) < v97)
  {
    v79 = *(void (**)(char *, uint64_t))(v138 + 8);
    v79(v90, v94);
    v79(v88, v94);
    v79(v133, v94);
    v80 = v98;
    v96 = v94;
    goto LABEL_28;
  }
  v99 = WhatsNewSheet.version.getter();
  if ((v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewVersion + 8] & 1) == 0
    && *(_QWORD *)&v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewVersion] >= v99)
  {
    v79 = *(void (**)(char *, uint64_t))(v138 + 8);
    v122 = v136;
    v79(v90, v136);
    v79(v88, v122);
    v79(v133, v122);
    v80 = v143;
    v96 = v122;
    goto LABEL_28;
  }
  result = WhatsNewSheet.whatsNewSheetTriggerConditionInDays.getter(v99);
  if ((unsigned __int128)(result * (__int128)24) >> 64 != (24 * result) >> 63)
    goto LABEL_47;
  if ((unsigned __int128)(24 * result * (__int128)60) >> 64 != (1440 * result) >> 63)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = 86400 * result;
  if ((unsigned __int128)(1440 * result * (__int128)60) >> 64 != (86400 * result) >> 63)
  {
LABEL_49:
    __break(1u);
    return result;
  }
  v101 = &v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewDate];
  swift_beginAccess(&v146[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewDate], v151, 0, 0);
  v102 = (uint64_t)v101;
  v103 = v128;
  sub_100021CC0(v102, v128, (uint64_t *)&unk_100828370);
  v104 = v136;
  if (v86(v103, 1, v136) == 1)
  {
    v105 = sub_10001BE90(v103, (uint64_t *)&unk_100828370);
    v106 = v144;
    v107 = v138;
  }
  else
  {
    v108 = v126;
    v76(v126, (char *)v103, v104);
    v109 = Date.timeIntervalSince(_:)(v108);
    v107 = v138;
    v110 = *(uint64_t (**)(char *, uint64_t))(v138 + 8);
    v105 = v110(v108, v104);
    v106 = v144;
    if (v109 < (double)v100)
    {
      v111 = v136;
      v110(v90, v136);
      v110(v88, v111);
      v110(v133, v111);
      v110(v143, v111);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v137, v145);
      return 0;
    }
  }
  v112 = v127;
  v113 = static Log.default.getter(v105);
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.default.getter(v114);
  v116 = os_log_type_enabled(v114, v115);
  v117 = v137;
  if (v116)
  {
    v118 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v118 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "SeymourDiscoverySheetCoordinator: qualified to show what's new sheet", v118, 2u);
    v119 = v118;
    v106 = v144;
    swift_slowDealloc(v119, -1, -1);
  }

  v47(v112, v149);
  v120 = *(void (**)(char *, uint64_t))(v107 + 8);
  v121 = v136;
  v120(v90, v136);
  v120(v88, v121);
  v120(v133, v121);
  v120(v143, v121);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v117, v145);
  return 1;
}

uint64_t sub_10002130C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  const char *v44;
  id v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  double v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char v85[24];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[4];

  v1 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v1 - 8);
  v81 = v1;
  v2 = __chkstk_darwin(v1);
  v76 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v75 = (char *)&v69 - v4;
  v5 = type metadata accessor for IntroSheet(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v77 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v8);
  v79 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_10082C3A0);
  v11 = __chkstk_darwin(v10);
  v78 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v69 - v13;
  v15 = type metadata accessor for Logger(0);
  v84 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v74 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v82 = (char *)&v69 - v19;
  v20 = __chkstk_darwin(v18);
  v83 = (char *)&v69 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v69 - v23;
  static Log.default.getter(v22);
  v25 = v0;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(12, -1);
    v73 = v15;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc(32, -1);
    v71 = v30;
    v72 = v6;
    *(_DWORD *)v29 = 136315138;
    v88[0] = v30;
    v70 = v29 + 4;
    v31 = (uint64_t)&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_introSheetConfiguration];
    swift_beginAccess(&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_introSheetConfiguration], v85, 0, 0);
    sub_100021CC0(v31, (uint64_t)v14, &qword_10082C3A0);
    v32 = Optional.description.getter(v10);
    v34 = v33;
    sub_10001BE90((uint64_t)v14, &qword_10082C3A0);
    v86 = sub_10003E8EC(v32, v34, v88);
    v6 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v70);

    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SeymourDiscoverySheetCoordinator: evaluate should show intro sheet %s", v29, 0xCu);
    v35 = v71;
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v36 = v29;
    v15 = v73;
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

  }
  v37 = *(uint64_t (**)(char *, uint64_t))(v84 + 8);
  v38 = v37(v24, v15);
  if (v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_forceShowingIntroSheet] == 1)
  {
    v39 = v83;
    v40 = static Log.default.getter(v38);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      v44 = "SeymourDiscoverySheetCoordinator: forceShowingIntroSheet";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v41, v42, v44, v43, 2u);
      swift_slowDealloc(v43, -1, -1);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  v45 = objc_msgSend(*(id *)&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_badgingProvider], "hasAmeliaBadge");
  if ((_DWORD)v45)
  {
    v39 = v82;
    v46 = static Log.default.getter(v45);
    v41 = Logger.logObject.getter(v46);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      v44 = "SeymourDiscoverySheetCoordinator: showing IntroSheet for Amelia badging";
      goto LABEL_10;
    }
LABEL_11:

    v37(v39, v15);
    return 1;
  }
  if ((sub_100021A8C() & 1) == 0)
    return 0;
  if ((sub_100020354() & 1) != 0)
    return 0;
  if ((v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_hasVisitedSeymourTab] & 1) != 0)
    return 0;
  v48 = (uint64_t)&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastIntroSheetViewDate];
  swift_beginAccess(&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastIntroSheetViewDate], v88, 0, 0);
  v49 = v79;
  sub_100021CC0(v48, v79, (uint64_t *)&unk_100828370);
  LODWORD(v48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v49, 1, v81);
  sub_10001BE90(v49, (uint64_t *)&unk_100828370);
  if ((_DWORD)v48 != 1)
    return 0;
  v50 = &v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_introSheetConfiguration];
  swift_beginAccess(&v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_introSheetConfiguration], &v86, 0, 0);
  v51 = (uint64_t)v50;
  v52 = v78;
  sub_100021CC0(v51, v78, &qword_10082C3A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v52, 1, v5) == 1)
  {
    sub_10001BE90(v52, &qword_10082C3A0);
    return 0;
  }
  v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))(v77, v52, v5);
  result = IntroSheet.firstAppLaunchTriggerConditionInDays.getter(v53);
  if ((unsigned __int128)(result * (__int128)24) >> 64 != (24 * result) >> 63)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((unsigned __int128)(24 * result * (__int128)60) >> 64 != (1440 * result) >> 63)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((unsigned __int128)(1440 * result * (__int128)60) >> 64 != (86400 * result) >> 63)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v54 = (double)(86400 * result);
  v55 = v75;
  Date.init()(result);
  v56 = v80;
  v57 = v81;
  v58 = v76;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v76, &v25[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_firstAppLaunchDate], v81);
  v59 = Date.timeIntervalSince(_:)(v58);
  v60 = *(void (**)(char *, uint64_t))(v56 + 8);
  v60(v58, v57);
  v61 = ((uint64_t (*)(char *, uint64_t))v60)(v55, v57);
  if (v59 <= v54)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v77, v5);
    return 0;
  }
  v62 = v74;
  v63 = static Log.default.getter(v61);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.default.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    v66 = v6;
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "SeymourDiscoverySheetCoordinator: qualified to show intro sheet", v67, 2u);
    v68 = v67;
    v6 = v66;
    swift_slowDealloc(v68, -1, -1);
  }

  v37(v62, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v77, v5);
  return 1;
}

uint64_t sub_100021A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char v16;
  __n128 v17;
  void (*v18)(char *, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v1 = sub_100047110(&qword_10082C3C0);
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContentAvailability(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = v0 + OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailablity;
  swift_beginAccess(v11, v25, 0, 0);
  sub_100021CC0(v11, (uint64_t)v3, &qword_10082C3C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ContentAvailability.available(_:), v4);
    v12 = sub_1000083D8(&qword_100839C20, (uint64_t (*)(uint64_t))&type metadata accessor for ContentAvailability, (uint64_t)&protocol conformance descriptor for ContentAvailability);
    dispatch thunk of RawRepresentable.rawValue.getter(&v23, v4, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v21, v4, v12);
    v13 = v24;
    v14 = v22;
    if (v23 == v21 && v24 == v22)
    {
      swift_bridgeObjectRelease_n(v24, 2);
      v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v21, v22, 0);
      swift_bridgeObjectRelease(v13);
      v17 = swift_bridgeObjectRelease(v14);
      v18 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
      v18(v8, v4, v17);
      ((void (*)(char *, uint64_t))v18)(v10, v4);
      if ((v16 & 1) == 0)
        return 0;
    }
    return 1;
  }
  sub_10001BE90((uint64_t)v3, &qword_10082C3C0);
  return 0;
}

uint64_t sub_100021CC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100047110(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100021D04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v2 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v6 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v7 = *(void **)(a1 + 48);
  v8 = *(void **)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v28 = *(void **)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  v30 = *(void **)(a1 + 96);
  v31 = *(void **)(a1 + 104);
  v32 = *(void **)(a1 + 112);
  v33 = *(void **)(a1 + 120);
  v34 = *(void **)(a1 + 128);
  v35 = *(_QWORD *)(a1 + 144);
  v36 = *(_QWORD *)(a1 + 152);
  v37 = *(_QWORD *)(a1 + 168);
  v38 = *(_QWORD *)(a1 + 184);
  v39 = *(void **)(a1 + 200);
  v40 = *(_QWORD *)(a1 + 208);
  v11 = *(id *)a1;
  v12 = v2;
  v13 = v4;
  v14 = v3;
  v15 = v6;
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  swift_retain(v10);
  v20 = v28;
  swift_retain(v29);
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v38);
  v26 = v39;
  swift_retain(v40);
  return a1;
}

void sub_100021F0C(void *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t ObjectType;
  void *v6;
  id v7;

  v4 = IndexPath.section.getter();
  if (sub_100022000(v4) == 6
    || ((ObjectType = swift_getObjectType(a1),
         swift_conformsToProtocol2(ObjectType, &protocol descriptor for ActivityTileProtocol))
      ? (v6 = a1)
      : (v6 = 0),
        !v6))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000043, 0x80000001006906D0, "FitnessApp/ActivityTileViewController.swift", 43, 2, 628, 0);
    __break(1u);
  }
  else
  {
    v7 = a1;
    sub_100022010(a2);

  }
}

unint64_t sub_100022000(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

uint64_t sub_100022010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];

  v3 = sub_100047110(&qword_10082CDC8);
  v4 = __chkstk_darwin(v3);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v21[-v7];
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1 + 48;
  swift_beginAccess(v1 + 48, v22, 0, 0);
  v14 = *(_QWORD *)(v1 + 48);
  if (!*(_QWORD *)(v14 + 16))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return sub_100030740((uint64_t)v8);
  }
  swift_bridgeObjectRetain(v14);
  v15 = sub_10002252C(a1);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v10 + 16))(v8, *(_QWORD *)(v14 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v17, 1, v9);
  v18 = swift_bridgeObjectRelease(v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v18) == 1)
    return sub_100030740((uint64_t)v8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
  swift_beginAccess(v13, v21, 33, 0);
  sub_1004D1010(a1, (uint64_t)v6);
  sub_100030740((uint64_t)v6);
  swift_endAccess(v21);
  v20 = sub_100030B80();
  ImpressionsCalculator.removeElement(_:)(v12);
  swift_release(v20);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100022218(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_100047110(&qword_10082CDC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001BE90(a1, &qword_10082CDC8);
    sub_1004D1010(a2, (uint64_t)v8);
    v13 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_10001BE90((uint64_t)v8, &qword_10082CDC8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000223A4((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_1000223A4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10002252C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for ImpressionMetrics(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100401A2C();
      goto LABEL_7;
    }
    sub_1000227AC(v17, a3 & 1);
    v24 = sub_10002252C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1000226F4(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

unint64_t sub_10002252C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for IndexPath(0);
  v6 = sub_1000083D8(&qword_100832B20, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000225C4(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_100833818, (uint64_t)&protocol conformance descriptor for IndexPath);
}

unint64_t sub_1000225C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_1000083D8(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_1000226F4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for IndexPath(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for ImpressionMetrics(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

void sub_1000227AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for ImpressionMetrics(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for IndexPath(0);
  v54 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_100047110(&qword_100832B18);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v44 = v11;
LABEL_45:
    swift_release(v44);
    *v3 = v14;
    return;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = v3;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v53 = v11;
  swift_retain(v11);
  v20 = 0;
  v48 = a2;
  v21 = 16;
  if ((a2 & 1) != 0)
    v21 = 32;
  v52 = v21;
  v22 = v21;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_27;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v26 >= v50)
    {
      v45 = v53;
      swift_release(v53);
      v3 = v49;
      v27 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v45 + 32);
        if (v46 >= 64)
          bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v27 = -1 << v46;
        *(_QWORD *)(v45 + 16) = 0;
      }
LABEL_44:
      v44 = v45;
      goto LABEL_45;
    }
    v27 = v51;
    v28 = v51[v26];
    ++v20;
    if (!v28)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v50)
        goto LABEL_37;
      v28 = v51[v20];
      if (!v28)
        break;
    }
LABEL_26:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v20 << 6);
LABEL_27:
    v30 = v53;
    v31 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v22))(v10, *(_QWORD *)(v53 + 48) + v31 * v25, v8);
    v32 = *(_QWORD *)(v30 + 56);
    v33 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v22))(v55, v32 + v33 * v25, v57);
    v34 = *(_QWORD *)(v14 + 40);
    v35 = sub_1000083D8(&qword_100832B20, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v23 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v14 + 48) + v31 * v23, v10, v8);
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v14 + 56) + v33 * v23, v55, v57);
    ++*(_QWORD *)(v14 + 16);
  }
  v29 = v26 + 2;
  if (v29 >= v50)
  {
LABEL_37:
    v45 = v53;
    swift_release(v53);
    v3 = v49;
    if ((v48 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v28 = v51[v29];
  if (v28)
  {
    v20 = v29;
    goto LABEL_26;
  }
  while (1)
  {
    v20 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v20 >= v50)
      goto LABEL_37;
    v28 = v51[v20];
    ++v29;
    if (v28)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
}

uint64_t sub_100022BA4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_100022BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t Strong;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  __n128 v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  id v41;
  id v42;
  char v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  unsigned __int8 *v48;
  int v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t, __n128);
  __n128 v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t, __n128);
  Class isa;
  id v71;
  uint64_t ObjectType;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD aBlock[5];
  uint64_t v94;
  char v95[24];
  char v96[32];

  v3 = type metadata accessor for IndexPath(0);
  v80 = *(_QWORD *)(v3 - 8);
  v81 = v3;
  __chkstk_darwin(v3);
  v84 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100832500);
  __chkstk_darwin(v5);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v83 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v82 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + 16;
  v16 = static os_log_type_t.default.getter(v13);
  v17 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "ActivityTileViewController did receive didBecomeActiveNotification notification", 79, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(a2 + 16, v96, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v19 = (void *)Strong;
    v20 = objc_retain(*(id *)(Strong
                            + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_mindfulnessSessionDataProvider));

    objc_msgSend(v20, "startMindfulnessSessionQueryIfNeeded");
  }
  v85 = v7;
  swift_beginAccess(a2 + 16, v95, 0, 0);
  v21 = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (v21
    && (v22 = (void *)v21,
        v23 = objc_retain(*(id *)(v21
                                + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_achievementLocalizationProvider)),
        v22,
        v24 = objc_msgSend(v23, "name"),
        v23,
        v24))
  {

  }
  else
  {
    sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v79 = static OS_dispatch_queue.main.getter(v25);
    aBlock[4] = sub_10004E444;
    v94 = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_10078F618;
    v26 = _Block_copy(aBlock);
    v27 = v94;
    swift_retain(a2);
    swift_release(v27);
    v28 = v82;
    static DispatchQoS.unspecified.getter(v29);
    aBlock[0] = _swiftEmptyArrayStorage;
    v30 = sub_100028404((unint64_t *)&qword_1008268E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_100047110(&qword_100828C80);
    v78 = v12;
    v32 = v9;
    v33 = v31;
    v34 = sub_1000283C4((unint64_t *)&qword_1008268F0, &qword_100828C80);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v8, v30);
    v35 = (void *)v79;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v11, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v28, v78);
  }
  swift_beginAccess(v15, aBlock, 0, 0);
  v36 = (void *)swift_unknownObjectWeakLoadStrong(v15);
  v37 = v36;
  if (v36)
  {
    v38 = objc_msgSend(v36, "navigationController");

    v37 = objc_msgSend(v38, "visibleViewController");
  }
  v39 = v85;
  swift_beginAccess(v15, &v92, 0, 0);
  v40 = swift_unknownObjectWeakLoadStrong(v15);
  v41 = (id)v40;
  if (!v37)
  {
    if (!v40)
      goto LABEL_14;
LABEL_19:

    goto LABEL_20;
  }
  if (!v40)
  {
    v41 = v37;
    goto LABEL_19;
  }
  sub_10001E724(0, (unint64_t *)&qword_100828310, UIViewController_ptr);
  v42 = v37;
  v43 = static NSObject.== infix(_:_:)(v42, v41);

  if ((v43 & 1) == 0)
    goto LABEL_20;
LABEL_14:
  v44 = static os_log_type_t.info.getter();
  v45 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "ActivityTileViewController is visible, resuming video playback", 62, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v15, &v86, 0, 0);
  v46 = swift_unknownObjectWeakLoadStrong(v15);
  if (v46)
  {
    v47 = (void *)v46;
    v41 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10081D7D8 != -1)
      swift_once(&qword_10081D7D8, sub_10004CDAC);
    objc_msgSend(v41, "postNotificationName:object:", qword_10086A208, v47);

    goto LABEL_19;
  }
LABEL_20:
  swift_beginAccess(v15, &v91, 0, 0);
  v48 = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong(v15);
  if (v48)
  {
    v49 = v48[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_visibility];

    if (v49 == 2)
    {
      swift_beginAccess(v15, &v90, 0, 0);
      v50 = (void *)swift_unknownObjectWeakLoadStrong(v15);
      if (v50)
      {
        v51 = v50;
        v52 = objc_msgSend(v50, "tableView");

        if (v52)
        {
          swift_beginAccess(v15, &v89, 0, 0);
          v53 = swift_unknownObjectWeakLoadStrong(v15);
          if (v53)
          {
            v54 = (void *)v53;
            v55 = *(char **)(v53 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_impressionsTracker);
            swift_retain(v55);

            swift_beginAccess(v55 + 40, &v88, 1, 0);
            v56 = *((_QWORD *)v55 + 5);
            *((_QWORD *)v55 + 5) = &_swiftEmptyDictionarySingleton;
            swift_bridgeObjectRelease(v56);
            swift_beginAccess(v55 + 48, &v87, 1, 0);
            v57 = *((_QWORD *)v55 + 6);
            *((_QWORD *)v55 + 6) = &_swiftEmptyDictionarySingleton;
            swift_bridgeObjectRelease(v57);
            v58 = sub_100030B80();
            ImpressionsCalculator.removeAllElements()();
            v59 = objc_msgSend(v52, "indexPathsForVisibleRows", swift_release(v58).n128_f64[0]);
            if (v59)
            {
              v60 = v59;
              v82 = v55;
              v61 = v81;
              v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v81);

              v63 = *(_QWORD *)(v62 + 16);
              v79 = v62;
              if (v63)
              {
                v64 = v80;
                v65 = v62;
                v66 = v62
                    + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
                v83 = *(_QWORD *)(v80 + 72);
                v67 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v80 + 16);
                v68 = swift_bridgeObjectRetain(v65);
                while (1)
                {
                  v67(v39, v66, v61, v68);
                  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v64 + 56);
                  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v69)(v39, 0, 1, v61);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v39, 1, v61) == 1)
                    break;
                  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v84, v39, v61);
                  isa = IndexPath._bridgeToObjectiveC()().super.isa;
                  v71 = objc_msgSend(v52, "cellForRowAtIndexPath:", isa);

                  if (v71)
                  {
                    ObjectType = swift_getObjectType(v71);
                    v73 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ActivityTileProtocol);
                    if (v73)
                      v74 = v73;
                    else
                      v74 = 0;
                    if (v73)
                      v75 = (uint64_t)v71;
                    else
                      v75 = 0;
                    if (v75)
                    {
                      v76 = IndexPath.section.getter(v73);
                      if (v76 <= 5)
                        sub_10003003C(v75, v74, v76, v84, v52);
                    }

                    v39 = v85;
                  }
                  v64 = v80;
                  v61 = v81;
                  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v84, v81);
                  v66 += v83;
                  if (!--v63)
                    goto LABEL_43;
                }
              }
              else
              {
                v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v80 + 56);
                v68 = swift_bridgeObjectRetain(v62);
LABEL_43:
                v69(v39, 1, 1, v61, v68);
              }
              swift_bridgeObjectRelease_n(v79, 2);
              v77 = v82;
            }
            else
            {
              v77 = v55;
            }
            swift_release(v77);
          }

        }
      }
    }
  }
}

uint64_t sub_1000233DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  uint64_t v16;
  uint64_t Strong;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  int v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  _BYTE v48[4];
  unsigned int v49;
  void (*v50)(_BYTE *, uint64_t);

  v1 = v0;
  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v48[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v48[-v12];
  v14 = static Calendar.current.getter(v11);
  Date.init()(v14);
  Calendar.startOfDay(for:)(v10);
  v15 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v15(v10, v6);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v16 = v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_todayCell;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_todayCell);
  if (Strong)
  {
    v18 = (id)Strong;
    v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activityDataProvider);
    v20 = objc_msgSend(*(id *)(v19 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache), "activitySummaryForCacheIndex:", sub_1000237E8());
    if (v20)
    {
      v21 = v20;
      v22 = OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary;
      v23 = *(id *)(v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary);
      if (v23 && (v23 = objc_msgSend(v23, "_allFieldsAreEqual:", v21), (v23 & 1) != 0))
      {
        v24 = static os_log_type_t.default.getter(v23);
        v25 = HKLogActivity;
        os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "TodayActivityTileDataModel received updated activitySummary, but fields did not change. Not updating UI", 103, 2, _swiftEmptyArrayStorage);

      }
      else
      {
        v49 = static os_log_type_t.default.getter(v23);
        v50 = v15;
        v27 = (void *)HKLogActivity;
        v28 = sub_100047110((uint64_t *)&unk_100827460);
        v29 = swift_allocObject(v28, 72, 7);
        *(_OWORD *)(v29 + 16) = xmmword_100622F90;
        *(_QWORD *)(v29 + 56) = sub_100006224();
        *(_QWORD *)(v29 + 64) = sub_10004CE48();
        *(_QWORD *)(v29 + 32) = v21;
        v30 = v27;
        v31 = v21;
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v30, "TodayActivityTileDataModel did update activitySummary: %@", 57, 2, v29);

        v15 = v50;
        swift_bridgeObjectRelease(v29);
        v32 = *(void **)(v1 + v22);
        *(_QWORD *)(v1 + v22) = v21;
        v33 = v31;

        v34 = *(unsigned __int8 *)(v19 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser);
        v35 = v33;
        sub_100155318(v21, v34, 0, 0, 2);

        v18 = v35;
      }
    }
    else
    {
      v50 = v15;
      v36 = static os_log_type_t.default.getter(0);
      v37 = (void *)HKLogActivity;
      v38 = sub_100047110((uint64_t *)&unk_100827460);
      v39 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v39 + 16) = xmmword_100622F90;
      v40 = v37;
      v41 = Date.description.getter();
      v43 = v42;
      *(_QWORD *)(v39 + 56) = &type metadata for String;
      *(_QWORD *)(v39 + 64) = sub_100038CF8();
      *(_QWORD *)(v39 + 32) = v41;
      *(_QWORD *)(v39 + 40) = v43;
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v40, "TodayActivityTileDataModel did not find activitySummary for %{public}@", 70, 2, v39);

      swift_bridgeObjectRelease(v39);
      v44 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary) = 0;

      v45 = swift_unknownObjectWeakLoadStrong(v16);
      if (v45)
      {
        v46 = (void *)v45;
        sub_1001563EC();

        v18 = v46;
      }
      v15 = v50;
    }
  }
  else
  {
    v26 = static os_log_type_t.default.getter(0);
    v18 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v18, "TodayActivityTileDataModel attempted to configure today cell, but it was nil", 76, 2, _swiftEmptyArrayStorage);
  }

  return ((uint64_t (*)(_BYTE *, uint64_t))v15)(v13, v6);
}

uint64_t sub_1000237E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSDate v9;
  uint64_t v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  uint64_t v16;
  uint64_t v18;

  v0 = sub_100047110(&qword_100821648);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v1);
  v6 = (char *)&v18 - v5;
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v10 = type metadata accessor for Calendar(0);
  sub_10003CE9C(v10, (uint64_t)qword_100869D10);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  v12 = (id)_HKActivityCacheDateComponentsFromDate(v9.super.isa, isa);

  if (v12)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
  }
  else
  {
    v13 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  }
  sub_1000456B4((uint64_t)v6, (uint64_t)v8);
  sub_1000456FC((uint64_t)v8, (uint64_t)v3);
  type metadata accessor for DateComponents(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v13) != 1)
  {
    v15 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v13);
  }
  v16 = _HKCacheIndexFromDateComponents(v15);

  sub_1000239D0((uint64_t)v8);
  return v16;
}

uint64_t sub_1000239D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_100821648);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100023A10(double a1, double a2)
{
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v4._countAndFlagsBits = 0x203A746867696557;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  Double.write<A>(to:)(v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
  v5._object = (void *)0x800000010068C980;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  Double.write<A>(to:)(v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  return v7[0];
}

char *sub_100023CB0(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v46;
  __int128 v47;
  uint64_t v48;
  void *v49;

  v3 = v2;
  v6 = &v2[OBJC_IVAR___NLTVConnectionManager_presenter];
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR___NLTVConnectionManager_presenter], 0);
  v7 = OBJC_IVAR___NLTVConnectionManager_dependencies;
  type metadata accessor for Dependencies(0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v8 = v2;
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v11 = static Dependencies.standard(queue:)();

  *(_QWORD *)&v3[v7] = v11;
  swift_retain(v11);
  v12 = sub_100047110(&qword_100834F00);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&v47, 0, 0, v12);
  swift_release(v11);
  sub_10002411C(&v47, (uint64_t)&v8[OBJC_IVAR___NLTVConnectionManager_participantClient]);
  v13 = *(_QWORD *)&v3[v7];
  swift_retain(v13);
  v14 = sub_100047110(&qword_100834F08);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&v47, 0, 0, v14);
  swift_release(v13);
  sub_10002411C(&v47, (uint64_t)&v8[OBJC_IVAR___NLTVConnectionManager_browsingClient]);
  v15 = *(_QWORD *)&v3[v7];
  swift_retain(v15);
  v16 = sub_100047110(&qword_100834F10);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&v47, 0, 0, v16);
  swift_release(v15);
  sub_10002411C(&v47, (uint64_t)&v8[OBJC_IVAR___NLTVConnectionManager_sessionClient]);
  v17 = *(_QWORD *)&v3[v7];
  swift_retain(v17);
  v18 = sub_100047110((uint64_t *)&unk_1008361E0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(&v47, 0, 0, v18);
  swift_release(v17);
  v19 = v47;
  *(_OWORD *)&v8[OBJC_IVAR___NLTVConnectionManager_eventHub] = v47;
  v20 = type metadata accessor for SubscriptionToken(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = swift_unknownObjectRetain(v19);
  *(_QWORD *)&v8[OBJC_IVAR___NLTVConnectionManager_subscriptionToken] = SubscriptionToken.init(eventHub:)(v21, *((_QWORD *)&v19 + 1));
  swift_unknownObjectWeakAssign(v6, a1);
  v22 = &v8[OBJC_IVAR___NLTVConnectionManager_state];
  v23 = type metadata accessor for TVConnectionManager.State(0);
  swift_storeEnumTagMultiPayload(v22, v23, 2);
  v8[OBJC_IVAR___NLTVConnectionManager_isDiscoveryAllowed] = 0;
  v48 = sub_10001E724(0, &qword_100834F18, UNUserNotificationCenter_ptr);
  v49 = &protocol witness table for UNUserNotificationCenter;
  *(_QWORD *)&v47 = a2;
  v24 = type metadata accessor for GuestPairingNotificationCoordinator(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = a2;
  *(_QWORD *)&v8[OBJC_IVAR___NLTVConnectionManager_guestPairingNotificationCoordinator] = GuestPairingNotificationCoordinator.init(userNotificationCenter:)(&v47);

  v46.receiver = v8;
  v46.super_class = (Class)type metadata accessor for TVConnectionManager(0);
  v26 = (char *)objc_msgSendSuper2(&v46, "init");
  v27 = &v26[OBJC_IVAR___NLTVConnectionManager_eventHub];
  v28 = *(_QWORD *)&v26[OBJC_IVAR___NLTVConnectionManager_eventHub + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v26[OBJC_IVAR___NLTVConnectionManager_eventHub]);
  v30 = type metadata accessor for RemoteParticipantDiscovered(0);
  v31 = OBJC_IVAR___NLTVConnectionManager_subscriptionToken;
  v32 = *(_QWORD *)&v26[OBJC_IVAR___NLTVConnectionManager_subscriptionToken];
  v33 = swift_allocObject(&unk_1007A08C8, 24, 7);
  swift_unknownObjectWeakInit(v33 + 16, v26);
  v34 = v26;
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(&v47, v30, v32, sub_10046BA64, v33, v30, &protocol witness table for RemoteParticipantDiscovered, ObjectType, v28);
  swift_release(v33);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&v47);
  v35 = *((_QWORD *)v27 + 1);
  v36 = swift_getObjectType(*(_QWORD *)v27);
  v37 = type metadata accessor for RemoteParticipantLost(0);
  v38 = *(_QWORD *)&v26[v31];
  v39 = swift_allocObject(&unk_1007A08C8, 24, 7);
  swift_unknownObjectWeakInit(v39 + 16, v34);
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(&v47, v37, v38, sub_10046BA6C, v39, v37, &protocol witness table for RemoteParticipantLost, v36, v35);
  swift_release(v39);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&v47);
  v40 = *((_QWORD *)v27 + 1);
  v41 = swift_getObjectType(*(_QWORD *)v27);
  v42 = type metadata accessor for RemoteParticipantPasswordRequired(0);
  v43 = *(_QWORD *)&v26[v31];
  v44 = swift_allocObject(&unk_1007A08C8, 24, 7);
  swift_unknownObjectWeakInit(v44 + 16, v34);
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(&v47, v42, v43, sub_10046BA9C, v44, v42, &protocol witness table for RemoteParticipantPasswordRequired, v41, v40);
  swift_release(v44);

  _s10FitnessApp24HistoryViewActionContextVwxx_0(&v47);
  return v34;
}

uint64_t sub_10002411C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100024134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  _BYTE v22[24];

  v1 = v0;
  v2 = sub_100047110(&qword_100834EF8);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for TVConnectionManager.State(0);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static Log.default.getter(v10);
  v13._countAndFlagsBits = 0xD00000000000006DLL;
  v13._object = (void *)0x800000010069F880;
  v14._object = (void *)0x800000010069F9C0;
  v14._countAndFlagsBits = 0xD00000000000001ELL;
  Logger.trace(file:function:)(v13, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = v1 + OBJC_IVAR___NLTVConnectionManager_state;
  swift_beginAccess(v1 + OBJC_IVAR___NLTVConnectionManager_state, v22, 0, 0);
  sub_1000243C8(v15, (uint64_t)v7);
  v16 = *(unsigned __int8 *)(v1 + OBJC_IVAR___NLTVConnectionManager_isDiscoveryAllowed);
  v17 = *(int *)(v2 + 48);
  sub_1000244D0((uint64_t)v7, (uint64_t)v4);
  v4[v17] = v16;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  if (EnumCaseMultiPayload == 3)
  {
    if ((v16 & 1) == 0)
      sub_100468950();
  }
  else if (EnumCaseMultiPayload == 2 && v16 != 0)
  {
    sub_1000146A8();
  }
  return sub_1000242F8((uint64_t)v4);
}

uint64_t sub_1000242F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TVConnectionManager.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100024334(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for TVConnectionManager.State(uint64_t a1)
{
  return sub_100024334(a1, qword_100834EA8, (uint64_t)&nominal type descriptor for TVConnectionManager.State);
}

uint64_t sub_10002437C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = type metadata accessor for RemoteParticipant(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t sub_1000243C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVConnectionManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10002440C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for RemoteParticipant(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for RemoteParticipant(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t sub_1000244D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVConnectionManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000252E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_100025324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, const char *a7, void *a8)
{
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(void);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  const char *v44;
  uint64_t v45;
  id v46;
  char *v47;
  NSString v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  id v65;
  Class isa;
  NSString v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  id v70;
  NSString v71;
  unsigned __int8 v72;
  id v73;
  NSString v74;
  unsigned __int8 v75;
  id v76;
  NSString v77;
  unsigned __int8 v78;
  id v79;
  NSString v80;
  id v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  NSString v89;
  id v90;
  _QWORD *v91;
  id v92;
  NSString v93;
  id v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  objc_class *v100;
  id v101;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  const char *v119;
  _QWORD *v120;
  uint64_t v121;
  void (*v122)(void);
  objc_super v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[24];
  uint64_t v127;

  v9 = v8;
  v117 = a8;
  v118 = a6;
  v119 = a7;
  v115 = a1;
  v116 = a5;
  v106 = type metadata accessor for Logger(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v107 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v103 = (char *)&v103 - v18;
  v19 = sub_100047110((uint64_t *)&unk_100828370);
  v20 = __chkstk_darwin(v19);
  v112 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v110 = (char *)&v103 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v103 - v25;
  __chkstk_darwin(v24);
  v121 = (uint64_t)&v103 - v27;
  v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_isActive] = 0;
  v28 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_delegate];
  swift_unknownObjectWeakInit(&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_delegate], 0);
  v108 = v15;
  v29 = *(void (**)(void))(v15 + 56);
  v109 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastIntroSheetViewDate];
  v29();
  v30 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewVersion];
  *(_QWORD *)v30 = 0;
  v120 = v30;
  v30[8] = 1;
  v111 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_lastWhatsNewSheetViewDate];
  v122 = v29;
  v29();
  v31 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_introSheetConfiguration];
  v32 = type metadata accessor for IntroSheet(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_whatsNewSheetConfiguraion];
  v34 = type metadata accessor for WhatsNewSheet(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailablity];
  v36 = type metadata accessor for ContentAvailability(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_noticePrivacyPreference];
  v38 = type metadata accessor for NoticePrivacyPreference(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v40 = v115;
  v39 = v116;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_badgingProvider] = v115;
  swift_unknownObjectWeakAssign(v28, v39);
  v41 = OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_userDefaults;
  v42 = v117;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_userDefaults] = v117;
  v116 = (_QWORD *)a2;
  sub_1000252E0(a2, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_contentAvailabilityClient]);
  v114 = (_QWORD *)a3;
  sub_1000252E0(a3, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_engagementClient]);
  v113 = (_QWORD *)a4;
  sub_1000252E0(a4, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_privacyPreferenceClient]);
  v43 = &v9[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_eventHub];
  v45 = v118;
  v44 = v119;
  *v43 = v118;
  v43[1] = v44;
  v46 = v42;
  v47 = v9;
  swift_unknownObjectRetain(v40);
  swift_unknownObjectRetain(v45);
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v46, "objectForKey:", v48);

  v119 = "hasVisitedSeymourTab";
  if (v49)
  {
    _bridgeAnyObjectToAny(_:)(&v124, v49);
    swift_unknownObjectRelease(v49);
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
  }
  v50 = v121;
  v51 = v47;
  v52 = v108;
  sub_100025D58((uint64_t)&v124, (uint64_t)v126);
  if (v127)
  {
    v53 = swift_dynamicCast(v50, v126, (char *)&type metadata for Any + 8, v14, 6) ^ 1;
    v54 = v50;
  }
  else
  {
    sub_10001BE90((uint64_t)v126, (uint64_t *)&unk_100828420);
    v54 = v50;
    v53 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v122)(v54, v53, 1, v14);
  sub_100021CC0(v50, (uint64_t)v26, (uint64_t *)&unk_100828370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v26, 1, v14) == 1)
  {
    v55 = sub_10001BE90((uint64_t)v26, (uint64_t *)&unk_100828370);
    v56 = v104;
    v57 = static Log.default.getter(v55);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "SeymourDiscoverySheetCoordinator: fist app launch date not found, assume this is the first launch", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    v61 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v56, v106);
    v62 = v107;
    Date.init()(v61);
    v63 = &v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_firstAppLaunchDate];
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_firstAppLaunchDate], v62, v14);
    v64 = *(void **)&v9[v41];
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v62, v63, v14);
    v65 = v64;
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v62, v14);
    v67 = String._bridgeToObjectiveC()();
    objc_msgSend(v65, "setObject:forKey:", isa, v67);

  }
  else
  {
    v68 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v69 = v103;
    v68(v103, v26, v14);
    v68(&v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_firstAppLaunchDate], v69, v14);
  }
  v70 = *(id *)&v9[v41];
  v71 = String._bridgeToObjectiveC()();
  v72 = objc_msgSend(v70, "BOOLForKey:", v71);

  v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_forceShowingIntroSheet] = v72;
  v73 = *(id *)&v9[v41];
  v74 = String._bridgeToObjectiveC()();
  v75 = objc_msgSend(v73, "BOOLForKey:", v74);

  v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_forceShowingWhatsNewSheet] = v75;
  v76 = *(id *)&v9[v41];
  v77 = String._bridgeToObjectiveC()();
  v78 = objc_msgSend(v76, "BOOLForKey:", v77);

  v47[OBJC_IVAR____TtC10FitnessApp32SeymourDiscoverySheetCoordinator_hasVisitedSeymourTab] = v78;
  v79 = *(id *)&v9[v41];
  v80 = String._bridgeToObjectiveC()();
  v81 = objc_msgSend(v79, "objectForKey:", v80);

  if (v81)
  {
    _bridgeAnyObjectToAny(_:)(&v124, v81);
    swift_unknownObjectRelease(v81);
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
  }
  v83 = v113;
  v82 = v114;
  v84 = (uint64_t)v110;
  v85 = (uint64_t)v109;
  sub_100025D58((uint64_t)&v124, (uint64_t)v126);
  if (v127)
  {
    v86 = swift_dynamicCast(v84, v126, (char *)&type metadata for Any + 8, v14, 6) ^ 1;
    v87 = v84;
  }
  else
  {
    sub_10001BE90((uint64_t)v126, (uint64_t *)&unk_100828420);
    v87 = v84;
    v86 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v122)(v87, v86, 1, v14);
  swift_beginAccess(v85, v126, 33, 0);
  sub_100025DA0(v84, v85, (uint64_t *)&unk_100828370);
  swift_endAccess(v126);
  v88 = *(id *)&v9[v41];
  v89 = String._bridgeToObjectiveC()();
  v90 = objc_msgSend(v88, "integerForKey:", v89);

  v91 = v120;
  *v120 = v90;
  *((_BYTE *)v91 + 8) = 0;
  v92 = *(id *)&v9[v41];
  v93 = String._bridgeToObjectiveC()();
  v94 = objc_msgSend(v92, "objectForKey:", v93);

  if (v94)
  {
    _bridgeAnyObjectToAny(_:)(&v124, v94);
    swift_unknownObjectRelease(v94);
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
  }
  v95 = v116;
  v96 = (uint64_t)v112;
  sub_100025D58((uint64_t)&v124, (uint64_t)v126);
  if (v127)
  {
    v97 = swift_dynamicCast(v96, v126, (char *)&type metadata for Any + 8, v14, 6) ^ 1;
    v98 = v96;
  }
  else
  {
    sub_10001BE90((uint64_t)v126, (uint64_t *)&unk_100828420);
    v98 = v96;
    v97 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v122)(v98, v97, 1, v14);
  v99 = (uint64_t)v111;
  swift_beginAccess(v111, v126, 33, 0);
  sub_100025DA0(v96, v99, (uint64_t *)&unk_100828370);
  swift_endAccess(v126);

  v100 = (objc_class *)type metadata accessor for SeymourDiscoverySheetCoordinator(0);
  v123.receiver = v51;
  v123.super_class = v100;
  v101 = objc_msgSendSuper2(&v123, "init");
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v83);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v82);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v95);
  sub_10001BE90(v121, (uint64_t *)&unk_100828370);
  return v101;
}

uint64_t sub_100025D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100828420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025DA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100047110(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

id sub_100025DE4(char *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t ObjectType;
  _QWORD v12[5];
  _QWORD v13[5];

  v3 = v2;
  sub_1000252E0((uint64_t)&a1[OBJC_IVAR___CHFitnessAppContext_contentAvailabilityClient], (uint64_t)v13);
  v6 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_engagementAppBadgeProvider];
  v8 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_eventHub];
  v7 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_eventHub + 8];
  sub_1000252E0((uint64_t)&a1[OBJC_IVAR___CHFitnessAppContext_privacyPreferenceClient], (uint64_t)v12);
  objc_allocWithZone((Class)type metadata accessor for FitnessAppBadgeAggregator());
  swift_retain(v6);
  swift_unknownObjectRetain(v8);
  v9 = sub_100025EF4(a2, v13, v6, v8, v7, v12);

  swift_release(v6);
  swift_unknownObjectRelease(v8);

  ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 154, 7);
  return v9;
}

id sub_100025EF4(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _BYTE *v6;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  objc_super v22;

  swift_unknownObjectWeakInit(&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_delegate], 0);
  *(_QWORD *)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_appBadgeCount] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedActivitySharingCount] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges] = &_swiftEmptySetSingleton;
  v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_hasAmeliaBadge] = 0;
  v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_isBrowsingSeymour] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_engagementAppBadgeProvider] = a3;
  *(_QWORD *)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_activitySharingClient] = a1;
  sub_1000252E0((uint64_t)a2, (uint64_t)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_contentAvailabilityClient]);
  v13 = &v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_eventHub];
  *v13 = a4;
  v13[1] = a5;
  sub_1000252E0((uint64_t)a6, (uint64_t)&v6[OBJC_IVAR___CHFitnessAppBadgeAggregator_privacyPreferenceClient]);
  v22.receiver = v6;
  v22.super_class = (Class)type metadata accessor for FitnessAppBadgeAggregator();
  swift_retain(a3);
  v14 = a1;
  swift_unknownObjectRetain(a4);
  v15 = objc_msgSendSuper2(&v22, "init");
  v16 = (void *)objc_opt_self(NSNotificationCenter);
  v17 = v15;
  v18 = objc_msgSend(v16, "defaultCenter", v22.receiver, v22.super_class);
  v19 = qword_10081D5F0;
  v20 = v17;
  if (v19 != -1)
    swift_once(&qword_10081D5F0, sub_10004E29C);
  objc_msgSend(v18, "addObserver:selector:name:object:", v20, "onAvailabilityChange:", qword_100869F10, 0);

  _s10FitnessApp24HistoryViewActionContextVwxx_0(a6);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(a2);
  return v20;
}

id sub_1000260D0(char *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t ObjectType;
  _BYTE v16[40];
  _BYTE v17[40];
  _BYTE v18[40];

  v4 = v3;
  sub_1000252E0((uint64_t)&a1[OBJC_IVAR___CHFitnessAppContext_contentAvailabilityClient], (uint64_t)v18);
  sub_1000252E0((uint64_t)&a1[OBJC_IVAR___CHFitnessAppContext_engagementClient], (uint64_t)v17);
  sub_1000252E0((uint64_t)&a1[OBJC_IVAR___CHFitnessAppContext_privacyPreferenceClient], (uint64_t)v16);
  v9 = *(_QWORD *)&a1[OBJC_IVAR___CHFitnessAppContext_eventHub];
  v8 = *(const char **)&a1[OBJC_IVAR___CHFitnessAppContext_eventHub + 8];
  v10 = (void *)objc_opt_self(NSUserDefaults);
  swift_unknownObjectRetain(v9);
  v11 = objc_msgSend(v10, "standardUserDefaults");
  v12 = objc_allocWithZone((Class)type metadata accessor for SeymourDiscoverySheetCoordinator(0));
  v13 = sub_100025324(a2, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16, a3, v9, v8, v11);

  swift_unknownObjectRelease(a2);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(v9);

  ObjectType = swift_getObjectType(v4);
  swift_deallocPartialClassInstance(v4, ObjectType, *(unsigned int *)((swift_isaMask & *v4) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v4) + 0x34));
  return v13;
}

uint64_t sub_100026238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  v1 = v0;
  v2 = sub_100047110(&qword_100822E88);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Log.default.getter(v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updating availability", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_contentAvailabilityClient + 24);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_contentAvailabilityClient + 32);
  sub_100016804((_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_contentAvailabilityClient), v15);
  dispatch thunk of ContentAvailabilityClientProtocol.queryContentAvailability()(v15, v16);
  v17 = swift_allocObject(&unk_100789750, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v1);
  v18 = (void (*)(uint64_t (*)(uint64_t), uint64_t))Promise.operation.getter(v2);
  v20 = v19;
  v21 = swift_allocObject(&unk_100789778, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_100167CA4;
  *(_QWORD *)(v21 + 24) = v17;
  swift_retain(v17);
  v18(sub_100167CD8, v21);
  swift_release(v17);
  swift_release(v20);
  v22 = swift_release(v21);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v22);
}

uint64_t sub_100026438(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  uint64_t v12;
  char v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.startIndex.getter(v7);
    v10 = v9;
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)__CocoaSet.endIndex.getter(v7);
    v13 = static __CocoaSet.Index.== infix(_:_:)(v8, v10, v11, v12);
    swift_bridgeObjectRelease(v11, v14, v15, v16, v17, v18, v19, v20);
    if ((v13 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_10004CC80(a1);
  if ((v24 & 1) == 0)
  {
    v10 = v23;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v23)
    {
      v8 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_10054D66C(v8, v10, v6 != 0);
        return 0;
      }
LABEL_10:
      sub_10054BF80(v8, v10, v6 != 0, a1, a2, a3);
      v21 = v25;
      sub_10054D66C(v8, v10, v6 != 0);
      return v21;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  Swift::OpaquePointer v45;
  void *rawValue;
  Swift::OpaquePointer v47;
  uint64_t v48;
  Swift::OpaquePointer v49;
  Class v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Class *v55;
  Class v56;
  uint64_t v57;
  uint64_t *v58;
  Class v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Class isa;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  Class *v71;
  _QWORD v72[3];
  uint64_t v73;

  v70 = a3;
  v71 = a4;
  v6 = sub_100047110(&qword_1008283F8);
  __chkstk_darwin(v6);
  v68 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CatalogTipSectionItem(0);
  v66 = *(_QWORD *)(v8 - 8);
  isa = (Class)v8;
  v9 = __chkstk_darwin(v8);
  v65 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v64 = (uint64_t)&v59 - v11;
  v12 = sub_100047110(&qword_10082FF70);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v59 - v16;
  v18 = type metadata accessor for CatalogLockup(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v69 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110(&qword_10082FF78);
  __chkstk_darwin(v21);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ShelfLockupDescriptor(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v28;
  sub_100021CC0(a1, (uint64_t)v23, &qword_10082FF78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v29) == 1)
  {
    swift_release(v70);
    sub_10001BE90(a2, &qword_10082FF70);
    sub_10001BE90(a1, &qword_10082FF78);
    v30 = (uint64_t)v23;
    v31 = &qword_10082FF78;
  }
  else
  {
    v63 = a1;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v29);
    sub_100021CC0(a2, (uint64_t)v17, &qword_10082FF70);
    v32 = v19;
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v34 = v29;
    v35 = v18;
    v36 = a2;
    if (v33(v17, 1, v18) == 1)
    {
      swift_release(v70);
      sub_10001BE90(a2, &qword_10082FF70);
      sub_10001BE90(v63, &qword_10082FF78);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v34);
      v30 = (uint64_t)v17;
      v31 = &qword_10082FF70;
    }
    else
    {
      v60 = v25;
      v61 = v27;
      v62 = v34;
      v37 = v69;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v69, v17, v35);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v15, v37, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v15, 0, 1, v35);
      v38 = v70;
      swift_retain(v70);
      v39 = v68;
      sub_100010368((uint64_t)v15, v38, v68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class))(v66 + 48))(v39, 1, isa) != 1)
      {
        v42 = v64;
        sub_100026DEC(v39, v64);
        v43 = sub_100047110((uint64_t *)&unk_1008397B0);
        dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v72, 0, 0, v43);
        v68 = v35;
        sub_100016804(v72, v73);
        v44 = v61;
        v45._rawValue = (void *)ShelfLockupDescriptor.galleryNameTags.getter();
        v66 = v32;
        rawValue = v45._rawValue;
        isa = MediaTagStringBuilding.attributedString(for:)(v45).super.isa;
        swift_bridgeObjectRelease(rawValue);
        sub_100016804(v72, v73);
        v47._rawValue = (void *)ShelfLockupDescriptor.galleryDescriptionTags.getter();
        v59 = MediaTagStringBuilding.attributedString(for:)(v47).super.isa;
        swift_bridgeObjectRelease(v47._rawValue);
        v48 = v65;
        sub_10004EEB0(v42, v65);
        sub_100016804(v72, v73);
        v49._rawValue = (void *)ShelfLockupDescriptor.titleTags.getter();
        v50 = MediaTagStringBuilding.attributedString(for:)(v49).super.isa;
        v51 = -[objc_class string](v50, "string", swift_bridgeObjectRelease(v49._rawValue).n128_f64[0]);

        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;
        swift_release(v38);

        sub_10001BE90(v36, &qword_10082FF70);
        sub_10001BE90(v63, &qword_10082FF78);
        sub_100026E6C(v42);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v68);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v44, v62);
        v55 = v71;
        v56 = v59;
        *v71 = isa;
        v55[1] = v56;
        v57 = type metadata accessor for CatalogTipSection(0);
        sub_100026DEC(v48, (uint64_t)v55 + *(int *)(v57 + 24));
        v58 = (uint64_t *)((char *)v55 + *(int *)(v57 + 28));
        *v58 = v52;
        v58[1] = v54;
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v72);
        return (*(uint64_t (**)(Class *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v55, 0, 1, v57);
      }
      swift_release(v38);
      sub_10001BE90(v36, &qword_10082FF70);
      sub_10001BE90(v63, &qword_10082FF78);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v35);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
      v31 = &qword_1008283F8;
      v30 = v39;
    }
  }
  sub_10001BE90(v30, v31);
  v40 = type metadata accessor for CatalogTipSection(0);
  return (*(uint64_t (**)(Class *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v71, 1, 1, v40);
}

uint64_t sub_100026B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];

  v44 = a2;
  v45 = a3;
  v43 = a1;
  v6 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MetricClickElement(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_1008283F8);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CatalogTipSectionItem(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v4 + OBJC_IVAR____TtC10FitnessApp22CatalogTipActivityTile_tipSectionItem;
  swift_beginAccess(v20, v46, 0, 0);
  sub_1002A9770(v20, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1002A97B8((uint64_t)v15);
    v21 = type metadata accessor for ImpressionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a4, 1, 1, v21);
  }
  else
  {
    sub_100026DEC((uint64_t)v15, (uint64_t)v19);
    v23 = &v19[*(int *)(v16 + 28)];
    v24 = *(_QWORD *)v23;
    v41 = *((_QWORD *)v23 + 1);
    v25 = v41;
    v42 = v24;
    v26 = v44;
    swift_bridgeObjectRetain(v44);
    v27 = swift_bridgeObjectRetain(v25);
    v28 = (void *)ShelfLockupAttributedTagStrings.title.getter(v27);
    v29 = a4;
    v30 = objc_msgSend(v28, "string");

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v40 = v32;

    v33 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for MetricClickElement.button(_:), v9);
    v34 = static MetricConstants.itemIdentifierType.getter(v33);
    v36 = v35;
    v37 = sub_100030A4C((uint64_t)_swiftEmptyArrayStorage);
    ScalarDictionary.init()();
    ImpressionMetrics.init(parentId:elementId:name:clickElement:index:idType:additionalFields:custom:)(v43, v26, v42, v41, v31, v40, v12, v45, v34, v36, v37, v8);
    sub_100026E6C((uint64_t)v19);
    v38 = type metadata accessor for ImpressionMetrics(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v29, 0, 1, v38);
  }
}

uint64_t sub_100026DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003D0D40);
}

uint64_t sub_100026DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CatalogTipSectionItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CatalogTipSectionItem(uint64_t a1)
{
  uint64_t result;

  result = qword_100831CB0;
  if (!qword_100831CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CatalogTipSectionItem);
  return result;
}

uint64_t sub_100026E6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CatalogTipSectionItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100026EA8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ShelfLockupAttributedTagStrings(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Artwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v9 = a1 + a2[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  v10 = a1 + a2[12];
  v11 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for ActivityStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void sub_100027084()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t ObjCClassFromMetadata;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65[5];
  objc_super v66;

  v1 = v0;
  v66.receiver = v0;
  v66.super_class = (Class)type metadata accessor for ActivityTileViewController();
  objc_msgSendSuper2(&v66, "viewDidLoad");
  v2 = objc_msgSend(v0, "navigationController");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "navigationBar");

    objc_msgSend(v4, "setPrefersLargeTitles:", 1);
  }
  v5 = objc_msgSend(v1, "navigationItem");
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setTitle:", v11, swift_bridgeObjectRelease(v10).n128_f64[0]);

  sub_100014278();
  v12 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_accountButton];
  objc_msgSend(v12, "setFrame:", 0.0, 0.0, 34.0, 34.0);
  v13 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "nonGradientTextColor");

  objc_msgSend(v12, "setTintColor:", v15);
  objc_msgSend(v12, "addTarget:action:forControlEvents:", v1, "accountButtonTapped:", 64);
  v16 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v16, "_setLargeTitleAccessoryView:alignToBaseline:", v12, 0);

  v17 = objc_msgSend(v1, "tableView");
  if (!v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v18 = v17;
  objc_msgSend(v17, "setEstimatedRowHeight:", 100.0);

  v19 = objc_msgSend(v1, "tableView");
  if (!v19)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = v19;
  objc_msgSend(v19, "setEstimatedSectionHeaderHeight:", 100.0);

  v21 = objc_msgSend(v1, "tableView");
  if (!v21)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v22 = v21;
  objc_msgSend(v21, "setSectionHeaderTopPadding:", 0.0);

  v23 = objc_msgSend(v1, "tableView");
  if (!v23)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v24 = v23;
  objc_msgSend(v23, "setSeparatorStyle:", 0);

  v25 = objc_msgSend(v1, "tableView");
  if (!v25)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v26 = v25;

  v27 = objc_msgSend(v1, "tableView");
  if (!v27)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v28 = v27;
  objc_msgSend(v27, "contentInset");
  objc_msgSend(v28, "setContentInset:", -13.0);

  v29 = objc_msgSend(v1, "tableView");
  if (!v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v30 = v29;
  objc_msgSend(v29, "contentInset");
  objc_msgSend(v30, "setContentInset:");

  v31 = objc_msgSend(v1, "tableView");
  if (!v31)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v32 = v31;
  v33 = type metadata accessor for ActivityTileSectionHeader();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v33);
  v35 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "registerClass:forHeaderFooterViewReuseIdentifier:", ObjCClassFromMetadata, v35);

  v36 = sub_10004E360();
  v37 = v36;
  v38 = *(_QWORD *)(v36 + 16);
  if (v38)
  {
    v39 = (uint64_t *)(v36 + 40);
    while (1)
    {
      v40 = *(v39 - 1);
      v41 = *v39;
      v42 = objc_msgSend(v1, "tableView");
      if (!v42)
        break;
      v43 = v42;
      v44 = swift_getObjCClassFromMetadata(v40);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      v46 = v45;
      v47 = String._bridgeToObjectiveC()();
      objc_msgSend(v43, "registerClass:forCellReuseIdentifier:", v44, v47, swift_bridgeObjectRelease(v46).n128_f64[0]);

      v39 += 2;
      if (!--v38)
        goto LABEL_16;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_16:
  swift_bridgeObjectRelease(v37);
  v48 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel];
  v49 = swift_allocObject(&unk_10078F0B0, 24, 7);
  swift_unknownObjectWeakInit(v49 + 16, v1);
  v50 = *(_QWORD *)(v48 + 56);
  v51 = *(_QWORD *)(v48 + 64);
  *(_QWORD *)(v48 + 56) = sub_10003B3B0;
  *(_QWORD *)(v48 + 64) = v49;
  sub_100022BA4(v50, v51);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityDataProvider]+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener)+ OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers), "addObject:", v1);
  sub_10001BECC();
  v52 = objc_msgSend(v1, "tableView");
  if (v52)
  {
    v65[0] = v52;
    KeyPath = swift_getKeyPath(&unk_10062E600);
    v54 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v54 + 16, v1);
    v55 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 3, sub_10004BB48, v54, &protocol witness table for NSObject);
    swift_release(KeyPath);
    swift_release(v54);

    v56 = sub_100047110((uint64_t *)&unk_100828340);
    v57 = swift_allocObject(v56, 40, 7);
    *(_OWORD *)(v57 + 16) = xmmword_100623630;
    *(_QWORD *)(v57 + 32) = v55;
    v65[0] = (id)v57;
    specialized Array._endMutation()(v57);
    v58 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_keyValueObservers];
    *(id *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_keyValueObservers] = v65[0];
    swift_bridgeObjectRelease(v58);
    v59 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_eventHub + 8];
    ObjectType = swift_getObjectType(*(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_eventHub]);
    v61 = type metadata accessor for AvatarSettingsChanged(0);
    v62 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_subscriptionToken];
    v63 = swift_allocObject(&unk_10078F0B0, 24, 7);
    swift_unknownObjectWeakInit(v63 + 16, v1);
    v64 = sub_100028404(&qword_100828448, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AvatarSettingsChanged, (uint64_t)&protocol conformance descriptor for AvatarSettingsChanged);
    swift_retain(v63);
    dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(v65, v61, v62, sub_10004E4D4, v63, v61, v64, ObjectType, v59);
    swift_release(v63);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v65);
    swift_release(v63);
    return;
  }
LABEL_28:
  __break(1u);
}

unint64_t sub_1000277CC()
{
  return 0xD000000000000014;
}

void sub_1000277E8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

double sub_100027838(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10001E724(0, &qword_100823010, UNNotificationSettings_ptr);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v5, &protocol witness table for String);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

uint64_t sub_1000278B4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1000278C8(uint64_t a1)
{
  return sub_1000278B4(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000278D4);
}

void sub_1000278D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, __n128))
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[72];
  _BYTE v38[48];

  v8 = sub_100047110(&qword_100820020);
  inited = swift_initStackObject(v8, v38);
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = static EngagementConstants.badgeNewFeaturesIdentifier.getter();
  *(_QWORD *)(inited + 40) = v10;
  swift_bridgeObjectRetain(a3);
  v12 = sub_100027ABC(v11, inited);
  swift_bridgeObjectRelease(a3);
  v13 = v12[2];
  swift_bridgeObjectRelease(v12);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v14 = swift_initStackObject(v8, v37);
  *(_OWORD *)(v14 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v14 + 32) = static EngagementConstants.badgeOffersIdentifier.getter();
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = static EngagementConstants.badgeHardwareOfferIdentifier.getter();
  *(_QWORD *)(v14 + 56) = v16;
  swift_bridgeObjectRetain(a3);
  v18 = sub_100027ABC(v17, v14);
  swift_bridgeObjectRelease(a3);
  v19 = v18[2];
  swift_bridgeObjectRelease(v18);
  swift_setDeallocating(v14);
  v20 = swift_arrayDestroy(v14 + 32, *(_QWORD *)(v14 + 16), &type metadata for String);
  v21 = v13 + v19;
  if (__OFADD__(v13, v19))
  {
    __break(1u);
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(a3 + 16);
  v23 = v22 - v21;
  if (__OFSUB__(v22, v21))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v24 = static EngagementConstants.notificationNewFeaturesTopic.getter(v20);
  v26 = v25;
  v27 = sub_100027D44(a4, a1, v24, v25);
  v28 = swift_bridgeObjectRelease(v26);
  if ((v27 & 1) == 0)
    v13 = 0;
  v29 = static EngagementConstants.notificationOffersTopic.getter(v28);
  v31 = v30;
  v32 = sub_100027D44(a4, a1, v29, v30);
  v33 = swift_bridgeObjectRelease(v31);
  v34 = v23 + v13;
  if (__OFADD__(v23, v13))
    goto LABEL_13;
  if ((v32 & 1) != 0)
    v35 = v19;
  else
    v35 = 0;
  if (!__OFADD__(v34, v35))
  {
    a5(v34 + v35, v33);
    return;
  }
LABEL_14:
  __break(1u);
}

_QWORD *sub_100027ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  __n128 v24;
  void (*v25)(char *, char *, uint64_t, __n128);
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD v30[2];
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  _QWORD *v42;

  v5 = type metadata accessor for EngagementBadge(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v34 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)v30 - v9;
  result = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v30[1] = v2;
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v40 = *(_QWORD *)(v6 + 72);
    v31 = v13;
    v38 = a1 + v13;
    v37 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v32 = (_QWORD *)(a2 + 40);
    v33 = a2;
    v35 = v6;
    v36 = v5;
    v37(v10, a1 + v13, v5);
    while (1)
    {
      v14 = *(_QWORD *)(a2 + 16);
      if (v14)
      {
        swift_bridgeObjectRetain(a2);
        v15 = v32;
        while (1)
        {
          v16 = *(v15 - 1);
          v17 = *v15;
          v18 = swift_bridgeObjectRetain(*v15);
          v19 = EngagementBadge.identifier.getter(v18);
          v21 = v20;
          v41[2] = v19;
          v41[3] = v20;
          v41[0] = v16;
          v41[1] = v17;
          v22 = sub_100038CA0();
          v23 = StringProtocol.contains<A>(_:)(v41, &type metadata for String, &type metadata for String, v22, v22);
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease(v21);
          if ((v23 & 1) != 0)
            break;
          v15 += 2;
          if (!--v14)
          {
            a2 = v33;
            swift_bridgeObjectRelease(v33);
            v6 = v35;
            v5 = v36;
            goto LABEL_3;
          }
        }
        a2 = v33;
        v24 = swift_bridgeObjectRelease(v33);
        v25 = *(void (**)(char *, char *, uint64_t, __n128))(v35 + 32);
        v25(v34, v10, v36, v24);
        v26 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_1001216F8(0, v26[2] + 1, 1);
          v26 = v42;
        }
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_1001216F8(v27 > 1, v28 + 1, 1);
          v26 = v42;
        }
        v26[2] = v28 + 1;
        v29 = (char *)v26 + v31 + v28 * v40;
        v5 = v36;
        ((void (*)(char *, char *, uint64_t))v25)(v29, v34, v36);
        v42 = v26;
        v6 = v35;
      }
      else
      {
LABEL_3:
        (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      }
      if (++v12 == v39)
        return v42;
      v37(v10, v38 + v40 * v12, v5);
    }
  }
  return result;
}

uint64_t sub_100027D44(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  id v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v15 = (char *)&v29 - v14;
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a4);
    v16 = sub_100438F74(a3, a4);
    if ((v17 & 1) != 0)
    {
      v18 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v16);
      if (objc_msgSend(v18, "badgeSetting", swift_bridgeObjectRelease(a4).n128_f64[0]) == (id)2)
      {

        return 1;
      }
      static Log.engagement.getter();
      v24 = swift_bridgeObjectRetain_n(a4, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v32 = v30;
        *(_DWORD *)v27 = 136315138;
        v29 = v27 + 4;
        swift_bridgeObjectRetain(a4);
        v31 = sub_10003E8EC(a3, a4, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v29);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Engagement app badging disabled: %s", v27, 0xCu);
        v28 = v30;
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      return 0;
    }
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  if (objc_msgSend(a1, "badgeSetting", v13) == (id)2)
    return 1;
  v20 = static Log.engagement.getter();
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Engagement overall app badging disabled", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return 0;
}

uint64_t sub_100028038(uint64_t a1)
{
  return sub_1000278B4(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028044);
}

void sub_100028044(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  _QWORD *v18;

  v12 = (_QWORD *)swift_allocObject(&unk_100789868, 56, 7);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a1;
  v12[5] = a5;
  v12[6] = a6;
  v17[4] = sub_1000278C8;
  v18 = v12;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100027838;
  v17[3] = &unk_100789880;
  v13 = _Block_copy(v17);
  v14 = v18;
  v15 = a3;
  swift_bridgeObjectRetain(a4);
  v16 = a1;
  swift_retain(a6);
  objc_msgSend(a2, "getNotificationSettingsForTopicsWithCompletionHandler:", v13, swift_release(v14).n128_f64[0]);
  _Block_release(v13);
}

uint64_t sub_100028138(uint64_t a1)
{
  uint64_t *v1;

  return sub_100028144(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100028144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v13 - 8);
  v28 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_1007898B8, 56, 7);
  v18[2] = a2;
  v18[3] = a1;
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a5;
  aBlock[4] = sub_10003BE18;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_1007898D0;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  swift_retain(a2);
  swift_retain(a3);
  sub_10003AFE0(a4, a5);
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100047110(&qword_100828C80);
  v24 = sub_100028384((unint64_t *)&qword_1008268F0, &qword_100828C80, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
}

uint64_t sub_100028384(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007050(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000283C4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007050(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100028404(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000284FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;

  v15 = a1;
  v1 = sub_100047110(&qword_1008283E8);
  __chkstk_darwin(v1);
  v12 = sub_100047110(&qword_1008283F0);
  v11[1] = *(_QWORD *)(v12 - 8);
  v2 = __chkstk_darwin(v12);
  v11[0] = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v13 = (char *)v11 - v4;
  v5 = sub_100047110(&qword_1008283F8);
  __chkstk_darwin(v5);
  v6 = sub_100047110(&qword_100824DE0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for CatalogTipSection(0);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for FitnessPlusStackViewModel(0);
  v9 = __chkstk_darwin(v8);
  v10 = IndexPath.section.getter(v9);
  v14 = sub_100022000(v10);
  __asm { BR              X10 }
}

id sub_1000286E0()
{
  uint64_t v0;
  NSString v1;
  Class isa;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  void *v14;
  id v15;
  id v16;
  char v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;

  v1 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(*(id *)(v0 - 224), "dequeueReusableCellWithIdentifier:forIndexPath:", v1, isa);

  v4 = type metadata accessor for TodayActivityTile();
  v5 = swift_dynamicCastClass(v3, v4);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v0 - 240);
    v8 = *(void **)(v7 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_fiuiFormattingManager);
    v9 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager) = v8;
    v3 = v3;
    v10 = v8;

    v11 = *(_QWORD *)(*(_QWORD *)(v7 + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel)
                    + 16);
    v12 = v11 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_todayCell;
    Strong = swift_unknownObjectWeakLoadStrong(v11 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_todayCell);
    if (Strong
      && (v14 = (void *)Strong,
          v15 = v3,
          v16 = v14,
          v17 = static NSObject.== infix(_:_:)(v16, v6),
          v16,
          v16,
          v15,
          (v17 & 1) != 0))
    {

      v3 = v15;
    }
    else
    {
      swift_unknownObjectWeakAssign(v12, v6);
      v18 = *(void **)(v11 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary);
      *(_QWORD *)(v11 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary) = 0;

      sub_100019464(*(_BYTE *)(*(_QWORD *)(v11
                                         + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activityDataProvider)
                             + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser));
      sub_1000233DC();

    }
  }
  v19 = *(_QWORD *)(v0 - 232);
  v20 = v3;
  v21 = IndexPath.row.getter(v20);
  sub_100029500(v21, v19);
  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setAccessibilityIdentifier:", v24, swift_bridgeObjectRelease(v23).n128_f64[0]);

  objc_msgSend(v20, "setSelectionStyle:", 0);
  return v20;
}

void sub_100029414()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 168) = 0;
  *(_QWORD *)(v0 - 160) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 - 160));
  JUMPOUT(0x100029454);
}

uint64_t type metadata accessor for FitnessPlusStackViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10082DC30;
  if (!qword_10082DC30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FitnessPlusStackViewModel);
  return result;
}

void sub_100029500(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100029554(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  uint64_t v6;

  v1._countAndFlagsBits = a1 + 2;
  v1._object = (void *)0x8000000100688390;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x8000000100688390);
  v2._countAndFlagsBits = 0x2E6C6C65432ELL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = ((uint64_t (*)(void *, void *))dispatch thunk of CustomStringConvertible.description.getter)(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t type metadata accessor for TrendsOnBoardingActivityTile()
{
  return objc_opt_self(_TtC10FitnessApp28TrendsOnBoardingActivityTile);
}

void sub_10002963C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews);
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews), 2);
    v6 = _CocoaArrayWrapper.endIndex.getter(v10);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews), 2);
    if (!v6)
      goto LABEL_13;
  }
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v8 = *(id *)(v5 + 8 * i + 32);
    v9 = v8;
    objc_msgSend(v8, "removeFromSuperview");

  }
LABEL_13:
  swift_bridgeObjectRelease_n(v5, 2);
  v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_configuration);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_configuration);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_configuration + 8);
  *v11 = a1;
  v11[1] = a2;
  sub_1000297BC(a1, a2);
  sub_1000297A8(v12, v13);
  if (a1 != 1)
  {
    if (a1 == 2)
      sub_10024E4CC();
    else
      sub_10003313C();
  }
}

uint64_t sub_1000297A8(uint64_t result, uint64_t a2)
{
  if ((unint64_t)(result - 1) >= 2)
    return sub_100022BA4(result, a2);
  return result;
}

uint64_t sub_1000297BC(uint64_t result, uint64_t a2)
{
  if ((unint64_t)(result - 1) >= 2)
    return sub_10003AFE0(result, a2);
  return result;
}

void sub_1000297D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  uint64_t ObjCClassFromMetadata;
  void *v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  char v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  const mach_header_64 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  const mach_header_64 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *Strong;
  void *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v134;
  _QWORD v135[3];
  _BYTE v136[16];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;

  v4 = v3;
  LOBYTE(v5) = a3;
  ObjectType = swift_getObjectType(v3);
  v8 = ObjectType;
  if (a2)
  {
    v9 = static os_log_type_t.error.getter(ObjectType);
    v10 = (void *)HKLogActivity;
    v11 = v9;
    if (os_log_type_enabled(HKLogActivity, v9))
    {
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      v12 = v10;
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v137 = v14;
      *(_DWORD *)v13 = 136315394;
      v15 = _typeName(_:qualified:)(v8, 0);
      v17 = v16;
      *(_QWORD *)&v140 = sub_10003E8EC(v15, v16, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, (char *)&v140 + 8, v13 + 4);
      swift_bridgeObjectRelease(v17);
      *(_WORD *)(v13 + 12) = 2080;
      swift_getErrorValue(a2, v136, v135);
      v18 = Error.localizedDescription.getter(v135[1], v135[2]);
      v20 = v19;
      *(_QWORD *)&v140 = v18;
      *((_QWORD *)&v140 + 1) = v19;
      v21 = sub_100047110(&qword_10082B520);
      v22 = Optional.description.getter(v21);
      v24 = v23;
      swift_bridgeObjectRelease(v20);
      *(_QWORD *)&v140 = sub_10003E8EC(v22, v24, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, (char *)&v140 + 8, v13 + 14);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v12, v11, "%s failed to fetch Activity goals: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    return;
  }
  if (!a1)
    return;
  v25 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a1 >> 62)
    goto LABEL_41;
  v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v26)
    goto LABEL_7;
  while (2)
  {
    v27 = String._bridgeToObjectiveC()();
    HKNSOperatingSystemVersionFromString(&v140);
    v128 = *((_QWORD *)&v140 + 1);
    v130 = v140;
    v127 = v141;

    v28 = (uint64_t)_swiftEmptyArrayStorage;
    *(_QWORD *)&v140 = _swiftEmptyArrayStorage;
    v120 = v4;
    v121 = v5;
    if (!v26)
    {
      v41 = (unint64_t)_swiftEmptyArrayStorage;
      v132 = 0;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_46;
      break;
    }
    v131 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v131);
    if (v26 < 1)
    {
      __break(1u);
      __break(1u);
      return;
    }
    v30 = (void *)ObjCClassFromMetadata;
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v26; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v34 = *(id *)(a1 + 8 * i + 32);
      v35 = v34;
      v36 = objc_msgSend(v34, "sampleType");
      v37 = objc_msgSend(v30, "calorieGoal");
      v38 = v37;
      if (!v36)
      {
        if (!v37)
        {
LABEL_11:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          v32 = *(_QWORD *)(v140 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
          v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v35);
          specialized ContiguousArray._endMutation()(v33);
          continue;
        }
        goto LABEL_23;
      }
      if (!v37)
      {
        v38 = v36;
LABEL_23:

        goto LABEL_24;
      }
      v39 = v36;
      v40 = static NSObject.== infix(_:_:)(v39, v38);

      if ((v40 & 1) != 0)
        goto LABEL_11;
LABEL_24:

    }
    swift_bridgeObjectRelease(a1);
    v41 = v140;
    LOBYTE(v5) = v121;
    v28 = (uint64_t)_swiftEmptyArrayStorage;
    v132 = v26;
    if ((v140 & 0x8000000000000000) != 0)
    {
LABEL_46:
      v48 = swift_retain(v41);
      v49 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_release(v41);
      v122 = v49;
      if (!v49)
        goto LABEL_47;
LABEL_30:
      swift_retain(v41);
      v42 = 4;
      while (1)
      {
        v43 = (v41 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v41)
            : *(id *)(v41 + 8 * v42);
        v44 = v43;
        v5 = v42 - 3;
        if (__OFADD__(v42 - 4, 1))
          break;
        v45 = objc_msgSend(v43, "sourceRevision");
        objc_msgSend(v45, "operatingSystemVersion");
        v46 = v141;
        v123 = v140;

        v140 = v123;
        v141 = v46;
        v137 = v130;
        v138 = v128;
        v139 = v127;
        if (HKNSOperatingSystemVersionCompare(&v140, &v137) == -1)
        {
          swift_release_n(v41, 2);
          v119 = 1;
          v26 = v132;
          goto LABEL_39;
        }

        ++v42;
        v26 = v132;
        if (v5 == v122)
        {
          swift_release_n(v41, 2);
          v119 = 0;
          v44 = 0;
LABEL_39:
          LOBYTE(v5) = v121;
          goto LABEL_48;
        }
      }
      __break(1u);
LABEL_41:
      if (a1 >= 0)
        v47 = v25;
      else
        v47 = a1;
      swift_bridgeObjectRetain(a1);
      v26 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease(a1);
      if (v26)
        continue;
LABEL_7:
      if ((v5 & 1) == 0)
        return;
      continue;
    }
    break;
  }
  if ((v41 & 0x4000000000000000) != 0)
    goto LABEL_46;
  v122 = *(_QWORD *)(v41 + 16);
  if (v122)
    goto LABEL_30;
LABEL_47:
  swift_release(v41);
  v119 = 0;
  v44 = 0;
LABEL_48:

  *(_QWORD *)&v140 = _swiftEmptyArrayStorage;
  if (v26)
  {
    v124 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
    v50 = (void *)swift_getObjCClassFromMetadata(v124);
    swift_bridgeObjectRetain(a1);
    v51 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, a1);
      else
        v54 = *(id *)(a1 + 8 * v51 + 32);
      v55 = v54;
      v56 = objc_msgSend(v54, "sampleType");
      v57 = objc_msgSend(v50, "moveMinuteGoal");
      v58 = v57;
      if (v56)
      {
        if (!v57)
        {
          v58 = v56;
LABEL_62:

LABEL_63:
          goto LABEL_51;
        }
        v59 = v56;
        v60 = static NSObject.== infix(_:_:)(v59, v58);

        if ((v60 & 1) == 0)
          goto LABEL_63;
      }
      else if (v57)
      {
        goto LABEL_62;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      v52 = *(_QWORD *)(v140 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v52);
      v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v55);
      specialized ContiguousArray._endMutation()(v53);
LABEL_51:
      if (v26 == ++v51)
      {
        swift_bridgeObjectRelease(a1);
        v28 = v140;
        v4 = v120;
        LOBYTE(v5) = v121;
        break;
      }
    }
  }
  if (v28 < 0 || (v28 & 0x4000000000000000) != 0)
    goto LABEL_159;
  v61 = *(_QWORD *)(v28 + 16);
  if (v61)
    goto LABEL_68;
LABEL_76:
  while (2)
  {
    swift_release(v28);
    LODWORD(v127) = 0;
    v67 = 0;
    v68 = 0;
    if (!v26)
      goto LABEL_110;
LABEL_79:
    v126 = v61;
    v69 = sub_10001E724(0, (unint64_t *)&unk_100828350, HKSampleType_ptr);
    v28 = swift_getObjCClassFromMetadata(v69);
    v70 = a1 & 0xC000000000000001;
    swift_bridgeObjectRetain(a1);
    v71 = 4;
    v130 = v28;
    while (2)
    {
      v5 = v71 - 4;
      if (v70)
        v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v71 - 4, a1);
      else
        v72 = *(id *)(a1 + 8 * v71);
      v73 = v72;
      v26 = v71 - 3;
      if (!__OFADD__(v5, 1))
      {
        v4 = (uint64_t)objc_msgSend(v72, "sampleType");
        v74 = objc_msgSend((id)v28, "exerciseGoal");
        v75 = v74;
        if (v4)
        {
          if (v74)
          {
            v76 = (id)v4;
            v4 = static NSObject.== infix(_:_:)(v76, v75);

            v28 = v130;
            if ((v4 & 1) != 0)
            {
LABEL_93:

              LODWORD(v128) = 1;
LABEL_94:
              swift_bridgeObjectRelease(a1);
              swift_bridgeObjectRetain(a1);
              v77 = 4;
              while (2)
              {
                v5 = v77 - 4;
                if (v70)
                  v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77 - 4, a1);
                else
                  v78 = *(id *)(a1 + 8 * v77);
                v79 = v78;
                v26 = v77 - 3;
                if (__OFADD__(v5, 1))
                  goto LABEL_157;
                v4 = (uint64_t)objc_msgSend(v78, "sampleType");
                v80 = objc_msgSend((id)v28, "standGoal");
                v81 = v80;
                if (v4)
                {
                  if (v80)
                  {
                    v82 = (id)v4;
                    v4 = static NSObject.== infix(_:_:)(v82, v81);

                    if ((v4 & 1) != 0)
                    {
LABEL_108:

                      v67 = 1;
                      goto LABEL_109;
                    }
                    goto LABEL_97;
                  }
                  v81 = (void *)v4;
                }
                else if (!v80)
                {
                  goto LABEL_108;
                }

LABEL_97:
                ++v77;
                if (v26 == v132)
                {
                  v67 = 0;
LABEL_109:
                  swift_bridgeObjectRelease(a1);
                  v4 = v120;
                  LOBYTE(v5) = v121;
                  v61 = v126;
                  v68 = v128;
                  goto LABEL_110;
                }
                continue;
              }
            }
            goto LABEL_82;
          }
          v75 = (void *)v4;
        }
        else if (!v74)
        {
          goto LABEL_93;
        }

LABEL_82:
        ++v71;
        if (v26 == v132)
        {
          LODWORD(v128) = 0;
          goto LABEL_94;
        }
        continue;
      }
      break;
    }
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    v118 = swift_retain(v28);
    v61 = _CocoaArrayWrapper.endIndex.getter(v118);
    swift_release(v28);
    if (!v61)
      continue;
    break;
  }
LABEL_68:
  swift_retain(v28);
  v5 = 4;
  while (1)
  {
    if ((v28 & 0xC000000000000001) != 0)
      v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v28);
    else
      v62 = *(id *)(v28 + 8 * v5);
    v63 = v62;
    v26 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
      goto LABEL_158;
    v64 = objc_msgSend(v62, "sourceRevision");
    objc_msgSend(v64, "operatingSystemVersion");
    v65 = v141;
    v125 = v140;

    v140 = v125;
    v141 = v65;
    v137 = v130;
    v138 = v128;
    v139 = v127;
    v66 = HKNSOperatingSystemVersionCompare(&v140, &v137);

    if (v66 == -1)
      break;
    ++v5;
    if (v26 == v61)
    {
      swift_release(v28);
      v26 = v132;
      LOBYTE(v5) = v121;
      goto LABEL_76;
    }
  }
  swift_release_n(v28, 2);
  LODWORD(v127) = 1;
  if (v132)
    goto LABEL_79;
  v67 = 0;
  v68 = 0;
  LOBYTE(v5) = v121;
LABEL_110:
  v83 = (unsigned __int8 *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria);
  v84 = 0x1000000000000;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 6))
    v84 = 0;
  v85 = 0x10000000000;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 5))
    v85 = 0;
  v86 = &_mh_execute_header;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 4))
    v86 = 0;
  v87 = 0x1000000;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 3))
    v87 = 0;
  v88 = 0x10000;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 2))
    v88 = 0;
  v89 = 256;
  if (!*(_BYTE *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria + 1))
    v89 = 0;
  v90 = sub_10002A5B4(v89 | *(unsigned __int8 *)(v4 + OBJC_IVAR___CHOnboardingCoordinator_criteria) | v88 | v87 | (unint64_t)v86 | v85 | v84);
  v91 = sub_10055464C((v61 | v122) != 0, v119 | v127, v68, v67);
  v129 = v68;
  v134 = v67;
  if ((v5 & 1) != 0)
  {
    v92 = (v91 >> 8) & 1;
    v93 = v91 & 1;
  }
  else
  {
    v91 = sub_10055464C((*v83 | v91) & 1, (v83[1] | BYTE1(v91)) & 1, (v83[2] | BYTE2(v91)) & 1, (v83[3] | BYTE3(v91)) & 1);
    v93 = v91 & 1;
    v92 = (v91 >> 8) & 1;
  }
  *v83 = v93;
  v83[1] = v92;
  v83[2] = BYTE2(v91) & 1;
  v83[3] = BYTE3(v91) & 1;
  v83[4] = BYTE4(v91) & 1;
  v83[5] = BYTE5(v91) & 1;
  v83[6] = BYTE6(v91) & 1;
  if (((v91 >> 24) & 1) != 0)
    v94 = 0x1000000;
  else
    v94 = 0;
  if (((v91 >> 16) & 1) != 0)
    v95 = 0x10000;
  else
    v95 = 0;
  if ((_DWORD)v92)
    v96 = 256;
  else
    v96 = 0;
  v97 = sub_10002A5B4(v96 | v93 | v95 | v94 | v91 & (unint64_t)&_mh_execute_header | v91 & 0x10000000000 | v91 & 0x1000000000000);
  v98 = static os_log_type_t.default.getter(v97);
  v99 = (void *)HKLogActivity;
  v100 = sub_100047110((uint64_t *)&unk_100827460);
  v101 = swift_allocObject(v100, 352, 7);
  v102 = (_QWORD *)v101;
  *(_OWORD *)(v101 + 16) = xmmword_100622B10;
  *(_QWORD *)(v101 + 56) = &type metadata for Bool;
  *(_QWORD *)(v101 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v101 + 32) = v122 != 0;
  *(_QWORD *)(v101 + 96) = &type metadata for Bool;
  *(_QWORD *)(v101 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v101 + 72) = v119;
  *(_QWORD *)(v101 + 136) = &type metadata for Bool;
  *(_QWORD *)(v101 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v101 + 112) = v61 != 0;
  *(_QWORD *)(v101 + 176) = &type metadata for Bool;
  *(_QWORD *)(v101 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v101 + 152) = v127;
  *(_QWORD *)(v101 + 216) = &type metadata for Bool;
  *(_QWORD *)(v101 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v101 + 192) = v129;
  v103 = 0x1000000000000;
  if (!v83[6])
    v103 = 0;
  v104 = 0x10000000000;
  if (!v83[5])
    v104 = 0;
  v105 = &_mh_execute_header;
  if (!v83[4])
    v105 = 0;
  if (v83[3])
    v106 = 0x1000000;
  else
    v106 = 0;
  v107 = *v83;
  if (v83[2])
    v108 = 0x10000;
  else
    v108 = 0;
  if (v83[1])
    v109 = 256;
  else
    v109 = 0;
  *(_QWORD *)(v101 + 256) = &type metadata for Bool;
  *(_QWORD *)(v101 + 264) = &protocol witness table for Bool;
  v110 = v109 | v107 | v108 | v106 | (unint64_t)v105 | v104 | v103;
  *(_BYTE *)(v101 + 232) = v134;
  v111 = v99;
  v112 = sub_100018CD0(v110);
  v114 = v113;
  v102[37] = &type metadata for String;
  v115 = sub_100038CF8();
  v102[34] = v112;
  v102[35] = v114;
  v102[42] = &type metadata for Int;
  v102[43] = &protocol witness table for Int;
  v102[38] = v115;
  v102[39] = v97;
  os_log(_:dso:log:_:_:)(v98, &_mh_execute_header, v111, "OnboardingCoordinator fetched calorie %d preKincaidCalorie %d moveMinute %d preKincaidMoveMinute %d exercise %d stand %d criteria %@ phase %d", 141, 2, v102);

  swift_bridgeObjectRelease(v102);
  Strong = (void *)sub_10000C510();
  if (v97 != v90)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v120 + OBJC_IVAR___CHOnboardingCoordinator_delegate);
    if (Strong)
    {
      v117 = Strong;
      objc_msgSend(Strong, "onboardingCoordinatorPhaseDidChangeTo:", v97);
      Strong = (void *)swift_unknownObjectRelease(v117);
    }
  }
  if (v97 == 5)
  {
    __chkstk_darwin(Strong);
    dispatch thunk of UnfairLock.acquire<A>(_:)(sub_10004EE0C);
  }
}

uint64_t sub_10002A5B4(uint64_t a1)
{
  uint64_t result;
  void *v3;
  unsigned int v4;
  id v5;
  NSString v6;
  id v7;
  NSString v8;
  id v9;
  NSString v10;
  unsigned int v11;
  id v12;
  NSString v13;

  if ((a1 & 0x1010000000000) != 0)
    return 5;
  if ((a1 & 0x100) != 0 || (a1 & 0x1010000) == 0x1010000)
  {
    if ((a1 & 1) == 0)
    {
      if ((a1 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_11:
      v4 = 0;
LABEL_15:
      v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setBool:forKey:", 1, v8);

      return v4;
    }
    if ((a1 & 0x100000000) == 0)
    {
      v4 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    result = (uint64_t)objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v3 = (void *)result;
    v4 = objc_msgSend((id)result, "isStandalonePhoneFitnessMode");

    if ((a1 & 1) == 0)
    {
      if ((a1 & 0x100000000) != 0)
      {
LABEL_8:
        v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v6 = String._bridgeToObjectiveC()();
        objc_msgSend(v5, "setBool:forKey:", 1, v6);

        return 2;
      }
      goto LABEL_11;
    }
    if ((a1 & 0x100000000) == 0)
      goto LABEL_15;
    if (!v4)
    {
      v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "setBool:forKey:", 1, v13);

      return 3;
    }
  }
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "BOOLForKey:", v10);

  if (v11)
    return 5;
  else
    return 4;
}

void sub_10002A828(void (*a1)(void), uint64_t a2)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *Strong;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  _BYTE *v22;
  id v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = swift_allocObject(&unk_1007897A0, 24, 7);
  v6 = v5;
  v7 = *(_QWORD *)&v2[OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedActivitySharingCount];
  *(_QWORD *)(v5 + 16) = v7;
  if (v2[OBJC_IVAR___CHFitnessAppBadgeAggregator_hasAmeliaBadge] == 1)
  {
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v5 + 16) = v7;
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR___CHFitnessAppBadgeAggregator_delegate]);
  if (Strong)
  {
    v10 = Strong;
    v11 = objc_msgSend(Strong, "aggregatorShouldAllowEngagementBadging:", v2);
    swift_unknownObjectRelease(v10);
    if ((v11 & 1) != 0)
    {
      v12 = swift_allocObject(&unk_1007897C8, 24, 7);
      swift_unknownObjectWeakInit(v12 + 16, v2);
      v13 = (_QWORD *)swift_allocObject(&unk_1007897F0, 48, 7);
      v13[2] = v6;
      v13[3] = v12;
      v13[4] = a1;
      v13[5] = a2;
      v14 = (void *)objc_opt_self(UNUserNotificationCenter);
      swift_retain(v6);
      swift_retain(v12);
      sub_10003AFE0((uint64_t)a1, a2);
      v15 = objc_msgSend(v14, "currentNotificationCenter");
      swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR___CHFitnessAppBadgeAggregator_fetchedEngagementBadges]);
      v17 = sub_100169520(v16);
      v18 = (_QWORD *)swift_allocObject(&unk_100789818, 56, 7);
      v18[2] = v15;
      v18[3] = v2;
      v18[4] = v17;
      v18[5] = sub_100028138;
      v18[6] = v13;
      aBlock[4] = sub_100028038;
      v25 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000277E8;
      aBlock[3] = &unk_100789830;
      v19 = _Block_copy(aBlock);
      v20 = v25;
      v21 = v15;
      v22 = v2;
      swift_retain(v13);
      objc_msgSend(v21, "getNotificationSettingsWithCompletionHandler:", v19, swift_release(v20).n128_f64[0]);
      _Block_release(v19);
      swift_release(v6);
      swift_release(v12);
      swift_release(v13);

      return;
    }
    v7 = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)&v2[OBJC_IVAR___CHFitnessAppBadgeAggregator_appBadgeCount] = v7;
  v23 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v23, "setApplicationIconBadgeNumber:", *(_QWORD *)(v6 + 16));

  if (a1)
    a1();
  swift_release(v6);
}

uint64_t sub_10002AAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char v16;
  __n128 v17;
  void (*v18)(char *, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v1 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContentAvailability(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = v0 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess(v11, v25, 0, 0);
  sub_10002AD54(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ContentAvailability.available(_:), v4);
    v12 = sub_10002AD14(&qword_100839C20, (uint64_t)&protocol conformance descriptor for ContentAvailability);
    dispatch thunk of RawRepresentable.rawValue.getter(&v23, v4, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v21, v4, v12);
    v13 = v24;
    v14 = v22;
    if (v23 == v21 && v24 == v22)
    {
      swift_bridgeObjectRelease_n(v24, 2);
      v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v21, v22, 0);
      swift_bridgeObjectRelease(v13);
      v17 = swift_bridgeObjectRelease(v14);
      v18 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
      v18(v8, v4, v17);
      ((void (*)(char *, uint64_t))v18)(v10, v4);
      if ((v16 & 1) == 0)
        return 0;
    }
    return 1;
  }
  sub_100154058((uint64_t)v3);
  return 0;
}

uint64_t sub_10002AD14(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ContentAvailability(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002AD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeymourAvailabilityManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SeymourAvailabilityManager.State(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100822E78, (uint64_t)&nominal type descriptor for SeymourAvailabilityManager.State);
}

uint64_t sub_10002ADAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100822E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_10002AE04(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  NSString v17;
  unsigned int v18;
  objc_class *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  objc_super v30;
  _QWORD v31[5];

  v6 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[3] = type metadata accessor for ContentAvailabilityClient(0);
  v31[4] = &protocol witness table for ContentAvailabilityClient;
  v31[0] = a1;
  v9 = (uint64_t)&a3[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state];
  v10 = type metadata accessor for ContentAvailability(0);
  v28 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v12 = 1;
  v11(v9, 1, 1, v10);
  sub_1000252E0((uint64_t)v31, (uint64_t)&a3[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_contentAvailabilityClient]);
  v13 = &a3[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_eventHub];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = &protocol witness table for EventHub;
  v14 = type metadata accessor for SubscriptionToken(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain_n(a2, 2);
  v15 = a3;
  *(_QWORD *)&v15[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_subscriptionToken] = SubscriptionToken.init(eventHub:)(a2, &protocol witness table for EventHub);
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "BOOLForKey:", v17);

  if (v18)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v8, enum case for ContentAvailability.available(_:), v10);
    v12 = 0;
  }
  v11((uint64_t)v8, v12, 1, v10);
  swift_beginAccess(v9, v29, 33, 0);
  sub_10004E258((uint64_t)v8, v9);
  swift_endAccess(v29);

  v19 = (objc_class *)type metadata accessor for SeymourAvailabilityManager(0);
  v30.receiver = v15;
  v30.super_class = v19;
  v20 = (char *)objc_msgSendSuper2(&v30, "init");
  v21 = type metadata accessor for ContentAvailabilityUpdated(0);
  v22 = *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_subscriptionToken];
  v23 = swift_allocObject(&unk_100789750, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v20);
  v24 = type metadata accessor for EventHub(0);
  v25 = v20;
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(v29, v21, v22, sub_100167CE0, v23, v21, &protocol witness table for ContentAvailabilityUpdated, v24, &protocol witness table for EventHub);
  swift_release(v23);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v29);
  sub_100026238();

  _s10FitnessApp24HistoryViewActionContextVwxx_0(v31);
  return v25;
}

uint64_t _s10FitnessApp24HistoryViewActionContextVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

char *sub_10002B108(uint64_t a1, void *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v30;
  __int128 v31[2];

  v6 = sub_10004CEA4();
  v7 = OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogItemViewModelCache;
  v8 = objc_allocWithZone((Class)NSCache);
  v9 = a3;
  *(_QWORD *)&a3[v7] = objc_msgSend(v8, "init");
  v10 = OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_stackViewModelCache;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_trainerCache] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_playlists] = &_swiftEmptySetSingleton;
  v11 = sub_100047110((uint64_t *)&unk_100839798);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v11);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_archivedSessionClient]);
  v12 = sub_100047110((uint64_t *)&unk_1008282C0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v12);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_artworkImageLoader]);
  v13 = sub_100047110((uint64_t *)&unk_100839750);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v13);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_bookmarkClient]);
  v14 = sub_100047110(&qword_100830D70);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v14);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient]);
  v15 = sub_100047110(&qword_1008397A8);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v15);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_configurationClient]);
  v16 = sub_100047110((uint64_t *)&unk_1008361E0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v16);
  v17 = v31[0];
  *(_OWORD *)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_eventHub] = v31[0];
  v18 = sub_100047110((uint64_t *)&unk_1008397B0);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v18);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_mediaTagStringBuilder]);
  v19 = sub_100047110(&qword_100830D80);
  dispatch thunk of Dependencies.resolve<A>(failureHandler:)(v31, 0, 0, v19);
  sub_10002411C(v31, (uint64_t)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_recommendationClient]);
  v20 = type metadata accessor for SubscriptionToken(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = swift_unknownObjectRetain(v17);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_subscriptionToken] = SubscriptionToken.init(eventHub:)(v21, *((_QWORD *)&v17 + 1));
  v22 = &v9[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_unitPreferencesProvider];
  *(_QWORD *)v22 = a2;
  *((_QWORD *)v22 + 1) = v6;
  swift_unknownObjectRetain(a2);

  v30.receiver = v9;
  v30.super_class = (Class)type metadata accessor for SeymourCatalogItemDataProvider();
  v23 = (char *)objc_msgSendSuper2(&v30, "init");
  sub_10000CC5C();
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_eventHub + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v23[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_eventHub]);
  v26 = type metadata accessor for PlaylistsUpdated(0);
  v27 = *(_QWORD *)&v23[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_subscriptionToken];
  v28 = swift_allocObject(&unk_1007A7C60, 24, 7);
  swift_unknownObjectWeakInit(v28 + 16);
  swift_retain(v28);
  dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)(v31, v26, v27, sub_100538EA4, v28, v26, &protocol witness table for PlaylistsUpdated, ObjectType, v24);
  swift_release(a1);

  swift_release(v28);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v31);
  swift_release(v28);
  return v23;
}

void sub_10002BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id *location)
{
  uint64_t v27;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v27 - 120));
  _Unwind_Resume(a1);
}

void sub_10002C824(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, a3, a4);
  swift_release(v7);

}

void sub_10002C8AC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (v10 + v8 + v9) & ~v8;
  v12 = v11 + v10;
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v12 + 223) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v12 + 239) & 0xFFFFFFFFFFFFFFF8;
  sub_100045D24(a1, a2, a3, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24), (void (*)(_QWORD, _QWORD))(v3 + v9), v3 + v11, *(_QWORD *)(v3 + v13), *(_BYTE *)(v3 + v13 + 8), v3 + v14, *(void **)(v3 + v15), *(_BYTE *)(v3 + v15 + 8), *(_QWORD *)(v3 + v16), *(void **)(v3 + v16 + 8), *(_QWORD *)(v3 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v3 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_10002C998(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  sub_10002CA14(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + ((v8 + 24) & ~v8), v3 + ((*(_QWORD *)(v7 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8), *(_QWORD *)(v3+ ((*(_QWORD *)(v7 + 64) + ((*(_QWORD *)(v7 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8) + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_10002CA14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  Class isa;
  Class v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  double v45;
  _QWORD *v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  double *v51;
  double v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  double *v67;
  uint64_t v68;
  double v69;
  double v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  double *v75;
  double v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[14];
  __int128 v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _QWORD v104[5];
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  double v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112[7];
  uint64_t v113[8];

  v13 = type metadata accessor for Date(0);
  v14 = __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v18 = (char *)&v84 - v17;
  if (a2)
  {
    v86 = a4;
    v87 = a7;
    v90 = v15;
    v91 = v16;
    v19 = swift_allocObject(&unk_10078E138, 24, 7);
    v89 = a6;
    *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
    v20 = v19 + 16;
    v21 = a2;
    v88 = a5;
    v22 = v21;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v24 = Date._bridgeToObjectiveC()().super.isa;
    v104[4] = sub_10003CEB4;
    v105 = v19;
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 1107296256;
    v104[2] = sub_10003CC44;
    v104[3] = &unk_10078E150;
    v25 = _Block_copy(v104);
    v26 = v105;
    v85 = v19;
    swift_retain(v19);
    swift_release(v26);
    v84 = v22;
    objc_msgSend(v22, "enumerateStatisticsFromDate:toDate:withBlock:", isa, v24, v25);
    _Block_release(v25);

    swift_beginAccess(v19 + 16, &v106, 0, 0);
    v27 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 16);
    v28 = v90;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
    v29(v18, v88, v13);
    v30 = v91;
    v31 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(v91, v89, v13);
    v32 = Date.timeIntervalSinceReferenceDate.getter(v31);
    v34 = Date.timeIntervalSinceReferenceDate.getter(v33);
    sub_10003D1C0(v27, (uint64_t)v107, v32, v34);
    v35 = (_QWORD *)v107[0];
    v36 = v107[1];
    v37 = v107[2];
    v38 = v108;
    v39 = v109;
    v40 = v110;
    v41 = v111;
    v42 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v42(v30, v13);
    v42((uint64_t)v18, v13);
    v91 = v20;
    v43 = *(_QWORD *)v20;
    v44 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    v45 = 0.0;
    if (v44)
    {
      v89 = v36;
      v90 = v37;
      v46 = (_QWORD *)v107[0];
      v47 = v108;
      v48 = v110;
      swift_bridgeObjectRetain(v43);
      v49 = 0;
      v50 = 0;
      v51 = (double *)(v43 + 40);
      do
      {
        if ((*(_BYTE *)v51 & 1) == 0 && v50 < v46[2])
        {
          v52 = *(v51 - 1);
          if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) != 0)
            v35 = v46;
          else
            v35 = sub_1004DEE58(v46);
          if (v50 >= v35[2])
          {
            __break(1u);
            return;
          }
          v53 = (double *)&v35[v49];
          v53[4] = v52;
          v53[5] = 1.0;
          *((_BYTE *)v53 + 48) = 0;
          if (v47 < v52)
          {
            v38 = v52;
            v39 = 1.0;
            v47 = v52;
          }
          if (v48 < 0.0 || v48 > v52)
          {
            v41 = 1.0;
            v40 = v52;
            v48 = v52;
          }
          v46 = v35;
        }
        ++v50;
        v51 += 2;
        v49 += 3;
      }
      while (v44 != v50);
      swift_bridgeObjectRelease(v43);
      v54 = *(_QWORD *)v91;
      v55 = *(_QWORD *)(*(_QWORD *)v91 + 16);
      if (!v55)
      {
        v64 = _swiftEmptyArrayStorage;
        v65 = v85;
        v66 = v84;
        v37 = v90;
LABEL_46:
        v36 = v89;
        goto LABEL_47;
      }
      v37 = v90;
      if (v55 == 1)
      {
        v56 = 0;
        v45 = 0.0;
      }
      else
      {
        v56 = v55 & 0x7FFFFFFFFFFFFFFELL;
        v67 = (double *)(v54 + 56);
        v68 = v55 & 0x7FFFFFFFFFFFFFFELL;
        v45 = 0.0;
        do
        {
          v69 = *(v67 - 3);
          v70 = *(v67 - 1);
          v71 = *((unsigned __int8 *)v67 - 16);
          v73 = *(unsigned __int8 *)v67;
          v67 += 4;
          v72 = v73;
          if (v71)
            v69 = 0.0;
          if (v72)
            v70 = 0.0;
          v45 = v45 + v69 + v70;
          v68 -= 2;
        }
        while (v68);
        if (v55 == v56)
          goto LABEL_37;
      }
      v74 = v55 - v56;
      v75 = (double *)(v54 + 16 * v56 + 40);
      do
      {
        v76 = *(v75 - 1);
        v77 = *(unsigned __int8 *)v75;
        v75 += 2;
        if (v77)
          v76 = 0.0;
        v45 = v45 + v76;
        --v74;
      }
      while (v74);
LABEL_37:
      swift_bridgeObjectRetain(v54);
      v78 = (_BYTE *)(v54 + 40);
      v64 = _swiftEmptyArrayStorage;
      do
      {
        if ((*v78 & 1) == 0)
        {
          v79 = *((_QWORD *)v78 - 1);
          if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
            v64 = sub_10003D454(0, v64[2] + 1, 1, v64);
          v81 = v64[2];
          v80 = v64[3];
          if (v81 >= v80 >> 1)
            v64 = sub_10003D454((_QWORD *)(v80 > 1), v81 + 1, 1, v64);
          v64[2] = v81 + 1;
          v64[v81 + 4] = v79;
        }
        v78 += 16;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease(v54);
      v65 = v85;
      v66 = v84;
      goto LABEL_46;
    }
    v64 = _swiftEmptyArrayStorage;
    v65 = v85;
    v66 = v84;
LABEL_47:
    v82 = v87 + 16;
    v83 = v64[2];
    swift_bridgeObjectRelease(v64);
    sub_10003D1C0(7, (uint64_t)v112, 0.0, 6.0);
    sub_10003D1C0(7, (uint64_t)v113, 0.0, 6.0);
    swift_bridgeObjectRetain_n(_swiftEmptyArrayStorage, 2);
    sub_10003EDC4(v112);
    swift_bridgeObjectRetain_n(_swiftEmptyArrayStorage, 2);
    sub_10003EDC4(v113);
    swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 4);
    *(double *)v93 = v45;
    *(double *)&v93[1] = (double)v83;
    v93[2] = v35;
    v93[3] = v36;
    v93[4] = v37;
    *(double *)&v93[5] = v38;
    *(double *)&v93[6] = v39;
    *(double *)&v93[7] = v40;
    *(double *)&v93[8] = v41;
    v93[9] = _swiftEmptyArrayStorage;
    v93[10] = _swiftEmptyArrayStorage;
    v93[12] = 0;
    v93[13] = 0;
    v93[11] = 0x7FF8000000000000;
    v94 = xmmword_10062CD70;
    v95 = _swiftEmptyArrayStorage;
    v96 = _swiftEmptyArrayStorage;
    v97 = 0x7FF8000000000000;
    v98 = 0;
    v99 = 0;
    v100 = 0xBFF0000000000000;
    v101 = 0;
    v102 = 0;
    v103 = 5;
    ASFriendListDisplayMode.id.getter(v93);
    swift_beginAccess(v82, &v92, 1, 0);
    sub_100045AD4(v82, (uint64_t)v104, &qword_100827408);
    sub_100045AD4((uint64_t)v93, v82, &qword_100827408);
    sub_1000471E4((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
    OS_dispatch_semaphore.signal()();
    swift_release(v65);

  }
  else
  {
    if (a3)
    {
      v57 = (void *)_convertErrorToNSError(_:)(a3);
      v58 = static os_log_type_t.error.getter(v57);
      v59 = (void *)HKLogActivity;
      v60 = sub_100047110((uint64_t *)&unk_100827460);
      v61 = swift_allocObject(v60, 72, 7);
      *(_OWORD *)(v61 + 16) = xmmword_100622F90;
      *(_QWORD *)(v61 + 56) = sub_10001E724(0, (unint64_t *)&qword_1008274A0, NSError_ptr);
      *(_QWORD *)(v61 + 64) = sub_1001F8BA4((unint64_t *)&qword_100828C70, (unint64_t *)&qword_1008274A0, NSError_ptr);
      *(_QWORD *)(v61 + 32) = v57;
      v62 = v59;
      v63 = v57;
      os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v62, "Error fetching statistics for stand hours: %@", 45, 2, v61);

      swift_bridgeObjectRelease(v61);
    }
    OS_dispatch_semaphore.signal()();
  }
}

uint64_t sub_10002D0F8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_10002D124()
{
  uint64_t v0;

  sub_10002D12C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10002D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR___CHHistoryDataProvider_allMindfulnessSessions);
    *(_QWORD *)(Strong + OBJC_IVAR___CHHistoryDataProvider_allMindfulnessSessions) = a2;
    swift_bridgeObjectRetain(a2);

    swift_bridgeObjectRelease(v6);
  }
  swift_beginAccess(v3, v11, 0, 0);
  v7 = (_BYTE *)swift_unknownObjectWeakLoadStrong(v3);
  if (v7)
  {
    v7[OBJC_IVAR___CHHistoryDataProvider_hasInitialMindfulnessSessions] = 1;

  }
  swift_beginAccess(v3, v10, 0, 0);
  v8 = swift_unknownObjectWeakLoadStrong(v3);
  if (v8)
  {
    v9 = (void *)v8;
    sub_10002D204();

  }
}

void sub_10002D204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void *v55;
  id v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 aBlock;
  uint64_t (*v109)(uint64_t);
  void *v110;
  void (*v111)();
  uint64_t v112;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v97 = *(_QWORD **)(v1 - 8);
  v98 = v1;
  __chkstk_darwin(v1);
  v96 = (uint64_t *)((char *)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DispatchTime(0);
  v4 = *(_QWORD *)(v92 - 8);
  v5 = __chkstk_darwin(v92);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v91 = (char *)&v90 - v8;
  v9 = type metadata accessor for FitnessPlusStackViewModel(0);
  v103 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  v10 = __chkstk_darwin(v9);
  v100 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v99 = (char *)&v90 - v13;
  v14 = __chkstk_darwin(v12);
  v102 = (char *)&v90 - v15;
  v16 = __chkstk_darwin(v14);
  v101 = (uint64_t *)((char *)&v90 - v17);
  __chkstk_darwin(v16);
  v19 = (char *)&v90 - v18;
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = OBJC_IVAR___CHHistoryDataProvider_queue;
  v25 = *(void **)(v0 + OBJC_IVAR___CHHistoryDataProvider_queue);
  if (!v25)
    goto LABEL_51;
  *v23 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v26 = v25;
  v27 = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v27 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR___CHHistoryDataProvider_hasInitialWorkouts) == 1
    && (*(_BYTE *)(v0 + OBJC_IVAR___CHHistoryDataProvider_hasInitialMindfulnessSessions) & 1) != 0
    || *(_BYTE *)(v0 + OBJC_IVAR___CHHistoryDataProvider_shouldForceReload) == 1)
  {
    v28 = *(_QWORD *)(v0 + OBJC_IVAR___CHHistoryDataProvider_allMindfulnessSessions);
    v98 = v0;
    v29 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___CHHistoryDataProvider_workoutDataProvider), "unfilteredWorkouts", swift_bridgeObjectRetain(v28).n128_f64[0]);
    v30 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    type metadata accessor for MindfulnessSessionViewModel(0);
    v32 = static MindfulnessSessionViewModel.makeMindfulnessSessionViewModels(from:)(v28);
    swift_bridgeObjectRelease(v28);
    v33 = sub_10002DC40(v31);
    v97 = sub_10002E0A0(v33);
    swift_bridgeObjectRelease(v33);
    v34 = sub_10002DC40(v31);
    swift_bridgeObjectRelease(v31);
    v35 = sub_10002E278(v34);
    swift_bridgeObjectRelease(v34);
    v36 = sub_10002DE70(v32);
    v96 = sub_10002E0A0(v36);
    swift_bridgeObjectRelease(v36);
    v37 = sub_10002DE70(v32);
    swift_bridgeObjectRelease(v32);
    v38 = sub_10002E278(v37);
    swift_bridgeObjectRelease(v37);
    *(_QWORD *)&aBlock = v35;
    sub_10002DC18((uint64_t)v38);
    v95 = aBlock;
    v39 = sub_10002E82C(aBlock);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v40 = *(_QWORD *)(v39 + 16);
    if (v40)
    {
      v41 = 0;
      v42 = _swiftEmptyArrayStorage;
      v43 = _swiftEmptyArrayStorage;
      v44 = (uint64_t)v102;
      do
      {
        if (v41 >= *(_QWORD *)(v39 + 16))
        {
          __break(1u);
          goto LABEL_49;
        }
        v45 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        v46 = *(_QWORD *)(v103 + 72);
        sub_100149D00(v39 + v45 + v46 * v41, (uint64_t)v19);
        if (*(_QWORD *)(*(_QWORD *)&v19[*(int *)(v104 + 20)] + 16) < 2uLL)
        {
          sub_100149D44((uint64_t)v19);
        }
        else
        {
          sub_10027D4A8((uint64_t)v19, (uint64_t)v101);
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
            sub_100121BA4(0, v43[2] + 1, 1);
          v43 = (_QWORD *)aBlock;
          v48 = *(_QWORD *)(aBlock + 16);
          v47 = *(_QWORD *)(aBlock + 24);
          if (v48 >= v47 >> 1)
          {
            sub_100121BA4(v47 > 1, v48 + 1, 1);
            v43 = (_QWORD *)aBlock;
          }
          v43[2] = v48 + 1;
          sub_10027D4A8((uint64_t)v101, (uint64_t)v43 + v45 + v48 * v46);
          v44 = (uint64_t)v102;
        }
        ++v41;
      }
      while (v40 != v41);
      v49 = 0;
      v101 = (_QWORD *)aBlock;
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v50 = v39 + v45;
      v51 = (uint64_t)v99;
      while (v49 < *(_QWORD *)(v39 + 16))
      {
        sub_100149D00(v50, v44);
        if (*(_QWORD *)(*(_QWORD *)(v44 + *(int *)(v104 + 20)) + 16) > 1uLL)
        {
          sub_100149D44(v44);
        }
        else
        {
          sub_10027D4A8(v44, v51);
          if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
          {
            sub_100121BA4(0, v42[2] + 1, 1);
            v51 = (uint64_t)v99;
          }
          v42 = (_QWORD *)aBlock;
          v53 = *(_QWORD *)(aBlock + 16);
          v52 = *(_QWORD *)(aBlock + 24);
          if (v53 >= v52 >> 1)
          {
            sub_100121BA4(v52 > 1, v53 + 1, 1);
            v51 = (uint64_t)v99;
            v42 = (_QWORD *)aBlock;
          }
          v42[2] = v53 + 1;
          sub_10027D4A8(v51, (uint64_t)v42 + v45 + v53 * v46);
          v44 = (uint64_t)v102;
        }
        ++v49;
        v50 += v46;
        if (v40 == v49)
        {
          v54 = (_QWORD *)aBlock;
          goto LABEL_31;
        }
      }
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v54 = _swiftEmptyArrayStorage;
    v101 = _swiftEmptyArrayStorage;
LABEL_31:
    swift_bridgeObjectRelease(v39);
    v71 = v54[2];
    v72 = v98;
    v73 = (uint64_t)v100;
    if (v71)
    {
      v74 = (uint64_t)v54
          + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80));
      v75 = *(_QWORD *)(v103 + 72);
      swift_retain(v54);
      v76 = _swiftEmptyArrayStorage;
      do
      {
        sub_100149D00(v74, v73);
        v77 = *(_QWORD *)(v73 + *(int *)(v104 + 20));
        if (*(_QWORD *)(v77 + 16))
        {
          sub_1000252E0(v77 + 32, (uint64_t)&v105);
        }
        else
        {
          v107 = 0;
          v105 = 0u;
          v106 = 0u;
        }
        sub_100149D44(v73);
        if (*((_QWORD *)&v106 + 1))
        {
          sub_10002411C(&v105, (uint64_t)&aBlock);
          sub_10002411C(&aBlock, (uint64_t)&v105);
          if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
            v76 = sub_10002DC2C(0, v76[2] + 1, 1, v76);
          v79 = v76[2];
          v78 = v76[3];
          if (v79 >= v78 >> 1)
            v76 = sub_10002DC2C((_QWORD *)(v78 > 1), v79 + 1, 1, v76);
          v76[2] = v79 + 1;
          sub_10002411C(&v105, (uint64_t)&v76[5 * v79 + 4]);
          v73 = (uint64_t)v100;
        }
        else
        {
          sub_10001BE90((uint64_t)&v105, &qword_100831878);
        }
        v74 += v75;
        --v71;
      }
      while (v71);
      swift_release_n(v54, 2);
    }
    else
    {
      swift_release(v54);
      v76 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v76);
    v80 = v95;
    v81 = sub_1003C5D90(v95, (uint64_t)v76);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v76);
    *(_QWORD *)&aBlock = v81;
    swift_bridgeObjectRetain(v81);
    sub_1003C3514(&aBlock);
    swift_bridgeObjectRelease(v81);
    v82 = aBlock;
    *(_QWORD *)&aBlock = v76;
    sub_10002DC18((uint64_t)v96);
    sub_10002DC18((uint64_t)v97);
    v83 = aBlock;
    v84 = v101;
    v85 = sub_10002E44C((uint64_t)v101);
    swift_release(v84);
    *(_QWORD *)&aBlock = v83;
    sub_10002DC18((uint64_t)v85);
    v86 = aBlock;
    swift_bridgeObjectRetain(aBlock);
    sub_1003C3514(&aBlock);
    swift_bridgeObjectRelease(v86);
    v87 = aBlock;
    v88 = *(_QWORD *)(v72 + OBJC_IVAR___CHHistoryDataProvider_allHistoryItems);
    *(_QWORD *)(v72 + OBJC_IVAR___CHHistoryDataProvider_allHistoryItems) = aBlock;
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRelease(v88);
    v89 = *(_QWORD *)(v72 + OBJC_IVAR___CHHistoryDataProvider_stackHistoryItems);
    *(_QWORD *)(v72 + OBJC_IVAR___CHHistoryDataProvider_stackHistoryItems) = v82;
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRelease(v89);
    sub_1003C2BCC();
    sub_10002F570();
    swift_release(v87);
    v70 = v82;
LABEL_47:
    swift_release(v70);
    return;
  }
  v55 = *(void **)(v0 + v24);
  if (v55)
  {
    v56 = v55;
    static DispatchTime.now()(v56);
    v57 = v91;
    + infix(_:_:)(v7, 5.0);
    v104 = *(_QWORD *)(v4 + 8);
    v58 = v7;
    v59 = v92;
    ((void (*)(char *, uint64_t))v104)(v58, v92);
    v60 = swift_allocObject(&unk_10079CD00, 24, 7);
    swift_unknownObjectWeakInit(v60 + 16, v0);
    v111 = sub_1003C96EC;
    v112 = v60;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v109 = sub_10002D0F8;
    v110 = &unk_10079CED0;
    v61 = _Block_copy(&aBlock);
    v62 = swift_retain(v60);
    v63 = v93;
    static DispatchQoS.unspecified.getter(v62);
    *(_QWORD *)&v105 = _swiftEmptyArrayStorage;
    v64 = sub_10002FAC0();
    v65 = sub_100047110(&qword_100828C80);
    v66 = sub_10002FB08();
    v67 = v96;
    v68 = v98;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v105, v65, v66, v98, v64);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v57, v63, v67, v61);
    _Block_release(v61);

    ((void (*)(_QWORD *, uint64_t))v97[1])(v67, v68);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v63, v95);
    ((void (*)(char *, uint64_t))v104)(v57, v59);
    v69 = v112;
    swift_release(v60);
    v70 = v69;
    goto LABEL_47;
  }
LABEL_52:
  __break(1u);
  swift_release(aBlock);
  __break(1u);
}

void sub_10002DC18(uint64_t a1)
{
  sub_10013C68C(a1, &qword_1008215C8, (uint64_t *)&unk_10082E5B0);
}

_QWORD *sub_10002DC2C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FEE0(a1, a2, a3, a4, &qword_1008215C8, (uint64_t *)&unk_10082E5B0);
}

uint64_t sub_10002DC40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_10012176C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10012176C(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
        v17 = sub_100148FE0(&qword_100822158, (unint64_t *)&qword_100828390, HKWorkout_ptr, (uint64_t)"d{\a");
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10002411C(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10012176C(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
        v17 = sub_100148FE0(&qword_100822158, (unint64_t *)&qword_100828390, HKWorkout_ptr, (uint64_t)"d{\a");
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10002411C(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002DE70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_10012176C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10012176C(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = type metadata accessor for MindfulnessSessionViewModel(0);
        v17 = sub_1000083D8(&qword_100822150, (uint64_t (*)(uint64_t))&type metadata accessor for MindfulnessSessionViewModel, (uint64_t)&unk_1006425F0);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10002411C(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10012176C(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = type metadata accessor for MindfulnessSessionViewModel(0);
        v17 = sub_1000083D8(&qword_100822150, (uint64_t (*)(uint64_t))&type metadata accessor for MindfulnessSessionViewModel, (uint64_t)&unk_1006425F0);
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10002411C(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E078(_QWORD *a1)
{
  return sub_10002E08C(0, a1[2], 0, a1);
}

uint64_t sub_10002E08C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100122794(a1, a2, a3, a4, &qword_1008215C8, (uint64_t *)&unk_10082E5B0);
}

_QWORD *sub_10002E0A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = _swiftEmptyArrayStorage;
  v31 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    v4 = a1 + 32;
    while (1)
    {
      sub_1000252E0(v4, (uint64_t)&v28);
      v6 = v29;
      v5 = v30;
      sub_100016804(&v28, v29);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 16))(v6);
      if (!v7)
        goto LABEL_10;
      v8 = v7;
      v9 = static HealthDataConstants.workoutSessionQueueIdentifierProperty.getter();
      v11 = v10;
      if (!*(_QWORD *)(v8 + 16))
        break;
      sub_100438F74(v9, v10);
      v13 = v12;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      if ((v13 & 1) == 0)
        goto LABEL_10;
      _s10FitnessApp24HistoryViewActionContextVwxx_0(&v28);
LABEL_4:
      v4 += 40;
      if (!--v3)
      {
        v2 = v31;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v11);
LABEL_10:
    sub_10002411C(&v28, (uint64_t)v25);
    v14 = v31;
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
    {
      sub_10012176C(0, v14[2] + 1, 1);
      v14 = v31;
    }
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      sub_10012176C(v15 > 1, v16 + 1, 1);
    v17 = v26;
    v18 = v27;
    v19 = sub_10017C044((uint64_t)v25, v26);
    __chkstk_darwin(v19);
    v21 = (char *)&v25[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v21);
    sub_1003C5B8C(v16, (uint64_t)v21, (uint64_t *)&v31, v17, v18);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v25);
    goto LABEL_4;
  }
LABEL_16:
  swift_bridgeObjectRelease(a1);
  return v2;
}

_QWORD *sub_10002E278(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = _swiftEmptyArrayStorage;
  v31 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    v4 = a1 + 32;
    while (1)
    {
      sub_1000252E0(v4, (uint64_t)&v28);
      v6 = v29;
      v5 = v30;
      sub_100016804(&v28, v29);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 16))(v6);
      if (v7)
      {
        v8 = v7;
        v9 = static HealthDataConstants.workoutSessionQueueIdentifierProperty.getter();
        v11 = v10;
        if (*(_QWORD *)(v8 + 16))
        {
          sub_100438F74(v9, v10);
          v13 = v12;
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v11);
          if ((v13 & 1) != 0)
          {
            sub_10002411C(&v28, (uint64_t)v25);
            v14 = v31;
            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
            {
              sub_10012176C(0, v14[2] + 1, 1);
              v14 = v31;
            }
            v16 = v14[2];
            v15 = v14[3];
            if (v16 >= v15 >> 1)
              sub_10012176C(v15 > 1, v16 + 1, 1);
            v17 = v26;
            v18 = v27;
            v19 = sub_10017C044((uint64_t)v25, v26);
            __chkstk_darwin(v19);
            v21 = (char *)&v25[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v22 + 16))(v21);
            sub_1003C5B8C(v16, (uint64_t)v21, (uint64_t *)&v31, v17, v18);
            _s10FitnessApp24HistoryViewActionContextVwxx_0(v25);
            goto LABEL_5;
          }
        }
        else
        {
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v11);
        }
      }
      _s10FitnessApp24HistoryViewActionContextVwxx_0(&v28);
LABEL_5:
      v4 += 40;
      if (!--v3)
      {
        v2 = v31;
        break;
      }
    }
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

_QWORD *sub_10002E44C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for FitnessPlusStackViewModel(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10012176C(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100149D00(v8, (uint64_t)v5);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10012176C(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_1000083D8(&qword_100822148, type metadata accessor for FitnessPlusStackViewModel, (uint64_t)&unk_100634BB8);
      v12 = sub_10004C480(&v14);
      sub_100149D00((uint64_t)v5, (uint64_t)v12);
      v7[2] = v11 + 1;
      sub_10002411C(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_100149D44((uint64_t)v5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_10002E5B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10002E5F8(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10002E5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v8._object = (void *)0x80000001006918C0;
  v8._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v8);
  Date.init()(v9);
  v10 = Date.timeIntervalSince(_:)(a1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = Double.write<A>(to:)(&v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v10);
  v12 = v22;
  v13 = v23;
  v14 = static os_log_type_t.default.getter(v11);
  v15 = (void *)HKLogActivity;
  v16 = sub_100047110((uint64_t *)&unk_100827460);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100622F90;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_100038CF8();
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v13;
  v18 = v15;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v18, "%@", 2, 2, v17);

  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v19 = a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_lastCalculatedDate;
  swift_beginAccess(a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_lastCalculatedDate, &v22, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v19, v7, v4);
  swift_endAccess(&v22);
  return sub_10003A100();
}

void sub_10002E7E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10003D740(*(unsigned __int8 **)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10002E82C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t i;
  unint64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t result;
  uint64_t v50;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];
  uint64_t v55[3];
  uint64_t v56;
  uint64_t v57;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v4 = &_swiftEmptyDictionarySingleton;
    v5 = (uint64_t *)&unk_100828420;
    v6 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_1000252E0(v2, (uint64_t)v55);
      v8 = v56;
      v7 = v57;
      v9 = sub_100016804(v55, v56);
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 16);
      v1 = v9;
      v11 = v10(v8);
      if (v11)
      {
        v1 = (_QWORD *)v11;
        v12 = static HealthDataConstants.workoutSessionQueueIdentifierProperty.getter(v11);
        v14 = v13;
        if (v1[2] && (v15 = sub_100438F74(v12, v13), (v16 & 1) != 0))
        {
          sub_10003E9BC(v1[7] + 32 * v15, (uint64_t)&v52);
        }
        else
        {
          v52 = 0u;
          v53 = 0u;
        }
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v1);
        if (*((_QWORD *)&v53 + 1))
        {
          if ((swift_dynamicCast(v54, &v52, v6, &type metadata for String, 6) & 1) != 0)
          {
            v17 = v5;
            v19 = v54[0];
            v18 = v54[1];
            sub_1000252E0((uint64_t)v55, (uint64_t)&v52);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
            v54[0] = v4;
            v1 = v4;
            v22 = sub_100438F74(v19, v18);
            v23 = v4[2];
            v24 = (v21 & 1) == 0;
            v25 = v23 + v24;
            if (__OFADD__(v23, v24))
            {
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
            v26 = v21;
            if (v4[3] >= v25)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_100402994();
            }
            else
            {
              sub_1003FA1E8(v25, isUniquelyReferenced_nonNull_native);
              v27 = sub_100438F74(v19, v18);
              if ((v26 & 1) != (v28 & 1))
                goto LABEL_62;
              v22 = v27;
            }
            v4 = (_QWORD *)v54[0];
            swift_bridgeObjectRelease(0x8000000000000000);
            v29 = v4;
            if ((v26 & 1) == 0)
            {
              v4[(v22 >> 6) + 8] |= 1 << v22;
              v30 = (uint64_t *)(v4[6] + 16 * v22);
              *v30 = v19;
              v30[1] = v18;
              *(_QWORD *)(v4[7] + 8 * v22) = _swiftEmptyArrayStorage;
              v31 = v4[2];
              v1 = (_QWORD *)(v31 + 1);
              v32 = __OFADD__(v31, 1);
              swift_bridgeObjectRetain(v4);
              if (v32)
                goto LABEL_60;
              v4[2] = v1;
              v29 = (_QWORD *)v18;
            }
            swift_bridgeObjectRetain(v29);
            v33 = v4[7];
            swift_bridgeObjectRelease(v4);
            v1 = *(_QWORD **)(v33 + 8 * v22);
            v34 = swift_isUniquelyReferenced_nonNull_native(v1);
            *(_QWORD *)(v33 + 8 * v22) = v1;
            if ((v34 & 1) == 0)
            {
              v1 = sub_10002DC2C(0, v1[2] + 1, 1, v1);
              *(_QWORD *)(v33 + 8 * v22) = v1;
            }
            v36 = v1[2];
            v35 = v1[3];
            if (v36 >= v35 >> 1)
            {
              v1 = sub_10002DC2C((_QWORD *)(v35 > 1), v36 + 1, 1, v1);
              *(_QWORD *)(v33 + 8 * v22) = v1;
            }
            v5 = v17;
            v6 = (char *)&type metadata for Any + 8;
            v1[2] = v36 + 1;
            sub_10002411C(&v52, (uint64_t)&v1[5 * v36 + 4]);
            swift_bridgeObjectRelease(v18);
          }
          goto LABEL_5;
        }
      }
      else
      {
        v52 = 0u;
        v53 = 0u;
      }
      sub_10001BE90((uint64_t)&v52, v5);
LABEL_5:
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v55);
      v2 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease(a1);
        goto LABEL_32;
      }
    }
  }
  v4 = &_swiftEmptyDictionarySingleton;
LABEL_32:
  *(_QWORD *)&v52 = _swiftEmptyArrayStorage;
  v37 = (char *)(v4 + 8);
  v38 = 1 << *((_BYTE *)v4 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v4[8];
  v41 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v42 = 0;
  if (!v40)
    goto LABEL_36;
LABEL_35:
  v43 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  for (i = v43 | (v42 << 6); ; i = __clz(__rbit64(v46)) + (v42 << 6))
  {
    v48 = (uint64_t *)(v4[6] + 16 * i);
    v1 = (_QWORD *)v48[1];
    v2 = *(_QWORD *)(v4[7] + 8 * i);
    v55[0] = *v48;
    v55[1] = (uint64_t)v1;
    v55[2] = v2;
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v2);
    sub_1002F5E0C((unint64_t *)&v52, v55);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    if (v40)
      goto LABEL_35;
LABEL_36:
    if (__OFADD__(v42++, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v42 >= v41)
      goto LABEL_57;
    v46 = *(_QWORD *)&v37[8 * v42];
    if (!v46)
      break;
LABEL_50:
    v40 = (v46 - 1) & v46;
  }
  v47 = v42 + 1;
  if (v42 + 1 >= v41)
    goto LABEL_57;
  v46 = *(_QWORD *)&v37[8 * v47];
  if (v46)
    goto LABEL_49;
  v47 = v42 + 2;
  if (v42 + 2 >= v41)
    goto LABEL_57;
  v46 = *(_QWORD *)&v37[8 * v47];
  if (v46)
    goto LABEL_49;
  v47 = v42 + 3;
  if (v42 + 3 >= v41)
    goto LABEL_57;
  v46 = *(_QWORD *)&v37[8 * v47];
  if (v46)
    goto LABEL_49;
  v47 = v42 + 4;
  if (v42 + 4 >= v41)
    goto LABEL_57;
  v46 = *(_QWORD *)&v37[8 * v47];
  if (v46)
    goto LABEL_49;
  v47 = v42 + 5;
  if (v42 + 5 >= v41)
  {
LABEL_57:
    swift_release(v4);
    swift_bridgeObjectRelease(v4);
    return v52;
  }
  v46 = *(_QWORD *)&v37[8 * v47];
  if (v46)
  {
LABEL_49:
    v42 = v47;
    goto LABEL_50;
  }
  while (1)
  {
    v42 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v42 >= v41)
      goto LABEL_57;
    v46 = *(_QWORD *)&v37[8 * v42];
    ++v47;
    if (v46)
      goto LABEL_50;
  }
LABEL_61:
  __break(1u);
  v50 = v52;
  swift_release(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v50);
  __break(1u);
LABEL_62:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

char *sub_10002EDB8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  NSString v31;
  objc_class *v32;
  id v33;
  char *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;

  v3 = v2;
  v44 = a2;
  v41 = a1;
  v4 = type metadata accessor for UIListContentConfiguration.TextProperties(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_titleLabel;
  v8 = objc_allocWithZone((Class)UILabel);
  v9 = v3;
  v10 = objc_msgSend(v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  if (qword_10081DDC8 != -1)
    swift_once(&qword_10081DDC8, sub_10004E6B8);
  v11 = type metadata accessor for UIListContentConfiguration(0);
  v43 = sub_10003CE9C(v11, (uint64_t)qword_100835420);
  v12 = UIListContentConfiguration.textProperties.getter();
  v13 = (void *)UIListContentConfiguration.TextProperties.font.getter(v12);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  v15 = (void *)UILabel.withFont(_:)(v13);

  v16 = (void *)objc_opt_self(UIColor);
  v17 = objc_msgSend(v16, "labelColor");
  v18 = (void *)UILabel.withTextColor(_:)();

  objc_msgSend(v18, "setLineBreakMode:", 0);
  objc_msgSend(v18, "setNumberOfLines:", 0);
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v42] = v18;
  v42 = OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_subtitleLabel;
  v19 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  if (qword_10081DDD0 != -1)
    swift_once(&qword_10081DDD0, sub_10004E6A4);
  sub_10003CE9C(v11, (uint64_t)qword_100835438);
  v20 = UIListContentConfiguration.textProperties.getter();
  v21 = (void *)UIListContentConfiguration.TextProperties.font.getter(v20);
  v14(v7, v4);
  v22 = (void *)UILabel.withFont(_:)(v21);

  v23 = objc_msgSend(v16, "secondaryLabelColor");
  v24 = (void *)UILabel.withTextColor(_:)();

  objc_msgSend(v24, "setLineBreakMode:", 0);
  objc_msgSend(v24, "setNumberOfLines:", 0);
  objc_msgSend(v24, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v9[v42] = v24;
  v25 = OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_button;
  v26 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 1);
  if (qword_10081DDE0 != -1)
    swift_once(&qword_10081DDE0, sub_100008AEC);
  objc_msgSend(v26, "setTintColor:", qword_100835458);
  if (qword_10081DDD8 != -1)
    swift_once(&qword_10081DDD8, sub_100005914);
  v27 = qword_100835450;
  v28 = objc_msgSend(v26, "titleLabel");
  objc_msgSend(v28, "setFont:", v27);

  objc_msgSend(v26, "setHidden:", 1);
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v9[v25] = v26;
  v29 = &v9[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_buttonAction];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_activeConstraints] = _swiftEmptyArrayStorage;

  v30 = v44;
  if (v44)
  {
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = (objc_class *)type metadata accessor for ActivityTileSectionHeader();
  v45.receiver = v9;
  v45.super_class = v32;
  v33 = objc_msgSendSuper2(&v45, "initWithReuseIdentifier:", v31);

  v34 = (char *)v33;
  UIListContentConfiguration.directionalLayoutMargins.getter();
  objc_msgSend(v34, "setDirectionalLayoutMargins:");
  objc_msgSend(v34, "setIsAccessibilityElement:", 0);
  v35 = objc_msgSend(v34, "contentView");
  objc_msgSend(v35, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_titleLabel]);

  v36 = objc_msgSend(v34, "contentView");
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_subtitleLabel]);

  v37 = *(void **)&v34[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_button];
  objc_msgSend(v37, "addTarget:action:forControlEvents:", v34, "didTapButton", 64);
  v38 = objc_msgSend(v34, "contentView");
  v39 = v37;
  objc_msgSend(v38, "addSubview:", v39);

  return v34;
}

uint64_t type metadata accessor for ActivityTileSectionHeader()
{
  return objc_opt_self(_TtC10FitnessApp25ActivityTileSectionHeader);
}

uint64_t sub_10002F330(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(&unk_100793B70, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  v17 = swift_allocObject(&unk_100793B98, 41, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_BYTE *)(v17 + 40) = a3;
  aBlock[4] = sub_10003B468;
  v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100793BB0;
  v18 = _Block_copy(aBlock);
  v19 = v28;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100028404((unint64_t *)&qword_1008268E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100047110(&qword_100828C80);
  v23 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

uint64_t sub_10002F570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_10079CD00, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  aBlock[4] = sub_10003BC70;
  v20 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_10079CEF8;
  v13 = _Block_copy(aBlock);
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10002FAC0();
  v16 = sub_100047110(&qword_100828C80);
  v17 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10002F74C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock[5];
  _QWORD *v46;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0[2] + OBJC_IVAR___CHHistoryDataProvider_allHistoryItems);
  swift_bridgeObjectRetain(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = (void *)HKLogActivity;
  v14 = v12;
  if (os_log_type_enabled(HKLogActivity, v12))
  {
    swift_bridgeObjectRetain_n(v10, 2);
    v38 = v13;
    v15 = swift_slowAlloc(22, -1);
    v39 = v4;
    v16 = v15;
    v17 = swift_slowAlloc(32, -1);
    v41 = v2;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136315394;
    v40 = v3;
    v19 = _typeName(_:qualified:)(v41, 0);
    v21 = v20;
    v44 = sub_10003E8EC(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock, v16 + 4);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2048;
    v22 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRelease(v10);
    v44 = v22;
    v3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock, v16 + 14);
    swift_bridgeObjectRelease(v10);
    v23 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, v14, "%s historyItems count: %ld", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v24 = v18;
    v2 = v41;
    swift_slowDealloc(v24, -1, -1);
    v25 = v16;
    v4 = v39;
    swift_slowDealloc(v25, -1, -1);

  }
  v26 = sub_10002FB90(v10);
  sub_10002FB54();
  v28 = (void *)static OS_dispatch_queue.main.getter(v27);
  v29 = swift_allocObject(&unk_10078C960, 24, 7);
  swift_weakInit(v29 + 16, v1);
  v30 = (_QWORD *)swift_allocObject(&unk_10078C9B0, 48, 7);
  v30[2] = v29;
  v30[3] = v10;
  v30[4] = v26;
  v30[5] = v2;
  aBlock[4] = (uint64_t)sub_10003AD54;
  v46 = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10002D0F8;
  aBlock[3] = (uint64_t)&unk_10078C9C8;
  v31 = _Block_copy(aBlock);
  swift_release(v46);
  static DispatchQoS.unspecified.getter(v32);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v33 = sub_10002FAC0();
  v34 = sub_100047110(&qword_100828C80);
  v35 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v3, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v9, v43);
}

unint64_t sub_10002FAC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008268E0;
  if (!qword_1008268E0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1008268E0);
  }
  return result;
}

unint64_t sub_10002FB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008268F0;
  if (!qword_1008268F0)
  {
    v1 = sub_100007050(&qword_100828C80);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008268F0);
  }
  return result;
}

unint64_t sub_10002FB54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100828710;
  if (!qword_100828710)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100828710);
  }
  return result;
}

_QWORD *sub_10002FB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v31[16];

  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v31[-v12];
  if (*(_QWORD *)(a1 + 16) < 2uLL)
  {
    swift_bridgeObjectRetain(a1);
    return (_QWORD *)a1;
  }
  else
  {
    v14 = static Calendar.current.getter(v11);
    Date.init()(v14);
    Calendar.startOfDay(for:)(v10);
    v15 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v15(v10, v6);
    v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    __chkstk_darwin(v16);
    *(_QWORD *)&v31[-16] = v13;
    swift_bridgeObjectRetain(a1);
    v17 = sub_10050EC60((uint64_t)sub_1001BEAD4, &v31[-32], a1);
    v18 = v17;
    if (*(_QWORD *)(v17 + 16) >= 0x64uLL)
      v19 = 100;
    else
      v19 = *(_QWORD *)(v17 + 16);
    v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v21 = swift_unknownObjectRetain_n(v18, 2);
    v22 = (_QWORD *)swift_dynamicCastClass(v21, v20);
    if (!v22)
    {
      swift_bridgeObjectRelease(v18);
      v22 = _swiftEmptyArrayStorage;
    }
    v23 = v22[2];
    swift_release(v22);
    if (v23 == v19)
    {
      v24 = (_QWORD *)swift_dynamicCastClass(v18, v20);
      if (!v24)
      {
        swift_bridgeObjectRelease(v18);
        v24 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      v24 = sub_100295BE8(v18, v18 + 32, 0, (2 * v19) | 1);
    }
    v25 = swift_bridgeObjectRelease(v18);
    if (!v24[2])
    {
      swift_release(v24);
      swift_bridgeObjectRetain(a1);
      v27 = swift_unknownObjectRetain_n(v26, 2);
      v28 = (_QWORD *)swift_dynamicCastClass(v27, v20);
      if (!v28)
      {
        swift_bridgeObjectRelease(a1);
        v28 = _swiftEmptyArrayStorage;
      }
      v29 = v28[2];
      swift_release(v28);
      if (v29 == 1)
      {
        v24 = (_QWORD *)swift_dynamicCastClass(a1, v20);
        if (!v24)
        {
          swift_bridgeObjectRelease(a1);
          v24 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease(a1);
        v24 = sub_100295BE8(a1, a1 + 32, 0, 3uLL);
      }
      v25 = swift_bridgeObjectRelease(a1);
    }
    ((void (*)(_BYTE *, uint64_t, __n128))v15)(v13, v6, v25);
  }
  return v24;
}

void sub_10002FF1C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v6 = IndexPath.section.getter(a1);
  v7 = sub_100022000(v6);
  if (v7 == 6
    || ((v8 = v7,
         ObjectType = swift_getObjectType(a2),
         (v10 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ActivityTileProtocol)) != 0)
      ? (v11 = v10)
      : (v11 = 0),
        v10 ? (v12 = (uint64_t)a2) : (v12 = 0),
        !v12))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003ELL, 0x8000000100690720, "FitnessApp/ActivityTileViewController.swift", 43, 2, 620, 0);
    __break(1u);
  }
  else
  {
    v13 = a2;
    sub_10003003C(v12, v11, v8, a3, a1);

  }
}

uint64_t sub_10003003C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  char *v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  char *v86;
  Class isa;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _BYTE v122[32];

  v119 = a4;
  v117 = a2;
  v118 = a5;
  v116 = a1;
  v5 = a3;
  v6 = type metadata accessor for IndexPath(0);
  v108 = *(_QWORD *)(v6 - 8);
  v109 = v6;
  __chkstk_darwin(v6);
  v111 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImpressionMetrics.ID(0);
  v106 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v105 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v110 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v107 = (char *)&v102 - v15;
  __chkstk_darwin(v14);
  v104 = (char *)&v102 - v16;
  v17 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MetricClickElement(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_10082CDC8);
  v25 = __chkstk_darwin(v24);
  v114 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v115 = (char *)&v102 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v102 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v102 - v32;
  v121 = (char *)&v102 - v32;
  if (v5 == 2)
  {
    sub_100030780(2);
    v113 = v34;
    v102 = v35;
    v103 = v8;
    v36 = enum case for MetricClickElement.swoosh(_:);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 104);
    v38 = v37(v23, enum case for MetricClickElement.swoosh(_:), v20);
    v39 = static MetricConstants.itemIdentifierType.getter(v38);
    v41 = v40;
    v42 = sub_100030A4C((uint64_t)_swiftEmptyArrayStorage);
    v112 = v11;
    v43 = v42;
    ScalarDictionary.init()();
    ImpressionMetrics.init(parentId:elementId:name:clickElement:index:idType:additionalFields:custom:)(0, 0, 0x5472656E69617254, 0xEB00000000737069, v113, v102, v23, 0, v39, v41, v43, v19);
    v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56);
    v113(v121, 0, 1, v10);
    sub_100030780(2);
    v45 = v44;
    v47 = v46;
    v48 = v37(v23, v36, v20);
    v49 = static MetricConstants.itemIdentifierType.getter(v48);
    v51 = v50;
    v52 = sub_100030A4C((uint64_t)_swiftEmptyArrayStorage);
    ScalarDictionary.init()();
    v101 = v52;
    v11 = v112;
    v53 = v104;
    v54 = ImpressionMetrics.init(parentId:elementId:name:clickElement:index:idType:additionalFields:custom:)(0, 0, 0x5472656E69617254, 0xEB00000000737069, v45, v47, v23, 0, v49, v51, v101, v19);
    v55 = v105;
    ImpressionMetrics.id.getter(v54);
    v56 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v53, v10);
    v57 = ImpressionMetrics.ID.element.getter(v56);
    v33 = v121;
    v58 = v57;
    v60 = v59;
    (*(void (**)(char *, uint64_t))(v106 + 8))(v55, v103);
  }
  else
  {
    v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v113((char *)&v102 - v32, 1, 1, v10);
    v58 = 0;
    v60 = 0;
  }
  sub_100030A04((uint64_t)v33, (uint64_t)v31);
  v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v61(v31, 1, v10) == 1)
  {
    sub_100030740((uint64_t)v31);
    v62 = v119;
  }
  else
  {
    v63 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
    v112 = v58;
    v64 = v107;
    v65 = v63(v107, v31, v10);
    v62 = v119;
    v66 = IndexPath.section.getter(v65);
    v67 = objc_msgSend(v118, "rectForSection:", v66);
    v69 = v68;
    v71 = v70;
    v73 = v72;
    v75 = v74;
    v76 = IndexPath.section.getter(v67);
    v77 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v115, v64, v10);
    v113((char *)v77, 0, 1, v10);
    swift_beginAccess(v120 + 40, v122, 33, 0);
    sub_100030E14(v77, v76);
    swift_endAccess(v122);
    v78 = sub_100030B80();
    ImpressionsCalculator.addElement(_:at:)(v64, v69, v71, v73, v75);
    v79 = swift_release(v78);
    v80 = v64;
    v58 = v112;
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v80, v10, v79);
  }
  ObjectType = swift_getObjectType(v116);
  v82 = IndexPath.row.getter(ObjectType);
  v83 = ObjectType;
  v84 = (uint64_t)v114;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 16))(v58, v60, v82, v83);
  v85 = swift_bridgeObjectRelease(v60);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v61)(v84, 1, v10, v85) == 1)
  {
    sub_100030740((uint64_t)v121);
  }
  else
  {
    v86 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v110, v84, v10);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v118, "rectForRowAtIndexPath:", isa);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    v95 = v94;

    v96 = (uint64_t)v111;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v111, v62, v109);
    v97 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v115, v86, v10);
    v113((char *)v97, 0, 1, v10);
    swift_beginAccess(v120 + 48, v122, 33, 0);
    sub_100022218(v97, v96);
    swift_endAccess(v122);
    v98 = sub_100030B80();
    ImpressionsCalculator.addElement(_:at:)(v86, v89, v91, v93, v95);
    v99 = swift_release(v98);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v86, v10, v99);
    v84 = (uint64_t)v121;
  }
  return sub_100030740(v84);
}

uint64_t sub_100030740(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10082CDC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100030780(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000307AC()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, 0, 0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_100030A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10082CDC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100030A4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100047110(&qword_10082B048);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100021CC0(v7, (uint64_t)&v16, &qword_10082B050);
    v8 = v16;
    v9 = v17;
    result = sub_10027EF58(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100038FD4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030B80()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  type metadata accessor for ImpressionsCalculator.Configuration(0);
  __chkstk_darwin();
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v1[4];
  if (v4)
  {
    v5 = v1[4];
  }
  else
  {
    type metadata accessor for ImpressionsCalculator();
    static ImpressionsCalculator.Configuration.half.getter();
    v6 = v1[2];
    v7 = v1[3];
    swift_unknownObjectRetain(v6);
    v5 = ImpressionsCalculator.__allocating_init(configuration:tracker:)(v3, v6, v7);
    v8 = v1[4];
    v1[4] = v5;
    swift_retain(v5);
    swift_release(v8);
    v4 = 0;
  }
  swift_retain(v4);
  return v5;
}

uint64_t sub_100030C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100030C60(a1);
}

uint64_t sub_100030C60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ImpressionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void sub_100030CA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100030DDC(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100401884();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_release(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_100005F48(v15, a4 & 1);
  v20 = sub_100030DDC(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
}

unint64_t sub_100030DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100031110(a1, v3);
}

void sub_100030E14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  __n128 v14;
  char v15;
  unint64_t v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = sub_100047110(&qword_10082CDC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001BE90(a1, &qword_10082CDC8);
    v13 = sub_100030DDC(a2);
    if ((v15 & 1) != 0)
    {
      v16 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v18 = *v3;
      v24 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100401D0C();
        v18 = v24;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v18 + 56) + *(_QWORD *)(v10 + 72) * v16, v9);
      sub_1004D1FD4(v16, v18);
      v19 = *v3;
      *v3 = v18;
      v14 = swift_bridgeObjectRelease(v19);
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, v20, 1, v9, v14);
    sub_10001BE90((uint64_t)v8, &qword_10082CDC8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v21 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v24 = *v3;
    *v3 = 0x8000000000000000;
    sub_100030FEC((uint64_t)v12, a2, v21);
    v22 = *v3;
    *v3 = v24;
    swift_bridgeObjectRelease(v22);
  }
}

uint64_t sub_100030FEC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100030DDC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for ImpressionMetrics(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_1000311AC(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100401D0C();
      goto LABEL_7;
    }
    sub_100031238(v13, a3 & 1);
    v20 = sub_100030DDC(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1000311AC(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

unint64_t sub_100031110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1000311AC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for ImpressionMetrics(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

void sub_100031238(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v3 = v2;
  v6 = type metadata accessor for ImpressionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100047110(&qword_100832CB8);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v38 = v3;
    v13 = 0;
    v14 = *(_QWORD *)(v10 + 64);
    v41 = (_QWORD *)(v10 + 64);
    v15 = 1 << *(_BYTE *)(v10 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & v14;
    v40 = (unint64_t)(v15 + 63) >> 6;
    v18 = v11 + 64;
    v39 = a2;
    v19 = 16;
    if ((a2 & 1) != 0)
      v19 = 32;
    v42 = v19;
    while (1)
    {
      if (v17)
      {
        v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v23 >= v40)
          goto LABEL_35;
        v24 = v41[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v40)
            goto LABEL_35;
          v24 = v41[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v40)
            {
LABEL_35:
              if ((v39 & 1) == 0)
              {
                swift_release(v10);
                v3 = v38;
                goto LABEL_42;
              }
              v36 = 1 << *(_BYTE *)(v10 + 32);
              if (v36 >= 64)
                bzero(v41, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v41 = -1 << v36;
              v3 = v38;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v24 = v41[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v13 >= v40)
                  goto LABEL_35;
                v24 = v41[v13];
                ++v25;
                if (v24)
                  goto LABEL_25;
              }
            }
            v13 = v25;
          }
        }
LABEL_25:
        v17 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v22);
      v27 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + v42))(v9, *(_QWORD *)(v10 + 56) + v27 * v22, v6);
      v28 = static Hasher._hash(seed:_:)(*(_QWORD *)(v12 + 40), v26);
      v29 = -1 << *(_BYTE *)(v12 + 32);
      v30 = v28 & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v18 + 8 * (v30 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v18 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v18 + 8 * v31);
        }
        while (v35 == -1);
        v20 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v20) = v26;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 56) + v27 * v20, v9, v6);
      ++*(_QWORD *)(v12 + 16);
    }
  }
  swift_release(v10);
LABEL_42:
  *v3 = v12;
}

void sub_100031568(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  NSObject *v36;
  uint8_t *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;

  v2 = (uint64_t)v1;
  v81 = a1;
  v3 = *v1;
  v4 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v4);
  v80 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivitySharingFriendListDateItemGroup(0);
  v79 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_log_type_t.default.getter(v7);
  v11 = (void *)HKLogActivity;
  v12 = v10;
  if (os_log_type_enabled(HKLogActivity, v10))
  {
    v13 = v11;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = v3;
    v16 = (_QWORD *)swift_slowAlloc(32, -1);
    v83 = v16;
    *(_DWORD *)v14 = 136315138;
    v82 = sub_10003E8EC(0xD00000000000001ELL, 0x800000010068A610, (uint64_t *)&v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "%s", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v17 = v16;
    v3 = v15;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  v18 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager);
  v19 = objc_msgSend(v18, "hasInitializedFriendData");
  if (!(_DWORD)v19)
  {
    v33 = static os_log_type_t.default.getter(v19);
    v34 = (void *)HKLogActivity;
    v35 = v33;
    if (os_log_type_enabled(HKLogActivity, v33))
    {
      v36 = v34;
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (_QWORD *)swift_slowAlloc(32, -1);
      v83 = v38;
      *(_DWORD *)v37 = 136315138;
      v82 = sub_10003E8EC(0xD00000000000001ELL, 0x800000010068A610, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v37 + 4);
      _os_log_impl((void *)&_mh_execute_header, v36, v35, "%s friend data is not initialized.", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    return;
  }
  v76 = v3;
  v20 = objc_msgSend(v18, "sectionForFriendsCompetingWithMe");
  v21 = objc_msgSend(v20, "rows");

  v22 = sub_10001E724(0, &qword_100821A80, ASFriendListRow_ptr);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  v83 = _swiftEmptyArrayStorage;
  v77 = v22;
  if ((unint64_t)v23 >> 62)
    goto LABEL_36;
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v23);
  while (1)
  {
    v78 = v2;
    if (v24)
    {
      if (v24 < 1)
      {
        __break(1u);
        goto LABEL_48;
      }
      v74 = v18;
      for (i = 0; i != v24; ++i)
      {
        if ((v23 & 0xC000000000000001) != 0)
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
        else
          v26 = *(id *)(v23 + 8 * i + 32);
        v27 = v26;
        v28 = objc_msgSend(v26, "friend", v74);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v31 = v83[2];
        v30 = v83[3];
        if (v31 >= v30 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
        specialized Array._endMutation()(v32);
      }
      swift_bridgeObjectRelease(v23);
      v75 = v83;
      v2 = v78;
      v18 = v74;
    }
    else
    {
      swift_bridgeObjectRelease(v23);
      v75 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v23);
    v23 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)ASFriendListDisplayContext), "init");
    v39 = (uint64_t)v81;
    objc_msgSend((id)v23, "setDisplayMode:", v81);
    objc_msgSend((id)v23, "setDisplayFilter:", 1);
    v40 = v18;
    v41 = objc_msgSend(v18, "sectionsForDisplayContext:", v23);
    v42 = sub_10001E724(0, &qword_100821A88, ASFriendListSection_ptr);
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

    swift_retain(v2);
    v44 = sub_10013276C(v43, v2, v39);
    swift_release(v2);
    v45 = swift_bridgeObjectRelease(v43).n128_u64[0];
    v46 = v44[2];
    v81 = v44;
    if (!v46)
      break;
    v47 = (uint64_t)v44 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
    v18 = *(void **)(v79 + 72);
    swift_bridgeObjectRetain(v44);
    v48 = 0;
    while (1)
    {
      sub_100031E44(v47, (uint64_t)v9);
      v49 = *(_QWORD *)(*(_QWORD *)&v9[*(int *)(v6 + 20)] + 16);
      v50 = __OFADD__(v48, v49);
      v48 += v49;
      if (v50)
        break;
      sub_100031DC4((uint64_t)v9);
      v47 += (uint64_t)v18;
      if (!--v46)
      {
        v45 = swift_bridgeObjectRelease(v81).n128_u64[0];
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_36:
    if (v23 < 0)
      v64 = v23;
    else
      v64 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v24 = _CocoaArrayWrapper.endIndex.getter(v64);
  }
  v48 = 0;
LABEL_25:
  v51 = objc_msgSend(v40, "sectionForFriendsInvitedByMe", *(double *)&v45);
  v52 = objc_msgSend(v51, "rows");

  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v77);
  if ((unint64_t)v53 >> 62)
  {
    if (v53 < 0)
      v65 = v53;
    else
      v65 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v53);
    v54 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v53);
    if (!v54)
      goto LABEL_44;
LABEL_27:
    v83 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v54);
    if ((v54 & 0x8000000000000000) == 0)
    {
      v79 = v23;
      v55 = 0;
      while (1)
      {
        v56 = (v53 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v53)
            : *(id *)(v53 + 8 * v55 + 32);
        v57 = v56;
        v58 = objc_msgSend(v56, "friend");
        v59 = objc_msgSend(v58, "contact");

        if (!v59)
          goto LABEL_49;
        ++v55;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v60);
        v61 = v83[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v61);
        v62 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v59);
        specialized ContiguousArray._endMutation()(v62);
        if (v54 == v55)
        {
          v63 = v83;
          swift_bridgeObjectRelease(v53);
          v2 = v78;
          v23 = v79;
          goto LABEL_45;
        }
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    return;
  }
  v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v54)
    goto LABEL_27;
LABEL_44:
  swift_bridgeObjectRelease(v53);
  v63 = _swiftEmptyArrayStorage;
LABEL_45:
  v66 = type metadata accessor for TaskPriority(0);
  v67 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v80, 1, 1, v66);
  type metadata accessor for MainActor(0);
  swift_retain(v2);
  v69 = static MainActor.shared.getter(v68);
  v70 = (_QWORD *)swift_allocObject(&unk_100787D28, 80, 7);
  v70[2] = v69;
  v70[3] = &protocol witness table for MainActor;
  v70[4] = v75;
  v70[5] = v48;
  v71 = v81;
  v70[6] = v2;
  v70[7] = v71;
  v72 = v76;
  v70[8] = v63;
  v70[9] = v72;
  v73 = sub_10020D9C0(v67, (uint64_t)&unk_100821A98, (uint64_t)v70);
  swift_release(v73);

}

uint64_t sub_100031D50(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821680, type metadata accessor for ActivitySharingFriendListDateItemGroup);
  *v3 = result;
  return result;
}

uint64_t sub_100031D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100828370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031DC4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivitySharingFriendListDateItemGroup(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100031E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivitySharingFriendListDateItemGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t destroy for ActivityStatistics(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[17]);
}

char *sub_100031F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  id v9;
  NSString v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;

  swift_getObjectType(v3);
  *(_OWORD *)&v3[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_configuration] = xmmword_100623580;
  v6 = OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_insetContentView;
  v7 = objc_allocWithZone((Class)UIView);
  v8 = v3;
  v9 = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v6] = v9;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_videoView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_observers] = _swiftEmptyArrayStorage;

  if (a3)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = v8;
  v20.super_class = (Class)type metadata accessor for TrendsOnBoardingActivityTile();
  v11 = (char *)objc_msgSendSuper2(&v20, "initWithStyle:reuseIdentifier:", a1, v10);

  v12 = OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_insetContentView;
  v13 = *(void **)&v11[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_insetContentView];
  v14 = v11;
  v15 = v13;
  v16 = sub_100032478();
  objc_msgSend(v15, "setBackgroundColor:", v16);

  v17 = objc_msgSend(*(id *)&v11[v12], "layer");
  objc_msgSend(v17, "setCornerRadius:", sub_10003249C());

  v18 = objc_msgSend(v14, "contentView");
  objc_msgSend(v18, "addSubview:", *(_QWORD *)&v11[v12]);

  sub_100032184();
  return v14;
}

void sub_100032184()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  double v16;
  id v17;
  id v18;
  id v19;
  id v20;
  double v21;
  id v22;
  uint64_t v23;
  void *v24;
  Class isa;

  swift_getObjectType(v0);
  v24 = (void *)objc_opt_self(NSLayoutConstraint);
  v1 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v1, 64, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100623750;
  v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_insetContentView];
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = objc_msgSend(v0, "contentView");
  v6 = objc_msgSend(v5, "topAnchor");

  v7 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v6, sub_100032C24());
  *(_QWORD *)(v2 + 32) = v7;
  v8 = objc_msgSend(v3, "leadingAnchor");
  v9 = objc_msgSend(v0, "contentView");
  v10 = objc_msgSend(v9, "leadingAnchor");

  sub_100032C24();
  v12 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v10, v11);

  *(_QWORD *)(v2 + 40) = v12;
  v13 = objc_msgSend(v3, "trailingAnchor");
  v14 = objc_msgSend(v0, "contentView");
  v15 = objc_msgSend(v14, "trailingAnchor");

  sub_100032C24();
  v17 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v15, -v16);

  *(_QWORD *)(v2 + 48) = v17;
  v18 = objc_msgSend(v3, "bottomAnchor");
  v19 = objc_msgSend(v0, "contentView");
  v20 = objc_msgSend(v19, "bottomAnchor");

  sub_100032C24();
  v22 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v20, -v21);

  *(_QWORD *)(v2 + 56) = v22;
  specialized Array._endMutation()(v23);
  sub_100039898();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v2).n128_f64[0]);

}

id sub_100032478()
{
  return sub_100032490();
}

id sub_100032490()
{
  return +[UIColor secondarySystemGroupedBackgroundColor](UIColor, "secondarySystemGroupedBackgroundColor");
}

double sub_10003249C()
{
  return 12.0;
}

void sub_1000324AC(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  id v20;
  id v21;
  id v22;
  double v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;

  v2 = v1;
  swift_getObjectType(v1);
  v3 = sub_100047110((uint64_t *)&unk_100828340);
  v4 = swift_allocObject(v3, 144, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100626C20;
  v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView];
  v6 = objc_msgSend(v5, "topAnchor");
  v7 = objc_msgSend(v1, "contentView");
  v8 = objc_msgSend(v7, "topAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, sub_100032C24());
  *(_QWORD *)(v4 + 32) = v9;
  v10 = objc_msgSend(v5, "leadingAnchor");
  v11 = objc_msgSend(v1, "contentView");
  v12 = objc_msgSend(v11, "leadingAnchor");

  sub_100032C24();
  v14 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v12, v13);

  *(_QWORD *)(v4 + 40) = v14;
  v15 = objc_msgSend(v5, "trailingAnchor");
  v16 = objc_msgSend(v1, "contentView");
  v17 = objc_msgSend(v16, "trailingAnchor");

  sub_100032C24();
  v19 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v17, -v18);

  *(_QWORD *)(v4 + 48) = v19;
  v20 = objc_msgSend(v5, "bottomAnchor");
  v21 = objc_msgSend(v1, "contentView");
  v22 = objc_msgSend(v21, "bottomAnchor");

  sub_100032C24();
  v24 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v22, -v23);

  *(_QWORD *)(v4 + 56) = v24;
  v25 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
  v26 = objc_msgSend(v25, "topAnchor");
  v27 = objc_msgSend(v5, "topAnchor");
  v28 = objc_msgSend(v26, "constraintGreaterThanOrEqualToAnchor:constant:", v27, *(double *)&qword_1008227B8);

  *(_QWORD *)(v4 + 64) = v28;
  v29 = objc_msgSend(v25, "leadingAnchor");
  v30 = objc_msgSend(v5, "leadingAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, *(double *)&qword_1008227C0);

  *(_QWORD *)(v4 + 72) = v31;
  v32 = objc_msgSend(v25, "centerYAnchor");
  v33 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView];
  v34 = objc_msgSend(v33, "centerYAnchor");
  v35 = objc_msgSend(v32, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v4 + 80) = v35;
  v36 = objc_msgSend(v25, "bottomAnchor");
  v37 = objc_msgSend(v5, "bottomAnchor");
  v38 = objc_msgSend(v36, "constraintLessThanOrEqualToAnchor:constant:", v37, -16.0);

  *(_QWORD *)(v4 + 88) = v38;
  v39 = objc_msgSend(v33, "topAnchor");
  v40 = objc_msgSend(v5, "topAnchor");
  v41 = objc_msgSend(v39, "constraintGreaterThanOrEqualToAnchor:constant:", v40, *(double *)&qword_1008227B8);

  *(_QWORD *)(v4 + 96) = v41;
  v42 = objc_msgSend(v33, "leadingAnchor");
  v43 = objc_msgSend(v25, "trailingAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, *(double *)&qword_1008227C0);

  *(_QWORD *)(v4 + 104) = v44;
  v45 = objc_msgSend(v33, "widthAnchor");
  v46 = objc_msgSend(v45, "constraintEqualToConstant:", 138.0);

  *(_QWORD *)(v4 + 112) = v46;
  v47 = objc_msgSend(v33, "heightAnchor");
  v48 = objc_msgSend(v47, "constraintEqualToConstant:", 138.0);

  *(_QWORD *)(v4 + 120) = v48;
  v49 = objc_msgSend(v33, "trailingAnchor");
  v50 = objc_msgSend(v5, "trailingAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v50, -*(double *)&qword_1008227C0);

  *(_QWORD *)(v4 + 128) = v51;
  v52 = objc_msgSend(v33, "bottomAnchor");
  v53 = objc_msgSend(v5, "bottomAnchor");
  v54 = objc_msgSend(v52, "constraintLessThanOrEqualToAnchor:constant:", v53, -16.0);

  *(_QWORD *)(v4 + 136) = v54;
  specialized Array._endMutation()(v55);
  __asm { BR              X10 }
}

void sub_100032B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Class isa;

  v2 = sub_1001544BC();
  sub_100032DE4(v2);
  v3 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints) = v1;
  swift_bridgeObjectRelease(v4);
  v5 = (void *)objc_opt_self(NSLayoutConstraint);
  v6 = *(_QWORD *)(v0 + v3);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v6);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

}

double sub_100032C10()
{
  return 2.5;
}

uint64_t sub_100032C28(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_100032DE4(uint64_t a1)
{
  return sub_100032C28(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100032DF0);
}

uint64_t sub_100032DF0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100298BD4(&qword_10082B928, &qword_1008261E8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100047110(&qword_1008261E8);
          v13 = sub_10040ACDC(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

id sub_1000330B0()
{
  char *v0;
  id v1;
  id result;
  char **v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for TrendsSplashVideoView(0);
  objc_msgSendSuper2(&v4, "didMoveToWindow");
  v1 = objc_msgSend(v0, "window");

  result = *(id *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
  if (result)
  {
    v3 = &selRef_pause;
    if (v1)
      v3 = &selRef_play;
    return objc_msgSend(result, *v3);
  }
  return result;
}

void sub_10003313C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  char **v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  Class isa;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  void **aBlock;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for TrendsSplashVideoView(0));
  v3 = sub_100033D34();
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_videoView);
    v83 = v1;
    *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_videoView) = v4;
    v6 = v4;

    v7 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    v8 = (void *)objc_opt_self(NSBundle);
    v9 = objc_msgSend(v8, "mainBundle");
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v13 = v12;

    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setText:", v14);
    swift_bridgeObjectRelease(v13);

    v15 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v16 = (void *)UILabel.withTextColor(_:)();

    objc_msgSend(v16, "setLineBreakMode:", 0);
    objc_msgSend(v16, "setNumberOfLines:", 0);
    if (qword_10081D8C0 != -1)
      swift_once(&qword_10081D8C0, sub_10004DFD4);
    objc_msgSend(v16, "setFont:", qword_100829AE0);
    objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v17 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
    v18 = objc_msgSend(v8, "mainBundle");
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v22 = v21;

    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "setTitle:forState:", v23, objc_msgSend(v17, "state"));
    swift_bridgeObjectRelease(v22);

    v24 = qword_100829AE0;
    v25 = objc_msgSend(v17, "titleLabel");
    objc_msgSend(v25, "setFont:", v24);

    if (qword_10081D8C8 != -1)
      swift_once(&qword_10081D8C8, sub_10000904C);
    objc_msgSend(v17, "setTitleColor:forState:", qword_100829AE8, objc_msgSend(v17, "state"));
    objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v26 = objc_msgSend(v6, "window");

    v27 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
    if (v27)
    {
      v28 = &selRef_pause;
      if (v26)
        v28 = &selRef_play;
      objc_msgSend(v27, *v28);
    }
    objc_msgSend(v17, "addTarget:action:forControlEvents:", v83, "didTapGetStartedButton", 64);
    v29 = *(void **)(v83 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_insetContentView);
    objc_msgSend(v29, "addSubview:", v6);
    objc_msgSend(v29, "addSubview:", v16);
    objc_msgSend(v29, "addSubview:", v17);
    v81 = (id)objc_opt_self(NSLayoutConstraint);
    v79 = sub_100047110((uint64_t *)&unk_100828340);
    v30 = swift_allocObject(v79, 104, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100630740;
    v31 = objc_msgSend(v6, "topAnchor");
    v32 = objc_msgSend(v29, "topAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

    *(_QWORD *)(v30 + 32) = v33;
    v34 = objc_msgSend(v6, "centerXAnchor");
    v35 = objc_msgSend(v29, "centerXAnchor");
    v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

    *(_QWORD *)(v30 + 40) = v36;
    v37 = objc_msgSend(v6, "heightAnchor");
    v38 = objc_msgSend(v37, "constraintEqualToConstant:", 122.0);

    *(_QWORD *)(v30 + 48) = v38;
    v39 = objc_msgSend(v16, "topAnchor");
    v40 = objc_msgSend(v6, "bottomAnchor");
    v41 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v40, 4.0);

    *(_QWORD *)(v30 + 56) = v41;
    v42 = objc_msgSend(v16, "leadingAnchor");
    v43 = objc_msgSend(v29, "leadingAnchor");
    v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, 16.0);

    *(_QWORD *)(v30 + 64) = v44;
    v45 = objc_msgSend(v16, "trailingAnchor");
    v46 = objc_msgSend(v29, "trailingAnchor");
    v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -16.0);

    *(_QWORD *)(v30 + 72) = v47;
    v48 = objc_msgSend(v17, "topAnchor");
    v49 = objc_msgSend(v16, "bottomAnchor");
    v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

    *(_QWORD *)(v30 + 80) = v50;
    v51 = objc_msgSend(v17, "leadingAnchor");
    v52 = objc_msgSend(v29, "leadingAnchor");
    v53 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v52, 16.0);

    *(_QWORD *)(v30 + 88) = v53;
    v54 = objc_msgSend(v17, "bottomAnchor");
    v55 = objc_msgSend(v29, "bottomAnchor");
    v56 = objc_msgSend(v54, "constraintEqualToAnchor:constant:", v55, -10.0);

    *(_QWORD *)(v30 + 96) = v56;
    specialized Array._endMutation()(v57);
    sub_100039898();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v81, "activateConstraints:", isa, swift_bridgeObjectRelease(v30).n128_f64[0]);

    v59 = swift_allocObject(v79, 56, 7);
    *(_OWORD *)(v59 + 16) = xmmword_100624C90;
    *(_QWORD *)(v59 + 32) = v6;
    *(_QWORD *)(v59 + 40) = v16;
    *(_QWORD *)(v59 + 48) = v17;
    aBlock = (void **)v59;
    specialized Array._endMutation()(v59);
    v60 = *(_QWORD *)(v83 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews);
    *(_QWORD *)(v83 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_activeViews) = aBlock;
    v61 = v6;
    v82 = v16;
    v80 = v17;
    swift_bridgeObjectRelease(v60);
    v62 = (void *)objc_opt_self(NSNotificationCenter);
    v63 = objc_msgSend(v62, "defaultCenter");
    if (qword_10081D7D8 != -1)
      swift_once(&qword_10081D7D8, sub_10004CDAC);
    v64 = qword_10086A208;
    v65 = (void *)objc_opt_self(NSOperationQueue);
    v66 = objc_msgSend(v65, "mainQueue");
    v67 = swift_allocObject(&unk_100791298, 24, 7);
    swift_unknownObjectWeakInit(v67 + 16, v61);
    v88 = sub_100039978;
    v89 = v67;
    aBlock = _NSConcreteStackBlock;
    v85 = 1107296256;
    v86 = sub_1000398D4;
    v87 = &unk_1007912B0;
    v68 = _Block_copy(&aBlock);
    swift_release(v89);
    v69 = objc_msgSend(v63, "addObserverForName:object:queue:usingBlock:", v64, 0, v66, v68);
    _Block_release(v68);

    v70 = objc_msgSend(v62, "defaultCenter");
    if (qword_10081D7E0 != -1)
      swift_once(&qword_10081D7E0, sub_10004CD78);
    v71 = qword_10086A210;
    v72 = objc_msgSend(v65, "mainQueue");
    v73 = swift_allocObject(&unk_100791298, 24, 7);
    swift_unknownObjectWeakInit(v73 + 16, v61);
    v88 = sub_10024F0EC;
    v89 = v73;
    aBlock = _NSConcreteStackBlock;
    v85 = 1107296256;
    v86 = sub_1000398D4;
    v87 = &unk_1007912D8;
    v74 = _Block_copy(&aBlock);
    swift_release(v89);
    v75 = objc_msgSend(v70, "addObserverForName:object:queue:usingBlock:", v71, 0, v72, v74);
    _Block_release(v74);

    v76 = sub_100047110(&qword_10082CEC0);
    v77 = swift_allocObject(v76, 96, 7);
    *(_OWORD *)(v77 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v77 + 56) = swift_getObjectType(v69);
    *(_QWORD *)(v77 + 32) = v69;
    *(_QWORD *)(v77 + 88) = swift_getObjectType(v75);
    *(_QWORD *)(v77 + 64) = v75;
    v78 = *(_QWORD *)(v83 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_observers);
    *(_QWORD *)(v83 + OBJC_IVAR____TtC10FitnessApp28TrendsOnBoardingActivityTile_observers) = v77;

    swift_bridgeObjectRelease(v78);
  }
}

uint64_t type metadata accessor for TrendsSplashVideoView(uint64_t a1)
{
  uint64_t result;

  result = qword_100822B40;
  if (!qword_100822B40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrendsSplashVideoView);
  return result;
}

id sub_100033D34()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  objc_class *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;

  v25 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player] = 0;
  v5 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer] = 0;
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = v0;
  v8 = objc_msgSend(v6, "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "pathForResource:ofType:", v9, v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    URL.init(fileURLWithPath:)(v12, v14);
    v15 = swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, char *, uint64_t, __n128))(v1 + 32))(&v7[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_url], v3, v25, v15);

    v16 = (objc_class *)type metadata accessor for TrendsSplashVideoView(0);
    v26.receiver = v7;
    v26.super_class = v16;
    v17 = objc_msgSendSuper2(&v26, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v17, "configurePlayer");
    v18 = (void *)objc_opt_self(UIColor);
    v19 = v17;
    v20 = objc_msgSend(v18, "clearColor");
    objc_msgSend(v19, "setBackgroundColor:", v20);

  }
  else
  {

    v21 = *(void **)&v0[v5];
    v22 = type metadata accessor for TrendsSplashVideoView(0);
    swift_deallocPartialClassInstance(v7, v22, *(unsigned int *)((swift_isaMask & *(_QWORD *)v7) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v7) + 0x34));
    return 0;
  }
  return v19;
}

void sub_100033FC8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player])
  {
    v6 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer;
    if (!*(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer])
    {
      URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_url);
      v8 = v7;
      v9 = objc_msgSend((id)objc_opt_self(AVAsset), "assetWithURL:", v7);

      v10 = objc_msgSend(objc_allocWithZone((Class)AVPlayerItem), "initWithAsset:", v9);
      v11 = objc_msgSend(objc_allocWithZone((Class)AVQueuePlayer), "init");
      objc_msgSend(v11, "_setParticipatesInAudioSession:", 0);
      objc_msgSend(v11, "setPreventsDisplaySleepDuringVideoPlayback:", 0);
      objc_msgSend(v11, "setAllowsExternalPlayback:", 0);
      objc_msgSend(v11, "insertItem:afterItem:", v10, 0);
      v12 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
      type metadata accessor for MainActor(0);
      v13 = v11;
      v14 = static MainActor.shared.getter();
      v15 = (_QWORD *)swift_allocObject(&unk_1007892F0, 40, 7);
      v15[2] = v14;
      v15[3] = &protocol witness table for MainActor;
      v15[4] = v13;
      v16 = sub_1005A9074((uint64_t)v4, (uint64_t)&unk_100822BA0, (uint64_t)v15);
      swift_release(v16);
      v17 = objc_msgSend((id)objc_opt_self(AVPlayerLayer), "playerLayerWithPlayer:", v13);
      v18 = *(void **)&v1[v5];
      *(_QWORD *)&v1[v5] = v13;
      v19 = v13;

      v20 = *(void **)&v1[v6];
      *(_QWORD *)&v1[v6] = v17;
      v21 = v17;

      v22 = objc_msgSend(v1, "layer");
      objc_msgSend(v22, "addSublayer:", v21);

    }
  }
}

uint64_t sub_10003423C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081E650);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10003427C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  double v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  double v20[2];
  char v21;
  _QWORD v22[2];
  char v23;

  v4 = sub_100047110(&qword_100828450);
  NSKeyValueObservedChange.oldValue.getter(v22);
  v5 = *(double *)v22;
  v6 = *(double *)&v22[1];
  v7 = v23;
  NSKeyValueObservedChange.newValue.getter(v20, v4);
  if ((v7 & 1) != 0)
  {
    if ((v21 & 1) != 0)
      return;
    goto LABEL_9;
  }
  if ((v21 & 1) != 0 || (v5 == v20[0] ? (v8 = v6 == v20[1]) : (v8 = 0), !v8))
  {
LABEL_9:
    v9 = a3 + 16;
    swift_beginAccess(v9, v22, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      v11 = (void *)Strong;
      v12 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_impressionsTracker);
      swift_retain(v12);

      v13 = swift_beginAccess(v12 + 40, v20, 0, 0);
      v14 = *(_QWORD *)(v12 + 40);
      __chkstk_darwin(v13);
      swift_bridgeObjectRetain(v14);
      sub_1002175A0(v15, (void (*)(uint64_t, char *))sub_100218688);
      swift_bridgeObjectRelease(v14);
      v16 = swift_beginAccess(v12 + 48, v19, 0, 0);
      v17 = *(_QWORD *)(v12 + 48);
      __chkstk_darwin(v16);
      swift_bridgeObjectRetain(v17);
      sub_1003E75BC(v18, (void (*)(char *, char *))sub_100218690);
      swift_release(v12);
      swift_bridgeObjectRelease(v17);
    }
  }
}

uint64_t sub_100034470(void *a1, unint64_t a2)
{
  char v3;
  char v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t result;

  v3 = sub_100022000(a2);
  if (v3 == 6)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000040, 0x80000001006907A0, "FitnessApp/ActivityTileViewController.swift", 43, 2, 572, 0);
    __break(1u);
  }
  else
  {
    v4 = v3;
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(a1, "dequeueReusableHeaderFooterViewWithIdentifier:", v5);

    if (v6)
    {
      v7 = v6;
      sub_100034668(v4);
      v9 = v8;
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setAccessibilityIdentifier:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

    }
    sub_100030780(v4);
    v12 = v11;
    v14 = v13;
    sub_100034750(v4);
    v17 = v15;
    v18 = v16;
    if (v6)
    {
      v19 = type metadata accessor for ActivityTileSectionHeader();
      if (swift_dynamicCastClass(v6, v19))
      {
        v20 = v6;
        sub_10003482C(v12, v14, 0, 0, v17, v18, 18.0);
        sub_100022BA4(v17, v18);

      }
      else
      {
        v21 = v6;
        sub_100022BA4(v17, v18);

      }
    }
    else
    {
      sub_100022BA4(v15, v16);
    }
    swift_bridgeObjectRelease(v14);
    return (uint64_t)v6;
  }
  return result;
}

void sub_100034668(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000346B8(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v1._countAndFlagsBits = a1 + 2;
  v1._object = (void *)0x8000000100688390;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x8000000100688390);
  v2._countAndFlagsBits = 0x7265646165482ELL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  return v4;
}

void sub_100034750(char a1)
{
  __asm { BR              X10 }
}

id (*sub_100034798())(char a1)
{
  char *v0;
  char *v1;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                            + 32)
                + 96) != 1)
    return 0;
  *(_QWORD *)(swift_allocObject(&unk_10078F3A8, 24, 7) + 16) = v0;
  v1 = v0;
  return sub_1002184F0;
}

void sub_10003482C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v16;
  NSString v17;
  void *v18;
  NSString v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  NSString v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;

  v8 = v7;
  v16 = *(void **)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_titleLabel);
  if (a2)
    v17 = String._bridgeToObjectiveC()();
  else
    v17 = 0;
  objc_msgSend(v16, "setText:", v17);

  v18 = *(void **)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_subtitleLabel);
  if (a4)
    v19 = String._bridgeToObjectiveC()();
  else
    v19 = 0;
  objc_msgSend(v18, "setText:", v19);

  if (a5)
  {
    v20 = *(void **)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_button);
    v49 = (id)objc_opt_self(NSBundle);
    v21 = objc_msgSend(v49, "mainBundle");
    v51 = a5;
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v50 = a6;
    v25 = v24;

    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setTitle:forState:", v26, 0, swift_bridgeObjectRelease(v25).n128_f64[0]);

    objc_msgSend(v20, "setHidden:", 0);
    if (a2)
    {
      v27 = a2;
    }
    else
    {
      a1 = 0;
      v27 = (void *)0xE000000000000000;
    }
    if (a4)
    {
      v28 = a4;
    }
    else
    {
      a3 = 0;
      v28 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v29._countAndFlagsBits = a1;
    v29._object = v27;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 32;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = a3;
    v31._object = v28;
    String.append(_:)(v31);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setAccessibilityIdentifier:", v32, swift_bridgeObjectRelease(0xEC000000202D2065).n128_f64[0]);

    v33 = objc_msgSend(v49, "mainBundle");
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "localizedStringForKey:value:table:", v34, 0, 0);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v39 = sub_100047110((uint64_t *)&unk_100827460);
    v40 = swift_allocObject(v39, 112, 7);
    *(_OWORD *)(v40 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    v41 = sub_100038CF8();
    *(_QWORD *)(v40 + 32) = a1;
    *(_QWORD *)(v40 + 40) = v27;
    *(_QWORD *)(v40 + 96) = &type metadata for String;
    *(_QWORD *)(v40 + 104) = v41;
    *(_QWORD *)(v40 + 64) = v41;
    *(_QWORD *)(v40 + 72) = a3;
    *(_QWORD *)(v40 + 80) = v28;
    String.init(format:_:)(v36, v38, v40, v42);
    v44 = v43;
    swift_bridgeObjectRelease(v38);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setAccessibilityLabel:", v45, swift_bridgeObjectRelease(v44).n128_f64[0]);

    v46 = (_QWORD *)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_buttonAction);
    v47 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_buttonAction);
    v48 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_buttonAction + 8);
    *v46 = v51;
    v46[1] = v50;
    swift_retain(v50);
    sub_100022BA4(v47, v48);
  }
  sub_100034C08(a7);
}

void sub_100034C08(double a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  id v47;
  double v48;
  double v49;
  id v50;
  id v51;
  id v52;
  double v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  char *v70;
  double v71;
  id v72;
  id v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  void *v95;
  id v96;
  uint64_t v97;
  id v98;
  Class isa;
  uint64_t v100;

  v2 = v1;
  v4 = sub_100047110((uint64_t *)&unk_100828340);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100623750;
  v6 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_titleLabel];
  v7 = objc_msgSend(v6, "leadingAnchor");
  v8 = objc_msgSend(v2, "contentView");
  v9 = objc_msgSend(v8, "leadingAnchor");

  v10 = objc_msgSend(v7, "constraintEqualToAnchor:constant:", v9, a1);
  *(_QWORD *)(v5 + 32) = v10;
  v11 = objc_msgSend(v6, "topAnchor");
  v12 = objc_msgSend(v2, "contentView");
  v13 = objc_msgSend(v12, "topAnchor");

  v14 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v13, 25.0);
  *(_QWORD *)(v5 + 40) = v14;
  v98 = *(id *)&v2[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_subtitleLabel];
  v15 = objc_msgSend(v98, "leadingAnchor");
  v16 = objc_msgSend(v6, "leadingAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  *(_QWORD *)(v5 + 48) = v17;
  v96 = *(id *)&v2[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_button];
  v18 = objc_msgSend(v96, "trailingAnchor");
  v19 = objc_msgSend(v2, "contentView");
  v20 = objc_msgSend(v19, "trailingAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v20, -a1);
  *(_QWORD *)(v5 + 56) = v21;
  specialized Array._endMutation()(v22);
  v97 = v5;
  v23 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10062ED40;
  v24 = objc_msgSend(v6, "leadingAnchor");
  v25 = objc_msgSend(v2, "contentView");
  v26 = objc_msgSend(v25, "leadingAnchor");

  v27 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v26, a1);
  *(_QWORD *)(v23 + 32) = v27;
  v28 = objc_msgSend(v6, "topAnchor");
  v29 = objc_msgSend(v2, "contentView");
  v30 = objc_msgSend(v29, "topAnchor");

  v31 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v30, 25.0);
  *(_QWORD *)(v23 + 40) = v31;
  v32 = objc_msgSend(v6, "trailingAnchor");
  v33 = objc_msgSend(v2, "contentView");
  v34 = objc_msgSend(v33, "trailingAnchor");

  v35 = objc_msgSend(v32, "constraintEqualToAnchor:constant:", v34, -a1);
  *(_QWORD *)(v23 + 48) = v35;
  v36 = objc_msgSend(v98, "leadingAnchor");
  v37 = objc_msgSend(v6, "leadingAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

  *(_QWORD *)(v23 + 56) = v38;
  v39 = objc_msgSend(v96, "leadingAnchor");
  v40 = objc_msgSend(v6, "leadingAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v23 + 64) = v41;
  specialized Array._endMutation()(v42);
  objc_msgSend(v6, "systemLayoutSizeFittingSize:", 1.79769313e308, 1.79769313e308);
  v44 = v43;
  objc_msgSend(v96, "systemLayoutSizeFittingSize:", 1.79769313e308, 1.79769313e308);
  v46 = v45;
  v47 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v47, "bounds");
  v49 = v48;

  v50 = objc_msgSend(v6, "text");
  if (v50)
  {

    v51 = objc_msgSend(v6, "bottomAnchor");
  }
  else
  {
    v52 = objc_msgSend(v2, "contentView");
    v51 = objc_msgSend(v52, "topAnchor");

  }
  v53 = v44 + v46;
  v54 = objc_msgSend(v98, "topAnchor");
  v55 = objc_msgSend(v54, "constraintEqualToAnchor:constant:", v51, 9.0);

  v56 = objc_msgSend(v98, "text");
  v57 = v6;
  if (v56)
  {

    v57 = v98;
  }
  v58 = v57;
  if (v53 <= v49 + -36.0)
  {
    v64 = objc_msgSend(v96, "lastBaselineAnchor", v51);
    v65 = objc_msgSend(v6, "lastBaselineAnchor");
    v61 = objc_msgSend(v64, "constraintEqualToAnchor:", v65);

    v63 = v97;
    v62 = v58;
  }
  else
  {
    v59 = objc_msgSend(v96, "topAnchor", v51);
    v60 = objc_msgSend(v58, "bottomAnchor");
    v61 = objc_msgSend(v59, "constraintEqualToAnchor:", v60);

    if (objc_msgSend(v96, "isHidden"))
      v62 = v58;
    else
      v62 = v96;
    v63 = v23;
    v23 = v97;
  }
  v66 = v62;
  v67 = objc_msgSend(v66, "bottomAnchor");
  v68 = objc_msgSend(v2, "contentView");
  v69 = objc_msgSend(v68, "bottomAnchor");

  v70 = (char *)objc_msgSend(v67, "constraintEqualToAnchor:constant:", v69, -9.0);
  LODWORD(v71) = 1132068864;
  objc_msgSend(v70, "setPriority:", v71);
  v72 = v55;
  v73 = v61;
  v74 = v70;
  swift_bridgeObjectRelease(v23);
  v100 = v63;
  if ((unint64_t)v63 >> 62)
  {
    if (v63 < 0)
      v92 = v63;
    else
      v92 = v63 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v63);
    v93 = _CocoaArrayWrapper.endIndex.getter(v92);
    v94 = __OFADD__(v93, 3);
    v77 = v93 + 3;
    if (!v94)
    {
LABEL_14:
      v78 = sub_10003561C(v77, 1);
      specialized Array._endMutation()(v78);
      v72 = v72;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
      v70 = *(char **)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v76 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v70 < v76 >> 1)
        goto LABEL_15;
      goto LABEL_26;
    }
  }
  else
  {
    v75 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v63);
    v77 = v75 + 3;
    if (!__OFADD__(v75, 3))
      goto LABEL_14;
  }
  __break(1u);
LABEL_26:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v70 + 1, 1);
LABEL_15:
  v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v72);
  specialized Array._endMutation()(v79);
  v80 = v73;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
  v82 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v81 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v82 >= v81 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
  v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v80);
  specialized Array._endMutation()(v83);
  v84 = v74;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
  v86 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v85 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v86 >= v85 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
  v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v84);
  specialized Array._endMutation()(v87);
  swift_bridgeObjectRelease(v63);

  v88 = OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_activeConstraints;
  v89 = *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_activeConstraints];
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp25ActivityTileSectionHeader_activeConstraints] = v100;
  swift_bridgeObjectRelease(v89);
  v90 = (void *)objc_opt_self(NSLayoutConstraint);
  v91 = *(_QWORD *)&v2[v88];
  sub_100039898();
  swift_bridgeObjectRetain(v91);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v90, "activateConstraints:", isa, swift_bridgeObjectRelease(v91).n128_f64[0]);

}

uint64_t sub_10003561C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_1000356D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100035760(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100035820(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double Width;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  CGRect v36;

  v2 = v1;
  v4 = sub_100047110(&qword_100824DE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 1;
  switch(a1)
  {
    case 0:
      return v7;
    case 1:
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                                               + 24)
                                   + 24)
                       + 16);
    case 2:
      v26 = *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                      + 48)
          + OBJC_IVAR____TtC10FitnessApp31CatalogTipActivityTileDataModel_tipSection;
      swift_beginAccess(v26, &v34, 0, 0);
      sub_100021CC0(v26, (uint64_t)v6, &qword_100824DE0);
      v27 = type metadata accessor for CatalogTipSection(0);
      v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v6, 1, v27) != 1;
      sub_10001BE90((uint64_t)v6, &qword_100824DE0);
      return v7;
    case 3:
      return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                                            + 32)
                                + 96) < 2u;
    case 4:
      v8 = objc_msgSend(v2, "view");
      if (v8)
      {
        v9 = v8;
        objc_msgSend(v8, "bounds");
        v11 = v10;
        v13 = v12;
        v15 = v14;
        v17 = v16;

        v36.origin.x = v11;
        v36.origin.y = v13;
        v36.size.width = v15;
        v36.size.height = v17;
        Width = CGRectGetWidth(v36);
        v19 = (void *)objc_opt_self(HKUnit);
        v20 = objc_msgSend(v19, "literUnitWithMetricPrefix:", 4);
        v21 = objc_msgSend(v19, "gramUnitWithMetricPrefix:", 9);
        v22 = objc_msgSend(v19, "minuteUnit");
        v23 = objc_msgSend(v20, "unitDividedByUnit:", v21);
        v24 = objc_msgSend(v23, "unitDividedByUnit:", v22);

        v25 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v24, 99.99);
        v28 = sub_100035D5C(v25, 4u);

        v29 = Width * 0.5 + -16.0 + -8.0 + -40.0 + -12.0;
        objc_msgSend(v28, "boundingRectWithSize:options:context:", 3, 0, 1.79769313e308, 1.79769313e308);
        v31 = v30;

        v32 = *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                        + 32);
        if (*(_BYTE *)(v32 + 96) != 2)
          return 0;
        v7 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 16);
        if (v31 < v29)
          return (*(_QWORD *)(*(_QWORD *)(v32 + 88) + 16) & 1) + (*(_QWORD *)(*(_QWORD *)(v32 + 88) + 16) >> 1);
        return v7;
      }
      else
      {
        __break(1u);
LABEL_14:
        v34 = 0;
        v35 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease(v35);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003FLL, 0x80000001006909B0, "FitnessApp/ActivityTileViewController.swift", 43, 2, 431, 0);
        __break(1u);
      }
      return result;
    case 5:
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp26ActivityTileViewController_activityTileViewDataModel]
                                   + 40)
                       + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_keyAwards) != 0;
    default:
      goto LABEL_14;
  }
}

uint64_t sub_100035C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001991B0);
}

uint64_t type metadata accessor for CatalogTipSection(uint64_t a1)
{
  uint64_t result;

  result = qword_100824150;
  if (!qword_100824150)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CatalogTipSection);
  return result;
}

double sub_100035C90(uint64_t a1, char a2, double a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  double v12;
  double v13;

  v6 = a2;
  sub_1000364C8(byte_100641DCE[a2]);
  v8 = v7;
  v9 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v7, a3);

  sub_100036BCC(a1, a2);
  v11 = v10;
  objc_msgSend(v9, "doubleValueForUnit:", v10);
  v13 = v12;

  return round(v13 * dbl_100641DD8[v6]) / dbl_100641DD8[v6];
}

id sub_100035D5C(void *a1, unsigned __int8 a2)
{
  id v2;
  id v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v62;

  if (((a2 - 3) & 0xFB) == 0)
  {
    v31 = sub_10055DE00(a1);
    if (!v32)
      goto LABEL_21;
    v34 = v31;
    v20 = v32;
    v35 = v33;
    if (a2 <= 8u && ((1 << a2) & 0x127) != 0)
    {
      sub_1000367D4(a2);
      if (v37)
      {
        v38 = v36;
        v39 = v37;
        v62 = v34;
        v40 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v41 = String._bridgeToObjectiveC()();
        v42 = objc_msgSend(v40, "localizedStringForKey:value:table:", v41, 0, 0);

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v46 = sub_100047110((uint64_t *)&unk_100827460);
        v47 = swift_allocObject(v46, 72, 7);
        *(_OWORD *)(v47 + 16) = xmmword_100622F90;
        *(_QWORD *)(v47 + 56) = &type metadata for String;
        *(_QWORD *)(v47 + 64) = sub_100038CF8();
        *(_QWORD *)(v47 + 32) = v38;
        *(_QWORD *)(v47 + 40) = v39;
        static String.localizedStringWithFormat(_:_:)(v43, v45, v47);
        v49 = v48;
        swift_bridgeObjectRelease(v45);
        v50 = v47;
        v34 = v62;
        swift_bridgeObjectRelease(v50);
LABEL_14:
        v51 = sub_100038CA0();
        v52 = StringProtocol.localizedUppercase.getter(&type metadata for String, v51);
        v54 = v53;
        swift_bridgeObjectRelease(v49);
        v55 = (void *)sub_100036218();
        v2 = sub_1000387C4(v34, v20, v52, v54, v55);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v54);

        return v2;
      }
    }
    else
    {
      sub_1000367D4(a2);
      if (v58)
      {
        v49 = v58;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v35);
    goto LABEL_20;
  }
  v4 = sub_1000363A0(a1, a2);
  if ((v5 & 1) != 0)
    goto LABEL_21;
  v6 = *(double *)&v4;
  if (a2 <= 8u && ((1 << a2) & 0x127) != 0)
  {
    sub_1000367D4(a2);
    if (v8)
    {
      v9 = v7;
      v10 = v8;
      v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = sub_100047110((uint64_t *)&unk_100827460);
      v18 = swift_allocObject(v17, 72, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100622F90;
      *(_QWORD *)(v18 + 56) = &type metadata for String;
      *(_QWORD *)(v18 + 64) = sub_100038CF8();
      *(_QWORD *)(v18 + 32) = v9;
      *(_QWORD *)(v18 + 40) = v10;
      v2 = (id)static String.localizedStringWithFormat(_:_:)(v14, v16, v18);
      v20 = v19;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v18);
      goto LABEL_7;
    }
LABEL_21:
    v59 = sub_10025DBE8();
    swift_allocError(&type metadata for TrendsFormattingManager.TextError, v59, 0, 0);
    *v60 = 0;
    swift_willThrow();
    return v2;
  }
  sub_1000367D4(a2);
  if (!v57)
    goto LABEL_21;
  v2 = v56;
  v20 = v57;
LABEL_7:
  v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v6);
  v22 = objc_msgSend((id)objc_opt_self(FIUIFormattingManager), "stringWithNumber:decimalPrecision:roundingMode:", v21, qword_1006465C8[(char)a2], 4);

  if (!v22)
  {
LABEL_20:
    swift_bridgeObjectRelease(v20);
    goto LABEL_21;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = sub_100038CA0();
  v27 = StringProtocol.localizedUppercase.getter(&type metadata for String, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v20);
  v30 = (void *)sub_100036218();
  v2 = sub_1000387C4(v23, v25, v27, v29, v30);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v29);

  return v2;
}

uint64_t sub_100036218()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;
  double v5;
  double v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t result;

  v0 = (void *)objc_opt_self(UIFont);
  static String._unconditionallyBridgeFromObjectiveC(_:)(UIFontTextStyleTitle3);
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = objc_msgSend(v0, "defaultFontForTextStyle:", v3);

  if (v4)
  {
    objc_msgSend(v4, "pointSize");
    v6 = v5;
    v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle3);
    v8 = objc_msgSend(v0, "systemFontOfSize:weight:design:", UIFontSystemFontDesignRounded, v6, UIFontWeightMedium);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v7, "scaledFontForFont:", v8);

      return (uint64_t)v10;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x746F6E20746E6F46, 0xEF21646E756F6620, "FitnessApp/TrendsFormattingManager.swift", 40, 2, 47, 0);
  __break(1u);
  return result;
}

id sub_1000363A0(void *a1, char a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  id result;
  void *v11;
  double v12;
  uint64_t v13;
  id v14;

  sub_1000364C8(byte_1006465BE[a2]);
  v6 = v5;
  v7 = objc_msgSend(a1, "isCompatibleWithUnit:", v5);
  if ((_DWORD)v7)
  {
    objc_msgSend(a1, "doubleValueForUnit:", v6);
    v9 = v8;
    result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10FitnessApp23TrendsFormattingManager_fiuiFormatter), "unitManager");
    if (result)
    {
      v11 = result;
      v12 = sub_100035C90((uint64_t)result, a2, v9);

      return *(id *)&v12;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v13 = static os_log_type_t.error.getter(v7);
    v14 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "This isn't good: Supplied quantity is not compatible with the unit returned from the trend type!", 96, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  return result;
}

void sub_1000364C8(char a1)
{
  __asm { BR              X10 }
}

id sub_1000364F8()
{
  return objc_msgSend((id)objc_opt_self(HKUnit), "kilocalorieUnit");
}

void sub_100036660()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)objc_opt_self(HKUnit);
  v1 = objc_msgSend(v0, "literUnitWithMetricPrefix:", 4);
  v2 = objc_msgSend(v0, "gramUnitWithMetricPrefix:", 9);
  v3 = objc_msgSend(v0, "minuteUnit");
  v4 = objc_msgSend(v1, "unitDividedByUnit:", v2);
  objc_msgSend(v4, "unitDividedByUnit:", v3);

  JUMPOUT(0x1000367C0);
}

void sub_1000367D4(char a1)
{
  __asm { BR              X10 }
}

id sub_10003680C()
{
  char v0;
  double v1;

  return sub_10055E03C(v0, v1);
}

void sub_100036BCC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

id sub_100036BFC()
{
  return objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
}

char *sub_100036DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  char *v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSString v22;
  id v23;
  id v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  char *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSString v42;
  id v43;
  id v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  char *v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSString v62;
  id v63;
  id v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  char *v69;
  id v70;
  NSString v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  NSString v82;
  id v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  char *v95;
  id v96;
  NSString v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  NSString v108;
  id v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  int v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  id v124;
  id v125;
  id v126;
  void *v127;
  void *v128;
  __n128 v129;
  void *v130;
  id v131;
  void *v132;
  uint64_t v133;
  id v134;
  Class isa;
  uint64_t v136;
  id v137;
  Class v138;
  uint64_t v139;
  id v140;
  id v141;
  uint64_t v142;
  id v143;
  Class v144;
  NSString v145;
  char *v146;
  uint64_t v147;
  void *v148;
  char *v149;
  id v150;
  id v151;
  id v152;
  void *v153;
  void *v154;
  id v155;
  char v156;
  objc_class *v161;
  objc_super v162;

  swift_getObjectType(v3);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager] = 0;
  v4 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  v5 = objc_allocWithZone((Class)UIView);
  v6 = v3;
  v7 = objc_msgSend(v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v3[v4] = v7;
  v161 = (objc_class *)type metadata accessor for DayViewTitleAndValueLabelPair();
  v8 = (char *)objc_msgSend(objc_allocWithZone(v161), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = (uint64_t *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v17 = *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v16 = v13;
  v16[1] = v15;
  swift_bridgeObjectRetain(v15);
  v18 = swift_bridgeObjectRelease(v17).n128_u64[0];
  v19 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v20 = *(void **)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v21 = v16[1];
  if (v21)
  {
    swift_bridgeObjectRetain(v16[1]);
    v22 = String._bridgeToObjectiveC()();
    v18 = swift_bridgeObjectRelease(v21).n128_u64[0];
  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(v20, "setText:", v22, *(double *)&v18, a2);
  swift_bridgeObjectRelease(v15);

  if (qword_10081D5B8 != -1)
    swift_once(&qword_10081D5B8, sub_1000062E0);
  objc_msgSend(*(id *)&v8[v19], "setFont:", qword_1008227B0);
  v23 = sub_100037F70();
  objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v23);

  v24 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v25 = 23.0;
  else
    v25 = 20.0;
  v26 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair;
  objc_msgSend(v24, "_scaledValueForValue:", v25);
  v28 = v27;

  sub_100039478(v28);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v8, "setNeedsLayout");
  objc_msgSend(v8, "invalidateIntrinsicContentSize");
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v26] = v8;
  v29 = (char *)objc_msgSend(objc_allocWithZone(v161), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v30 = objc_msgSend(v9, "mainBundle");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "localizedStringForKey:value:table:", v31, 0, 0);

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36 = (uint64_t *)&v29[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v37 = *(_QWORD *)&v29[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v36 = v33;
  v36[1] = v35;
  swift_bridgeObjectRetain(v35);
  v38 = swift_bridgeObjectRelease(v37).n128_u64[0];
  v39 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v40 = *(void **)&v29[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v41 = v36[1];
  if (v41)
  {
    swift_bridgeObjectRetain(v36[1]);
    v42 = String._bridgeToObjectiveC()();
    v38 = swift_bridgeObjectRelease(v41).n128_u64[0];
  }
  else
  {
    v42 = 0;
  }
  objc_msgSend(v40, "setText:", v42, *(double *)&v38);
  swift_bridgeObjectRelease(v35);

  objc_msgSend(*(id *)&v29[v39], "setFont:", qword_1008227B0);
  v43 = sub_100037F70();
  objc_msgSend(*(id *)&v29[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v43);

  v44 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v45 = 23.0;
  else
    v45 = 20.0;
  v46 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair;
  objc_msgSend(v44, "_scaledValueForValue:", v45);
  v48 = v47;

  sub_100039478(v48);
  *(_QWORD *)&v29[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v29, "setNeedsLayout");
  objc_msgSend(v29, "invalidateIntrinsicContentSize");
  objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v46] = v29;
  v49 = (char *)objc_msgSend(objc_allocWithZone(v161), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v50 = objc_msgSend(v9, "mainBundle");
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v50, "localizedStringForKey:value:table:", v51, 0, 0);

  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v55 = v54;

  v56 = (uint64_t *)&v49[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v57 = *(_QWORD *)&v49[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v56 = v53;
  v56[1] = v55;
  swift_bridgeObjectRetain(v55);
  v58 = swift_bridgeObjectRelease(v57).n128_u64[0];
  v59 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v60 = *(void **)&v49[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v61 = v56[1];
  if (v61)
  {
    swift_bridgeObjectRetain(v56[1]);
    v62 = String._bridgeToObjectiveC()();
    v58 = swift_bridgeObjectRelease(v61).n128_u64[0];
  }
  else
  {
    v62 = 0;
  }
  objc_msgSend(v60, "setText:", v62, *(double *)&v58);
  swift_bridgeObjectRelease(v55);

  objc_msgSend(*(id *)&v49[v59], "setFont:", qword_1008227B0);
  v63 = sub_100037F70();
  objc_msgSend(*(id *)&v49[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v63);

  v64 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v65 = 23.0;
  else
    v65 = 20.0;
  v66 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair;
  objc_msgSend(v64, "_scaledValueForValue:", v65);
  v68 = v67;

  sub_100039478(v68);
  *(_QWORD *)&v49[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v49, "setNeedsLayout");
  objc_msgSend(v49, "invalidateIntrinsicContentSize");
  objc_msgSend(v49, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v66] = v49;
  v69 = (char *)objc_msgSend(objc_allocWithZone(v161), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v70 = objc_msgSend(v9, "mainBundle");
  v71 = String._bridgeToObjectiveC()();
  v72 = objc_msgSend(v70, "localizedStringForKey:value:table:", v71, 0, 0);

  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v75 = v74;

  v76 = (uint64_t *)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v77 = *(_QWORD *)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v76 = v73;
  v76[1] = v75;
  swift_bridgeObjectRetain(v75);
  v78 = swift_bridgeObjectRelease(v77).n128_u64[0];
  v79 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v80 = *(void **)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v81 = v76[1];
  if (v81)
  {
    swift_bridgeObjectRetain(v76[1]);
    v82 = String._bridgeToObjectiveC()();
    v78 = swift_bridgeObjectRelease(v81).n128_u64[0];
  }
  else
  {
    v82 = 0;
  }
  objc_msgSend(v80, "setText:", v82, *(double *)&v78);
  swift_bridgeObjectRelease(v75);

  objc_msgSend(*(id *)&v69[v79], "setFont:", qword_1008227B0);
  v83 = sub_100037F70();
  v84 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  objc_msgSend(*(id *)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v83);

  v85 = (void *)objc_opt_self(UIColor);
  v86 = objc_msgSend(v85, "systemGrayColor");
  v87 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v88 = *(void **)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v86;
  v89 = v86;

  objc_msgSend(*(id *)&v69[v84], "setTextColor:", *(_QWORD *)&v69[v87]);
  v90 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v91 = 23.0;
  else
    v91 = 20.0;
  v92 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair;
  objc_msgSend(v90, "_scaledValueForValue:", v91);
  v94 = v93;

  sub_100039478(v94);
  *(_QWORD *)&v69[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v69, "setNeedsLayout");
  objc_msgSend(v69, "invalidateIntrinsicContentSize");
  objc_msgSend(v69, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v92] = v69;
  v95 = (char *)objc_msgSend(objc_allocWithZone(v161), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v96 = objc_msgSend(v9, "mainBundle");
  v97 = String._bridgeToObjectiveC()();
  v98 = objc_msgSend(v96, "localizedStringForKey:value:table:", v97, 0, 0);

  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
  v101 = v100;

  v102 = (uint64_t *)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v103 = *(_QWORD *)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v102 = v99;
  v102[1] = v101;
  swift_bridgeObjectRetain(v101);
  v104 = swift_bridgeObjectRelease(v103).n128_u64[0];
  v105 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v106 = *(void **)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v107 = v102[1];
  if (v107)
  {
    swift_bridgeObjectRetain(v102[1]);
    v108 = String._bridgeToObjectiveC()();
    v104 = swift_bridgeObjectRelease(v107).n128_u64[0];
  }
  else
  {
    v108 = 0;
  }
  objc_msgSend(v106, "setText:", v108, *(double *)&v104);
  swift_bridgeObjectRelease(v101);

  objc_msgSend(*(id *)&v95[v105], "setFont:", qword_1008227B0);
  v109 = sub_100037F70();
  v110 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  objc_msgSend(*(id *)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v109);

  v111 = objc_msgSend(v85, "systemGrayColor");
  v112 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v113 = *(void **)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v111;
  v114 = v111;

  objc_msgSend(*(id *)&v95[v110], "setTextColor:", *(_QWORD *)&v95[v112]);
  v115 = sub_100037F70();
  v116 = FIUICurrentLanguageRequiresTallScript();
  v117 = 20.0;
  if (v116)
    v117 = 23.0;
  v118 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair;
  objc_msgSend(v115, "_scaledValueForValue:", v117);
  v120 = v119;

  sub_100039478(v120);
  *(_QWORD *)&v95[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v95, "setNeedsLayout");
  objc_msgSend(v95, "invalidateIntrinsicContentSize");
  objc_msgSend(v95, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v118] = v95;
  v121 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView;
  v122 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v122, "setAxis:", 1);
  objc_msgSend(v122, "setDistribution:", 3);
  objc_msgSend(v122, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v121] = v122;
  v123 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView;
  v124 = objc_msgSend((id)objc_opt_self(ARUIRingGroup), "activityRingGroupForRingType:", 3);
  v125 = objc_msgSend(v124, "forCompanion");

  v126 = objc_msgSend(objc_allocWithZone((Class)ARUIRingsView), "initWithRingGroup:", v125);
  v127 = (void *)ARUIRingsView.withRingGroupDiameter(_:)(137.0);

  v128 = (void *)ARUIRingsView.withRingGroupThickness(_:)(15.0);
  v130 = (void *)ARUIRingsView.withRingGroupInterspacing(_:)(2.0, v129);

  v131 = objc_msgSend(v85, "clearColor");
  objc_msgSend(v130, "setBackgroundColor:", v131);

  v132 = (void *)ARUIRingsView.nilRings(animated:)(0);
  objc_msgSend(v132, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v123] = v132;
  v133 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView;
  v134 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v134, "setBackgroundColor:", isa);

  objc_msgSend(v134, "setHidden:", 1);
  objc_msgSend(v134, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v133] = v134;
  v136 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView;
  v137 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v138 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v137, "setBackgroundColor:", v138);

  objc_msgSend(v137, "setHidden:", 1);
  objc_msgSend(v137, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v136] = v137;
  v139 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView;
  v140 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v141 = objc_msgSend(v85, "blackColor");
  objc_msgSend(v140, "setBackgroundColor:", v141);

  objc_msgSend(v140, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v139] = v140;
  v142 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView;
  v143 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v144 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v143, "setBackgroundColor:", v144);

  objc_msgSend(v143, "setHidden:", 1);
  objc_msgSend(v143, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v6[v142] = v143;
  v6[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints] = _swiftEmptyArrayStorage;

  if (a3)
  {
    v145 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v145 = 0;
  }
  v162.receiver = v6;
  v162.super_class = (Class)type metadata accessor for TodayActivityTile();
  v146 = (char *)objc_msgSendSuper2(&v162, "initWithStyle:reuseIdentifier:", a1, v145);

  v147 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  v148 = *(void **)&v146[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView];
  v149 = v146;
  v150 = v148;
  v151 = sub_100032478();
  objc_msgSend(v150, "setBackgroundColor:", v151);

  v152 = objc_msgSend(*(id *)&v146[v147], "layer");
  objc_msgSend(v152, "setCornerRadius:", sub_10003249C());

  v153 = *(void **)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
  objc_msgSend(v153, "addArrangedSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair]);
  objc_msgSend(v153, "addArrangedSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair]);
  objc_msgSend(v153, "addArrangedSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair]);
  v154 = *(void **)&v146[v147];
  objc_msgSend(v154, "addSubview:", v153);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair]);
  objc_msgSend(v154, "addSubview:", *(_QWORD *)&v149[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair]);
  v155 = objc_msgSend(v149, "contentView");
  objc_msgSend(v155, "addSubview:", v154);

  v156 = sub_100007EC8();
  sub_1000324AC(v156);
  sub_10003AA88();

  return v149;
}

id sub_100037F70()
{
  id v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString *v6;
  NSString *v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;
  id v11;
  id v12;
  id v13;
  id v14;
  _BYTE v16[48];
  _BYTE v17[72];

  v0 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleTitle3);
  v1 = sub_100047110(&qword_100822878);
  inited = swift_initStackObject(v1, v17);
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  v3 = sub_100047110(&qword_100822880);
  v4 = swift_initStackObject(v3, v16);
  *(_OWORD *)(v4 + 16) = xmmword_100622F90;
  *(_QWORD *)(v4 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v4 + 40) = UIFontWeightMedium;
  v5 = v0;
  v6 = UIFontDescriptorTraitsAttribute;
  v7 = UIFontWeightTrait;
  v8 = sub_100038198(v4);
  *(_QWORD *)(inited + 64) = sub_100047110(&qword_100822888);
  *(_QWORD *)(inited + 40) = v8;
  v9 = sub_100038D94(inited);
  type metadata accessor for AttributeName(0);
  sub_100038150();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v5, "fontDescriptorByAddingAttributes:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v12 = objc_msgSend(v11, "fontDescriptorWithDesign:", UIFontDescriptorSystemDesignRounded);
  if (v12)
  {
    v13 = v12;

    v11 = v13;
  }
  v14 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v11, 0.0);

  return v14;
}

unint64_t sub_100038150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081E830;
  if (!qword_10081E830)
  {
    type metadata accessor for AttributeName(255);
    result = swift_getWitnessTable(&unk_10062267C, v1);
    atomic_store(result, (unint64_t *)&qword_10081E830);
  }
  return result;
}

unint64_t sub_100038198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100047110(&qword_100833848);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_100439198((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1000382A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t inited;
  unint64_t v32;
  id v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString *v51;
  NSString *v52;
  id v53;
  unint64_t v54;
  Class v55;
  id v56;
  uint64_t v58;
  NSString *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char v67[72];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[64];

  v66 = a6;
  v64 = a5;
  v65 = a3;
  v12 = sub_100047110((uint64_t *)&unk_10082ED90);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, 0, 0);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = sub_100047110((uint64_t *)&unk_100827460);
  v22 = swift_allocObject(v21, 152, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100624A40;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  v23 = sub_100038CF8();
  *(_QWORD *)(v22 + 32) = a1;
  *(_QWORD *)(v22 + 40) = a2;
  *(_QWORD *)(v22 + 96) = &type metadata for String;
  *(_QWORD *)(v22 + 104) = v23;
  v24 = v65;
  *(_QWORD *)(v22 + 64) = v23;
  *(_QWORD *)(v22 + 72) = v24;
  *(_QWORD *)(v22 + 80) = a4;
  *(_QWORD *)(v22 + 136) = &type metadata for String;
  *(_QWORD *)(v22 + 144) = v23;
  *(_QWORD *)(v22 + 112) = a5;
  v25 = v66;
  *(_QWORD *)(v22 + 120) = v66;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v26 = swift_bridgeObjectRetain(v25);
  v27 = String.init(format:_:)(v18, v20, v22, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v20);
  v63 = a7;
  v30 = sub_10043E190(a7, 33, 0);
  v62 = sub_100047110((uint64_t *)&unk_10082EDA0);
  inited = swift_initStackObject(v62, v72);
  v60 = xmmword_100622F90;
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v61 = sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
  *(_QWORD *)(inited + 64) = v61;
  *(_QWORD *)(inited + 40) = v30;
  swift_bridgeObjectRetain(v29);
  v59 = NSFontAttributeName;
  v65 = v30;
  v32 = sub_100038EAC(inited, &qword_1008255C8, &qword_1008255D0, (uint64_t (*)(uint64_t))sub_100438FD8);
  v33 = objc_allocWithZone((Class)NSMutableAttributedString);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  type metadata accessor for Key(0);
  v36 = v35;
  sub_1000083D8((unint64_t *)&qword_10081E850, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1006226C0);
  v58 = v36;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v38 = objc_msgSend(v33, "initWithString:attributes:", v34, isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

  v70 = v27;
  v71 = v29;
  v68 = v64;
  v69 = v66;
  v39 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v14, 1, 1, v39);
  v40 = sub_100038CA0();
  v41 = StringProtocol.range<A>(of:options:range:locale:)(&v68, 0, 0, 0, 1, v14, &type metadata for String, &type metadata for String, v40, v40);
  v43 = v42;
  LOBYTE(v34) = v44;
  sub_10001BE90((uint64_t)v14, (uint64_t *)&unk_10082ED90);
  if ((v34 & 1) != 0)
  {
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v70 = v41;
    v71 = v43;
    v68 = v27;
    v69 = v29;
    v45 = sub_100047110(&qword_10082EDC0);
    v46 = sub_10043D8C0(&qword_10082EDC8, &qword_10082EDC0);
    v47 = _NSRange.init<A, B>(_:in:)(&v70, &v68, v45, &type metadata for String, v46, v40);
    v49 = v48;
    v50 = swift_initStackObject(v62, v67);
    *(_OWORD *)(v50 + 16) = v60;
    v51 = v59;
    *(_QWORD *)(v50 + 32) = v59;
    v52 = v51;
    v53 = sub_10043E190(v63, 38, 1);
    *(_QWORD *)(v50 + 64) = v61;
    *(_QWORD *)(v50 + 40) = v53;
    v54 = sub_100038EAC(v50, &qword_1008255C8, &qword_1008255D0, (uint64_t (*)(uint64_t))sub_100438FD8);
    v55 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v38, "setAttributes:range:", v55, v47, v49, swift_bridgeObjectRelease(v54).n128_f64[0]);

  }
  v56 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "initWithAttributedString:", v38);

  return v56;
}

id sub_1000387C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  unint64_t v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSString *v46;
  NSString *v47;
  id v48;
  unint64_t v49;
  Class v50;
  id v51;
  _QWORD v53[2];
  NSString *v54;
  id v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[72];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[80];

  v59 = a3;
  v10 = sub_100047110((uint64_t *)&unk_10082ED90);
  __chkstk_darwin(v10);
  v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, 0);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = sub_100047110((uint64_t *)&unk_100827460);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v21 = sub_100038CF8();
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v21;
  *(_QWORD *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 72) = a3;
  *(_QWORD *)(v20 + 80) = a4;
  swift_bridgeObjectRetain(a2);
  v22 = swift_bridgeObjectRetain(a4);
  v23 = String.init(format:_:)(v16, v18, v20, v22);
  v25 = v24;
  swift_bridgeObjectRelease(v18);
  v58 = sub_100047110((uint64_t *)&unk_10082EDA0);
  inited = swift_initStackObject(v58, v65);
  v56 = xmmword_100622F90;
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v57 = sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
  *(_QWORD *)(inited + 64) = v57;
  *(_QWORD *)(inited + 40) = a5;
  swift_bridgeObjectRetain(v25);
  v54 = NSFontAttributeName;
  v55 = a5;
  v27 = sub_100038EAC(inited, &qword_1008255C8, &qword_1008255D0, (uint64_t (*)(uint64_t))sub_100438FD8);
  v28 = objc_allocWithZone((Class)NSMutableAttributedString);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  type metadata accessor for Key(0);
  v31 = v30;
  sub_1000083D8((unint64_t *)&qword_10081E850, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1006226C0);
  v53[1] = v31;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v33 = objc_msgSend(v28, "initWithString:attributes:", v29, isa, swift_bridgeObjectRelease(v27).n128_f64[0]);

  v63 = v23;
  v64 = v25;
  v61 = v59;
  v62 = a4;
  v34 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v12, 1, 1, v34);
  v35 = sub_100038CA0();
  v36 = StringProtocol.range<A>(of:options:range:locale:)(&v61, 0, 0, 0, 1, v12, &type metadata for String, &type metadata for String, v35, v35);
  v38 = v37;
  LOBYTE(isa) = v39;
  sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_10082ED90);
  if ((isa & 1) != 0)
  {
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v63 = v36;
    v64 = v38;
    v61 = v23;
    v62 = v25;
    v40 = sub_100047110(&qword_10082EDC0);
    v41 = sub_10043D8C0(&qword_10082EDC8, &qword_10082EDC0);
    v42 = _NSRange.init<A, B>(_:in:)(&v63, &v61, v40, &type metadata for String, v41, v35);
    v44 = v43;
    v45 = swift_initStackObject(v58, v60);
    *(_OWORD *)(v45 + 16) = v56;
    v46 = v54;
    *(_QWORD *)(v45 + 32) = v54;
    v47 = v46;
    v48 = sub_10043E190(v55, 38, 1);
    *(_QWORD *)(v45 + 64) = v57;
    *(_QWORD *)(v45 + 40) = v48;
    v49 = sub_100038EAC(v45, &qword_1008255C8, &qword_1008255D0, (uint64_t (*)(uint64_t))sub_100438FD8);
    v50 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "setAttributes:range:", v50, v42, v44, swift_bridgeObjectRelease(v49).n128_f64[0]);

  }
  v51 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "initWithAttributedString:", v33);

  return v51;
}

unint64_t sub_100038C84(uint64_t a1)
{
  return sub_100038EAC(a1, &qword_1008255C8, &qword_1008255D0, (uint64_t (*)(uint64_t))sub_100438FD8);
}

unint64_t sub_100038CA0()
{
  unint64_t result;

  result = qword_1008361A0;
  if (!qword_1008361A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_1008361A0);
  }
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6F0, (uint64_t)&unk_100784278);
}

unint64_t sub_100038CF8()
{
  unint64_t result;

  result = qword_100827480;
  if (!qword_100827480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100827480);
  }
  return result;
}

void sub_100038D3C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6E0, (uint64_t)&unk_100784228);
}

unint64_t sub_100038D94(uint64_t a1)
{
  return sub_100038EAC(a1, &qword_10082DCA0, &qword_100833790, (uint64_t (*)(uint64_t))sub_100439198);
}

unint64_t sub_100038DB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100047110(&qword_100833798);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_100439198((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v14;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100038EAC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100047110(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100021CC0(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_100038FD4(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_100038FD4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100038FE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10082B530;
  if (!qword_10082B530)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10082B530);
  }
  return result;
}

char *sub_100039040(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  char *result;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  id v30;
  id v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  id v36;
  objc_super v37;

  v9 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  v10 = (void *)objc_opt_self(UIColor);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "labelColor");
  v12 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  *(_QWORD *)&v11[v12] = objc_msgSend(v10, "labelColor");
  v13 = &v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText] = 0;
  v14 = &v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v16 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v16, "setAdjustsFontForContentSizeCategory:", 1);
  v17 = (void *)objc_opt_self(UIFont);
  v18 = objc_msgSend(v17, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v19 = UILabel.withFont(_:)(v18);

  *(_QWORD *)&v11[v15] = v19;
  v20 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v20, "setAdjustsFontForContentSizeCategory:", 1);
  result = (char *)objc_msgSend(v17, "systemFontOfSize:weight:design:", UIFontSystemFontDesignRounded, 30.0, UIFontWeightMedium);
  if (result)
  {
    v22 = result;
    v23 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    v24 = UILabel.withFont(_:)(result);

    *(_QWORD *)&v11[v23] = v24;
    v25 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaseline;
    v26 = objc_msgSend(v17, "preferredFontForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v26, "_scaledValueForValue:", 15.0);
    v28 = v27;

    *(_QWORD *)&v11[v25] = v28;
    *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint] = 0;
    if ((FIUICurrentLanguageRequiresTallScript() & 1) != 0)
    {
      v29 = 32.0;
    }
    else
    {
      v30 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v31 = objc_msgSend(v30, "preferredContentSizeCategory");

      LOBYTE(v30) = UIContentSizeCategory.isAccessibilityCategory.getter(v31);
      v29 = 32.0;
      if ((v30 & 1) == 0)
        v29 = 29.0;
    }
    *(double *)&v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline] = v29;
    *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint] = 0;
    *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4030000000000000;

    v37.receiver = v11;
    v37.super_class = (Class)type metadata accessor for DayViewTitleAndValueLabelPair();
    v32 = (char *)objc_msgSendSuper2(&v37, "initWithFrame:", a1, a2, a3, a4);
    v33 = *(void **)&v32[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
    v34 = v32;
    objc_msgSend(v34, "addSubview:", v33);
    v35 = *(void **)&v34[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel];
    objc_msgSend(v34, "addSubview:", v35);
    objc_msgSend(v33, "setTextColor:", *(_QWORD *)&v34[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor]);
    objc_msgSend(v35, "setTextColor:", *(_QWORD *)&v34[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor]);
    sub_100039504();
    v36 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v36, "addObserver:selector:name:object:", v34, "updateFonts", UIContentSizeCategoryDidChangeNotification, 0);

    return v34;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for DayViewTitleAndValueLabelPair()
{
  return objc_opt_self(_TtC10FitnessApp29DayViewTitleAndValueLabelPair);
}

id sub_100039478(double a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline;
  *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline] = a1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint];
  if (v3)
    objc_msgSend(v3, "setConstant:", *(double *)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaseline]);
  v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint];
  if (v4)
    objc_msgSend(v4, "setConstant:", *(double *)&v1[v2]);
  objc_msgSend(v1, "setNeedsLayout");
  return objc_msgSend(v1, "invalidateIntrinsicContentSize");
}

void sub_100039504()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  Class isa;
  uint64_t v35;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v2 = objc_msgSend(v1, "leadingAnchor");
  v3 = objc_msgSend(v0, "leadingAnchor");
  v33 = objc_msgSend(v2, "constraintEqualToAnchor:", v3);

  v4 = objc_msgSend(v1, "trailingAnchor");
  v5 = objc_msgSend(v0, "trailingAnchor");
  v32 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

  v6 = objc_msgSend(v1, "firstBaselineAnchor");
  v7 = objc_msgSend(v0, "topAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v7, *(double *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaseline]);

  v9 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleBaselineConstraint] = v8;
  v10 = v8;

  v11 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel];
  v12 = objc_msgSend(v11, "leadingAnchor");
  v13 = objc_msgSend(v0, "leadingAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  v15 = objc_msgSend(v11, "trailingAnchor");
  v16 = objc_msgSend(v0, "trailingAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  v18 = objc_msgSend(v11, "firstBaselineAnchor");
  v19 = objc_msgSend(v1, "firstBaselineAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, *(double *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaseline]);

  v21 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueBaselineConstraint] = v20;
  v22 = v20;

  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = sub_100047110((uint64_t *)&unk_100828340);
  v25 = swift_allocObject(v24, 80, 7);
  *(_OWORD *)(v25 + 16) = xmmword_10062B740;
  *(_QWORD *)(v25 + 32) = v33;
  *(_QWORD *)(v25 + 40) = v32;
  *(_QWORD *)(v25 + 48) = v10;
  *(_QWORD *)(v25 + 56) = v14;
  *(_QWORD *)(v25 + 64) = v17;
  *(_QWORD *)(v25 + 72) = v22;
  v35 = v25;
  specialized Array._endMutation()(v25);
  sub_100039898();
  v26 = v10;
  v27 = v22;
  v28 = v33;
  v29 = v32;
  v30 = v14;
  v31 = v17;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v23, "activateConstraints:", isa, swift_bridgeObjectRelease(v35).n128_f64[0]);

}

unint64_t sub_100039898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F6C0;
  if (!qword_10081F6C0)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10081F6C0);
  }
  return result;
}

uint64_t sub_1000398D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_100039978(uint64_t a1)
{
  uint64_t v1;

  sub_1000399A4(a1, v1, (uint64_t)"TrendsOnBoardingActivityTile did receive ActivityTileViewControllerPlayVideos", 77, (SEL *)&selRef_play);
}

void sub_1000399A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t Strong;
  void *v12;
  void *v13;
  id v14;
  _BYTE v15[24];

  v8 = a2 + 16;
  v9 = static os_log_type_t.debug.getter();
  v10 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, a3, a4, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v8, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = *(void **)(Strong + OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player);
    v14 = v13;

    if (v13)
    {
      objc_msgSend(v14, *a5);

    }
  }
}

double sub_100039A80(uint64_t a1)
{
  uint64_t v1;

  return sub_100039A88(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100039A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  os_log_type_t v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t Strong;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];

  v4 = a2 + 16;
  v5 = static os_log_type_t.default.getter(a1);
  v6 = (void *)HKLogActivity;
  v7 = v5;
  if (os_log_type_enabled(HKLogActivity, v5))
  {
    v8 = v6;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = _typeName(_:qualified:)(a3, 0);
    v13 = v12;
    v17 = sub_10003E8EC(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v9 + 4);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v7, "%s did receive FIMindfulnessSessionDataProviderDidUpdate notification", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  swift_beginAccess(v4, v18, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v16 = Strong;
    sub_10002F74C();
    *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  }
  return result;
}

double sub_100039BFC(uint64_t a1)
{
  uint64_t v1;

  return sub_100039C20(a1, v1, "WorkoutActivityTileDataModel did receive fiuiFitnessUnitPreferencesDidChange notification", 89);
}

double sub_100039C20(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t Strong;
  double result;
  uint64_t v11;
  _BYTE v12[24];

  v6 = a2 + 16;
  v7 = static os_log_type_t.default.getter(a1);
  v8 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, a3, a4, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v6, v12, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v11 = Strong;
    sub_10002F74C();
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

double sub_100039CD4(uint64_t a1)
{
  uint64_t v1;

  return sub_100039CF8(a1, v1, "TrendsActivityTileDataModel did receive fiuiFitnessUnitPreferencesDidChange notification", 88);
}

double sub_100039CF8(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t Strong;
  double result;
  uint64_t v11;
  _BYTE v12[24];

  v6 = a2 + 16;
  v7 = static os_log_type_t.default.getter(a1);
  v8 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, a3, a4, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v6, v12, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v11 = Strong;
    sub_10003A4B8();
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

void sub_100039DAC(uint64_t a1)
{
  uint64_t v1;

  sub_100039DB4(a1, v1);
}

void sub_100039DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  void (*v7)(void);
  uint64_t v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "AwardsActivityTileDataModel did receive fiuiFitnessUnitPreferencesDidChange notification", 88, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v2, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(void (**)(void))(Strong + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_onModelDidUpdate);
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_onModelDidUpdate + 8);
    sub_10003AFE0((uint64_t)v7, v8);

    if (v7)
    {
      v7();
      sub_100022BA4((uint64_t)v7, v8);
    }
  }
}

void sub_100039E84(uint64_t a1)
{
  uint64_t v1;

  sub_100039E8C(a1, v1);
}

void sub_100039E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 *v14;
  id v15;
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "TodayActivityTileDataModel did receive fiuiFitnessUnitPreferencesDidChange notification", 87, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v2, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_todayCell);

    if (v7)
    {
      swift_beginAccess(v2, v17, 0, 0);
      v8 = swift_unknownObjectWeakLoadStrong(v2);
      if (v8
        && (v9 = (void *)v8,
            v10 = *(void **)(v8 + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activitySummary),
            v11 = v10,
            v9,
            v10))
      {
        swift_beginAccess(v2, v16, 0, 0);
        v12 = swift_unknownObjectWeakLoadStrong(v2);
        if (v12)
        {
          v13 = (void *)v12;
          v14 = (unsigned __int8 *)objc_retain(*(id *)(v12
                                                     + OBJC_IVAR____TtC10FitnessApp26TodayActivityTileDataModel_activityDataProvider));

          LODWORD(v13) = v14[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser];
          v15 = v11;
          sub_100155318(v10, (int)v13, 0, 0, 2);

          v7 = v15;
        }

      }
      else
      {
        v11 = v7;
      }

    }
  }
}

void sub_10003A014(uint64_t a1)
{
  uint64_t v1;

  sub_10003A01C(a1, v1);
}

void sub_10003A01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD aBlock[5];
  uint64_t v10;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR___CHHistoryDataProvider_mindfulnessSessionDataProvider);

    aBlock[4] = sub_100019840;
    v10 = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000197D4;
    aBlock[3] = &unk_10079CDB8;
    v7 = _Block_copy(aBlock);
    v8 = v10;
    swift_retain(a2);
    objc_msgSend(v6, "allMindfulnessSessionsWithCompletion:", v7, swift_release(v8).n128_f64[0]);
    _Block_release(v7);

  }
}

uint64_t sub_10003A100()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _BYTE v15[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_observers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_observers, v15, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(v2, 2);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v7)
      goto LABEL_25;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_25;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_25;
        v13 = *(_QWORD *)(v3 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_25;
          v13 = *(_QWORD *)(v3 + 8 * v9);
          if (!v13)
          {
            v9 = v12 + 4;
            if (v12 + 4 >= v7)
              goto LABEL_25;
            v13 = *(_QWORD *)(v3 + 8 * v9);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 16 * v11))();
  }
  v14 = v12 + 5;
  if (v14 >= v7)
  {
LABEL_25:
    swift_release(v2);
    return swift_bridgeObjectRelease(v2);
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_25;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10003A294()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10003A2B4()
{
  uint64_t v0;

  return sub_10003A2BC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10003A2BC(uint64_t (*a1)(void))
{
  return a1();
}

double sub_10003A2DC()
{
  uint64_t v0;

  return sub_10003A464(v0);
}

void sub_10003A2E4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(__n128);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = a3 + 16;
  v6 = static os_log_type_t.default.getter(a1);
  v7 = (void *)HKLogActivity;
  v8 = sub_100047110((uint64_t *)&unk_100827460);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100622F90;
  v10 = v7;
  sub_10025C8AC(a1, a2);
  v12 = v11;
  v14 = v13;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_100038CF8();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v10, "TrendsActivityTileDataModel did update trendsType: %@", 53, 2, v9);

  swift_bridgeObjectRelease(v9);
  swift_beginAccess(v5, v24, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(_QWORD *)(Strong + 88);
    *(_QWORD *)(Strong + 88) = a1;
    *(_BYTE *)(Strong + 96) = a2;
    swift_bridgeObjectRetain(a1);
    swift_release(v16);
    swift_bridgeObjectRelease(v17);
  }
  swift_beginAccess(v5, &v23, 0, 0);
  v18 = swift_weakLoadStrong(v5);
  if (v18)
  {
    v19 = v18;
    v20 = *(void (**)(__n128))(v18 + 104);
    v21 = *(_QWORD *)(v18 + 112);
    sub_10003AFE0((uint64_t)v20, v21);
    v22 = swift_release(v19);
    if (v20)
    {
      v20(v22);
      sub_100022BA4((uint64_t)v20, v21);
    }
  }
}

double sub_10003A464(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_10003A4B8();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

void sub_10003A4B8()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2);
  sub_10025D028();
  __asm { BR              X10 }
}

void sub_10003A57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  if (v7 || (swift_bridgeObjectRetain(v1), v10 = sub_10025C450(v6, v1), swift_bridgeObjectRelease(v1), !v10))
  {
    sub_10002FB54();
    v12 = (void *)static OS_dispatch_queue.main.getter(v11);
    v13 = swift_allocObject(&unk_1007919E0, 24, 7);
    swift_weakInit(v13 + 16, v5);
    v14 = swift_allocObject(&unk_100791A08, 40, 7);
    *(_QWORD *)(v14 + 16) = v6;
    *(_BYTE *)(v14 + 24) = v7;
    *(_QWORD *)(v14 + 32) = v13;
    *(_QWORD *)(v9 - 96) = sub_10003B458;
    *(_QWORD *)(v9 - 88) = v14;
    *(_QWORD *)(v9 - 128) = _NSConcreteStackBlock;
    *(_QWORD *)(v9 - 120) = 1107296256;
    *(_QWORD *)(v9 - 112) = sub_10002D0F8;
    *(_QWORD *)(v9 - 104) = &unk_100791A20;
    v15 = _Block_copy((const void *)(v9 - 128));
    swift_release(*(_QWORD *)(v9 - 88));
    static DispatchQoS.unspecified.getter(v16);
    *(_QWORD *)(v9 - 128) = _swiftEmptyArrayStorage;
    v17 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = sub_100047110(&qword_100828C80);
    v19 = sub_100028384((unint64_t *)&qword_1008268F0, &qword_100828C80, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v9 - 128, v18, v19, v0, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v4, v2, v15);
    _Block_release(v15);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 136) + 8))(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v3);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v21 = static os_log_type_t.default.getter(v20);
    v22 = HKLogActivity;
    *(_QWORD *)(v9 - 136) = v22;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "TrendsActivityTileDataModel trendsType did not change. Not updating UI", 70, 2, _swiftEmptyArrayStorage);

  }
}

id sub_10003A7D8(void *a1, void *a2, void *a3)
{
  id v6;
  double v7;
  double v8;
  id result;
  void *v10;
  NSNumber v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v6 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
  objc_msgSend(a1, "doubleValueForUnit:", v6);
  v8 = v7;

  result = objc_msgSend(a2, "unitManager");
  if (result)
  {
    v10 = result;
    objc_msgSend(result, "distanceInUserDistanceUnitForDistanceInMeters:distanceType:", 1, v8);

    v11.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
    v12 = objc_msgSend((id)objc_opt_self(FIUIFormattingManager), "stringWithNumber:decimalPrecision:", v11.super.super.isa, 3);
    if (!v12)
    {

      return 0;
    }
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    result = objc_msgSend(a2, "localizedShortUnitStringForDistanceType:", 1);
    if (result)
    {
      v17 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v19 = v18;

      v20 = sub_100038CA0();
      v21 = StringProtocol.localizedUppercase.getter(&type metadata for String, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v19);
      v24 = sub_1000387C4(v14, v16, v21, v23, a3);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v23);
      return v24;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003A994(void *a1)
{
  id v2;
  double v3;
  double v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
  objc_msgSend(a1, "doubleValueForUnit:", v2);
  v4 = v3;

  v5 = (void *)objc_opt_self(FIUIFormattingManager);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v4);
  v7 = objc_msgSend(v5, "stringWithNumber:decimalPrecision:roundingMode:", v6, 1, 4);

  if (!v7)
    return 0;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

void sub_10003AA88()
{
  uint64_t v0;

  swift_getObjectType(v0);
  __asm { BR              X10 }
}

id sub_10003AAD0()
{
  unsigned __int8 v0;

  return ((id (*)())((char *)sub_10003AAEC + 4 * byte_100626C40[v0]))();
}

id sub_10003AAEC()
{
  char v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  Class isa;
  id result;

  sub_1001562B4((uint64_t)v1);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair], "removeFromSuperview");
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair], "removeFromSuperview");
  v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
  objc_msgSend(v3, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair]);
  objc_msgSend(v3, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair]);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints];
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "deactivateConstraints:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  sub_1000324AC(v0);
  result = objc_msgSend(v1, "invalidateIntrinsicContentSize");
  v1[v2] = v0;
  return result;
}

void sub_10003AD54()
{
  uint64_t *v0;

  sub_10003AD60(v0[2], v0[3], v0[4], v0[5]);
}

void sub_10003AD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(__n128);
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32[3];
  _BYTE v33[24];
  _BYTE v34[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v34, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(_QWORD *)(Strong + 32);
    *(_QWORD *)(Strong + 32) = a2;
    swift_bridgeObjectRetain(a2);
    swift_release(v9);
    swift_bridgeObjectRelease(v10);
  }
  swift_beginAccess(v7, v33, 0, 0);
  v11 = swift_weakLoadStrong(v7);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = a3;
    swift_bridgeObjectRetain(a3);
    swift_release(v12);
    swift_bridgeObjectRelease(v13);
  }
  v14 = static os_log_type_t.default.getter(v11);
  v15 = (void *)HKLogActivity;
  v16 = v14;
  if (os_log_type_enabled(HKLogActivity, v14))
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v17 = v15;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v32[0] = v19;
    *(_DWORD *)v18 = 136315394;
    v20 = _typeName(_:qualified:)(a4, 0);
    v22 = v21;
    v31 = sub_10003E8EC(v20, v21, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v18 + 4);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2080;
    v23 = sub_10003AFF0(a2);
    v25 = v24;
    v31 = sub_10003E8EC(v23, v24, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v18 + 14);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v16, "%s did update keyHistoryItems: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  swift_beginAccess(v7, v32, 0, 0);
  v26 = swift_weakLoadStrong(v7);
  if (v26)
  {
    v27 = v26;
    v28 = *(void (**)(__n128))(v26 + 40);
    v29 = *(_QWORD *)(v26 + 48);
    sub_10003AFE0((uint64_t)v28, v29);
    v30 = swift_release(v27);
    if (v28)
    {
      v28(v30);
      sub_100022BA4((uint64_t)v28, v29);
    }
  }
}

uint64_t sub_10003AFE0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10003AFF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  __n128 v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *v24;
  __n128 v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  Swift::String v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;

  v2 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 10536;
  v48 = _swiftEmptyArrayStorage;
  sub_1001214C4(0, v8, 0);
  v9 = (_QWORD *)(a1 + 32);
  do
  {
    v46 = 0;
    v47 = 0xE000000000000000;
    v10._countAndFlagsBits = 8232;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    v11 = v9[3];
    v12 = v9[4];
    sub_100016804(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
    v13 = sub_1000083D8((unint64_t *)&qword_100821498, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = v43;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v43, v13);
    object = v15._object;
    String.append(_:)(v15);
    v17 = swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v7, v14, v17);
    v18._countAndFlagsBits = 8236;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19 = v9[3];
    v20 = v9[4];
    sub_100016804(v9, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    v21 = sub_1000083D8((unint64_t *)&qword_10081EEC8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v22 = v45;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v45, v21);
    v24 = v23._object;
    String.append(_:)(v23);
    v25 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v4, v22, v25);
    v26._countAndFlagsBits = 8236;
    v26._object = (void *)0xE200000000000000;
    String.append(_:)(v26);
    v27 = v9[3];
    v28 = v9[4];
    sub_100016804(v9, v27);
    v29 = (*(double (**)(uint64_t, uint64_t))(v28 + 40))(v27, v28);
    Double.write<A>(to:)(&v46, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v29);
    v30._countAndFlagsBits = 10528;
    v30._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    v32 = v46;
    v31 = v47;
    v33 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
    {
      sub_1001214C4(0, v33[2] + 1, 1);
      v33 = v48;
    }
    v35 = v33[2];
    v34 = v33[3];
    if (v35 >= v34 >> 1)
    {
      sub_1001214C4(v34 > 1, v35 + 1, 1);
      v33 = v48;
    }
    v33[2] = v35 + 1;
    v36 = &v33[2 * v35];
    v36[4] = v32;
    v36[5] = v31;
    v9 += 5;
    --v8;
  }
  while (v8);
  v46 = v33;
  v37 = sub_100047110((uint64_t *)&unk_10081E160);
  v38 = sub_10004791C();
  v39 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v37, v38);
  swift_release(v33);
  return v39;
}

unint64_t sub_10003B31C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008282B8;
  if (!qword_1008282B8)
  {
    v1 = sub_100007050(&qword_1008282B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1008282B8);
  }
  return result;
}

unint64_t sub_10003B368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008282A8;
  if (!qword_1008282A8)
  {
    v1 = type metadata accessor for IndexSet(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IndexSet, v1);
    atomic_store(result, (unint64_t *)&qword_1008282A8);
  }
  return result;
}

void sub_10003B3B0(uint64_t a1)
{
  uint64_t v1;

  sub_10003B3B8(a1, v1);
}

void sub_10003B3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  id v5;
  NSIndexSet *v6;
  void *v7;
  void *v8;
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(Strong, "tableView");

    if (v5)
    {
      IndexSet._bridgeToObjectiveC()(v6);
      v8 = v7;
      objc_msgSend(v5, "reloadSections:withRowAnimation:", v7, 100);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10003B458()
{
  uint64_t v0;

  sub_10003A2E4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_10003B468()
{
  uint64_t v0;

  sub_10003B478(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

void sub_10003B478(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v39, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_1000252E0(Strong + OBJC_IVAR____TtC10FitnessApp27AwardsActivityTileDataModel_achievementsDataProvider, (uint64_t)v36);

    v9 = v37;
    v10 = v38;
    sub_100016804(v36, v37);
    v34 = (_QWORD *)dispatch thunk of AAUIAwardsDataProviding.topThreeAchievements()(v9, v10);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v36);
    if (!((unint64_t)a2 >> 62))
    {
LABEL_3:
      v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    v34 = _swiftEmptyArrayStorage;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
  }
  if (a2 < 0)
    v32 = a2;
  else
    v32 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v11 = _CocoaArrayWrapper.endIndex.getter(v32);
  swift_bridgeObjectRelease(a2);
LABEL_4:
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v36[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    if (v11 < 0)
    {
      __break(1u);
      goto LABEL_37;
    }
    v13 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a2);
      else
        v14 = *(id *)(a2 + 8 * v13 + 32);
      v15 = v14;
      ++v13;
      v16 = objc_msgSend(v14, "template");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v18 = *(_QWORD *)(v36[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
      specialized ContiguousArray._endMutation()(v19);
    }
    while (v11 != v13);
    v12 = (_QWORD *)v36[0];
  }
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v33 = a3;
    else
      v33 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v20 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v20 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = _swiftEmptyArrayStorage;
  if (!v20)
    goto LABEL_22;
  v36[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v20);
  if (v20 < 0)
  {
LABEL_37:
    __break(1u);
    return;
  }
  v22 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a3);
    else
      v23 = *(id *)(a3 + 8 * v22 + 32);
    v24 = v23;
    ++v22;
    v25 = objc_msgSend(v23, "template");

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v27 = *(_QWORD *)(v36[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
    v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
    specialized ContiguousArray._endMutation()(v28);
  }
  while (v20 != v22);
  v21 = (_QWORD *)v36[0];
LABEL_22:
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v21);
  v29 = sub_10003B7A4((unint64_t)v34, (uint64_t)v12, (uint64_t)v21);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease_n(v21, 2);
  if ((a4 & 1) != 0 && (v29 & 1) != 0)
  {
    swift_beginAccess(v6, v36, 0, 0);
    v30 = swift_unknownObjectWeakLoadStrong(v6);
    if (v30)
    {
      v31 = (void *)v30;
      sub_100016238();

    }
  }
}

uint64_t sub_10003B7A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  id v10;
  BOOL v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = a1;
  if (a1 >> 62)
  {
LABEL_70:
    if (v4 < 0)
      v41 = v4;
    else
      v41 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v41);
    if (v5)
      goto LABEL_3;
LABEL_74:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v5)
    goto LABEL_74;
LABEL_3:
  v6 = 0;
  v49 = v4 & 0xC000000000000001;
  v43 = v4 + 32;
  v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v7 = a2;
  v44 = v7;
  v48 = a2 & 0xC000000000000001;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (a3 < 0)
    v8 = a3;
  v42 = v8;
  v46 = v5;
  v47 = a3 & 0xC000000000000001;
  v9 = &selRef_systemBlueColor;
  v45 = v4;
  while (1)
  {
    if (v49)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      v11 = __OFADD__(v6++, 1);
      if (v11)
        goto LABEL_69;
    }
    else
    {
      v10 = *(id *)(v43 + 8 * v6);
      v11 = __OFADD__(v6++, 1);
      if (v11)
        goto LABEL_69;
    }
    v50 = v10;
    v12 = objc_msgSend(v10, v9[21], v42);
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain(a2);
      v13 = _CocoaArrayWrapper.endIndex.getter(v44);
      if (!v13)
      {
LABEL_21:

        *(_QWORD *)&v17 = swift_bridgeObjectRelease(a2).n128_u64[0];
        goto LABEL_34;
      }
    }
    else
    {
      v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a2);
      if (!v13)
        goto LABEL_21;
    }
    v14 = v48 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
    v15 = v14;
    sub_10001E724(0, &qword_10082C280, ACHTemplate_ptr);
    v16 = static NSObject.== infix(_:_:)(v15, v12);

    if ((v16 & 1) != 0)
      break;
    if (v13 != 1)
    {
      if (v48)
      {
        v18 = 1;
        while (1)
        {
          v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a2);
          v4 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          v20 = v19;
          v21 = static NSObject.== infix(_:_:)(v19, v12);
          swift_unknownObjectRelease(v20);
          if ((v21 & 1) != 0)
            goto LABEL_59;
          ++v18;
          if (v4 == v13)
            goto LABEL_32;
        }
        __break(1u);
LABEL_66:
        __break(1u);
      }
      else
      {
        v22 = 5;
        while (1)
        {
          v4 = v22 - 3;
          if (__OFADD__(v22 - 4, 1))
            break;
          v23 = *(id *)(a2 + 8 * v22);
          v24 = static NSObject.== infix(_:_:)(v23, v12);

          if ((v24 & 1) != 0)
          {
LABEL_59:

            swift_bridgeObjectRelease(a2);
            v4 = v45;
            goto LABEL_60;
          }
          ++v22;
          if (v4 == v13)
          {
LABEL_32:

            *(_QWORD *)&v17 = swift_bridgeObjectRelease(a2).n128_u64[0];
            v4 = v45;
            goto LABEL_33;
          }
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    *(_QWORD *)&v17 = swift_bridgeObjectRelease(a2).n128_u64[0];
LABEL_33:
    v9 = &selRef_systemBlueColor;
LABEL_34:
    v25 = objc_msgSend(v50, v9[21], v17);
    if ((unint64_t)a3 >> 62)
    {
      swift_bridgeObjectRetain(a3);
      v26 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (!v26)
      {
LABEL_54:

        swift_bridgeObjectRelease(a3);
        v37 = v46;
        v38 = v50;
        goto LABEL_55;
      }
    }
    else
    {
      v26 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a3);
      if (!v26)
        goto LABEL_54;
    }
    if (v47)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
    else
      v27 = *(id *)(a3 + 32);
    v28 = v27;
    sub_10001E724(0, &qword_10082C280, ACHTemplate_ptr);
    v29 = static NSObject.== infix(_:_:)(v28, v25);

    if ((v29 & 1) != 0)
    {
      v40 = v4;
LABEL_62:
      swift_bridgeObjectRelease(v40);

      swift_bridgeObjectRelease(a3);
      return 1;
    }
    if (v26 != 1)
    {
      if (v47)
      {
        v30 = 1;
        while (1)
        {
          v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30, a3);
          v4 = v30 + 1;
          if (__OFADD__(v30, 1))
            goto LABEL_66;
          v32 = v31;
          v33 = static NSObject.== infix(_:_:)(v31, v25);
          swift_unknownObjectRelease(v32);
          if ((v33 & 1) != 0)
            goto LABEL_61;
          ++v30;
          if (v4 == v26)
            goto LABEL_51;
        }
      }
      v34 = 5;
      while (1)
      {
        v4 = v34 - 3;
        if (__OFADD__(v34 - 4, 1))
          goto LABEL_68;
        v35 = *(id *)(a3 + 8 * v34);
        v36 = static NSObject.== infix(_:_:)(v35, v25);

        if ((v36 & 1) != 0)
        {
LABEL_61:
          v40 = v45;
          goto LABEL_62;
        }
        ++v34;
        if (v4 == v26)
        {
LABEL_51:

          swift_bridgeObjectRelease(a3);
          v4 = v45;
          goto LABEL_52;
        }
      }
    }

    swift_bridgeObjectRelease(a3);
LABEL_52:
    v37 = v46;
    v38 = v50;
    v9 = &selRef_systemBlueColor;
LABEL_55:

    if (v6 == v37)
      goto LABEL_74;
  }

  swift_bridgeObjectRelease(a2);
LABEL_60:
  swift_bridgeObjectRelease(v4);

  return 1;
}

void sub_10003BC70()
{
  uint64_t v0;

  sub_10003BC78(v0);
}

void sub_10003BC78(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t *);
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = (_QWORD *)(Strong + OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers);
    swift_beginAccess(Strong + OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers, v13, 0, 0);
    v5 = *v4;
    v6 = *(_QWORD *)(*v4 + 16);
    if (v6)
    {
      v7 = OBJC_IVAR___CHHistoryDataProvider_allHistoryItems;
      swift_bridgeObjectRetain(*v4);
      v8 = (uint64_t *)(v5 + 40);
      do
      {
        v10 = (void (*)(uint64_t *))*(v8 - 1);
        v9 = *v8;
        v12 = *(_QWORD *)&v3[v7];
        v11 = v12;
        swift_retain(v9);
        swift_bridgeObjectRetain(v11);
        v10(&v12);
        swift_release(v9);
        swift_bridgeObjectRelease(v11);
        v8 += 2;
        --v6;
      }
      while (v6);

      swift_bridgeObjectRelease(v5);
    }
    else
    {

    }
  }
}

uint64_t sub_10003BD6C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10003BD98(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_10003BD74(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10003BD98(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

double sub_10003BDBC(uint64_t a1)
{
  uint64_t v1;

  return sub_10003BDC4(a1, v1);
}

double sub_10003BDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_10002F74C();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

void sub_10003BE18()
{
  uint64_t v0;

  sub_10003BE28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40));
}

void sub_10003BE28(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *Strong;
  id v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v8 = (_QWORD *)(a1 + 16);
  swift_beginAccess(a1 + 16, v17, 1, 0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = __OFADD__(v9, a2);
  v11 = v9 + a2;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v12 = a3 + 16;
    *v8 = v11;
    swift_beginAccess(v12, v16, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v12);
    if (Strong)
    {
      *(_QWORD *)&Strong[OBJC_IVAR___CHFitnessAppBadgeAggregator_appBadgeCount] = v11;

    }
    v14 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    swift_beginAccess(v8, v15, 0, 0);
    objc_msgSend(v14, "setApplicationIconBadgeNumber:", *v8);

    if (a4)
      a4();
  }
}

void sub_10003C9D4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[5];
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[128];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(WeakRetained, "setObject:forCacheIndex:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v9), objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v9), "_activitySummaryIndex"));
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    }
    while (v7);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v10, "_activitySummaryIndex")));
  v22[0] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v12, "_activitySummaryIndex")));
  v22[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 2));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100008064;
  v16[3] = &unk_100777EE0;
  v16[4] = WeakRetained;
  v17 = v14;
  v15 = v14;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);

}

void sub_10003CBD8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1[4] + 8);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[6]));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10003CC44(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10003CCA0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10003CCA8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10003CCA8(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v26[24];

  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for Calendar(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v15 = sub_10003CE9C(v11, (uint64_t)qword_100869D10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  v16 = objc_msgSend(a1, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

  LOBYTE(v16) = Calendar.isDateInToday(_:)(v10);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    v18 = a4 + 16;
    if ((a3 & 0x10) != 0)
      v19 = objc_msgSend(a1, "sumQuantity");
    else
      v19 = objc_msgSend(a1, "averageQuantity");
    v20 = v19;
    v21 = swift_beginAccess(a4 + 16, v26, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
    v23 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    v22 = *(_QWORD *)(*(_QWORD *)v18 + 24);
    if (v23 >= v22 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
    specialized Array._endMutation()(v24);
    return swift_endAccess(v26);
  }
  return result;
}

uint64_t sub_10003CE9C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_10003CEB4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003CEBC(a1, a2, v2);
}

void sub_10003CEBC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _BYTE v32[24];

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v13 = sub_10003CE9C(v9, (uint64_t)qword_100869D10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v14 = objc_msgSend(a1, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  LOBYTE(v14) = Calendar.isDateInToday(_:)(v8);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) == 0)
  {
    v15 = (_QWORD *)(a3 + 16);
    v16 = objc_msgSend(a1, "duration");
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend((id)objc_opt_self(HKUnit), "hourUnit");
      objc_msgSend(v17, "doubleValueForUnit:", v18);
      v20 = v19;

      swift_beginAccess(v15, v32, 33, 0);
      v21 = (_QWORD *)*v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
      *v15 = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v21 = sub_10003D734(0, v21[2] + 1, 1, v21);
        *v15 = v21;
      }
      v24 = v21[2];
      v23 = v21[3];
      if (v24 >= v23 >> 1)
      {
        v21 = sub_10003D734((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
        *v15 = v21;
      }
      v21[2] = v24 + 1;
      v25 = &v21[2 * v24];
      v25[4] = v20;
      *((_BYTE *)v25 + 40) = 0;
      swift_endAccess(v32);

    }
    else
    {
      swift_beginAccess(v15, v32, 33, 0);
      v26 = (_QWORD *)*v15;
      v27 = swift_isUniquelyReferenced_nonNull_native(*v15);
      *v15 = v26;
      if ((v27 & 1) == 0)
      {
        v26 = sub_10003D734(0, v26[2] + 1, 1, v26);
        *v15 = v26;
      }
      v29 = v26[2];
      v28 = v26[3];
      if (v29 >= v28 >> 1)
      {
        v26 = sub_10003D734((_QWORD *)(v28 > 1), v29 + 1, 1, v26);
        *v15 = v26;
      }
      v26[2] = v29 + 1;
      v30 = &v26[2 * v29];
      v30[4] = 0;
      *((_BYTE *)v30 + 40) = 1;
      swift_endAccess(v32);
    }
  }
}

uint64_t sub_10003D1C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v4;
  uint64_t v5;
  double v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = a3;
    v5 = result;
    v7 = (a4 - a3) / (double)result;
    v8 = _swiftEmptyArrayStorage;
    if (result)
    {
      v9 = _swiftEmptyArrayStorage;
      do
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = sub_10003D454(0, v8[2] + 1, 1, v8);
        v11 = v8[2];
        v10 = v8[3];
        if (v11 >= v10 >> 1)
          v8 = sub_10003D454((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
        v8[2] = v11 + 1;
        *(double *)&v8[v11 + 4] = v4;
        result = swift_isUniquelyReferenced_nonNull_native(v9);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10003D330(0, v9[2] + 1, 1, v9);
          v9 = (_QWORD *)result;
        }
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
        {
          result = (uint64_t)sub_10003D330((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
          v9 = (_QWORD *)result;
        }
        v9[2] = v13 + 1;
        v14 = &v9[3 * v13];
        v14[4] = 0;
        v14[5] = 0;
        *((_BYTE *)v14 + 48) = 1;
        v4 = v7 + v4;
        --v5;
      }
      while (v5);
    }
    else
    {
      v9 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v8;
    *(double *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)(a2 + 40) = xmmword_10062CD70;
  }
  return result;
}

_QWORD *sub_10003D330(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008214C8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10003D648(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10003D454(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_100821568);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003D560(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10003D560(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10003D648(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_10003D734(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100140370(a1, a2, a3, a4, &qword_100821630);
}

void sub_10003D740(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t i;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  uint64_t v94;
  double v95;
  _QWORD *v96;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v98;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  __n128 v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  uint64_t v126;
  _BYTE v127[24];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char v140;
  _BYTE v141[1832];
  _BYTE v142[1832];
  _BYTE v143[40];
  _QWORD v144[5];
  _BYTE v145[1832];
  _QWORD v146[229];
  _BYTE v147[1832];
  _BYTE v148[1832];
  _OWORD v149[3];
  uint64_t v150;
  _OWORD v151[3];
  uint64_t v152;

  v122 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v120 = *(_QWORD *)(v5 - 8);
  v121 = v5;
  __chkstk_darwin(v5);
  v119 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for DispatchQoS(0);
  v117.n128_u64[0] = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for DispatchTime(0);
  v113 = *(_QWORD *)(v115 - 8);
  v8 = __chkstk_darwin(v115);
  __chkstk_darwin(v8);
  v114 = (char *)&v111 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_lastWheelchairUseValue;
  v125 = a1;
  sub_10003F6E8(365, a2, a1[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_lastWheelchairUseValue], (uint64_t)v141);
  v123 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v12;
  v111 = v10;
  v112 = v11;
  sub_10003F6A0((uint64_t)v141, (uint64_t)v147);
  if (sub_1001F85B4((uint64_t)v147) == 1)
    return;
  memcpy(v148, v147, sizeof(v148));
  sub_10003F6E8(90, a2, v125[v13], (uint64_t)v142);
  sub_10003F6A0((uint64_t)v142, (uint64_t)v145);
  if (sub_1001F85B4((uint64_t)v145) == 1)
  {
    sub_10003F0D8((uint64_t)v141);
    return;
  }
  v113 = a2;
  memcpy(v146, v145, sizeof(v146));
  v14 = v125;
  sub_100048E60((__int128 *)v148, v146);
  sub_10003F0D8((uint64_t)v142);
  sub_10003F0D8((uint64_t)v141);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_retryCount] = 0;
  v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90];
  v16 = *(_QWORD *)(v15 + 64);
  v118 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v116 = (char *)&v14[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_mannKendallTestByTrendType90];
  v115 = (uint64_t)&v14[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_fitsByTrendType90];
  v119 = (char *)((unint64_t)(v17 + 63) >> 6);
  v121 = v15;
  v20 = swift_bridgeObjectRetain(v15);
  v21 = 0;
  v20.n128_u64[0] = 136315650;
  v117 = v20;
  v114 = (char *)&type metadata for Any + 8;
  v22 = v123;
  while (1)
  {
    v23 = v124;
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v25 = (v19 - 1) & v19;
      v26 = v24 | (v21 << 6);
      goto LABEL_20;
    }
    v27 = __OFADD__(v21++, 1);
    if (v27)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v21 >= (uint64_t)v119)
    {
      v29 = v112;
      v59 = v113;
LABEL_28:
      v60 = v111;
      swift_release(v121);
      v61 = v125;
      if ((v125[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_calculatesLongTermFits] & 1) == 0)
      {
LABEL_52:
        v102 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v22, v59, v60);
        v103 = *(unsigned __int8 *)(v29 + 80);
        v104 = (v103 + 16) & ~v103;
        v105 = v29;
        v106 = (v23 + v104 + 7) & 0xFFFFFFFFFFFFFFF8;
        v107 = swift_allocObject(&unk_10078FD50, v106 + 8, v103 | 7);
        (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v107 + v104, v22, v60);
        *(_QWORD *)(v107 + v106) = v61;
        *(_QWORD *)&v130 = sub_10002E5B8;
        *((_QWORD *)&v130 + 1) = v107;
        *(_QWORD *)&v128 = _NSConcreteStackBlock;
        *((_QWORD *)&v128 + 1) = 1107296256;
        *(_QWORD *)&v129 = sub_10002D0F8;
        *((_QWORD *)&v129 + 1) = &unk_10078FD68;
        v108 = _Block_copy(&v128);
        v109 = *((_QWORD *)&v130 + 1);
        v110 = v61;
        swift_release(v109);
        objc_msgSend(v102, "addOperationWithBlock:", v108);
        _Block_release(v108);

        return;
      }
      v62 = *(_QWORD *)&v125[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365];
      v63 = *(_QWORD *)(v62 + 64);
      v118 = v62 + 64;
      v64 = 1 << *(_BYTE *)(v62 + 32);
      v65 = -1;
      if (v64 < 64)
        v65 = ~(-1 << v64);
      v66 = v65 & v63;
      v116 = (char *)&v125[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_mannKendallTestByTrendType365];
      v115 = (uint64_t)&v125[OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_fitsByTrendType365];
      v119 = (char *)((unint64_t)(v64 + 63) >> 6);
      v121 = v62;
      swift_bridgeObjectRetain(v62);
      v67 = 0;
      v114 = (char *)&type metadata for Any + 8;
      if (!v66)
        goto LABEL_33;
LABEL_32:
      v68 = __clz(__rbit64(v66));
      v69 = (v66 - 1) & v66;
      for (i = v68 | (v67 << 6); ; i = __clz(__rbit64(v71)) + (v67 << 6))
      {
        v73 = *(unsigned __int8 *)(*(_QWORD *)(v121 + 48) + i);
        v74 = *(_QWORD *)(v121 + 56) + 200 * i;
        v128 = *(_OWORD *)v74;
        v75 = *(_OWORD *)(v74 + 64);
        v77 = *(_OWORD *)(v74 + 16);
        v76 = *(_OWORD *)(v74 + 32);
        v131 = *(_OWORD *)(v74 + 48);
        v132 = v75;
        v129 = v77;
        v130 = v76;
        v78 = *(_OWORD *)(v74 + 128);
        v80 = *(_OWORD *)(v74 + 80);
        v79 = *(_OWORD *)(v74 + 96);
        v135 = *(_OWORD *)(v74 + 112);
        v136 = v78;
        v133 = v80;
        v134 = v79;
        v82 = *(_OWORD *)(v74 + 160);
        v81 = *(_OWORD *)(v74 + 176);
        v83 = *(_OWORD *)(v74 + 144);
        v140 = *(_BYTE *)(v74 + 192);
        v138 = v82;
        v139 = v81;
        v137 = v83;
        v84 = v129;
        v151[0] = v129;
        v151[1] = v130;
        v151[2] = v131;
        v152 = v132;
        sub_10004AE58(&v128);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(*((_QWORD *)&v84 + 1));
        sub_10003EBB0((uint64_t)v144);
        v120 = v69;
        swift_bridgeObjectRelease(*((_QWORD *)&v84 + 1));
        swift_bridgeObjectRelease(v84);
        __chkstk_darwin(v85);
        *(&v111 - 2) = (uint64_t)v151;
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain_n(*((_QWORD *)&v84 + 1), 2);
        v86 = sub_1005B8E34(*((uint64_t *)&v84 + 1), (uint64_t (*)(_QWORD, double))sub_100221E94);
        swift_bridgeObjectRelease(*((_QWORD *)&v84 + 1));
        v87 = v86[2];
        if (!v87)
          break;
        v88 = 2 * v87 - 1;
        swift_bridgeObjectRetain(v86);
        v89 = v88;
        v22 = v123;
        sub_1002219F4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)v86, (uint64_t)(v86 + 4), 0, v89, (uint64_t)v86);
        v91 = v90;
        swift_bridgeObjectRelease(v86);
        sub_10048BEC0(v91);
        v93 = v92;
        v94 = v91;
        v23 = v124;
        swift_bridgeObjectRelease(v94);
        v95 = sub_10048C4DC((uint64_t)v86, v93);
        swift_bridgeObjectRelease(*((_QWORD *)&v84 + 1));
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v86);
        sub_100049DE4(&v128);
        v96 = v116;
        swift_beginAccess(v116, v127, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v96);
        v126 = *v96;
        *v96 = 0x8000000000000000;
        sub_1003FF218((uint64_t)v144, v73, isUniquelyReferenced_nonNull_native);
        v98 = *v96;
        *v96 = v126;
        swift_bridgeObjectRelease(v98);
        swift_endAccess(v127);
        v99 = (_QWORD *)v115;
        swift_beginAccess(v115, v127, 33, 0);
        v100 = swift_isUniquelyReferenced_nonNull_native(*v99);
        v126 = *v99;
        *v99 = 0x8000000000000000;
        sub_1003FF0E8(v73, v100, v93, v95);
        v101 = *v99;
        *v99 = v126;
        swift_bridgeObjectRelease(v101);
        swift_endAccess(v127);
        v66 = v120;
        if (v120)
          goto LABEL_32;
LABEL_33:
        v27 = __OFADD__(v67++, 1);
        if (v27)
          goto LABEL_55;
        v29 = v112;
        if (v67 >= (uint64_t)v119)
        {
LABEL_51:
          swift_release(v121);
          v61 = v125;
          v59 = v113;
          v60 = v111;
          goto LABEL_52;
        }
        v71 = *(_QWORD *)(v118 + 8 * v67);
        if (!v71)
        {
          v72 = v67 + 1;
          if (v67 + 1 >= (uint64_t)v119)
            goto LABEL_51;
          v71 = *(_QWORD *)(v118 + 8 * v72);
          if (!v71)
          {
            v72 = v67 + 2;
            if (v67 + 2 >= (uint64_t)v119)
              goto LABEL_51;
            v71 = *(_QWORD *)(v118 + 8 * v72);
            if (!v71)
            {
              v72 = v67 + 3;
              if (v67 + 3 >= (uint64_t)v119)
                goto LABEL_51;
              v71 = *(_QWORD *)(v118 + 8 * v72);
              if (!v71)
              {
                while (1)
                {
                  v67 = v72 + 1;
                  if (__OFADD__(v72, 1))
                    goto LABEL_58;
                  if (v67 >= (uint64_t)v119)
                    goto LABEL_51;
                  v71 = *(_QWORD *)(v118 + 8 * v67);
                  ++v72;
                  if (v71)
                    goto LABEL_43;
                }
              }
            }
          }
          v67 = v72;
        }
LABEL_43:
        v69 = (v71 - 1) & v71;
      }
      goto LABEL_56;
    }
    v28 = *(_QWORD *)(v118 + 8 * v21);
    v29 = v112;
    if (!v28)
      break;
LABEL_19:
    v25 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_20:
    v31 = *(unsigned __int8 *)(*(_QWORD *)(v121 + 48) + v26);
    v32 = *(_QWORD *)(v121 + 56) + 200 * v26;
    v128 = *(_OWORD *)v32;
    v33 = *(_OWORD *)(v32 + 64);
    v35 = *(_OWORD *)(v32 + 16);
    v34 = *(_OWORD *)(v32 + 32);
    v131 = *(_OWORD *)(v32 + 48);
    v132 = v33;
    v129 = v35;
    v130 = v34;
    v36 = *(_OWORD *)(v32 + 128);
    v38 = *(_OWORD *)(v32 + 80);
    v37 = *(_OWORD *)(v32 + 96);
    v135 = *(_OWORD *)(v32 + 112);
    v136 = v36;
    v133 = v38;
    v134 = v37;
    v40 = *(_OWORD *)(v32 + 160);
    v39 = *(_OWORD *)(v32 + 176);
    v41 = *(_OWORD *)(v32 + 144);
    v140 = *(_BYTE *)(v32 + 192);
    v138 = v40;
    v139 = v39;
    v137 = v41;
    v42 = v129;
    v149[0] = v129;
    v149[1] = v130;
    v149[2] = v131;
    v150 = v132;
    sub_10004AE58(&v128);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(*((_QWORD *)&v42 + 1));
    sub_10003EBB0((uint64_t)v143);
    v120 = v25;
    swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
    swift_bridgeObjectRelease(v42);
    __chkstk_darwin(v43);
    *(&v111 - 2) = (uint64_t)v149;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain_n(*((_QWORD *)&v42 + 1), 2);
    v44 = sub_1005B8E34(*((uint64_t *)&v42 + 1), (uint64_t (*)(_QWORD, double))sub_1002219EC);
    swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
    v45 = v44[2];
    if (!v45)
      goto LABEL_54;
    v46 = 2 * v45 - 1;
    swift_bridgeObjectRetain(v44);
    v47 = v46;
    v22 = v123;
    sub_1002219F4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)v44, (uint64_t)(v44 + 4), 0, v47, (uint64_t)v44);
    v49 = v48;
    swift_bridgeObjectRelease(v44);
    sub_10048BEC0(v49);
    v51 = v50;
    swift_bridgeObjectRelease(v49);
    v52 = sub_10048C4DC((uint64_t)v44, v51);
    swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v44);
    sub_100049DE4(&v128);
    v53 = v116;
    swift_beginAccess(v116, v151, 33, 0);
    v54 = swift_isUniquelyReferenced_nonNull_native(*v53);
    v144[0] = *v53;
    *v53 = 0x8000000000000000;
    sub_1003FF218((uint64_t)v143, v31, v54);
    v55 = *v53;
    *v53 = v144[0];
    swift_bridgeObjectRelease(v55);
    swift_endAccess(v151);
    v56 = (_QWORD *)v115;
    swift_beginAccess(v115, v151, 33, 0);
    v57 = swift_isUniquelyReferenced_nonNull_native(*v56);
    v144[0] = *v56;
    *v56 = 0x8000000000000000;
    sub_1003FF0E8(v31, v57, v51, v52);
    v58 = *v56;
    *v56 = v144[0];
    swift_bridgeObjectRelease(v58);
    swift_endAccess(v151);
    v19 = v120;
  }
  v30 = v21 + 1;
  if (v21 + 1 >= (uint64_t)v119)
    goto LABEL_27;
  v28 = *(_QWORD *)(v118 + 8 * v30);
  if (v28)
    goto LABEL_18;
  v30 = v21 + 2;
  if (v21 + 2 >= (uint64_t)v119)
    goto LABEL_27;
  v28 = *(_QWORD *)(v118 + 8 * v30);
  if (v28)
    goto LABEL_18;
  v30 = v21 + 3;
  if (v21 + 3 >= (uint64_t)v119)
  {
LABEL_27:
    v59 = v113;
    goto LABEL_28;
  }
  v28 = *(_QWORD *)(v118 + 8 * v30);
  if (v28)
  {
LABEL_18:
    v21 = v30;
    goto LABEL_19;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= (uint64_t)v119)
      goto LABEL_27;
    v28 = *(_QWORD *)(v118 + 8 * v21);
    ++v30;
    if (v28)
      goto LABEL_19;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
}

uint64_t sub_10003E8EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10003E9F8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10003E9BC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10003E9BC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v12);
  return v7;
}

uint64_t sub_10003E9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003E9F8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10003EE6C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003EBB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = sub_1005B8E34(v4, (uint64_t (*)(_QWORD, double))sub_1002219EC);
  swift_bridgeObjectRelease(v3);
  v6 = v5[2];
  if (v6 >= 2)
  {
    sub_1001214E0(0, v6, 0);
    v10 = _swiftEmptyArrayStorage[2];
    v11 = 4;
    v12 = v6;
    do
    {
      v13 = v5[v11];
      v14 = _swiftEmptyArrayStorage[3];
      if (v10 >= v14 >> 1)
        sub_1001214E0(v14 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v13;
      v11 += 2;
      ++v10;
      --v12;
    }
    while (v12);
    sub_1001214E0(0, v6, 0);
    v15 = _swiftEmptyArrayStorage[2];
    v16 = 5;
    do
    {
      v17 = v5[v16];
      v18 = _swiftEmptyArrayStorage[3];
      if (v15 >= v18 >> 1)
        sub_1001214E0(v18 > 1, v15 + 1, 1);
      _swiftEmptyArrayStorage[2] = v15 + 1;
      _swiftEmptyArrayStorage[v15 + 4] = v17;
      v16 += 2;
      ++v15;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v5);
    sub_10048D300((uint64_t)_swiftEmptyArrayStorage, (double *)v20);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v19 = v20[1];
    *(_OWORD *)a1 = v20[0];
    *(_OWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 32) = v21;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v7 = sub_10003EDF4();
    swift_allocError(&type metadata for MathError, v7, 0, 0);
    *v8 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t *sub_10003EDC4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10003EDF4()
{
  unint64_t result;

  result = qword_10082D160;
  if (!qword_10082D160)
  {
    result = swift_getWitnessTable(&unk_10063F1FC, &type metadata for MathError);
    atomic_store(result, (unint64_t *)&qword_10082D160);
  }
  return result;
}

_QWORD *sub_10003EE38(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10003EE6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10003EF00(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002D5308(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1002D5308(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10003EF00(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10003F074(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10003F074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100047110(&qword_10082D4D0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10003F0D8(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  sub_100049144(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_10003F6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100827400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  _QWORD *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  NSString v24;
  id v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  char v133;
  _OWORD v134[113];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  char v173;
  _BYTE v174[1800];
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE v178[200];
  _BYTE v179[200];
  _BYTE v180[200];
  _BYTE v181[200];
  _OWORD v182[12];
  char v183;
  _OWORD v184[12];
  char v185;
  _OWORD v186[12];
  char v187;
  _OWORD v188[12];
  char v189;
  _BYTE v190[1848];
  _QWORD *v191;

  v66 = a3;
  v7 = sub_100047110(&qword_1008273F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ActivityStatisticsCollection(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  v191 = (_QWORD *)a2;
  sub_1000439B8(a1, a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    v65 = a4;
    v15 = v68;
    sub_100041D8C((uint64_t)v9, (uint64_t)v13);
    v16 = (void *)objc_opt_self(HKObjectType);
    v17 = objc_msgSend(v16, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierVO2Max);
    if (!v17)
    {
LABEL_13:
      sub_100041B5C((uint64_t)v13);
      v14 = v65;
      goto LABEL_14;
    }
    v18 = v17;
    if (qword_10081E0C0 != -1)
      swift_once(&qword_10081E0C0, sub_10004F268);
    v64 = v13;
    v19 = v191;
    v20 = v67;
    v21 = v16;
    if ((byte_10083D1A2 & 1) != 0)
    {
      v22 = 0;
    }
    else
    {
      v23 = (void *)objc_opt_self(HKQuery);
      v24 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v23, "_predicateForObjectsWithMinOSBuildVersion:maxOSBuildVersion:", v24, 0);

    }
    sub_100042898(v18, 2, 6, v20, (uint64_t)v19, 0, v22, 0, (uint64_t)v178);

    if (v15)
      return sub_100041B5C((uint64_t)v64);
    sub_100045AD4((uint64_t)v178, (uint64_t)v188, &qword_100827408);
    if (sub_1001F85B4((uint64_t)v188) == 1)
    {
      v13 = v64;
      goto LABEL_13;
    }
    v171 = v188[10];
    v172 = v188[11];
    v173 = v189;
    v167 = v188[6];
    v168 = v188[7];
    v170 = v188[9];
    v169 = v188[8];
    v163 = v188[2];
    v164 = v188[3];
    v166 = v188[5];
    v165 = v188[4];
    v162 = v188[1];
    v161 = v188[0];
    v26 = objc_msgSend(v21, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleStandTime);
    if (v26)
    {
      v27 = v26;
      sub_100042898(v26, 80, 2, v20, (uint64_t)v19, 1, 0, 1, (uint64_t)v179);

      v14 = v65;
      sub_100045AD4((uint64_t)v179, (uint64_t)v186, &qword_100827408);
      if (sub_1001F85B4((uint64_t)v186) != 1)
      {
        v158 = v186[10];
        v159 = v186[11];
        v160 = v187;
        v154 = v186[6];
        v155 = v186[7];
        v157 = v186[9];
        v156 = v186[8];
        v150 = v186[2];
        v151 = v186[3];
        v153 = v186[5];
        v152 = v186[4];
        v28 = v66;
        if ((v66 & 1) != 0)
          v29 = 70;
        else
          v29 = 52;
        v149 = v186[1];
        v148 = v186[0];
        sub_10004015C((char *)v29, (uint64_t)v20, v19, (uint64_t)v180);
        sub_100045AD4((uint64_t)v180, (uint64_t)v184, &qword_100827408);
        if (sub_1001F85B4((uint64_t)v184) == 1)
        {
          sub_100041B5C((uint64_t)v64);
        }
        else
        {
          v145 = v184[10];
          v146 = v184[11];
          v147 = v185;
          v141 = v184[6];
          v142 = v184[7];
          v144 = v184[9];
          v143 = v184[8];
          v137 = v184[2];
          v138 = v184[3];
          v140 = v184[5];
          v139 = v184[4];
          if ((v28 & 1) != 0)
            v30 = 71;
          else
            v30 = 37;
          v136 = v184[1];
          v135 = v184[0];
          sub_10004015C((char *)v30, (uint64_t)v20, v19, (uint64_t)v181);
          sub_100045AD4((uint64_t)v181, (uint64_t)v182, &qword_100827408);
          if (sub_1001F85B4((uint64_t)v182) != 1)
          {
            v134[109] = v182[9];
            v134[110] = v182[10];
            v134[111] = v182[11];
            LOBYTE(v134[112]) = v183;
            v134[105] = v182[5];
            v134[106] = v182[6];
            v134[107] = v182[7];
            v134[108] = v182[8];
            v134[101] = v182[1];
            v134[102] = v182[2];
            v134[103] = v182[3];
            v134[104] = v182[4];
            v134[100] = v182[0];
            v31 = (uint64_t)v64;
            v32 = *((_OWORD *)v64 + 11);
            v79 = *((_OWORD *)v64 + 10);
            v80 = v32;
            v81 = v64[192];
            v33 = *((_OWORD *)v64 + 7);
            v75 = *((_OWORD *)v64 + 6);
            v76 = v33;
            v34 = *((_OWORD *)v64 + 9);
            v77 = *((_OWORD *)v64 + 8);
            v78 = v34;
            v35 = *((_OWORD *)v64 + 3);
            v71 = *((_OWORD *)v64 + 2);
            v72 = v35;
            v36 = *((_OWORD *)v64 + 5);
            v73 = *((_OWORD *)v64 + 4);
            v74 = v36;
            v37 = *((_OWORD *)v64 + 1);
            v69 = *(_OWORD *)v64;
            v70 = v37;
            v38 = *((_OWORD *)v64 + 36);
            v92 = *((_OWORD *)v64 + 35);
            v93 = v38;
            v94 = v64[592];
            v39 = *((_OWORD *)v64 + 32);
            v88 = *((_OWORD *)v64 + 31);
            v89 = v39;
            v40 = *((_OWORD *)v64 + 34);
            v90 = *((_OWORD *)v64 + 33);
            v91 = v40;
            v41 = *((_OWORD *)v64 + 28);
            v84 = *((_OWORD *)v64 + 27);
            v85 = v41;
            v42 = *((_OWORD *)v64 + 30);
            v86 = *((_OWORD *)v64 + 29);
            v87 = v42;
            v43 = *((_OWORD *)v64 + 26);
            v82 = *((_OWORD *)v64 + 25);
            v83 = v43;
            v44 = *((_OWORD *)v64 + 61);
            v105 = *((_OWORD *)v64 + 60);
            v106 = v44;
            v107 = v64[992];
            v45 = *((_OWORD *)v64 + 57);
            v101 = *((_OWORD *)v64 + 56);
            v102 = v45;
            v46 = *((_OWORD *)v64 + 59);
            v103 = *((_OWORD *)v64 + 58);
            v104 = v46;
            v47 = *((_OWORD *)v64 + 53);
            v97 = *((_OWORD *)v64 + 52);
            v98 = v47;
            v48 = *((_OWORD *)v64 + 55);
            v99 = *((_OWORD *)v64 + 54);
            v100 = v48;
            v49 = *((_OWORD *)v64 + 51);
            v95 = *((_OWORD *)v64 + 50);
            v96 = v49;
            v50 = *((_OWORD *)v64 + 84);
            v51 = *((_OWORD *)v64 + 86);
            v118 = *((_OWORD *)v64 + 85);
            v119 = v51;
            v120 = v64[1392];
            v52 = *((_OWORD *)v64 + 80);
            v53 = *((_OWORD *)v64 + 82);
            v114 = *((_OWORD *)v64 + 81);
            v115 = v53;
            v116 = *((_OWORD *)v64 + 83);
            v117 = v50;
            v54 = *((_OWORD *)v64 + 76);
            v55 = *((_OWORD *)v64 + 78);
            v110 = *((_OWORD *)v64 + 77);
            v111 = v55;
            v112 = *((_OWORD *)v64 + 79);
            v113 = v52;
            v108 = *((_OWORD *)v64 + 75);
            v109 = v54;
            v56 = *(_OWORD *)(v64 + 1576);
            v131 = *(_OWORD *)(v64 + 1560);
            v132 = v56;
            v133 = v64[1592];
            v57 = *(_OWORD *)(v64 + 1512);
            v127 = *(_OWORD *)(v64 + 1496);
            v128 = v57;
            v58 = *(_OWORD *)(v64 + 1544);
            v129 = *(_OWORD *)(v64 + 1528);
            v130 = v58;
            v59 = *(_OWORD *)(v64 + 1448);
            v123 = *(_OWORD *)(v64 + 1432);
            v124 = v59;
            v60 = *(_OWORD *)(v64 + 1480);
            v125 = *(_OWORD *)(v64 + 1464);
            v126 = v60;
            v61 = *(_OWORD *)(v64 + 1416);
            v121 = *(_OWORD *)(v64 + 1400);
            v122 = v61;
            v68 = *((_OWORD *)v64 + 100);
            v62 = *((_QWORD *)v64 + 202);
            v63 = *((_QWORD *)v64 + 203);
            sub_10004AE58(&v69);
            sub_10004AE58(&v82);
            sub_10004AE58(&v95);
            sub_10004AE58(&v108);
            sub_10004AE58(&v121);
            sub_100041B5C(v31);
            v134[10] = v79;
            v134[11] = v80;
            v134[6] = v75;
            v134[7] = v76;
            v134[9] = v78;
            v134[8] = v77;
            v134[2] = v71;
            v134[3] = v72;
            v134[5] = v74;
            v134[4] = v73;
            v134[1] = v70;
            v134[0] = v69;
            *(_OWORD *)((char *)&v134[22] + 8) = v92;
            *(_OWORD *)((char *)&v134[23] + 8) = v93;
            *(_OWORD *)((char *)&v134[18] + 8) = v88;
            *(_OWORD *)((char *)&v134[19] + 8) = v89;
            *(_OWORD *)((char *)&v134[20] + 8) = v90;
            *(_OWORD *)((char *)&v134[21] + 8) = v91;
            *(_OWORD *)((char *)&v134[16] + 8) = v86;
            *(_OWORD *)((char *)&v134[17] + 8) = v87;
            *(_OWORD *)((char *)&v134[13] + 8) = v83;
            *(_OWORD *)((char *)&v134[14] + 8) = v84;
            *(_OWORD *)((char *)&v134[15] + 8) = v85;
            *(_OWORD *)((char *)&v134[12] + 8) = v82;
            v134[35] = v105;
            v134[36] = v106;
            v134[31] = v101;
            v134[32] = v102;
            v134[34] = v104;
            v134[33] = v103;
            v134[27] = v97;
            v134[28] = v98;
            v134[30] = v100;
            v134[29] = v99;
            v134[26] = v96;
            v134[25] = v95;
            *(_OWORD *)((char *)&v134[47] + 8) = v118;
            *(_OWORD *)((char *)&v134[48] + 8) = v119;
            *(_OWORD *)((char *)&v134[43] + 8) = v114;
            *(_OWORD *)((char *)&v134[44] + 8) = v115;
            *(_OWORD *)((char *)&v134[45] + 8) = v116;
            *(_OWORD *)((char *)&v134[46] + 8) = v117;
            *(_OWORD *)((char *)&v134[39] + 8) = v110;
            *(_OWORD *)((char *)&v134[40] + 8) = v111;
            *(_OWORD *)((char *)&v134[41] + 8) = v112;
            *(_OWORD *)((char *)&v134[42] + 8) = v113;
            *(_OWORD *)((char *)&v134[37] + 8) = v108;
            *(_OWORD *)((char *)&v134[38] + 8) = v109;
            v134[60] = v131;
            v134[61] = v132;
            v134[56] = v127;
            v134[57] = v128;
            v134[59] = v130;
            v134[58] = v129;
            v134[52] = v123;
            v134[53] = v124;
            v134[55] = v126;
            v134[54] = v125;
            v134[51] = v122;
            v134[50] = v121;
            *(_OWORD *)((char *)&v134[72] + 8) = v171;
            *(_OWORD *)((char *)&v134[73] + 8) = v172;
            *(_OWORD *)((char *)&v134[68] + 8) = v167;
            *(_OWORD *)((char *)&v134[69] + 8) = v168;
            *(_OWORD *)((char *)&v134[70] + 8) = v169;
            *(_OWORD *)((char *)&v134[71] + 8) = v170;
            *(_OWORD *)((char *)&v134[64] + 8) = v163;
            *(_OWORD *)((char *)&v134[65] + 8) = v164;
            *(_OWORD *)((char *)&v134[66] + 8) = v165;
            *(_OWORD *)((char *)&v134[67] + 8) = v166;
            *(_OWORD *)((char *)&v134[62] + 8) = v161;
            *(_OWORD *)((char *)&v134[63] + 8) = v162;
            v134[84] = v157;
            v134[85] = v158;
            v134[86] = v159;
            v134[80] = v153;
            v134[81] = v154;
            v134[82] = v155;
            v134[83] = v156;
            v134[76] = v149;
            v134[77] = v150;
            v134[78] = v151;
            LOBYTE(v134[12]) = v81;
            BYTE8(v134[24]) = v94;
            LOBYTE(v134[37]) = v107;
            BYTE8(v134[49]) = v120;
            LOBYTE(v134[62]) = v133;
            BYTE8(v134[74]) = v173;
            LOBYTE(v134[87]) = v160;
            v134[79] = v152;
            v134[75] = v148;
            *(_OWORD *)((char *)&v134[97] + 8) = v145;
            *(_OWORD *)((char *)&v134[98] + 8) = v146;
            *(_OWORD *)((char *)&v134[93] + 8) = v141;
            *(_OWORD *)((char *)&v134[94] + 8) = v142;
            *(_OWORD *)((char *)&v134[95] + 8) = v143;
            *(_OWORD *)((char *)&v134[96] + 8) = v144;
            *(_OWORD *)((char *)&v134[89] + 8) = v137;
            *(_OWORD *)((char *)&v134[90] + 8) = v138;
            *(_OWORD *)((char *)&v134[91] + 8) = v139;
            *(_OWORD *)((char *)&v134[92] + 8) = v140;
            *(_OWORD *)((char *)&v134[87] + 8) = v135;
            *(_OWORD *)((char *)&v134[88] + 8) = v136;
            BYTE8(v134[99]) = v147;
            memcpy(v174, v134, sizeof(v174));
            v175 = v68;
            v176 = v62;
            v177 = v63;
            ASFriendListDisplayMode.id.getter(v174);
            goto LABEL_15;
          }
          sub_100041B5C((uint64_t)v64);
          sub_1000471E4((uint64_t)v180, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
        }
        sub_1000471E4((uint64_t)v179, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
        goto LABEL_21;
      }
    }
    else
    {
      v14 = v65;
    }
    sub_100041B5C((uint64_t)v64);
LABEL_21:
    sub_1000471E4((uint64_t)v178, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
    goto LABEL_14;
  }
  sub_10001BE90((uint64_t)v9, &qword_1008273F8);
  v14 = a4;
LABEL_14:
  sub_1001F85AC(v174);
LABEL_15:
  sub_100045AD4((uint64_t)v174, (uint64_t)v190, &qword_100827400);
  return sub_100045AD4((uint64_t)v190, v14, &qword_100827400);
}

uint64_t sub_10004015C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD *);
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void (*v59)(char *, char *);
  double v60;
  uint64_t v61;
  uint64_t (*v62)(char *, unint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  double v65;
  char *v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  double v76;
  double v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t result;
  uint64_t v93;
  double v94;
  double *v95;
  _BOOL4 v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  __n128 v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  double v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  double *v110;
  BOOL v111;
  double v112;
  double v113;
  _BOOL4 v114;
  double v115;
  _QWORD *v116;
  unint64_t v117;
  double *v118;
  double v119;
  double v120;
  double v121;
  double *v122;
  double v123;
  double v124;
  double v125;
  _BOOL4 v126;
  double v127;
  unint64_t *v128;
  unint64_t *v129;
  double v130;
  unint64_t *v131;
  double v132;
  unint64_t *v133;
  double v134;
  unint64_t *v135;
  double v136;
  unint64_t *v137;
  double v138;
  unint64_t *v139;
  double v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  double v144;
  double v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  void (*v160)(char *, uint64_t);
  _QWORD *v161;
  _QWORD *v162;
  void (*v163)(char *, char *, char *);
  void (*v164)(char *, _QWORD *);
  unsigned int (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  void (*v167)(char *, _QWORD, _QWORD *);
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  double v183;
  char *v184;
  uint64_t v185;
  char *v186;
  __int128 v187;
  uint64_t v188;
  char *v189;
  _QWORD *v190;
  char *v191;
  _QWORD v192[24];
  char v193;
  _QWORD v194[7];
  _QWORD v195[7];
  _QWORD v196[7];
  _BYTE v197[208];

  v190 = a3;
  v185 = a2;
  v170 = a1;
  v174 = a4;
  v188 = sub_100047110((uint64_t *)&unk_100827410);
  v191 = *(char **)(v188 - 8);
  __chkstk_darwin(v188);
  v181 = (char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100821648);
  __chkstk_darwin(v5);
  v182 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v189 = (char *)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v180 = (char *)&v143 - v11;
  v12 = sub_100047110((uint64_t *)&unk_100827420);
  v13 = __chkstk_darwin(v12);
  v171 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v143 - v15;
  v17 = (_QWORD *)type metadata accessor for Calendar.Component(0);
  v18 = (char *)*(v17 - 1);
  __chkstk_darwin(v17);
  v20 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110((uint64_t *)&unk_100828370);
  v22 = __chkstk_darwin(v21);
  v169 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v143 - v24;
  v179 = type metadata accessor for Date(0);
  v186 = *(char **)(v179 - 8);
  v26 = __chkstk_darwin(v179);
  v168 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v184 = (char *)&v143 - v29;
  v30 = __chkstk_darwin(v28);
  *(_QWORD *)&v183 = (char *)&v143 - v31;
  v32 = __chkstk_darwin(v30);
  v172 = (char *)&v143 - v33;
  v34 = __chkstk_darwin(v32);
  v173 = (char *)&v143 - v35;
  __chkstk_darwin(v34);
  v37 = (unint64_t)&v143 - v36;
  if (qword_10081D548 != -1)
    goto LABEL_159;
LABEL_2:
  *(_QWORD *)&v187 = type metadata accessor for Calendar(0);
  v38 = sub_10003CE9C(v187, (uint64_t)qword_100869D10);
  v177 = v37;
  Calendar.startOfDay(for:)(v190);
  v167 = (void (*)(char *, _QWORD, _QWORD *))*((_QWORD *)v18 + 13);
  v167(v20, enum case for Calendar.Component.day(_:), v17);
  if (__OFSUB__(0, v185))
  {
    __break(1u);
LABEL_161:
    swift_once(&qword_10081D558, sub_100006F7C);
    goto LABEL_6;
  }
  v175 = v20;
  v176 = v17;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v20, -v185, v190, 0);
  v39 = (void (*)(char *, _QWORD *))*((_QWORD *)v18 + 1);
  v39(v175, v176);
  v20 = v186;
  v40 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v186 + 6);
  v18 = (char *)v179;
  if (v40(v25, 1, v179) == 1)
  {
    (*((void (**)(unint64_t, char *))v20 + 1))(v177, v18);
    sub_10001BE90((uint64_t)v25, (uint64_t *)&unk_100828370);
    goto LABEL_17;
  }
  v164 = v39;
  v165 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v40;
  v41 = v173;
  v163 = (void (*)(char *, char *, char *))*((_QWORD *)v20 + 4);
  v163(v173, v25, v18);
  v25 = v172;
  v166 = v38;
  Calendar.startOfDay(for:)(v41);
  if (qword_10081D558 != -1)
    goto LABEL_161;
LABEL_6:
  sub_10003CE9C(v187, (uint64_t)qword_100869D40);
  v42 = v177;
  v43 = sub_10004523C(v25, v177);
  v44 = v43;
  if (*(_QWORD *)(v43 + 16) == v185)
  {
    v45 = objc_msgSend(*((id *)v178 + 4), "workoutsByDay");
    v46 = sub_100047110((uint64_t *)&unk_100827430);
    v47 = sub_1000083D8(&qword_100822030, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
    v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v45, v7, v46, v47);

    swift_bridgeObjectRetain(v48);
    v178 = (char *)v44;
    v49 = sub_1001F86E8(v44, v48, v170);
    swift_bridgeObjectRelease_n(v48, 2);
    v50 = v49[2];
    v190 = v49;
    if (v50)
    {
      swift_bridgeObjectRetain(v49);
      v51 = v49 + 6;
      v52 = _swiftEmptyArrayStorage;
      do
      {
        if ((*v51 & 1) == 0)
        {
          v187 = *((_OWORD *)v51 - 1);
          if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
            v52 = sub_10013FD18(0, v52[2] + 1, 1, v52);
          v54 = v52[2];
          v53 = v52[3];
          if (v54 >= v53 >> 1)
            v52 = sub_10013FD18((_QWORD *)(v53 > 1), v54 + 1, 1, v52);
          v52[2] = v54 + 1;
          *(_OWORD *)&v52[2 * v54 + 4] = v187;
          v49 = v190;
          v20 = v186;
        }
        v51 += 24;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      v52 = _swiftEmptyArrayStorage;
    }
    v17 = v171;
    v18 = v189;
    if (v52[2])
    {
      v60 = sub_100184420((uint64_t)v52);
      v151 = v61;
      v152 = v60;
      swift_bridgeObjectRelease(v52);
    }
    else
    {
      swift_bridgeObjectRelease(v52);
      v151 = 0;
      v152 = 0.0;
    }
    v62 = (uint64_t (*)(char *, unint64_t, uint64_t))*((_QWORD *)v20 + 2);
    v63 = v179;
    v62(*(char **)&v183, (unint64_t)v172, v179);
    v64 = v62(v184, v177, v63);
    v65 = Date.timeIntervalSinceReferenceDate.getter(v64);
    v66 = v184;
    v68 = Date.timeIntervalSinceReferenceDate.getter(v67);
    sub_10003D1C0(v185, (uint64_t)v194, v65, v68);
    v170 = (char *)v194[0];
    v150 = v194[1];
    v69 = v194[2];
    v70 = *(double *)&v194[3];
    v71 = *(double *)&v194[4];
    v72 = *(double *)&v194[5];
    v73 = *(double *)&v194[6];
    v74 = (void (*)(char *, uint64_t))*((_QWORD *)v20 + 1);
    v74(v66, v63);
    v160 = v74;
    v74(*(char **)&v183, v63);
    sub_10003D1C0(7, (uint64_t)v195, 0.0, 6.0);
    v162 = (_QWORD *)v195[0];
    v149 = v195[1];
    v75 = v195[2];
    v76 = *(double *)&v195[3];
    v77 = *(double *)&v195[4];
    v157 = *(double *)&v195[6];
    v158 = *(double *)&v195[5];
    sub_10003D1C0(7, (uint64_t)v196, 0.0, 6.0);
    v184 = 0;
    v78 = 0;
    v161 = (_QWORD *)v196[0];
    v148 = v196[1];
    v147 = v196[2];
    v155 = *(double *)&v196[4];
    v156 = *(double *)&v196[3];
    v153 = *(double *)&v196[6];
    v154 = *(double *)&v196[5];
    v20 = (char *)*((_QWORD *)v178 + 2);
    v186 = (char *)(v190 + 4);
    v146 = enum case for Calendar.Component.weekday(_:);
    v159 = 0.0;
    *(_QWORD *)&v187 = v7;
    v37 = (unint64_t)v182;
    v185 = (uint64_t)v20;
LABEL_24:
    v25 = v178;
    if (v78 == v20)
    {
LABEL_25:
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v37, 1, 1, v7);
      v79 = v20;
LABEL_29:
      sub_10001BE90(v37, &qword_100821648);
      v80 = (char *)v188;
      (*((void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))v191 + 7))(v17, 1, 1, v188);
      goto LABEL_32;
    }
    while (1)
    {
      if (((unint64_t)v78 & 0x8000000000000000) != 0)
        goto LABEL_156;
      if ((unint64_t)v78 >= *((_QWORD *)v25 + 2))
        goto LABEL_157;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 16))(v37, &v25[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * (_QWORD)v78], v7);
      v79 = v78 + 1;
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v37, 1, v7) == 1)
        goto LABEL_29;
      v183 = *(double *)&v79;
      v81 = v16;
      v16 = v191;
      v18 = *(char **)(v8 + 32);
      v20 = (char *)v188;
      v82 = v180;
      ((void (*)(char *, unint64_t, uint64_t))v18)(v180, v37, v7);
      v37 = (unint64_t)&v181[*((int *)v20 + 12)];
      ((void (*)(unint64_t, char *, uint64_t))v18)(v37, v82, v7);
      v25 = v184 + 1;
      if (__OFADD__(v184, 1))
        goto LABEL_158;
      v83 = (char *)v17 + *((int *)v20 + 12);
      *v17 = v184;
      ((void (*)(char *, unint64_t, uint64_t))v18)(v83, v37, v7);
      (*((void (**)(_QWORD *, _QWORD, uint64_t, char *))v16 + 7))(v17, 0, 1, v20);
      v184 = v25;
      v18 = v189;
      v16 = v81;
      v80 = v20;
      v25 = v178;
      v37 = (unint64_t)v182;
      *(double *)&v79 = v183;
LABEL_32:
      sub_100045AD4((uint64_t)v17, (uint64_t)v16, (uint64_t *)&unk_100827420);
      if ((*((unsigned int (**)(char *, uint64_t, char *))v191 + 6))(v16, 1, v80) == 1)
      {
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v190);
        v141 = v179;
        v142 = v160;
        v160(v172, v179);
        v142(v173, v141);
        v142((char *)v177, v141);
        *(double *)v192 = v152;
        v192[1] = v151;
        v192[2] = v170;
        v192[3] = v150;
        v192[4] = v69;
        *(double *)&v192[5] = v70;
        *(double *)&v192[6] = v71;
        *(double *)&v192[7] = v72;
        *(double *)&v192[8] = v73;
        v192[9] = v162;
        v192[10] = v149;
        v192[11] = v75;
        *(double *)&v192[12] = v76;
        *(double *)&v192[13] = v77;
        *(double *)&v192[14] = v158;
        *(double *)&v192[15] = v157;
        v192[16] = v161;
        v192[17] = v148;
        v192[18] = v147;
        *(double *)&v192[19] = v156;
        *(double *)&v192[20] = v155;
        *(double *)&v192[21] = v154;
        *(double *)&v192[22] = v153;
        *(double *)&v192[23] = v159;
        v193 = 3;
        ASFriendListDisplayMode.id.getter(v192);
        goto LABEL_153;
      }
      v20 = v79;
      v84 = v37;
      v37 = *(_QWORD *)v16;
      v85 = &v16[*((int *)v80 + 12)];
      v7 = v187;
      (*(void (**)(char *, char *, _QWORD))(v8 + 32))(v18, v85, v187);
      if ((v37 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        swift_once(&qword_10081D548, sub_100005A80);
        goto LABEL_2;
      }
      if (v37 >= v190[2])
        goto LABEL_155;
      v86 = &v186[24 * v37];
      if ((v86[16] & 1) != 0)
      {
        v18 = v189;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v189, v7);
        v37 = v84;
      }
      else
      {
        v183 = v77;
        v87 = v76;
        v88 = v75;
        v89 = v69;
        v90 = *(double *)v86;
        v91 = *(double *)v86;
        if (v37 >= *((_QWORD *)v170 + 2))
        {
          v93 = (uint64_t)v169;
        }
        else
        {
          v144 = *((double *)v86 + 1);
          v145 = v90;
          result = swift_isUniquelyReferenced_nonNull_native(v170);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1004DEE58(v170);
            v170 = (char *)result;
          }
          v93 = (uint64_t)v169;
          if (v37 >= *((_QWORD *)v170 + 2))
          {
            __break(1u);
            goto LABEL_163;
          }
          v94 = v144;
          v95 = (double *)&v170[24 * v37];
          v95[4] = v145;
          v95[5] = v94;
          *((_BYTE *)v95 + 48) = 0;
          if (v70 < v91)
          {
            v70 = v91;
            v71 = v94;
          }
          v96 = v72 < 0.0;
          if (v72 > v91)
            v96 = 1;
          if (v96)
          {
            v72 = v91;
            v73 = v94;
          }
        }
        v18 = v189;
        Calendar.date(from:)(v189);
        if (v165(v93, 1, v179) != 1)
        {
          v97 = v168;
          v163(v168, (char *)v93, (char *)v179);
          v98 = v175;
          v99 = v176;
          v167(v175, v146, v176);
          v100 = Calendar.component(_:from:)(v98, v97);
          v164(v98, v99);
          v102 = v100 - 1;
          if (v102 > 6)
          {
            v17 = v171;
            v37 = v84;
            v69 = v89;
            v75 = v88;
            v76 = v87;
            v77 = v183;
            v78 = v20;
            v20 = (char *)v185;
            goto LABEL_151;
          }
          result = (uint64_t)v162;
          v103 = v162[2];
          v17 = v171;
          if (v102 >= v103)
            goto LABEL_73;
          v104 = &v162[3 * v102];
          if ((v104[6] & 1) != 0)
          {
            v159 = 1.0;
            v105 = 0.0;
          }
          else
          {
            v106 = (double *)(v104 + 4);
            v159 = v106[1];
            v105 = *v106;
          }
          v145 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native(v162) & 1) == 0)
            v162 = sub_1004DEE58(v162);
          result = (uint64_t)v162;
          v103 = v162[2];
          if (v102 >= v103)
          {
LABEL_163:
            __break(1u);
          }
          else
          {
            v107 = v159;
            v108 = v159 + 1.0;
            v109 = (v145 * v107 + v91) / (v107 + 1.0);
            v110 = (double *)&v162[3 * v102];
            v110[4] = v109;
            v110[5] = v107 + 1.0;
            *((_BYTE *)v110 + 48) = 0;
            v111 = v87 < v109;
            if (v87 < v109)
              v87 = v109;
            v112 = v183;
            if (v111)
              v112 = v108;
            v183 = v112;
            v113 = v158;
            v114 = v158 < 0.0;
            if (v109 < v158)
              v114 = 1;
            if (v114)
              v113 = v109;
            v115 = v157;
            if (v114)
              v115 = v108;
            v157 = v115;
            v158 = v113;
            v18 = v189;
LABEL_73:
            v116 = v161;
            v117 = v161[2];
            v162 = (_QWORD *)result;
            if (v102 >= v117)
            {
              v69 = v89;
              v37 = v84;
              goto LABEL_93;
            }
            v118 = (double *)&v161[3 * v102];
            if (((_BYTE)v118[6] & 1) != 0)
            {
              v119 = 1.0;
              v120 = 0.0;
            }
            else
            {
              v120 = v118[4];
              v119 = v118[5];
            }
            v159 = v120;
            if ((swift_isUniquelyReferenced_nonNull_native(v161) & 1) == 0)
              v161 = sub_1004DEE58(v161);
            v116 = v161;
            result = (uint64_t)v162;
            v117 = v161[2];
            if (v102 < v117)
            {
              v121 = (v159 * v119 + 1.0) / (v119 + 1.0);
              v122 = (double *)&v161[3 * v102];
              v122[4] = v121;
              v122[5] = v119 + 1.0;
              *((_BYTE *)v122 + 48) = 0;
              if (v156 >= v121)
                v123 = v156;
              else
                v123 = v121;
              v124 = v155;
              if (v156 < v121)
                v124 = v119 + 1.0;
              v155 = v124;
              v156 = v123;
              v125 = v154;
              v126 = v154 < 0.0;
              if (v121 < v154)
                v126 = 1;
              if (v126)
                v125 = v121;
              v127 = v153;
              if (v126)
                v127 = v119 + 1.0;
              v153 = v127;
              v154 = v125;
              v103 = *(_QWORD *)(result + 16);
              v18 = v189;
              v37 = v84;
              v69 = v89;
LABEL_93:
              v161 = v116;
              v128 = v116 + 4;
              v101.n128_u64[0] = 0;
              v159 = 0.0;
              v75 = v88;
              v78 = v20;
              if (v103)
              {
                v76 = v87;
                v20 = (char *)v185;
                if ((*(_BYTE *)(result + 48) & 1) != 0)
                {
                  v77 = v183;
                }
                else
                {
                  v77 = v183;
                  if (v117)
                  {
                    if ((v128[2] & 1) == 0)
                    {
                      v101.n128_u64[0] = *v128;
                      if (*(double *)v128 > 0.0)
                      {
                        v101.n128_f64[0] = *(double *)(result + 32) / v101.n128_f64[0];
                        if (v101.n128_f64[0] <= 0.0)
                          v101.n128_f64[0] = 0.0;
                        v159 = v101.n128_f64[0];
                      }
                    }
                  }
                }
              }
              else
              {
                v76 = v87;
                v77 = v183;
                v20 = (char *)v185;
              }
              if (v103 > 1 && (*(_BYTE *)(result + 72) & 1) == 0 && v117 > 1)
              {
                v129 = v128 + 3;
                if ((v128[5] & 1) == 0)
                {
                  v101.n128_u64[0] = *v129;
                  if (*(double *)v129 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 56) / v101.n128_f64[0];
                    v130 = v159;
                    if (v101.n128_f64[0] > v159)
                      v130 = v101.n128_f64[0];
                    v159 = v130;
                  }
                }
              }
              if (v103 > 2 && (*(_BYTE *)(result + 96) & 1) == 0 && v117 > 2)
              {
                v131 = v128 + 6;
                if ((v128[8] & 1) == 0)
                {
                  v101.n128_u64[0] = *v131;
                  if (*(double *)v131 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 80) / v101.n128_f64[0];
                    v132 = v159;
                    if (v101.n128_f64[0] > v159)
                      v132 = v101.n128_f64[0];
                    v159 = v132;
                  }
                }
              }
              if (v103 > 3 && (*(_BYTE *)(result + 120) & 1) == 0 && v117 > 3)
              {
                v133 = v128 + 9;
                if ((v128[11] & 1) == 0)
                {
                  v101.n128_u64[0] = *v133;
                  if (*(double *)v133 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 104) / v101.n128_f64[0];
                    v134 = v159;
                    if (v101.n128_f64[0] > v159)
                      v134 = v101.n128_f64[0];
                    v159 = v134;
                  }
                }
              }
              if (v103 > 4 && (*(_BYTE *)(result + 144) & 1) == 0 && v117 > 4)
              {
                v135 = v128 + 12;
                if ((v128[14] & 1) == 0)
                {
                  v101.n128_u64[0] = *v135;
                  if (*(double *)v135 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 128) / v101.n128_f64[0];
                    v136 = v159;
                    if (v101.n128_f64[0] > v159)
                      v136 = v101.n128_f64[0];
                    v159 = v136;
                  }
                }
              }
              if (v103 > 5 && (*(_BYTE *)(result + 168) & 1) == 0 && v117 > 5)
              {
                v137 = v128 + 15;
                if ((v128[17] & 1) == 0)
                {
                  v101.n128_u64[0] = *v137;
                  if (*(double *)v137 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 152) / v101.n128_f64[0];
                    v138 = v159;
                    if (v101.n128_f64[0] > v159)
                      v138 = v101.n128_f64[0];
                    v159 = v138;
                  }
                }
              }
              if (v103 > 6 && (*(_BYTE *)(result + 192) & 1) == 0 && v117 > 6)
              {
                v139 = v128 + 18;
                if ((v128[20] & 1) == 0)
                {
                  v101.n128_u64[0] = *v139;
                  if (*(double *)v139 > 0.0)
                  {
                    v101.n128_f64[0] = *(double *)(result + 176) / v101.n128_f64[0];
                    v140 = v159;
                    if (v101.n128_f64[0] > v159)
                      v140 = v101.n128_f64[0];
                    v159 = v140;
                  }
                }
              }
LABEL_151:
              ((void (*)(char *, uint64_t, __n128))v160)(v168, v179, v101);
              (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
              goto LABEL_24;
            }
          }
          __break(1u);
          return result;
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
        sub_10001BE90(v93, (uint64_t *)&unk_100828370);
        v17 = v171;
        v37 = v84;
        v69 = v89;
        v75 = v88;
        v76 = v87;
        v77 = v183;
      }
      v78 = v20;
      v20 = (char *)v185;
      if (v78 == (char *)v185)
        goto LABEL_25;
    }
  }
  v55 = v25;
  v56 = swift_bridgeObjectRelease(v43);
  v57 = static os_log_type_t.error.getter(v56);
  v58 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Component count doesn't match number of days. Investigate!", 58, 2, _swiftEmptyArrayStorage);

  v59 = (void (*)(char *, char *))*((_QWORD *)v20 + 1);
  v59(v55, v18);
  v59(v173, v18);
  v59((char *)v42, v18);
LABEL_17:
  sub_1001F85CC((uint64_t)v192);
LABEL_153:
  sub_100045AD4((uint64_t)v192, (uint64_t)v197, &qword_100827408);
  return sub_100045AD4((uint64_t)v197, v174, &qword_100827408);
}

unint64_t sub_1000412FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id a3@<X2>, double *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  void *v33;
  BOOL v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  double v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  double v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  double *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  __int128 v80;
  char v81[24];
  _QWORD aBlock[5];
  uint64_t v83;

  v70 = a4;
  v7 = type metadata accessor for DateInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  *(_QWORD *)&v80 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110((uint64_t *)&unk_100827440);
  result = __chkstk_darwin(v10);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (*(_QWORD *)(a2 + 16))
  {
    result = sub_100439544(a1);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
      result = swift_bridgeObjectRetain(v16);
    }
    else
    {
      v16 = (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  else
  {
    v16 = (uint64_t)_swiftEmptyArrayStorage;
  }
  aBlock[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_8;
LABEL_23:
    swift_bridgeObjectRelease(v16);
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_63;
LABEL_24:
    if ((v14 & 0x4000000000000000) == 0)
    {
      v29 = *(_QWORD *)(v14 + 16);
      swift_retain(v14);
      goto LABEL_26;
    }
    goto LABEL_63;
  }
  if (v16 < 0)
    v28 = v16;
  else
    v28 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v17 = _CocoaArrayWrapper.endIndex.getter(v28);
  result = swift_bridgeObjectRelease(v16);
  if (!v17)
    goto LABEL_23;
LABEL_8:
  if (v17 < 1)
  {
    __break(1u);
    return result;
  }
  v18 = 0;
  v19 = v16 & 0xC000000000000001;
  v78 = (_QWORD *)v17;
  v79 = a3;
  do
  {
    if (v19)
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
    else
      v25 = *(id *)(v16 + 8 * v18 + 32);
    v26 = v25;
    v27 = objc_msgSend(v25, "workoutActivityType");
    if (v27 == a3)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v20 = v19;
      v21 = v16;
      v22 = *(_QWORD *)(aBlock[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = v22;
      v16 = v21;
      v19 = v20;
      v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v26);
      specialized ContiguousArray._endMutation()(v24);
      v17 = (uint64_t)v78;
      a3 = v79;
    }
    else
    {

    }
    ++v18;
  }
  while (v17 != v18);
  swift_bridgeObjectRelease(v16);
  v14 = aBlock[0];
  if ((aBlock[0] & 0x8000000000000000) == 0)
    goto LABEL_24;
LABEL_63:
  while (1)
  {
    v68 = swift_retain(v14);
    v29 = _CocoaArrayWrapper.endIndex.getter(v68);
LABEL_26:
    if (!v29)
      break;
    v30 = 0;
    v74 = v14 & 0xC000000000000001;
    v71 = (_QWORD *)(v14 + 32);
    v31 = _swiftEmptyArrayStorage;
    v72 = (_QWORD *)v14;
    v73 = v29;
    while (1)
    {
      v32 = v74 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v14) : (id)v71[(_QWORD)v30];
      v33 = v32;
      v34 = __OFADD__(v30, 1);
      v30 = (char *)v30 + 1;
      if (v34)
        break;
      v35 = objc_msgSend(v32, "totalDistance");
      if (v35)
      {
        v75 = v35;
        v78 = v31;
        v79 = v30;
        v36 = v33;
        v37 = swift_allocObject(&unk_10078E020, 24, 7);
        *(_QWORD *)(v37 + 16) = _swiftEmptyArrayStorage;
        aBlock[4] = sub_1001F8A38;
        v83 = v37;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100591260;
        aBlock[3] = &unk_10078E038;
        v38 = _Block_copy(aBlock);
        v39 = v83;
        swift_retain(v37);
        swift_release(v39);
        v76 = v36;
        objc_msgSend(v36, "_enumerateActiveTimePeriods:", v38);
        _Block_release(v38);
        swift_beginAccess(v37 + 16, v81, 0, 0);
        v40 = *(_QWORD *)(v37 + 16);
        swift_bridgeObjectRetain(v40);
        swift_release(v37);
        v41 = *(_QWORD *)(v40 + 16);
        v77 = v40;
        if (v41)
        {
          v42 = v40 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
          swift_bridgeObjectRetain(v40);
          v43 = *(_QWORD *)(v8 + 72);
          v44 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
          v45 = 0.0;
          while (1)
          {
            v44(v13, v42, v7);
            v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
            v46(v13, 0, 1, v7);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
              break;
            v47 = v80;
            v48 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(v8 + 32))(v80, v13, v7);
            v45 = v45 + DateInterval.duration.getter(v48);
            (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v47, v7);
            v42 += v43;
            if (!--v41)
            {
              v31 = v78;
              v14 = (unint64_t)v72;
              goto LABEL_41;
            }
          }
          v31 = v78;
          v14 = (unint64_t)v72;
          v29 = v73;
        }
        else
        {
          swift_bridgeObjectRetain(v40);
          v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
          v45 = 0.0;
          v31 = v78;
LABEL_41:
          v29 = v73;
          v46(v13, 1, 1, v7);
        }
        swift_bridgeObjectRelease_n(v77, 2);
        v30 = v79;
        if (v45 <= 0.0)
        {

        }
        else
        {
          v49 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnitWithMetricPrefix:", 9);
          v50 = v75;
          objc_msgSend(v75, "doubleValueForUnit:", v49);
          v52 = v51;

          if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
            v31 = sub_10013FD18(0, v31[2] + 1, 1, v31);
          v54 = v31[2];
          v53 = v31[3];
          if (v54 >= v53 >> 1)
            v31 = sub_10013FD18((_QWORD *)(v53 > 1), v54 + 1, 1, v31);
          v31[2] = v54 + 1;
          v55 = (double *)&v31[2 * v54];
          v55[4] = v52 / (v45 / 60.0 / 60.0);
          v55[5] = v45;
          v30 = v79;
        }
      }
      else
      {

      }
      if (v30 == (void *)v29)
        goto LABEL_51;
    }
    __break(1u);
  }
  v31 = _swiftEmptyArrayStorage;
LABEL_51:
  swift_release_n(v14, 2);
  v56 = v31[2];
  if (v56)
  {
    swift_bridgeObjectRetain(v31);
    v57 = sub_10013FD18(0, 1, 1, _swiftEmptyArrayStorage);
    v58 = 0;
    v59 = v57[2];
    do
    {
      v60 = *(_OWORD *)&v31[2 * v58 + 4];
      v61 = v57[3];
      if (v59 >= v61 >> 1)
      {
        v80 = *(_OWORD *)&v31[2 * v58 + 4];
        v62 = sub_10013FD18((_QWORD *)(v61 > 1), v59 + 1, 1, v57);
        v60 = v80;
        v57 = v62;
      }
      ++v58;
      v57[2] = v59 + 1;
      *(_OWORD *)&v57[2 * v59++ + 4] = v60;
    }
    while (v56 != v58);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v57 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v31);
  v63 = v57[2];
  if (v63)
  {
    v64 = sub_100184420((uint64_t)v57);
    v66 = v65;
    result = swift_bridgeObjectRelease(v57);
  }
  else
  {
    result = swift_bridgeObjectRelease(v57);
    v64 = 0.0;
    v66 = 0;
  }
  v67 = v70;
  *v70 = v64;
  *((_QWORD *)v67 + 1) = v66;
  *((_BYTE *)v67 + 16) = v63 == 0;
  return result;
}

uint64_t sub_1000419C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000419DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000419DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008214C8);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100041B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100556ED4);
}

uint64_t sub_100041B5C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivityStatisticsCollection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100041B98(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[42]);
  swift_bridgeObjectRelease(a1[52]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[59]);
  swift_bridgeObjectRelease(a1[60]);
  swift_bridgeObjectRelease(a1[66]);
  swift_bridgeObjectRelease(a1[67]);
  swift_bridgeObjectRelease(a1[77]);
  swift_bridgeObjectRelease(a1[78]);
  swift_bridgeObjectRelease(a1[84]);
  swift_bridgeObjectRelease(a1[85]);
  swift_bridgeObjectRelease(a1[91]);
  swift_bridgeObjectRelease(a1[92]);
  swift_bridgeObjectRelease(a1[102]);
  swift_bridgeObjectRelease(a1[103]);
  swift_bridgeObjectRelease(a1[109]);
  swift_bridgeObjectRelease(a1[110]);
  swift_bridgeObjectRelease(a1[116]);
  swift_bridgeObjectRelease(a1[117]);
  swift_bridgeObjectRelease(a1[127]);
  swift_bridgeObjectRelease(a1[128]);
  swift_bridgeObjectRelease(a1[134]);
  swift_bridgeObjectRelease(a1[135]);
  swift_bridgeObjectRelease(a1[141]);
  swift_bridgeObjectRelease(a1[142]);
  swift_bridgeObjectRelease(a1[152]);
  swift_bridgeObjectRelease(a1[153]);
  swift_bridgeObjectRelease(a1[159]);
  swift_bridgeObjectRelease(a1[160]);
  swift_bridgeObjectRelease(a1[166]);
  swift_bridgeObjectRelease(a1[167]);
  swift_bridgeObjectRelease(a1[177]);
  swift_bridgeObjectRelease(a1[178]);
  swift_bridgeObjectRelease(a1[184]);
  swift_bridgeObjectRelease(a1[185]);
  swift_bridgeObjectRelease(a1[191]);
  swift_bridgeObjectRelease(a1[192]);
  v4 = (char *)a1 + *(int *)(a2 + 64);
  v5 = type metadata accessor for DateComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_100041D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivityStatisticsCollection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ActivityStatisticsCollection(uint64_t a1)
{
  uint64_t result;

  result = qword_10083A0A0;
  if (!qword_10083A0A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityStatisticsCollection);
  return result;
}

uint64_t sub_100041E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t (**v38)(_QWORD, _QWORD, _QWORD);
  id v39;
  uint64_t result;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  NSDate v53;
  Class isa;
  Class v55;
  id v56;
  uint64_t v57;
  dispatch_semaphore_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(unint64_t, char *, uint64_t);
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  id v76;
  NSString v77;
  id v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  unint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  _BYTE *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t (**v115)(_QWORD, _QWORD, _QWORD);
  id v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[5];
  uint64_t v125;
  _BYTE v126[200];
  _BYTE v127[208];
  char *v128;

  v110 = a3;
  v117 = a2;
  v118 = a1;
  v3 = type metadata accessor for DispatchTimeInterval(0);
  v105 = *(_QWORD *)(v3 - 8);
  v106 = v3;
  __chkstk_darwin(v3);
  v104 = (char **)((char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = type metadata accessor for DispatchTime(0);
  v103 = *(_QWORD *)(v108 - 8);
  v5 = __chkstk_darwin(v108);
  v102 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v107 = (char *)&v99 - v7;
  v8 = (_QWORD *)type metadata accessor for Calendar.Component(0);
  v115 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*(v8 - 1);
  v116 = v8;
  __chkstk_darwin(v8);
  v114 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v10);
  v113 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for Date(0);
  v120 = *(_QWORD *)(v122 - 8);
  v12 = *(_QWORD *)(v120 + 64);
  v13 = __chkstk_darwin(v122);
  v100 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v99 = (char *)&v99 - v15;
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v99 - v17;
  v18 = __chkstk_darwin(v16);
  v121 = (char *)&v99 - v19;
  __chkstk_darwin(v18);
  v128 = (char *)&v99 - v20;
  v21 = sub_100047110(&qword_100823FC8);
  __chkstk_darwin(v21);
  v23 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v24);
  v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DateComponents(0);
  v111 = *(_QWORD *)(v27 - 8);
  v112 = v27;
  __chkstk_darwin(v27);
  v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchPredicate(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char **)((char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *v33 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v31 + 104))(v33, enum case for DispatchPredicate.notOnQueue(_:), v30);
  v34 = _dispatchPreconditionTest(_:)(v33);
  (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v33, v30);
  if ((v34 & 1) != 0)
  {
    v30 = type metadata accessor for Calendar(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v26, 1, 1, v30);
    v35 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v23, 1, 1, v35);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v26, v23, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    v119 = v29;
    DateComponents.day.setter(1, 0);
    if (qword_10081D548 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10081D548, sub_100005A80);
LABEL_3:
  sub_10003CE9C(v30, (uint64_t)qword_100869D10);
  v36 = v128;
  Calendar.startOfDay(for:)(v117);
  v37 = v114;
  v38 = v115;
  v39 = v116;
  result = ((uint64_t (**)(char *, _QWORD, id))v115)[13](v114, enum case for Calendar.Component.day(_:), v116);
  v41 = -v118;
  v42 = v121;
  v43 = v122;
  if (!__OFSUB__(0, v118))
  {
    v118 = v12;
    v44 = (uint64_t)v113;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v37, v41, v36, 0);
    ((void (*)(char *, id))v38[1])(v37, v39);
    v45 = v120;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v44, 1, v43) == 1)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v43);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v119, v112);
      sub_10001BE90(v44, (uint64_t *)&unk_100828370);
    }
    else
    {
      v46 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
      v46(v42, v44, v43);
      v47 = v109;
      Calendar.startOfDay(for:)(v42);
      v48 = sub_10001E724(0, (unint64_t *)&unk_10082E680, HKCategoryType_ptr);
      v49 = objc_msgSend((id)swift_getObjCClassFromMetadata(v48), "categoryTypeForIdentifier:", HKCategoryTypeIdentifierAppleStandHour);
      if (v49)
      {
        v50 = v49;
        v51 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
        v52 = v50;
        v53.super.isa = Date._bridgeToObjectiveC()().super.isa;
        v114 = (char *)v46;
        isa = v53.super.isa;
        v55 = DateComponents._bridgeToObjectiveC()().super.isa;
        v56 = objc_msgSend(v51, "initWithSampleType:samplePredicate:options:anchorDate:intervalComponents:", v52, 0, 64, isa, v55);
        v57 = v45;
        v115 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v56;
        v116 = v52;

        v58 = dispatch_semaphore_create(0);
        v117 = swift_allocObject(&unk_10078E070, 209, 7);
        v59 = v117 + 16;
        sub_1001F85CC((uint64_t)v126);
        v113 = (char *)v59;
        sub_100045AD4((uint64_t)v126, v59, &qword_100827408);
        v60 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
        v61 = v99;
        v60(v99, v47, v43);
        v62 = v100;
        v60(v100, v128, v43);
        v63 = *(unsigned __int8 *)(v57 + 80);
        v64 = v43;
        v65 = (v63 + 24) & ~v63;
        v66 = (v118 + v63 + v65) & ~v63;
        v67 = (v118 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        v68 = swift_allocObject(&unk_10078E0E8, v67 + 8, v63 | 7);
        *(_QWORD *)(v68 + 16) = v58;
        v69 = v61;
        v70 = (void (*)(unint64_t, char *, uint64_t))v114;
        ((void (*)(uint64_t, char *, uint64_t))v114)(v68 + v65, v69, v64);
        v70(v68 + v66, v62, v64);
        v71 = v117;
        *(_QWORD *)(v68 + v67) = v117;
        v124[4] = sub_10002C998;
        v125 = v68;
        v124[0] = _NSConcreteStackBlock;
        v124[1] = 1107296256;
        v124[2] = sub_10004CD48;
        v124[3] = &unk_10078E100;
        v72 = _Block_copy(v124);
        v73 = v125;
        v74 = v58;
        swift_retain(v71);
        swift_release(v73);
        v75 = v115;
        objc_msgSend(v115, "setInitialResultsHandler:", v72);
        _Block_release(v72);
        v76 = v75;
        v77 = String._bridgeToObjectiveC()();
        objc_msgSend(v76, "setDebugIdentifier:", v77);

        v78 = objc_msgSend(*(id *)(v101 + 16), "executeQuery:", v76);
        v79 = v102;
        static DispatchTime.now()(v78);
        v81 = v104;
        v80 = v105;
        *v104 = 15;
        v82 = v106;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v80 + 104))(v81, enum case for DispatchTimeInterval.seconds(_:), v106);
        v83 = v107;
        + infix(_:_:)(v79, v81);
        (*(void (**)(_QWORD *, uint64_t))(v80 + 8))(v81, v82);
        v84 = *(void (**)(char *, uint64_t))(v103 + 8);
        v85 = v79;
        v86 = v108;
        v84(v85, v108);
        v118 = (uint64_t)v74;
        v87 = OS_dispatch_semaphore.wait(timeout:)(v83);
        v88 = static DispatchTimeoutResult.== infix(_:_:)(v87 & 1, 1);
        if ((v88 & 1) != 0)
        {
          v89 = static os_log_type_t.default.getter(v88);
          v90 = HKLogActivity;
          os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Semaphore wait timed out fetching statistics for stand hours", 60, 2, _swiftEmptyArrayStorage);

          v91 = sub_1001F8BE4();
          swift_allocError(&type metadata for ActivityStatisticsBuilder.BuilderError, v91, 0, 0);
          swift_willThrow();

          v84(v83, v86);
          v92 = *(void (**)(char *, uint64_t))(v120 + 8);
          v93 = v122;
          v92(v109, v122);
          v92(v121, v93);
          v92(v128, v93);
          (*(void (**)(char *, uint64_t))(v111 + 8))(v119, v112);
          return swift_release(v117);
        }

        v84(v83, v86);
        v96 = *(void (**)(char *, uint64_t))(v120 + 8);
        v97 = v122;
        v96(v109, v122);
        v96(v121, v97);
        v96(v128, v97);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v119, v112);
        v98 = (uint64_t)v113;
        swift_beginAccess(v113, &v123, 0, 0);
        sub_100045AD4(v98, (uint64_t)v124, &qword_100827408);
        sub_1000471E4((uint64_t)v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100043950);
        swift_release(v117);
        v95 = v124;
        goto LABEL_11;
      }
      v94 = *(void (**)(char *, uint64_t))(v45 + 8);
      v94(v47, v43);
      v94(v42, v43);
      v94(v128, v43);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v119, v112);
    }
    sub_1001F85CC((uint64_t)v126);
    v95 = v126;
LABEL_11:
    sub_100045AD4((uint64_t)v95, (uint64_t)v127, &qword_100827408);
    return sub_100045AD4((uint64_t)v127, v110, &qword_100827408);
  }
  __break(1u);
  return result;
}

uint64_t sub_100042898@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, NSObject *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, void *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t (**v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;
  void ***v51;
  char *v52;
  char *v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  Class isa;
  id v64;
  id v65;
  uint64_t v66;
  void *v67;
  void *v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  Swift::String v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  unint64_t v88;
  uint64_t (**v89)(_QWORD, _QWORD, _QWORD);
  Swift::String v90;
  id v91;
  id v92;
  uint64_t v93;
  void *v94;
  void *v95;
  Swift::String v96;
  void **v97;
  unint64_t v98;
  id v99;
  id v100;
  id v101;
  Class v102;
  Class v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  dispatch_semaphore_t v118;
  char *v119;
  void (*v120)(unint64_t, char *, uint64_t);
  unint64_t v121;
  unint64_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t (**v125)(_QWORD, _QWORD, _QWORD);
  unint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  NSObject *v130;
  id v131;
  id v132;
  NSString v133;
  id v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  id v149;
  id v150;
  unint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  id v160;
  void (*v161)(char *, char *, uint64_t);
  void *v162;
  id v163;
  void *v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t (**v183)(_QWORD, _QWORD, _QWORD);
  id v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  dispatch_semaphore_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  id v193;
  _OWORD v194[12];
  char v195;
  __int128 v196;
  void **v197;
  unint64_t v198;
  void (*v199)(uint64_t, void *, void *, void *);
  void *v200;
  void (*v201)(uint64_t, void *, uint64_t);
  uint64_t v202;
  _OWORD v203[12];
  char v204;
  _BYTE v205[200];
  _BYTE v206[200];
  _BYTE v207[200];
  _BYTE v208[216];
  char *v209;

  v178 = a8;
  v179 = a3;
  v164 = a7;
  LODWORD(v193) = a6;
  v187 = a5;
  v188 = a4;
  v176 = a1;
  v177 = a2;
  v175 = a9;
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v171 = *(_QWORD *)(v9 - 8);
  v172 = v9;
  __chkstk_darwin(v9);
  v170 = (uint64_t *)((char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v174 = type metadata accessor for DispatchTime(0);
  v169 = *(_QWORD *)(v174 - 8);
  v11 = __chkstk_darwin(v174);
  v168 = (char *)&v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v173 = (char *)&v157 - v13;
  v14 = (_QWORD *)type metadata accessor for Calendar.Component(0);
  v183 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*(v14 - 1);
  v184 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v17);
  v19 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for Date(0);
  v189 = *(_QWORD *)(v192 - 8);
  v20 = __chkstk_darwin(v192);
  v167 = (char *)&v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v166 = (char *)&v157 - v23;
  v24 = __chkstk_darwin(v22);
  v186 = (char *)&v157 - v25;
  v26 = __chkstk_darwin(v24);
  v182 = (char *)&v157 - v27;
  v165 = v28;
  __chkstk_darwin(v26);
  v191 = (char *)&v157 - v29;
  v30 = sub_100047110(&qword_100823FC8);
  __chkstk_darwin(v30);
  v32 = (char *)&v157 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100047110((uint64_t *)&unk_100827450);
  __chkstk_darwin(v33);
  v35 = (char *)&v157 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DateComponents(0);
  v180 = *(_QWORD *)(v36 - 8);
  v181 = v36;
  __chkstk_darwin(v36);
  v209 = (char *)&v157 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchPredicate(0);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v41 = (char *)&v157 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *(_QWORD *)v41 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v41, enum case for DispatchPredicate.notOnQueue(_:), v38);
  v42 = _dispatchPreconditionTest(_:)(v41);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  if ((v42 & 1) == 0)
  {
    __break(1u);
LABEL_25:
    swift_once(&qword_10081D548, sub_100005A80);
    goto LABEL_7;
  }
  if ((v193 & 1) != 0)
  {
    v43 = v190;
    result = sub_100041E0C((uint64_t)v188, v187, (uint64_t)v206);
    v41 = v209;
    if (v43)
      return result;
    v190 = 0;
    sub_100045AD4((uint64_t)v206, (uint64_t)v205, &qword_100827408);
    sub_100045AD4((uint64_t)v205, (uint64_t)v208, &qword_100827408);
  }
  else
  {
    sub_1001F85CC((uint64_t)v205);
    sub_100045AD4((uint64_t)v205, (uint64_t)v208, &qword_100827408);
    v41 = v209;
  }
  sub_100045AD4((uint64_t)v208, (uint64_t)v207, &qword_100827408);
  v38 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v35, 1, 1, v38);
  v45 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v32, 1, 1, v45);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v35, v32, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  DateComponents.day.setter(1, 0);
  if (qword_10081D548 != -1)
    goto LABEL_25;
LABEL_7:
  sub_10003CE9C(v38, (uint64_t)qword_100869D10);
  v46 = v191;
  Calendar.startOfDay(for:)(v187);
  v48 = v183;
  v47 = v184;
  result = ((uint64_t (**)(char *, _QWORD, id))v183)[13](v16, enum case for Calendar.Component.day(_:), v184);
  if (__OFSUB__(0, v188))
  {
    __break(1u);
  }
  else
  {
    Calendar.date(byAdding:value:to:wrappingComponents:)(v16, -(uint64_t)v188, v46, 0);
    ((void (*)(char *, id))v48[1])(v16, v47);
    v49 = v189;
    v50 = v192;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v19, 1, v192) == 1)
    {
      sub_1000471E4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v41, v181);
      sub_10001BE90((uint64_t)v19, (uint64_t *)&unk_100828370);
      sub_1001F85CC((uint64_t)v203);
      v51 = (void ***)v203;
    }
    else
    {
      v52 = v182;
      v161 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v161(v182, v19, v50);
      v53 = v186;
      Calendar.startOfDay(for:)(v52);
      sub_1000364C8(v179);
      v162 = v54;
      v188 = dispatch_semaphore_create(0);
      v55 = objc_msgSend((id)objc_opt_self(HKQuery), "_predicateForObjectsFromAppleWatches");
      v56 = v55;
      v57 = v164;
      v163 = v55;
      if (v164)
      {
        v58 = sub_100047110((uint64_t *)&unk_100828340);
        v59 = swift_allocObject(v58, 48, 7);
        *(_OWORD *)(v59 + 16) = xmmword_100629280;
        *(_QWORD *)(v59 + 32) = v56;
        *(_QWORD *)(v59 + 40) = v57;
        *(_QWORD *)&v203[0] = v59;
        specialized Array._endMutation()(v59);
        v60 = *(_QWORD *)&v203[0];
        sub_10001E724(0, (unint64_t *)&unk_100827490, NSPredicate_ptr);
        v61 = v57;
        v62 = v56;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v60);
        v64 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

      }
      else
      {
        v64 = v55;
      }
      *(_QWORD *)&v203[0] = 0x3A73646E6572545BLL;
      *((_QWORD *)&v203[0] + 1) = 0xE900000000000020;
      v65 = objc_msgSend(v176, "identifier");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      v69._countAndFlagsBits = v66;
      v69._object = v68;
      String.append(_:)(v69);
      swift_bridgeObjectRelease(v68);
      v70._countAndFlagsBits = 93;
      v70._object = (void *)0xE100000000000000;
      String.append(_:)(v70);
      v183 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))*((_QWORD *)&v203[0] + 1);
      v164 = *(void **)&v203[0];
      if ((v178 & 1) != 0)
      {
        v71 = (uint64_t)v164;
        sub_100045AD4((uint64_t)v208, (uint64_t)v203, &qword_100827408);
        v72 = sub_1001F85B4((uint64_t)v203);
        if ((_DWORD)v72 == 1)
        {
          if ((v193 & 1) != 0)
          {
            v73 = static os_log_type_t.default.getter(v72);
            v74 = HKLogActivity;
            os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Asked to divide by hours worn, but none found!", 46, 2, _swiftEmptyArrayStorage);

          }
        }
        else
        {
          sub_100045AD4((uint64_t)v208, (uint64_t)&v197, &qword_100827408);
          v75 = sub_10004AE58(&v197);
          LODWORD(v187) = static os_log_type_t.default.getter(v75);
          v76 = (void *)HKLogActivity;
          v77 = sub_100047110((uint64_t *)&unk_100827460);
          v78 = swift_allocObject(v77, 72, 7);
          *(_OWORD *)(v78 + 16) = xmmword_100622F90;
          *(_QWORD *)&v194[0] = 0;
          *((_QWORD *)&v194[0] + 1) = 0xE000000000000000;
          v79 = v76;
          _StringGuts.grow(_:)(17);
          v196 = v194[0];
          v80._countAndFlagsBits = v71;
          v80._object = v183;
          String.append(_:)(v80);
          v81._countAndFlagsBits = 0x77207372756F4820;
          v81._object = (void *)0xED0000203A6E726FLL;
          String.append(_:)(v81);
          v194[10] = v203[10];
          v194[11] = v203[11];
          v195 = v204;
          v194[6] = v203[6];
          v194[7] = v203[7];
          v194[8] = v203[8];
          v194[9] = v203[9];
          v194[2] = v203[2];
          v194[3] = v203[3];
          v194[4] = v203[4];
          v194[5] = v203[5];
          v194[0] = v203[0];
          v194[1] = v203[1];
          _print_unlocked<A, B>(_:_:)(v194, &v196, &type metadata for ActivityStatistics, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          sub_1000471E4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
          v82 = v196;
          *(_QWORD *)(v78 + 56) = &type metadata for String;
          *(_QWORD *)(v78 + 64) = sub_100038CF8();
          *(_OWORD *)(v78 + 32) = v82;
          os_log(_:dso:log:_:_:)(v187, &_mh_execute_header, v79, "%{public}@", 10, 2, v78);

          swift_bridgeObjectRelease(v78);
        }
        v83 = static os_log_type_t.default.getter(v72);
        v84 = (void *)HKLogActivity;
        v85 = sub_100047110((uint64_t *)&unk_100827460);
        v86 = swift_allocObject(v85, 72, 7);
        *(_OWORD *)(v86 + 16) = xmmword_100622F90;
        v197 = 0;
        v198 = 0xE000000000000000;
        v87 = v84;
        _StringGuts.grow(_:)(16);
        v88 = v198;
        v89 = v183;
        swift_bridgeObjectRetain(v183);
        swift_bridgeObjectRelease(v88);
        v197 = (void **)v71;
        v198 = (unint64_t)v89;
        v90._countAndFlagsBits = 0x6163696465725020;
        v90._object = (void *)0xEC000000203A6574;
        String.append(_:)(v90);
        v91 = v64;
        v92 = objc_msgSend(v91, "description");
        v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v95 = v94;

        v96._countAndFlagsBits = v93;
        v96._object = v95;
        String.append(_:)(v96);

        swift_bridgeObjectRelease(v95);
        v97 = v197;
        v98 = v198;
        *(_QWORD *)(v86 + 56) = &type metadata for String;
        *(_QWORD *)(v86 + 64) = sub_100038CF8();
        *(_QWORD *)(v86 + 32) = v97;
        *(_QWORD *)(v86 + 40) = v98;
        os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v87, "%{public}@", 10, 2, v86);

        swift_bridgeObjectRelease(v86);
        v49 = v189;
        v46 = v191;
        v53 = v186;
      }
      v99 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
      v100 = v64;
      v101 = v176;
      v184 = v101;
      v102 = Date._bridgeToObjectiveC()().super.isa;
      v103 = DateComponents._bridgeToObjectiveC()().super.isa;
      v160 = objc_msgSend(v99, "initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:", v101, v100, v177, v102, v103);

      v176 = v100;
      v187 = swift_allocObject(&unk_10078E070, 209, 7);
      v104 = v187 + 16;
      sub_1001F85CC((uint64_t)v203);
      v157 = v104;
      sub_100045AD4((uint64_t)v203, v104, &qword_100827408);
      v105 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v106 = v166;
      v107 = v192;
      v105(v166, v53, v192);
      v108 = v46;
      v109 = v167;
      v105(v167, v108, v107);
      v110 = *(unsigned __int8 *)(v49 + 80);
      v111 = (v110 + 32) & ~v110;
      v112 = v110 | 7;
      v113 = (v165 + v110 + v111) & ~v110;
      v114 = v113 + v165;
      v158 = (v113 + v165 + 7) & 0xFFFFFFFFFFFFFFF8;
      v159 = (v113 + v165 + 23) & 0xFFFFFFFFFFFFFFF8;
      v165 = (v113 + v165 + 223) & 0xFFFFFFFFFFFFFFF8;
      v115 = (v114 + 239) & 0xFFFFFFFFFFFFFFF8;
      v116 = (v115 + 23) & 0xFFFFFFFFFFFFFFF8;
      v117 = swift_allocObject(&unk_10078E098, v116 + 9, v112);
      v118 = v188;
      *(_QWORD *)(v117 + 16) = v184;
      *(_QWORD *)(v117 + 24) = v118;
      v119 = v106;
      v120 = (void (*)(unint64_t, char *, uint64_t))v161;
      v161((char *)(v117 + v111), v119, v107);
      v120(v117 + v113, v109, v107);
      v121 = v117 + v158;
      *(_QWORD *)v121 = v177;
      *(_BYTE *)(v121 + 8) = v193 & 1;
      sub_100045AD4((uint64_t)v207, v117 + v159, &qword_100827408);
      v122 = v117 + v165;
      v123 = v162;
      *(_QWORD *)v122 = v162;
      *(_BYTE *)(v122 + 8) = v178 & 1;
      v124 = (_QWORD *)(v117 + v115);
      v125 = v183;
      *v124 = v164;
      v124[1] = v125;
      v126 = v117 + v116;
      v127 = v187;
      *(_QWORD *)v126 = v187;
      *(_BYTE *)(v126 + 8) = v179;
      v201 = sub_10002C8AC;
      v202 = v117;
      v197 = _NSConcreteStackBlock;
      v198 = 1107296256;
      v199 = sub_10004CD48;
      v200 = &unk_10078E0B0;
      v128 = _Block_copy(&v197);
      v129 = v202;
      v184 = v184;
      v130 = v188;
      v193 = v123;
      swift_retain(v127);
      swift_release(v129);
      v131 = v160;
      objc_msgSend(v160, "setInitialResultsHandler:", v128);
      _Block_release(v128);
      v132 = v131;
      v133 = String._bridgeToObjectiveC()();
      objc_msgSend(v132, "setDebugIdentifier:", v133);

      v134 = objc_msgSend(*(id *)(v185 + 16), "executeQuery:", v132);
      v135 = v168;
      static DispatchTime.now()(v134);
      v137 = v170;
      v136 = v171;
      *v170 = 15;
      v138 = v172;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v136 + 104))(v137, enum case for DispatchTimeInterval.seconds(_:), v172);
      v139 = v173;
      + infix(_:_:)(v135, v137);
      (*(void (**)(_QWORD *, uint64_t))(v136 + 8))(v137, v138);
      v140 = *(void (**)(char *, uint64_t))(v169 + 8);
      v141 = v174;
      v140(v135, v174);
      v142 = OS_dispatch_semaphore.wait(timeout:)(v139);
      v143 = static DispatchTimeoutResult.== infix(_:_:)(v142 & 1, 1);
      if ((v143 & 1) != 0)
      {
        v144 = static os_log_type_t.default.getter(v143);
        v145 = (void *)HKLogActivity;
        v146 = sub_100047110((uint64_t *)&unk_100827460);
        v147 = swift_allocObject(v146, 72, 7);
        *(_OWORD *)(v147 + 16) = xmmword_100622F90;
        *(_QWORD *)(v147 + 56) = sub_10001E724(0, &qword_100821E90, HKQuantityType_ptr);
        *(_QWORD *)(v147 + 64) = sub_1001F8BA4(&qword_100827470, &qword_100821E90, HKQuantityType_ptr);
        v148 = v184;
        *(_QWORD *)(v147 + 32) = v184;
        v149 = v148;
        v150 = v145;
        os_log(_:dso:log:_:_:)(v144, &_mh_execute_header, v150, "Semaphore wait timed out fetching statistics for quantity type %@", 65, 2, v147);

        swift_bridgeObjectRelease(v147);
        v151 = sub_1001F8BE4();
        swift_allocError(&type metadata for ActivityStatisticsBuilder.BuilderError, v151, 0, 0);
        swift_willThrow();

        v140(v173, v174);
        v152 = *(void (**)(char *, uint64_t))(v189 + 8);
        v153 = v192;
        v152(v186, v192);
        v152(v182, v153);
        v152(v191, v153);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v209, v181);
        return swift_release(v187);
      }

      v140(v139, v141);
      v154 = *(void (**)(char *, uint64_t))(v189 + 8);
      v155 = v192;
      v154(v186, v192);
      v154(v182, v155);
      v154(v191, v155);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v209, v181);
      v156 = v157;
      swift_beginAccess(v157, v194, 0, 0);
      sub_100045AD4(v156, (uint64_t)&v197, &qword_100827408);
      sub_1000471E4((uint64_t)&v197, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100043950);
      swift_release(v187);
      v51 = &v197;
    }
    sub_100045AD4((uint64_t)v51, (uint64_t)v205, &qword_100827408);
    return sub_100045AD4((uint64_t)v205, v175, &qword_100827408);
  }
  return result;
}

uint64_t sub_100043950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a17);
    return swift_bridgeObjectRetain(a18);
  }
  return result;
}

uint64_t sub_1000439B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v33)(char *, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD v127[12];
  char v128;
  _OWORD v129[12];
  char v130;
  _OWORD v131[12];
  char v132;
  _OWORD v133[12];
  char v134;
  _OWORD v135[12];
  char v136;
  _OWORD v137[12];
  char v138;
  _OWORD v139[12];
  char v140;
  _OWORD v141[12];
  char v142;

  v124 = a1;
  v122 = a3;
  v4 = sub_100047110(&qword_100821648);
  __chkstk_darwin(v4);
  v119 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateInterval(0);
  v117 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v116 = (uint64_t)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v118 = (char *)&v110 - v9;
  v126 = type metadata accessor for Calendar.Component(0);
  v10 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110((uint64_t *)&unk_100828370);
  v14 = __chkstk_darwin(v13);
  v120 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v110 - v16;
  v125 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v125 - 8);
  v19 = __chkstk_darwin(v125);
  v114 = (char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v113 = (char *)&v110 - v22;
  v23 = __chkstk_darwin(v21);
  v121 = (char *)&v110 - v24;
  v25 = __chkstk_darwin(v23);
  v123 = (char *)&v110 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v110 - v27;
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v29 = type metadata accessor for Calendar(0);
  sub_10003CE9C(v29, (uint64_t)qword_100869D10);
  Calendar.startOfDay(for:)(a2);
  v30 = enum case for Calendar.Component.day(_:);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 104);
  result = v31(v12, enum case for Calendar.Component.day(_:), v126);
  if (__OFSUB__(0, v124))
  {
    __break(1u);
  }
  else
  {
    v112 = v6;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v12, -v124, v28, 0);
    v33 = *(void (**)(char *, uint64_t))(v10 + 8);
    v33(v12, v126);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v124 = v18;
    v35 = v125;
    if (v34(v17, 1, v125) == 1)
    {
      (*(void (**)(char *, uint64_t))(v124 + 8))(v28, v125);
LABEL_8:
      sub_10001BE90((uint64_t)v17, (uint64_t *)&unk_100828370);
      v39 = type metadata accessor for ActivityStatisticsCollection(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v122, 1, 1, v39);
    }
    v111 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    v111(v123, v17, v35);
    v36 = v126;
    v31(v12, v30, v126);
    v37 = v120;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v12, -1, v28, 0);
    v33(v12, v36);
    if (v34(v37, 1, v35) == 1)
    {
      v38 = *(void (**)(char *, uint64_t))(v124 + 8);
      v38(v123, v35);
      v17 = v37;
      v38(v28, v125);
      goto LABEL_8;
    }
    v40 = v121;
    v111(v121, v37, v35);
    v41 = *(void (**)(char *, char *, uint64_t))(v124 + 16);
    v42 = v113;
    v41(v113, v123, v35);
    v43 = v114;
    v41(v114, v40, v35);
    v44 = (uint64_t)v118;
    DateInterval.init(start:end:)(v42, v43);
    v45 = type metadata accessor for DateComponents(0);
    v46 = (uint64_t)v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v119, 1, 1, v45);
    v47 = sub_1000448D4(v44);
    v48 = v115;
    swift_retain(v115);
    v49 = sub_1001F85F0((uint64_t)v47, v48);
    swift_bridgeObjectRelease(v47);
    swift_release(v48);
    v50 = v116;
    sub_100044304(v44, v116);
    sub_1001F8E74((uint64_t)v49, 0, (uint64_t)v127);
    sub_1001F98F0((uint64_t)v49, 0, (uint64_t)v129);
    sub_1001FA36C((uint64_t)v49, 2, (uint64_t)v131);
    sub_1001FADE8((uint64_t)v49, 2, (uint64_t)v133);
    sub_1001FB864((uint64_t)v49, 5, (uint64_t)v135);
    sub_1001FC2E0((uint64_t)v49, 5, (uint64_t)v137);
    sub_1001FCD5C((uint64_t)v49, 1, (uint64_t)v139);
    sub_1001FD7D8((uint64_t)v49, 5, (uint64_t)v141);
    swift_bridgeObjectRelease(v49);
    v51 = sub_100044704((uint64_t)v127, (uint64_t)v129, (uint64_t)v131, (uint64_t)v133, (uint64_t)v135, (uint64_t)v137);
    v53 = v52;
    v120 = v54;
    v115 = v55;
    v56 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v126 = (uint64_t)v28;
    v57 = v112;
    v56(v50, v112);
    v58 = type metadata accessor for ActivityStatisticsCollection(0);
    v59 = v122;
    sub_100021CC0(v46, v122 + *(int *)(v58 + 64), &qword_100821648);
    v60 = v127[11];
    *(_OWORD *)(v59 + 160) = v127[10];
    *(_OWORD *)(v59 + 176) = v60;
    *(_BYTE *)(v59 + 192) = v128;
    v61 = v127[7];
    *(_OWORD *)(v59 + 96) = v127[6];
    *(_OWORD *)(v59 + 112) = v61;
    v62 = v127[9];
    *(_OWORD *)(v59 + 128) = v127[8];
    *(_OWORD *)(v59 + 144) = v62;
    v63 = v127[3];
    *(_OWORD *)(v59 + 32) = v127[2];
    *(_OWORD *)(v59 + 48) = v63;
    v64 = v127[5];
    *(_OWORD *)(v59 + 64) = v127[4];
    *(_OWORD *)(v59 + 80) = v64;
    v65 = v127[1];
    *(_OWORD *)v59 = v127[0];
    *(_OWORD *)(v59 + 16) = v65;
    v66 = v129[11];
    *(_OWORD *)(v59 + 360) = v129[10];
    *(_OWORD *)(v59 + 376) = v66;
    *(_BYTE *)(v59 + 392) = v130;
    v67 = v129[7];
    *(_OWORD *)(v59 + 296) = v129[6];
    *(_OWORD *)(v59 + 312) = v67;
    v68 = v129[9];
    *(_OWORD *)(v59 + 328) = v129[8];
    *(_OWORD *)(v59 + 344) = v68;
    v69 = v129[0];
    *(_OWORD *)(v59 + 216) = v129[1];
    v70 = v129[3];
    *(_OWORD *)(v59 + 232) = v129[2];
    *(_OWORD *)(v59 + 248) = v70;
    v71 = v129[5];
    *(_OWORD *)(v59 + 264) = v129[4];
    *(_OWORD *)(v59 + 280) = v71;
    *(_OWORD *)(v59 + 200) = v69;
    v72 = v131[11];
    *(_OWORD *)(v59 + 560) = v131[10];
    *(_OWORD *)(v59 + 576) = v72;
    *(_BYTE *)(v59 + 592) = v132;
    v73 = v131[7];
    *(_OWORD *)(v59 + 496) = v131[6];
    *(_OWORD *)(v59 + 512) = v73;
    v74 = v131[9];
    *(_OWORD *)(v59 + 528) = v131[8];
    *(_OWORD *)(v59 + 544) = v74;
    v75 = v131[3];
    *(_OWORD *)(v59 + 432) = v131[2];
    *(_OWORD *)(v59 + 448) = v75;
    v76 = v131[5];
    *(_OWORD *)(v59 + 464) = v131[4];
    *(_OWORD *)(v59 + 480) = v76;
    v77 = v131[1];
    *(_OWORD *)(v59 + 400) = v131[0];
    *(_OWORD *)(v59 + 416) = v77;
    v78 = v133[11];
    *(_OWORD *)(v59 + 760) = v133[10];
    *(_OWORD *)(v59 + 776) = v78;
    *(_BYTE *)(v59 + 792) = v134;
    v79 = v133[7];
    *(_OWORD *)(v59 + 696) = v133[6];
    *(_OWORD *)(v59 + 712) = v79;
    v80 = v133[9];
    *(_OWORD *)(v59 + 728) = v133[8];
    *(_OWORD *)(v59 + 744) = v80;
    v81 = v133[3];
    *(_OWORD *)(v59 + 632) = v133[2];
    *(_OWORD *)(v59 + 648) = v81;
    v82 = v133[5];
    *(_OWORD *)(v59 + 664) = v133[4];
    *(_OWORD *)(v59 + 680) = v82;
    v83 = v133[1];
    *(_OWORD *)(v59 + 600) = v133[0];
    *(_OWORD *)(v59 + 616) = v83;
    v84 = v135[11];
    *(_OWORD *)(v59 + 960) = v135[10];
    *(_OWORD *)(v59 + 976) = v84;
    *(_BYTE *)(v59 + 992) = v136;
    v85 = v135[7];
    *(_OWORD *)(v59 + 896) = v135[6];
    *(_OWORD *)(v59 + 912) = v85;
    v86 = v135[9];
    *(_OWORD *)(v59 + 928) = v135[8];
    *(_OWORD *)(v59 + 944) = v86;
    v87 = v135[3];
    *(_OWORD *)(v59 + 832) = v135[2];
    *(_OWORD *)(v59 + 848) = v87;
    v88 = v135[5];
    *(_OWORD *)(v59 + 864) = v135[4];
    *(_OWORD *)(v59 + 880) = v88;
    v89 = v135[1];
    *(_OWORD *)(v59 + 800) = v135[0];
    *(_OWORD *)(v59 + 816) = v89;
    v90 = v137[11];
    *(_OWORD *)(v59 + 1160) = v137[10];
    *(_OWORD *)(v59 + 1176) = v90;
    *(_BYTE *)(v59 + 1192) = v138;
    v91 = v137[7];
    *(_OWORD *)(v59 + 1096) = v137[6];
    *(_OWORD *)(v59 + 1112) = v91;
    v92 = v137[9];
    *(_OWORD *)(v59 + 1128) = v137[8];
    *(_OWORD *)(v59 + 1144) = v92;
    v93 = v137[3];
    *(_OWORD *)(v59 + 1032) = v137[2];
    *(_OWORD *)(v59 + 1048) = v93;
    v94 = v137[5];
    *(_OWORD *)(v59 + 1064) = v137[4];
    *(_OWORD *)(v59 + 1080) = v94;
    v95 = v137[1];
    *(_OWORD *)(v59 + 1000) = v137[0];
    *(_OWORD *)(v59 + 1016) = v95;
    v96 = v139[8];
    *(_OWORD *)(v59 + 1344) = v139[9];
    v97 = v139[11];
    *(_OWORD *)(v59 + 1360) = v139[10];
    *(_OWORD *)(v59 + 1376) = v97;
    *(_BYTE *)(v59 + 1392) = v140;
    v98 = v139[4];
    *(_OWORD *)(v59 + 1280) = v139[5];
    v99 = v139[7];
    *(_OWORD *)(v59 + 1296) = v139[6];
    *(_OWORD *)(v59 + 1312) = v99;
    *(_OWORD *)(v59 + 1328) = v96;
    v100 = v139[0];
    *(_OWORD *)(v59 + 1216) = v139[1];
    v101 = v139[3];
    *(_OWORD *)(v59 + 1232) = v139[2];
    *(_OWORD *)(v59 + 1248) = v101;
    *(_OWORD *)(v59 + 1264) = v98;
    *(_OWORD *)(v59 + 1200) = v100;
    v102 = v141[9];
    v103 = v141[11];
    *(_OWORD *)(v59 + 1560) = v141[10];
    *(_OWORD *)(v59 + 1576) = v103;
    *(_BYTE *)(v59 + 1592) = v142;
    v104 = v141[5];
    v105 = v141[7];
    *(_OWORD *)(v59 + 1496) = v141[6];
    *(_OWORD *)(v59 + 1512) = v105;
    *(_OWORD *)(v59 + 1528) = v141[8];
    *(_OWORD *)(v59 + 1544) = v102;
    v106 = v141[1];
    v107 = v141[3];
    *(_OWORD *)(v59 + 1432) = v141[2];
    *(_OWORD *)(v59 + 1448) = v107;
    *(_OWORD *)(v59 + 1464) = v141[4];
    *(_OWORD *)(v59 + 1480) = v104;
    *(_OWORD *)(v59 + 1400) = v141[0];
    *(_OWORD *)(v59 + 1416) = v106;
    *(_QWORD *)(v59 + 1600) = v51;
    *(_QWORD *)(v59 + 1608) = v53;
    *(_QWORD *)(v59 + 1616) = v120;
    *(_QWORD *)(v59 + 1624) = v115;
    sub_10001BE90(v46, &qword_100821648);
    v56(v44, v57);
    v108 = v125;
    v109 = *(void (**)(char *, uint64_t))(v124 + 8);
    v109(v121, v125);
    v109(v123, v108);
    v109((char *)v126, v108);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v59, 0, 1, v58);
  }
  return result;
}

uint64_t sub_1000442F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556F54);
}

uint64_t sub_100044304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a2;
  v3 = type metadata accessor for DateInterval(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v53 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Calendar.Component(0);
  v58 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v47 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v57 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v8);
  v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v52 = (char *)&v41 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v41 - v20;
  if (qword_10081D548 != -1)
    swift_once(&qword_10081D548, sub_100005A80);
  v22 = sub_10003CE9C(v6, (uint64_t)qword_100869D10);
  v42 = a1;
  DateInterval.start.getter(v22);
  v51 = v21;
  Calendar.startOfDay(for:)(v19);
  v44 = v11;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v19, v10);
  v24 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v45, v22, v6);
  v43 = v6;
  v25 = v47;
  v26 = v50;
  v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v58 + 104))(v47, enum case for Calendar.Component.day(_:), v50);
  DateInterval.end.getter(v27);
  Calendar.startOfDay(for:)(v14);
  v49 = v14;
  v23(v14, v10);
  v28 = (uint64_t)v48;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v25, 1, v19, 0);
  v46 = v23;
  v23(v19, v10);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v24, v43);
  v29 = v53;
  v30 = v54;
  v31 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v42, v55);
  v32 = v44;
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v28, 1, v10);
  if ((_DWORD)v33 == 1)
  {
    v34 = v52;
    DateInterval.end.getter(v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
    sub_10001BE90(v28, (uint64_t *)&unk_100828370);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
    v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v52, v28, v10);
  }
  v35 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v36 = v51;
  v35(v19, v51, v10);
  v37 = v49;
  v35(v49, v34, v10);
  DateInterval.init(start:end:)(v19, v37);
  v38 = v34;
  v39 = (uint64_t (*)(char *, uint64_t))v46;
  v46(v38, v10);
  return v39(v36, v10);
}

uint64_t sub_100044704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  char v27;
  int v28;
  double v29;
  double v30;
  char v31;
  char v32;
  char v33;
  double v34;
  double v35;
  BOOL v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  result = 0;
  v16 = 0;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(a4 + 16);
  v20 = *(_QWORD *)(a5 + 16);
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = *(_QWORD *)(v21 + 16);
  while (1)
  {
    v25 = 0.0;
    if (v16 >= *(_QWORD *)(v17 + 16))
    {
      v27 = 1;
      v26 = 0.0;
      if (v16 >= v22)
      {
LABEL_6:
        v28 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      v26 = *(double *)(v17 + v11 + 32);
      v27 = *(_BYTE *)(v17 + v11 + 48);
      if (v16 >= v22)
        goto LABEL_6;
    }
    v25 = *(double *)(v18 + v11 + 32);
    v28 = *(unsigned __int8 *)(v18 + v11 + 48);
LABEL_9:
    v29 = 0.0;
    if (v16 >= *(_QWORD *)(v19 + 16))
    {
      v31 = 1;
      v30 = 0.0;
      if (v16 >= v23)
      {
LABEL_11:
        v32 = 1;
        if (v16 < v24)
          goto LABEL_15;
        goto LABEL_12;
      }
    }
    else
    {
      v30 = *(double *)(v19 + v11 + 32);
      v31 = *(_BYTE *)(v19 + v11 + 48);
      if (v16 >= v23)
        goto LABEL_11;
    }
    v29 = *(double *)(v20 + v11 + 32);
    v32 = *(_BYTE *)(v20 + v11 + 48);
    if (v16 < v24)
    {
LABEL_15:
      v34 = *(double *)(v21 + v11 + 32);
      v33 = *(_BYTE *)(v21 + v11 + 48);
      goto LABEL_16;
    }
LABEL_12:
    v33 = 1;
    v34 = 0.0;
LABEL_16:
    if ((*(_BYTE *)(v6 + v11 + 48) & 1) != 0
      || (v27 & 1) != 0
      || v28
      || (v31 & 1) != 0
      || (v32 & 1) != 0
      || (v33 & 1) != 0)
    {
      goto LABEL_3;
    }
    v35 = *(double *)(v6 + v11 + 32);
    if (v26 <= v35)
    {
      v36 = __OFADD__(result++, 1);
      if (v36)
        break;
    }
    if (v30 <= v25)
    {
      v36 = __OFADD__(v14++, 1);
      if (v36)
        goto LABEL_37;
    }
    if (v34 <= v29)
    {
      v36 = __OFADD__(v13++, 1);
      if (v36)
        goto LABEL_38;
    }
    if (v26 <= v35 && v30 <= v25 && v34 <= v29)
    {
      v36 = __OFADD__(v12++, 1);
      if (v36)
      {
        __break(1u);
        return 0;
      }
    }
LABEL_3:
    ++v16;
    v11 += 24;
    if (v7 == v16)
      return result;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_1000448D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  NSDate v20;
  uint64_t v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v2 = sub_100047110(&qword_100821648);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v33 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v37 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100048AA8(a1);
  v15 = v14;
  v16 = v14[2];
  if (v16)
  {
    v38 = _swiftEmptyArrayStorage;
    sub_100044C38(0, v16, 0);
    v17 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v33 = v15;
    v34 = v11;
    v18 = (char *)v15 + v17;
    v19 = *(_QWORD *)(v11 + 72);
    v35 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v36 = v19;
    do
    {
      v35(v13, v18, v37);
      v20.super.isa = Date._bridgeToObjectiveC()().super.isa;
      if (qword_10081D548 != -1)
        swift_once(&qword_10081D548, sub_100005A80);
      v21 = type metadata accessor for Calendar(0);
      sub_10003CE9C(v21, (uint64_t)qword_100869D10);
      isa = Calendar._bridgeToObjectiveC()().super.isa;
      v23 = (id)_HKActivityCacheDateComponentsFromDate(v20.super.isa, isa);

      if (v23)
      {
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v23);

        v24 = type metadata accessor for DateComponents(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 0, 1, v24);
      }
      else
      {
        v24 = type metadata accessor for DateComponents(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
      }
      v25 = v34;
      sub_100045AD4((uint64_t)v8, (uint64_t)v10, &qword_100821648);
      sub_100021CC0((uint64_t)v10, (uint64_t)v5, &qword_100821648);
      type metadata accessor for DateComponents(0);
      v26 = *(_QWORD *)(v24 - 8);
      v27 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v5, 1, v24) != 1)
      {
        v27 = DateComponents._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v24);
      }
      v28 = _HKCacheIndexFromDateComponents(v27);

      sub_10001BE90((uint64_t)v10, &qword_100821648);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v37);
      v29 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_100044C38(0, v29[2] + 1, 1);
        v29 = v38;
      }
      v31 = v29[2];
      v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        sub_100044C38(v30 > 1, v31 + 1, 1);
        v29 = v38;
      }
      v29[2] = v31 + 1;
      v29[v31 + 4] = v28;
      v18 += v36;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(v33);
  }
  else
  {
    swift_bridgeObjectRelease(v14);
    return _swiftEmptyArrayStorage;
  }
  return v29;
}

uint64_t sub_100044C38(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100044C5C(a1, a2, a3, *v3, &qword_100821670);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100044C5C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100047110(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100044DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  NSDate v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  Class v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v54 = a2;
  v3 = sub_100047110(&qword_100821648);
  v4 = __chkstk_darwin(v3);
  v55 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v47 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = (unint64_t)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(a1 + 16);
  v48 = a1;
  if (v18)
  {
    v19 = a1;
    v20 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v51 = *(_QWORD *)(v12 + 72);
    v52 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache;
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain(v19);
    v21 = v12;
    v49 = v14;
    while (1)
    {
      v53(v17, v20, v11);
      v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
      v23(v17, 0, 1, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v11) == 1)
        break;
      v50 = v23;
      v56 = v20;
      v57 = v18;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v14, v17, v11);
      v24.super.isa = Date._bridgeToObjectiveC()().super.isa;
      if (qword_10081D548 != -1)
        swift_once(&qword_10081D548, sub_100005A80);
      v25 = type metadata accessor for Calendar(0);
      sub_10003CE9C(v25, (uint64_t)qword_100869D10);
      isa = Calendar._bridgeToObjectiveC()().super.isa;
      v27 = (id)_HKActivityCacheDateComponentsFromDate(v24.super.isa, isa);

      if (v27)
      {
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v27);

        v28 = type metadata accessor for DateComponents(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 0, 1, v28);
      }
      else
      {
        v28 = type metadata accessor for DateComponents(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
      }
      sub_1000456B4((uint64_t)v8, (uint64_t)v10);
      v29 = v55;
      sub_100021CC0((uint64_t)v10, v55, &qword_100821648);
      type metadata accessor for DateComponents(0);
      v30 = *(_QWORD *)(v28 - 8);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v28);
      v32 = 0;
      if (v31 != 1)
      {
        v33 = v17;
        v34 = v11;
        v35 = v21;
        v36 = v10;
        v37 = v8;
        v38 = v55;
        v32 = DateComponents._bridgeToObjectiveC()().super.isa;
        v39 = v38;
        v8 = v37;
        v10 = v36;
        v21 = v35;
        v11 = v34;
        v17 = v33;
        v14 = v49;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v39, v28);
      }
      v40 = _HKCacheIndexFromDateComponents(v32);

      sub_10001BE90((uint64_t)v10, &qword_100821648);
      v41 = objc_msgSend(*(id *)(v54 + v52), "activitySummaryForCacheIndex:", v40);
      v42 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v11);
      if (v41)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
        v44 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v43 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v44 >= v43 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
        specialized Array._endMutation()(v22);
      }
      v20 = v56 + v51;
      v18 = v57 - 1;
      if (v57 == 1)
      {
        v50(v17, 1, 1, v11);
        break;
      }
    }
  }
  else
  {
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain(a1);
    v45(v17, 1, 1, v11);
  }
  swift_bridgeObjectRelease(v48);
  return v58;
}

uint64_t sub_1000451F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100837918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004523C(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, uint64_t);
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  Class isa;
  unint64_t v51;
  unint64_t v52;
  NSDate v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;

  v57 = a2;
  v3 = sub_100047110(&qword_100821648);
  v55 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v54 - v7;
  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v59 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v58 = (char *)&v54 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v54 - v15;
  v17 = sub_100047110((uint64_t *)&unk_100828720);
  v18 = type metadata accessor for Calendar.Component(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v17, v21 + *(_QWORD *)(v19 + 72), v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100622F90;
  v23 = v22 + v21;
  v24 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
  v25 = a1;
  v24(v23, enum case for Calendar.Component.day(_:), v18);
  v26 = sub_1002302F0(v22);
  swift_setDeallocating(v22);
  v27 = v23;
  v28 = v18;
  v29 = v16;
  v30 = v56;
  v31 = v57;
  swift_arrayDestroy(v27, 1, v28);
  swift_deallocClassInstance(v22, 32, 7);
  Calendar.dateComponents(_:from:to:)(v26, v25, v31);
  v32 = swift_bridgeObjectRelease(v26);
  result = DateComponents.day.getter(v32);
  if ((v34 & 1) != 0)
  {
    v44 = static os_log_type_t.error.getter(result);
    v45 = (void *)HKLogActivity;
    v46 = sub_100047110((uint64_t *)&unk_100827460);
    v47 = v29;
    v48 = swift_allocObject(v46, 112, 7);
    *(_OWORD *)(v48 + 16) = xmmword_100620BC0;
    v49 = v45;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v51 = sub_1005F0594();
    *(_QWORD *)(v48 + 56) = v51;
    v52 = sub_10017C7F8();
    *(_QWORD *)(v48 + 64) = v52;
    *(_QWORD *)(v48 + 32) = isa;
    v53.super.isa = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v48 + 96) = v51;
    *(_QWORD *)(v48 + 104) = v52;
    *(NSDate *)(v48 + 72) = v53;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v49, "Error: No day component for dates %@ - %@", 41, 2, v48);

    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    v54 = v29;
    __chkstk_darwin(result);
    *(&v54 - 2) = (char *)v30;
    *(&v54 - 1) = v25;
    v56 = sub_100369660((void (*)(uint64_t *))sub_100045758, (uint64_t)(&v54 - 4), 0, v35);
    v36 = *(_QWORD *)(v56 + 16);
    if (v36)
    {
      v37 = v56 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
      v38 = *(_QWORD *)(v55 + 72);
      v39 = (char *)_swiftEmptyArrayStorage;
      v57 = v38;
      do
      {
        sub_1000456FC(v37, (uint64_t)v8);
        sub_1000456B4((uint64_t)v8, (uint64_t)v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
        {
          sub_10001BE90((uint64_t)v6, &qword_100821648);
        }
        else
        {
          v40 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v41 = v58;
          v40(v58, v6, v9);
          v40(v59, v41, v9);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
            v39 = (char *)sub_100045744(0, *((_QWORD *)v39 + 2) + 1, 1, (unint64_t)v39);
          v43 = *((_QWORD *)v39 + 2);
          v42 = *((_QWORD *)v39 + 3);
          if (v43 >= v42 >> 1)
            v39 = (char *)sub_100045744(v42 > 1, v43 + 1, 1, (unint64_t)v39);
          *((_QWORD *)v39 + 2) = v43 + 1;
          v40(&v39[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v43], v59, v9);
          v38 = v57;
        }
        v37 += v38;
        --v36;
      }
      while (v36);
    }
    else
    {
      v39 = (char *)_swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v54, v9);
    swift_bridgeObjectRelease(v56);
    return (uint64_t)v39;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000456B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100821648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000456FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100821648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045744(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008214C0, (uint64_t (*)(_QWORD))&type metadata accessor for DateComponents);
}

uint64_t sub_100045758@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_100045774(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100045774@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  Class isa;
  Class v23;
  id v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, uint64_t);
  int v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v37 = a3;
  v38 = type metadata accessor for DateComponents(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v34 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100821648);
  __chkstk_darwin(v5);
  v35 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.Component(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Calendar.Component.day(_:), v7);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v10, v18, v39, 0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001BE90((uint64_t)v13, (uint64_t *)&unk_100828370);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1, 1, v38);
  }
  v20 = v34;
  v21 = v36;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v23 = Calendar._bridgeToObjectiveC()().super.isa;
  v24 = (id)_HKActivityCacheDateComponentsFromDate(isa, v23);

  if (v24)
  {
    v25 = v20;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v24);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v26 = v21;
    v27 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v28 = (uint64_t)v35;
    v29 = v25;
    v30 = v38;
    v27(v35, v29, v38);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v31((char *)v28, 0, 1, v30);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v30);
    v33 = v37;
    if (v32 != 1)
    {
      v27(v37, (char *)v28, v30);
      return v31(v33, 0, 1, v30);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v28 = (uint64_t)v35;
    v30 = v38;
    v31(v35, 1, 1, v38);
    v33 = v37;
  }
  sub_10001BE90(v28, &qword_100821648);
  return v31(v33, 1, 1, v30);
}

uint64_t sub_100045AD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100047110(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100045B18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100045B44(a1, a2, a3, (_QWORD *)*v3, &qword_100821640, &qword_100821648);
  *v3 = result;
  return result;
}

uint64_t sub_100045B44(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100047110(a5);
  v14 = *(_QWORD *)(sub_100047110(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_100047110(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_100045D24(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, uint64_t a8, char a9, uint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, void *a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD);
  id v37;
  Class isa;
  Class v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD);
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(_QWORD, _QWORD);
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  void (*v72)(_QWORD *, uint64_t);
  uint64_t v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  double v77;
  double v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  void *v91;
  id v92;
  double v93;
  _QWORD *v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  void *v101;
  id v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  double v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  double v122;
  double v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  char v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  double *v144;
  _QWORD *v145;
  double *v146;
  double v147;
  double v148;
  double v149;
  double *v150;
  BOOL v151;
  double v152;
  _BOOL4 v153;
  double v154;
  double *v155;
  double v156;
  double v157;
  _QWORD *v158;
  double v159;
  double *v160;
  BOOL v161;
  double v162;
  _BOOL4 v163;
  double v164;
  unint64_t v165;
  double *v166;
  double *v167;
  double *v168;
  double *v169;
  double *v170;
  double *v171;
  double *v172;
  double *v173;
  double *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  Swift::String v184;
  uint64_t v185;
  void *v186;
  void *v187;
  Swift::String v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  id v196;
  Swift::String v197;
  Swift::String v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  double v223;
  double v224;
  double v225;
  uint64_t v226;
  _QWORD *v227;
  __int128 v228;
  uint64_t v229;
  void (*v230)(_QWORD, _QWORD);
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  _QWORD *v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  double v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  double v255;
  double v256;
  double v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  char v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD v270[3];
  double v271;
  double v272;
  double v273;
  double v274;
  _QWORD v275[7];
  _QWORD v276[7];
  _OWORD v277[12];
  char v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  char v291;
  uint64_t v292[7];
  uint64_t v293[9];

  v23 = type metadata accessor for Calendar.Component(0);
  v232 = *(_QWORD *)(v23 - 8);
  v233 = v23;
  __chkstk_darwin(v23);
  v231 = (char *)&v202 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100047110((uint64_t *)&unk_1008274B0);
  v26 = __chkstk_darwin(v25);
  v235 = (char *)&v202 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v234 = (uint64_t)&v202 - v28;
  *(_QWORD *)&v239 = type metadata accessor for Date(0);
  v237 = *(_QWORD *)(v239 - 8);
  v29 = __chkstk_darwin(v239);
  v236 = (char *)&v202 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  __chkstk_darwin(v31);
  v34 = (char *)&v202 - v33;
  if (a2)
  {
    v238 = v32;
    v213 = a5;
    v35 = swift_allocObject(&unk_10078E188, 24, 7);
    *(_QWORD *)(v35 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)&v225 = v35 + 16;
    v36 = a6;
    v37 = a2;
    v230 = v36;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v39 = Date._bridgeToObjectiveC()().super.isa;
    v40 = swift_allocObject(&unk_10078E1B0, 32, 7);
    *(_QWORD *)(v40 + 16) = a8;
    *(_QWORD *)(v40 + 24) = v35;
    *(_QWORD *)&v281 = sub_10003CCA0;
    *((_QWORD *)&v281 + 1) = v40;
    *(_QWORD *)&v279 = _NSConcreteStackBlock;
    *((_QWORD *)&v279 + 1) = 1107296256;
    *(_QWORD *)&v280 = sub_10003CC44;
    *((_QWORD *)&v280 + 1) = &unk_10078E1C8;
    v41 = _Block_copy(&v279);
    v42 = *((_QWORD *)&v281 + 1);
    v212 = v35;
    swift_retain(v35);
    swift_release(v42);
    v211 = v37;
    objc_msgSend(v37, "enumerateStatisticsFromDate:toDate:withBlock:", isa, v39, v41);
    _Block_release(v41);

    if ((a9 & 1) != 0
      && (sub_100045AD4(a10, (uint64_t)v277, &qword_100827408), sub_1001F85B4((uint64_t)v277) != 1))
    {
      v289 = v277[10];
      v290 = v277[11];
      v291 = v278;
      v285 = v277[6];
      v286 = v277[7];
      v288 = v277[9];
      v287 = v277[8];
      v281 = v277[2];
      v282 = v277[3];
      v284 = v277[5];
      v283 = v277[4];
      v280 = v277[1];
      v279 = v277[0];
      v51 = v225;
      swift_beginAccess(*(_QWORD *)&v225, &v240, 1, 0);
      v52 = **(_QWORD **)&v51;
      sub_1000471E4(a10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100043950);
      v53 = swift_bridgeObjectRetain(v52);
      v54 = sub_1001F8CF4(v53, (uint64_t)&v279);
      v224 = 0.0;
      sub_1000471E4(a10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
      swift_bridgeObjectRelease(v52);
      v55 = **(_QWORD **)&v51;
      **(_QWORD **)&v51 = v54;
      swift_bridgeObjectRelease(v55);
    }
    else
    {
      v224 = 0.0;
    }
    v56 = v230;
    v57 = v225;
    swift_beginAccess(*(_QWORD *)&v225, &v269, 0, 0);
    v58 = *(_QWORD *)(**(_QWORD **)&v57 + 16);
    v59 = v237;
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v237 + 16);
    v61 = v56;
    v62 = v239;
    v60(v34, (uint64_t)v61, v239);
    v63 = v238;
    v64 = v60((char *)v238, a7, v62);
    v65 = Date.timeIntervalSinceReferenceDate.getter(v64);
    v67 = Date.timeIntervalSinceReferenceDate.getter(v66);
    sub_10003D1C0(v58, (uint64_t)v270, v65, v67);
    v226 = v270[0];
    v220 = v270[1];
    v221 = v270[2];
    *(double *)&v68 = v271;
    v69 = v272;
    v70 = *(_QWORD *)&v273;
    v71 = v274;
    v72 = *(void (**)(_QWORD *, uint64_t))(v59 + 8);
    v72(v63, v62);
    v230 = (void (*)(_QWORD, _QWORD))v72;
    v72(v34, v62);
    v73 = **(_QWORD **)&v57;
    v74 = *(_QWORD **)(**(_QWORD **)&v57 + 16);
    v215 = 0.0;
    v75 = &selRef_headerStringForSection_isRecentAndRelevant_;
    if (!v74)
      goto LABEL_38;
    v76 = (_QWORD *)v270[0];
    v77 = v271;
    v78 = v273;
    swift_bridgeObjectRetain(v73);
    v79 = 0;
    v80 = 0;
    v228 = xmmword_100620BC0;
    v229 = v73;
    v227 = v74;
    while (1)
    {
      v91 = *(void **)(v73 + 8 * v80 + 32);
      if (v91)
      {
        v85 = v91;
        v92 = objc_msgSend(v85, v75[249], a11);
        if ((_DWORD)v92)
        {
          objc_msgSend(v85, "doubleValueForUnit:", a11);
          if (v80 < v76[2])
          {
            v90 = v93;
            if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) != 0)
              v94 = v76;
            else
              v94 = sub_1004DEE58(v76);
            if (v80 >= v94[2])
            {
LABEL_163:
              __break(1u);
              return;
            }
            v226 = (uint64_t)v94;
            v95 = (double *)&v94[v79];
            v95[4] = v90;
            v95[5] = 1.0;
            *((_BYTE *)v95 + 48) = 0;

            if (v77 < v90)
            {
              *(double *)&v68 = v90;
              v69 = 1.0;
              v77 = v90;
            }
            if (v78 < 0.0 || v90 < v78)
            {
              v71 = 1.0;
              v70 = *(_QWORD *)&v90;
              v76 = (_QWORD *)v226;
            }
            else
            {
              v90 = v78;
              v76 = (_QWORD *)v226;
            }
            goto LABEL_14;
          }
        }
        else
        {
          v81 = static os_log_type_t.error.getter(v92);
          v238 = v76;
          v82 = (void *)HKLogActivity;
          v83 = sub_100047110((uint64_t *)&unk_100827460);
          v84 = swift_allocObject(v83, 112, 7);
          *(_OWORD *)(v84 + 16) = v228;
          *(_QWORD *)(v84 + 56) = sub_10001E724(0, &qword_1008274C0, HKQuantity_ptr);
          *(_QWORD *)(v84 + 64) = sub_1001F8BA4(&qword_1008274C8, &qword_1008274C0, HKQuantity_ptr);
          *(_QWORD *)(v84 + 32) = v85;
          *(_QWORD *)(v84 + 96) = sub_10001E724(0, (unint64_t *)&qword_1008274D0, HKUnit_ptr);
          *(_QWORD *)(v84 + 104) = sub_1001F8BA4(&qword_1008274D8, (unint64_t *)&qword_1008274D0, HKUnit_ptr);
          *(_QWORD *)(v84 + 72) = a11;
          v85 = v85;
          v86 = v82;
          v87 = a11;
          v88 = v81;
          v75 = &selRef_headerStringForSection_isRecentAndRelevant_;
          os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v86, "Error: sum %@ is not compatible with unit %@", 44, 2, v84);

          v76 = v238;
          v89 = v84;
          v74 = v227;
          v73 = v229;
          swift_bridgeObjectRelease(v89);
        }

      }
      v90 = v78;
LABEL_14:
      ++v80;
      v79 += 3;
      v78 = v90;
      if (v74 == (_QWORD *)v80)
      {
        swift_bridgeObjectRelease(v73);
        v96 = **(_QWORD **)&v225;
        v97 = *(_QWORD *)(**(_QWORD **)&v225 + 16);
        if (v97)
        {
          v98 = v96 + 32;
          swift_bridgeObjectRetain(**(_QWORD **)&v225);
          v99 = 0.0;
          v100 = 0;
          v101 = *(void **)(v96 + 32);
          if (v101)
            goto LABEL_34;
LABEL_32:
          while (v97 != ++v100)
          {
            v101 = *(void **)(v98 + 8 * v100);
            if (v101)
            {
LABEL_34:
              while (1)
              {
                v102 = v101;
                if (!objc_msgSend(v102, v75[249], a11))
                  break;
                objc_msgSend(v102, "doubleValueForUnit:", a11);
                v104 = v103;

                v99 = v99 + v104;
                v105 = v100 + 1;
                if (v97 - 1 == v100)
                  goto LABEL_39;
                ++v100;
                v101 = *(void **)(v98 + 8 * v105);
                if (!v101)
                  goto LABEL_32;
              }

            }
          }
LABEL_39:
          swift_bridgeObjectRelease(v96);
LABEL_40:
          v106 = **(_QWORD **)&v225;
          v107 = *(_QWORD *)(**(_QWORD **)&v225 + 16);
          v218 = *(_QWORD *)&v69;
          v219 = v68;
          v216 = v70;
          v217 = *(_QWORD *)&v71;
          if (v107)
          {
            swift_bridgeObjectRetain(v106);
            v108 = 0;
            v109 = 0;
            while (1)
            {
              v110 = *(void **)(v106 + 8 * v108 + 32);
              if (v110)
              {
                if (objc_msgSend(v110, v75[249], a11))
                {
                  if (__OFADD__(v109++, 1))
                    break;
                }
              }
              if (v107 == ++v108)
                goto LABEL_48;
            }
            __break(1u);
LABEL_48:
            swift_bridgeObjectRelease(v106);
            v112 = 0.0;
            if (v109 > 0)
              v112 = v99 / (double)v109;
            v215 = v112;
          }
          else
          {
            v109 = 0;
          }
          v113 = (uint64_t)v235;
          v210 = a15 + 16;
          v209 = a16;
          v203 = a14;
          v202 = a13;
          v204 = a12;
          v214 = (double)v109;
          sub_10003D1C0(7, (uint64_t)v275, 0.0, 6.0);
          v227 = (_QWORD *)v275[0];
          v208 = v275[1];
          v207 = v275[2];
          v114 = *(double *)&v275[3];
          v115 = *(double *)&v275[5];
          v224 = *(double *)&v275[6];
          v225 = *(double *)&v275[4];
          sub_10003D1C0(7, (uint64_t)v276, 0.0, 6.0);
          *(_QWORD *)&v228 = v276[0];
          v206 = v276[1];
          v205 = v276[2];
          v116 = *(double *)&v276[3];
          v117 = *(double *)&v276[5];
          v222 = *(double *)&v276[4];
          v223 = *(double *)&v276[6];
          v293[0] = v226;
          v293[1] = v220;
          v293[2] = v221;
          v293[3] = v219;
          v293[4] = v218;
          v293[5] = v216;
          v293[6] = v217;
          v118 = *(_QWORD *)(v226 + 16);
          sub_10003EE38(v293);
          v119 = sub_1001F8820(0, v118, v293);
          sub_10003EDC4(v293);
          v120 = 0;
          v121 = *(_QWORD **)(v119 + 16);
          LODWORD(v229) = enum case for Calendar.Component.weekday(_:);
          v122 = 1.0;
          v123 = 0.0;
          v124 = v236;
          while (2)
          {
            if ((_QWORD *)v120 == v121)
            {
              v125 = sub_100047110(&qword_100821658);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v113, 1, 1, v125);
              v126 = v121;
            }
            else
            {
              if ((v120 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
                goto LABEL_163;
              }
              if (v120 >= *(_QWORD *)(v119 + 16))
                goto LABEL_160;
              v127 = sub_100047110(&qword_100821658);
              v128 = *(_QWORD *)(v127 - 8);
              sub_100021CC0(v119+ ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))+ *(_QWORD *)(v128 + 72) * v120, v113, &qword_100821658);
              v126 = (_QWORD *)(v120 + 1);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v113, 0, 1, v127);
            }
            v129 = v113;
            v130 = v234;
            sub_100045AD4(v129, v234, (uint64_t *)&unk_1008274B0);
            v131 = sub_100047110(&qword_100821658);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 48))(v130, 1, v131) == 1)
            {
              v175 = swift_bridgeObjectRelease(v119);
              if ((v204 & 1) != 0)
              {
                v176 = static os_log_type_t.default.getter(v175);
                v177 = (void *)HKLogActivity;
                v178 = sub_100047110((uint64_t *)&unk_100827460);
                v179 = swift_allocObject(v178, 72, 7);
                v239 = xmmword_100622F90;
                *(_OWORD *)(v179 + 16) = xmmword_100622F90;
                v267 = 0;
                v268 = 0xE000000000000000;
                v180 = v177;
                _StringGuts.grow(_:)(16);
                v181 = v268;
                v182 = v203;
                swift_bridgeObjectRetain(v203);
                swift_bridgeObjectRelease(v181);
                v183 = v202;
                v267 = v202;
                v268 = (unint64_t)v182;
                v184._object = (void *)0xEC000000203A6D61;
                v184._countAndFlagsBits = 0x72676F7473694820;
                String.append(_:)(v184);
                v292[0] = v226;
                v292[1] = v220;
                v292[2] = v221;
                v292[3] = v219;
                v292[4] = v218;
                v292[5] = v216;
                v292[6] = v217;
                sub_10003EE38(v292);
                v185 = sub_1000474BC();
                v187 = v186;
                sub_10003EDC4(v292);
                v188._countAndFlagsBits = v185;
                v188._object = v187;
                String.append(_:)(v188);
                swift_bridgeObjectRelease(v187);
                v189 = v267;
                v190 = v268;
                *(_QWORD *)(v179 + 56) = &type metadata for String;
                v191 = sub_100038CF8();
                *(_QWORD *)(v179 + 64) = v191;
                *(_QWORD *)(v179 + 32) = v189;
                *(_QWORD *)(v179 + 40) = v190;
                os_log(_:dso:log:_:_:)(v176, &_mh_execute_header, v180, "%{public}@", 10, 2, v179);

                v192 = swift_bridgeObjectRelease(v179);
                v193 = static os_log_type_t.default.getter(v192);
                v194 = (void *)HKLogActivity;
                v195 = swift_allocObject(v178, 72, 7);
                *(_OWORD *)(v195 + 16) = v239;
                v267 = 0;
                v268 = 0xE000000000000000;
                v196 = v194;
                _StringGuts.grow(_:)(16);
                v197._countAndFlagsBits = v183;
                v197._object = v182;
                String.append(_:)(v197);
                v198._countAndFlagsBits = 0x6167657267674120;
                v198._object = (void *)0xEC000000203A6574;
                String.append(_:)(v198);
                v242 = v215;
                v243 = v214;
                _print_unlocked<A, B>(_:_:)(&v242, &v267, &type metadata for Aggregate, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                v199 = v267;
                v200 = v268;
                *(_QWORD *)(v195 + 56) = &type metadata for String;
                *(_QWORD *)(v195 + 64) = v191;
                *(_QWORD *)(v195 + 32) = v199;
                *(_QWORD *)(v195 + 40) = v200;
                os_log(_:dso:log:_:_:)(v193, &_mh_execute_header, v196, "%{public}@", 10, 2, v195);

                swift_bridgeObjectRelease(v195);
              }
              v242 = v215;
              v243 = v214;
              v244 = v226;
              v245 = v220;
              v246 = v221;
              v247 = v219;
              v248 = v218;
              v249 = v216;
              v250 = v217;
              v251 = v227;
              v252 = v208;
              v253 = v207;
              v254 = v114;
              v255 = v225;
              v256 = v115;
              v257 = v224;
              v258 = v228;
              v259 = v206;
              v260 = v205;
              v261 = v116;
              v262 = v222;
              v263 = v117;
              v264 = v223;
              v265 = v123;
              v266 = v209;
              ASFriendListDisplayMode.id.getter(&v242);
              v201 = v210;
              swift_beginAccess(v210, &v241, 1, 0);
              sub_100045AD4(v201, (uint64_t)&v267, &qword_100827408);
              sub_100045AD4((uint64_t)&v242, v201, &qword_100827408);
              sub_1000471E4((uint64_t)&v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100047150);
              OS_dispatch_semaphore.signal()();
              swift_release(v212);

              return;
            }
            v238 = v126;
            v132 = v121;
            v133 = v119;
            v134 = v130 + *(int *)(v131 + 48);
            v135 = *(double *)v134;
            v136 = *(_BYTE *)(v134 + 16);
            (*(void (**)(char *, uint64_t, _QWORD))(v237 + 32))(v124, v130, v239);
            v137 = v124;
            if (qword_10081D550 != -1)
              swift_once(&qword_10081D550, sub_10000968C);
            v138 = type metadata accessor for Calendar(0);
            sub_10003CE9C(v138, (uint64_t)qword_100869D28);
            v140 = v231;
            v139 = v232;
            v141 = v233;
            (*(void (**)(char *, _QWORD, uint64_t))(v232 + 104))(v231, v229, v233);
            v142 = Calendar.component(_:from:)(v140, v137);
            (*(void (**)(char *, uint64_t))(v139 + 8))(v140, v141);
            v143 = v142 - 1;
            if (v143 <= 6 && (v136 & 1) == 0)
            {
              v145 = v227;
              v144 = (double *)v228;
              if (v143 < v227[2])
              {
                v146 = (double *)&v227[3 * v143];
                if (((_BYTE)v146[6] & 1) != 0)
                {
                  v147 = 1.0;
                  v148 = 0.0;
                }
                else
                {
                  v148 = v146[4];
                  v147 = v146[5];
                }
                if ((swift_isUniquelyReferenced_nonNull_native(v227) & 1) == 0)
                  v145 = sub_1004DEE58(v145);
                v144 = (double *)v228;
                if (v143 >= v145[2])
                  goto LABEL_161;
                v149 = (v135 + v148 * v147) / (v147 + v122);
                v150 = (double *)&v145[3 * v143];
                v150[4] = v149;
                v150[5] = v147 + v122;
                *((_BYTE *)v150 + 48) = 0;
                v151 = v114 < v149;
                if (v114 < v149)
                  v114 = (v135 + v148 * v147) / (v147 + v122);
                v152 = v225;
                if (v151)
                  v152 = v147 + v122;
                v153 = v115 < 0.0;
                if (v149 < v115)
                  v153 = 1;
                if (v153)
                  v115 = (v135 + v148 * v147) / (v147 + v122);
                v154 = v224;
                if (v153)
                  v154 = v147 + v122;
                v224 = v154;
                v225 = v152;
              }
              if (v143 >= *((_QWORD *)v144 + 2))
              {
                v158 = v145;
                v113 = (uint64_t)v235;
                v124 = v236;
              }
              else
              {
                v155 = &v144[3 * v143];
                if (((_BYTE)v155[6] & 1) != 0)
                {
                  v156 = 1.0;
                  v157 = 0.0;
                }
                else
                {
                  v157 = v155[4];
                  v156 = v155[5];
                }
                v158 = v145;
                if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) != 0)
                {
                  v113 = (uint64_t)v235;
                  v124 = v236;
                  v144 = (double *)v228;
                }
                else
                {
                  v144 = (double *)sub_1004DEE58((_QWORD *)v228);
                  v113 = (uint64_t)v235;
                  v124 = v236;
                }
                if (v143 >= *((_QWORD *)v144 + 2))
                  goto LABEL_162;
                v122 = 1.0;
                v159 = (v157 * v156 + 1.0) / (v156 + 1.0);
                v160 = &v144[3 * v143];
                v160[4] = v159;
                v160[5] = v156 + 1.0;
                *((_BYTE *)v160 + 48) = 0;
                v161 = v116 < v159;
                if (v116 < v159)
                  v116 = (v157 * v156 + 1.0) / (v156 + 1.0);
                v162 = v222;
                if (v161)
                  v162 = v156 + 1.0;
                v163 = v117 < 0.0;
                if (v159 < v117)
                  v163 = 1;
                if (v163)
                  v117 = (v157 * v156 + 1.0) / (v156 + 1.0);
                v164 = v223;
                if (v163)
                  v164 = v156 + 1.0;
                v222 = v162;
                v223 = v164;
              }
              v165 = v158[2];
              v227 = v158;
              v166 = (double *)(v158 + 4);
              v167 = v144 + 4;
              v123 = 0.0;
              if (v165 && (v158[6] & 1) == 0 && *((_QWORD *)v144 + 2))
              {
                v119 = v133;
                if (((_BYTE)v144[6] & 1) == 0)
                {
                  v121 = v132;
                  v120 = (unint64_t)v238;
                  if (*v167 > 0.0)
                  {
                    if (*v166 / *v167 > 0.0)
                      v123 = *v166 / *v167;
                    else
                      v123 = 0.0;
                  }
LABEL_112:
                  if (v165 > 1 && ((_BYTE)v166[5] & 1) == 0 && *((_QWORD *)v144 + 2) > 1uLL)
                  {
                    v168 = v144 + 7;
                    if (((_BYTE)v144[9] & 1) == 0 && *v168 > 0.0 && v166[3] / *v168 > v123)
                      v123 = v166[3] / *v168;
                  }
                  if (v165 > 2 && ((_BYTE)v166[8] & 1) == 0 && *((_QWORD *)v144 + 2) > 2uLL)
                  {
                    v169 = v144 + 10;
                    if (((_BYTE)v144[12] & 1) == 0 && *v169 > 0.0 && v166[6] / *v169 > v123)
                      v123 = v166[6] / *v169;
                  }
                  if (v165 > 3 && ((_BYTE)v166[11] & 1) == 0 && *((_QWORD *)v144 + 2) > 3uLL)
                  {
                    v170 = v144 + 13;
                    if (((_BYTE)v144[15] & 1) == 0 && *v170 > 0.0 && v166[9] / *v170 > v123)
                      v123 = v166[9] / *v170;
                  }
                  if (v165 > 4 && ((_BYTE)v166[14] & 1) == 0 && *((_QWORD *)v144 + 2) > 4uLL)
                  {
                    v171 = v144 + 16;
                    if (((_BYTE)v144[18] & 1) == 0 && *v171 > 0.0 && v166[12] / *v171 > v123)
                      v123 = v166[12] / *v171;
                  }
                  if (v165 > 5 && ((_BYTE)v166[17] & 1) == 0 && *((_QWORD *)v144 + 2) > 5uLL)
                  {
                    v172 = v144 + 19;
                    if (((_BYTE)v144[21] & 1) == 0 && *v172 > 0.0 && v166[15] / *v172 > v123)
                      v123 = v166[15] / *v172;
                  }
                  *(_QWORD *)&v228 = v144;
                  if (v165 > 6)
                  {
                    v173 = v166 + 18;
                    if (((_BYTE)v173[2] & 1) == 0 && *((_QWORD *)v144 + 2) > 6uLL)
                    {
                      v174 = v144 + 22;
                      if (((_BYTE)v144[24] & 1) == 0 && *v174 > 0.0 && *v173 / *v174 > v123)
                        v123 = *v173 / *v174;
                    }
                  }
LABEL_54:
                  v230(v124, v239);
                  continue;
                }
              }
              else
              {
                v119 = v133;
              }
              v121 = v132;
              v120 = (unint64_t)v238;
              goto LABEL_112;
            }
            break;
          }
          v113 = (uint64_t)v235;
          v124 = v236;
          v119 = v133;
          v121 = v132;
          v120 = (unint64_t)v238;
          goto LABEL_54;
        }
LABEL_38:
        v99 = 0.0;
        goto LABEL_40;
      }
    }
  }
  if (a3)
  {
    v43 = (void *)_convertErrorToNSError(_:)(a3);
    v44 = static os_log_type_t.error.getter(v43);
    v45 = (void *)HKLogActivity;
    v46 = sub_100047110((uint64_t *)&unk_100827460);
    v47 = swift_allocObject(v46, 112, 7);
    *(_OWORD *)(v47 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v47 + 56) = sub_10001E724(0, &qword_100821E90, HKQuantityType_ptr);
    *(_QWORD *)(v47 + 64) = sub_1001F8BA4(&qword_100827470, &qword_100821E90, HKQuantityType_ptr);
    *(_QWORD *)(v47 + 32) = a4;
    *(_QWORD *)(v47 + 96) = sub_10001E724(0, (unint64_t *)&qword_1008274A0, NSError_ptr);
    *(_QWORD *)(v47 + 104) = sub_1001F8BA4((unint64_t *)&qword_100828C70, (unint64_t *)&qword_1008274A0, NSError_ptr);
    *(_QWORD *)(v47 + 72) = v43;
    v48 = v45;
    v49 = a4;
    v50 = v43;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v48, "Error fetching statistics for quantity type %@: %@", 50, 2, v47);

    swift_bridgeObjectRelease(v47);
  }
  OS_dispatch_semaphore.signal()();
}

uint64_t sub_100047110(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100047150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a17);
    return swift_bridgeObjectRelease(a18);
  }
  return result;
}

uint64_t sub_1000471B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100045B44(a1, a2, a3, (_QWORD *)*v3, &qword_100821650, &qword_100821658);
  *v3 = result;
  return result;
}

uint64_t sub_1000471E4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 192);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    v4);
  return a1;
}

uint64_t sub_100047314(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100047330(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100047330(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821660);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100047110(&qword_100821668);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000474BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = v0[1];
  v25 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v23 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v6);
    v9 = sub_1000476AC(0, v7, 0);
    v8 = (_QWORD *)v23;
    v10 = (double *)(v6 + 32);
    do
    {
      Date.init(timeIntervalSinceReferenceDate:)(v9, *v10);
      v23 = (uint64_t)v8;
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000476AC(v11 > 1, v12 + 1, 1);
        v8 = (_QWORD *)v23;
      }
      v8[2] = v12 + 1;
      v9 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v12, v4, v1);
      ++v10;
      --v7;
    }
    while (v7);
    sub_1000478F4(&v25);
  }
  swift_bridgeObjectRetain(v5);
  v13 = sub_1004DE450((uint64_t)v8, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  v23 = (uint64_t)v13;
  v14 = sub_100047110((uint64_t *)&unk_10081E160);
  v15 = sub_10004791C();
  v16 = BidirectionalCollection<>.joined(separator:)(8202, 0xE200000000000000, v14, v15);
  v18 = v17;
  swift_bridgeObjectRelease(v13);
  v23 = 91;
  v24 = 0xE100000000000000;
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v24;
  swift_bridgeObjectRetain(v24);
  v21._countAndFlagsBits = 93;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  return v23;
}

uint64_t sub_1000476AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100828730, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_1000476D8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100047110(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ActivitySharingFriendListDateItemGroup(uint64_t a1)
{
  uint64_t result;

  result = qword_1008245B0;
  if (!qword_1008245B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingFriendListDateItemGroup);
  return result;
}

_QWORD *sub_1000478F4(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_10004791C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10082BC00;
  if (!qword_10082BC00)
  {
    v1 = sub_100007050((uint64_t *)&unk_10081E160);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10082BC00);
  }
  return result;
}

_QWORD *sub_100047968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v4 = v3;
  v34 = a3;
  v7 = sub_100047110(&qword_100821AA0);
  __chkstk_darwin(v7);
  v31 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for ActivitySharingFriendListItem(0);
  v35 = *(_QWORD *)(v33 - 8);
  v9 = __chkstk_darwin(v33);
  v32 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v28 = (uint64_t)v27 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    v27[1] = v4;
    v29 = *(void **)(a2 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_pauseRingsCoordinator);
    v30 = a1 & 0xC000000000000001;
    v13 = _swiftEmptyArrayStorage;
    for (i = 4; ; ++i)
    {
      v36 = v13;
      v15 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1) : *(id *)(a1 + 8 * i);
      v16 = v15;
      v4 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v17 = a1;
      v18 = objc_msgSend(v15, "friend");
      v19 = objc_msgSend(v16, "snapshot");
      v20 = v31;
      sub_100130944(v18, v19, v34, v29, v31);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v20, 1, v33) == 1)
      {
        sub_10001BE90((uint64_t)v20, &qword_100821AA0);
        a1 = v17;
        v13 = v36;
      }
      else
      {
        v21 = (uint64_t)v20;
        v22 = v28;
        sub_100047C88(v21, v28, type metadata accessor for ActivitySharingFriendListItem);
        sub_100047C88(v22, v32, type metadata accessor for ActivitySharingFriendListItem);
        v13 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
          v13 = (_QWORD *)sub_100047D08(0, v13[2] + 1, 1, (unint64_t)v13);
        a1 = v17;
        v24 = v13[2];
        v23 = v13[3];
        if (v24 >= v23 >> 1)
          v13 = (_QWORD *)sub_100047D08(v23 > 1, v24 + 1, 1, (unint64_t)v13);
        v13[2] = v24 + 1;
        sub_100047C88(v32, (uint64_t)v13+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v24, type metadata accessor for ActivitySharingFriendListItem);
      }
      if (v4 == v12)
      {
        swift_bridgeObjectRelease(a1);
        return v13;
      }
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100047C88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ActivitySharingFriendListItem(uint64_t a1)
{
  uint64_t result;

  result = qword_100827F08;
  if (!qword_100827F08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingFriendListItem);
  return result;
}

uint64_t sub_100047D08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008221B8, type metadata accessor for ActivitySharingFriendListItem);
}

void sub_100047D1C(id a1@<X1>, id a2@<X2>, id a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v9;
  id v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSNumber v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  unint64_t v27;
  char v28;
  void *v29;
  NSSet v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v9 = a1;
  switch(a4)
  {
    case 0:
    case 1:
      a3 = objc_msgSend(a2, "as_movePercentStringWithContext:snapshot:", a5, a1);
      v10 = a3;
      if (a3)
        goto LABEL_27;
      __break(1u);
      goto LABEL_4;
    case 2:
      v10 = objc_msgSend(a2, "as_exerciseProgressStringWithContext:", a5, a1);
      if (v10)
        goto LABEL_27;
      __break(1u);
LABEL_9:
      a3 = objc_msgSend(a2, "as_stepsStringWithContext:", a5, v9);
      v10 = a3;
      if (a3)
        goto LABEL_27;
      __break(1u);
LABEL_11:
      v10 = a3;
      if (v9)
        objc_msgSend(v9, "snapshotIndex", a2);
LABEL_15:
      v18.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
      v19 = objc_msgSend(v10, "friendWorkouts");
      if (!v19)
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        {
          sub_1002302D4((uint64_t)_swiftEmptyArrayStorage);
          v29 = v32;
        }
        else
        {
          v29 = &_swiftEmptySetSingleton;
        }
        goto LABEL_22;
      }

      v20 = objc_msgSend(v10, "friendWorkouts");
      if (!v20)
      {
LABEL_31:
        __break(1u);
        return;
      }
      v21 = v20;
      v22 = sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
      v23 = sub_100047110(&qword_100821A78);
      v24 = sub_10001E6E4((unint64_t *)&qword_100828940, (unint64_t *)&qword_100828930, NSNumber_ptr);
      v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v22, v23, v24);

      if (*(_QWORD *)(v25 + 16))
      {
        v26 = v18.super.super.isa;
        v27 = sub_1004395DC((uint64_t)v26);
        if ((v28 & 1) != 0)
        {
          v29 = *(void **)(*(_QWORD *)(v25 + 56) + 8 * v27);
          swift_bridgeObjectRetain(v29);

          swift_bridgeObjectRelease(v25);
LABEL_22:
          sub_10001E724(0, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
          sub_10001E6E4(&qword_100821A70, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
          v30.super.isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v29);
          goto LABEL_25;
        }

      }
      swift_bridgeObjectRelease(v25);
      v30.super.isa = 0;
LABEL_25:
      v10 = (id)ASWorkoutNameString(v30.super.isa, a5);

      if (!v10)
      {
        __break(1u);
        goto LABEL_31;
      }

LABEL_27:
      AttributedString.init(_:)(v10);
      v31 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a6, 0, 1, v31);
      return;
    case 3:
      goto LABEL_9;
    case 4:
      goto LABEL_11;
    case 5:
      v10 = objc_msgSend(a2, "as_pushesStringWithContext:", a5, a1);
      if (v10)
        goto LABEL_27;
      __break(1u);
      goto LABEL_15;
    default:
LABEL_4:
      v11 = static os_log_type_t.fault.getter(a3);
      v12 = (void *)HKLogActivity;
      v13 = v11;
      if (os_log_type_enabled(HKLogActivity, v11))
      {
        v14 = v12;
        v15 = swift_slowAlloc(22, -1);
        v16 = swift_slowAlloc(32, -1);
        v34 = v16;
        *(_DWORD *)v15 = 136315394;
        v33 = sub_10003E8EC(0xD000000000000049, 0x800000010068A5C0, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 4);
        *(_WORD *)(v15 + 12) = 2048;
        v33 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 14);
        _os_log_impl((void *)&_mh_execute_header, v14, v13, "%s found unexpected ASFriendListDisplayMode %ld", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      v17 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a6, 1, 1, v17);
      return;
  }
}

void sub_100048184(id a1@<X1>, id a2@<X2>, id a3@<X0>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  id v11;
  id v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSNumber v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  unint64_t v31;
  char v32;
  void *v33;
  NSSet v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v9 = v6;
  v11 = a1;
  switch(a4)
  {
    case 0:
    case 1:
      a3 = objc_msgSend(a2, "as_moveProgressStringWithContext:formattingManager:snapshot:", a5, *(_QWORD *)(v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_fiuiFormattingManager), a1);
      v12 = a3;
      if (a3)
        goto LABEL_26;
      __break(1u);
      goto LABEL_4;
    case 2:
      v12 = objc_msgSend(a2, "as_exerciseDurationStringWithContext:", a5);
      if (v12)
        goto LABEL_26;
      __break(1u);
LABEL_9:
      a3 = objc_msgSend(a2, "as_distanceStringWithContext:formattingManager:", a5, *(_QWORD *)(v9 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_fiuiFormattingManager), v11);
      v12 = a3;
      if (a3)
        goto LABEL_26;
      __break(1u);
LABEL_11:
      v20 = a3;
      if (v11)
        objc_msgSend(v11, "snapshotIndex", a2);
      v22.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
      v23 = objc_msgSend(v20, "friendWorkouts");
      if (!v23)
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        {
          sub_1002302D4((uint64_t)_swiftEmptyArrayStorage);
          v33 = v36;
        }
        else
        {
          v33 = &_swiftEmptySetSingleton;
        }
        goto LABEL_21;
      }

      v24 = objc_msgSend(v20, "friendWorkouts");
      if (!v24)
      {
LABEL_31:
        __break(1u);
        return;
      }
      v25 = v24;
      v26 = sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
      v27 = sub_100047110(&qword_100821A78);
      v28 = sub_10001E6E4((unint64_t *)&qword_100828940, (unint64_t *)&qword_100828930, NSNumber_ptr);
      v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v25, v26, v27, v28);

      if (*(_QWORD *)(v29 + 16))
      {
        v30 = v22.super.super.isa;
        v31 = sub_1004395DC((uint64_t)v30);
        if ((v32 & 1) != 0)
        {
          v33 = *(void **)(*(_QWORD *)(v29 + 56) + 8 * v31);
          swift_bridgeObjectRetain(v33);

          swift_bridgeObjectRelease(v29);
LABEL_21:
          sub_10001E724(0, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
          sub_10001E6E4(&qword_100821A70, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
          v34.super.isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v33);
          goto LABEL_24;
        }

      }
      swift_bridgeObjectRelease(v29);
      v34.super.isa = 0;
LABEL_24:
      v12 = (id)ASWorkoutCaloriesString(v34.super.isa, a5, *(_QWORD *)(v9+ OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_fiuiFormattingManager));

      if (!v12)
      {
        __break(1u);
        goto LABEL_31;
      }

LABEL_26:
      AttributedString.init(_:)(v12);
      v35 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a6, 0, 1, v35);
      return;
    case 3:
      goto LABEL_9;
    case 4:
      goto LABEL_11;
    case 5:
      v21 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a6, 1, 1, v21);
      return;
    default:
LABEL_4:
      v13 = static os_log_type_t.fault.getter(a3);
      v14 = (void *)HKLogActivity;
      v15 = v13;
      if (os_log_type_enabled(HKLogActivity, v13))
      {
        v16 = v14;
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(32, -1);
        v38 = v18;
        *(_DWORD *)v17 = 136315394;
        v37 = sub_10003E8EC(0xD00000000000004CLL, 0x800000010068A570, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 4);
        *(_WORD *)(v17 + 12) = 2048;
        v37 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 14);
        _os_log_impl((void *)&_mh_execute_header, v16, v15, "%s found unexpected ASFriendListDisplayMode %ld", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      v19 = type metadata accessor for AttributedString(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a6, 1, 1, v19);
      return;
  }
}

uint64_t sub_100048618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020A8C4);
}

uint64_t sub_100048624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020A820);
}

uint64_t sub_100048630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  id v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  _QWORD v49[2];
  unsigned int v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  _QWORD *v60;

  v0 = type metadata accessor for Calendar.Component(0);
  v1 = *(_QWORD *)(v0 - 8);
  v56 = v0;
  v57 = v1;
  __chkstk_darwin(v0);
  v55 = (char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v3);
  v54 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v49 - v11;
  v13 = __chkstk_darwin(v10);
  v59 = (char *)v49 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v49 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)v49 - v18;
  if (qword_10081D550 != -1)
    swift_once(&qword_10081D550, sub_10000968C);
  v20 = type metadata accessor for Calendar(0);
  v21 = sub_10003CE9C(v20, (uint64_t)qword_100869D28);
  DateInterval.start.getter(v21);
  Calendar.startOfDay(for:)(v17);
  v22 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v23 = v22(v17, v5);
  DateInterval.end.getter(v23);
  v24 = v59;
  v53 = v21;
  Calendar.startOfDay(for:)(v17);
  v58 = (void (*)(char *, uint64_t))v22;
  v22(v17, v5);
  v25 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v49[0] = v19;
  v52 = v25;
  v25(v12, v19, v5);
  if ((static Date.< infix(_:_:)(v12, v24) & 1) != 0)
  {
    v50 = enum case for Calendar.Component.day(_:);
    v26 = _swiftEmptyArrayStorage;
    v51 = v12;
    v27 = v57;
    v28 = (uint64_t)v54;
    while (1)
    {
      v52(v9, v12, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        v26 = (_QWORD *)sub_100048E4C(0, v26[2] + 1, 1, (unint64_t)v26);
      v30 = v26[2];
      v29 = v26[3];
      if (v30 >= v29 >> 1)
        v26 = (_QWORD *)sub_100048E4C(v29 > 1, v30 + 1, 1, (unint64_t)v26);
      v26[2] = v30 + 1;
      v31 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v60 = v26;
      v32 = (char *)v26 + v31 + *(_QWORD *)(v6 + 72) * v30;
      v33 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v34 = v9;
      v33(v32, v9, v5);
      v35 = v5;
      v36 = v6;
      v37 = v55;
      v38 = v56;
      (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v55, v50, v56);
      v12 = v51;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v37, 1, v51, 0);
      v39 = v37;
      v6 = v36;
      v5 = v35;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v39, v38);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v28, 1, v35) == 1)
        break;
      v58(v12, v35);
      v33(v12, (char *)v28, v35);
      v40 = static Date.< infix(_:_:)(v12, v59);
      v9 = v34;
      v26 = v60;
      if ((v40 & 1) == 0)
        goto LABEL_14;
    }
    sub_10001BE90(v28, (uint64_t *)&unk_100828370);
    v26 = v60;
  }
  else
  {
    v26 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v41 = (id)v49[1];
  v42 = swift_bridgeObjectRetain(v26);
  v43 = sub_100044DB4(v42, (uint64_t)v41);
  swift_bridgeObjectRelease_n(v26, 2);

  if ((unint64_t)v43 >> 62)
  {
    if (v43 < 0)
      v48 = v43;
    else
      v48 = v43 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v43);
    v44 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v45 = (char *)v49[0];
  swift_bridgeObjectRelease(v43);
  v46 = v58;
  v58(v12, v5);
  v46(v59, v5);
  v46(v45, v5);
  return v44;
}

_QWORD *sub_100048AA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char v35;
  char *v37;
  char *v38;
  unsigned int v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD *v46;

  v44 = type metadata accessor for Calendar.Component(0);
  v2 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v37 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v37 - v17;
  v19 = DateInterval.start.getter(v16);
  v43 = a1;
  DateInterval.end.getter(v19);
  v42 = sub_1000083D8((unint64_t *)&qword_1008274E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v20 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v18, v8);
  v45 = *(void (**)(char *, uint64_t))(v9 + 8);
  v45(v15, v8);
  if ((v20 & 1) != 0)
  {
    v21 = _swiftEmptyArrayStorage;
LABEL_3:
    v45(v18, v8);
  }
  else
  {
    v40 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v39 = enum case for Calendar.Component.day(_:);
    v21 = _swiftEmptyArrayStorage;
    v41 = v18;
    v37 = v15;
    v38 = v12;
    while (1)
    {
      v40(v12, v18, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        v21 = (_QWORD *)sub_100048E4C(0, v21[2] + 1, 1, (unint64_t)v21);
      v23 = v21[2];
      v22 = v21[3];
      if (v23 >= v22 >> 1)
        v21 = (_QWORD *)sub_100048E4C(v22 > 1, v23 + 1, 1, (unint64_t)v21);
      v21[2] = v23 + 1;
      v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v46 = v21;
      v25 = (char *)v21 + v24 + *(_QWORD *)(v9 + 72) * v23;
      v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v26(v25, v12, v8);
      if (qword_10081D548 != -1)
        swift_once(&qword_10081D548, sub_100005A80);
      v27 = type metadata accessor for Calendar(0);
      sub_10003CE9C(v27, (uint64_t)qword_100869D10);
      v28 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
      v29 = v2;
      v30 = v44;
      v28(v4, v39, v44);
      v18 = v41;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v4, 1, v41, 0);
      v31 = v30;
      v2 = v29;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v31);
      v32 = v45;
      v45(v18, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
        break;
      v33 = ((uint64_t (*)(char *, char *, uint64_t))v26)(v18, v7, v8);
      v34 = v37;
      DateInterval.end.getter(v33);
      v35 = dispatch thunk of static Comparable.< infix(_:_:)(v34, v18, v8);
      v32(v34, v8);
      v12 = v38;
      v21 = v46;
      if ((v35 & 1) != 0)
        goto LABEL_3;
    }
    sub_10001BE90((uint64_t)v7, (uint64_t *)&unk_100828370);
    return v46;
  }
  return v21;
}

uint64_t sub_100048E4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, (uint64_t *)&unk_100828730, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

void sub_100048E60(__int128 *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE __dst[1832];
  _BYTE __src[1832];
  _BYTE v20[1832];
  _BYTE v21[1832];
  _BYTE v22[1832];
  _BYTE v23[1832];
  _QWORD v24[229];
  _QWORD v25[229];
  _BYTE v26[1832];

  v3 = v2;
  memcpy(v26, a2, sizeof(v26));
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_fakingEnabled) == 1)
  {
    sub_10029CA90(a1, v24);
    memcpy(__dst, v24, sizeof(__dst));
    sub_10029CA90((__int128 *)a2, v25);
    memcpy(__src, v25, sizeof(__src));
    memcpy(v20, __dst, sizeof(v20));
    ASFriendListDisplayMode.id.getter(v20);
    v6 = v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation365;
    sub_10003F6A0(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation365, (uint64_t)v21);
    sub_10003F6A0((uint64_t)v20, v6);
    sub_100049488(v24);
    sub_10003F0D8((uint64_t)v21);
    v7 = sub_10004A820();
    sub_100221B70(v24);
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365) = v7;
    swift_bridgeObjectRelease(v8);
    memcpy(v22, __src, sizeof(v22));
    ASFriendListDisplayMode.id.getter(v22);
    v9 = v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation90;
    sub_10003F6A0(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation90, (uint64_t)v23);
    sub_10003F6A0((uint64_t)v22, v9);
    sub_100049488(v25);
    sub_10003F0D8((uint64_t)v23);
    v10 = sub_10004A820();
    sub_100221B70(v25);
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90) = v10;
  }
  else
  {
    memcpy(v22, a1, sizeof(v22));
    ASFriendListDisplayMode.id.getter(v22);
    v12 = v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation365;
    sub_10003F6A0(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation365, (uint64_t)v23);
    sub_10003F6A0((uint64_t)v22, v12);
    sub_100049488(a1);
    sub_10003F0D8((uint64_t)v23);
    v13 = sub_10004A820();
    v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365) = v13;
    swift_bridgeObjectRelease(v14);
    memcpy(v24, v26, sizeof(v24));
    ASFriendListDisplayMode.id.getter(v24);
    v15 = v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation90;
    sub_10003F6A0(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsCompilation90, (uint64_t)v25);
    sub_10003F6A0((uint64_t)v24, v15);
    sub_100049488(a2);
    sub_10003F0D8((uint64_t)v25);
    v16 = sub_10004A820();
    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90) = v16;
    v11 = v17;
  }
  swift_bridgeObjectRelease(v11);
  sub_10004979C();
}

uint64_t sub_100049144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a68;
  uint64_t result;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;

  if (a3)
  {
    v104 = STACK[0x850];
    v105 = STACK[0x858];
    v102 = STACK[0x818];
    v103 = STACK[0x820];
    v100 = STACK[0x7E0];
    v101 = STACK[0x7E8];
    v98 = STACK[0x788];
    v99 = STACK[0x790];
    v96 = STACK[0x750];
    v97 = STACK[0x758];
    v94 = STACK[0x718];
    v95 = STACK[0x720];
    v92 = STACK[0x6C0];
    v93 = STACK[0x6C8];
    v90 = STACK[0x688];
    v91 = STACK[0x690];
    v89 = STACK[0x658];
    v88 = STACK[0x650];
    v87 = STACK[0x600];
    v86 = STACK[0x5F8];
    v85 = STACK[0x5C8];
    v84 = STACK[0x5C0];
    v83 = STACK[0x590];
    v82 = STACK[0x588];
    v81 = STACK[0x538];
    v80 = STACK[0x530];
    v79 = STACK[0x500];
    v78 = STACK[0x4F8];
    v77 = STACK[0x4C8];
    v76 = STACK[0x4C0];
    v75 = STACK[0x470];
    v74 = STACK[0x468];
    v73 = STACK[0x438];
    v72 = STACK[0x430];
    v71 = STACK[0x400];
    v70 = STACK[0x3F8];
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a17);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a28);
    swift_bridgeObjectRelease(a29);
    swift_bridgeObjectRelease(a35);
    swift_bridgeObjectRelease(a36);
    swift_bridgeObjectRelease(a42);
    swift_bridgeObjectRelease(a43);
    swift_bridgeObjectRelease(a53);
    swift_bridgeObjectRelease(a54);
    swift_bridgeObjectRelease(a60);
    swift_bridgeObjectRelease(a61);
    swift_bridgeObjectRelease(a67);
    swift_bridgeObjectRelease(a68);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v74);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v87);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v104);
    return swift_bridgeObjectRelease(v105);
  }
  return result;
}

_QWORD *sub_100049488(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = a1[3];
  v4 = a1[9];
  v3 = a1[10];
  v6 = a1[16];
  v5 = a1[17];
  v8 = a1[27];
  v7 = a1[28];
  v9 = a1[34];
  v10 = a1[35];
  v12 = a1[41];
  v13 = a1[42];
  v14 = a1[52];
  v15 = a1[53];
  v16 = a1[59];
  v17 = a1[60];
  v18 = a1[66];
  v19 = a1[67];
  v20 = a1[77];
  v21 = a1[78];
  v22 = a1[84];
  v23 = a1[85];
  v24 = a1[91];
  v25 = a1[92];
  v26 = a1[102];
  v27 = a1[103];
  v28 = a1[109];
  v29 = a1[110];
  v30 = a1[116];
  v31 = a1[117];
  v32 = a1[127];
  v33 = a1[128];
  v34 = a1[134];
  v35 = a1[135];
  v36 = a1[141];
  v37 = a1[142];
  v38 = a1[152];
  v39 = a1[153];
  v40 = a1[159];
  v41 = a1[160];
  v42 = a1[166];
  v43 = a1[167];
  v44 = a1[177];
  v45 = a1[178];
  v46 = a1[184];
  v47 = a1[185];
  v48 = a1[191];
  v49 = a1[192];
  v50 = a1[202];
  v51 = a1[203];
  v52 = a1[209];
  v53 = a1[210];
  v54 = a1[216];
  v55 = a1[217];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v55);
  return a1;
}

void sub_10004979C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidUpTrends);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidUpTrends, v12, 1, 0);
  v2 = *v1;
  *v1 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidDownTrends);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidDownTrends, v11, 1, 0);
  v4 = *v3;
  *v3 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v4);
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedInvalidTrends);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedInvalidTrends, v10, 1, 0);
  v6 = *v5;
  *v5 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v6);
  v7 = 9;
  v8 = &byte_10077B668;
  do
  {
    v9 = *v8++;
    sub_100049878(v9, v0);
    --v7;
  }
  while (v7);
}

void sub_100049878(uint64_t a1, uint64_t a2)
{
  id v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _BYTE v46[24];
  _OWORD v47[12];
  char v48;
  _OWORD v49[12];
  char v50;

  v4 = sub_100049D4C();
  v5 = sub_100049B20(a1, (uint64_t)v4);
  swift_bridgeObjectRelease(v4);
  if (!v5)
  {
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType365);
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = sub_100049DE0(a1);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v6 + 56) + 200 * v7;
        v10 = *(_OWORD *)(v9 + 48);
        v11 = *(_OWORD *)(v9 + 64);
        v12 = *(_OWORD *)(v9 + 32);
        v49[1] = *(_OWORD *)(v9 + 16);
        v49[2] = v12;
        v49[0] = *(_OWORD *)v9;
        v49[3] = v10;
        v49[4] = v11;
        v13 = *(_OWORD *)(v9 + 80);
        v14 = *(_OWORD *)(v9 + 96);
        v15 = *(_OWORD *)(v9 + 128);
        v49[7] = *(_OWORD *)(v9 + 112);
        v49[8] = v15;
        v49[5] = v13;
        v49[6] = v14;
        v16 = *(_OWORD *)(v9 + 144);
        v17 = *(_OWORD *)(v9 + 160);
        v18 = *(_OWORD *)(v9 + 176);
        v50 = *(_BYTE *)(v9 + 192);
        v49[10] = v17;
        v49[11] = v18;
        v49[9] = v16;
        v19 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_statisticsByTrendType90);
        if (*(_QWORD *)(v19 + 16))
        {
          v20 = sub_100049DE0(a1);
          if ((v21 & 1) != 0)
          {
            v22 = *(_QWORD *)(v19 + 56) + 200 * v20;
            v23 = *(_OWORD *)(v22 + 48);
            v24 = *(_OWORD *)(v22 + 64);
            v25 = *(_OWORD *)(v22 + 32);
            v47[1] = *(_OWORD *)(v22 + 16);
            v47[2] = v25;
            v26 = *(_OWORD *)v22;
            v47[3] = v23;
            v47[4] = v24;
            v47[0] = v26;
            v27 = *(_OWORD *)(v22 + 80);
            v28 = *(_OWORD *)(v22 + 96);
            v29 = *(_OWORD *)(v22 + 128);
            v47[7] = *(_OWORD *)(v22 + 112);
            v47[8] = v29;
            v47[5] = v27;
            v47[6] = v28;
            v30 = *(_OWORD *)(v22 + 144);
            v31 = *(_OWORD *)(v22 + 160);
            v32 = *(_OWORD *)(v22 + 176);
            v48 = *(_BYTE *)(v22 + 192);
            v47[10] = v31;
            v47[11] = v32;
            v47[9] = v30;
            v33 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_pairedWatchManager);
            v34 = *(_BYTE *)(v33 + 24);
            sub_10004AE58(v49);
            sub_10004AE58(v47);
            if (sub_100049E4C(a1, v34) && sub_100049E4C(a1, *(_BYTE *)(v33 + 24)))
            {
              v35 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_unitManager);
              v36 = sub_100035C90(v35, a1, *(double *)v47);
              v37 = sub_100035C90(v35, a1, *(double *)v49);
              sub_100049DE4(v49);
              sub_100049DE4(v47);
              if (v37 <= v36)
                v38 = OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidUpTrends;
              else
                v38 = OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedValidDownTrends;
            }
            else
            {
              sub_100049DE4(v49);
              sub_100049DE4(v47);
              v38 = OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_orderedInvalidTrends;
            }
            v39 = (_QWORD *)(a2 + v38);
            swift_beginAccess(a2 + v38, v46, 33, 0);
            v40 = (_QWORD *)*v39;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v39);
            *v39 = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v40 = sub_10004AEC4(0, v40[2] + 1, 1, v40);
              *v39 = v40;
            }
            v43 = v40[2];
            v42 = v40[3];
            v44 = v43 + 1;
            if (v43 >= v42 >> 1)
            {
              v45 = sub_10004AEC4((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
              v44 = v43 + 1;
              v40 = v45;
              *v39 = v45;
            }
            v40[2] = v44;
            *((_BYTE *)v40 + v43 + 32) = a1;
            swift_endAccess(v46);
          }
        }
      }
    }
  }
}

BOOL sub_100049B20(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13, *(_QWORD *)(a2 + 40));
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

Swift::Int sub_100049C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100047110(&qword_100829188);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

id sub_100049D4C()
{
  uint64_t v0;
  id result;
  void *v2;
  unsigned int v3;
  _UNKNOWN **v4;

  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "isStandalonePhoneFitnessMode");

    if (v3)
    {
      if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp18TrendsDataProvider_lastWheelchairUseValue))
        v4 = &off_10077B5D0;
      else
        v4 = &off_10077B5F8;
    }
    else
    {
      v4 = &off_10077B620;
    }
    return (id)sub_100049C0C((uint64_t)v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100049DE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[16];
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

BOOL sub_100049E4C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  _BOOL8 result;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[7];
  uint64_t v45[7];
  _QWORD v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[16];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _OWORD v54[2];
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  uint64_t v58;

  v3 = a1;
  if (a1 == 8 && (!a2 || a2 == 3 || *(double *)v2 <= 2.22044605e-16))
  {
    v6 = static os_log_type_t.fault.getter();
    v7 = (void *)HKLogActivity;
    v8 = v6;
    result = os_log_type_enabled(HKLogActivity, v6);
    if (!result)
      return result;
    v10 = v7;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v57[0] = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)&v54[0] = sub_10003E8EC(0xD000000000000024, 0x80000001006A5070, (uint64_t *)v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, (char *)v54 + 8, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v8, "%s found unexpected flight type; re-enable TrendsPairedWatchManager.populate()",
      v11,
      0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return 0;
  }
  if (qword_10081E0B8 != -1)
    a1 = swift_once(&qword_10081E0B8, sub_10004EAD0);
  if ((byte_10083D1A1 & 1) != 0)
  {
    v4 = 1;
    v5 = 1;
  }
  else
  {
    v13 = 8 * v3;
    v4 = *(_QWORD *)((char *)&unk_1006449E0 + v13);
    v5 = *(_QWORD *)((char *)&unk_100644A28 + v13);
  }
  v14 = *(_OWORD *)(v2 + 32);
  v54[0] = *(_OWORD *)(v2 + 16);
  v54[1] = v14;
  v55 = *(_OWORD *)(v2 + 48);
  v56 = *(_QWORD *)(v2 + 64);
  v58 = v56;
  v57[1] = v14;
  v57[2] = v55;
  v57[0] = v54[0];
  v15 = *(_QWORD *)(*(_QWORD *)&v54[0] + 16);
  if (v15 < 0xB6)
  {
    __chkstk_darwin(a1);
    v16 = swift_bridgeObjectRetain(*((_QWORD *)&v57[0] + 1));
    v17 = sub_1005B8E34(v16, (uint64_t (*)(_QWORD, double))sub_100221E94);
    swift_bridgeObjectRelease(*((_QWORD *)&v57[0] + 1));
    v18 = v17[2];
    swift_bridgeObjectRelease(v17);
    return v18 >= v5;
  }
  sub_10004A370(v15 - 183, v15 - 1, (double *)v44);
  sub_10004A328((uint64_t)v44, (uint64_t)v50);
  v20 = v50[0];
  if (!v50[0])
    return 0;
  v21 = v50[1];
  v22 = v50[2];
  v23 = v50[3];
  v24 = v50[4];
  v25 = v50[5];
  v26 = v50[6];
  sub_10004A370(v15 - 91, v15 - 1, (double *)v45);
  v27 = sub_10004A328((uint64_t)v45, (uint64_t)v46);
  v28 = v46[0];
  if (!v46[0])
    goto LABEL_20;
  v29 = v46[1];
  v42 = v48;
  v43 = v47;
  v30 = v49;
  v50[7] = v20;
  v50[8] = v21;
  v50[9] = v22;
  v50[10] = v23;
  v50[11] = v24;
  v50[12] = v25;
  v50[13] = v26;
  __chkstk_darwin(v27);
  v31 = swift_bridgeObjectRetain(v21);
  v32 = sub_1005B8E34(v31, (uint64_t (*)(_QWORD, double))sub_1002219EC);
  swift_bridgeObjectRelease(v21);
  v33 = v32[2];
  swift_bridgeObjectRelease(v32);
  v50[14] = v28;
  v50[15] = v29;
  v51 = v43;
  v52 = v42;
  v53 = v30;
  __chkstk_darwin(v34);
  v35 = swift_bridgeObjectRetain(v29);
  v36 = sub_1005B8E34(v35, (uint64_t (*)(_QWORD, double))sub_100221E94);
  swift_bridgeObjectRelease(v29);
  sub_10053C850(v45);
  v37 = v36[2];
  swift_bridgeObjectRelease(v36);
  if (v33 == v37)
  {
LABEL_20:
    sub_10053C850(v44);
    return 0;
  }
  __chkstk_darwin(v38);
  v39 = swift_bridgeObjectRetain(v21);
  v40 = sub_1005B8E34(v39, (uint64_t (*)(_QWORD, double))sub_100221E94);
  swift_bridgeObjectRelease(v21);
  sub_10053C850(v44);
  v41 = v40[2];
  swift_bridgeObjectRelease(v40);
  return v41 >= v4;
}

uint64_t sub_10004A2D0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_10004A2FC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10004A328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100839838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double *v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  double v56;
  double v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  double *v66;
  _QWORD *v67;
  double *v68;
  double v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t);
  void (*v72)(_QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  double v82;
  char *v83;
  _QWORD v84[3];
  void (*v85)(_QWORD, _QWORD, _QWORD, _QWORD);
  double *v86;
  uint64_t v87;
  double *v88;

  v7 = sub_100047110((uint64_t *)&unk_100828370);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v72 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = __chkstk_darwin((char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v16);
  result = __chkstk_darwin(v17);
  v23 = (char *)&v72 - v22;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0.0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = a1 & ~(a1 >> 63);
  v32 = *v3;
  v33 = *(_QWORD *)(*v3 + 16);
  if ((uint64_t)v33 <= a2)
    v34 = v33 - 1;
  else
    v34 = a2;
  if (v34 < v31)
    goto LABEL_35;
  if (!__OFSUB__(v34 + 1, v31))
  {
    v35 = v3[1];
    v36 = *(_QWORD *)(v35 + 16);
    if (v31 >= v36)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1);
    }
    else
    {
      v76 = v34 + 1 - v31;
      v77 = v32;
      v78 = v19;
      v79 = result;
      v83 = v23;
      v80 = v21;
      v81 = (double *)(v35 + 32);
      v37 = v20;
      Date.init(timeIntervalSinceReferenceDate:)(result, *(double *)(v35 + 32 + 8 * v31));
      v82 = *(double *)(v14 + 56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))&v82)(v12, 0, 1, v37);
      v38 = v37;
      v39 = v37;
      v40 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v14 + 48);
      if (v40(v12, 1, v39) != 1)
      {
        v41 = v12;
        v42 = v38;
        v75 = *(double **)(v14 + 32);
        v43 = ((uint64_t (*)(char *, char *, uint64_t))v75)(v83, v41, v38);
        if (v34 >= v36)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))&v82)(v10, 1, 1, v38);
        }
        else
        {
          Date.init(timeIntervalSinceReferenceDate:)(v43, v81[v34]);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))&v82)(v10, 0, 1, v38);
          if (v40(v10, 1, v38) != 1)
          {
            v44 = v80;
            ((void (*)(uint64_t, char *, uint64_t))v75)(v80, v10, v42);
            v45 = *(void (**)(void))(v14 + 16);
            v46 = v78;
            v45();
            v47 = v79;
            v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v45)(v79, v44, v42);
            v49 = v46;
            v50 = Date.timeIntervalSinceReferenceDate.getter(v48);
            v52 = Date.timeIntervalSinceReferenceDate.getter(v51);
            sub_10003D1C0(v76, (uint64_t)v84, v50, v52);
            v24 = (_QWORD *)v84[0];
            v73 = v84[2];
            v74 = v84[1];
            v81 = v86;
            v82 = *(double *)&v85;
            v75 = v88;
            v76 = v87;
            v53 = *(void (**)(_QWORD, _QWORD))(v14 + 8);
            v53(v47, v42);
            v54 = v42;
            v72 = v53;
            result = ((uint64_t (*)(uint64_t, uint64_t))v53)(v49, v42);
            v55 = 0;
            v56 = *(double *)&v87;
            v57 = *(double *)&v85;
            v58 = (_QWORD *)v84[0];
            v59 = v77 + 24 * v31;
            v60 = v31 - v34;
            v61 = 4;
            v62 = v54;
            v78 = v60;
            v79 = v59;
            while (1)
            {
              v63 = v31 + v55;
              if (v31 + v55 < v33)
              {
                v64 = v59 + v61 * 8;
                if ((*(_BYTE *)(v59 + v61 * 8 + 16) & 1) == 0 && v55 < v58[2])
                {
                  v65 = *(double *)v64;
                  v66 = *(double **)(v64 + 8);
                  v24 = v58;
                  result = swift_isUniquelyReferenced_nonNull_native(v58);
                  if ((result & 1) == 0)
                  {
                    result = (uint64_t)sub_1004DEE58(v24);
                    v24 = (_QWORD *)result;
                  }
                  if (v55 >= v24[2])
                    goto LABEL_40;
                  v67 = &v24[v61];
                  *(double *)v67 = v65;
                  v67[1] = v66;
                  *((_BYTE *)v67 + 16) = 0;
                  if (v57 >= v65)
                    v68 = v81;
                  else
                    v68 = v66;
                  v69 = v82;
                  if (v57 < v65)
                    v69 = v65;
                  v81 = v68;
                  v82 = v69;
                  if (v57 < v65)
                    v57 = v65;
                  if (v56 < 0.0 || v56 > v65)
                  {
                    v75 = v66;
                    v76 = *(_QWORD *)&v65;
                    v56 = v65;
                  }
                  v58 = v24;
                  v60 = v78;
                  v59 = v79;
                }
              }
              if (!(v60 + v55))
                break;
              ++v55;
              v61 += 3;
              if (__OFADD__(v63, 1))
              {
                __break(1u);
                goto LABEL_39;
              }
            }
            v71 = (uint64_t (*)(_QWORD, _QWORD))v72;
            v72(v80, v62);
            result = v71(v83, v62);
            v26 = v73;
            v25 = v74;
            v28 = v81;
            v27 = v82;
            v30 = v75;
            v29 = v76;
            goto LABEL_35;
          }
        }
        (*(void (**)(char *, uint64_t))(v14 + 8))(v83, v38);
        v70 = (uint64_t)v10;
        goto LABEL_34;
      }
    }
    v70 = (uint64_t)v12;
LABEL_34:
    result = sub_10001BE90(v70, (uint64_t *)&unk_100828370);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0.0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
LABEL_35:
    *(_QWORD *)a3 = v24;
    *((_QWORD *)a3 + 1) = v25;
    *((_QWORD *)a3 + 2) = v26;
    a3[3] = v27;
    *((_QWORD *)a3 + 4) = v28;
    *((_QWORD *)a3 + 5) = v29;
    *((_QWORD *)a3 + 6) = v30;
    return result;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_10004A820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  uint64_t v145;
  _OWORD v147[12];
  char v148;
  _OWORD v149[2];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;
  _OWORD v161[12];
  char v162;
  _OWORD v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char v174;
  _OWORD v175[2];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char v186;
  _OWORD v187[2];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  char v198;
  _OWORD v199[2];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  char v210;
  _OWORD v211[6];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char v218;
  _OWORD v219[2];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  char v230;

  v1 = sub_100047110(&qword_10083D660);
  v2 = swift_allocObject(v1, 1904, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006342B0;
  v3 = *(_OWORD *)(v0 + 144);
  v4 = *(_OWORD *)(v0 + 176);
  v228 = *(_OWORD *)(v0 + 160);
  v5 = v228;
  v229 = v4;
  v6 = *(_OWORD *)(v0 + 80);
  v7 = *(_OWORD *)(v0 + 112);
  v224 = *(_OWORD *)(v0 + 96);
  v8 = v224;
  v225 = v7;
  v9 = *(_OWORD *)(v0 + 112);
  v10 = *(_OWORD *)(v0 + 144);
  v226 = *(_OWORD *)(v0 + 128);
  v11 = v226;
  v227 = v10;
  v12 = *(_OWORD *)(v0 + 16);
  v13 = *(_OWORD *)(v0 + 48);
  v220 = *(_OWORD *)(v0 + 32);
  v14 = v220;
  v221 = v13;
  v15 = *(_OWORD *)(v0 + 48);
  v16 = *(_OWORD *)(v0 + 80);
  v222 = *(_OWORD *)(v0 + 64);
  v17 = v222;
  v223 = v16;
  v18 = *(_OWORD *)(v0 + 16);
  v219[0] = *(_OWORD *)v0;
  v19 = v219[0];
  v219[1] = v18;
  *(_OWORD *)(v2 + 184) = v3;
  *(_OWORD *)(v2 + 200) = v5;
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v2 + 120) = v6;
  *(_OWORD *)(v2 + 136) = v8;
  *(_OWORD *)(v2 + 152) = v9;
  *(_OWORD *)(v2 + 168) = v11;
  *(_OWORD *)(v2 + 56) = v12;
  *(_OWORD *)(v2 + 72) = v14;
  *(_OWORD *)(v2 + 88) = v15;
  *(_OWORD *)(v2 + 104) = v17;
  *(_OWORD *)(v2 + 40) = v19;
  v20 = *(_OWORD *)(v0 + 344);
  v21 = *(_OWORD *)(v0 + 376);
  v216 = *(_OWORD *)(v0 + 360);
  v22 = v216;
  v217 = v21;
  v23 = *(_OWORD *)(v0 + 280);
  v24 = *(_OWORD *)(v0 + 312);
  v212 = *(_OWORD *)(v0 + 296);
  v25 = v212;
  v213 = v24;
  v27 = *(_OWORD *)(v0 + 312);
  v26 = *(_OWORD *)(v0 + 328);
  v28 = v26;
  v215 = *(_OWORD *)(v0 + 344);
  v214 = v26;
  v29 = *(_OWORD *)(v0 + 216);
  v30 = *(_OWORD *)(v0 + 248);
  v211[2] = *(_OWORD *)(v0 + 232);
  v211[3] = v30;
  v31 = *(_OWORD *)(v0 + 264);
  v32 = v31;
  v211[5] = *(_OWORD *)(v0 + 280);
  v211[4] = v31;
  v33 = *(_OWORD *)(v0 + 200);
  v211[1] = v29;
  v211[0] = v33;
  *(_OWORD *)(v2 + 392) = v20;
  *(_OWORD *)(v2 + 408) = v22;
  *(_OWORD *)(v2 + 424) = *(_OWORD *)(v0 + 376);
  *(_OWORD *)(v2 + 328) = v23;
  *(_OWORD *)(v2 + 344) = v25;
  *(_OWORD *)(v2 + 360) = v27;
  *(_OWORD *)(v2 + 376) = v28;
  v34 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v2 + 280) = v34;
  *(_OWORD *)(v2 + 296) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v2 + 312) = v32;
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(v0 + 200);
  v35 = *(_OWORD *)(v0 + 544);
  v36 = *(_OWORD *)(v0 + 576);
  v208 = *(_OWORD *)(v0 + 560);
  v209 = v36;
  v37 = *(_OWORD *)(v0 + 480);
  v38 = *(_OWORD *)(v0 + 512);
  v204 = *(_OWORD *)(v0 + 496);
  v39 = v204;
  v205 = v38;
  v41 = *(_OWORD *)(v0 + 512);
  v40 = *(_OWORD *)(v0 + 528);
  v42 = v40;
  v207 = *(_OWORD *)(v0 + 544);
  v206 = v40;
  v43 = *(_OWORD *)(v0 + 416);
  v44 = *(_OWORD *)(v0 + 448);
  v200 = *(_OWORD *)(v0 + 432);
  v45 = v200;
  v201 = v44;
  v47 = *(_OWORD *)(v0 + 448);
  v46 = *(_OWORD *)(v0 + 464);
  v48 = v46;
  v203 = *(_OWORD *)(v0 + 480);
  v202 = v46;
  v49 = *(_OWORD *)(v0 + 400);
  v50 = v49;
  v199[1] = *(_OWORD *)(v0 + 416);
  v199[0] = v49;
  v51 = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v2 + 616) = v208;
  *(_OWORD *)(v2 + 632) = v51;
  *(_OWORD *)(v2 + 552) = v39;
  *(_OWORD *)(v2 + 568) = v41;
  *(_OWORD *)(v2 + 584) = v42;
  *(_OWORD *)(v2 + 600) = v35;
  *(_OWORD *)(v2 + 488) = v45;
  *(_OWORD *)(v2 + 504) = v47;
  *(_OWORD *)(v2 + 520) = v48;
  *(_OWORD *)(v2 + 536) = v37;
  *(_OWORD *)(v2 + 456) = v50;
  *(_OWORD *)(v2 + 472) = v43;
  v52 = *(_OWORD *)(v0 + 744);
  v53 = *(_OWORD *)(v0 + 776);
  v196 = *(_OWORD *)(v0 + 760);
  v197 = v53;
  v54 = *(_OWORD *)(v0 + 680);
  v55 = *(_OWORD *)(v0 + 712);
  v192 = *(_OWORD *)(v0 + 696);
  v56 = v192;
  v193 = v55;
  v58 = *(_OWORD *)(v0 + 712);
  v57 = *(_OWORD *)(v0 + 728);
  v59 = v57;
  v195 = *(_OWORD *)(v0 + 744);
  v194 = v57;
  v60 = *(_OWORD *)(v0 + 616);
  v61 = *(_OWORD *)(v0 + 648);
  v188 = *(_OWORD *)(v0 + 632);
  v62 = v188;
  v189 = v61;
  v64 = *(_OWORD *)(v0 + 648);
  v63 = *(_OWORD *)(v0 + 664);
  v65 = v63;
  v191 = *(_OWORD *)(v0 + 680);
  v190 = v63;
  v66 = *(_OWORD *)(v0 + 600);
  v67 = v66;
  v187[1] = *(_OWORD *)(v0 + 616);
  v187[0] = v66;
  v68 = *(_OWORD *)(v0 + 776);
  *(_OWORD *)(v2 + 824) = v196;
  *(_OWORD *)(v2 + 840) = v68;
  *(_OWORD *)(v2 + 760) = v56;
  *(_OWORD *)(v2 + 776) = v58;
  *(_OWORD *)(v2 + 792) = v59;
  *(_OWORD *)(v2 + 808) = v52;
  *(_OWORD *)(v2 + 696) = v62;
  *(_OWORD *)(v2 + 712) = v64;
  *(_OWORD *)(v2 + 728) = v65;
  *(_OWORD *)(v2 + 744) = v54;
  *(_OWORD *)(v2 + 664) = v67;
  *(_OWORD *)(v2 + 680) = v60;
  v69 = *(_OWORD *)(v0 + 944);
  v70 = *(_OWORD *)(v0 + 976);
  v184 = *(_OWORD *)(v0 + 960);
  v185 = v70;
  v71 = *(_OWORD *)(v0 + 880);
  v72 = *(_OWORD *)(v0 + 912);
  v180 = *(_OWORD *)(v0 + 896);
  v73 = v180;
  v181 = v72;
  v74 = *(_OWORD *)(v0 + 912);
  v75 = *(_OWORD *)(v0 + 944);
  v182 = *(_OWORD *)(v0 + 928);
  v76 = v182;
  v183 = v75;
  v77 = *(_OWORD *)(v0 + 816);
  v78 = *(_OWORD *)(v0 + 848);
  v176 = *(_OWORD *)(v0 + 832);
  v79 = v176;
  v177 = v78;
  v80 = *(_OWORD *)(v0 + 848);
  v81 = *(_OWORD *)(v0 + 880);
  v178 = *(_OWORD *)(v0 + 864);
  v82 = v178;
  v179 = v81;
  v83 = *(_OWORD *)(v0 + 816);
  v175[0] = *(_OWORD *)(v0 + 800);
  v84 = v175[0];
  v175[1] = v83;
  v85 = *(_OWORD *)(v0 + 976);
  *(_OWORD *)(v2 + 1032) = v184;
  *(_OWORD *)(v2 + 1048) = v85;
  *(_OWORD *)(v2 + 968) = v73;
  *(_OWORD *)(v2 + 984) = v74;
  *(_OWORD *)(v2 + 1000) = v76;
  *(_OWORD *)(v2 + 1016) = v69;
  *(_OWORD *)(v2 + 904) = v79;
  *(_OWORD *)(v2 + 920) = v80;
  *(_OWORD *)(v2 + 936) = v82;
  *(_OWORD *)(v2 + 952) = v71;
  *(_OWORD *)(v2 + 872) = v84;
  *(_OWORD *)(v2 + 888) = v77;
  v86 = *(_OWORD *)(v0 + 1144);
  v87 = *(_OWORD *)(v0 + 1176);
  v172 = *(_OWORD *)(v0 + 1160);
  v173 = v87;
  v88 = *(_OWORD *)(v0 + 1080);
  v89 = *(_OWORD *)(v0 + 1112);
  v168 = *(_OWORD *)(v0 + 1096);
  v90 = v168;
  v169 = v89;
  v91 = *(_OWORD *)(v0 + 1112);
  v92 = *(_OWORD *)(v0 + 1144);
  v170 = *(_OWORD *)(v0 + 1128);
  v93 = v170;
  v171 = v92;
  v94 = *(_OWORD *)(v0 + 1016);
  v95 = *(_OWORD *)(v0 + 1048);
  v164 = *(_OWORD *)(v0 + 1032);
  v96 = v164;
  v165 = v95;
  v97 = *(_OWORD *)(v0 + 1048);
  v98 = *(_OWORD *)(v0 + 1080);
  v166 = *(_OWORD *)(v0 + 1064);
  v99 = v166;
  v167 = v98;
  v100 = *(_OWORD *)(v0 + 1016);
  v163[0] = *(_OWORD *)(v0 + 1000);
  v101 = v163[0];
  v163[1] = v100;
  v102 = *(_OWORD *)(v0 + 1176);
  *(_OWORD *)(v2 + 1240) = v172;
  *(_OWORD *)(v2 + 1256) = v102;
  *(_OWORD *)(v2 + 1176) = v90;
  *(_OWORD *)(v2 + 1192) = v91;
  *(_OWORD *)(v2 + 1208) = v93;
  *(_OWORD *)(v2 + 1224) = v86;
  *(_OWORD *)(v2 + 1112) = v96;
  *(_OWORD *)(v2 + 1128) = v97;
  *(_OWORD *)(v2 + 1144) = v99;
  *(_OWORD *)(v2 + 1160) = v88;
  *(_OWORD *)(v2 + 1080) = v101;
  *(_OWORD *)(v2 + 1096) = v94;
  v103 = *(_OWORD *)(v0 + 1344);
  v104 = *(_OWORD *)(v0 + 1376);
  v161[10] = *(_OWORD *)(v0 + 1360);
  v161[11] = v104;
  v105 = *(_OWORD *)(v0 + 1280);
  v106 = *(_OWORD *)(v0 + 1312);
  v161[6] = *(_OWORD *)(v0 + 1296);
  v161[7] = v106;
  v161[8] = *(_OWORD *)(v0 + 1328);
  v161[9] = v103;
  v107 = *(_OWORD *)(v0 + 1216);
  v108 = *(_OWORD *)(v0 + 1248);
  v161[2] = *(_OWORD *)(v0 + 1232);
  v161[3] = v108;
  v161[4] = *(_OWORD *)(v0 + 1264);
  v161[5] = v105;
  v161[0] = *(_OWORD *)(v0 + 1200);
  v161[1] = v107;
  v109 = *(_OWORD *)(v0 + 1344);
  v110 = *(_OWORD *)(v0 + 1376);
  *(_OWORD *)(v2 + 1448) = *(_OWORD *)(v0 + 1360);
  *(_OWORD *)(v2 + 1464) = v110;
  v111 = *(_OWORD *)(v0 + 1280);
  v112 = *(_OWORD *)(v0 + 1312);
  *(_OWORD *)(v2 + 1384) = *(_OWORD *)(v0 + 1296);
  *(_OWORD *)(v2 + 1400) = v112;
  *(_OWORD *)(v2 + 1416) = *(_OWORD *)(v0 + 1328);
  *(_OWORD *)(v2 + 1432) = v109;
  v113 = *(_OWORD *)(v0 + 1216);
  v114 = *(_OWORD *)(v0 + 1248);
  *(_OWORD *)(v2 + 1320) = *(_OWORD *)(v0 + 1232);
  *(_OWORD *)(v2 + 1336) = v114;
  *(_OWORD *)(v2 + 1352) = *(_OWORD *)(v0 + 1264);
  *(_OWORD *)(v2 + 1368) = v111;
  *(_OWORD *)(v2 + 1288) = *(_OWORD *)(v0 + 1200);
  *(_OWORD *)(v2 + 1304) = v113;
  v115 = *(_OWORD *)(v0 + 1544);
  v116 = *(_OWORD *)(v0 + 1576);
  v158 = *(_OWORD *)(v0 + 1560);
  v159 = v116;
  v117 = *(_OWORD *)(v0 + 1480);
  v118 = *(_OWORD *)(v0 + 1512);
  v154 = *(_OWORD *)(v0 + 1496);
  v119 = v154;
  v155 = v118;
  v120 = *(_OWORD *)(v0 + 1512);
  v121 = *(_OWORD *)(v0 + 1544);
  v156 = *(_OWORD *)(v0 + 1528);
  v122 = v156;
  v157 = v121;
  v123 = *(_OWORD *)(v0 + 1416);
  v124 = *(_OWORD *)(v0 + 1448);
  v150 = *(_OWORD *)(v0 + 1432);
  v125 = v150;
  v151 = v124;
  v126 = *(_OWORD *)(v0 + 1448);
  v127 = *(_OWORD *)(v0 + 1480);
  v152 = *(_OWORD *)(v0 + 1464);
  v128 = v152;
  v153 = v127;
  v129 = *(_OWORD *)(v0 + 1416);
  v149[0] = *(_OWORD *)(v0 + 1400);
  v130 = v149[0];
  v149[1] = v129;
  v131 = *(_OWORD *)(v0 + 1576);
  *(_OWORD *)(v2 + 1656) = v158;
  *(_OWORD *)(v2 + 1672) = v131;
  *(_OWORD *)(v2 + 1592) = v119;
  *(_OWORD *)(v2 + 1608) = v120;
  *(_OWORD *)(v2 + 1624) = v122;
  *(_OWORD *)(v2 + 1640) = v115;
  *(_OWORD *)(v2 + 1528) = v125;
  *(_OWORD *)(v2 + 1544) = v126;
  *(_BYTE *)(v2 + 32) = 1;
  v230 = *(_BYTE *)(v0 + 192);
  *(_BYTE *)(v2 + 232) = *(_BYTE *)(v0 + 192);
  *(_BYTE *)(v2 + 240) = 5;
  v218 = *(_BYTE *)(v0 + 392);
  *(_BYTE *)(v2 + 440) = *(_BYTE *)(v0 + 392);
  *(_BYTE *)(v2 + 448) = 0;
  v210 = *(_BYTE *)(v0 + 592);
  *(_BYTE *)(v2 + 648) = *(_BYTE *)(v0 + 592);
  *(_BYTE *)(v2 + 656) = 2;
  v198 = *(_BYTE *)(v0 + 792);
  *(_BYTE *)(v2 + 856) = *(_BYTE *)(v0 + 792);
  *(_BYTE *)(v2 + 864) = 8;
  v186 = *(_BYTE *)(v0 + 992);
  *(_BYTE *)(v2 + 1064) = *(_BYTE *)(v0 + 992);
  *(_BYTE *)(v2 + 1072) = 4;
  v174 = *(_BYTE *)(v0 + 1192);
  *(_BYTE *)(v2 + 1272) = *(_BYTE *)(v0 + 1192);
  *(_BYTE *)(v2 + 1280) = 6;
  v162 = *(_BYTE *)(v0 + 1392);
  *(_BYTE *)(v2 + 1480) = *(_BYTE *)(v0 + 1392);
  *(_BYTE *)(v2 + 1488) = 3;
  v160 = *(_BYTE *)(v0 + 1592);
  *(_BYTE *)(v2 + 1688) = *(_BYTE *)(v0 + 1592);
  *(_OWORD *)(v2 + 1560) = v128;
  *(_OWORD *)(v2 + 1576) = v117;
  *(_OWORD *)(v2 + 1496) = v130;
  *(_OWORD *)(v2 + 1512) = v123;
  *(_BYTE *)(v2 + 1696) = 7;
  v132 = *(_OWORD *)(v0 + 1744);
  v133 = *(_OWORD *)(v0 + 1776);
  v147[10] = *(_OWORD *)(v0 + 1760);
  v147[11] = v133;
  v148 = *(_BYTE *)(v0 + 1792);
  v134 = *(_OWORD *)(v0 + 1680);
  v135 = *(_OWORD *)(v0 + 1712);
  v147[6] = *(_OWORD *)(v0 + 1696);
  v147[7] = v135;
  v147[8] = *(_OWORD *)(v0 + 1728);
  v147[9] = v132;
  v136 = *(_OWORD *)(v0 + 1616);
  v137 = *(_OWORD *)(v0 + 1648);
  v147[2] = *(_OWORD *)(v0 + 1632);
  v147[3] = v137;
  v147[4] = *(_OWORD *)(v0 + 1664);
  v147[5] = v134;
  v147[0] = *(_OWORD *)(v0 + 1600);
  v147[1] = v136;
  v138 = *(_OWORD *)(v0 + 1744);
  v139 = *(_OWORD *)(v0 + 1776);
  *(_OWORD *)(v2 + 1864) = *(_OWORD *)(v0 + 1760);
  *(_OWORD *)(v2 + 1880) = v139;
  *(_BYTE *)(v2 + 1896) = *(_BYTE *)(v0 + 1792);
  v140 = *(_OWORD *)(v0 + 1680);
  v141 = *(_OWORD *)(v0 + 1712);
  *(_OWORD *)(v2 + 1800) = *(_OWORD *)(v0 + 1696);
  *(_OWORD *)(v2 + 1816) = v141;
  *(_OWORD *)(v2 + 1832) = *(_OWORD *)(v0 + 1728);
  *(_OWORD *)(v2 + 1848) = v138;
  v142 = *(_OWORD *)(v0 + 1616);
  v143 = *(_OWORD *)(v0 + 1648);
  *(_OWORD *)(v2 + 1736) = *(_OWORD *)(v0 + 1632);
  *(_OWORD *)(v2 + 1752) = v143;
  *(_OWORD *)(v2 + 1768) = *(_OWORD *)(v0 + 1664);
  *(_OWORD *)(v2 + 1784) = v140;
  *(_OWORD *)(v2 + 1704) = *(_OWORD *)(v0 + 1600);
  *(_OWORD *)(v2 + 1720) = v142;
  v144 = sub_10043D9D4(v2);
  swift_setDeallocating(v2);
  sub_10004AE58(v219);
  sub_10004AE58(v211);
  sub_10004AE58(v199);
  sub_10004AE58(v187);
  sub_10004AE58(v175);
  sub_10004AE58(v163);
  sub_10004AE58(v161);
  sub_10004AE58(v149);
  sub_10004AE58(v147);
  v145 = sub_100047110(&qword_10083D668);
  swift_arrayDestroy(v2 + 32, 9, v145);
  swift_deallocClassInstance(v2, 32, 7);
  return v144;
}

_QWORD *sub_10004AE58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[16];
  v6 = a1[17];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_10004AEC4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FBFC(a1, a2, a3, a4, &qword_1008214B0);
}

__n128 initializeWithTake for SeymourBrowsingCoordinator.Style(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Aggregate(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t sub_10004AF14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AF94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004AFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

_BYTE *initializeBufferWithCopyOfBuffer for ActivitySharingReplyMenuContext(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10004B710(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B718(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B720(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B728(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B730(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B738(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B740(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B748(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B750(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B758(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B760(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B768(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B770(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B778(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B780(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B788(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B790(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B798(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B7F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B800(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B808(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B810(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B818(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B820(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B828(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B830(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B838(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B840(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B848(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B850(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B858(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B860(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B868(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B870(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B878(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B880(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B888(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B890(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B898(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B8F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B900(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B908(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B910(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B918(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B920(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B928(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B930(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B938(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B940(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B948(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B950(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B958(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B960(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B968(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B970(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B978(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B980(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B988(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B990(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B998(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B9F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA70(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BA98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAB8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAC0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAD0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAE8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAF0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BB00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t getEnumTagSinglePayload for Aggregate(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void sub_10004BB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003427C(a1, a2, v2);
}

ValueMetadata *type metadata accessor for Aggregate()
{
  return &type metadata for Aggregate;
}

uint64_t sub_10004BB60()
{
  double *v0;

  return sub_100023A10(*v0, v0[1]);
}

uint64_t sub_10004BB68(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_10004BB78()
{
  unsigned __int8 *v0;

  return sub_10004BB80(*v0);
}

uint64_t sub_10004BB80(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004BBBC + 4 * byte_100645C70[a1]))(0x4765766F4D736168, 0xEB000000006C616FLL);
}

unint64_t sub_10004BBBC()
{
  return 0xD000000000000015;
}

uint64_t sub_10004BC3C()
{
  return 0x6F4D6F6D65447369;
}

unint64_t sub_10004BC58()
{
  return 0xD000000000000010;
}

uint64_t destroy for ActivitySharingHighlightDataProvider.State(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

ValueMetadata *type metadata accessor for Histogram1D()
{
  return &type metadata for Histogram1D;
}

__n128 sub_10004BCEC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6E8, (uint64_t)&unk_100784250);
}

uint64_t type metadata accessor for ActivitySharingFriendListDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100821898;
  if (!qword_100821898)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingFriendListDataProvider);
  return result;
}

uint64_t type metadata accessor for ReachableContactsDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_10083D030;
  if (!qword_10083D030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReachableContactsDataSource);
  return result;
}

uint64_t type metadata accessor for FriendsSetupCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10083B448;
  if (!qword_10083B448)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FriendsSetupCoordinator);
  return result;
}

ValueMetadata *type metadata accessor for ActivityStatisticsUnit()
{
  return &type metadata for ActivityStatisticsUnit;
}

ValueMetadata *type metadata accessor for ActivityDayHistogram()
{
  return &type metadata for ActivityDayHistogram;
}

ValueMetadata *type metadata accessor for ActivityTrendType()
{
  return &type metadata for ActivityTrendType;
}

ValueMetadata *type metadata accessor for TimeXHistogram1D()
{
  return &type metadata for TimeXHistogram1D;
}

ValueMetadata *type metadata accessor for ReachableContact()
{
  return &type metadata for ReachableContact;
}

uint64_t sub_10004BE58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_100047110(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(_QWORD *)(v1 + v7 + 8));
  return swift_deallocObject(v1, v7 + 16, v6);
}

uint64_t sub_10004BECC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004BEF8()
{
  uint64_t v0;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004BF24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for RemoteParticipant(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004BF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NavigationAnnotation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

_QWORD *initializeWithTake for ActivitySharingHighlightDataProvider.State(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

__n128 initializeWithTake for ActivitySharingFriendListDataProvider.State(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10004C0CC(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 40);
  return result;
}

uint64_t storeEnumTagSinglePayload for TrendsCoachingAverageInformation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E448, (uint64_t)&unk_100783970);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E680, (uint64_t)&unk_100783F28);
}

void type metadata accessor for ASFriendListDisplayMode(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4E8, (uint64_t)&unk_100783E90);
}

void type metadata accessor for CHFriendsSetupPhase(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E440, (uint64_t)&unk_1007838F8);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E678, (uint64_t)&unk_100783F00);
}

ValueMetadata *type metadata accessor for ActivitySharingFriendListDataProvider.State()
{
  return &type metadata for ActivitySharingFriendListDataProvider.State;
}

uint64_t type metadata accessor for ActivitySharingHighlightDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10082D2E8;
  if (!qword_10082D2E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingHighlightDataProvider);
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingHighlightDataProvider.State()
{
  return &type metadata for ActivitySharingHighlightDataProvider.State;
}

ValueMetadata *type metadata accessor for ActivitySharingFriendDetailAlertType()
{
  return &type metadata for ActivitySharingFriendDetailAlertType;
}

ValueMetadata *type metadata accessor for FriendSuggestionCoordinator()
{
  return &type metadata for FriendSuggestionCoordinator;
}

uint64_t sub_10004C1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_10002F330(a1, a2, a6);
}

ValueMetadata *type metadata accessor for OnboardingCoordinator.Criteria.CodingKeys()
{
  return &type metadata for OnboardingCoordinator.Criteria.CodingKeys;
}

uint64_t sub_10004C204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003D0E38);
}

void sub_10004C210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  sub_100009788(a3, a4, a6);
}

ValueMetadata *type metadata accessor for ActivityStatistics()
{
  return &type metadata for ActivityStatistics;
}

uint64_t sub_10004C230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019922C);
}

uint64_t sub_10004C24C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004C278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NavigationRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004C2EC()
{
  uint64_t v0;

  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004C318()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C344()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

const char *sub_10004C370()
{
  return "contentSize";
}

_QWORD *sub_10004C480(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

id sub_10004C4BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "completeCloudRestore");
}

uint64_t sub_10004C4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10004C4E0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10004C514(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  id v10;

  v1 = (_QWORD *)a1[4];
  v2 = v1[4];
  v3 = a1[6];
  if (v2)
    v4 = v3 < v2;
  else
    v4 = 1;
  if (v4)
  {
    v1[4] = v3;
    v1 = (_QWORD *)a1[4];
  }
  v5 = v1[5];
  v6 = a1[6];
  if (v5)
    v7 = v6 <= v5;
  else
    v7 = 0;
  if (!v7)
  {
    v1[5] = v6;
    v1 = (_QWORD *)a1[4];
    v6 = a1[6];
  }
  v8 = (void *)v1[1];
  v9 = a1[5];
  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v6));
  objc_msgSend(v8, "setObject:forKey:", v9, v10);

}

id sub_10004C5A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_runUpdateHandlers");
}

void sub_10004C5AC(uint64_t a1)
{
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "_queue_sortAllWorkoutsByMonthAndYearWithCurrentFilter");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004C5A4;
  block[3] = &unk_100777E20;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10004C61C(uint64_t a1)
{
  id *WeakRetained;
  int v2;
  BOOL v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = *((unsigned __int8 *)WeakRetained + 8);
    v4 = WeakRetained;
    v3 = v2 == objc_msgSend(WeakRetained[16], "hasWorkouts");
    WeakRetained = v4;
    if (!v3)
    {
      *((_BYTE *)v4 + 8) = objc_msgSend(v4[16], "hasWorkouts");
      objc_msgSend(v4, "_createOrbActions");
      WeakRetained = v4;
    }
  }

}

uint64_t sub_10004C69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100828420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10004C6E4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_100047110(a2);
  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (_QWORD *)swift_allocObject(v6, v10 + v8 * v3, v9 | 7);
  result = (_QWORD *)j__malloc_size(v11);
  if (v8)
  {
    if ((_QWORD *)((char *)result - v10) != (_QWORD *)0x8000000000000000 || v8 != -1)
    {
      v11[2] = v3;
      v11[3] = 2 * (((uint64_t)result - v10) / v8);
      v14 = sub_100298348(&v16, (uint64_t)v11 + v10, v3, a1, a3);
      v15 = v16;
      swift_bridgeObjectRetain(a1);
      sub_100133140(v15);
      if (v14 == v3)
        return v11;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10004C800(uint64_t a1)
{
  return sub_10004C6E4(a1, &qword_100821678, (uint64_t (*)(_QWORD))&type metadata accessor for EngagementBadge);
}

unint64_t sub_10004C814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10004C844(a1, v4);
}

unint64_t sub_10004C844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10004CC44(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10004CC10((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

_QWORD *sub_10004C908(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_100822050);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004CB08(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004CA14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10004CB08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100047110(&qword_100822058);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10004CC10(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10004CC44(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10004CC80(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void type metadata accessor for CMTime(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6D0, (uint64_t)&unk_1007841D0);
}

uint64_t sub_10004CD1C()
{
  return sub_1000083D8(&qword_10081E7D8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100621E54);
}

uint64_t sub_10004CD4C()
{
  return sub_1000083D8(&qword_10081E7E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100621BE8);
}

NSString sub_10004CD78()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A210 = (uint64_t)result;
  return result;
}

NSString sub_10004CDAC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A208 = (uint64_t)result;
  return result;
}

NSString sub_10004CDE0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086ACE0 = (uint64_t)result;
  return result;
}

NSString sub_10004CE14()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100869F70 = (uint64_t)result;
  return result;
}

unint64_t sub_10004CE48()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10082C908;
  if (!qword_10082C908)
  {
    v1 = sub_100006224();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10082C908);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6B8, (uint64_t)&unk_100784050);
}

unint64_t sub_10004CEA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839760;
  if (!qword_100839760)
  {
    v1 = sub_10001E724(255, &qword_100839768, FIUIUnitManager_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for FIUIUnitManager, v1);
    atomic_store(result, (unint64_t *)&qword_100839760);
  }
  return result;
}

uint64_t sub_10004CEFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100142388(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_10004CF90(uint64_t a1, void *a2, unint64_t *a3, _QWORD *a4, unint64_t *a5, void (*a6)(id *, id))
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  id v35[2];
  _QWORD v36[5];

  v7 = a1;
  v35[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = sub_10001E724(0, a3, a4);
    v13 = sub_10001E6E4(a5, a3, a4);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v11, v12, v13);
    v7 = v36[0];
    v33 = v36[1];
    v14 = v36[2];
    v15 = v36[3];
    v16 = v36[4];
  }
  else
  {
    v15 = 0;
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
  }
  v20 = (unint64_t)(v14 + 64) >> 6;
  if (v7 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v16)
    {
      v21 = (v16 - 1) & v16;
      v22 = __clz(__rbit64(v16)) | (v15 << 6);
      v23 = v15;
      goto LABEL_31;
    }
    v28 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v28 >= v20)
      goto LABEL_34;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    v23 = v15 + 1;
    if (!v29)
    {
      v23 = v15 + 2;
      if (v15 + 2 >= v20)
        goto LABEL_34;
      v29 = *(_QWORD *)(v33 + 8 * v23);
      if (!v29)
      {
        v23 = v15 + 3;
        if (v15 + 3 >= v20)
          goto LABEL_34;
        v29 = *(_QWORD *)(v33 + 8 * v23);
        if (!v29)
        {
          v23 = v15 + 4;
          if (v15 + 4 >= v20)
            goto LABEL_34;
          v29 = *(_QWORD *)(v33 + 8 * v23);
          if (!v29)
          {
            v23 = v15 + 5;
            if (v15 + 5 >= v20)
              goto LABEL_34;
            v29 = *(_QWORD *)(v33 + 8 * v23);
            if (!v29)
            {
              v30 = v15 + 6;
              while (v20 != v30)
              {
                v29 = *(_QWORD *)(v33 + 8 * v30++);
                if (v29)
                {
                  v23 = v30 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_100133140(v7);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_31:
    v27 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v22);
    if (!v27)
      goto LABEL_34;
    while (1)
    {
      a6(v35, v27);

      v15 = v23;
      v16 = v21;
      if ((v7 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v24 = __CocoaSet.Iterator.next()(a1);
      if (v24)
      {
        v25 = v24;
        v34 = v24;
        v26 = sub_10001E724(0, a3, a4);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
        v27 = v35[0];
        swift_unknownObjectRelease(v25);
        v23 = v15;
        v21 = v16;
        if (v27)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

unint64_t sub_10004D240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823030;
  if (!qword_100823030)
  {
    v1 = sub_100007050(&qword_100823028);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100823030);
  }
  return result;
}

unint64_t sub_10004D28C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10004D314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100047110(&qword_100833840);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_100047110(&qword_100832CB8);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
    v8 = (char *)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_100021CC0(v9, (uint64_t)v5, &qword_100833840);
      v11 = *v5;
      result = sub_100030DDC(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for ImpressionMetrics(0);
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v8, v16);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10004D47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100047110(&qword_100833820);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100047110(&qword_100832B18);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100021CC0(v13, (uint64_t)v5, &qword_100833820);
    result = sub_10002252C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for IndexPath(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for ImpressionMetrics(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10004D634(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10004D65C(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_10004D684(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1008218B8)
  {
    type metadata accessor for ASFriendListDisplayMode(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1008218B8);
  }
}

void sub_10004D6D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10083B460)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10083B460);
  }
}

void sub_10004D72C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10083D040[0])
  {
    v2 = sub_100007050(&qword_100823988);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, qword_10083D040);
  }
}

void sub_10004D784()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1008218B0)
  {
    v0 = type metadata accessor for Published(0, &type metadata for ActivitySharingFriendListDataProvider.State);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1008218B0);
  }
}

void sub_10004D7D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10082D2F8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for ActivitySharingHighlightDataProvider.State);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10082D2F8);
  }
}

void sub_10004D82C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1008351F0)
  {
    v2 = sub_100007050(&qword_10081EED8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1008351F0);
  }
}

uint64_t sub_10004D884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_1008283A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10082FF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D914(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110((uint64_t *)&unk_10082E690);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004D954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_10082E690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100828370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D9E4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10004DA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110((uint64_t *)&unk_100832590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10004DA70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10004D82C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for ActivitySharingFriendDetailAlertCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_1008351E0;
  if (!qword_1008351E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingFriendDetailAlertCoordinator);
  return result;
}

uint64_t sub_10004DB24(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "\b";
  v2[1] = &unk_100629630;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + qword_100869F78);
}

uint64_t type metadata accessor for ActivitySharingTabViewHostingController(uint64_t a1)
{
  uint64_t result;

  result = qword_100824000;
  if (!qword_100824000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingTabViewHostingController);
  return result;
}

uint64_t type metadata accessor for SeymourNotificationResponseCoordinator()
{
  return objc_opt_self(_TtC10FitnessApp38SeymourNotificationResponseCoordinator);
}

void sub_10004DBF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  sub_10004D784();
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004D684(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10004DCA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_10004D7D8();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for MindfulnessSessionListTableViewCell()
{
  return objc_opt_self(CHMindfulnessSessionListTableViewCell);
}

unint64_t sub_10004DD54()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for MindfulnessSessionFormattingManager()
{
  return objc_opt_self(CHMindfulnessSessionFormattingManager);
}

uint64_t type metadata accessor for ActivitySharingNavigationController()
{
  return objc_opt_self(_TtC10FitnessApp35ActivitySharingNavigationController);
}

uint64_t type metadata accessor for SeymourDiscoverySheetCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10082C360;
  if (!qword_10082C360)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeymourDiscoverySheetCoordinator);
  return result;
}

uint64_t sub_10004DDEC()
{
  return type metadata accessor for SeymourDiscoverySheetCoordinator(0);
}

void sub_10004DDF4()
{
  sub_1000066FC();
}

void sub_10004DE48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_100646B70;
  sub_10004F408(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for CatalogTipActivityTileDataModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10083AA70;
  if (!qword_10083AA70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CatalogTipActivityTileDataModel);
  return result;
}

unint64_t sub_10004DF0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083AB40;
  if (!qword_10083AB40)
  {
    v1 = type metadata accessor for CatalogTipActivityTileDataModel(255);
    result = swift_getWitnessTable(&unk_100646B88, v1);
    atomic_store(result, (unint64_t *)&qword_10083AB40);
  }
  return result;
}

uint64_t sub_10004DF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A5F8(a2, a3);
}

uint64_t type metadata accessor for ActivityTileImpressionsTracker()
{
  return objc_opt_self(_TtC10FitnessApp30ActivityTileImpressionsTracker);
}

void sub_10004DF80(uint64_t a1)
{
  uint64_t v1;

  sub_100006FC4(a1, v1);
}

ValueMetadata *type metadata accessor for ActivityStatisticsCompilation()
{
  return &type metadata for ActivityStatisticsCompilation;
}

unint64_t sub_10004DFB8()
{
  return 0xD00000000000001CLL;
}

id sub_10004DFD4(uint64_t a1)
{
  return sub_100006964(a1, &UIFontTextStyleBody, &qword_100829AE0);
}

uint64_t type metadata accessor for HistoryActivityTileDataModel()
{
  return objc_opt_self(_TtC10FitnessApp28HistoryActivityTileDataModel);
}

void sub_10004E008(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_100645EA0;
  v4[1] = &unk_100645EA0;
  v4[2] = &unk_100645EA0;
  v4[3] = &unk_100645EA0;
  v4[4] = &unk_100645EA0;
  v4[5] = &unk_100645EA0;
  v4[6] = &unk_100645EA0;
  v4[7] = &unk_100645EA0;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100005B68(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for TrendsActivityTileDataModel()
{
  return objc_opt_self(_TtC10FitnessApp27TrendsActivityTileDataModel);
}

uint64_t sub_10004E0BC()
{
  uint64_t v0;

  return sub_10000C780(v0);
}

uint64_t sub_10004E0C4()
{
  uint64_t v0;

  return sub_10000D148(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10004E0D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10004D72C(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for TodayActivityTileDataModel()
{
  return objc_opt_self(_TtC10FitnessApp26TodayActivityTileDataModel);
}

uint64_t sub_10004E18C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = &unk_1006280C8;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for SeymourAvailabilityManager.State(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SeymourAvailabilityManager(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100822DF8, (uint64_t)&nominal type descriptor for SeymourAvailabilityManager);
}

uint64_t sub_10004E230()
{
  return type metadata accessor for SeymourAvailabilityManager(0);
}

uint64_t sub_10004E258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeymourAvailabilityManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

NSString sub_10004E29C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100869F10 = (uint64_t)result;
  return result;
}

uint64_t sub_10004E360()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100047110(&qword_10081ED90);
  v1 = swift_allocObject(v0, 160, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100622B10;
  *(_QWORD *)(v1 + 32) = type metadata accessor for TodayActivityTile();
  *(_QWORD *)(v1 + 40) = &off_100788780;
  *(_QWORD *)(v1 + 48) = type metadata accessor for WorkoutsListTableViewCell();
  *(_QWORD *)(v1 + 56) = &off_1007A8360;
  *(_QWORD *)(v1 + 64) = type metadata accessor for TrendsOnBoardingActivityTile();
  *(_QWORD *)(v1 + 72) = &off_100791270;
  *(_QWORD *)(v1 + 80) = type metadata accessor for TrendPairTableViewCell(0);
  *(_QWORD *)(v1 + 88) = &off_1007A9CD8;
  *(_QWORD *)(v1 + 96) = type metadata accessor for AwardsActivityTile();
  *(_QWORD *)(v1 + 104) = &off_100794690;
  *(_QWORD *)(v1 + 112) = type metadata accessor for MindfulnessSessionListTableViewCell();
  *(_QWORD *)(v1 + 120) = &off_10078C930;
  *(_QWORD *)(v1 + 128) = type metadata accessor for StackListTableViewCell(0);
  *(_QWORD *)(v1 + 136) = &off_1007A5DF0;
  *(_QWORD *)(v1 + 144) = type metadata accessor for CatalogTipActivityTile(0);
  *(_QWORD *)(v1 + 152) = &off_100793AA8;
  return v1;
}

void sub_10004E444()
{
  uint64_t v0;

  sub_10000B8B4(v0);
}

void sub_10004E44C(uint64_t a1)
{
  uint64_t v1;

  sub_100022BB4(a1, v1);
}

void sub_10004E4D4()
{
  uint64_t v0;

  sub_1000069D0(v0);
}

uint64_t type metadata accessor for WorkoutsListTableViewCell()
{
  return objc_opt_self(CHWorkoutsListTableViewCell);
}

uint64_t type metadata accessor for TrendsAvailabilityManager()
{
  return objc_opt_self(_TtC10FitnessApp25TrendsAvailabilityManager);
}

void sub_10004E550()
{
  sub_10001D350();
}

uint64_t sub_10004E570()
{
  return sub_10004E578();
}

uint64_t sub_10004E578()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_100047110((uint64_t *)&unk_100832590);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Notification(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  sub_10001D350();
  return sub_10001BE90((uint64_t)v2, (uint64_t *)&unk_100832590);
}

NSString sub_10004E610()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086AC40 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for ActivityTileViewDataModel()
{
  return objc_opt_self(_TtC10FitnessApp25ActivityTileViewDataModel);
}

uint64_t sub_10004E6A4(uint64_t a1)
{
  return sub_100008348(a1, qword_100835438, (uint64_t (*)(void))&static UIListContentConfiguration.subtitleCell());
}

uint64_t sub_10004E6B8(uint64_t a1)
{
  return sub_100008348(a1, qword_100835420, (uint64_t (*)(void))&static UIListContentConfiguration.extraProminentInsetGroupedHeader());
}

uint64_t type metadata accessor for ActivityStatisticsBuilder()
{
  return objc_opt_self(_TtC10FitnessApp25ActivityStatisticsBuilder);
}

uint64_t type metadata accessor for TrendsPairedWatchManager()
{
  return objc_opt_self(_TtC10FitnessApp24TrendsPairedWatchManager);
}

uint64_t type metadata accessor for TrendsFormattingManager()
{
  return objc_opt_self(_TtC10FitnessApp23TrendsFormattingManager);
}

void sub_10004E72C()
{
  uint64_t v0;

  sub_10001543C(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10004E738(char a1, char a2, uint64_t a3)
{
  uint64_t v3;

  sub_10000B9CC(a1, a2, a3, v3);
}

uint64_t type metadata accessor for TrendPairTableViewCell(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100838148, (uint64_t)&nominal type descriptor for TrendPairTableViewCell);
}

uint64_t sub_10004E788()
{
  return 0x676E69646E657254;
}

void sub_10004E7A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  sub_10004F90C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for StackListTableViewCell(uint64_t a1)
{
  uint64_t result;

  result = qword_10082C708;
  if (!qword_10082C708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StackListTableViewCell);
  return result;
}

unint64_t sub_10004E864()
{
  return 0xD000000000000011;
}

uint64_t type metadata accessor for StackFormattingManager()
{
  return objc_opt_self(_TtC10FitnessApp22StackFormattingManager);
}

void sub_10004E8A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100006344(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

uint64_t type metadata accessor for ScrollToTopCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10081ECD0;
  if (!qword_10081ECD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScrollToTopCoordinator);
  return result;
}

uint64_t type metadata accessor for MetricPlatterAnalytics()
{
  return objc_opt_self(_TtC10FitnessApp22MetricPlatterAnalytics);
}

void sub_10004E968(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10004EF3C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for CatalogTipActivityTile(uint64_t a1)
{
  uint64_t result;

  result = qword_10082C140;
  if (!qword_10082C140)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CatalogTipActivityTile);
  return result;
}

unint64_t sub_10004EA20()
{
  return 0xD000000000000016;
}

ValueMetadata *type metadata accessor for ActivitySharingTabView()
{
  return &type metadata for ActivitySharingTabView;
}

uint64_t type metadata accessor for ActivityChartDataCache(uint64_t a1)
{
  uint64_t result;

  result = qword_10081F770;
  if (!qword_10081F770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityChartDataCache);
  return result;
}

id sub_10004EAD0()
{
  id result;

  result = sub_100015C2C(0xD000000000000022, 0x80000001006A95D0, (uint64_t)"Trends remove threshold enabled", 31);
  byte_10083D1A1 = result & 1;
  return result;
}

NSString sub_10004EB14()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A018 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for OnboardingCoordinator()
{
  return objc_opt_self(CHOnboardingCoordinator);
}

int8x8_t sub_10004EB7C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  int8x8_t result;
  uint64x2_t v6;
  int16x8_t v7;

  v4 = sub_10000D90C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = v4 & 1;
    v6 = (uint64x2_t)vdupq_n_s64(v4);
    v7 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_100645E60), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_100645E50));
    *(int8x8_t *)v7.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v7), (int8x8_t)0x1000100010001);
    result = vmovn_s16(v7);
    *(_DWORD *)(a2 + 1) = result.i32[0];
    *(_BYTE *)(a2 + 5) = BYTE5(v4) & 1;
    *(_BYTE *)(a2 + 6) = BYTE6(v4) & 1;
  }
  return result;
}

uint64_t sub_10004EBEC(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  const mach_header_64 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = 0x1000000000000;
  if (!v1[6])
    v2 = 0;
  v3 = 0x10000000000;
  if (!v1[5])
    v3 = 0;
  v4 = &_mh_execute_header;
  if (!v1[4])
    v4 = 0;
  v5 = 0x1000000;
  if (!v1[3])
    v5 = 0;
  v6 = 0x10000;
  if (!v1[2])
    v6 = 0;
  v7 = 256;
  if (!v1[1])
    v7 = 0;
  return sub_10000A414(a1, v7 | *v1 | v6 | v5 | (unint64_t)v4 | v3 | v2);
}

unint64_t sub_10004EC7C()
{
  unint64_t result;

  result = qword_10083A028;
  if (!qword_10083A028)
  {
    result = swift_getWitnessTable(&unk_100645D0C, &type metadata for OnboardingCoordinator.Criteria);
    atomic_store(result, (unint64_t *)&qword_10083A028);
  }
  return result;
}

unint64_t sub_10004ECC0()
{
  unint64_t result;

  result = qword_10083A020;
  if (!qword_10083A020)
  {
    result = swift_getWitnessTable(&unk_100645CE4, &type metadata for OnboardingCoordinator.Criteria);
    atomic_store(result, (unint64_t *)&qword_10083A020);
  }
  return result;
}

unint64_t sub_10004ED0C()
{
  unint64_t result;

  result = qword_10083A038;
  if (!qword_10083A038)
  {
    result = swift_getWitnessTable(&unk_100645D40, &type metadata for OnboardingCoordinator.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A038);
  }
  return result;
}

unint64_t sub_10004ED50()
{
  unint64_t result;

  result = qword_10083A040;
  if (!qword_10083A040)
  {
    result = swift_getWitnessTable(&unk_100645D68, &type metadata for OnboardingCoordinator.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A040);
  }
  return result;
}

unint64_t sub_10004ED94()
{
  unint64_t result;

  result = qword_10083A000;
  if (!qword_10083A000)
  {
    result = swift_getWitnessTable(&unk_100645DF8, &type metadata for OnboardingCoordinator.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083A000);
  }
  return result;
}

void sub_10004EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_100005990(a1, a2, a3, a4, a5, v5, 1);
}

void sub_10004EDF4()
{
  uint64_t v0;

  sub_10001F5EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10004EE0C()
{
  uint64_t v0;

  sub_10000E3B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004EEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CatalogTipSectionItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004EEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008283F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10004EF3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10082C150)
  {
    v2 = type metadata accessor for CatalogTipSectionItem(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10082C150);
  }
}

void sub_10004EF90(uint64_t a1)
{
  uint64_t v1;

  sub_100009CD8(a1, v1);
}

NSString sub_10004EF98()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A038 = (uint64_t)result;
  return result;
}

void sub_10004EFCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1006295B8;
  v4[4] = &unk_1006295B8;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100006CEC(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for ActivityDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100823FB0;
  if (!qword_100823FB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityDataProvider);
  return result;
}

uint64_t sub_10004F0A8()
{
  return type metadata accessor for ActivityDataProvider(0);
}

uint64_t sub_10004F0B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = &unk_10063DFC0;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_10063DFD8;
  result = type metadata accessor for TVConnectionManager.State(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_10063DFF0;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TVConnectionManager(uint64_t a1)
{
  return sub_100024334(a1, (uint64_t *)&unk_100834E28, (uint64_t)&nominal type descriptor for TVConnectionManager);
}

uint64_t sub_10004F16C()
{
  return type metadata accessor for TVConnectionManager(0);
}

uint64_t sub_10004F174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TVConnectionManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

NSString sub_10004F1B8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10086A058 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for HistoryDataProvider()
{
  return objc_opt_self(CHHistoryDataProvider);
}

void sub_10004F20C()
{
  uint64_t v0;

  sub_1003C1E1C(v0, &OBJC_IVAR___CHHistoryDataProvider_hasInitialWorkouts);
}

void sub_10004F22C()
{
  uint64_t v0;

  sub_10000DFD0(v0);
}

id sub_10004F268()
{
  id result;

  result = sub_100015C2C(0xD00000000000001DLL, 0x80000001006A9620, (uint64_t)"Trends remove VO2 Max gating enabled", 36);
  byte_10083D1A2 = result & 1;
  return result;
}

uint64_t type metadata accessor for TrendsDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100828C58;
  if (!qword_100828C58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrendsDataProvider);
  return result;
}

uint64_t sub_10004F2E8()
{
  return sub_10004F2F0();
}

uint64_t sub_10004F2F0()
{
  return sub_10000FFA8();
}

ValueMetadata *type metadata accessor for TrendsAvailability()
{
  return &type metadata for TrendsAvailability;
}

uint64_t type metadata accessor for AwardsActivityTile()
{
  return objc_opt_self(_TtC10FitnessApp18AwardsActivityTile);
}

unint64_t sub_10004F340()
{
  return 0xD000000000000012;
}

unint64_t sub_10004F35C()
{
  return 0xD000000000000011;
}

uint64_t sub_10004F3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100824DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10004F408(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10082B0C0)
  {
    v2 = type metadata accessor for CatalogTipSection(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10082B0C0);
  }
}

uint64_t sub_10004F45C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for CatalogTipSectionItem(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1006296C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10004F4E0()
{
  unint64_t result;

  result = qword_100837AC0;
  if (!qword_100837AC0)
  {
    result = swift_getWitnessTable(&unk_100641DA4, &type metadata for ActivityTrendType);
    atomic_store(result, (unint64_t *)&qword_100837AC0);
  }
  return result;
}

uint64_t type metadata accessor for ActivityDateCache(uint64_t a1)
{
  uint64_t result;

  result = qword_1008268C8;
  if (!qword_1008268C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityDateCache);
  return result;
}

uint64_t sub_10004F560()
{
  return type metadata accessor for ActivityDateCache(0);
}

uint64_t type metadata accessor for GradientColors()
{
  return objc_opt_self(_TtC10FitnessApp14GradientColors);
}

id sub_10004F61C()
{
  id result;

  result = sub_100015C2C(0xD000000000000017, 0x80000001006A9590, (uint64_t)"Trends faking enabled", 21);
  byte_10083D1A0 = result & 1;
  return result;
}

uint64_t type metadata accessor for URLNavigator()
{
  return objc_opt_self(_TtC10FitnessApp12URLNavigator);
}

uint64_t type metadata accessor for MetricColors()
{
  return objc_opt_self(_TtC10FitnessApp12MetricColors);
}

uint64_t type metadata accessor for FitnessAppContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100839680;
  if (!qword_100839680)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FitnessAppContext);
  return result;
}

uint64_t sub_10004F704()
{
  return type metadata accessor for FitnessAppContext(0);
}

void sub_10004F758()
{
  uint64_t v0;

  sub_1000099D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_10004F768(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000C2DC(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_10004F770()
{
  uint64_t v0;

  sub_10000C120(v0);
}

void sub_10004F7CC()
{
  sub_10000DBD0();
}

unint64_t sub_10004F7EC()
{
  unint64_t result;

  result = qword_10081F378;
  if (!qword_10081F378)
  {
    result = swift_getWitnessTable(&unk_100627DA8, &type metadata for FitnessFeatures);
    atomic_store(result, (unint64_t *)&qword_10081F378);
  }
  return result;
}

uint64_t sub_10004F830()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10004F858 + 4 * byte_100627C80[*v0]))("Manatee", 7);
}

const char *sub_10004F858()
{
  return "ScheduledGoals";
}

const char *sub_10004F86C()
{
  return "SummaryTabRedesign";
}

const char *sub_10004F880()
{
  return "PauseRings";
}

const char *sub_10004F8B4()
{
  return "Fitness";
}

uint64_t sub_10004F8C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10004F90C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10082B5B0)
  {
    v2 = type metadata accessor for FitnessPlusStackViewModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10082B5B0);
  }
}

unint64_t sub_10004F960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_100047110(&qword_1008264A0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_10000721C(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10004F9CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10000701C, 0, 0);
}

uint64_t sub_10004FA28()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10000CAD0, 0, 0);
}

double sub_10004FA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100007124(a1, a2, a3, a4, v4);
}

uint64_t type metadata accessor for EngagementAppBadgeProvider()
{
  return objc_opt_self(_TtC10FitnessApp26EngagementAppBadgeProvider);
}

void sub_10005089C(id a1)
{
  void *v1;

  v1 = (void *)qword_10083DE90;
  qword_10083DE90 = (uint64_t)&off_1007B3EE0;

}

id sub_100051150(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "formattingManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fitnessUIFormattingManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "formattingManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fitnessUIFormattingManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "unitManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedShortUnitStringForDistanceUnit:textCase:", objc_msgSend(v9, "userDistanceUnitForDistanceType:", 3), 1));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[FIUIFormattingManager stringWithNumber:decimalPrecision:](FIUIFormattingManager, "stringWithNumber:decimalPrecision:", v4, 1));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("SWIMMING_SPLITS_HEADER_UNIT_FORMAT_%@_%@"), &stru_1007AE1D0, CFSTR("Localizable")));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v13, v11, v10));

  return v14;
}

void sub_100051840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100051860(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  _QWORD block[4];
  id v6;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "setSplitsDictionary:", v3);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100051908;
  block[3] = &unk_100777C80;
  objc_copyWeak(&v6, v2);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v6);
}

void sub_100051908(uint64_t a1)
{
  id v1;

  v1 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v1, "setSelectedPaceFormat:", objc_msgSend(v1, "selectedPaceFormat"));

}

void sub_100052094(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10083DEA0;
  qword_10083DEA0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DEA0, "setRingDiameter:", 22.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  objc_msgSend((id)qword_10083DEA0, "setAppIconWidth:", v4 * 22.0);

  objc_msgSend((id)qword_10083DEA0, "setGymKitIconWidth:", 22.0);
  objc_msgSend((id)qword_10083DEA0, "setRingThickness:", 3.5);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 22.0));
  objc_msgSend((id)qword_10083DEA0, "setValueFont:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 18.0));
  objc_msgSend((id)qword_10083DEA0, "setGoalDescriptionFont:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 18.0));
  objc_msgSend((id)qword_10083DEA0, "setPace100UnitFont:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 16.0));
  objc_msgSend((id)qword_10083DEA0, "setDateFont:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEA0, "dateFont"));
  objc_msgSend((id)qword_10083DEA0, "setWorkoutTypeFont:", v9);

  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("FITNESS_UNIT_FORMAT_NO_SPACE"), &stru_1007AE1D0, CFSTR("Localizable")));
  objc_msgSend((id)qword_10083DEA0, "setUnitFormatString:", v10);

}

void sub_1000522A0(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void *v24;
  UIFontDescriptorAttributeName v25;
  void *v26;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10083DEB0;
  qword_10083DEB0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DEB0, "setRingDiameter:", 48.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  objc_msgSend((id)qword_10083DEB0, "setAppIconWidth:", v4 * 48.0);

  objc_msgSend((id)qword_10083DEB0, "setGymKitIconWidth:", 48.0);
  objc_msgSend((id)qword_10083DEB0, "setRingThickness:", 6.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleTitle1));
  objc_msgSend(v5, "pointSize");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:design:](UIFont, "systemFontOfSize:weight:design:", UIFontSystemFontDesignRounded, v7, UIFontWeightRegular));
  objc_msgSend((id)qword_10083DEB0, "setValueFont:", v8);

  v25 = UIFontDescriptorFeatureSettingsAttribute;
  v22[0] = UIFontFeatureTypeIdentifierKey;
  v22[1] = UIFontFeatureSelectorIdentifierKey;
  v23[0] = &off_1007B3B60;
  v23[1] = &off_1007B3B78;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));
  v24 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
  v26 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEB0, "valueFont"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fontDescriptor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fontDescriptorByAddingAttributes:", v11));

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEB0, "valueFont"));
  objc_msgSend(v15, "pointSize");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v14));
  objc_msgSend((id)qword_10083DEB0, "setGoalDescriptionFont:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_lightSausageFontOfSize:](UIFont, "fu_lightSausageFontOfSize:", 32.0));
  objc_msgSend((id)qword_10083DEB0, "setPace100UnitFont:", v17);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleFootnote));
  objc_msgSend((id)qword_10083DEB0, "setDateFont:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend((id)qword_10083DEB0, "setWorkoutTypeFont:", v19);

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("FITNESS_UNIT_FORMAT_NO_SPACE"), &stru_1007AE1D0, CFSTR("Localizable")));
  objc_msgSend((id)qword_10083DEB0, "setUnitFormatString:", v21);

}

void sub_10005263C(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  void *v21;
  UIFontDescriptorAttributeName v22;
  void *v23;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10083DEC0;
  qword_10083DEC0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DEC0, "setRingDiameter:", 28.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  objc_msgSend((id)qword_10083DEC0, "setAppIconWidth:", v4 * 28.0);

  objc_msgSend((id)qword_10083DEC0, "setGymKitIconWidth:", 40.0);
  objc_msgSend((id)qword_10083DEC0, "setRingThickness:", 4.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_lightSausageFontOfSize:](UIFont, "fu_lightSausageFontOfSize:", 30.0));
  objc_msgSend((id)qword_10083DEC0, "setValueFont:", v5);

  v22 = UIFontDescriptorFeatureSettingsAttribute;
  v19[0] = UIFontFeatureTypeIdentifierKey;
  v19[1] = UIFontFeatureSelectorIdentifierKey;
  v20[0] = &off_1007B3B60;
  v20[1] = &off_1007B3B78;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
  v21 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
  v23 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEC0, "valueFont"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fontDescriptor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fontDescriptorByAddingAttributes:", v8));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEC0, "valueFont"));
  objc_msgSend(v12, "pointSize");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v11));
  objc_msgSend((id)qword_10083DEC0, "setGoalDescriptionFont:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_lightSausageFontOfSize:](UIFont, "fu_lightSausageFontOfSize:", 24.0));
  objc_msgSend((id)qword_10083DEC0, "setPace100UnitFont:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend((id)qword_10083DEC0, "setDateFont:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend((id)qword_10083DEC0, "setWorkoutTypeFont:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("FITNESS_UNIT_FORMAT_NO_SPACE"), &stru_1007AE1D0, CFSTR("Localizable")));
  objc_msgSend((id)qword_10083DEC0, "setUnitFormatString:", v18);

}

void sub_1000529D8(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  void *v21;
  UIFontDescriptorAttributeName v22;
  void *v23;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10083DED0;
  qword_10083DED0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DED0, "setRingDiameter:", 85.0);
  objc_msgSend((id)qword_10083DED0, "setRingThickness:", 10.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  objc_msgSend((id)qword_10083DED0, "setAppIconWidth:", v4 * 62.0);

  objc_msgSend((id)qword_10083DED0, "setGymKitIconWidth:", 60.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 30.0));
  objc_msgSend((id)qword_10083DED0, "setValueFont:", v5);

  v22 = UIFontDescriptorFeatureSettingsAttribute;
  v19[0] = UIFontFeatureTypeIdentifierKey;
  v19[1] = UIFontFeatureSelectorIdentifierKey;
  v20[0] = &off_1007B3B60;
  v20[1] = &off_1007B3B78;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
  v21 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
  v23 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DED0, "valueFont"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fontDescriptor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fontDescriptorByAddingAttributes:", v8));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DED0, "valueFont"));
  objc_msgSend(v12, "pointSize");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v11));
  objc_msgSend((id)qword_10083DED0, "setGoalDescriptionFont:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 16.0));
  objc_msgSend((id)qword_10083DED0, "setPace100UnitFont:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend((id)qword_10083DED0, "setDateFont:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend((id)qword_10083DED0, "setWorkoutTypeFont:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("FITNESS_UNIT_FORMAT_NO_SPACE"), &stru_1007AE1D0, CFSTR("Localizable")));
  objc_msgSend((id)qword_10083DED0, "setUnitFormatString:", v18);

}

void sub_100052D2C(uint64_t a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void *v23;
  UIFontDescriptorAttributeName v24;
  void *v25;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10083DEE0;
  qword_10083DEE0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DEE0, "setRingDiameter:", 62.0);
  objc_msgSend((id)qword_10083DEE0, "setRingThickness:", 11.0);
  objc_msgSend((id)qword_10083DEE0, "ringDiameter");
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v5, "scale");
  objc_msgSend((id)qword_10083DEE0, "setAppIconWidth:", v4 * v6);

  objc_msgSend((id)qword_10083DEE0, "setGymKitIconWidth:", 60.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 30.0));
  objc_msgSend((id)qword_10083DEE0, "setValueFont:", v7);

  v24 = UIFontDescriptorFeatureSettingsAttribute;
  v21[0] = UIFontFeatureTypeIdentifierKey;
  v21[1] = UIFontFeatureSelectorIdentifierKey;
  v22[0] = &off_1007B3B60;
  v22[1] = &off_1007B3B78;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
  v23 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  v25 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEE0, "valueFont"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fontDescriptor"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fontDescriptorByAddingAttributes:", v10));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_10083DEE0, "valueFont"));
  objc_msgSend(v14, "pointSize");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v13));
  objc_msgSend((id)qword_10083DEE0, "setGoalDescriptionFont:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fu_sausageFontOfSize:](UIFont, "fu_sausageFontOfSize:", 16.0));
  objc_msgSend((id)qword_10083DEE0, "setPace100UnitFont:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleSubheadline));
  objc_msgSend((id)qword_10083DEE0, "setDateFont:", v17);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleTitle2));
  objc_msgSend((id)qword_10083DEE0, "setWorkoutTypeFont:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("FITNESS_UNIT_FORMAT_NO_SPACE"), &stru_1007AE1D0, CFSTR("Localizable")));
  objc_msgSend((id)qword_10083DEE0, "setUnitFormatString:", v20);

}

void sub_1000532E4(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  void *v6;
  double v7;
  CLLocationDegrees v8;
  void *v9;
  CLLocationDegrees v10;
  CLLocationCoordinate2D v11;
  void *v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));

  objc_msgSend(v9, "doubleValue");
  v11 = CLLocationCoordinate2DMake(v8, v10);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dateByAddingTimeInterval:", *(double *)(a1 + 48) * (double)a3));

  v13 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v14, v11.latitude, v11.longitude, 0.0, 0.0, 0.0);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);

}

BOOL sub_100053488(id a1, HKWorkoutEvent *a2, NSDictionary *a3)
{
  return -[HKWorkoutEvent fiui_isDistanceGoalCompleteEvent](a2, "fiui_isDistanceGoalCompleteEvent", a3);
}

id sub_100054454(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

uint64_t sub_100054A3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100054B84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100054DD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL sub_100058A48(id a1, HKWorkoutEvent *a2, NSDictionary *a3)
{
  return (id)-[HKWorkoutEvent type](a2, "type", a3) == (id)3;
}

id sub_10005AEF4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
}

id sub_10005AFAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateHiddenAppBundleIds");
}

id sub_10005B820(uint64_t a1)
{
  double v1;

  v1 = 0.2;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 1.0;
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", v1);
}

void sub_10005C244(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v5 = a3;
  _HKInitializeLogging(v5, v6);
  v7 = HKLogSync;
  if (v5 || (a2 & 1) == 0)
  {
    if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_FAULT))
      sub_1005F1C7C(a1, (uint64_t)v5, v7);
  }
  else if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 138543362;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[sharing-setup] %{public}@ Finished end to end Cloud sync", (uint8_t *)&v9, 0xCu);
  }

}

void sub_10005C4C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;

  v2 = FIUIHealthStoreForDevice(*(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005C544;
  v8[3] = &unk_100777EB8;
  v8[4] = *(_QWORD *)(a1 + 40);
  v9 = v3;
  v4 = v3;
  FIUIUserHasExistingMoveGoal(v4, v8, v5, v6, v7);

}

void sub_10005C544(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  _QWORD block[5];
  id v11;
  char v12;

  v5 = a3;
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "invalidate");
  if (v5)
  {
    _HKInitializeLogging(v6, v7);
    v8 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F1D04((uint64_t)v5, v8);
    a2 = 1;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005C624;
  block[3] = &unk_100777E90;
  v12 = a2;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = v9;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10005C624(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  if (v2)
  {
    objc_msgSend(v3, "buddyControllerReleaseHoldAndSkip:", v4);

    +[CHASActivitySetupOnboardingViewController performEndToEndCloudSyncOnSkippingSetupForHealthStore:](CHASActivitySetupOnboardingViewController, "performEndToEndCloudSyncOnSkippingSetupForHealthStore:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(v3, "buddyControllerReleaseHold:", v4);

  }
}

void *sub_10005C7F8(uint64_t a1)
{
  void *v2;
  char *v3;
  void *result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_10083DEF8)
  {
    v6 = off_100777F28;
    v7 = 0;
    qword_10083DEF8 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    v2 = (void *)qword_10083DEF8;
    if (qword_10083DEF8)
    {
      if (!v5)
        goto LABEL_5;
    }
    else
    {
      v3 = (char *)abort_report_np("%s", v5);
    }
    free(v3);
    goto LABEL_5;
  }
  v2 = (void *)qword_10083DEF8;
LABEL_5:
  result = dlsym(v2, "NRDevicePropertyIsAltAccount");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_10083DEF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10005C8E8(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  _BYTE v23[128];

  v3 = a1;
  v4 = a2;
  if (ACHShouldUseNewAwardsSystem())
  {
    v5 = v3;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "earnedInstances", 0));
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v19;
LABEL_5:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "earnedDateComponents"));
        v13 = objc_msgSend(v12, "isEqual:", v4);

        if ((v13 & 1) != 0)
          break;
        if (v8 == (id)++v10)
        {
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
          if (v8)
            goto LABEL_5;
          goto LABEL_11;
        }
      }
      v14 = v11;

      if (v14)
        goto LABEL_14;
    }
    else
    {
LABEL_11:

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "earnedInstances"));
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "lastObject"));

LABEL_14:
    v22 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shallowCopyReplacingEarnedInstances:", v16));

  }
  return v5;
}

id sub_10005CAA8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = _HKActivityCacheDateComponentsFromCacheIndex(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = ACHDateComponentsForYearMonthDay(objc_msgSend(v2, "year"), objc_msgSend(v2, "month"), objc_msgSend(v2, "day"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  return v4;
}

id sub_10005CB10(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar hk_gregorianCalendar](NSCalendar, "hk_gregorianCalendar"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "components:fromDate:", ACHCalendarUnitForDayMonthYear, v1));

  return v3;
}

void sub_10005CBB8(id a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "bounds");
  v3 = v2;

  v4 = v3 * 0.034;
  qword_10083DF00 = *(_QWORD *)&v4;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  qword_10083DF00 = UIRoundToScreenScale(v4);

}

void sub_10005CE38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    v10 = kHKDefaultUserWeightKG;
    if (v6)
      goto LABEL_3;
LABEL_5:
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10 * kHKBaselineMETs / 3600.0));
    goto LABEL_6;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("kg")));
  objc_msgSend(v5, "doubleValueForUnit:", v8);
  v10 = v9;

  if (!v7)
    goto LABEL_5;
LABEL_3:
  v11 = 0;
LABEL_6:
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005CF80;
  block[3] = &unk_100777F68;
  v12 = *(id *)(a1 + 32);
  v17 = v7;
  v18 = v12;
  v16 = v11;
  v13 = v7;
  v14 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10005CF80(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10005D064(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if (!(v5 | v6))
  {
    v7 = *(void **)(a1 + 32);
    v9 = 0;
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_bodyMassCharacteristicQuantityWithError:", &v9));
    v6 = (unint64_t)v9;
  }
  v8 = (void *)v6;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10005D270(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = a4;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "lastObject"));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "quantity"));
  (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v8, v6);

}

void sub_10005D980(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v11 = a2;
  objc_msgSend(v5, "centerXForElementAt:width:percent:", a3, 25.0, 0.0);
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "_yValueForCellAtIndex:", a3);
  v9 = v8;
  objc_msgSend(v11, "setFrame:", v7, v8, 25.0, 25.0);
  objc_msgSend(v11, "setFullFrame:", v7, v9, 25.0, 25.0);
  objc_msgSend(*(id *)(a1 + 32), "centerXForElementAt:width:percent:", a3, 25.0, 1.0);
  objc_msgSend(v11, "setNarrowFrame:", v10 + 25.0 * -0.5, v9, 25.0, 25.0);

}

void sub_10005E57C(id a1)
{
  CHFriendListTableViewCell *v1;
  void *v2;

  v1 = -[CHFriendListTableViewCell initWithFrame:]([CHFriendListTableViewCell alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  v2 = (void *)qword_10083DF10;
  qword_10083DF10 = (uint64_t)v1;

}

BOOL sub_10005F0D4()
{
  void *v0;
  double v1;
  _BOOL8 v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "bounds");
  v2 = v1 > 320.0;

  return v2;
}

double sub_10005F11C()
{
  return 16.0;
}

double sub_10005F124()
{
  _BOOL4 v0;
  double result;

  v0 = sub_10005F0D4();
  result = 112.0;
  if (v0)
    return 128.0;
  return result;
}

double sub_10005F150()
{
  _BOOL4 v0;
  double result;

  v0 = sub_10005F0D4();
  result = 152.0;
  if (v0)
    return 168.0;
  return result;
}

double sub_10005F17C()
{
  void *v0;
  double v1;
  double v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "bounds");
  v2 = v1 * 0.5 + -48.0;

  return v2;
}

id sub_10005F1D0()
{
  _BOOL4 v0;
  uint64_t v1;
  void *v2;
  _UNKNOWN **v3;
  _UNKNOWN **v4;
  uint64_t *v5;
  _UNKNOWN **v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10005F0D4();
  v1 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 16.0));
  v2 = (void *)v1;
  if (v0)
  {
    v3 = &off_1007B3F30;
    v10 = v1;
    v4 = &off_1007B3F20;
    v5 = &v10;
    v6 = &off_1007B3F10;
  }
  else
  {
    v9 = v1;
    v4 = &off_1007B3F10;
    v6 = &off_1007B3F40;
    v5 = &v9;
    v3 = &off_1007B3F10;
  }
  v5[1] = (uint64_t)v6;
  v5[2] = (uint64_t)v4;
  v5[3] = (uint64_t)v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:"));

  return v7;
}

id sub_10005F2A8()
{
  if (qword_10083DF48 != -1)
    dispatch_once(&qword_10083DF48, &stru_100778048);
  return (id)qword_10083DF40;
}

void sub_10005F2E8(id a1)
{
  void *v1;
  double Width;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[3];
  CGRect v14;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "bounds");
  Width = CGRectGetWidth(v14);

  v3 = Width * 0.1 + 16.0;
  if (!sub_10005F0D4())
    v3 = v3 + 4.0;
  if (sub_10005F0D4())
    v4 = 168.0;
  else
    v4 = 152.0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v5, "scale");
  v7 = Width + -16.0 - UIRoundToScale(Width * 0.21, v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4, v8));
  v13[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
  v13[2] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 3));
  v12 = (void *)qword_10083DF40;
  qword_10083DF40 = v11;

}

id sub_10005F46C(void *a1, void *a2, int a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  _QWORD v18[4];

  v7 = a2;
  v8 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:](NSLayoutConstraint, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v8, 5, 0, v7, 5, 1.0, 16.0));
  if (a3)
    v10 = 3;
  else
    v10 = 4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:](NSLayoutConstraint, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v8, v10, 0, v7, v10, 1.0, a4));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:](NSLayoutConstraint, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v8, 6, 0, v7, 6, 1.0, 0.0));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v13, "scale");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSLayoutConstraint constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:](NSLayoutConstraint, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v8, 8, 0, 0, 8, 1.0, 1.0 / v14));

  v18[0] = v9;
  v18[1] = v11;
  v18[2] = v12;
  v18[3] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 4));

  return v16;
}

NSString *sub_10005F918(uint64_t a1)
{
  return +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", a1, 3, 0);
}

id sub_10005F930(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSString *v15;
  NSString *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  UIImage *ImageFromCurrentImageContext;
  void *v26;
  _QWORD v28[2];
  _QWORD v29[2];
  CGSize v30;

  v5 = a2;
  v6 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ARUIRingGroup activityRingGroupForRingType:](ARUIRingGroup, "activityRingGroupForRingType:", 3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "forCompanion"));

  LODWORD(v9) = 1145831424;
  objc_msgSend(v8, "setGroupDiameter:", v9);
  LODWORD(v10) = 1121845248;
  objc_msgSend(v8, "setThickness:", v10);
  LODWORD(v11) = 6.0;
  objc_msgSend(v8, "setInterspacing:", v11);
  if ((a3 & 1) != 0)
    v12 = objc_claimAutoreleasedReturnValue(+[ARUISpriteSheetFactory wheelchairSharingSpriteSheet](ARUISpriteSheetFactory, "wheelchairSharingSpriteSheet"));
  else
    v12 = objc_claimAutoreleasedReturnValue(+[ARUISpriteSheetFactory sharingSpriteSheet](ARUISpriteSheetFactory, "sharingSpriteSheet"));
  v13 = (void *)v12;
  objc_msgSend(v8, "setSpriteSheet:", v12);
  objc_msgSend(v8, "hk_configureWithActivitySummary:animated:", v6, 0);

  v30.width = 1200.0;
  v30.height = 1200.0;
  UIGraphicsBeginImageContextWithOptions(v30, 1, 0.0);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[ARUIRingsImageFactory renderRingGroup:withRenderer:](ARUIRingsImageFactory, "renderRingGroup:withRenderer:", v8, 0));
  objc_msgSend(v14, "drawInRect:", 192.0, 123.0, 816.0, 816.0);
  v15 = +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v5, 3, 0);

  v16 = v15;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:", 60.0));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.682352941, 0.705882353, 0.749019608, 1.0));
  v28[0] = NSFontAttributeName;
  v28[1] = NSForegroundColorAttributeName;
  v29[0] = v17;
  v29[1] = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2));
  v20 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v16, v19);
  -[NSString sizeWithAttributes:](v16, "sizeWithAttributes:", v19);
  v22 = v21;
  v24 = v23;

  objc_msgSend(v20, "drawInRect:", (1200.0 - v22) * 0.5, (2139.0 - v24) * 0.5, v22, v24);
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v26 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  UIGraphicsEndImageContext();

  return v26;
}

id sub_10005FBF8(void *a1)
{
  id v1;
  NSString *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v1, 3, 0);
  v3 = v1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  if (objc_msgSend(v4, "isDateInToday:", v3))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("RING_SHARING_TODAY"), &stru_1007AE1D0, CFSTR("Localizable")));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("RING_SHARING_%@"), &stru_1007AE1D0, CFSTR("Localizable")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v2));

  }
  return v6;
}

id sub_10005FD28()
{
  _QWORD v1[5];

  v1[0] = UIActivityTypeAddToReadingList;
  v1[1] = UIActivityTypeOpenInIBooks;
  v1[2] = UIActivityTypeAssignToContact;
  v1[3] = UIActivityTypeAirDrop;
  v1[4] = UIActivityTypeSharePlay;
  return (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v1, 5));
}

void sub_1000601A4(uint64_t a1)
{
  double v2;
  void *v3;
  id v4;
  CGRect v5;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v4, "bounds");
  v2 = CGRectGetWidth(v5) * 0.533;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  qword_10083DF50 = UIRoundToViewScale(v3, v2);

}

id sub_100060C00(void *a1)
{
  id v1;
  void *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bundleID"));
  if (objc_msgSend(v1, "needsWatchIcon"))
    v3 = CFSTR("watch");
  else
    v3 = CFSTR("phone");
  objc_msgSend(v1, "preferredAppStoreIconWidth");
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@_%.2f"), v2, v3, v5));
  return v6;
}

void sub_100062AAC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_toggleAdvancedMode");

}

void sub_100062AD8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_updateAdvanceViewButton:", v3);

}

void sub_100062B20(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100062BC4;
  v5[3] = &unk_1007780C0;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_100062BC4(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_setGoalSchedules:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "_showAdvancedViewIfNeeded");
    objc_msgSend(v3, "_setGoalQuantityForGoalView:", v3[12]);
    WeakRetained = v3;
  }

}

void sub_100062C24(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100062CC8;
  v5[3] = &unk_1007780C0;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_100062CC8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[10], "setAlpha:", 0.0);
    objc_storeStrong(v3 + 17, *(id *)(a1 + 32));
    objc_msgSend(v3, "_setGoalQuantityForGoalView:", v3[12]);
    WeakRetained = v3;
  }

}

intptr_t sub_1000640BC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100064504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064520(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000645C4;
  v5[3] = &unk_1007780C0;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1000645C4(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v4 = WeakRetained;
      objc_storeStrong(WeakRetained + 18, v3);
      objc_msgSend(v4, "_setGoalQuantityForGoalView:", v4[13]);
      objc_msgSend(v4, "_showAdvancedViewIfNeeded");
      objc_msgSend(v4, "updateHeaderViewContent");
      objc_msgSend(v4, "updateContinueButton");
      WeakRetained = v4;
    }
  }

}

void sub_10006492C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064948(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000649EC;
  v5[3] = &unk_1007780C0;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1000649EC(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v4 = WeakRetained;
      objc_storeStrong(WeakRetained + 19, v3);
      objc_msgSend(v4, "_setGoalQuantityForGoalView:", v4[14]);
      objc_msgSend(v4, "_showAdvancedViewIfNeeded");
      objc_msgSend(v4, "updateHeaderViewContent");
      objc_msgSend(v4, "updateContinueButton");
      WeakRetained = v4;
    }
  }

}

void sub_100064BF8(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  _HKInitializeLogging(v4, v5);
  v6 = HKLogSync;
  if (v4 || !a2)
  {
    if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_FAULT))
      sub_1005F1E58();
  }
  else if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[sharing-setup] Finished end to end Cloud sync", v7, 2u);
  }

}

void sub_100064CA4(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  _HKInitializeLogging(v4, v5);
  v6 = HKLogSync;
  if (a2)
  {
    if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[sharing-setup] Successfully forced nano sync after saving activity goals", v7, 2u);
    }
  }
  else if (os_log_type_enabled(HKLogSync, OS_LOG_TYPE_ERROR))
  {
    sub_1005F1EC4();
  }

}

_QWORD *sub_100065120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  result = *(_QWORD **)(a1 + 32);
  v3 = result[11];
  if (v3 == result[12])
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(result, "currentMoveGoal"));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v4;

    v8 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v8 + 264)
      || (v9 = objc_msgSend((id)v8, "_isStandalonePhoneFitnessMode"), v8 = *(_QWORD *)(a1 + 32), !v9))
    {
      if (*(_QWORD *)(v8 + 120))
      {
        objc_msgSend((id)v8, "_removeAdvancedView");
        return _objc_msgSend(*(id *)(a1 + 32), "_displayExerciseGoalViewAnimated:", 1);
      }
    }
    return _objc_msgSend((id)v8, "_saveGoalsAndDismiss", v7);
  }
  if (v3 == result[13])
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(result, "currentExerciseGoal"));
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 248);
    *(_QWORD *)(v11 + 248) = v10;

    v8 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v8 + 120) != 1)
    {
      objc_msgSend((id)v8, "_removeAdvancedView");
      return _objc_msgSend(*(id *)(a1 + 32), "_displayStandGoalViewAnimated:", 1);
    }
    return _objc_msgSend((id)v8, "_saveGoalsAndDismiss", v7);
  }
  if (v3 == result[14])
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(result, "currentStandGoal"));
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(v14 + 256);
    *(_QWORD *)(v14 + 256) = v13;

    v8 = *(_QWORD *)(a1 + 32);
    return _objc_msgSend((id)v8, "_saveGoalsAndDismiss", v7);
  }
  return result;
}

void sub_100065278(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100065338;
  v6[3] = &unk_100778200;
  v3 = (_QWORD *)a1[4];
  v2 = (void *)a1[5];
  v4 = (void *)v3[23];
  v6[1] = 3221225472;
  v7 = v2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hk_filter:", v6));
  objc_msgSend(v3, "_setGoalSchedules:", v5);

  objc_msgSend(*(id *)(a1[4] + 8), "deleteObject:withCompletion:", a1[5], &stru_100778220);
  (*(void (**)(void))(a1[6] + 16))();

}

uint64_t sub_100065338(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32)) ^ 1;
}

void sub_100065358(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSError *v6;

  v4 = a3;
  v6 = v4;
  if (!a2)
  {
    _HKInitializeLogging(v4, v5);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F1F24();
  }

}

BOOL sub_100065788(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "goalType") == *(id *)(a1 + 32);
}

id sub_10006605C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_formattingManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringWithMoveQuantity:activityMoveMode:", v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32)));

  return v6;
}

id sub_1000660C8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  NSBundle *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_formattingManager"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(v4, "_value");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedLongMoveUnitStringWithActivityMoveMode:value:", v6, (unint64_t)v8));
  v11 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32), v10));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("PER_DAY"), &stru_1007AE1D0, CFSTR("ActivitySetup")));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v9, v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedUppercaseString"));

  return v15;
}

id sub_10006632C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_formattingManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringWithBriskMinutes:", v3));

  return v5;
}

id sub_100066384(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  NSBundle *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_formattingManager"));
  objc_msgSend(v4, "_value");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedLongBriskMinutesUnitStringForValue:", (unint64_t)v7));
  v10 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32), v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("PER_DAY"), &stru_1007AE1D0, CFSTR("ActivitySetup")));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v8, v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedUppercaseString"));

  return v14;
}

id sub_1000665D0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_formattingManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringWithActiveHours:", v3));

  return v5;
}

id sub_100066628(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  NSBundle *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_formattingManager"));
  objc_msgSend(v4, "_value");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedLongActiveHoursUnitStringForValue:", (unint64_t)v7));
  v10 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32), v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("PER_DAY"), &stru_1007AE1D0, CFSTR("ActivitySetup")));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v8, v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedUppercaseString"));

  return v14;
}

BOOL sub_1000669A8(id a1, HKActivityGoalSchedule *a2)
{
  HKActivityGoalSchedule *v2;
  BOOL v3;

  v2 = a2;
  if (-[HKActivityGoalSchedule goalType](v2, "goalType"))
    v3 = -[HKActivityGoalSchedule goalType](v2, "goalType") == (id)1;
  else
    v3 = 1;

  return v3;
}

BOOL sub_100066A5C(id a1, HKActivityGoalSchedule *a2)
{
  return -[HKActivityGoalSchedule goalType](a2, "goalType") == (id)2;
}

BOOL sub_100066AE8(id a1, HKActivityGoalSchedule *a2)
{
  return -[HKActivityGoalSchedule goalType](a2, "goalType") == (id)3;
}

void sub_100066E04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = a3;
  v7 = a4;
  v9 = v7;
  if (v7)
  {
    _HKInitializeLogging(v7, v8);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F1F84();
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "quantity"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100067024(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  v9 = v7;
  if (v7)
  {
    _HKInitializeLogging(v7, v8);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F1FE8();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

unint64_t sub_100067150(uint64_t a1, void *a2)
{
  unint64_t result;

  result = (unint64_t)objc_msgSend(a2, "goalType");
  if (result <= 3)
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + *off_1007783D8[result]) = 1;
  return result;
}

BOOL sub_100067300(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v2, "goalType");
  v5 = objc_msgSend(v3, "goalType");

  return v4 == v5;
}

void sub_100067350(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSError *v6;

  v4 = a3;
  v6 = v4;
  if (!a2)
  {
    _HKInitializeLogging(v4, v5);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F204C();
  }

}

void sub_1000673AC(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSError *v6;

  v4 = a3;
  v6 = v4;
  if (!a2)
  {
    _HKInitializeLogging(v4, v5);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F20AC();
  }

}

void *sub_100067B34(uint64_t a1)
{
  void *v2;
  char *v3;
  void *result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  if (!qword_10083DF68)
  {
    v6 = off_1007783C0;
    v7 = 0;
    qword_10083DF68 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    v2 = (void *)qword_10083DF68;
    if (qword_10083DF68)
    {
      if (!v5)
        goto LABEL_5;
    }
    else
    {
      v3 = (char *)abort_report_np("%s", v5);
    }
    free(v3);
    goto LABEL_5;
  }
  v2 = (void *)qword_10083DF68;
LABEL_5:
  result = dlsym(v2, "NRDevicePropertyIsAltAccount");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_10083DF60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100067C24(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100067C3C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t sub_1000687A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "reachableEmailAddress"));
  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "reachablePhoneNumber"));
    v6 = sub_100068950(v5);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "destinationStripped"));

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recipientView", 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recipients"));

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v19;
    while (2)
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v9);
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v13), "address"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v14, "destinationStripped"));

        LOBYTE(v14) = objc_msgSend(v15, "isEqualToString:", v7);
        if ((v14 & 1) != 0)
        {
          v16 = 0;
          goto LABEL_13;
        }
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v11)
        continue;
      break;
    }
  }
  v16 = 1;
LABEL_13:

  return v16;
}

id sub_100068950(void *a1)
{
  id v1;
  void *v2;
  const char *v3;
  char *v4;
  CFStringRef v5;
  const void *v6;
  const void *v7;
  void *String;
  id v9;

  v1 = a1;
  v2 = v1;
  if (v1
    && (v3 = (const char *)CPPhoneNumberCopyNormalized(objc_msgSend(objc_retainAutorelease(v1), "UTF8String"))) != 0)
  {
    v4 = (char *)v3;
    v5 = CFStringCreateWithCString(0, v3, 0x8000100u);
    v6 = (const void *)CPPhoneNumberCopyHomeCountryCode();
    v7 = (const void *)CFPhoneNumberCreate(0, v5, v6);
    String = (void *)CFPhoneNumberCreateString(0, v7, 1);
    if (!String)
      String = (void *)CFPhoneNumberCreateString(0, v7, 1);
    if (v7)
      CFRelease(v7);
    if (v6)
      CFRelease(v6);
    if (v5)
      CFRelease(v5);
    if (String)
    {
      v9 = objc_msgSend(String, "copy");
      CFRelease(String);
    }
    else
    {
      v9 = 0;
    }
    free(v4);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_100069084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000690AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000690BC(uint64_t a1)
{

}

id sub_1000690C4()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[IMServiceImpl iMessageService](IMServiceImpl, "iMessageService"));
  v1 = IMPreferredAccountForService();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "displayName"));

  return v3;
}

void sub_10006911C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id obj;
  _QWORD v14[4];
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a2;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = a3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v9);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
        v11 = *(_QWORD *)(a1 + 48);
        v12 = *(void **)(*(_QWORD *)(a1 + 40) + 128);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_1000692B8;
        v14[3] = &unk_100778450;
        v15 = *(id *)(a1 + 56);
        v17 = *(_OWORD *)(a1 + 64);
        v16 = *(id *)(a1 + 32);
        objc_msgSend(v12, "sendInviteToRecipient:callerID:serviceIdentifier:withCompletion:", v10, v11, v5, v14);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

}

void sub_1000692B8(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  __int128 v10;
  char v11;

  v5 = a3;
  v6 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100069354;
  block[3] = &unk_100778428;
  v11 = a2;
  v10 = *(_OWORD *)(a1 + 48);
  v9 = v5;
  v7 = v5;
  dispatch_sync(v6, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_100069354(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  id *v5;
  void *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v2 = *(_BYTE *)(v1 + 24);
  if (v2)
    v2 = *(_BYTE *)(a1 + 56) != 0;
  *(_BYTE *)(v1 + 24) = v2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v3 + 40);
  v5 = (id *)(v3 + 40);
  v4 = v6;
  if (!v6)
    v4 = *(void **)(a1 + 32);
  objc_storeStrong(v5, v4);
}

uint64_t sub_100069390(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_100069750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100069784(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_destinationMatchesCurrentAccountDestination:", a2) ^ 1;
}

void sub_1000697A4(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  NSObject *v22;
  void *v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
  if (objc_msgSend(v6, "isEqualToString:", CFSTR("CHInvitationDestinationError")))
  {
    v7 = objc_msgSend(v5, "code");

    if (!v7)
    {
      ASLoggingInitialize();
      v8 = ASLogDefault;
      if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_ERROR))
        sub_1005F210C(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("SHARING_CANNOT_INVITE_MESSAGE"), &stru_1007AE1D0, CFSTR("Localizable")));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v10, v12, 1));

      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 0, 0));
      objc_msgSend(v13, "addAction:", v16);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentViewController"));
      objc_msgSend(v17, "presentViewController:animated:completion:", v13, 1, 0);
LABEL_21:

      goto LABEL_22;
    }
  }
  else
  {

  }
  if (v5 || (a2 & 1) == 0)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    if (objc_msgSend(v20, "isEqualToString:", IDSSendErrorDomain))
      v21 = objc_msgSend(v5, "code") == (id)1;
    else
      v21 = 0;

    ASLoggingInitialize();
    v22 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_ERROR))
      sub_1005F214C((uint64_t)v5, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v24 = v23;
    if (v21)
      v25 = CFSTR("SHARING_CANNOT_INVITE_MESSAGE");
    else
      v25 = CFSTR("SHARING_INVITE_ERROR");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localizedStringForKey:value:table:", v25, &stru_1007AE1D0, CFSTR("Localizable")));

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "windows"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "firstObject"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "rootViewController"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v30, v13, 1));

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v33, 0, 0));
    objc_msgSend(v31, "addAction:", v34);

    objc_msgSend(v17, "presentViewController:animated:completion:", v31, 1, 0);
    objc_msgSend(*(id *)(a1 + 32), "_dismissAndNotifyDelegate");

    goto LABEL_21;
  }
  ASLoggingInitialize();
  v18 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(a1 + 40);
    v37 = 138412290;
    v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sent invitation to destinations %@", (uint8_t *)&v37, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "_dismissAndNotifyDelegate");
LABEL_22:
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationItem"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "rightBarButtonItem"));
  objc_msgSend(v36, "setEnabled:", 1);

}

void sub_100069C3C(id *a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, char, void *);
  void *v24;
  id v25;
  _QWORD v26[5];
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a2;
  v4 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v29 = 0;
    v30 = &v29;
    v31 = 0x2020000000;
    v32 = 0;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100069F34;
    v26[3] = &unk_1007784F0;
    v26[4] = WeakRetained;
    v28 = &v29;
    v27 = a1[4];
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v26);
    v7 = v30[3];
    if (v7 >= (unint64_t)objc_msgSend(a1[5], "count"))
    {
      v17 = a1[4];
      v21 = _NSConcreteStackBlock;
      v22 = 3221225472;
      v23 = sub_10006A16C;
      v24 = &unk_100778518;
      objc_copyWeak(&v25, v4);
      objc_msgSend(v6, "_sendInviteToRecipientsByService:completion:", v17, &v21);
      objc_msgSend(v6, "_dismissAndNotifyDelegate", v21, v22, v23, v24);
      objc_destroyWeak(&v25);
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("SHARING_CANNOT_INVITE_MESSAGE"), &stru_1007AE1D0, CFSTR("Localizable")));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v9, v11, 1));

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v14, 0, 0));
      objc_msgSend(v12, "addAction:", v15);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentViewController"));
      objc_msgSend(v16, "presentViewController:animated:completion:", v12, 1, 0);

    }
    v18 = objc_loadWeakRetained(v4);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "navigationItem"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "rightBarButtonItem"));
    objc_msgSend(v20, "setEnabled:", 1);

    _Block_object_dispose(&v29, 8);
  }

}

void sub_100069F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  id *v21;

  objc_destroyWeak(v21);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100069F34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[128];

  v16 = a2;
  v5 = a3;
  v6 = objc_alloc_init((Class)NSMutableSet);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(*(id *)(a1 + 32), "_destinationMatchesCurrentAccountDestination:", v12))
        {
          ASLoggingInitialize();
          v13 = ASLogDefault;
          if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v22 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Skipping destination because it matches current account on this device: %@", buf, 0xCu);
          }
        }
        else
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_recipientFromDestination:", v12));
          if (v14)
          {
            objc_msgSend(v6, "addObject:", v14);
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          }
          else
          {
            ASLoggingInitialize();
            v15 = ASLogDefault;
            if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v22 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Skipping destination because it no longer matches an CNComposeRecipient: %@", buf, 0xCu);
            }
          }

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v9);
  }

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v6, v16);
}

void sub_10006A16C(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  char v8;
  void *v9;
  _BOOL4 v10;
  NSObject *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  id v27;
  __int16 v28;
  _BOOL4 v29;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (v5)
    v8 = 0;
  else
    v8 = a2;
  if ((v8 & 1) == 0 && WeakRetained)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
    if (objc_msgSend(v9, "isEqualToString:", IDSSendErrorDomain))
      v10 = objc_msgSend(v5, "code") == (id)1;
    else
      v10 = 0;

    ASLoggingInitialize();
    v11 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      v26 = 138412546;
      v27 = v5;
      v28 = 1024;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error sending invite (%@), destination unreachable=%d", (uint8_t *)&v26, 0x12u);
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = v12;
    if (v10)
      v14 = CFSTR("SHARING_CANNOT_INVITE_MESSAGE");
    else
      v14 = CFSTR("SHARING_INVITE_ERROR");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", v14, &stru_1007AE1D0, CFSTR("Localizable")));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "windows"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "firstObject"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "rootViewController"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v21, v15, 1));

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v24, 0, 0));
    objc_msgSend(v22, "addAction:", v25);

    objc_msgSend(v19, "presentViewController:animated:completion:", v22, 1, 0);
  }

}

void sub_10006A928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A94C(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  CHContactWithReachableDestination *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  id v30;
  __int16 v31;
  id v32;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v22 = v6;
    v23 = v5;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v25;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v25 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v11);
          v13 = objc_alloc_init(CHContactWithReachableDestination);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "destination"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", v14));
          -[CHContactWithReachableDestination setContact:](v13, "setContact:", v15);

          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "preferredServiceIdentifier"));
          -[CHContactWithReachableDestination setServiceIdentifier:](v13, "setServiceIdentifier:", v16);

          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "additionalServiceIdentifiers"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v17));
          -[CHContactWithReachableDestination setAdditionalServiceIdentifiers:](v13, "setAdditionalServiceIdentifiers:", v18);

          v19 = (void *)objc_claimAutoreleasedReturnValue(-[CHContactWithReachableDestination contact](v13, "contact"));
          if (v19)
          {
            -[CHContactWithReachableDestination setReachableEmailAddress:](v13, "setReachableEmailAddress:", v14);
          }
          else
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v14));
            -[CHContactWithReachableDestination setContact:](v13, "setContact:", v20);

            -[CHContactWithReachableDestination setReachablePhoneNumber:](v13, "setReachablePhoneNumber:", v14);
          }
          objc_msgSend(a1[6], "_addSuggestedContact:", v13, v22, v23, (_QWORD)v24);
          objc_msgSend(a1[6], "setShownContacts:", *((_QWORD *)a1[6] + 2));

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v9);
    }

    v6 = v22;
    v5 = v23;
  }
  else
  {
    ASLoggingInitialize();
    v21 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v30 = v5;
      v31 = 2112;
      v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No reachable destinations for (%@), error: %@", buf, 0x16u);
    }
  }

}

void sub_10006ABFC(id *a1, void *a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  CHContactWithReachableDestination *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v7 = objc_alloc_init(CHContactWithReachableDestination);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", v5));
    -[CHContactWithReachableDestination setContact:](v7, "setContact:", v8);

    -[CHContactWithReachableDestination setServiceIdentifier:](v7, "setServiceIdentifier:", v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue(-[CHContactWithReachableDestination contact](v7, "contact"));

    if (v9)
    {
      -[CHContactWithReachableDestination setReachableEmailAddress:](v7, "setReachableEmailAddress:", v5);
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v5));
      -[CHContactWithReachableDestination setContact:](v7, "setContact:", v10);

      -[CHContactWithReachableDestination setReachablePhoneNumber:](v7, "setReachablePhoneNumber:", v5);
    }
    objc_msgSend(WeakRetained, "_addSuggestedContact:", v7);
    objc_msgSend(WeakRetained, "setShownContacts:", WeakRetained[2]);

  }
}

void sub_10006BA64(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD v14[5];
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "serviceIdentifier"));
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = sub_1000690AC;
  v14[4] = sub_1000690BC;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v4));
  v6 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = objc_alloc_init((Class)NSSet);
  v15 = v7;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006BBB4;
  v9[3] = &unk_1007785E0;
  v10 = a1[5];
  v13 = v14;
  v8 = v4;
  v11 = v8;
  v12 = a1[6];
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v9);

  _Block_object_dispose(v14, 8);
}

void sub_10006BB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BBB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v5 = a2;
  v6 = a3;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v7 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10006BD68;
  v16[3] = &unk_1007785B8;
  v8 = v5;
  v17 = v8;
  v18 = &v19;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v16);
  if (objc_msgSend(v6, "integerValue") == (id)1)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setByAddingObject:", v8));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a1 + 40));
    if (!*((_BYTE *)v20 + 24))
    {
      if (*(_QWORD *)(a1 + 48))
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10006BDB0;
        block[3] = &unk_100777F68;
        v15 = *(id *)(a1 + 48);
        v13 = *(id *)(a1 + 40);
        v14 = v8;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

      }
    }
  }

  _Block_object_dispose(&v19, 8);
}

void sub_10006BD48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10006BD68(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "containsObject:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_10006BDB0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10006BDC4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10006BDCC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[4];
  id v23;
  _BYTE v24[128];

  v2 = objc_alloc_init((Class)NSMutableSet);
  v3 = *(void **)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10006BFBC;
  v22[3] = &unk_100778658;
  v4 = v2;
  v23 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v22);
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_preferredServiceIdentifierForDestination:inReachableDestinationsByService:", v11, *(_QWORD *)(a1 + 32), (_QWORD)v18));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
        v14 = v13;
        if (v13)
          v15 = v13;
        else
          v15 = objc_alloc_init((Class)NSSet);
        v16 = v15;

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "setByAddingObject:", v11));
        objc_msgSend(v5, "setObject:forKeyedSubscript:", v17, v12);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v8);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10006BFBC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "allObjects"));
  objc_msgSend(v3, "addObjectsFromArray:", v4);

}

void sub_10006C220(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "destination"));
    v9 = objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if (v9)
      objc_msgSend(*(id *)(a1 + 40), "setTintColor:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    ASLoggingInitialize();
    v10 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412546;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No reachable destinations for (%@), error: %@", (uint8_t *)&v11, 0x16u);
    }
  }

}

id sub_10006C348(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTintColor:", *(_QWORD *)(a1 + 40));
}

void sub_10006CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006CFA4(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contact"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contact"));

  v9 = objc_msgSend(v10, "isEqual:", v8);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v9;
  *a4 = v9;

}

int64_t sub_10006D260(id a1, CHContactWithReachableDestination *a2, CHContactWithReachableDestination *a3)
{
  CHContactWithReachableDestination *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[CHContactWithReachableDestination contact](a2, "contact"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter stringFromContact:style:](CNContactFormatter, "stringFromContact:style:", v5, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[CHContactWithReachableDestination contact](v4, "contact"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter stringFromContact:style:](CNContactFormatter, "stringFromContact:style:", v7, 0));

  v9 = objc_msgSend(v6, "compare:", v8);
  return (int64_t)v9;
}

void sub_10006EDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006EDC8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id WeakRetained;
  id v13;

  v13 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (v10)
    objc_msgSend(*(id *)(a1 + 32), "setAverageHeartRate:", v10);
  if (v13)
    objc_msgSend(*(id *)(a1 + 32), "setHeartRateReadings:");
  if (v9)
    objc_msgSend(*(id *)(a1 + 32), "setRecoveryHeartRateReadings:", v9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10006F374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 248), 8);
  _Block_object_dispose((const void *)(v31 - 200), 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F3C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006F3D4(uint64_t a1)
{

}

void sub_10006F3DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *i;
  void *v47;
  void *v48;
  double v49;
  double v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  v19 = v17;
  if (v14 && v15)
  {
    v20 = *(void **)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startDate"));
    LODWORD(v20) = objc_msgSend(v20, "_activeDateIntervals:containsDate:", v21, v22);

    if ((_DWORD)v20)
    {
      v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      if (!v23)
      {
        v24 = objc_alloc_init((Class)NSMutableArray);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        v26 = *(void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = v24;

        v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      }
      v27 = objc_alloc((Class)HKHeartRateSummaryReading);
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startDate"));
      v29 = objc_msgSend(v27, "initWithDate:quantity:", v28, v14);
      objc_msgSend(v23, "addObject:", v29);

    }
  }
  else
  {
    _HKInitializeLogging(v17, v18);
    v30 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F21D4((uint64_t)v19, v30, v31, v32, v33, v34, v35, v36);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), a7);
  }
  if (a6)
  {
    v37 = *(void **)(a1 + 48);
    if (v37)
    {
      v38 = (id)objc_claimAutoreleasedReturnValue(+[HKUnit _countPerMinuteUnit](HKUnit, "_countPerMinuteUnit"));
      objc_msgSend(v37, "doubleValueForUnit:", v38);
      v39 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v41 = *(void **)(v40 + 40);
      *(_QWORD *)(v40 + 40) = v39;
    }
    else
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
      {
LABEL_29:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
        goto LABEL_30;
      }
      v59 = v19;
      v60 = v16;
      v61 = v13;
      v38 = objc_alloc_init((Class)NSMutableData);
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v42 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
      if (v43)
      {
        v44 = v43;
        v45 = *(_QWORD *)v63;
        do
        {
          for (i = 0; i != v44; i = (char *)i + 1)
          {
            if (*(_QWORD *)v63 != v45)
              objc_enumerationMutation(v42);
            v47 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "quantity"));
            objc_msgSend(v48, "_beatsPerMinute");
            v50 = v49;

            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "date"));
            objc_msgSend(v38, "fiui_appendHeartRate:date:", v51, v50);

          }
          v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v62, v66, 16);
        }
        while (v44);
      }

      v52 = *(void **)(a1 + 56);
      if (!v52)
        v52 = *(void **)(a1 + 64);
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "startDate"));
      v13 = v61;
      v53 = *(void **)(a1 + 56);
      if (!v53)
        v53 = *(void **)(a1 + 64);
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "endDate"));
      v19 = v59;
      v16 = v60;
      objc_msgSend(v38, "fiui_weightedAverageHeartRateWithStartDate:endDate:", v41, v54);
      if (v55 != 0.0)
      {
        v56 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v58 = *(void **)(v57 + 40);
        *(_QWORD *)(v57 + 40) = v56;

      }
    }

    goto LABEL_29;
  }
LABEL_30:

}

void sub_10006F77C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  v19 = v17;
  if (v14 && v15)
  {
    v20 = *(void **)(a1 + 32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startDate"));
    LODWORD(v20) = objc_msgSend(v20, "containsDate:", v21);

    if ((_DWORD)v20)
    {
      v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      if (!v22)
      {
        v23 = objc_alloc_init((Class)NSMutableArray);
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v25 = *(void **)(v24 + 40);
        *(_QWORD *)(v24 + 40) = v23;

        v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      }
      v26 = objc_alloc((Class)HKHeartRateSummaryReading);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startDate"));
      v28 = objc_msgSend(v26, "initWithDate:quantity:", v27, v14);
      objc_msgSend(v22, "addObject:", v28);

    }
  }
  else
  {
    _HKInitializeLogging(v17, v18);
    v29 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2238((uint64_t)v19, v29, v30, v31, v32, v33, v34, v35);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a7);
  }
  if (a6)
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_10006F914(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40));
}

void sub_10006FB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_10006FB4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDistanceSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10006FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  uint64_t v13;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_10006FF34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "totalDistance"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, *(_QWORD *)(a1 + 40));

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10006FFD4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id obj;
  uint64_t v25;
  _QWORD block[4];
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  v4 = a2;
  v23 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit meterUnit](HKUnit, "meterUnit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, 0.0));

  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v35 = 0u;
  obj = v4;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v7)
  {
    v8 = v7;
    v25 = *(_QWORD *)v36;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v36 != v25)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v9);
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v11 = *(id *)(a1 + 32);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
        if (v12)
        {
          v13 = v12;
          v14 = *(_QWORD *)v32;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v32 != v14)
                objc_enumerationMutation(v11);
              v16 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v15);
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "startDate"));
              LODWORD(v16) = objc_msgSend(v16, "containsDate:", v17);

              if ((_DWORD)v16)
              {
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "quantity"));
                v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_quantityByAddingQuantity:", v18));

                v6 = (void *)v19;
              }
              v15 = (char *)v15 + 1;
            }
            while (v13 != v15);
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          }
          while (v13);
        }

        v9 = (char *)v9 + 1;
      }
      while (v9 != v8);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100070294;
  block[3] = &unk_100777F68;
  v20 = *(id *)(a1 + 40);
  v28 = v6;
  v29 = v23;
  v30 = v20;
  v21 = v23;
  v22 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100070294(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100070450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100070478(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  _QWORD block[4];
  id v34;
  __int128 v35;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  v19 = v17;
  if (v14 && v15)
  {
    v31 = v16;
    v32 = v13;
    v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (!v20)
    {
      v21 = objc_alloc_init((Class)NSMutableArray);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v23 = *(void **)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;

      v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    }
    v24 = *(_QWORD *)(a1 + 32);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startDate"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "endDate"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:", v24, v14, v25, v26));
    objc_msgSend(v20, "addObject:", v27);

    v16 = v31;
    v13 = v32;
    if (!a6)
      goto LABEL_11;
LABEL_10:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007067C;
    block[3] = &unk_1007784A0;
    v34 = *(id *)(a1 + 40);
    v35 = *(_OWORD *)(a1 + 48);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    goto LABEL_11;
  }
  _HKInitializeLogging(v17, v18);
  v28 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
    sub_1005F229C(a1, (uint64_t)v19, v28);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = 0;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a7);
  if (a6)
    goto LABEL_10;
LABEL_11:

}

uint64_t sub_10007067C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_1000708BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1000708D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  id v9;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1007788B0));
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "filteredArrayUsingPredicate:", v7));

    objc_msgSend(*(id *)(a1 + 32), "setCadenceSamples:", v9);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

BOOL sub_1000709A0(id a1, HKQuantitySample *a2, NSDictionary *a3)
{
  void *v3;
  double v4;
  BOOL v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[HKQuantitySample fiui_dateInterval](a2, "fiui_dateInterval", a3));
  objc_msgSend(v3, "duration");
  v5 = v4 < 5.0;

  return v5;
}

void sub_100070CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_100070CE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setStrokeSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100070D6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v6 = a3;
  v7 = a4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100070E28;
  block[3] = &unk_100777F68;
  v8 = *(id *)(a1 + 32);
  v13 = v7;
  v14 = v8;
  v12 = v6;
  v9 = v7;
  v10 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100070E28(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100070FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071014(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPaceSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000712C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1000712E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPowerSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100071538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_100071554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCyclingSpeedSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10007179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000717B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setStrideLengthSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100071A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071A1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setVerticalOscillationSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100071C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071C80(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setGroundContactTimeSamples:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100071F84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_100071FA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSplits:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t sub_10007202C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10007223C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_100072258(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCustomSplits:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t sub_1000722E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_100072574(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_100072590(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSegments:", v3);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

BOOL sub_100072604(id a1, HKWorkoutEvent *a2, NSDictionary *a3)
{
  HKWorkoutEvent *v3;
  void *v4;
  void *v5;
  BOOL v6;

  v3 = a2;
  if ((id)-[HKWorkoutEvent type](v3, "type") == (id)4)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[HKWorkoutEvent metadata](v3, "metadata"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", FIUIPrivateMetadataKeyMarkerEventSubtype));

    if (v5)
      v6 = objc_msgSend(v5, "intValue") == 1;
    else
      v6 = 1;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100072694(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_segmentsForWorkout:markerEvents:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100072764;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_100072764(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100072940(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDownhillRuns:", v3);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000729B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_downhillRunsForWorkout:error:", v3, &v13));
  v5 = v13;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100072A84;
  v9[3] = &unk_100777F68;
  v6 = *(id *)(a1 + 48);
  v11 = v5;
  v12 = v6;
  v10 = v4;
  v7 = v5;
  v8 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

}

uint64_t sub_100072A84(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100072C60(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setIntervals:", v3);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100072CD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_intervalsForWorkout:error:", v3, &v13));
  v5 = v13;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100072DA4;
  v9[3] = &unk_100777F68;
  v6 = *(id *)(a1 + 48);
  v11 = v5;
  v12 = v6;
  v10 = v4;
  v7 = v5;
  v8 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

}

uint64_t sub_100072DA4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10007305C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10007307C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setTrackLaps:", v3);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

BOOL sub_1000730F0(id a1, HKWorkoutEvent *a2, NSDictionary *a3)
{
  return (id)-[HKWorkoutEvent type](a2, "type", a3) == (id)3;
}

void sub_100073110(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_trackLapsForWorkout:lapEvents:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000731E0;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_1000731E0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000733F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimDistanceByStrokeStyle:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100073484(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_swimDistanceByStrokeStyleForWorkout:workoutActivity:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100073554;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_100073554(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10007376C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimDistanceByStrokeStyle:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000737F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_openWaterSwimDistanceByStrokeStyleForWorkout:workoutActivity:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000738C8;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_1000738C8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100073AE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimmingSets:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100073B6C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_swimmingSetsForWorkout:workoutActivity:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100073C3C;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_100073C3C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100073E54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimmingSplits:", v7);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "saveContainerToCache:forWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100073EE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_swimmingSplitsForWorkout:workoutActivity:error:", v3, v4, &v14));
  v6 = v14;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100073FB0;
  v10[3] = &unk_100777F68;
  v7 = *(id *)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

uint64_t sub_100073FB0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10007446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000744C8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;

  v8 = a3;
  v9 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000745B8;
  v13[3] = &unk_1007789B8;
  v14 = a5;
  v10 = v14;
  objc_copyWeak(&v17, (id *)(a1 + 32));
  v15 = v9;
  v16 = v8;
  v11 = v8;
  v12 = v9;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v13);

  objc_destroyWeak(&v17);
}

void sub_1000745B8(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 32))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      _HKInitializeLogging(WeakRetained, v4);
      if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_ERROR))
        sub_1005F2320();
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "healthStore"));
      objc_msgSend(v6, "stopQuery:", v5[5]);

      v7 = (void *)v5[5];
      v5[5] = 0;

    }
  }
  else
  {
    _HKInitializeLogging(a1, a2);
    v8 = HKLogWorkouts;
    if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = 138412290;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Workout Data Calculator] Updated Effort Relationship Query with anchor %@", (uint8_t *)&v10, 0xCu);
    }
    v5 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v5, "_handleUpdatedRelationships:withAnchor:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }

}

void sub_1000746E8(uint64_t a1, void *a2)
{
  CHEffortSampleCollection *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "count"))
  {
    v3 = -[CHEffortSampleCollection initWithQuantitySamples:]([CHEffortSampleCollection alloc], "initWithQuantitySamples:", v8);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cacheContainerForWorkout:workoutActivity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
      objc_msgSend(v6, "setEffortSampleCollection:", v3);
      objc_msgSend(v5, "saveContainerToCache:forWorkout:workoutActivity:", v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[CHEffortSampleCollection preferredQuantity](v3, "preferredQuantity"));

  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000747B4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100074844;
  v6[3] = &unk_1007788D8;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_100074844(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100074D38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *i;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  id obj;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  v7 = a2;
  v31 = a1;
  v32 = a5;
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_activeDateIntervalsForWorkout:during:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v8 = objc_alloc_init((Class)NSMutableData);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v7;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v9)
  {
    v10 = v9;
    v34 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v34)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v13 = v35;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v37;
          do
          {
            for (j = 0; j != v15; j = (char *)j + 1)
            {
              if (*(_QWORD *)v37 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j);
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "date"));
              LODWORD(v18) = objc_msgSend(v18, "containsDate:", v19);

              if ((_DWORD)v18)
              {
                v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "quantity"));
                objc_msgSend(v20, "_beatsPerMinute");
                v22 = v21;

                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "date"));
                objc_msgSend(v8, "fiui_appendHeartRate:date:", v23, v22);

              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          }
          while (v15);
        }

      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    }
    while (v10);
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v31 + 48), "startDate"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v31 + 48), "endDate"));
  objc_msgSend(v8, "fiui_weightedAverageHeartRateWithStartDate:endDate:", v24, v25);
  v27 = v26;

  if (v27 == 0.0)
  {
    v30 = v32;
    (*(void (**)(void))(*(_QWORD *)(v31 + 56) + 16))();
  }
  else
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit _countPerMinuteUnit](HKUnit, "_countPerMinuteUnit"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v28, v27));

    (*(void (**)(void))(*(_QWORD *)(v31 + 56) + 16))();
    v30 = v32;
  }

}

void sub_100075104(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id obj;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];

  v5 = a2;
  v6 = a3;
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_activeDateIntervalsForWorkout:during:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v7 = v5;
  v36 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  obj = v7;
  if (!v36)
  {

LABEL_25:
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_26;
  }
  v32 = a1;
  v34 = *(_QWORD *)v43;
  v8 = 0.0;
  v9 = 0.0;
  do
  {
    v10 = 0;
    do
    {
      if (*(_QWORD *)v43 != v34)
        objc_enumerationMutation(obj);
      v37 = v10;
      v11 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v10);
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v12 = v35;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v39;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v39 != v15)
              objc_enumerationMutation(v12);
            v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "startDate"));
            LODWORD(v17) = objc_msgSend(v17, "containsDate:", v18);

            if ((_DWORD)v17)
            {
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "quantityType"));
              v20 = 1.0;
              if (!objc_msgSend(v19, "aggregationStyle"))
              {
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fiui_dateInterval"));
                objc_msgSend(v21, "duration");
                v20 = v22;

              }
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "quantity"));
              v24 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit _countPerMinuteUnit](HKUnit, "_countPerMinuteUnit"));
              v25 = objc_msgSend(v23, "isCompatibleWithUnit:", v24);

              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "quantity"));
              if (v25)
              {
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit _countPerMinuteUnit](HKUnit, "_countPerMinuteUnit"));
                objc_msgSend(v26, "doubleValueForUnit:", v27);
                v29 = v28 / 60.0;
              }
              else
              {
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit countUnit](HKUnit, "countUnit"));
                objc_msgSend(v26, "doubleValueForUnit:", v27);
              }
              v8 = v8 + v20;
              v9 = v9 + v29;

            }
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        }
        while (v14);
      }

      v10 = v37 + 1;
    }
    while ((id)(v37 + 1) != v36);
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  }
  while (v36);

  a1 = v32;
  if (v8 <= 0.0)
    goto LABEL_25;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit _countPerMinuteUnit](HKUnit, "_countPerMinuteUnit"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v30, v9 / v8 * 60.0));

  (*(void (**)(void))(*(_QWORD *)(v32 + 56) + 16))();
LABEL_26:

}

void sub_100075544(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  void *i;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  id obj;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  v5 = a2;
  v6 = a3;
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_activeDateIntervalsForWorkout:during:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (!v8)
  {

LABEL_20:
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_21;
  }
  v9 = v8;
  v26 = a1;
  v27 = v6;
  obj = v7;
  v29 = *(_QWORD *)v36;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    for (i = 0; i != v9; i = (char *)i + 1)
    {
      if (*(_QWORD *)v36 != v29)
        objc_enumerationMutation(obj);
      v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v14 = v30;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v32;
        do
        {
          for (j = 0; j != v16; j = (char *)j + 1)
          {
            if (*(_QWORD *)v32 != v17)
              objc_enumerationMutation(v14);
            v19 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "startDate"));
            LODWORD(v19) = objc_msgSend(v19, "containsDate:", v20);

            if ((_DWORD)v19)
            {
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "quantity"));
              v22 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit wattUnit](HKUnit, "wattUnit"));
              objc_msgSend(v21, "doubleValueForUnit:", v22);
              v11 = v11 + v23;

              v10 = v10 + 1.0;
            }
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
        }
        while (v16);
      }

    }
    v7 = obj;
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  }
  while (v9);

  a1 = v26;
  v6 = v27;
  if (v10 <= 0.0)
    goto LABEL_20;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit wattUnit](HKUnit, "wattUnit"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v24, v11 / v10));

  (*(void (**)(void))(*(_QWORD *)(v26 + 56) + 16))();
LABEL_21:

}

void sub_100075890(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  void *i;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0, a3);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", &off_1007B3BA8));
    if (objc_msgSend(v4, "count"))
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v5 = v4;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v6)
      {
        v7 = v6;
        v8 = 0;
        v9 = *(_QWORD *)v20;
        v10 = 0.0;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v20 != v9)
              objc_enumerationMutation(v5);
            v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
            objc_msgSend(v12, "durationScaledToFillSplit", (_QWORD)v19);
            v10 = v10 + v13;
            v8 += (unint64_t)objc_msgSend(v12, "strokeCountScaledToFillSplit");
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        }
        while (v7);
      }
      else
      {
        v8 = 0;
        v10 = 0.0;
      }

      v14 = v10 / (double)(unint64_t)objc_msgSend(v5, "count");
      v15 = (uint64_t)(double)(v8 / (unint64_t)objc_msgSend(v5, "count"));
      v16 = *(_QWORD *)(a1 + 32);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v15));
      (*(void (**)(uint64_t, void *, void *, _QWORD))(v16 + 16))(v16, v17, v18, 0);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }

  }
}

void sub_100076488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1000764D8(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v6, v5);

  objc_msgSend(v4, "addObject:", v7);
}

void sub_100076550(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  char v15;

  v10 = a2;
  v5 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a3);
  if (objc_msgSend(v10, "count"))
  {
    v6 = FUInterpolateQuantitySamplesOverDateIntervals(v10, *(_QWORD *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100076644;
    v11[3] = &unk_100778AF8;
    v12 = *(id *)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v15 = *(_BYTE *)(a1 + 80);
    v9 = *(_QWORD *)(a1 + 56);
    v13 = v8;
    v14 = v9;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v11);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

}

void sub_100076644(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  id v28;

  v28 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "distance"));

  if (!v6)
    objc_msgSend(v5, "setDistance:", v28);
  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stepKeyPath"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requiredDistanceForIntervalTimeGoalForStepKeyPath:", v8));

  if (*(_BYTE *)(a1 + 56) && v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workoutActivities"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", a3));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "metadata"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[HKWorkout kIntervalWorkoutStepDistanceGoalAchievedDurationKey](HKWorkout, "kIntervalWorkoutStepDistanceGoalAchievedDurationKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "metadata"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[HKWorkout kIntervalWorkoutStepDistanceGoalAchievedDateKey](HKWorkout, "kIntervalWorkoutStepDistanceGoalAchievedDateKey"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

    v18 = *(void **)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stepKeyPath"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "expectedIntervalDurationForStepKeyPath:", v19));

    if (v14)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit secondUnit](HKUnit, "secondUnit"));
      objc_msgSend(v20, "doubleValueForUnit:", v21);
      objc_msgSend(v5, "setElapsedTime:");

      objc_msgSend(v14, "doubleValue");
      v23 = v22;
    }
    else
    {
      if (!v17)
      {
LABEL_10:

        goto LABEL_11;
      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit secondUnit](HKUnit, "secondUnit"));
      objc_msgSend(v20, "doubleValueForUnit:", v24);
      objc_msgSend(v5, "setElapsedTime:");

      v25 = *(void **)(a1 + 48);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "startDate"));
      objc_msgSend(v25, "_activeWorkoutElapsedTimeFromDate:toDate:forWorkout:workoutActivity:", v26, v17, *(_QWORD *)(a1 + 40), v11);
      v23 = v27;

    }
    objc_msgSend(v5, "setDistanceGoalAchievedTime:", v23);
    goto LABEL_10;
  }
LABEL_11:

}

void sub_1000768A0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v6 = a4;
  v10 = v6;
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = v6;
    v9 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v8;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "sumQuantity"));
    objc_msgSend(*(id *)(a1 + 32), "setActiveEnergy:", v9);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000772A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1000772F4(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v6, v5);

  objc_msgSend(v4, "addObject:", v7);
}

void sub_10007736C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v8 = a2;
  v5 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  if (objc_msgSend(v8, "count"))
  {
    v6 = FUInterpolateQuantitySamplesOverDateIntervals(v8, *(_QWORD *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100077440;
    v9[3] = &unk_100778B70;
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v9);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_100077440(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "distance"));

  if (!v6)
    objc_msgSend(v5, "setDistance:", v7);

}

void sub_1000774AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v6 = a4;
  v10 = v6;
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = v6;
    v9 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v8;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "sumQuantity"));
    objc_msgSend(*(id *)(a1 + 32), "setActiveEnergy:", v9);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000776B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000776DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v9 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100077DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_100077E04(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v6, v5);

  objc_msgSend(v4, "addObject:", v7);
}

void sub_100077E7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v19 = a2;
  v18 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v5 = objc_alloc_init((Class)NSMutableArray);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v12 = objc_alloc((Class)NSDateInterval);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "startDate", v18));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "endDate"));
        v15 = objc_msgSend(v12, "initWithStartDate:endDate:", v13, v14);
        objc_msgSend(v5, "addObject:", v15);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v19, "count"))
  {
    v16 = FUInterpolateQuantitySamplesOverDateIntervals(v19, v5);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000780A8;
    v20[3] = &unk_100778BE8;
    v21 = *(id *)(a1 + 40);
    v22 = *(id *)(a1 + 32);
    objc_msgSend(v17, "enumerateObjectsUsingBlock:", v20);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1000780A8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metadata"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allKeys"));
  v8 = objc_msgSend(v7, "containsObject:", FIPrivateMetadataKeyLapDistance);

  if ((v8 & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a3));
    objc_msgSend(v9, "setDistance:", v10);

  }
}

void sub_10007815C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v6 = a4;
  v10 = v6;
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = v6;
    v9 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v8;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "sumQuantity"));
    objc_msgSend(*(id *)(a1 + 32), "setActiveEnergy:", v9);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000784F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100078528(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100078564(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000785A0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  _UNKNOWN **v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _UNKNOWN **v16;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "metadata"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", HKMetadataKeySwimmingStrokeStyle));
  v9 = (void *)v8;
  v10 = &off_1007B3BD8;
  if (v8)
    v10 = (_UNKNOWN **)v8;
  v16 = v10;

  if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count") >= a3 + 1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectAtIndexedSubscript:", a3));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "quantity"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v16));
    if (v13)
    {
      v14 = v13;
      v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_quantityByAddingQuantity:", v12));

    }
    else
    {
      v15 = v12;
    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v15, v16);

  }
  else
  {
    *a4 = 1;
  }

}

BOOL sub_100078978(id a1, HKWorkoutEvent *a2, NSDictionary *a3)
{
  return (id)-[HKWorkoutEvent type](a2, "type", a3) == (id)3;
}

void sub_100078E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_100078ED4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100078F10(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100078F4C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  CHWorkoutSwimmingSet *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  double v28;
  unint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  double v44;
  void *v45;
  void *v46;
  void *v47;
  id *v48;
  void *v49;
  _QWORD v50[4];
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[4];
  id v61;
  _BYTE v62[128];
  _BYTE v63[128];

  v5 = a2;
  v6 = a1;
  if ((char *)objc_msgSend(*(id *)(a1 + 32), "count") - 1 == a3)
    v7 = 0;
  else
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3 + 1));
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_100079494;
  v60[3] = &unk_100778C80;
  v8 = v5;
  v61 = v8;
  v9 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v60));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8) + 40), "filteredArrayUsingPredicate:", v9));
  v47 = (void *)v9;
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 8) + 40), "filteredArrayUsingPredicate:", v9));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 8) + 40), "removeObjectsInArray:", v10);
  v48 = (id *)v6;
  v45 = (void *)v11;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 8) + 40), "removeObjectsInArray:", v11);
  v12 = objc_alloc_init(CHWorkoutSwimmingSet);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dateInterval"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "startDate"));
  -[CHWorkoutSwimmingSet setStartDate:](v12, "setStartDate:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dateInterval"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "endDate"));
  -[CHWorkoutSwimmingSet setMovementEndDate:](v12, "setMovementEndDate:", v16);

  if (v7)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dateInterval"));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "startDate"));
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dateInterval"));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "endDate"));
  }
  v19 = (void *)v18;
  v46 = v8;
  v49 = v7;
  -[CHWorkoutSwimmingSet setEndDate:](v12, "setEndDate:", v18);

  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v20 = v10;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v56, v63, 16);
  if (v21)
  {
    v22 = v21;
    v23 = 0;
    v24 = *(_QWORD *)v57;
    do
    {
      for (i = 0; i != v22; i = (char *)i + 1)
      {
        if (*(_QWORD *)v57 != v24)
          objc_enumerationMutation(v20);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i), "quantity"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit countUnit](HKUnit, "countUnit"));
        objc_msgSend(v26, "doubleValueForUnit:", v27);
        v29 = llround(v28);

        v23 += v29;
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v56, v63, 16);
    }
    while (v22);
  }
  else
  {
    v23 = 0;
  }

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit meterUnit](HKUnit, "meterUnit"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v30, 0.0));

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v32 = v45;
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v52, v62, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v53;
    do
    {
      v36 = 0;
      v37 = v31;
      do
      {
        if (*(_QWORD *)v53 != v35)
          objc_enumerationMutation(v32);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)v36), "quantity"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "_quantityByAddingQuantity:", v38));

        v36 = (char *)v36 + 1;
        v37 = v31;
      }
      while (v34 != v36);
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v52, v62, 16);
    }
    while (v34);
  }

  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_100079564;
  v50[3] = &unk_100778CA8;
  v39 = v46;
  v51 = v39;
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v50));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48[5], "filteredArrayUsingPredicate:", v40));
  -[CHWorkoutSwimmingSet setDominantStrokeStyle:](v12, "setDominantStrokeStyle:", objc_msgSend(v48[6], "_queue_strokeStyleForLaps:", v41));
  -[CHWorkoutSwimmingSet setStrokeCount:](v12, "setStrokeCount:", v23);
  -[CHWorkoutSwimmingSet setDistance:](v12, "setDistance:", v31);
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "metadata"));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectForKeyedSubscript:", HKMetadataKeySWOLFScore));
  objc_msgSend(v43, "doubleValue");
  -[CHWorkoutSwimmingSet setSwolfScore:](v12, "setSwolfScore:", (uint64_t)v44);

  if ((id)-[CHWorkoutSwimmingSet dominantStrokeStyle](v12, "dominantStrokeStyle") == (id)6)
  {
    -[CHWorkoutSwimmingSet setStrokeCount:](v12, "setStrokeCount:", 0);
    -[CHWorkoutSwimmingSet setSwolfScore:](v12, "setSwolfScore:", 0);
  }
  objc_msgSend(v48[7], "addObject:", v12);

}

BOOL sub_100079494(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  _BOOL8 v11;

  v3 = a2;
  v4 = objc_alloc((Class)NSDateInterval);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "endDate"));

  v7 = objc_msgSend(v4, "initWithStartDate:endDate:", v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dateInterval"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "intersectionWithDateInterval:", v8));
  objc_msgSend(v9, "duration");
  v11 = v10 > 2.22044605e-16;

  return v11;
}

BOOL sub_100079564(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  _BOOL8 v8;

  v3 = a2;
  if (objc_msgSend(v3, "type") == (id)3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dateInterval"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dateInterval"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "intersectionWithDateInterval:", v5));
    objc_msgSend(v6, "duration");
    v8 = v7 > 2.22044605e-16;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_100079D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100079D90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  double v5;
  double result;

  objc_msgSend(a3, "timeIntervalSinceDate:", a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_10007A130(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  uint64_t v29;
  double v30;
  id v31;

  v5 = a2;
  v31 = v5;
  if (a3)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a3 - 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "endDate"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "startDate"));
    objc_msgSend(v6, "_activeWorkoutElapsedTimeFromDate:toDate:forWorkout:workoutActivity:", v8, v9, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v11 = v10;

    v5 = v31;
    if (v11 > 2.22044605e-16)
    {
      v12 = *(void **)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 64);
      objc_msgSend(*(id *)(a1 + 72), "doubleValueForUnit:", *(_QWORD *)(a1 + 80));
      objc_msgSend(v12, "_updateSplits:withDistance:duration:strokeCount:splitDelimiterInUserUnit:", v13, 0, 0.0, v11, v14);
      v5 = v31;
    }
  }
  v15 = *(void **)(a1 + 32);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "startDate"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "endDate"));
  objc_msgSend(v15, "_activeWorkoutElapsedTimeFromDate:toDate:forWorkout:workoutActivity:", v16, v17, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v19 = v18;

  v20 = *(void **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "quantity"));
  objc_msgSend(v22, "doubleValueForUnit:", *(_QWORD *)(a1 + 80));
  v24 = v23;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "objectAtIndexedSubscript:", a3));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "quantity"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[HKUnit countUnit](HKUnit, "countUnit"));
  objc_msgSend(v26, "doubleValueForUnit:", v27);
  v29 = (uint64_t)v28;
  objc_msgSend(*(id *)(a1 + 72), "doubleValueForUnit:", *(_QWORD *)(a1 + 80));
  objc_msgSend(v20, "_updateSplits:withDistance:duration:strokeCount:splitDelimiterInUserUnit:", v21, v29, v24, v19, v30);

}

void sub_10007AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_10007AB48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10007AB84(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10007AD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", a2, a3, 1));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_10007ADDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", a2, a3, 1));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_10007AF1C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v6, v5);

  objc_msgSend(v4, "addObject:", v7);
}

void sub_10007AF94(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v6, v5);

  objc_msgSend(v4, "addObject:", v7);
}

NSPredicate *__cdecl sub_10007B170(id a1, NSDateInterval *a2)
{
  NSDateInterval *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateInterval startDate](v2, "startDate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateInterval endDate](v2, "endDate"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v3, v4, 1));
  return (NSPredicate *)v5;
}

void sub_10007B414(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  char *v9;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
  v7 = objc_msgSend(v6, "compare:", v5);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
  v9 = (char *)objc_msgSend(v8, "compare:", v22);

  if (v7 != (id)1 && v9 + 1 != 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    v12 = objc_msgSend(v11, "compare:", v5);

    v13 = objc_msgSend(*(id *)(a1 + 40), "count");
    if (v12 != (id)-1 || v13)
      v14 = v22;
    else
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    v15 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
    v17 = objc_msgSend(v16, "compare:", v5);

    if (v17 == (id)-1)
      v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
    else
      v18 = v5;
    v19 = v18;
    v20 = *(void **)(a1 + 40);
    v21 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v15, v18);
    objc_msgSend(v20, "addObject:", v21);

  }
}

void sub_10007B640(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  char *v9;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
  v7 = objc_msgSend(v6, "compare:", v5);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
  v9 = (char *)objc_msgSend(v8, "compare:", v22);

  if (v7 != (id)1 && v9 + 1 != 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    v12 = objc_msgSend(v11, "compare:", v5);

    v13 = objc_msgSend(*(id *)(a1 + 40), "count");
    if (v12 != (id)-1 || v13)
      v14 = v22;
    else
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
    v15 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
    v17 = objc_msgSend(v16, "compare:", v5);

    if (v17 == (id)-1)
      v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endDate"));
    else
      v18 = v5;
    v19 = v18;
    v20 = *(void **)(a1 + 40);
    v21 = objc_msgSend(objc_alloc((Class)NSDateInterval), "initWithStartDate:endDate:", v15, v18);
    objc_msgSend(v20, "addObject:", v21);

  }
}

void sub_10007C1D0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id *sub_10007D820(id *result, uint64_t a2)
{
  id *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    _HKInitializeLogging(result, a2);
    v3 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2428(v3, v4, v5, v6, v7, v8, v9, v10);
    return (id *)objc_msgSend(v2[4], "_openKBURLWithRetry");
  }
  return result;
}

void sub_10007D874(id a1, BOOL a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    _HKInitializeLogging(a1, a2);
    v2 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F245C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_100080B10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100080B2C(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *WeakRetained;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[5];
  id v24;
  uint8_t buf[4];
  int v26;

  v5 = a3;
  v7 = v5;
  if (v5)
  {
    _HKInitializeLogging(v5, v6);
    v8 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F24F8((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v17 = WeakRetained;
  if (WeakRetained)
  {
    if ((a2 & 1) != 0)
    {
      v18 = *(void **)(a1 + 32);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100080C94;
      v23[3] = &unk_100777EB8;
      v23[4] = WeakRetained;
      v24 = v18;
      FIUIUserHasExistingExerciseAndStandGoals(v24, v23, v19, v20, v21);

    }
    else
    {
      _HKInitializeLogging(WeakRetained, v16);
      v22 = HKLogActivity;
      if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CHASActivitySetupMetricsCollectionViewController - hasExistingMoveGoal %d", buf, 8u);
      }
      v17[7] = 3;
    }
  }

}

void sub_100080C94(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[5];
  uint8_t buf[4];
  int v19;

  v5 = a3;
  v7 = v5;
  if (v5)
  {
    _HKInitializeLogging(v5, v6);
    v8 = HKLogActivity;
    v5 = (id)os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v5)
    {
      sub_1005F255C((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
      if (a2)
        goto LABEL_4;
LABEL_8:
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100080DE0;
      v17[3] = &unk_100778138;
      v16 = *(_QWORD *)(a1 + 40);
      v17[4] = *(_QWORD *)(a1 + 32);
      FIUIUserHasExistingPreKincaidMoveGoal(v16, v17);
      goto LABEL_9;
    }
  }
  if (!a2)
    goto LABEL_8;
LABEL_4:
  _HKInitializeLogging(v5, v6);
  v15 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v19 = 1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CHASActivitySetupMetricsCollectionViewController - hasExistingExerciseAndStandGoals %d", buf, 8u);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 5;
LABEL_9:

}

void sub_100080DE0(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _DWORD v17[2];

  v5 = a3;
  v7 = v5;
  if (v5)
  {
    _HKInitializeLogging(v5, v6);
    v8 = HKLogActivity;
    v5 = (id)os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v5)
      sub_1005F25C0((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
  }
  _HKInitializeLogging(v5, v6);
  v15 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109120;
    v17[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CHASActivitySetupMetricsCollectionViewController - hasExistingPreKincaidMoveGoal %d", (uint8_t *)v17, 8u);
  }
  v16 = 4;
  if (a2)
    v16 = 5;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = v16;

}

void sub_10008106C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "buddyControllerReleaseHoldAndSkip:", *(_QWORD *)(a1 + 32));

}

void sub_1000818D4(id a1, UIAlertAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  objc_msgSend(v2, "setWheelchairDataSubmissionAllowed:", 1);

}

void sub_10008190C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSBundle *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSBundle *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id location;

  v3 = a2;
  v4 = objc_alloc_init((Class)BPSAboutDetailViewController);
  v6 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32), v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("FEEDBACK_WHEELCHAIR_MORE_INFO_TITLE"), &stru_1007AE1D0, CFSTR("ActivitySetup")));
  objc_msgSend(v4, "setTitleString:", v8);

  v10 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32), v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("FEEDBACK_WHEELCHAIR_MORE_INFO_DESCRIPTION"), &stru_1007AE1D0, CFSTR("ActivitySetup")));
  objc_msgSend(v4, "setHeaderString:", v12);

  objc_initWeak(&location, *(id *)(a1 + 32));
  v13 = *(_QWORD *)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100081AA8;
  v14[3] = &unk_100777C80;
  objc_copyWeak(&v15, &location);
  objc_msgSend(v4, "presentWithController:onDismiss:", v13, v14);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

}

void sub_100081A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100081AA8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_requestWheelchairDiagnosticsSubmissionIfNecessary");

}

void sub_100081AD4(id a1, UIAlertAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  objc_msgSend(v2, "setWheelchairDataSubmissionAllowed:", 0);

}

void sub_100081C9C(id a1, BOOL a2)
{
  NSObject *v2;
  uint8_t v3[16];

  _HKInitializeLogging(a1, a2);
  v2 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CHASActivitySetupMetricsCollectionViewController opened url to Pregnancy setup in Health", v3, 2u);
  }
}

void sub_100081D90(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", objc_msgSend(*(id *)(a1 + 40), "section")));
  objc_msgSend(v3, "reloadSections:withRowAnimation:", v2, 5);

}

void sub_100081EE0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_100081F30(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)AAUIAchievementResourceProvider);
  v2 = (void *)qword_10083DF70;
  qword_10083DF70 = (uint64_t)v1;

}

id sub_100082490(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100083C94(uint64_t a1)
{
  void *v2;
  __int128 v3;
  void *v4;
  _OWORD v5[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "badgeView"));
  v3 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v5[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v5[1] = v3;
  v5[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(v2, "setTransform:", v5);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "badgeView"));
  objc_msgSend(v4, "setAlpha:", 1.0);

}

void sub_100083D08(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = ACHLogDefault();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Modal presentation of achievement completion", v5, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  objc_msgSend(v4, "setNavigationBarHidden:animated:", 0, 0);

}

double sub_10008443C(double a1, double a2)
{
  return a2 * 0.5 + UIRoundToViewScale(0, a1 - a2 * 0.5);
}

double sub_10008446C(double a1, double a2)
{
  return UIRoundToViewScale(0, a1 + a2 * -0.5);
}

void sub_100084784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000847B4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_reloadDataFromProvider");

}

void sub_1000847E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_reloadDataForFilter");

}

void sub_10008549C(_QWORD *a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = *(void **)(a1[4] + 16);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sortedDateComponentKeys"));
  v8 = objc_msgSend(v7, "containsObject:", v6);

  if ((v8 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", a3));
    objc_msgSend(WeakRetained, "deleteSections:withRowAnimation:", v10, 6);

    v11 = (void *)a1[5];
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    objc_msgSend(v11, "removeObject:", v12);

    v13 = (void *)a1[6];
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    objc_msgSend(v13, "addObject:", v14);

  }
}

void sub_1000855B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  if ((objc_msgSend(*(id *)(a1[4] + 72), "containsObject:", a2) & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 8));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", a3));
    objc_msgSend(WeakRetained, "insertSections:withRowAnimation:", v6, 6);

    v7 = (void *)a1[5];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    objc_msgSend(v7, "removeObject:", v8);

    v9 = (void *)a1[6];
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    objc_msgSend(v9, "addObject:", v10);

  }
}

void sub_1000856B0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "section")));
  objc_msgSend(v2, "addObject:", v3);

}

NSIndexPath *__cdecl sub_100085708(id a1, NSNumber *a2)
{
  return +[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", 0, -[NSNumber integerValue](a2, "integerValue"));
}

void sub_10008573C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  LOBYTE(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((v4 & 1) == 0)
    _objc_msgSend(*(id *)(a1 + 40), "_reloadHeaderForSection:", a2);
}

void sub_1000857B0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  LOBYTE(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((v4 & 1) == 0)
    _objc_msgSend(*(id *)(a1 + 40), "_reloadHeaderForSection:", a2);
}

void sub_100085990(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_indexPathsToRemoveForSection:", a2));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_100085C84(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("section==%@"), v5));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "filteredArrayUsingPredicate:", v6));

  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_indexPathsToInsertForSection:deletedIndexPaths:", a2, v9));
  objc_msgSend(v7, "addObjectsFromArray:", v8);

}

void sub_100086CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100086D2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v5;
  id WeakRetained;
  void (**v7)(id, uint64_t);

  v5 = (id *)(a1 + 40);
  v7 = a4;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "_deleteWorkoutAtIndexPath:", *(_QWORD *)(a1 + 32));

  v7[2](v7, 1);
}

void sub_100086E48(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  if (a2)
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100086EF4;
    v8[3] = &unk_100778138;
    v9 = v5;
    objc_msgSend(v6, "deleteWorkout:shouldDeleteAssociatedSamples:completion:", v9, a3, v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "seymourCatalogItemDataProvider"));
    objc_msgSend(v7, "deleteArchivedSessionForWorkout:", *(_QWORD *)(a1 + 40));

  }
}

void sub_100086EF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v4 = a3;
  v6 = v4;
  if (v4)
  {
    _HKInitializeLogging(v4, v5);
    v7 = (void *)HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2664(a1, v7, (uint64_t)v6);
  }

}

id sub_100087088(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_100087090(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("WORKOUT_SHARE_PREVIEW_ITEM_TITLE"), &stru_1007AE1D0, CFSTR("Localizable")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("square.and.arrow.up")));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100087200;
  v9[3] = &unk_100779068;
  v10 = *(id *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v3, v4, 0, v9));

  v11 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v6));

  return v7;
}

id sub_100087200(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "shareTapped:", 0);
}

void sub_1000872D4(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 96));
  objc_msgSend(WeakRetained, "workoutsListDataSource:didSelectWorkout:atIndexPath:", a1[4], a1[5], a1[6]);

}

void sub_100087E74(id a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  *(double *)&qword_10083DF80 = 1.0 / v1;

}

void sub_1000881C4(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v5 = a3;
  _HKInitializeLogging(v5, v6);
  v7 = HKLogActivity;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 134217984;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CHMoveModeUtilities saved new move mode: %ld", buf, 0xCu);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0));
    v10 = FIDefaultExerciseGoalQuantityForActivityMoveMode(*(_QWORD *)(a1 + 56));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = FIDefaultStandGoalQuantityForActivityMoveMode(*(_QWORD *)(a1 + 56));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100088374;
    v18[3] = &unk_100779140;
    v15 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v19 = v9;
    v21 = v14;
    v16 = *(void **)(a1 + 40);
    v20 = v16;
    v17 = v9;
    FISaveGoalsForNewActivityMoveMode(v14, v16, v17, v11, v13, v15, v18);

  }
  else if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
  {
    sub_1005F2720();
  }

}

void sub_100088374(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v5 = a3;
  _HKInitializeLogging(v5, v6);
  v7 = HKLogActivity;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 48);
      v11 = 138412546;
      v12 = v8;
      v13 = 2048;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CHMoveModeUtilities saved new move goal: %@ with move mode: %ld default exercise/stand goals.", (uint8_t *)&v11, 0x16u);
    }
    if (FIIsActivePairedDeviceSatellitePaired())
    {
      objc_msgSend(*(id *)(a1 + 40), "forceCloudSyncDataUploadForProfileWithCompletion:", &stru_1007790F8);
    }
    else
    {
      v10 = objc_msgSend(objc_alloc((Class)HKNanoSyncControl), "initWithHealthStore:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v10, "forceNanoSyncWithOptions:completion:", 0, &stru_100779118);

    }
  }
  else if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
  {
    sub_1005F2780();
  }

}

void sub_1000884AC(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  _HKInitializeLogging(v4, v5);
  v6 = HKLogActivity;
  if (a2)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CHMoveModeUtilities successfully forced cloud sync after saving activity move mode", v7, 2u);
    }
  }
  else if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
  {
    sub_1005F27E0();
  }

}

void sub_100088550(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a3;
  _HKInitializeLogging(v4, v5);
  v6 = HKLogActivity;
  if (a2)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CHMoveModeUtilities successfully forced nano sync after saving activity move mode", v7, 2u);
    }
  }
  else if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
  {
    sub_1005F2840();
  }

}

void sub_1000892A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 144));
  _Unwind_Resume(a1);
}

void sub_1000892F0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    ASLoggingInitialize();
    v2 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received phone status changed notification", v3, 2u);
    }
    objc_msgSend(WeakRetained, "_getAndHandlePhoneCloudKitAccountStatus");
  }

}

void sub_100089374(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    ASLoggingInitialize();
    v2 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received Watch pairing changed notification", v3, 2u);
    }
    objc_msgSend(WeakRetained, "_updateActivitySharingWatchPairingStatus");
  }

}

void sub_1000898B8(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "_cachedWatchCloudKitAccountAssumedToExist");
    WeakRetained[43] = (_BYTE)v3;
    ASLoggingInitialize(v3);
    v4 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      v5 = WeakRetained[43];
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No longer assuming parity between phone and watch, resetting assumption to value from cache: %d", (uint8_t *)v6, 8u);
    }
  }

}

void sub_10008A480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A49C(uint64_t a1, char a2, int a3, void *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v11;
  char v12;
  uint8_t buf[4];
  void *v14;

  v7 = a4;
  v8 = v7;
  if (v7 || !a3)
  {
    ASLoggingInitialize(v7);
    v9 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to fetch phone account info with error: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008A5CC;
    block[3] = &unk_1007791D8;
    v12 = a2;
    objc_copyWeak(&v11, (id *)(a1 + 40));
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v11);
  }

}

void sub_10008A5CC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id WeakRetained;
  void *v5;
  _BOOL8 v6;
  id v7;
  _BOOL4 v8;
  NSObject *v9;
  const char *v10;
  int v11;
  void *v12;
  uint64_t v13;

  ASLoggingInitialize(a1);
  v2 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Successfully fetched phone account info from healthstore: %d", (uint8_t *)&v13, 8u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (objc_msgSend(WeakRetained, "phoneCloudKitAccountIsActive") & 1) == 0 && *(_BYTE *)(a1 + 48) != 0;
    v7 = objc_msgSend(v5, "phoneCloudKitAccountIsActive");
    if ((_DWORD)v7)
      v8 = *(_BYTE *)(a1 + 48) == 0;
    else
      v8 = 0;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80))
    {
      if (v6)
      {
        ASLoggingInitialize(v7);
        v9 = ASLogDefault;
        if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          v10 = "Phone status is transitioning to active";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, 2u);
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      if (v8)
      {
        ASLoggingInitialize(v7);
        v9 = ASLogDefault;
        if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          v10 = "Phone status is transitioning to inactive";
          goto LABEL_17;
        }
LABEL_18:
        objc_msgSend(v5, "setWatchCloudKitAccountAssumedToExist:", v6, v13);
        objc_msgSend(v5, "setWatchCloudKitAccountExists:", v6);
      }
    }
    v11 = *(unsigned __int8 *)(a1 + 48);
    if (v11 != objc_msgSend(v5, "phoneCloudKitAccountIsActive"))
    {
      objc_msgSend(v5, "setPhoneCloudKitAccountIsActive:", *(unsigned __int8 *)(a1 + 48));
      objc_msgSend(v5, "_handleWatchStatusAndCloudKitAccountStatusChange");
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v5, "setLastPhoneCloudKitAccountFetchTimestamp:", v12);

  }
}

void sub_10008A8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A91C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008A9E0;
  block[3] = &unk_100779228;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v10 = v6;
  v11 = v5;
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v12);
}

void sub_10008A9E0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  unsigned int v34;
  _BYTE v35[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    ASLoggingInitialize(WeakRetained);
    v5 = ASLogDefault;
    if (v4)
    {
      if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_ERROR))
        sub_1005F28A0((uint64_t *)(a1 + 32), v5);
    }
    else
    {
      if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully fetched watch account info from NSS", buf, 2u);
      }
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", kNSSAccountsKey));
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      if (v7)
      {
        v8 = v7;
        v26 = v3;
        v9 = *(_QWORD *)v28;
        v10 = kNSSAccountIsPrimaryiCloudAccountKey;
        v11 = kNSSAccountUsernameKey;
        while (2)
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v28 != v9)
              objc_enumerationMutation(v6);
            v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v10));
            v15 = objc_msgSend(v14, "BOOLValue");

            ASLoggingInitialize(v16);
            v17 = (void *)ASLogDefault;
            if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
            {
              v18 = v17;
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v11));
              *(_DWORD *)buf = 138412546;
              v32 = v19;
              v33 = 1024;
              v34 = v15;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "NSS found account: %@, primary=%d", buf, 0x12u);

            }
            if ((v15 & 1) != 0)
            {
              v20 = 1;
              goto LABEL_19;
            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
          if (v8)
            continue;
          break;
        }
        v20 = 0;
LABEL_19:
        v3 = v26;
      }
      else
      {
        v20 = 0;
      }

      v21 = objc_msgSend(v3, "watchCloudKitAccountAssumedToExist");
      if ((_DWORD)v21)
      {
        ASLoggingInitialize(v21);
        v22 = ASLogDefault;
        if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Currently assuming parity between phone and watch, ignoring this result", buf, 2u);
        }
      }
      else
      {
        v23 = objc_msgSend(v3, "watchCloudKitAccountExists");
        if ((_DWORD)v20 != (_DWORD)v23)
        {
          ASLoggingInitialize(v23);
          v24 = ASLogDefault;
          if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v32) = v20;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Watch CloudKit status changed to %{BOOL}d; handling.",
              buf,
              8u);
          }
          objc_msgSend(v3, "setWatchCloudKitAccountExists:", v20);
          objc_msgSend(v3, "_handleWatchStatusAndCloudKitAccountStatusChange");
        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        objc_msgSend(v3, "setLastWatchCloudKitAccountFetchTimestamp:", v25);

      }
    }
    objc_msgSend(v3, "setWatchCloudKitAccountFetchInProgress:", 0);
  }

}

void sub_10008BA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008BA90(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "buttonControllerDidUpdate");

}

void sub_10008CA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008CA38(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v8 = objc_loadWeakRetained(v4);
  objc_msgSend(v7, "achievementsView:didTapAchievement:cell:", v8, v6, v5);

}

void sub_10008CE54(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083DF90;
  qword_10083DF90 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DF90, "setDateFormat:", CFSTR("a"));
}

void sub_10008CED4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083DFA0;
  qword_10083DFA0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DFA0, "setDateFormat:", CFSTR("h:mm"));
}

uint64_t sub_10008D710(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v1 = a1;
  v2 = qword_10083DFB0;
  if (!qword_10083DFB0)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian));
    v4 = (void *)qword_10083DFB0;
    qword_10083DFB0 = v3;

    v2 = qword_10083DFB0;
  }
  v5 = _HKActivityCacheDateComponentsFromDate(v1, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = _HKCacheIndexFromDateComponents(v6);

  return v7;
}

BOOL sub_10008D794(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  uint64_t v11;
  void *v12;
  double v13;
  uint64_t v14;
  _BOOL8 v16;
  NSString *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  const __CFString *v21;
  uint64_t v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  void *v33;

  v7 = a4;
  v8 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  objc_msgSend(v9, "doubleValue");
  v11 = (uint64_t)v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(v12, "doubleValue");
  v14 = (uint64_t)v13;

  v16 = v14 >= a2 && v11 <= a3;
  if (a2 == a3)
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld"), a2, v23);
  else
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(%lld-%lld)"), a2, a3);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  _HKInitializeLogging(v18, v19);
  v20 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    v21 = CFSTR("does not match");
    *(_DWORD *)buf = 138413314;
    v25 = v7;
    if (v16)
      v21 = CFSTR("matching");
    v26 = 2048;
    v27 = v11;
    v28 = 2048;
    v29 = v14;
    v30 = 2112;
    v31 = v21;
    v32 = 2112;
    v33 = v18;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%@] Activity summary updates in range (%lld-%lld), %@ %@", buf, 0x34u);
  }

  return v16;
}

void sub_10008DFB8(double *a1, void *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  double MaxY;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  unsigned int v16;
  id v17;
  CGRect v18;

  v6 = a2;
  v17 = v6;
  if (a3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)a1 + 5) + 144), "objectAtIndexedSubscript:", a3 - 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nextWeekStartDate"));
    objc_msgSend(v17, "setMonthWeekStart:", v8);

    objc_msgSend(v7, "frame");
    MaxY = CGRectGetMaxY(v18);
    v10 = a1[8];
    objc_msgSend(v17, "preferredHeight");
    objc_msgSend(v17, "setFrame:", 0.0, MaxY, v10, v11);

  }
  else
  {
    objc_msgSend(v6, "setMonthWeekStart:", *((_QWORD *)a1 + 4));
    v12 = a1[8];
    objc_msgSend(v17, "preferredHeight");
    objc_msgSend(v17, "setFrame:", 0.0, 0.0, v12, v13);
    objc_msgSend(v17, "preferredHeight");
    objc_msgSend(*(id *)(*((_QWORD *)a1 + 5) + 120), "setContentOffset:", 0.0, v14);
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "currentWeekStartDate"));
  v16 = objc_msgSend(v15, "isEqualToDate:", *(_QWORD *)(*((_QWORD *)a1 + 5) + 64));

  if (v16)
    objc_storeStrong((id *)(*((_QWORD *)a1 + 5) + 56), a2);

}

void sub_10008ED70(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "center");
  v4 = v3;
  v5 = *(double *)(*(_QWORD *)(a1 + 32) + 40) - *(double *)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(v9, "backingOriginOffset");
  v7 = v5 + v6;
  objc_msgSend(v9, "additionalSpacing");
  objc_msgSend(v9, "setCenter:", v4, v7 + v8);

}

void sub_10008FA48(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;

  v5 = a2;
  v13 = v5;
  if (!*(_BYTE *)(a1 + 56))
  {
    v6 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "count") + a3;
    v5 = v13;
    a3 = (unint64_t)&v6[-HKDaysInAWeek];
  }
  objc_msgSend(v5, "setBackingOriginOffset:", *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "heightForCellAtIndex:oneTime:", a3 % 7, 0);
  objc_msgSend(v13, "setAdditionalSpacing:");
  objc_msgSend(v13, "center");
  v8 = v7;
  v9 = *(double *)(*(_QWORD *)(a1 + 32) + 40) - *(double *)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(v13, "backingOriginOffset");
  v11 = v9 + v10;
  objc_msgSend(v13, "additionalSpacing");
  objc_msgSend(v13, "setCenter:", v8, v11 + v12);

}

id sub_10008FF40(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setScale:", a2);
}

void sub_10009006C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthScrollDelegate"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthScrollDelegate"));
    objc_msgSend(v3, "dateSelected:", *(_QWORD *)(a1 + 40));

  }
}

id sub_10009022C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_loadActivitySummariesForWeek:ringGroupIndex:", a2, HKDaysInAWeek * a3);
}

void sub_1000902C4(uint64_t a1, void *a2, uint64_t a3)
{
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;

  objc_msgSend(a2, "doubleValue");
  v6 = (uint64_t)v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ActivitySummaryCache sharedInstance](ActivitySummaryCache, "sharedInstance"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activitySummaryForCacheIndex:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40) + a3));
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  if (v12)
    v10 = objc_msgSend(v9, "isPausedForActivitySummary:", v12);
  else
    v10 = objc_msgSend(v9, "isPausedForActivitySummaryCacheIndex:", v6);
  v11 = v10;
  objc_msgSend(v12, "setPaused:", v10);
  objc_msgSend(v8, "hk_configureWithActivitySummary:animated:", v12, 0);
  objc_msgSend(v8, "setIsPaused:", v11);

}

id sub_10009043C(uint64_t a1, void *a2, uint64_t a3)
{
  double v5;

  objc_msgSend(a2, "doubleValue");
  return _objc_msgSend(*(id *)(a1 + 40), "setHasWorkout:onDayIndex:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "existsWorkoutOnCacheIndex:", (uint64_t)v5), a3);
}

void sub_100091858(void *a1, double a2, double a3)
{
  id v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  double v23;
  _QWORD v24[2];
  _QWORD v25[2];

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v6, "scale");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:", 60.0 / v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.682352941, 0.705882353, 0.749019608, 1.0));
  v24[0] = NSFontAttributeName;
  v24[1] = NSForegroundColorAttributeName;
  v25[0] = v9;
  v25[1] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 2));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v5, 3, 0));

  v13 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v12, v11);
  objc_msgSend(v12, "sizeWithAttributes:", v11);
  v15 = v14;
  v17 = v16;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  v19 = UIRoundToScreenScale((a2 - v15) * 0.5);

  objc_msgSend(v9, "ascender");
  v21 = a3 + -124.0 / v8 - v20;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  v23 = UIRoundToScreenScale(v21);

  objc_msgSend(v13, "drawInRect:", v19, v23, v15, v17);
}

void sub_100091A80(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD v20[3];
  _QWORD v21[3];

  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = objc_alloc_init((Class)NSMutableParagraphStyle);
  objc_msgSend(v12, "setAlignment:", 0);
  v20[0] = NSFontAttributeName;
  v20[1] = NSForegroundColorAttributeName;
  v21[0] = v10;
  v21[1] = v9;
  v20[2] = NSParagraphStyleAttributeName;
  v21[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 3));
  v14 = objc_alloc((Class)NSAttributedString);

  v15 = objc_msgSend(v14, "initWithString:attributes:", v11, v13);
  objc_msgSend(v11, "sizeWithAttributes:", v13);
  v17 = v16;
  v19 = v18;

  objc_msgSend(v15, "drawInRect:", a4, a5, v17, v19);
}

void sub_100091BEC(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v19[0] = NSFontAttributeName;
  v19[1] = NSForegroundColorAttributeName;
  v20[0] = a2;
  v20[1] = a3;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
  v13 = objc_alloc((Class)NSAttributedString);

  v14 = objc_msgSend(v13, "initWithString:attributes:", v11, v12);
  objc_msgSend(v11, "sizeWithAttributes:", v12);
  v16 = v15;
  v18 = v17;

  objc_msgSend(v14, "drawInRect:", a4, a5, v16, v18);
}

void sub_100091D28(void *a1, void *a2, void *a3, void *a4, void *a5, double a6, double a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];

  v36[0] = NSFontAttributeName;
  v36[1] = NSForegroundColorAttributeName;
  v37[0] = a3;
  v37[1] = a5;
  v33 = a5;
  v13 = a4;
  v14 = a3;
  v15 = a2;
  v16 = a1;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 2));
  v18 = objc_msgSend(objc_alloc((Class)NSMutableAttributedString), "initWithString:attributes:", v16, v17);
  v34[0] = UIFontFeatureTypeIdentifierKey;
  v34[1] = UIFontFeatureSelectorIdentifierKey;
  v35[0] = &off_1007B3C80;
  v35[1] = &off_1007B3C98;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 2));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fontDescriptor"));

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fontDescriptorByAddingAttributes:", v32));
  v21 = v14;
  objc_msgSend(v14, "pointSize");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v20));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "string"));
  v24 = objc_msgSend(v23, "rangeOfString:", v15);
  v26 = v25;

  objc_msgSend(v18, "addAttribute:value:range:", NSFontAttributeName, v22, v24, v26);
  v27 = objc_alloc_init((Class)NSMutableParagraphStyle);

  objc_msgSend(v27, "setAlignment:", 0);
  objc_msgSend(v18, "addAttribute:value:range:", NSParagraphStyleAttributeName, v27, 0, objc_msgSend(v18, "length"));
  objc_msgSend(v16, "sizeWithAttributes:", v17);
  v29 = v28;
  v31 = v30;

  objc_msgSend(v18, "drawInRect:", a6, a7, v29, v31);
}

void sub_100091FCC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *DeviceRGB;
  void *v9;
  id v10;
  id v11;
  const __CFArray *v12;
  CGGradient *v13;
  CGContext *CurrentContext;
  _QWORD v15[2];
  CGPoint v16;
  CGPoint v17;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.149019608, 0.149019608, 0.149019608, 1.0));
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor")));
  v15[0] = objc_msgSend(v10, "CGColor");
  v11 = objc_retainAutorelease(v9);
  v15[1] = objc_msgSend(v11, "CGColor");
  v12 = (const __CFArray *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 2));
  v13 = CGGradientCreateWithColors(DeviceRGB, v12, 0);

  CurrentContext = UIGraphicsGetCurrentContext();
  v16.x = a1;
  v16.y = a2;
  v17.x = a3;
  v17.y = a4;
  CGContextDrawLinearGradient(CurrentContext, v13, v16, v17, 0);
  CGColorSpaceRelease(DeviceRGB);
  CGGradientRelease(v13);

}

void sub_100092114(void *a1, double a2, double a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  CGContext *CurrentContext;
  CGPath *Mutable;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  _BOOL4 v22;
  double v23;
  double v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  double v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _UNKNOWN **v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD v55[2];
  _QWORD v56[2];
  void *v57;
  UIFontDescriptorAttributeName v58;
  void *v59;
  NSAttributedStringKey v60;
  void *v61;

  v7 = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "metricTitleAndValueInfo"));
  v9 = objc_msgSend(v8, "count");

  v10 = &FIUIDistanceTypeForActivityType_ptr;
  v11 = &FIUIDistanceTypeForActivityType_ptr;
  if ((unint64_t)v9 < 3)
  {
    v24 = 0.55;
  }
  else
  {
    CurrentContext = UIGraphicsGetCurrentContext();
    Mutable = CGPathCreateMutable();
    v14 = a4 * 0.5 + 8.0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "metricTitleAndValueInfo"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectAtIndexedSubscript:", 1));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "title"));
    v60 = NSFontAttributeName;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 14.0, UIFontWeightMedium));
    v61 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
    objc_msgSend(v17, "sizeWithAttributes:", v19);
    v21 = v20;

    v11 = &FIUIDistanceTypeForActivityType_ptr;
    v22 = v21 + 24.0 > v14;
    if (v21 + 24.0 <= v14)
      v23 = a4 * 0.5 + 8.0;
    else
      v23 = v14 + 12.0;
    v24 = dbl_100620800[v22];
    CGPathMoveToPoint(Mutable, 0, v23, a3 + 7.0);
    CGPathAddLineToPoint(Mutable, 0, v23, a3 + 7.0 + 39.0);
    CGPathCloseSubpath(Mutable);
    CGContextAddPath(CurrentContext, Mutable);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
    v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "colorWithAlphaComponent:", 0.2)));
    CGContextSetStrokeColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(v26, "CGColor"));

    CGContextSetLineWidth(CurrentContext, 2.0);
    CGContextSetLineCap(CurrentContext, kCGLineCapRound);
    CGContextStrokePath(CurrentContext);
    CGPathRelease(Mutable);
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "metricTitleAndValueInfo"));
  v28 = objc_msgSend(v27, "count");

  if ((unint64_t)v28 >= 2)
  {
    v52 = UIFontSystemFontDesignRounded;
    v29 = 1;
    v53 = v7;
    do
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "metricTitleAndValueInfo"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectAtIndexedSubscript:", v29));

      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[443], "systemFontOfSize:weight:", 14.0, UIFontWeightMedium));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "title"));
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11[438], "whiteColor"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "colorWithAlphaComponent:", 0.5));
      v54 = v32;
      sub_100091A80(v33, v32, v35, a2, a3);

      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "value"));
      if ((unint64_t)objc_msgSend(v36, "length") <= 7)
        v37 = 30.0;
      else
        v37 = 26.0;

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[443], "systemFontOfSize:weight:design:", v52, v37, UIFontWeightMedium));
      v58 = UIFontDescriptorFeatureSettingsAttribute;
      v55[0] = UIFontFeatureTypeIdentifierKey;
      v55[1] = UIFontFeatureSelectorIdentifierKey;
      v56[0] = &off_1007B3C80;
      v56[1] = &off_1007B3C98;
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v56, v55, 2));
      v57 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v57, 1));
      v59 = v40;
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1));

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "fontDescriptor"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "fontDescriptorByAddingAttributes:", v41));

      v44 = v10;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[443], "fontWithDescriptor:size:", v43, v37));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "unit"));

      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "value"));
      if (v46)
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "unit"));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "valueColor"));
        sub_100091D28(v47, v48, v38, v45, v49, a2, a3 + 16.0);

      }
      else
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "valueColor"));
        sub_100091BEC(v47, v38, v48, a2, a3 + 16.0);
      }

      a2 = a4 * (double)v29 * v24 + 8.0;
      ++v29;
      v7 = v53;
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "metricTitleAndValueInfo"));
      v51 = objc_msgSend(v50, "count");

      v10 = v44;
      v11 = &FIUIDistanceTypeForActivityType_ptr;
    }
    while (v29 < (unint64_t)v51);
  }

}

id sub_1000926B0(void *a1, CGFloat a2, CGFloat a3)
{
  id v5;
  CGContext *CurrentContext;
  void *v7;
  double v8;
  void *v9;
  double v10;
  id v11;
  CGImage *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  UIImage *ImageFromCurrentImageContext;
  void *v29;
  NSAttributedStringKey v31;
  void *v32;
  CGSize v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v5 = a1;
  v33.width = a2;
  v33.height = a3;
  UIGraphicsBeginImageContextWithOptions(v33, 0, 0.0);
  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextSaveGState(CurrentContext);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "routeImage"));

  if (v7)
  {
    v8 = -56.0;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.149019608, 0.149019608, 0.149019608, 1.0));
    objc_msgSend(v9, "setFill");

    v34.origin.x = 0.0;
    v34.origin.y = 0.0;
    v34.size.width = a2;
    v34.size.height = a3;
    CGContextFillRect(CurrentContext, v34);
    v8 = -61.0;
  }
  CGContextTranslateCTM(CurrentContext, 0.0, a3);
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  v10 = a3 + v8;
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "iconImage")));
  v12 = (CGImage *)objc_msgSend(v11, "CGImage");
  v35.origin.x = 24.0;
  v35.origin.y = v10;
  v35.size.width = 40.0;
  v35.size.height = 40.0;
  CGContextDrawImage(CurrentContext, v35, v12);

  CGContextRestoreGState(CurrentContext);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "metricTitleAndValueInfo"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 0));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 16.0, UIFontWeightMedium));
  v36.origin.x = 24.0;
  v36.origin.y = v10;
  v36.size.width = 40.0;
  v36.size.height = 40.0;
  v16 = CGRectGetMidX(v36) + 20.0 + 16.0;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "title"));
  v31 = NSFontAttributeName;
  v32 = v15;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
  objc_msgSend(v17, "sizeWithAttributes:", v18);
  v20 = v19;

  if (v16 + v20 > a2)
  {
    v21 = objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 13.0, UIFontWeightMedium));

    v37.origin.x = 24.0;
    v37.origin.y = v10;
    v37.size.width = 40.0;
    v37.size.height = 40.0;
    v16 = CGRectGetMidX(v37) + 20.0 + 10.0;
    v15 = (void *)v21;
  }
  v38.origin.x = 24.0;
  v38.origin.y = v10;
  v38.size.width = 40.0;
  v38.size.height = 40.0;
  v22 = a3 - CGRectGetMidY(v38) + -10.0;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "title"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v25 = 24.0;
  if (v7)
  {
    v26 = a3 + -111.0;
  }
  else
  {
    v25 = v16;
    v26 = v22;
  }
  if (v7)
    v27 = a3 + -111.0 + 39.0;
  else
    v27 = 74.0;
  sub_100091A80(v23, v15, v24, v25, v26);

  sub_100092114(v5, 24.0, v27, a2);
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v29 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  UIGraphicsEndImageContext();

  return v29;
}

id sub_100092A1C(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  id v6;
  void *v7;
  UIImage *ImageFromCurrentImageContext;
  void *v9;
  CGSize v11;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "routeImage"));

  v3 = 140.0;
  if (v2)
    v4 = 240.0;
  else
    v4 = 140.0;
  v11.width = 270.0;
  v11.height = v4;
  UIGraphicsBeginImageContextWithOptions(v11, 0, 0.0);
  if (v2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "routeImage"));
    v3 = 240.0;
    objc_msgSend(v5, "drawInRect:", 0.0, 0.0, 270.0, 240.0);

    sub_100091FCC(270.0, 0.0, 270.0, 240.0);
    sub_100091FCC(270.0, 0.0, 0.0, 240.0);
  }
  v6 = sub_1000926B0(v1, 270.0, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v7, "drawInRect:", 0.0, 0.0, 270.0, v3);
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v9 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  UIGraphicsEndImageContext();

  return v9;
}

id sub_100092B54(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  CGContext *CurrentContext;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  UIImage *ImageFromCurrentImageContext;
  void *v23;
  CGSize v25;
  CGRect v26;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  v4 = v3;

  v5 = 1200.0 / v4;
  v6 = objc_msgSend(v1, "unearned");
  v7 = 0.65;
  if (v6)
    v7 = 0.75;
  v8 = v5 * v7;
  v9 = objc_alloc_init((Class)AAUIBadgeImageFactory);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "thumbnailImageForAchievement:size:", v1, v8, v8));
  v11 = (v5 - v8) * 0.5;
  if (objc_msgSend(v1, "unearned"))
    v12 = v11;
  else
    v12 = v11 + -30.0;
  v25.width = v5;
  v25.height = v5;
  UIGraphicsBeginImageContextWithOptions(v25, 1, 0.0);
  CurrentContext = UIGraphicsGetCurrentContext();
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  objc_msgSend(v14, "setFill");

  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.width = v5;
  v26.size.height = v5;
  CGContextFillRect(CurrentContext, v26);
  objc_msgSend(v10, "drawAtPoint:", v11, v12);
  if ((objc_msgSend(v1, "unearned") & 1) == 0)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "relevantEarnedInstance"));
    v16 = v15;
    if (v15)
    {
      v17 = v15;
    }
    else
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "earnedInstances"));
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "lastObject"));

    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "earnedDateComponents"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar hk_gregorianCalendar](NSCalendar, "hk_gregorianCalendar"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "dateFromComponents:", v19));

    sub_100091858(v21, v5, v5);
  }
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v23 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  UIGraphicsEndImageContext();

  return v23;
}

void sub_1000946F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009471C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000947B4;
    v6[3] = &unk_100777EE0;
    v6[4] = WeakRetained;
    v7 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

  }
}

void sub_1000947B4(uint64_t a1)
{
  id WeakRetained;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 176), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_fetchBurnBarScoreSummary");
  objc_msgSend(*(id *)(a1 + 32), "_createGuidedRunMediaMomentsSection");
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1000948C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000948E8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint8_t buf[4];
  id v11;

  v3 = a2;
  _HKInitializeLogging(v3, v4);
  v5 = HKLogWorkouts;
  if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[seymour] fetched burn bar score (%@)", buf, 0xCu);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (v3 && WeakRetained)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100094A08;
    v8[3] = &unk_100777EE0;
    v8[4] = WeakRetained;
    v9 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  }
}

void sub_100094A08(uint64_t a1)
{
  id WeakRetained;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 50) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 184), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_createBurnBarSection");
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  objc_msgSend(WeakRetained, "reloadData");

}

id sub_100094E14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setCurrentlySelectedSwimmingPaceFormat:", *(_QWORD *)(a1 + 40));
}

void sub_100095454(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_fetchPreferredTrackDistanceUnit");
  objc_msgSend(*(id *)(a1 + 32), "_createTrackLapsSection");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "reloadData");

}

void sub_100095C5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimDistanceByStrokeStyle:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "swimDistanceByStrokeStyleUpdateBlock"));

    if (v6)
    {
      v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "swimDistanceByStrokeStyleUpdateBlock"));
      ((void (**)(_QWORD, id))v7)[2](v7, v8);

    }
  }

}

void sub_100095CF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSwimDistanceByStrokeStyle:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "swimDistanceByStrokeStyleUpdateBlock"));

    if (v6)
    {
      v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "swimDistanceByStrokeStyleUpdateBlock"));
      ((void (**)(_QWORD, id))v7)[2](v7, v8);

    }
  }

}

void sub_100096328(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10009634C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _CHWorkoutDetailTrackLapTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18[2];

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v8 = objc_alloc_init(_CHWorkoutDetailTrackLapTableItem);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    -[_CHWorkoutDetailTrackLapTableItem setLapIndex:](v8, "setLapIndex:", -1);
    objc_msgSend(v7, "addObject:", v8);

  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100096514;
  v16[3] = &unk_100779510;
  objc_copyWeak(v18, (id *)(a1 + 32));
  v18[1] = *(id *)(a1 + 40);
  v11 = v7;
  v17 = v11;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
  v13 = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "tableItemsBySection"));
  objc_msgSend(v14, "setObject:atIndexedSubscript:", v12, *(_QWORD *)(a1 + 40));

  v15 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v15, "_insertTrackLapsSection");

  objc_destroyWeak(v18);
}

void sub_1000964FC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100096514(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  _CHWorkoutDetailTrackLapTableItem *v11;

  v7 = a2;
  v11 = objc_alloc_init(_CHWorkoutDetailTrackLapTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v11, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailTrackLapTableItem setLapIndex:](v11, "setLapIndex:", a3 + 1);
  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  -[_CHWorkoutDetailTrackLapTableItem setDistanceUnit:](v11, "setDistanceUnit:", objc_msgSend(v10, "trackDistanceUnit"));

  -[_CHWorkoutDetailTrackLapTableItem setTrackLap:](v11, "setTrackLap:", v7);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v11);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_10009682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100096850(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _CHWorkoutDetailSplitTableItem *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD *v26;
  id v27[2];
  _QWORD v28[4];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fitnessUIFormattingManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "unitManager"));
  v11 = objc_msgSend(v10, "userDistanceHKUnitForDistanceType:", FIUIDistanceTypeForActivityType(*(_QWORD *)(a1 + 32)));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v13 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v14 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
    v15 = objc_loadWeakRetained((id *)(a1 + 40));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v14, "setCellClass:", objc_msgSend(v16, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

    -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v14, "setSplitIndex:", -1);
    objc_msgSend(v13, "addObject:", v14);

  }
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v28[3] = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100096AC0;
  v23[3] = &unk_100779560;
  v26 = v28;
  objc_copyWeak(v27, (id *)(a1 + 40));
  v27[1] = *(id *)(a1 + 48);
  v17 = v12;
  v24 = v17;
  v18 = v13;
  v25 = v18;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v23);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v18));
  v20 = objc_loadWeakRetained((id *)(a1 + 40));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "tableItemsBySection"));
  objc_msgSend(v21, "setObject:atIndexedSubscript:", v19, *(_QWORD *)(a1 + 48));

  v22 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v22, "_insertSplitsSection");

  objc_destroyWeak(v27);
  _Block_object_dispose(v28, 8);

}

void sub_100096A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100096AC0(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  _CHWorkoutDetailSplitTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;

  v11 = a2;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0.0)
  {
    objc_msgSend(v11, "distanceInMeters");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7;
  }
  v8 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 64)));

  -[_CHWorkoutDetailSplitTableItem setExpectedSplitDistance:](v8, "setExpectedSplitDistance:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v8, "setSplitIndex:", a3);
  -[_CHWorkoutDetailSplitTableItem setSplit:](v8, "setSplit:", v11);
  -[_CHWorkoutDetailSplitTableItem setUnit:](v8, "setUnit:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_100096CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100096D00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _CHWorkoutDetailSplitTableItem *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  _QWORD *v26;
  id v27[2];
  _QWORD v28[4];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fitnessUIFormattingManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "unitManager"));
  v11 = objc_msgSend(v10, "userDistanceHKUnitForDistanceType:", FIUIDistanceTypeForActivityType(*(_QWORD *)(a1 + 32)));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v13 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v14 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
    v15 = objc_loadWeakRetained((id *)(a1 + 40));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v14, "setCellClass:", objc_msgSend(v16, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

    -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v14, "setSplitIndex:", -1);
    objc_msgSend(v13, "addObject:", v14);

  }
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v28[3] = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100096F70;
  v23[3] = &unk_100779560;
  v26 = v28;
  objc_copyWeak(v27, (id *)(a1 + 40));
  v27[1] = *(id *)(a1 + 48);
  v17 = v12;
  v24 = v17;
  v18 = v13;
  v25 = v18;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v23);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v18));
  v20 = objc_loadWeakRetained((id *)(a1 + 40));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "tableItemsBySection"));
  objc_msgSend(v21, "setObject:atIndexedSubscript:", v19, *(_QWORD *)(a1 + 48));

  v22 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v22, "_insertSplitsSection");

  objc_destroyWeak(v27);
  _Block_object_dispose(v28, 8);

}

void sub_100096F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100096F70(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  _CHWorkoutDetailSplitTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;

  v11 = a2;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0.0)
  {
    objc_msgSend(v11, "distanceInMeters");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7;
  }
  v8 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 64)));

  -[_CHWorkoutDetailSplitTableItem setExpectedSplitDistance:](v8, "setExpectedSplitDistance:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v8, "setSplitIndex:", a3);
  -[_CHWorkoutDetailSplitTableItem setSplit:](v8, "setSplit:", v11);
  -[_CHWorkoutDetailSplitTableItem setUnit:](v8, "setUnit:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_10009715C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100097180(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  _CHWorkoutDetailSplitTableItem *v11;
  id WeakRetained;
  void *v13;
  id v14;
  id *v15;
  id v16;
  void *v17;
  void *v18;
  BOOL v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id obj;
  uint64_t v30;
  void *v31;
  id v32;
  _QWORD v34[4];
  id v35;
  id v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];

  v4 = a2;
  v28 = a3;
  v31 = v4;
  v32 = objc_alloc_init((Class)NSMutableDictionary);
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v5)
  {
    v30 = *(_QWORD *)v38;
    v6 = (id *)(a1 + 32);
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v38 != v30)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v7);
        v9 = objc_alloc_init((Class)NSMutableArray);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v8));
        if (objc_msgSend(v10, "count"))
        {
          v11 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
          WeakRetained = objc_loadWeakRetained(v6);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
          -[_CHWorkoutDetailTableItem setCellClass:](v11, "setCellClass:", objc_msgSend(v13, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

          -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v11, "setSplitIndex:", -1);
          objc_msgSend(v9, "addObject:", v11);

        }
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_100097538;
        v34[3] = &unk_1007795B0;
        objc_copyWeak(v36, v6);
        v36[1] = *(id *)(a1 + 40);
        v14 = v9;
        v35 = v14;
        objc_msgSend(v10, "enumerateObjectsUsingBlock:", v34);
        objc_msgSend(v32, "setObject:forKeyedSubscript:", v14, v8);

        objc_destroyWeak(v36);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v5);
  }

  v15 = (id *)(a1 + 32);
  v16 = objc_loadWeakRetained((id *)(a1 + 32));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v16, "currentlySelectedSwimmingPaceFormat")));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v17));
  v19 = objc_msgSend(v18, "count") == 0;

  if (!v19)
  {
    v20 = objc_loadWeakRetained(v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v20, "currentlySelectedSwimmingPaceFormat")));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v21));
    v23 = objc_loadWeakRetained(v15);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "tableItemsBySection"));
    objc_msgSend(v24, "setObject:atIndexedSubscript:", v22, *(_QWORD *)(a1 + 40));

  }
  v25 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v32);
  v26 = objc_loadWeakRetained(v15);
  objc_msgSend(v26, "setSwimmingSplitItems:", v25);

  v27 = objc_loadWeakRetained(v15);
  objc_msgSend(v27, "_insertSplitsSection");

}

void sub_100097518(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100097538(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  _CHWorkoutDetailSplitTableItem *v10;

  v7 = a2;
  v10 = objc_alloc_init(_CHWorkoutDetailSplitTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v10, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailSplitTableItem setSplitIndex:](v10, "setSplitIndex:", a3);
  -[_CHWorkoutDetailSplitTableItem setSwimmingSplit:](v10, "setSwimmingSplit:", v7);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_1000976DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100097700(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _CHWorkoutDetailSegmentTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18[2];

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v8 = objc_alloc_init(_CHWorkoutDetailSegmentTableItem);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    -[_CHWorkoutDetailSegmentTableItem setSegmentIndex:](v8, "setSegmentIndex:", -1);
    objc_msgSend(v7, "addObject:", v8);

  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000978C8;
  v16[3] = &unk_100779600;
  objc_copyWeak(v18, (id *)(a1 + 32));
  v18[1] = *(id *)(a1 + 40);
  v11 = v7;
  v17 = v11;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
  v13 = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "tableItemsBySection"));
  objc_msgSend(v14, "setObject:atIndexedSubscript:", v12, *(_QWORD *)(a1 + 40));

  v15 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v15, "_insertSegmentsSection");

  objc_destroyWeak(v18);
}

void sub_1000978B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000978C8(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  _CHWorkoutDetailSegmentTableItem *v10;

  v7 = a2;
  v10 = objc_alloc_init(_CHWorkoutDetailSegmentTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v10, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailSegmentTableItem setSegmentIndex:](v10, "setSegmentIndex:", a3 + 1);
  -[_CHWorkoutDetailSegmentTableItem setSegment:](v10, "setSegment:", v7);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_100097A84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100097AA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  _CHWorkoutDetailDownhillRunTableItem *v9;
  id WeakRetained;
  void *v11;
  CHWorkoutDownhillRunsStats *v12;
  _CHWorkoutDetailDownhillRunsStatsTableItem *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25[2];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v22 = v6;
    v8 = objc_alloc_init((Class)NSMutableArray);
    v9 = objc_alloc_init(_CHWorkoutDetailDownhillRunTableItem);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v9, "setCellClass:", objc_msgSend(v11, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    -[_CHWorkoutDetailDownhillRunTableItem setDownhillRunIndex:](v9, "setDownhillRunIndex:", -1);
    objc_msgSend(v8, "addObject:", v9);
    v12 = -[CHWorkoutDownhillRunsStats initWithDownhillRunBridges:]([CHWorkoutDownhillRunsStats alloc], "initWithDownhillRunBridges:", v5);
    v13 = objc_alloc_init(_CHWorkoutDetailDownhillRunsStatsTableItem);
    v14 = objc_loadWeakRetained((id *)(a1 + 32));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v13, "setCellClass:", objc_msgSend(v15, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    -[_CHWorkoutDetailDownhillRunsStatsTableItem setDownhillRunsStats:](v13, "setDownhillRunsStats:", v12);
    objc_msgSend(v8, "addObject:", v13);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100097D48;
    v23[3] = &unk_100779628;
    objc_copyWeak(v25, (id *)(a1 + 32));
    v25[1] = *(id *)(a1 + 40);
    v16 = v8;
    v24 = v16;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v23);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v16));
    v18 = objc_loadWeakRetained((id *)(a1 + 32));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "tableItemsBySection"));
    objc_msgSend(v19, "setObject:atIndexedSubscript:", v17, *(_QWORD *)(a1 + 40));

    v20 = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(v20, "_insertDownhillRunsSection");

    objc_destroyWeak(v25);
    v6 = v22;
  }
  else
  {
    _HKInitializeLogging(0, v7);
    v21 = HKLogWorkouts;
    if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No downhill runs for downhill snow sport workout.  Hiding Runs card.", buf, 2u);
    }
  }

}

void sub_100097D30(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100097D48(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  _CHWorkoutDetailDownhillRunTableItem *v10;

  v7 = a2;
  v10 = objc_alloc_init(_CHWorkoutDetailDownhillRunTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v10, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailDownhillRunTableItem setDownhillRunIndex:](v10, "setDownhillRunIndex:", a3 + 1);
  -[_CHWorkoutDetailDownhillRunTableItem setDownhillRun:](v10, "setDownhillRun:", v7);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_100097EF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100097F18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _CHWorkoutDetailIntervalTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18[2];

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v8 = objc_alloc_init(_CHWorkoutDetailIntervalTableItem);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    -[_CHWorkoutDetailIntervalTableItem setIntervalIndex:](v8, "setIntervalIndex:", -1);
    objc_msgSend(v7, "addObject:", v8);

  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000980E0;
  v16[3] = &unk_100779650;
  objc_copyWeak(v18, (id *)(a1 + 32));
  v18[1] = *(id *)(a1 + 40);
  v11 = v7;
  v17 = v11;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
  v13 = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "tableItemsBySection"));
  objc_msgSend(v14, "setObject:atIndexedSubscript:", v12, *(_QWORD *)(a1 + 40));

  v15 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v15, "_insertIntervalsSection");

  objc_destroyWeak(v18);
}

void sub_1000980C8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000980E0(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  _CHWorkoutDetailIntervalTableItem *v10;

  v7 = a2;
  v10 = objc_alloc_init(_CHWorkoutDetailIntervalTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v10, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailIntervalTableItem setIntervalIndex:](v10, "setIntervalIndex:", a3 + 1);
  -[_CHWorkoutDetailIntervalTableItem setInterval:](v10, "setInterval:", v7);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_1000982CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000982F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _CHWorkoutDetailSwimSetTableItem *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18[2];

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v5, "count"))
  {
    v8 = objc_alloc_init(_CHWorkoutDetailSwimSetTableItem);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
    -[_CHWorkoutDetailTableItem setCellClass:](v8, "setCellClass:", objc_msgSend(v10, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 40)));

    objc_msgSend(v7, "addObject:", v8);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000984AC;
  v16[3] = &unk_100779678;
  objc_copyWeak(v18, (id *)(a1 + 32));
  v18[1] = *(id *)(a1 + 40);
  v11 = v7;
  v17 = v11;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11));
  v13 = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "tableItemsBySection"));
  objc_msgSend(v14, "setObject:atIndexedSubscript:", v12, *(_QWORD *)(a1 + 40));

  v15 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v15, "_insertSwimSetsSection");

  objc_destroyWeak(v18);
}

void sub_100098494(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000984AC(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  _CHWorkoutDetailSwimSetTableItem *v10;

  v7 = a2;
  v10 = objc_alloc_init(_CHWorkoutDetailSwimSetTableItem);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellClassesBySection"));
  -[_CHWorkoutDetailTableItem setCellClass:](v10, "setCellClass:", objc_msgSend(v9, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));

  -[_CHWorkoutDetailSwimSetTableItem setSetIndex:](v10, "setSetIndex:", a3 + 1);
  -[_CHWorkoutDetailSwimSetTableItem setSet:](v10, "setSet:", v7);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  if (a3 >= 4)
    *a4 = 1;

}

void sub_100098924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *WeakRetained;
  void *v12;
  int v13;
  void *v14;

  v7 = a6;
  _HKInitializeLogging(v7, v8);
  v9 = HKLogWorkouts;
  v10 = os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (v10)
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[routes] Received an update from the anchored route query, loading data through location fetcher.", (uint8_t *)&v13, 2u);
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    -[NSObject fetchLocations](WeakRetained, "fetchLocations");
    goto LABEL_7;
  }
  if (v10)
  {
    WeakRetained = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "debugDescription"));
    v13 = 138412290;
    v14 = v12;
    _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "[routes] Error from anchored route query: %@", (uint8_t *)&v13, 0xCu);

LABEL_7:
  }

}

void sub_100098C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098CA4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  _QWORD v24[4];
  id v25;
  _QWORD block[4];
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  void *v33;
  uint8_t buf[4];
  id v35;

  v3 = a2;
  _HKInitializeLogging(v3, v4);
  v5 = (void *)HKLogWorkouts;
  v6 = (id)os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    v8 = v5;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUID"));
    *(_DWORD *)buf = 138412290;
    v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[routes] Finished fetching data for workout %@", buf, 0xCu);

  }
  if (v3 && (v6 = objc_msgSend(v3, "count")) != 0)
  {
    _HKInitializeLogging(v6, v7);
    v12 = (void *)HKLogWorkouts;
    if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v12;
      v14 = objc_msgSend(v3, "count");
      *(_DWORD *)buf = 134217984;
      v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[routes] Using %ld location readings to display route", buf, 0xCu);

    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100099248;
    block[3] = &unk_1007780C0;
    objc_copyWeak(&v28, (id *)(a1 + 40));
    v27 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v28);
  }
  else
  {
    _HKInitializeLogging(v6, v7);
    v15 = HKLogWorkouts;
    if (os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[routes] No location readings, checking for location in metadata", buf, 2u);
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "locationForWorkout:workoutActivity:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104)));
    _HKInitializeLogging(v16, v17);
    v18 = HKLogWorkouts;
    v19 = os_log_type_enabled(HKLogWorkouts, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v19)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[routes] Using location from metadata", buf, 2u);
      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationFetcher"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "shifter"));
      v33 = v16;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_1000990AC;
      v31[3] = &unk_1007780E8;
      v23 = &v32;
      objc_copyWeak(&v32, (id *)(a1 + 40));
      objc_msgSend(v21, "shiftLocations:withCompletion:", v22, v31);

    }
    else
    {
      if (v19)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[routes] No location found in the metadata, no route to display", buf, 2u);
      }
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1000991F8;
      v29[3] = &unk_100777C80;
      v23 = &v30;
      objc_copyWeak(&v30, (id *)(a1 + 40));
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v29);
    }
    objc_destroyWeak(v23);

  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100099284;
  v24[3] = &unk_100777C80;
  objc_copyWeak(&v25, (id *)(a1 + 40));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v24);
  objc_destroyWeak(&v25);

}

void sub_100099090(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000990AC(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = objc_alloc((Class)HKLocationReadings);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v8 = objc_msgSend(v4, "initWithLocation:workout:", v5, v7);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000991BC;
  v10[3] = &unk_1007780C0;
  objc_copyWeak(&v12, a1);
  v11 = v8;
  v9 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

  objc_destroyWeak(&v12);
}

void sub_1000991BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleLocations:", *(_QWORD *)(a1 + 32));

}

void sub_1000991F8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHasActiveLocationQuery:", 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_presentPageAwaitingLocationData");

}

void sub_100099248(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleLocations:", *(_QWORD *)(a1 + 32));

}

void sub_100099284(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHasActiveLocationQuery:", 0);

}

void sub_100099AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100099B24(id a1, UIMutableTraits *a2)
{
  UIMutableTraits *v2;
  id v3;

  v2 = a2;
  -[UIMutableTraits setUserInterfaceStyle:](v2, "setUserInterfaceStyle:", 2);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v3, "scale");
  -[UIMutableTraits setDisplayScale:](v2, "setDisplayScale:");

}

void sub_100099B7C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "setRouteImageForSharing:", v3);

  v8 = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "locationFetcherObserver"));
  v6 = objc_loadWeakRetained(v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "locationReadings"));
  objc_msgSend(v5, "completedFetchWithLocationReadings:", v7);

}

void sub_10009B720(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_10009B7B4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void (**v9)(id, void *);

  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "formattingManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "formattedAverageSwimPaceWithDuration:context:", v4, CFSTR("WorkoutDetailDisplayContext")));

  objc_msgSend(*(id *)(a1 + 32), "setValueAttrString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateBlock"));

  if (v7)
  {
    v9 = (void (**)(id, void *))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateBlock"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueAttrString"));
    v9[2](v9, v8);

  }
}

void sub_10009B894(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id WeakRetained;
  id v13;
  id v14;

  v14 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (*(_BYTE *)(a1 + 40) != (v10 != 0))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_insertHeartRateSubItem");

  }
  if (objc_msgSend(v14, "count") || objc_msgSend(v9, "count"))
  {
    v13 = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(v13, "_createHeartRateSectionWithHeartRateReadings:averageHeartRate:recoveryHeartRateReadings:", v14, v10, v9);

  }
}

void sub_10009B964(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (v6 && objc_msgSend(v6, "count"))
    objc_msgSend(*(id *)(a1 + 32), "_createPowerSectionWithPowerSamples:", v6);

}

void sub_10009D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10009D4A0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "beginUpdates");
  return objc_msgSend(*(id *)(a1 + 32), "endUpdates");
}

void sub_10009D4C8(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009D53C;
  v4[3] = &unk_100777E20;
  v3 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v3, "setLocation:completion:", a2, v4);

}

id sub_10009D53C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "beginUpdates");
  return objc_msgSend(*(id *)(a1 + 32), "endUpdates");
}

id sub_10009D564(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setSwimDistanceByStrokeStyle:", a2);
  objc_msgSend(*(id *)(a1 + 40), "beginUpdates");
  return objc_msgSend(*(id *)(a1 + 40), "endUpdates");
}

id sub_10009D598(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureWithTitle1:value1:", *(_QWORD *)(a1 + 40), a2);
}

id sub_10009D5A8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureWithTitle2:value2:", *(_QWORD *)(a1 + 40), a2);
}

void sub_10009D5B8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10009D688;
  v7[3] = &unk_100777C80;
  objc_copyWeak(&v8, v4);
  objc_msgSend(v6, "presentViewController:completion:", v3, v7);

  objc_destroyWeak(&v8);
}

void sub_10009D674(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009D688(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsHandler"));
  objc_msgSend(v1, "didPresentMediaMomentItem");

}

void sub_10009E0C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_10009E0E4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsHandler"));
  objc_msgSend(v2, "didExpandDetailSection:", *(_QWORD *)(a1 + 40));

}

void sub_10009E130(uint64_t a1)
{
  CHDivingDetailChartDetailViewController *v2;
  void *v3;
  CHDivingDetailChartDetailViewController *v4;
  id v5;
  void *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHDivingDetailChartDetailViewController alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "divingDataCalculator"));
  v4 = -[CHDivingDetailChartDetailViewController initWithDataCalculator:](v2, "initWithDataCalculator:", v3);

  v5 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v6, "presentViewController:completion:", v5, *(_QWORD *)(a1 + 32));

}

void sub_10009E1E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  CHWorkoutDetailedMetricsViewController *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  CHWorkoutDetailedMetricsViewController *v11;
  id v12;
  void *v13;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fiui_activityType"));

  if (!_HKWorkoutActivityTypeIsRouteable(objc_msgSend(v3, "effectiveTypeIdentifier"), objc_msgSend(v3, "isIndoor"), objc_msgSend(v3, "swimmingLocationType")))goto LABEL_6;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationReadings"));
  if (v4)
  {

LABEL_6:
    v5 = [CHWorkoutDetailedMetricsViewController alloc];
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationReadings"));
    v11 = -[CHWorkoutDetailedMetricsViewController initWithWorkout:workoutActivity:dataCalculator:formattingManager:locationReadings:](v5, "initWithWorkout:workoutActivity:dataCalculator:formattingManager:locationReadings:", v6, v7, v8, v9, v10);

    v12 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v13, "presentViewController:completion:", v12, *(_QWORD *)(a1 + 32));

    goto LABEL_7;
  }
  if (!objc_msgSend(WeakRetained, "hasActiveLocationQuery"))
    goto LABEL_6;
  WeakRetained[5] = 1;
LABEL_7:

}

void sub_10009E388(uint64_t a1)
{
  CHWorkoutDetailSwimmingSetDataSource *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  CHWorkoutDetailSwimmingSetDataSource *v7;
  CHWorkoutDetailedBasicViewController *v8;
  id v9;
  void *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(*(id *)(a1 + 32), "isSwimmingActivity"))
  {
    v2 = [CHWorkoutDetailSwimmingSetDataSource alloc];
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v7 = -[CHWorkoutDetailSwimmingSetDataSource initWithWorkout:workoutActivity:dataCalculator:formattingManager:](v2, "initWithWorkout:workoutActivity:dataCalculator:formattingManager:", v3, v4, v5, v6);

    v8 = -[CHWorkoutDetailedBasicViewController initWithSwimmingSetDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithSwimmingSetDataSource:", v7);
    v9 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v10, "presentViewController:completion:", v9, *(_QWORD *)(a1 + 40));

  }
}

void sub_10009E4B0(uint64_t a1)
{
  CHWorkoutDetailSwimmingSplitDataSource *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  CHWorkoutDetailSwimmingSplitDataSource *v7;
  CHWorkoutDetailedBasicViewController *v8;
  id v9;
  void *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHWorkoutDetailSwimmingSplitDataSource alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v7 = -[CHWorkoutDetailSwimmingSplitDataSource initWithWorkout:workoutActivity:dataCalculator:formattingManager:](v2, "initWithWorkout:workoutActivity:dataCalculator:formattingManager:", v3, v4, v5, v6);

  v8 = -[CHWorkoutDetailedBasicViewController initWithSwimmingSplitDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithSwimmingSplitDataSource:", v7);
  v9 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v10, "presentViewController:completion:", v9, *(_QWORD *)(a1 + 32));

}

void sub_10009E5CC(uint64_t a1)
{
  CHWorkoutDetailSplitDataSource *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  CHWorkoutDetailSplitDataSource *v8;
  CHWorkoutDetailedBasicViewController *v9;
  id v10;
  void *v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHWorkoutDetailSplitDataSource alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fitnessUIFormattingManager"));
  v8 = -[CHWorkoutDetailSplitDataSource initWithWorkout:workoutActivity:dataCalculator:formattingManager:](v2, "initWithWorkout:workoutActivity:dataCalculator:formattingManager:", v3, v4, v5, v7);

  v9 = -[CHWorkoutDetailedBasicViewController initWithSplitDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithSplitDataSource:", v8);
  v10 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v11, "presentViewController:completion:", v10, *(_QWORD *)(a1 + 32));

}

void sub_10009E700(uint64_t a1)
{
  CHWorkoutDetailSegmentDataSource *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  CHWorkoutDetailSegmentDataSource *v7;
  CHWorkoutDetailedBasicViewController *v8;
  id v9;
  void *v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHWorkoutDetailSegmentDataSource alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
  v5 = objc_msgSend(WeakRetained, "trackDistanceUnit");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v7 = -[CHWorkoutDetailSegmentDataSource initWithWorkout:dataCalculator:trackDistanceUnit:formattingManager:](v2, "initWithWorkout:dataCalculator:trackDistanceUnit:formattingManager:", v3, v4, v5, v6);

  v8 = -[CHWorkoutDetailedBasicViewController initWithSegmentDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithSegmentDataSource:", v7);
  v9 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v10, "presentViewController:completion:", v9, *(_QWORD *)(a1 + 32));

}

void sub_10009E814(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  CHWorkoutDetailDownhillRunDataSource *v6;
  void *v7;
  void *v8;
  void *v9;
  CHWorkoutDetailDownhillRunDataSource *v10;
  CHWorkoutDetailedBasicViewController *v11;
  id v12;
  void *v13;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v5 = objc_msgSend(v2, "supportsDownhillRunsCountForWorkout:workoutActivity:", v3, v4);

  if (v5)
  {
    v6 = [CHWorkoutDetailDownhillRunDataSource alloc];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v10 = -[CHWorkoutDetailDownhillRunDataSource initWithWorkout:dataCalculator:formattingManager:](v6, "initWithWorkout:dataCalculator:formattingManager:", v7, v8, v9);

    v11 = -[CHWorkoutDetailedBasicViewController initWithDownhillRunDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithDownhillRunDataSource:", v10);
    v12 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v13, "presentViewController:completion:", v12, *(_QWORD *)(a1 + 32));

  }
}

void sub_10009E968(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  CHWorkoutDetailIntervalDataSource *v4;
  void *v5;
  void *v6;
  void *v7;
  CHWorkoutDetailIntervalDataSource *v8;
  CHWorkoutDetailedBasicViewController *v9;
  id v10;
  void *v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v3 = objc_msgSend(v2, "isIntervalWorkout");

  if (v3)
  {
    v4 = [CHWorkoutDetailIntervalDataSource alloc];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v8 = -[CHWorkoutDetailIntervalDataSource initWithWorkout:dataCalculator:formattingManager:](v4, "initWithWorkout:dataCalculator:formattingManager:", v5, v6, v7);

    v9 = -[CHWorkoutDetailedBasicViewController initWithIntervalDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithIntervalDataSource:", v8);
    v10 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v11, "presentViewController:completion:", v10, *(_QWORD *)(a1 + 32));

  }
}

void sub_10009EA88(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  CHWorkoutDetailTrackLapDataSource *v4;
  void *v5;
  void *v6;
  void *v7;
  CHWorkoutDetailTrackLapDataSource *v8;
  CHWorkoutDetailedBasicViewController *v9;
  id v10;
  void *v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v3 = objc_msgSend(v2, "supportsTrackWorkout");

  if (v3)
  {
    v4 = [CHWorkoutDetailTrackLapDataSource alloc];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v8 = -[CHWorkoutDetailTrackLapDataSource initWithWorkout:dataCalculator:formattingManager:](v4, "initWithWorkout:dataCalculator:formattingManager:", v5, v6, v7);

    -[CHWorkoutDetailTrackLapDataSource setDistanceUnit:](v8, "setDistanceUnit:", objc_msgSend(WeakRetained, "trackDistanceUnit"));
    v9 = -[CHWorkoutDetailedBasicViewController initWithTrackLapDataSource:]([CHWorkoutDetailedBasicViewController alloc], "initWithTrackLapDataSource:", v8);
    v10 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v11, "presentViewController:completion:", v10, *(_QWORD *)(a1 + 32));

  }
}

void sub_10009EBBC(uint64_t a1)
{
  CHWorkoutDetailedHeartRateViewController *v2;
  void *v3;
  void *v4;
  void *v5;
  CHWorkoutDetailedHeartRateViewController *v6;
  id v7;
  void *v8;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHWorkoutDetailedHeartRateViewController alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v6 = -[CHWorkoutDetailedHeartRateViewController initWithWorkout:workoutActivity:formattingManager:](v2, "initWithWorkout:workoutActivity:formattingManager:", v3, v4, v5);

  v7 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v8, "presentViewController:completion:", v7, *(_QWORD *)(a1 + 32));

}

void sub_10009ECA4(uint64_t a1)
{
  CHWorkoutDetailedPowerViewController *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  CHWorkoutDetailedPowerViewController *v7;
  id v8;
  void *v9;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = [CHWorkoutDetailedPowerViewController alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "healthStore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
  v7 = -[CHWorkoutDetailedPowerViewController initWithWorkout:workoutActivity:healthStore:formattingManager:isFirstPartyWorkout:](v2, "initWithWorkout:workoutActivity:healthStore:formattingManager:isFirstPartyWorkout:", v3, v4, v5, v6, objc_msgSend(WeakRetained, "workoutIsFirstParty"));

  v8 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v9, "presentViewController:completion:", v8, *(_QWORD *)(a1 + 32));

}

void sub_10009EDB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  CHWorkoutRouteViewController *v10;
  void *v11;
  id v12;
  void *v13;
  CHWorkoutRouteViewController *v14;
  id v15;
  void *v16;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationReadings"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "formattedDescriptionForWorkout:context:", v4, CFSTR("DayViewDisplayContext")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "string"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "formattingManager"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "shareTextForWorkout:", v8));

    v10 = [CHWorkoutRouteViewController alloc];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "locationReadings"));
    v12 = sub_10005FD28();
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = -[CHWorkoutRouteViewController initWithLocationReadings:title:sharingEnabled:shareText:excludedActivityTypes:](v10, "initWithLocationReadings:title:sharingEnabled:shareText:excludedActivityTypes:", v11, v6, 1, v9, v13);

    v15 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v16, "presentViewController:completion:", v15, *(_QWORD *)(a1 + 32));

  }
  else if (objc_msgSend(WeakRetained, "hasActiveLocationQuery"))
  {
    WeakRetained[5] = 14;
  }

}

void sub_10009EF54(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "presentEffortViewController:presentationCompletion:", a2, *(_QWORD *)(a1 + 32));

}

void sub_10009F0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009F0C4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dataCalculator"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "workout"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "workoutActivity"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cachedEffortSampleCollectionForWorkout:workoutActivity:", v7, v8));

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10009F290;
    v16[3] = &unk_100777C80;
    objc_copyWeak(&v17, (id *)(a1 + 40));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10009F2E4;
    v13[3] = &unk_100779928;
    objc_copyWeak(&v15, (id *)(a1 + 40));
    v10 = v9;
    v14 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[WOEffortBridges makeHostingControllerWithStartingEffort:cancel:completion:](WOEffortBridges, "makeHostingControllerWithStartingEffort:cancel:completion:", v3, v16, v13));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegate"));
    objc_msgSend(v12, "presentViewController:animated:completion:", v11, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));

    objc_destroyWeak(&v15);
    objc_destroyWeak(&v17);

  }
}

void sub_10009F270(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009F290(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, &stru_1007798E0);

}

void sub_10009F2E4(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workout"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "workoutActivity"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "healthStore"));
  +[WOEffortBridges saveWithQuantity:effortSampleCollection:workout:workoutActivity:healthStore:canSendAnalytics:](WOEffortBridges, "saveWithQuantity:effortSampleCollection:workout:workoutActivity:healthStore:canSendAnalytics:", v4, v5, v6, v7, v8, 1);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v9, "dismissViewControllerAnimated:completion:", 1, &stru_100779900);

}

id sub_1000A0A40(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(a1 + 32), "adjustSafeAreaInsetsWithHeight:", 0.0);
}

void sub_1000A0A7C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = 0;

}

id sub_1000A0BA0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showCloudStatusWithProgress:", *(_QWORD *)(a1 + 40));
}

id sub_1000A0C5C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "completeCloudRestore");
}

void sub_1000A3454(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UINavigationBar appearance](UINavigationBar, "appearance"));
  objc_msgSend(v2, "setBarStyle:", a1);

}

void sub_1000A34A0()
{
  sub_1000A3454(0);
}

void sub_1000A34A8()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UITabBar appearance](UITabBar, "appearance"));
  objc_msgSend(v0, "setBarStyle:", 1);

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UITabBar appearance](UITabBar, "appearance"));
  objc_msgSend(v1, "setTranslucent:", 1);

}

void sub_1000A3D80(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  char v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v17 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dateByAddingUnit:value:toDate:options:", 16, a3, *(_QWORD *)(a1 + 40), 0));
  v6 = sub_10008D710(v5);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 96));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activitySummaryForCacheIndex:", v6));

  if (v8)
  {
    if ((objc_msgSend(v8, "isPaused") & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v15 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 88));
      v9 = (uint64_t)objc_msgSend(v15, "isPausedForActivitySummaryCacheIndex:", objc_msgSend(v8, "_activitySummaryIndex"));

    }
    objc_msgSend(v17, "hk_configureWithActivitySummary:animated:", v8, 0);
  }
  else
  {
    v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 96));
    v11 = objc_opt_respondsToSelector(v10, "isStandaloneForCacheIndex:");

    if ((v11 & 1) != 0)
    {
      v12 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 96));
      v13 = objc_msgSend(v12, "isStandaloneForCacheIndex:", v6);

      v14 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 88));
      v9 = (uint64_t)objc_msgSend(v14, "isPausedForActivitySummaryCacheIndex:", v6);

      objc_msgSend(v17, "hk_configureWithActivitySummary:isStandaloneFallback:animated:completion:", 0, v13, 0, 0);
    }
    else
    {
      objc_msgSend(v17, "hk_configureWithActivitySummary:animated:", 0, 0);
      v16 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 48) + 88));
      v9 = (uint64_t)objc_msgSend(v16, "isPausedForActivitySummaryCacheIndex:", v6);

    }
  }
  objc_msgSend(v17, "setIsPaused:", v9);

}

void sub_1000A4A00(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "_centerForRingAtIndex:", a3);
  objc_msgSend(v5, "setCenter:");

}

void sub_1000A4A48(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "_centerForRingAtIndex:", a3);
  objc_msgSend(v5, "setCenter:");

}

void sub_1000A4B54(_QWORD *a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  id WeakRetained;
  id v9;
  void *v10;
  id v11;

  v5 = (void *)a1[4];
  v6 = a1[5];
  v7 = a2;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dateByAddingUnit:value:toDate:options:", 16, a3, v6, 0));
  WeakRetained = objc_loadWeakRetained((id *)(a1[6] + 96));
  v9 = objc_msgSend(WeakRetained, "activitySummaryForCacheIndex:", sub_10008D710(v11));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  objc_msgSend(v7, "hk_configureWithActivitySummary:animated:", v10, 0);
}

void sub_1000A56EC(id a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  *(double *)&qword_10083DFC0 = 1.0 / v1;

}

uint64_t sub_1000A5DC8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000A604C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setImageHidden:", 1);
}

id sub_1000A6058(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setImageHidden:", 0);
}

void sub_1000A670C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;

  v5 = a3;
  v7 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_presentActivityViewControllerForItems:", a2);
  }
  else
  {
    _HKInitializeLogging(v5, v6);
    v8 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2A70((uint64_t)v7, v8);
    objc_msgSend(*(id *)(a1 + 32), "_shareWorkout");
  }

}

void sub_1000A6964(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A6988(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "dismissRemoteViewControllerOnHostController:", WeakRetained);

}

BOOL sub_1000A6ED8(id a1, UIViewController *a2, unint64_t a3, BOOL *a4)
{
  UIViewController *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(CHWorkoutDetailViewController, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_1000A6F20(uint64_t a1)
{
  id v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v2 = objc_msgSend(v3, "popToViewController:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_1000A76EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *a19)
{
  uint64_t v19;

  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a19);
  objc_destroyWeak((id *)(v19 - 152));
  _Unwind_Resume(a1);
}

void sub_1000A77C0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_presentConfigurationData:", *(_QWORD *)(a1 + 32));

}

void sub_1000A77FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_presentConfigurationData:", *(_QWORD *)(a1 + 32));

}

void sub_1000A7838(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_presentShareSheetWithTitle:image:workoutData:", CFSTR("Try out this workout route!"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1000A787C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_presentConfigurationData:", *(_QWORD *)(a1 + 32));

}

void sub_1000A78B8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_presentShareSheetWithTitle:image:workoutData:", CFSTR("Check out this route I took on my workout!"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1000A7D64(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083DFD0;
  qword_10083DFD0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DFD0, "setDateStyle:", 1);
}

void sub_1000A7DE0(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083DFE0;
  qword_10083DFE0 = (uint64_t)v1;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("EEE, MMM d"), 0, v4));
  objc_msgSend((id)qword_10083DFE0, "setDateFormat:", v3);

}

void sub_1000A7EA8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083DFF0;
  qword_10083DFF0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083DFF0, "setDateStyle:", 0);
  objc_msgSend((id)qword_10083DFF0, "setTimeStyle:", 1);
}

void sub_1000A7F30(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083E000;
  qword_10083E000 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E000, "setDateStyle:", 1);
  objc_msgSend((id)qword_10083E000, "setTimeStyle:", 0);
  _objc_msgSend((id)qword_10083E000, "setDoesRelativeDateFormatting:", 1);
}

void sub_1000A7FC4(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083E010;
  qword_10083E010 = (uint64_t)v1;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("EEEE"), 0, v4));
  objc_msgSend((id)qword_10083E010, "setDateFormat:", v3);

}

void sub_1000A8474(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083E020;
  qword_10083E020 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E020, "setFormattingContext:", 2);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("MMMM yyyy"), 0, v4));
  objc_msgSend((id)qword_10083E020, "setDateFormat:", v3);

}

id sub_1000A8A50()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v0 = HKHealthKitFrameworkBundle();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = HKHealthKitStringsTableName;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("ACTIVITY_SHARING_FRIEND_LIMIT_MESSAGE_TITLE"), &stru_1007AE1D0, HKHealthKitStringsTableName));

  v4 = HKHealthKitFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("ACTIVITY_SHARING_FRIEND_LIMIT_MESSAGE_BODY"), &stru_1007AE1D0, v2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v6, kASMaxNumberOfFriends));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v7, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 0, 0));
  objc_msgSend(v8, "addAction:", v11);

  return v8;
}

void sub_1000A8BB8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "windows"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rootViewController"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "presentedViewController"));
  if (v5)
    v6 = v5;
  else
    v6 = v8;
  v7 = v6;

  objc_msgSend(v7, "presentViewController:animated:completion:", v1, 1, 0);
}

void sub_1000A8C78(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "as_competitionReceivedNotificationTitle"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "as_competitionReceivedNotificationMessageForExperienceType:", a4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("SHARING_CANCEL"), &stru_1007AE1D0, CFSTR("Localizable")));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v12, 1, 0));

  v13 = ActivitySharingBundle();
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = FIRandomStringForPrefixWithTableName(CFSTR("COMPETITION_RECEIVED_NOTIFICATION_ACCEPT_ACTION"), v14, FIDefaultLocalizationTableName);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1000A8F50;
  v33[3] = &unk_100779BF8;
  v17 = v8;
  v34 = v17;
  v35 = v9;
  v38 = a4;
  v36 = v10;
  v18 = v7;
  v37 = v18;
  v19 = v10;
  v27 = v9;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v16, 0, v33));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "as_competitionLearnMorePopupAction"));
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1000A96C0;
  v29[3] = &unk_100779C20;
  v31 = v18;
  v32 = a4;
  v30 = v17;
  v22 = v18;
  v23 = v17;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v21, 0, v29));

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v19, v28, 1));
  objc_msgSend(v25, "addAction:", v26);
  objc_msgSend(v25, "addAction:", v20);
  objc_msgSend(v25, "addAction:", v24);
  objc_msgSend(v25, "setPreferredAction:", v20);
  objc_msgSend(v22, "presentViewController:animated:completion:", v25, 1, 0);

}

void sub_1000A8F50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  _QWORD *v20;
  uint8_t buf[8];
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000A921C;
  v22[3] = &unk_100779BA8;
  v23 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v24 = v2;
  v25 = v3;
  v4 = objc_retainBlock(v22);
  v5 = objc_msgSend(*(id *)(a1 + 32), "isMyActivityDataCurrentlyHidden");
  if ((_DWORD)v5)
  {
    ASLoggingInitialize(v5);
    v6 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "My activity data is currently hidden, showing unhide confirmation", buf, 2u);
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("COMPETITION_ACCEPT_UNHIDE_MESSAGE"), &stru_1007AE1D0, CFSTR("Localizable")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "displayName"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v9));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(a1 + 48), v10, 1));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("SHARING_CANCEL"), &stru_1007AE1D0, CFSTR("Localizable")));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v13, 1, 0));
    objc_msgSend(v11, "addAction:", v14);

    v15 = ActivitySharingBundle();
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("COMPETITION_RECEIVED_NOTIFICATION_ACCEPT_ACTION_HIDING"), &stru_1007AE1D0, CFSTR("Localizable")));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000A96B4;
    v19[3] = &unk_100779BD0;
    v20 = v4;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v17, 0, v19));
    objc_msgSend(v11, "addAction:", v18);

    objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v11, 1, 0);
  }
  else
  {
    ((void (*)(_QWORD *))v4[2])(v4);
  }

}

void sub_1000A921C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;

  ASLoggingInitialize(a1);
  v2 = (void *)ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUID"));
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v20 = v5;
    v21 = 2112;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Accepting competition request from friend: %@{public}@ - %@", buf, 0x16u);

  }
  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000A943C;
  v17[3] = &unk_100778138;
  v18 = v7;
  objc_msgSend(v8, "acceptCompetitionRequestFromFriend:completion:", v18, v17);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "as_competitionAcceptConfirmationTitle"));
  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "competitionPendingAcceptance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "as_competitionAcceptConfirmationMessageForCompetition:experienceType:", v11, *(_QWORD *)(a1 + 48)));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v9, v12, 1));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 0, 0));
  objc_msgSend(v13, "addAction:", v16);

  sub_1000A8BB8(v13);
}

void sub_1000A943C(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  id v15;

  v5 = a3;
  ASLoggingInitialize(v5);
  v6 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2114;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accept competition request completion with success: %d, error: %{public}@", buf, 0x12u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A956C;
  block[3] = &unk_100777E90;
  v11 = a2;
  v9 = v5;
  v10 = *(id *)(a1 + 32);
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000A956C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  if (!*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 32))
  {
    v2 = ActivitySharingBundle();
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("COMPETITION_ERROR_TITLE"), &stru_1007AE1D0, CFSTR("Localizable")));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "as_competitionAcceptErrorMessage"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v9, v4, 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 0, 0));
    objc_msgSend(v5, "addAction:", v8);

    sub_1000A8BB8(v5);
  }
}

uint64_t sub_1000A96B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A96C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "as_competitionLearnMoreFullDescriptionForExperienceType:", *(_QWORD *)(a1 + 48)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "as_competitionLearnMoreTitleForExperienceType:", *(_QWORD *)(a1 + 48)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v2, v7, 1));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("SHARING_CANCEL"), &stru_1007AE1D0, CFSTR("Localizable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v5, 1, 0));
  objc_msgSend(v3, "addAction:", v6);

  objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v3, 1, 0);
}

id sub_1000AA158()
{
  if (qword_10083E040 != -1)
    dispatch_once(&qword_10083E040, &stru_100779C40);
  return (id)qword_10083E038;
}

void sub_1000AA198(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userCachesDirectory"));
  v2 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/FitnessWorkoutIconCache/"), v1));
  v3 = (void *)qword_10083E038;
  qword_10083E038 = v2;

}

void sub_1000AA2E8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  id v35;
  _QWORD *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  _QWORD block[4];
  id v41;
  id v42;
  __int128 buf;
  void (*v44)(uint64_t, void *, void *);
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;

  v2 = sub_100060C00(*(void **)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = sub_1000AAC50(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithContentsOfCPBitmapFile:flags:](UIImage, "imageWithContentsOfCPBitmapFile:flags:", v5, 0));

  if (v6)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AA7A4;
    block[3] = &unk_1007788D8;
    v42 = *(id *)(a1 + 40);
    v41 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v7 = v3;
    v8 = sub_1000AA158();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v9, 1));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.plist"), CFSTR("IconTTL")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v11, 0));

    v13 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithContentsOfURL:", v12);
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", v7));

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v15, "timeIntervalSinceDate:", v14);
      v17 = v16;

      if (v17 < 1296000.0)
        goto LABEL_13;
    }

  }
  if (qword_10083E048 != -1)
    dispatch_once(&qword_10083E048, &stru_100779CD8);
  v14 = (id)qword_10083E050;
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v3));
  if (v18)
  {
    v19 = (void *)v18;
    v20 = objc_retainBlock(*(id *)(a1 + 40));
    objc_msgSend(v19, "addObject:", v20);
  }
  else
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v21 = objc_retainBlock(*(id *)(a1 + 40));
    objc_msgSend(v19, "addObject:", v21);

    objc_msgSend(v14, "setObject:forKeyedSubscript:", v19, v3);
    v22 = *(void **)(a1 + 32);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1000AA7B8;
    v37[3] = &unk_100779C90;
    v38 = v3;
    v39 = v14;
    v23 = v22;
    v36 = v37;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "bundleID"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMediaTask bagSubProfile](AMSMediaTask, "bagSubProfile"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMediaTask bagSubProfileVersion](AMSMediaTask, "bagSubProfileVersion"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSBag bagForProfile:profileVersion:](AMSBag, "bagForProfile:profileVersion:", v25, v26));

    v28 = objc_alloc((Class)AMSMediaTask);
    v29 = objc_msgSend(v28, "initWithType:clientIdentifier:clientVersion:bag:", 0, kHKHealthAppBundleIdentifier, CFSTR("1"), v27);
    v49 = v24;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v49, 1));
    objc_msgSend(v29, "setBundleIdentifiers:", v30);

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "perform"));
    _HKInitializeLogging(v31, v32);
    v33 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Downloading info from AMS for bundle identifier %@", (uint8_t *)&buf, 0xCu);
    }
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v44 = sub_1000AACE8;
    v45 = &unk_100779D50;
    v47 = v23;
    v48 = v36;
    v46 = v24;
    v34 = v24;
    v35 = v23;
    objc_msgSend(v31, "addFinishBlock:", &buf);

    v20 = v38;
  }

LABEL_13:
}

uint64_t sub_1000AA7A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1000AA7B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = qword_10083E030;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000AA88C;
  v10[3] = &unk_100779C68;
  v11 = v5;
  v12 = v6;
  v13 = *(id *)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, v10);

}

void sub_1000AA88C(id *a1)
{
  id v1;
  id v3;
  id v4;
  id v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  _QWORD block[4];
  id v28;
  id v29;

  v1 = a1[4];
  if (v1 && !a1[5])
  {
    v3 = a1[6];
    v4 = v1;
    v5 = v3;
    if (qword_10083E058 != -1)
      dispatch_once(&qword_10083E058, &stru_100779D70);
    global_queue = dispatch_get_global_queue(-2, 0);
    v7 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AB488;
    block[3] = &unk_100777EE0;
    v28 = v4;
    v29 = v5;
    v8 = v4;
    v9 = v5;
    dispatch_async(v7, block);

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v11 = a1[6];
    v12 = sub_1000AA158();
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v13, 1));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.plist"), CFSTR("IconTTL")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "URLByAppendingPathComponent:isDirectory:", v15, 0));

    v17 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithContentsOfURL:", v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    if (v17)
    {
      v19 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v17));

      v18 = (void *)v19;
    }
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v10, v11);
    objc_msgSend(v18, "writeToURL:atomically:", v16, 1);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "objectForKeyedSubscript:", a1[6]));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v20));

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000AAB5C;
    v23[3] = &unk_1007790B8;
    v24 = v21;
    v25 = a1[4];
    v26 = a1[5];
    v22 = v21;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v23);
    objc_msgSend(a1[7], "removeObjectForKey:", a1[6]);

  }
}

void sub_1000AAB5C(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5) + 16))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

id sub_1000AAC50(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = sub_1000AA158();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@.cpbitmap"), v3, v1));

  return v4;
}

void sub_1000AACBC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_10083E050;
  qword_10083E050 = v1;

}

void sub_1000AACE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void (*v10)(void);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (v6)
  {
    _HKInitializeLogging(v6, v7);
    v9 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2B5C(a1, (uint64_t)v8, v9);
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_5:
    v10();
    goto LABEL_23;
  }
  if (!v5)
  {
    _HKInitializeLogging(0, v7);
    v23 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2AE4(a1, v23);
    v10 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "responseDataItems"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("attributes")));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("platformAttributes")));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ios")));

  v16 = objc_alloc((Class)AMSMediaArtwork);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("artwork")));
  v18 = objc_msgSend(v16, "initWithDictionary:", v17);

  if (objc_msgSend(*(id *)(a1 + 40), "needsWatchIcon"))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("circularArtwork")));
    v21 = objc_opt_class(NSDictionary, v20);
    if ((objc_opt_isKindOfClass(v19, v21) & 1) != 0)
      v22 = v19;
    else
      v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstObject"));
    v24 = v22;
    v25 = objc_msgSend(objc_alloc((Class)AMSMediaArtwork), "initWithDictionary:", v22);

    v18 = v25;
  }
  objc_msgSend(*(id *)(a1 + 40), "preferredAppStoreIconWidth");
  v27 = v26;
  objc_msgSend(*(id *)(a1 + 40), "preferredAppStoreIconWidth");
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "URLWithSize:cropStyle:format:", AMSLookupItemArtworkCropStyleBoundedBox, AMSLookupItemArtworkFormatPNG, v27, v28));
  _HKInitializeLogging(v29, v30);
  v31 = HKLogActivity;
  if (v29)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v29;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Fetching app icon from AMS for URL %@", buf, 0xCu);
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[HKAppImageManager sharedImageManager](HKAppImageManager, "sharedImageManager"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1000AB0CC;
    v34[3] = &unk_100779D28;
    v35 = v29;
    v36 = *(id *)(a1 + 40);
    v37 = *(id *)(a1 + 48);
    objc_msgSend(v32, "loadAppImageAtURL:completionHandler:", v35, v34);

  }
  else
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v39 = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Couldn't find URL for app icon for bundle ID %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

LABEL_23:
}

void sub_1000AB0CC(id *a1, void *a2, uint64_t a3, char a4, void *a5)
{
  id v8;
  id v9;
  dispatch_queue_global_t global_queue;
  NSObject *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;

  v8 = a2;
  v9 = a5;
  global_queue = dispatch_get_global_queue(0, 0);
  v11 = objc_claimAutoreleasedReturnValue(global_queue);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000AB1D4;
  v14[3] = &unk_100779D00;
  v20 = a4;
  v15 = v8;
  v16 = v9;
  v17 = a1[4];
  v18 = a1[5];
  v19 = a1[6];
  v12 = v9;
  v13 = v8;
  dispatch_async(v11, v14);

}

void sub_1000AB1D4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  UIImage *ImageFromCurrentImageContext;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  CGSize v21;

  if (*(_QWORD *)(a1 + 32) && *(_BYTE *)(a1 + 72) && !*(_QWORD *)(a1 + 40))
  {
    _HKInitializeLogging(a1, a2);
    v7 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v17 = 138412290;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Fetched icon from store for URL: %@", (uint8_t *)&v17, 0xCu);
    }
    v9 = objc_msgSend(*(id *)(a1 + 56), "needsWatchIcon");
    v10 = *(void **)(a1 + 32);
    if (v9)
    {
      v11 = v10;
      objc_msgSend(v11, "size");
      v13 = v12;
      objc_msgSend(v11, "size");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithOvalInRect:](UIBezierPath, "bezierPathWithOvalInRect:", 0.0, 0.0, v13, v14));
      objc_msgSend(v11, "size");
      UIGraphicsBeginImageContextWithOptions(v21, 0, 0.0);
      objc_msgSend(v15, "addClip");
      objc_msgSend(v11, "drawAtPoint:", CGPointZero.x, CGPointZero.y);

      ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
      v6 = (id)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
      UIGraphicsEndImageContext();

    }
    else
    {
      v6 = v10;
    }
  }
  else
  {
    _HKInitializeLogging(a1, a2);
    v3 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 48);
      v17 = 138412546;
      v18 = v4;
      v19 = 2112;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Could not fetch icon from store for URL: %@ because of error: %@", (uint8_t *)&v17, 0x16u);
    }
    v6 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000AB3CC(id a1)
{
  void *v1;
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  id v10;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v2 = sub_1000AA158();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v10 = 0;
  v4 = objc_msgSend(v1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v3, 0, 0, &v10);
  v5 = v10;

  if (v4)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    _HKInitializeLogging(v6, v7);
    v9 = (void *)HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2BDC(v9, (uint64_t)v5);
  }

}

void sub_1000AB488(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = sub_1000AAC50(*(void **)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v1, "writeToCPBitmapFile:flags:", v3, 0);

}

void sub_1000AB4CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

id sub_1000AB890(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "reattachPaletteIfNeededExpanded:", 0);
}

void sub_1000ABF40(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageFactory"));
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[2];
  objc_msgSend(v3, "imageDimension");
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 32), "imageDimension");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "thumbnailImageForAchievement:size:", v4, v6, v7));

  +[CATransaction commit](CATransaction, "commit");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AC04C;
  block[3] = &unk_1007790B8;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v12 = v9;
  v13 = v8;
  v10 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000AC04C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) == *(_QWORD *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 48);
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageView"));
    objc_msgSend(v2, "setImage:", v1);

  }
}

void sub_1000AC8C4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("SELF MATCHES %@"), CFSTR(".+@([A-Za-z0-9-]+\\.)+[A-Za-z]{2}[A-Za-z]*")));
  v2 = (void *)qword_10083E060;
  qword_10083E060 = v1;

}

void sub_1000AEAE8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v1, "removeObjectForKey:", v2);

}

uint64_t sub_1000AEB34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000AEB44(uint64_t a1)
{

}

uint64_t sub_1000AEBDC(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 32);
  return result;
}

void sub_1000AEBF8(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AEC94;
  block[3] = &unk_100777C80;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_1000AEC94(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  _HKInitializeLogging(a1, a2);
  v3 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[FASC] Restarting activity summary query after error.", v5, 2u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startActivitySummaryQuery");

}

void sub_1000AED14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  int v21;
  id v22;
  __int16 v23;
  double v24;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = v9;
  if (v9)
  {
    _HKInitializeLogging(v9, v10);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2C88();
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v12, "timeIntervalSinceReferenceDate");
    v14 = v13;
    objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceReferenceDate");
    v16 = v15;

    _HKInitializeLogging(v17, v18);
    v19 = (void *)HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v19;
      v21 = 134218240;
      v22 = objc_msgSend(v8, "count");
      v23 = 2048;
      v24 = v14 - v16;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[FASC] Fetched %lu activity summaries in %f seconds", (uint8_t *)&v21, 0x16u);

    }
    if (objc_msgSend(v8, "count"))
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1000AEEB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  id v30;
  __int16 v31;
  id v32;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  _HKInitializeLogging(v9, v10);
  v11 = (void *)HKLogActivity;
  if (v9)
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2CEC();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v11;
      *(_DWORD *)buf = 138543618;
      v30 = v7;
      v31 = 2050;
      v32 = objc_msgSend(v8, "count");
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[FASC] Activity summary query: %{public}@ updated with %{public}zd objects", buf, 0x16u);

    }
    if (objc_msgSend(v8, "count"))
    {
      v21 = a1;
      v22 = v8;
      v23 = v7;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v13 = v8;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v14)
      {
        v16 = v14;
        v17 = *(_QWORD *)v25;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v25 != v17)
              objc_enumerationMutation(v13);
            v19 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v18);
            _HKInitializeLogging(v14, v15);
            v20 = HKLogActivity;
            v14 = (id)os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)v14)
            {
              *(_DWORD *)buf = 138543362;
              v30 = v19;
              _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Updated summary: %{public}@", buf, 0xCu);
            }
            v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
          v16 = v14;
        }
        while (v14);
      }

      (*(void (**)(void))(*(_QWORD *)(v21 + 40) + 16))();
      v8 = v22;
      v7 = v23;
      v9 = 0;
    }
  }

}

void sub_1000AF630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000AF650()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_msgSend(objc_alloc((Class)UILabel), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  objc_msgSend(v0, "setTextColor:", v1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  objc_msgSend(v0, "setFont:", v2);

  objc_msgSend(v0, "setNumberOfLines:", 0);
  objc_msgSend(v0, "setAllowsDefaultTighteningForTruncation:", 1);
  objc_msgSend(v0, "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(v0, "setTextAlignment:", 1);
  return v0;
}

void sub_1000AF714(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_nextButtonTapped");

}

id sub_1000B03A4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
}

void sub_1000B03EC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(*(_QWORD *)(a1 + 32) + 24));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;
  v5 = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeFromSuperview");
}

void sub_1000B13EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B1414(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id WeakRetained;

  if (a3 || (a2 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("SHARING_INVITE_ACCEPT_ERROR"), &stru_1007AE1D0, CFSTR("Localizable")));
    objc_msgSend(WeakRetained, "_presentErrorAlertWithMessage:", v4);

  }
}

void sub_1000B15E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000B160C(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id WeakRetained;

  if (a3 || (a2 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("SHARING_INVITE_DECLINE_ERROR"), &stru_1007AE1D0, CFSTR("Localizable")));
    objc_msgSend(WeakRetained, "_presentErrorAlertWithMessage:", v4);

  }
}

void sub_1000B1694(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id WeakRetained;

  if (a3 || (a2 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("COMPETITION_IGNORE_ERROR_MESSAGE"), &stru_1007AE1D0, CFSTR("Localizable")));
    objc_msgSend(WeakRetained, "_presentErrorAlertWithMessage:", v4);

  }
}

void sub_1000B1794(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(a1 + 32), 0, 1));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v2, 0, 0));
  objc_msgSend(v4, "addAction:", v3);

  sub_1000A8BB8(v4);
}

void sub_1000B20F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B211C(uint64_t a1, char a2)
{
  _QWORD v2[4];
  id v3;
  char v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B2198;
  v2[3] = &unk_100779EA8;
  v4 = a2;
  objc_copyWeak(&v3, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  objc_destroyWeak(&v3);
}

void sub_1000B2198(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  if (!*(_BYTE *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("SHARING_INVITE_WITHDRAW_ERROR"), &stru_1007AE1D0, CFSTR("Localizable")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, 0, 1));

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B231C;
    v8[3] = &unk_100779E80;
    objc_copyWeak(&v9, (id *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v6, 0, v8));
    objc_msgSend(v4, "addAction:", v7);

    sub_1000A8BB8(v4);
    objc_destroyWeak(&v9);

  }
}

void sub_1000B2304(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000B231C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadDataAnimated:", 0);

}

id sub_1000B2868(void *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "allKeys"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "sortedArrayUsingComparator:", &stru_100779EE8));

  return v2;
}

id sub_1000B2CC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reloadDataAnimated:", 1);
}

id sub_1000B3C64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = sub_1000B2868(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1));
  v6 = objc_msgSend(v4, "indexOfObject:", v5);

  return v6;
}

int64_t sub_1000B3DE8(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a2, "compare:", a3);
}

void sub_1000B453C(id a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  *(double *)&qword_10083E090 = 1.0 / v1;

}

void sub_1000B51D4(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
  v2 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void sub_1000B5214(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  v2 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void sub_1000B52D0(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  v2 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void sub_1000B538C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  v2 = objc_retainBlock(*(id *)(a1 + 40));
  objc_msgSend(v1, "addObject:", v2);

}

void sub_1000B5680(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;

  v5 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5720;
  block[3] = &unk_100779F30;
  v6 = *(id *)(a1 + 32);
  v11 = a2;
  v9 = v5;
  v10 = v6;
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1000B5720(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1000B57F0(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_queue_sortAllWorkoutsByMonthAndYearWithCurrentFilter");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B5870;
  v3[3] = &unk_100779CB8;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

uint64_t sub_1000B5870(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_runFilterActionFinishedHandlers");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000B5988(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_runAnchoredObjectQueryWithRetryCount:", *(_QWORD *)(a1 + 40));
}

void sub_1000B5994(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 40) + 1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_retryAnchoredObjectQueryWithRetryCount:", v1);

}

void sub_1000B59D4(id *a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  objc_msgSend(a1[4], "_queue_sortAllWorkoutsByMonthAndYearWithCurrentFilter");
  *((_BYTE *)a1[4] + 185) = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B5A80;
  v2[3] = &unk_100779F80;
  objc_copyWeak(&v3, a1 + 5);
  objc_copyWeak(&v4, a1 + 6);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&v3);
}

void sub_1000B5A80(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  unsigned int v4;
  id v5;
  id v6;
  id *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "isCurrentFilterValid");

  v5 = objc_loadWeakRetained(v2);
  if (v4)
  {
    v6 = objc_loadWeakRetained((id *)(a1 + 40));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000B5BC4;
    v10[3] = &unk_100777C80;
    v7 = &v11;
    objc_copyWeak(&v11, v2);
    objc_msgSend(v5, "setCurrentFilteredTypeIdentifier:completion:", v6, v10);
  }
  else
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[CHWorkoutTypeKey emptyKey](CHWorkoutTypeKey, "emptyKey"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B5BF0;
    v8[3] = &unk_100777C80;
    v7 = &v9;
    objc_copyWeak(&v9, v2);
    objc_msgSend(v5, "setCurrentFilteredTypeIdentifier:completion:", v6, v8);
  }

  objc_destroyWeak(v7);
}

void sub_1000B5BAC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000B5BC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_runAnimatedUpdateHandlers");

}

void sub_1000B5BF0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_runAnimatedUpdateHandlers");

}

BOOL sub_1000B5DD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  unsigned int v6;
  id v7;
  _BOOL8 v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fiui_activityType"));
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = objc_msgSend(v4, "isIndoor");
  v7 = objc_msgSend(v3, "workoutActivityType");

  v9 = v7 == *(id *)(a1 + 32) && v5 == v6;
  return v9;
}

BOOL sub_1000B5E44(uint64_t a1, void *a2)
{
  if (*(_QWORD *)(a1 + 32))
    return objc_msgSend(a2, "fi_swimmingLocationType") == *(id *)(a1 + 32);
  else
    return objc_msgSend(a2, "workoutActivityType") == (id)46;
}

BOOL sub_1000B5E8C(id a1, HKWorkout *a2, NSDictionary *a3)
{
  HKWorkout *v3;
  BOOL v4;

  v3 = a2;
  v4 = (id)-[HKWorkout workoutActivityType](v3, "workoutActivityType") == (id)77
    || (id)-[HKWorkout workoutActivityType](v3, "workoutActivityType") == (id)14;

  return v4;
}

id sub_1000B5ED8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 88);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "objectForKeyedSubscript:", v6));

  v9 = objc_msgSend(v8, "compare:", v7);
  return v9;
}

void sub_1000B5F5C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "copy");
  objc_msgSend(*(id *)(a1 + 32), "_runHandlers:", v2);

}

void sub_1000B5FF8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "copy");
  objc_msgSend(*(id *)(a1 + 32), "_runHandlers:", v2);

}

void sub_1000B6094(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "copy");
  objc_msgSend(*(id *)(a1 + 32), "_runHandlers:", v2);

}

void sub_1000B6130(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "copy");
  objc_msgSend(*(id *)(a1 + 32), "_runHandlers:", v2);

}

void sub_1000B61EC(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5) + 16))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1000B73A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1000B73DC(uint64_t a1, void *a2, void *a3, void *a4, double a5, double a6, double a7, double a8)
{
  id *v14;
  id v15;
  id v16;
  id v17;
  id WeakRetained;

  v14 = (id *)(a1 + 32);
  v15 = a4;
  v16 = a3;
  v17 = a2;
  WeakRetained = objc_loadWeakRetained(v14);
  objc_msgSend(WeakRetained, "presentDetailForAchievement:badgeRect:conversionView:cell:", v17, v16, v15, a5, a6, a7, a8);

}

id sub_1000B78B4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setBadgeHidden:", a2);
}

id sub_1000B7BF0(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];
  _QWORD v5[4];
  uint64_t v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "spinner"));
  objc_msgSend(v2, "stopAnimating");

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B7CA4;
  v5[3] = &unk_100777E20;
  v6 = *(_QWORD *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B7CD8;
  v4[3] = &unk_100778DB0;
  v4[4] = v6;
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 0x20000, v5, v4, 0.2, 0.2);
}

void sub_1000B7CA4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1000B7CD8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
  objc_msgSend(v1, "removeFromSuperview");

}

void sub_1000B81D4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_10083E0A0;
  qword_10083E0A0 = (uint64_t)v1;

}

id sub_1000B8CE4()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[OBBundle bundleWithIdentifier:](OBBundle, "bundleWithIdentifier:", CFSTR("com.apple.onboarding.activity")));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ARUIMetricColors energyColors](ARUIMetricColors, "energyColors"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "nonGradientTextColor"));

  v3 = objc_msgSend(objc_alloc((Class)UIButton), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleSubheadline));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "titleLabel"));
  objc_msgSend(v5, "setFont:", v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "privacyFlow"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedButtonTitle"));
  objc_msgSend(v3, "setTitle:forState:", v7, 0);

  objc_msgSend(v3, "setTitleColor:forState:", v2, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "colorWithAlphaComponent:", 0.7));
  objc_msgSend(v3, "setTitleColor:forState:", v8, 1);

  return v3;
}

void sub_1000B8FB4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_10083E0B0;
  qword_10083E0B0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E0B0, "setMinimumFractionDigits:", 0);
  objc_msgSend((id)qword_10083E0B0, "setMaximumFractionDigits:", 2);
  objc_msgSend((id)qword_10083E0B0, "setNumberStyle:", 1);
}

void sub_1000B94C8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)CLGeocoder);
  v2 = (void *)qword_10083E0C0;
  qword_10083E0C0 = (uint64_t)v1;

}

void sub_1000B9530(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("location.fill")));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "flattenedImageWithColor:", v1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont defaultFontForTextStyle:](UIFont, "defaultFontForTextStyle:", UIFontTextStyleBody));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithFont:](UIImageSymbolConfiguration, "configurationWithFont:", v3));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "imageWithSymbolConfiguration:", v4));
  v6 = (void *)qword_10083E0D0;
  qword_10083E0D0 = v5;

}

void sub_1000BA378(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000BA3B8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[8], "setImage:", v5);

}

void sub_1000BA410(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[8], "setHidden:", 0);
    objc_msgSend(v4[8], "setImage:", v6);
    objc_msgSend(v4, "setNeedsLayout");
    objc_msgSend(v4, "layoutIfNeeded");
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      (*(void (**)(void))(v5 + 16))();
  }

}

void sub_1000BA49C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[6], "setImage:", v5);

}

void sub_1000BAD58(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  _QWORD block[5];
  id v6;
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v4 = v3;
  if (v3)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BADFC;
    block[3] = &unk_100778680;
    block[4] = *(_QWORD *)(a1 + 32);
    v6 = v3;
    v7 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1000BADFC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;

  v14 = objc_alloc_init((Class)NSTextAttachment);
  *(_QWORD *)&v3 = objc_opt_class(*(_QWORD *)(a1 + 32), v2).n128_u64[0];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_locationArrowImage", v3));
  objc_msgSend(v14, "setImage:", v5);
  objc_msgSend(v14, "setBounds:", 0.0, 0.0, 10.0, 10.0);
  v6 = objc_alloc_init((Class)NSMutableAttributedString);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAttributedString attributedStringWithAttachment:](NSAttributedString, "attributedStringWithAttachment:", v14));
  objc_msgSend(v6, "appendAttributedString:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "locality"));
  if (v8 || (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"))) != 0)
  {
    v9 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", CFSTR(" "));
    objc_msgSend(v6, "appendAttributedString:", v9);

    v10 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v8, 0);
    objc_msgSend(v6, "appendAttributedString:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  objc_msgSend(v6, "addAttribute:value:range:", NSForegroundColorAttributeName, v11, 0, objc_msgSend(v6, "length"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "font"));
  objc_msgSend(v6, "addAttribute:value:range:", NSFontAttributeName, v12, 0, objc_msgSend(v6, "length"));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setAttributedText:", v6);
  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(void))(v13 + 16))();

}

void sub_1000BBE60(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083E0E0;
  qword_10083E0E0 = (uint64_t)v1;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("MMMM y"), 0, v4));
  objc_msgSend((id)qword_10083E0E0, "setDateFormat:", v3);

}

void sub_1000BC508(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)UILabel);
  v2 = (void *)qword_10083E0F0;
  qword_10083E0F0 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E0F0, "setNumberOfLines:", 0);
}

void sub_1000BD330(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  int8x16_t v5;
  _QWORD block[4];
  int8x16_t v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImageForAchievement:size:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 56), *(double *)(a1 + 64)));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BD3E4;
  block[3] = &unk_1007790B8;
  v5 = *(int8x16_t *)(a1 + 40);
  v3 = (id)v5.i64[0];
  v7 = vextq_s8(v5, v5, 8uLL);
  v8 = v2;
  v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000BD3E4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "templateUniqueName"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "template"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uniqueName"));
  v4 = objc_msgSend(v3, "isEqualToString:", v7);

  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "badgeView"));
    objc_msgSend(v6, "setImage:", v5);

  }
}

void sub_1000BE258(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)CNContactStore);
  v2 = (void *)qword_10083E100;
  qword_10083E100 = (uint64_t)v1;

}

void sub_1000BE2C0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)CNContact);
  v2 = (void *)qword_10083E110;
  qword_10083E110 = (uint64_t)v1;

}

void sub_1000BEB00(id a1, int a2)
{
  NSObject *v2;
  uint8_t v3[16];

  _HKInitializeLogging(a1, *(_QWORD *)&a2);
  v2 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "The fitness week was redefined underneath of us, bail!", v3, 2u);
  }
  exit(0);
}

void sub_1000BECB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000BED30;
  v5[3] = &unk_100777EE0;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

id sub_1000BED30(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "currentPhase");
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
      objc_msgSend(*(id *)(a1 + 40), "authorizationStatus");
      result = _objc_msgSend(*(id *)(a1 + 32), "_presentWelcomeViewsSetupOnboarding:");
      break;
    case 2uLL:
      result = _objc_msgSend(*(id *)(a1 + 32), "_presentMoveGoalSetupOnboarding");
      break;
    case 3uLL:
      result = _objc_msgSend(*(id *)(a1 + 32), "_presentExerciseAndStandGoalsSetupOnboarding");
      break;
    case 4uLL:
      result = _objc_msgSend(*(id *)(a1 + 32), "_presentWhatsNewViewSetupOnboarding");
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000BF088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  id *v10;
  id *v11;
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 136));
  objc_destroyWeak((id *)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_1000BF0FC(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  _QWORD v5[5];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[43], "setCompletedWelcomeViews");
    v4 = objc_loadWeakRetained((id *)(a1 + 40));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000BF190;
    v5[3] = &unk_100777E20;
    v5[4] = v3;
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, v5);

  }
}

id sub_1000BF190(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_setupActivityAppAndLoadData");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
  return result;
}

void sub_1000BF1C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  _QWORD v5[4];
  id v6;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(unsigned __int8 *)(a1 + 49);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000BF298;
    v5[3] = &unk_1007799E8;
    v6 = *(id *)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[CHNotificationConsentController makeNotificationConsentViewController:buttonHandler:](CHNotificationConsentController, "makeNotificationConsentViewController:buttonHandler:", v2, v5));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "pushViewController:animated:", v3, 1);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

uint64_t sub_1000BF298(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000BF2A4(uint64_t a1)
{
  void **WeakRetained;
  void **v3;
  char *v4;
  uint64_t v5;
  void *v6;

  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (char *)objc_msgSend(WeakRetained[43], "currentPhase");
    if ((unint64_t)(v4 - 2) < 4)
    {
      _HKInitializeLogging(v4, v5);
      v6 = (void *)HKLogActivity;
      if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_FAULT))
        sub_1005F2DC4(v3 + 43, v6);
      goto LABEL_8;
    }
    if (!v4)
    {
LABEL_8:
      objc_msgSend(*(id *)(a1 + 32), "pushViewController:animated:", *(_QWORD *)(a1 + 40), 1);
      goto LABEL_9;
    }
    if (v4 == (char *)1)
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
LABEL_9:

}

void sub_1000BF6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BF71C(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[43], "setCompletedWhatsNewViews");
    WeakRetained = v2;
  }

}

void sub_1000BF758(uint64_t a1)
{
  void *v2;
  CGAffineTransform v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "setAlpha:", 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "view"));
  CGAffineTransformMakeScale(&v3, 1.0, 1.0);
  objc_msgSend(v2, "setTransform:", &v3);

}

id sub_1000BF7D0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "removeFromSuperview");
  objc_msgSend(*(id *)(a1 + 32), "_showCoachingDataCollectionMessageIfNeeded");
  return +[CHNotificationConsentController updateAuthorization](CHNotificationConsentController, "updateAuthorization");
}

uint64_t sub_1000BFE3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000BFE4C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  _HKInitializeLogging(a1, a2);
  v3 = HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PhoneSceneDelegate did receive HKStandalonePhoneFitnessModeDidUpdateNotification notification", v5, 2u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setActivityTabBarImage");

}

id sub_1000C0444(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleTodayShortcut");
}

void sub_1000C044C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  if (v3)
  {
    v14 = v3;
    v4 = objc_alloc_init((Class)NSISO8601DateFormatter);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@T00:00:00Z"), v14));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateFromString:", v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
    v8 = (double)-(uint64_t)objc_msgSend(v7, "secondsFromGMT");

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dateByAddingTimeInterval:", v8));
    if (v9)
    {
      v10 = *(void **)(a1 + 32);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "activityTileNavController"));
      objc_msgSend(v10, "_resetToViewController:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
      v13 = objc_msgSend(v12, "showActivityOnDate:shareImmediately:animated:forGoalCompleteNotification:goalRecommendation:", v9, 0, 1, 0, 0);

    }
    v3 = v14;
  }

}

void sub_1000C0594(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  CHASActivitySetupViewController *v9;
  id v10;
  void *v11;
  id v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
  objc_msgSend(v3, "_resetToViewController:", v5);

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  if ((objc_msgSend(v12, "isEqualToString:", CFSTR("move")) & 1) != 0)
  {
    v6 = 0;
  }
  else if ((objc_msgSend(v12, "isEqualToString:", CFSTR("exercise")) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    if ((objc_msgSend(v12, "isEqualToString:", CFSTR("stand")) & 1) == 0)
    {
      v9 = (CHASActivitySetupViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
      -[CHASActivitySetupViewController presentAppSettingsShowingPane:](v9, "presentAppSettingsShowingPane:", 3);
      goto LABEL_8;
    }
    v6 = 2;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  v8 = objc_msgSend(v7, "showTodayAndShareImmediately:animated:forGoalCompleteNotification:goalRecommendation:", 0, 0, 0, 0);

  v9 = -[CHASActivitySetupViewController initWithPresentationContext:goalType:editTodayOnly:]([CHASActivitySetupViewController alloc], "initWithPresentationContext:goalType:editTodayOnly:", 6, v6, 0);
  v10 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v11, "presentViewController:animated:completion:", v10, 1, 0);

LABEL_8:
}

id sub_1000C0704(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleActivityShareShortcut");
}

void sub_1000C070C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activityTileNavController"));
  objc_msgSend(v2, "_resetToViewController:", v3);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  v4 = objc_msgSend(v5, "navigateToTrophyCaseAnimated:initialAchievement:shouldShowCelebration:forModalPresentation:", 1, 0, 0, 1);

}

void sub_1000C078C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
  objc_msgSend(v3, "_resetToViewController:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v5, "navigateToTrophyCaseSection:withAchievementID:animated:", v6, 0, 1);

}

void sub_1000C0814(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 2));

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activityTileNavController"));
    objc_msgSend(v5, "_resetToViewController:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v7, "navigateToTrophyCaseSection:withAchievementID:animated:", v4, v8, 1);

  }
}

void sub_1000C08C4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v7 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activityTileNavController"));
  objc_msgSend(v4, "_resetToViewController:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v6, "showLoad");

  +[WOEffortBridges sendDidViewTrainingLoadAnalyticsFromURL:](WOEffortBridges, "sendDidViewTrainingLoadAnalyticsFromURL:", v7);
}

id sub_1000C0948(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleHistoryShortcut");
}

void sub_1000C0950(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  if (objc_msgSend(v11, "isEqualToString:", CFSTR("dives")))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[FIUIWorkoutActivityType activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:](FIUIWorkoutActivityType, "activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:", 84, 0, &__NSDictionary0__struct));
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activityTileNavController"));
    objc_msgSend(v4, "_resetToViewController:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v6, "navigateToWorkoutHistoryWithActivityType:animated:", v3, 1);

LABEL_7:
    goto LABEL_8;
  }
  if (objc_msgSend(v11, "isEqualToString:", CFSTR("mindfulness")))
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activityTileNavController"));
    objc_msgSend(v7, "_resetToViewController:", v8);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v3, "navigateToMindfulnessHistoryAnimated:", 1);
    goto LABEL_7;
  }
  if (objc_msgSend(v11, "isEqualToString:", CFSTR("workouts")))
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "activityTileNavController"));
    objc_msgSend(v9, "_resetToViewController:", v10);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v3, "navigateToWorkoutHistoryWithActivityType:animated:", 0, 1);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_1000C0AB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 1));
  v5 = (int)objc_msgSend(v4, "intValue");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 2));
  v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("indoor"));

  if (_HKWorkoutActivityTypeIsValid(v5))
  {
    v11 = (id)objc_claimAutoreleasedReturnValue(+[FIUIWorkoutActivityType activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:](FIUIWorkoutActivityType, "activityTypeWithHKWorkoutActivityTypeIdentifier:isIndoor:metadata:", v5, v7, &__NSDictionary0__struct));
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityTileNavController"));
    objc_msgSend(v8, "_resetToViewController:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v10, "navigateToWorkoutHistoryWithActivityType:animated:", v11, 1);

  }
}

void sub_1000C0BC4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  if (v7)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
    objc_msgSend(v3, "_resetToViewController:", v4);

    v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v6, "showMindfulnessSessionWithUUID:", v5);

  }
}

void sub_1000C0C64(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  if (v7)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
    objc_msgSend(v3, "_resetToViewController:", v4);

    v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v6, "showWorkoutWithId:activityId:page:", v5, 0, 0);

  }
}

void sub_1000C0D0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 2));

  if (v10 && v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activityTileNavController"));
    objc_msgSend(v5, "_resetToViewController:", v6);

    v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v10);
    v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v9, "showWorkoutWithId:activityId:page:", v7, v8, 0);

  }
}

void sub_1000C0DF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v3 = a2;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 3));

  if (v11 && v4)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "activityTileNavController"));
    objc_msgSend(v6, "_resetToViewController:", v7);

    v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v11);
    v9 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v10, "showWorkoutWithId:activityId:page:", v8, v9, v5);

  }
}

void sub_1000C0F04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safeObjectAtIndex:", 2));

  if (v9)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activityTileNavController"));
    objc_msgSend(v5, "_resetToViewController:", v6);

    v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v8, "showWorkoutWithId:activityId:page:", v7, 0, v4);

  }
}

void sub_1000C0FD4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activityTileNavController"));
  objc_msgSend(v2, "_resetToViewController:", v3);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v4, "presentAppSettingsShowingPane:", 0);

}

void sub_1000C1040(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "safeObjectAtIndex:", 1));
  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("goals")) & 1) != 0)
  {
    v3 = 3;
  }
  else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("health")) & 1) != 0)
  {
    v3 = 2;
  }
  else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("notifications")) & 1) != 0)
  {
    v3 = 1;
  }
  else if (objc_msgSend(v7, "isEqualToString:", CFSTR("units")))
  {
    v3 = 4;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activityTileNavController"));
  objc_msgSend(v4, "_resetToViewController:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v6, "presentAppSettingsShowingPane:", v3);

}

id sub_1000C1130(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleFriendsShortcut");
}

void sub_1000C1138(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a2;
  if (sub_1000D3E9C())
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
    objc_msgSend(v3, "_resetToViewController:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
    v6 = objc_msgSend(v5, "integerValue");

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
    objc_msgSend(v7, "showSummaryCardWithIdentifier:", v6);

  }
}

id sub_1000C11D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleTrendsShortcut");
}

void sub_1000C11DC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityTileNavController"));
  objc_msgSend(v3, "_resetToViewController:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v7 = objc_msgSend(v6, "integerValue");

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summaryDeeplinkViewController"));
  objc_msgSend(v8, "showTrendWithIdentifier:animated:", v7, 0);

}

id sub_1000C1458(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setFitnessDataCollectionEnabled:", 0);
}

id sub_1000C1464(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setFitnessDataCollectionEnabled:", 1);
}

uint64_t sub_1000C2BCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seymourNavController"));

  if (v2)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "seymourNavController"));
    objc_msgSend(v5, "_setSelectedViewController:", v6);

  }
  else
  {
    _HKInitializeLogging(v3, v4);
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_ERROR))
      sub_1005F2FAC();
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000C2C68(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C2CD0;
  block[3] = &unk_1007799E8;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1000C2CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C334C(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tabBarController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "viewControllers"));
  v4 = objc_msgSend(v3, "containsObject:", *(_QWORD *)(a1 + 40));

  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tabBarController"));
    objc_msgSend(v5, "setSelectedViewController:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1000C38FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C393C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browsingConsentAlertCompletion"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "browsingConsentAlertCompletion"));
    v5[2](v5, 1);

    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "setBrowsingConsentAlertCompletion:", 0);

  }
}

void sub_1000C39E4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browsingConsentAlertCompletion"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "browsingConsentAlertCompletion"));
    v5[2](v5, 0);

    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "setBrowsingConsentAlertCompletion:", 0);

  }
}

void sub_1000C3D60(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1000C3D98(uint64_t a1, void *a2)
{
  BOOL v3;
  void *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  void (**v9)(_QWORD, _QWORD);
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v14 = a2;
  v3 = (unint64_t)objc_msgSend(v14, "length") >= *(_QWORD *)(a1 + 40);
  v4 = v14;
  if (v3)
  {
    v5 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "passwordEnteredHandler"));

    if (v7)
    {
      v8 = objc_loadWeakRetained(v5);
      v9 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "passwordEnteredHandler"));
      ((void (**)(_QWORD, id))v9)[2](v9, v14);

      v10 = objc_loadWeakRetained(v5);
      objc_msgSend(v10, "setPasswordEnteredHandler:", 0);

    }
    v11 = objc_loadWeakRetained(v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "passwordController"));
    objc_msgSend(v12, "dismiss");

    v13 = objc_loadWeakRetained(v5);
    objc_msgSend(v13, "setPasswordController:", 0);

    v4 = v14;
  }

}

void sub_1000C3E8C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  id v6;
  id v7;
  void *v8;
  id v9;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "passwordEnteredHandler"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "passwordEnteredHandler"));
    v5[2](v5, 0);

    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "setPasswordEnteredHandler:", 0);

  }
  v7 = objc_loadWeakRetained(v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "passwordController"));
  objc_msgSend(v8, "dismiss");

  v9 = objc_loadWeakRetained(v1);
  objc_msgSend(v9, "setPasswordController:", 0);

}

id sub_1000C41FC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_setupActivityAppAndLoadData");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
  return result;
}

id sub_1000C4438(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dismissMirrorViewController");
}

void sub_1000C59F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C5A10(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    ASLoggingInitialize(WeakRetained);
    v3 = ASLogDefault;
    if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received Watch pairing changed notification", v4, 2u);
    }
    objc_msgSend(v2, "_updateSharingTextForMe");
  }

}

void sub_1000C5C8C(uint64_t a1, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000C5CEC;
  v2[3] = &unk_100777E48;
  v3 = a2;
  v2[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

void sub_1000C5CEC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar hk_gregorianCalendar](NSCalendar, "hk_gregorianCalendar"));
    v3 = objc_msgSend(v2, "isDateInToday:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = v4;
    if (v3)
      v6 = CFSTR("MULTIPLE_DEVICES_SHARING_TODAY");
    else
      v6 = CFSTR("MULTIPLE_DEVICES_SHARING_PAST");
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", v6, &stru_1007AE1D0, CFSTR("Localizable")));
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 272);
    *(_QWORD *)(v10 + 272) = v9;

    objc_msgSend(*(id *)(a1 + 32), "_reloadData");
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 272);
    *(_QWORD *)(v7 + 272) = &stru_1007AE1D0;

  }
}

NSString *__cdecl sub_1000C621C(id a1, ACHAchievement *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[ACHAchievement template](a2, "template"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uniqueName"));

  return (NSString *)v3;
}

void sub_1000C79DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C7A58(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_setupCellSizes");
    objc_msgSend(v2[2], "reloadData");
    WeakRetained = v2;
  }

}

int64_t sub_1000C9B90(id a1, _HKFitnessFriendWorkout *a2, _HKFitnessFriendWorkout *a3)
{
  _HKFitnessFriendWorkout *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[_HKFitnessFriendWorkout startDate](a3, "startDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[_HKFitnessFriendWorkout startDate](v4, "startDate"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

id sub_1000C9EF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "relevantEarnedInstance"));
  if (v4
    || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "earnedInstances")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject")),
        v5,
        v4))
  {
    v20 = a1;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "value"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "value"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "template"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "canonicalUnit"));
      objc_msgSend(v7, "doubleValueForUnit:", v9);
      v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));

    }
    else
    {
      v10 = 0;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "template"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueName"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar hk_gregorianCalendar](NSCalendar, "hk_gregorianCalendar"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "earnedDateComponents"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dateFromComponents:", v14));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v20 + 32) + 32), "UUID"));
    v17 = (void *)v10;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[_HKFitnessFriendAchievement achievementWithTemplateUniqueName:completedDate:value:friendUUID:](_HKFitnessFriendAchievement, "achievementWithTemplateUniqueName:completedDate:value:friendUUID:", v12, v15, v10, v16));

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

id sub_1000CA4B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
}

id sub_1000CA4C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHidden:", 0);
}

void sub_1000CB0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CB104(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  id v16;

  v5 = a3;
  ASLoggingInitialize(v5);
  v6 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v14 = a2;
    v15 = 2114;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SetMuteEnabled result: %d/%{public}@", buf, 0x12u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000CB23C;
  block[3] = &unk_10077A450;
  v11 = a2;
  v9 = v5;
  v12 = *(_BYTE *)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000CB23C(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  if (!*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 32))
  {
    v2 = *(unsigned __int8 *)(a1 + 49);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = v3;
    if (v2)
      v5 = CFSTR("SHARING_UNMUTING_ERROR_%@");
    else
      v5 = CFSTR("SHARING_MUTING_ERROR_%@");
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", v5, &stru_1007AE1D0, CFSTR("Localizable")));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v17, *(_QWORD *)(a1 + 40)));
    v7 = *(unsigned __int8 *)(a1 + 49);
    v8 = ActivitySharingBundle(v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (v7)
      v11 = CFSTR("UNMUTE_NOTIFICATIONS");
    else
      v11 = CFSTR("MUTE_NOTIFICATIONS");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", v11, &stru_1007AE1D0, CFSTR("Localizable")));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v12, v6, 1));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 0, 0));
    objc_msgSend(v13, "addAction:", v16);

    sub_1000A8BB8(v13);
  }
}

void sub_1000CB3FC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;

  v3 = a2;
  ASLoggingInitialize(v3);
  v4 = ASLogDefault;
  v5 = os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v13 = 138412290;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Hiding not allowed, showing alert with message: %@", (uint8_t *)&v13, 0xCu);
  }
  v6 = ActivitySharingBundle(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("COMPETITION_HIDING_NOT_ALLOWED_TITLE"), &stru_1007AE1D0, CFSTR("Localizable")));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v8, v3, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, 0));
  objc_msgSend(v9, "addAction:", v12);

  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v9, 1, 0);
}

void sub_1000CB5A8(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  id v16;

  v5 = a3;
  ASLoggingInitialize(v5);
  v6 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v14 = a2;
    v15 = 2114;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SetActivityDataVisible result: %d/%{public}@", buf, 0x12u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000CB6E0;
  block[3] = &unk_10077A450;
  v11 = a2;
  v9 = v5;
  v12 = *(_BYTE *)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000CB6E0(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (!*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 32))
  {
    v2 = *(unsigned __int8 *)(a1 + 49);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = v3;
    if (v2)
      v5 = CFSTR("SHARING_HIDING_ERROR");
    else
      v5 = CFSTR("SHARING_SHOWING_ERROR");
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", v5, &stru_1007AE1D0, CFSTR("Localizable")));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v13, *(_QWORD *)(a1 + 40)));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v8, v6, 1));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, 0));
    objc_msgSend(v9, "addAction:", v12);

    sub_1000A8BB8(v9);
  }
}

void sub_1000CB894(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(v2 + 120);
  v5 = *(_QWORD *)(v2 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_1000CB958;
  v9[3] = &unk_100778138;
  v9[1] = 3221225472;
  v10 = v3;
  objc_msgSend(v4, "removeFriend:completion:", v5, v9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v8 = objc_msgSend(v7, "popViewControllerAnimated:", 1);

}

void sub_1000CB958(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  id v12;

  v5 = a3;
  ASLoggingInitialize(v5);
  v6 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    v10 = a2;
    v11 = 2114;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removal completion block called with success: %ld, error: %{public}@", buf, 0x16u);
  }
  if (v5 || (a2 & 1) == 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CBA7C;
    block[3] = &unk_100777E20;
    v8 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1000CBA7C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("SHARING_REMOVE_ERROR"), &stru_1007AE1D0, CFSTR("Localizable")));
  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v3, *(_QWORD *)(a1 + 32)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("SHARE_ACTIVITY"), &stru_1007AE1D0, CFSTR("Localizable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v5, v10, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v8, 0, 0));
  objc_msgSend(v6, "addAction:", v9);

  sub_1000A8BB8(v6);
}

void sub_1000CBBF4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  unsigned __int8 v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  _QWORD *v33;
  uint8_t buf[16];
  _QWORD v35[5];
  id v36;

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1000CC024;
  v35[3] = &unk_100777EE0;
  v2 = *(void **)(a1 + 40);
  v35[4] = *(_QWORD *)(a1 + 32);
  v36 = v2;
  v3 = objc_retainBlock(v35);
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "supportsCompetitions");
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if ((v4 & 1) != 0)
  {
    v6 = objc_msgSend(v5, "isMyActivityDataCurrentlyHidden");
    if ((_DWORD)v6)
    {
      ASLoggingInitialize(v6);
      v7 = ASLogDefault;
      if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "My activity data is currently hidden, showing unhide confirmation", buf, 2u);
      }
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("COMPETITION_SEND_CONFIRMATION_HIDING"), &stru_1007AE1D0, CFSTR("Localizable")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "displayName"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "displayName"));
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v10, v11));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(a1 + 48), v31, 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("SHARING_CANCEL"), &stru_1007AE1D0, CFSTR("Localizable")));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v14, 1, 0));
      objc_msgSend(v12, "addAction:", v15);

      v17 = ActivitySharingBundle(v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("COMPETITION_SEND_CONFIRMATION_SEND_ACTION_HIDING"), &stru_1007AE1D0, CFSTR("Localizable")));
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1000CC43C;
      v32[3] = &unk_100779BD0;
      v33 = v3;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v19, 0, v32));
      objc_msgSend(v12, "addAction:", v20);

      objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v12, 1, 0);
    }
    else
    {
      ((void (*)(_QWORD *))v3[2])(v3);
    }
  }
  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "as_competitionSendConfirmationTitle"));
    v22 = ActivitySharingBundle(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("COMPETITION_SEND_ERROR_FRIEND_VERSION_TOO_LOW"), &stru_1007AE1D0, CFSTR("Localizable")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "displayName"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v24, v25));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v21, v26, 1));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v29, 0, 0));
    objc_msgSend(v27, "addAction:", v30);

    objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v27, 1, 0);
  }

}

void sub_1000CC024(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;

  ASLoggingInitialize(a1);
  v2 = (void *)ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUID"));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    *(_DWORD *)buf = 138412546;
    v14 = v5;
    v15 = 2112;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending competition request to friend: %@{public}@ - %@", buf, 0x16u);

  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v9 = *(void **)(v7 + 120);
  v10 = *(_QWORD *)(v7 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000CC180;
  v11[3] = &unk_100778138;
  v12 = v8;
  objc_msgSend(v9, "sendCompetitionRequestToFriend:completion:", v10, v11);

}

void sub_1000CC180(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  id v15;

  v5 = a3;
  ASLoggingInitialize(v5);
  v6 = ASLogDefault;
  if (os_log_type_enabled(ASLogDefault, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    v13 = a2;
    v14 = 2114;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Send competition request completion with success: %d, error: %{public}@", buf, 0x12u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000CC2B0;
  block[3] = &unk_100777E90;
  v11 = a2;
  v9 = v5;
  v10 = *(id *)(a1 + 32);
  v7 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000CC2B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (!*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 32))
  {
    v2 = ActivitySharingBundle(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("COMPETITION_ERROR_TITLE"), &stru_1007AE1D0, CFSTR("Localizable")));

    v5 = ActivitySharingBundle(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("COMPETITION_SEND_ERROR_MESSAGE"), &stru_1007AE1D0, CFSTR("Localizable")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v7, *(_QWORD *)(a1 + 40)));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v13, v8, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1007AE1D0, CFSTR("Localizable")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, 0));
    objc_msgSend(v9, "addAction:", v12);

    sub_1000A8BB8(v9);
  }
}

uint64_t sub_1000CC43C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CC448(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "as_competitionLearnMoreTitleForExperienceType:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "as_competitionLearnMoreFullDescriptionForExperienceType:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v7, v2, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("SHARING_CANCEL"), &stru_1007AE1D0, CFSTR("Localizable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v5, 1, 0));
  objc_msgSend(v3, "addAction:", v6);

  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v3, 1, 0);
}

void sub_1000CCB74(id a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  *(double *)&qword_10083E120 = 1.0 / v1;

}

void sub_1000CD130(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000CD15C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;

  v5 = a2;
  if (*(_QWORD *)(a1 + 56) == a3)
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _systemImageNamed:](UIImage, "_systemImageNamed:", CFSTR("checkmark")));
  else
    v6 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectAtIndexedSubscript:", a3));
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_1000CD2A4;
  v13 = &unk_100779A98;
  objc_copyWeak(&v15, (id *)(a1 + 48));
  v8 = v7;
  v14 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v5, v6, 0, &v10));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v9, v10, v11, v12, v13);

  objc_destroyWeak(&v15);
}

void sub_1000CD28C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000CD2A4(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  _QWORD v4[5];
  id v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[1], "setEditing:animated:", 0, 1);
    objc_msgSend(v3, "_updateFilterButtonTitleForWorkoutTypeKey:", *(_QWORD *)(a1 + 32));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000CD354;
    v4[3] = &unk_100777EE0;
    v4[4] = v3;
    v5 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  }
}

id sub_1000CD354(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setCurrentFilteredTypeIdentifier:", *(_QWORD *)(a1 + 40));
}

void sub_1000CD4A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;
  id *v5;

  v5 = v3;
  objc_destroyWeak(v5);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1000CD4E0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateFiltersList");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_popViewControllerIfNeeded");

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "_stopActivityIndicator");

}

void sub_1000CD540(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateFiltersList");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_popViewControllerIfNeeded");

}

void sub_1000CD58C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateFiltersList");

}

void sub_1000CE168(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_10083E130;
  qword_10083E130 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("MMMMyyyy"), 0, v3));

  objc_msgSend((id)qword_10083E130, "setDateFormat:", v4);
}

uint64_t sub_1000CE594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000CE5A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000CE5BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CE9A4(id a1)
{
  id v1;

  v1 = sub_1000AA158();

}

void sub_1000CEBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CEBF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000CEC08(uint64_t a1)
{

}

void sub_1000CEC10(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000CEC5C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  id v10;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "preferredAppStoreIconWidth");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v7, "scale");
  v9 = v6 / v8;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "resizedImageWithNewSize:", v9, v9));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000CED9C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  void *v17;

  v3 = a2;
  _HKInitializeLogging(v3, v4);
  v5 = (void *)HKLogActivity;
  v6 = os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v6)
    {
      v7 = *(void **)(a1 + 32);
      v8 = v5;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Round icon for bundleID: %@ is available from NRG.", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (v6)
    {
      v10 = *(void **)(a1 + 32);
      v11 = v5;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleID"));
      *(_DWORD *)buf = 138412290;
      v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Round icon for bundleID: %@ not available from NRG. Trying store.", buf, 0xCu);

    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000CEF48;
    v14[3] = &unk_100777DB0;
    v13 = *(_QWORD *)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    +[CHIconCacheStoreLookup fetchIconWithCHIconParameters:withCompletion:](CHIconCacheStoreLookup, "fetchIconWithCHIconParameters:withCompletion:", v13, v14);

  }
}

uint64_t sub_1000CEF48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CF03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CF054(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleID"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationProxy applicationProxyForCompanionIdentifier:](LSApplicationProxy, "applicationProxyForCompanionIdentifier:", v2));

  v3 = objc_msgSend(objc_alloc((Class)HKSource), "_init");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleID"));
  objc_msgSend(v3, "_setBundleIdentifier:", v4);

  if (v11 || objc_msgSend(v3, "_hasFirstPartyBundleID"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleID"));
    v6 = objc_msgSend(*(id *)(a1 + 32), "appIconFormat");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v7, "scale");
    v8 = objc_claimAutoreleasedReturnValue(+[UIImage _applicationIconImageForBundleIdentifier:format:scale:](UIImage, "_applicationIconImageForBundleIdentifier:format:scale:", v5, v6));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
}

void sub_1000CF218(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  void *v17;

  v3 = a2;
  _HKInitializeLogging(v3, v4);
  v5 = (void *)HKLogActivity;
  v6 = os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v6)
    {
      v7 = *(void **)(a1 + 32);
      v8 = v5;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Chiclet icon for bundleID: %@ is available from LaunchServices.", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (v6)
    {
      v10 = *(void **)(a1 + 32);
      v11 = v5;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleID"));
      *(_DWORD *)buf = 138412290;
      v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Chiclet icon for bundleID: %@ is not available from LaunchServices. Trying store.", buf, 0xCu);

    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000CF3C4;
    v14[3] = &unk_100777DB0;
    v13 = *(_QWORD *)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    +[CHIconCacheStoreLookup fetchIconWithCHIconParameters:withCompletion:](CHIconCacheStoreLookup, "fetchIconWithCHIconParameters:withCompletion:", v13, v14);

  }
}

uint64_t sub_1000CF3C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CF604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CF624()
{
  if (qword_10083E148 != -1)
    dispatch_once(&qword_10083E148, &stru_10077A6D8);
  return (id)qword_10083E140;
}

void sub_1000CF664(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  uint64_t v7;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000CF6FC;
  v4[3] = &unk_10077A640;
  v2 = *(void **)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_fetchRoundIconWithParameters:completion:", v3, v4);

}

void sub_1000CF6FC(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v7 = sub_1000CF624();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v8, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));

    _HKInitializeLogging(v9, v10);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v12;
      v13 = "Source icon for cacheID: %@ is available.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v13, buf, 0xCu);
    }
  }
  else
  {
    _HKInitializeLogging(v5, v6);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v14;
      v13 = "Source icon for cacheID: %@ not available.";
      goto LABEL_6;
    }
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000CF8A0;
  v17[3] = &unk_10077A618;
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v18 = v15;
  v19 = v16;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v17);

}

uint64_t sub_1000CF8A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
}

void sub_1000CFB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CFB74()
{
  if (qword_10083E158 != -1)
    dispatch_once(&qword_10083E158, &stru_10077A6F8);
  return (id)qword_10083E150;
}

void sub_1000CFBB4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 72);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000CFC58;
  v6[3] = &unk_10077A690;
  v9 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = v4;
  v10 = v5;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_fetchRoundIconWithParameters:completion:", v3, v6);

}

void sub_1000CFC58(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v7 = sub_1000CF624();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v8, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));

    _HKInitializeLogging(v9, v10);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v12;
      v13 = "Source icon for cacheID: %@ is available.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v15, 0xCu);
    }
  }
  else
  {
    _HKInitializeLogging(v5, v6);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v14;
      v13 = "Source icon for cacheID: %@ not available.";
      goto LABEL_6;
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1000CFFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D001C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  uint64_t v7;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000D00B4;
  v4[3] = &unk_10077A640;
  v2 = *(void **)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_fetchChicletWithParameters:completion:", v3, v4);

}

void sub_1000D00B4(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v7 = sub_1000CF624();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v8, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));

    _HKInitializeLogging(v9, v10);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v12;
      v13 = "Source icon for cacheID: %@ is available.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v13, buf, 0xCu);
    }
  }
  else
  {
    _HKInitializeLogging(v5, v6);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v14;
      v13 = "Source icon for cacheID: %@ not available.";
      goto LABEL_6;
    }
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000D0258;
  v17[3] = &unk_10077A618;
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v18 = v15;
  v19 = v16;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v17);

}

uint64_t sub_1000D0258(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
}

void sub_1000D050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D052C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 72);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000D05D0;
  v6[3] = &unk_10077A690;
  v9 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = v4;
  v10 = v5;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_fetchChicletWithParameters:completion:", v3, v6);

}

void sub_1000D05D0(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v7 = sub_1000CF624();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v8, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));

    _HKInitializeLogging(v9, v10);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v12;
      v13 = "Source icon for cacheID: %@ is available.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v15, 0xCu);
    }
  }
  else
  {
    _HKInitializeLogging(v5, v6);
    v11 = HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v14;
      v13 = "Source icon for cacheID: %@ not available.";
      goto LABEL_6;
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1000D0740(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_10083E140;
  qword_10083E140 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E140, "setEvictsObjectsWhenApplicationEntersBackground:", 0);
  objc_msgSend((id)qword_10083E140, "setCountLimit:", 10);
}

void sub_1000D0788(id a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = HKCreateSerialDispatchQueueWithQOSClass(0, CFSTR("CHIconCache"), 25);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_10083E150;
  qword_10083E150 = v2;

}

void sub_1000D12FC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "me"));
  objc_msgSend(*(id *)(a1 + 32), "_showDetailForFriend:date:", v2, *(_QWORD *)(a1 + 40));

}

void sub_1000D13F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "friendWithUUID:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "_showDetailForFriend:date:", v2, *(_QWORD *)(a1 + 48));

}

id sub_1000D1494(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didTapInboxBarButtonView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144));
}

void sub_1000D1C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D1C70(id *a1, id a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12[2];

  if (a1[6] == a2)
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _systemImageNamed:](UIImage, "_systemImageNamed:", CFSTR("checkmark")));
  else
    v4 = 0;
  v5 = ASDisplayModeToString(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v8 = _NSConcreteStackBlock;
  v9 = 3221225472;
  v10 = sub_1000D1D8C;
  v11 = &unk_10077A720;
  objc_copyWeak(v12, a1 + 5);
  v12[1] = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v6, v4, 0, &v8));

  objc_msgSend(a1[4], "addObject:", v7, v8, v9, v10, v11);
  objc_destroyWeak(v12);

}

void sub_1000D1D74(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D1D8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v2, "setInteger:forKey:", *(_QWORD *)(a1 + 40), CFSTR("CHFriendListDisplayMode"));

    objc_msgSend(WeakRetained[9], "setDisplayMode:", *(_QWORD *)(a1 + 40));
    objc_msgSend(WeakRetained, "_logFriendListDisplayMode:", *(_QWORD *)(a1 + 40));
    objc_msgSend(WeakRetained, "_updateSectionsForCurrentDisplayContext");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
    objc_msgSend(v3, "reloadData");

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_sortMenu"));
    objc_msgSend(WeakRetained[15], "setMenu:", v4);

  }
}

id sub_1000D2800(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000D2890(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  objc_msgSend(v2, "pushViewController:animated:", *(_QWORD *)(a1 + 40), 1);

}

id sub_1000D2948(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_animateOnscreenCellsToNewValues");
}

id sub_1000D29B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_animateOnscreenCellsToNewValues");
}

void sub_1000D3084(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateSectionsForCurrentDisplayContext");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "reloadData");

}

void sub_1000D3228(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D3284;
  block[3] = &unk_100777E20;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1000D3284(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "refreshControl"));
  objc_msgSend(v1, "endRefreshing");

}

void sub_1000D3404(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "removeAllObjects");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "reloadData");

}

void sub_1000D362C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1000D37AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D37C8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_refreshCache");

}

void sub_1000D3844(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("FitnessActivityWorkoutsChangedNotification"), *(_QWORD *)(a1 + 32));

}

void sub_1000D3910(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id obj;
  uint64_t v22;
  id v23;
  _QWORD block[4];
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v23 = objc_alloc_init((Class)NSMutableDictionary);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataProvider"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "workoutsByDay"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allKeys"));

  obj = v4;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v5)
  {
    v6 = v5;
    v22 = *(_QWORD *)v27;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v27 != v22)
          objc_enumerationMutation(obj);
        v8 = *(id *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "calendarIdentifier"));
        v10 = objc_msgSend(v9, "isEqual:", NSCalendarIdentifierGregorian);

        v11 = v8;
        if ((v10 & 1) == 0)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "dateFromComponents:", v8));
          v13 = _HKActivityCacheDateComponentsFromDate(v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
          v11 = (void *)objc_claimAutoreleasedReturnValue(v13);

        }
        v14 = _HKCacheIndexFromDateComponents(v11);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataProvider"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "workoutsByDay"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v8));
        v18 = objc_msgSend(v17, "count");

        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18 != 0));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v14));
        objc_msgSend(v23, "setObject:forKeyedSubscript:", v19, v20);

        v7 = (char *)v7 + 1;
      }
      while (v6 != v7);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(a1 + 32), "setNumberOfWorkoutsForCacheKey:", v23);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D3BC0;
  block[3] = &unk_1007799E8;
  v25 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1000D3BC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000D3C60(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1[4] + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1[6]));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v4));
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = objc_msgSend(v3, "BOOLValue");

}

double sub_1000D3D50()
{
  void *v0;
  double v1;
  CGRect v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "bounds");
  if (CGRectGetWidth(v3) >= 375.0)
    v1 = 112.0;
  else
    v1 = 90.0;

  return v1;
}

double sub_1000D3DB4()
{
  void *v0;
  double v1;
  CGRect v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "bounds");
  if (CGRectGetWidth(v3) >= 375.0)
    v1 = 108.0;
  else
    v1 = 88.0;

  return v1;
}

UIColor *sub_1000D3E18()
{
  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.298039216, 1.0);
}

UIColor *sub_1000D3E30()
{
  return +[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.470588235, 0.470588235, 0.501960784, 0.36);
}

id sub_1000D3E58()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("IntervalPoolSwimmingAutoSets"));

  return v1;
}

uint64_t sub_1000D3E9C()
{
  return _os_feature_enabled_impl("Fitness", "SummaryTabRedesign");
}

void sub_1000D4178(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  CHMoveModeChangePromptViewController *v25;
  id v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  CHMoveModeChangePromptViewController *v31;
  CHMoveModeChangePromptViewController *v32;
  uint8_t buf[4];
  uint64_t v34;

  _HKInitializeLogging(a1, a2);
  v3 = HKLogCoaching;
  if (os_log_type_enabled(HKLogCoaching, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CHMoveModeNotificationResponseCoordinator handling notification response %@", buf, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notification"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "request"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v6, "content"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "categoryIdentifier"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[FCNotificationRequestConstants moveModeNotificationCategory](FCNotificationRequestConstants, "moveModeNotificationCategory"));
  LOBYTE(v6) = objc_msgSend(v8, "isEqualToString:", v9);

  if ((v6 & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[FCNotificationRequestConstants moveModeChangeModeNotificationCategory](FCNotificationRequestConstants, "moveModeChangeModeNotificationCategory"));
    v11 = objc_msgSend(v8, "isEqualToString:", v10);

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notification"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "request"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "content"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userInfo"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[FCMoveModeNotificationConstants nextMoveModeUserInfoKey](FCMoveModeNotificationConstants, "nextMoveModeUserInfoKey"));
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

      v18 = objc_msgSend(v17, "integerValue");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notification"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "request"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "userInfo"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[FCMoveModeNotificationConstants notificationTypeUserInfoKey](FCMoveModeNotificationConstants, "notificationTypeUserInfoKey"));
      v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v23));

      v25 = -[CHMoveModeChangePromptViewController initWithNextMoveMode:notificationType:healthStore:formattingManager:]([CHMoveModeChangePromptViewController alloc], "initWithNextMoveMode:notificationType:healthStore:formattingManager:", v18, objc_msgSend(v24, "integerValue"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v26 = objc_alloc_init((Class)UINavigationController);
      v32 = v25;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v32, 1));
      objc_msgSend(v26, "setViewControllers:animated:", v27, 0);

      objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v26, 0, 0);
LABEL_8:

      goto LABEL_9;
    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[FCNotificationRequestConstants moveModeChangeGoalsNotificationCategory](FCNotificationRequestConstants, "moveModeChangeGoalsNotificationCategory"));
    v29 = objc_msgSend(v8, "isEqualToString:", v28);

    if (v29)
    {
      v17 = objc_alloc_init((Class)UINavigationController);
      v24 = objc_msgSend(objc_alloc((Class)FIUIPregnancyStateProvider), "initWithHealthStore:", *(_QWORD *)(a1 + 40));
      v25 = -[CHASActivitySetupMetricsCollectionViewController initWithPresentationContext:pregnancyStateProvider:]([CHASActivitySetupMetricsCollectionViewController alloc], "initWithPresentationContext:pregnancyStateProvider:", 6, v24);
      v31 = v25;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
      objc_msgSend(v17, "setViewControllers:animated:", v30, 0);

      objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v17, 0, 0);
      goto LABEL_8;
    }
  }
LABEL_9:

}

void sub_1000D463C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_10083E160;
  qword_10083E160 = (uint64_t)v1;

  objc_msgSend((id)qword_10083E160, "setMinimumFractionDigits:", 0);
  objc_msgSend((id)qword_10083E160, "setMaximumFractionDigits:", 2);
  objc_msgSend((id)qword_10083E160, "setNumberStyle:", 1);
}

void sub_1000D4FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, NSErrorUserInfoKey a10, NSErrorUserInfoKey a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a2 == 1)
  {
    v14 = objc_begin_catch(exception_object);
    a10 = NSLocalizedFailureReasonErrorKey;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "reason"));
    a12 = (uint64_t)v15;
    a11 = NSLocalizedDescriptionKey;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
    a13 = (uint64_t)v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &a12, &a10, 2));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ObjectiveCException"), -1, v17));

    if (v13)
      *v13 = objc_retainAutorelease(v18);

    objc_end_catch();
    JUMPOUT(0x1000D4FA8);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000D5D34(uint64_t a1)
{
  void *v1;
  __int128 v2;
  _OWORD v4[3];

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  return objc_msgSend(v1, "setTransform:", v4);
}

void sub_1000D611C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  objc_msgSend(*(id *)(a1 + 32), "setTextColor:", v2);

}

void sub_1000D6338(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  objc_msgSend(*(id *)(a1 + 32), "setTextColor:", v2);

}

uint64_t sub_1000D7304(char *a1, char *a2)
{
  return sub_1003914EC(*a1, *a2);
}

Swift::Int sub_1000D7310()
{
  char *v0;

  return sub_100391588(*v0);
}

uint64_t sub_1000D7318(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;

  if (*v1)
    v2 = 0x8000000100687440;
  else
    v2 = 0x8000000100687420;
  String.hash(into:)(a1, 0xD000000000000017, v2);
  return swift_bridgeObjectRelease(v2);
}

Swift::Int sub_1000D7370(uint64_t a1)
{
  char *v1;

  return sub_100392254(a1, *v1);
}

uint64_t sub_1000D7378@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10077A8C0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000D73D4(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x8000000100687420;
  if (*v1)
    v2 = 0x8000000100687440;
  *a1 = 0xD000000000000017;
  a1[1] = v2;
}

uint64_t sub_1000D7410()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1006217F0);
  v2 = swift_getKeyPath(&unk_100621818);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1000D7480(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  _QWORD *v14;

  v4 = a2 & 1;
  v5 = sub_100047110(&qword_10081E670);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_messageComposerDelegate) = 0;
  v9 = v2 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator__replyOptions;
  v14 = _swiftEmptyArrayStorage;
  v10 = sub_100047110((uint64_t *)&unk_10081E160);
  Published.init(initialValue:)(&v14, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  sub_1000DA808(a1, v2 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_context) = v4;
  sub_1000D75D0();
  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v11, "addObserver:selector:name:object:", v2, "refreshReplyOptions", NSCurrentLocaleDidChangeNotification, 0);

  sub_1000DA1C0(a1);
  return v2;
}

double sub_1000D75D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double result;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_100783EB0, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_10001BE90((uint64_t)v4, &qword_10081E650);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_100783ED8, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_10081E660;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1008282A0, v19);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_1000D77A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1000D77BC, 0, 0);
}

void sub_1000D77BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[3] + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight;
  v2 = type metadata accessor for ActivitySharingHighlight(0);
  v3 = 0;
  v4 = objc_msgSend(*(id *)(v1 + *(int *)(v2 + 28)), "isCompetitionActive");
  if (*(_BYTE *)(v1 + 8) == 2)
    v3 = *(id *)v1;
  v5 = (id)ASActivitySharingRandomizedLocalizedReplyForReplyContextType(v4, v3, 0, *(_QWORD *)(v1 + *(int *)(v2 + 32)));

  if (v5)
  {
    v0[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String);

    v6 = type metadata accessor for MainActor(0);
    v0[5] = static MainActor.shared.getter();
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    swift_task_switch(sub_1000D78C4, v7, v8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000D78C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  KeyPath = swift_getKeyPath(&unk_1006217F0);
  v4 = swift_getKeyPath(&unk_100621818);
  *(_QWORD *)(v0 + 16) = v1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 16, v2, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000D7974@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id result;
  void *v38;
  id v39;
  CHWorkoutDetailHeartRateTableViewCell *v40;
  CHWorkoutDetailHeartRateTableViewCell *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  Class isa;
  NSString v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  id v61;
  const char *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  NSString v73;
  uint64_t v74;
  uint64_t v75;
  Class v76;
  NSString v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  NSString v95;
  uint64_t v96;
  uint64_t v97;
  Class v98;
  NSString v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  os_log_type_t v111;
  void *v112;
  os_log_type_t v113;
  NSObject *v114;
  uint8_t *v115;
  _QWORD *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  id v125[4];
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;

  v125[2] = a1;
  v125[3] = a2;
  v129 = a3;
  v4 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v4);
  v6 = (char *)v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)v125 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)v125 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)v125 - v14;
  __chkstk_darwin(v16);
  v130 = (uint64_t)v125 - v17;
  v18 = sub_100047110(&qword_10081E640);
  __chkstk_darwin(v18);
  v20 = (char *)v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)v125 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)v125 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)v125 - v28;
  v30 = type metadata accessor for URL(0);
  v127 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v128 = v29;
  v126 = v30;
  v127(v29, 1, 1);
  v31 = v3 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight;
  v32 = *(void **)(v31 + *(int *)(type metadata accessor for ActivitySharingHighlight(0) + 28));
  v33 = objc_msgSend(v32, "UUID");
  if (v33)
  {
    v34 = v33;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v35 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v15, 0, 1, v35);
  }
  else
  {
    v36 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v15, 1, 1, v36);
  }
  sub_100045AD4((uint64_t)v15, v130, (uint64_t *)&unk_10082E690);
  result = objc_msgSend(v32, "contact");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v38 = result;
  v39 = objc_msgSend(result, "primaryDestinationForMessaging");

  v125[1] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v41 = v40;

  v42 = *(void **)v31;
  if (*(_BYTE *)(v31 + 8))
  {
    if (*(_BYTE *)(v31 + 8) == 1)
    {
      v43 = (void *)objc_opt_self(_HKFitnessFriendActivitySnapshot);
      v44 = v42;
      v45 = objc_msgSend(v43, "snapshotWithActivitySummary:", v44);
      v46 = String._bridgeToObjectiveC()();
      sub_10004D954(v130, (uint64_t)v9);
      v47 = type metadata accessor for UUID(0);
      v48 = *(_QWORD *)(v47 - 8);
      isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v9, 1, v47) != 1)
      {
        isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v47);
      }
      v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41, v51, v52, v53, v54, v55, v56, v57);
      v58 = (id)ASRichMessagePayloadForGoalCompletion(v45, v46, isa, v50);

      if (v58)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v58);

        v59 = 0;
        v44 = v58;
      }
      else
      {
        v59 = 1;
      }
      v88 = v129;
      v109 = v126;

      sub_10001BE90(v130, (uint64_t *)&unk_10082E690);
      v89 = (uint64_t)v128;
      sub_10001BE90((uint64_t)v128, &qword_10081E640);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v127)(v23, v59, 1, v109);
      v26 = v23;
    }
    else
    {
      v92 = (void *)objc_opt_self(_HKFitnessFriendWorkout);
      v93 = v42;
      v94 = objc_msgSend(v92, "fitnessFriendWorkoutFromHKWorkout:", v93);
      v95 = String._bridgeToObjectiveC()();
      sub_10004D954(v130, (uint64_t)v6);
      v96 = type metadata accessor for UUID(0);
      v97 = *(_QWORD *)(v96 - 8);
      v98 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v6, 1, v96) != 1)
      {
        v98 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v6, v96);
      }
      v99 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41, v100, v101, v102, v103, v104, v105, v106);
      v107 = (id)ASRichMessagePayloadForWorkout(v94, v95, v98, v99);

      if (v107)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v107);

        v108 = 0;
        v93 = v107;
      }
      else
      {
        v108 = 1;
      }
      v89 = (uint64_t)v128;
      v88 = v129;
      v124 = v126;
      v123 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v127;

      sub_10001BE90(v130, (uint64_t *)&unk_10082E690);
      sub_10001BE90(v89, &qword_10081E640);
      v123(v20, v108, 1, v124);
      v26 = v20;
    }
LABEL_29:
    sub_100045AD4((uint64_t)v26, v89, &qword_10081E640);
    return (id)sub_100045AD4(v89, v88, &qword_10081E640);
  }
  v60 = v42;
  v61 = -[NSObject relevantEarnedInstance](v60, "relevantEarnedInstance");
  if (v61)
  {
    v69 = v61;
    v125[0] = v60;
    v70 = -[NSObject template](v60, "template");
    v71 = (id)ASFriendAchievementFromTemplateAndEarnedInstance();

    v72 = v71;
    v73 = String._bridgeToObjectiveC()();
    sub_10004D954(v130, (uint64_t)v12);
    v74 = type metadata accessor for UUID(0);
    v75 = *(_QWORD *)(v74 - 8);
    v76 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v12, 1, v74) != 1)
    {
      v76 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v12, v74);
    }
    v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41, v78, v79, v80, v81, v82, v83, v84);
    v85 = (id)ASRichMessagePayloadForAchievement(v72, v73, v76, v77);

    if (v85)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v85);

      v86 = 0;
      v87 = v72;
      v72 = v85;
      v89 = (uint64_t)v128;
      v88 = v129;
      v91 = v126;
      v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v127;
    }
    else
    {
      v86 = 1;
      v89 = (uint64_t)v128;
      v88 = v129;
      v91 = v126;
      v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v127;
      v87 = v125[0];
    }

    sub_10001BE90(v130, (uint64_t *)&unk_10082E690);
    sub_10001BE90(v89, &qword_10081E640);
    v90(v26, v86, 1, v91);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease(v41, v62, v63, v64, v65, v66, v67, v68);
  v111 = static os_log_type_t.error.getter(v110);
  v112 = (void *)HKLogActivity;
  v113 = v111;
  if (os_log_type_enabled(HKLogActivity, v111))
  {
    v114 = v60;
    v60 = v112;
    v115 = (uint8_t *)swift_slowAlloc(12, -1);
    v116 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v115 = 138412290;
    v131 = v114;
    v117 = v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v115 + 4);
    *v116 = v42;

    _os_log_impl((void *)&_mh_execute_header, v60, v113, "Failed to get earned instance for achievement: %@", v115, 0xCu);
    v118 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v116, 1, v118);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v115, -1, -1);

  }
  v120 = (uint64_t)v128;
  v119 = v129;
  v122 = v126;
  v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v127;

  sub_10001BE90(v130, (uint64_t *)&unk_10082E690);
  sub_10001BE90(v120, &qword_10081E640);
  return (id)v121(v119, 1, 1, v122);
}

id sub_1000D81D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id result;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for Date(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight;
  v12 = *(void **)(v11 + *(int *)(type metadata accessor for ActivitySharingHighlight(0) + 28));
  v13 = objc_msgSend(v12, "UUID");
  if (!v13)
  {
    result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_6;
  }
  v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if ((_DWORD)result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = objc_msgSend(v12, "contact");
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend(result, "primaryDestinationForMessaging");

    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    Date.init()(v21);
    return (id)Reply.init(message:isFromMe:friend:recipientAddress:timestamp:)(0, 0xE000000000000000, 1, v10, v18, v20, v3);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1000D83E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  const char *v3;
  uint64_t v4;
  CHWorkoutDetailHeartRateTableViewCell *v5;
  NSString v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  NSString v15;
  CHWorkoutDetailHeartRateTableViewCell *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Class isa;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __n128 v32;
  uint64_t v33;

  v1 = sub_100047110(&qword_10081E620);
  inited = swift_initStackObject(v1, &v33);
  *(_OWORD *)(inited + 16) = xmmword_100620BC0;
  strcpy((char *)(inited + 32), "activityType");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight + 8))
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight + 8) == 1)
    {
      sub_10001E724(0, &qword_10081E628, NSString_ptr);
      v3 = "goalCompletion";
      v4 = 14;
    }
    else
    {
      sub_10001E724(0, &qword_10081E628, NSString_ptr);
      v3 = "workout";
      v4 = 7;
    }
  }
  else
  {
    sub_10001E724(0, &qword_10081E628, NSString_ptr);
    v3 = "achievement";
    v4 = 11;
  }
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)(v3, v4, 2);
  *(_QWORD *)(inited + 56) = 0x656372756F73;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_context))
    v5 = (CHWorkoutDetailHeartRateTableViewCell *)0x8000000100687440;
  else
    v5 = (CHWorkoutDetailHeartRateTableViewCell *)0x8000000100687420;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)(inited + 72) = v6;
  v14 = (CHWorkoutDetailHeartRateTableViewCell *)sub_100435740(inited);
  v15 = String._bridgeToObjectiveC()();
  v16 = (CHWorkoutDetailHeartRateTableViewCell *)sub_1002F7258(v14);
  swift_bridgeObjectRelease(v14, v17, v18, v19, v20, v21, v22, v23);
  sub_10001E724(0, (unint64_t *)&qword_10081E630, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16, v25, v26, v27, v28, v29, v30, v31);
  FIActivityAnalyticsSubmissionWithPayload(v15, isa, v32);

}

uint64_t sub_1000D85F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000DA1C0(v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator_activitySharingHighlight);

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp31ActivitySharingReplyCoordinator__replyOptions;
  v2 = sub_100047110(&qword_10081E670);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D8664@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ActivitySharingReplyCoordinator(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D86A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  ObjectType = swift_getObjectType(v2);
  v6 = static os_log_type_t.default.getter(ObjectType);
  v7 = (void *)HKLogActivity;
  v8 = v6;
  if (os_log_type_enabled(HKLogActivity, v6))
  {
    v9 = v7;
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = _typeName(_:qualified:)(ObjectType, 0);
    v14 = v13;
    v22 = sub_10003E8EC(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    v15 = 0xE600000000000000;
    v16 = 0x64656C696166;
    v17 = 0xE700000000000000;
    v18 = 0x6E776F6E6B6E75;
    if (a2 == 1)
    {
      v18 = 1953391987;
      v17 = 0xE400000000000000;
    }
    if (a2 != 2)
    {
      v16 = v18;
      v15 = v17;
    }
    if (a2)
      v19 = v16;
    else
      v19 = 0x656C6C65636E6163;
    if (a2)
      v20 = v15;
    else
      v20 = 0xE900000000000064;
    v22 = sub_10003E8EC(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 14);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "%s Activity sharing reply message sent with result: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + OBJC_IVAR____TtCC10FitnessApp31ActivitySharingReplyCoordinator23MessageComposerDelegate_completion))(a2);
}

id sub_1000D8950()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingReplyCoordinator.MessageComposerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of DivingDataCalculator.delegate()
{
  return 0;
}

uint64_t variable initialization expression of DiveMetrics.diveCount()
{
  return 11565;
}

uint64_t variable initialization expression of DiveMetrics.depthUnit()
{
  return 0;
}

uint64_t variable initialization expression of DiveMetrics.waterTemperatureExtrema()
{
  return 0;
}

uint64_t variable initialization expression of DiveMetrics.rawTemperatureExtrema()
{
  return 0;
}

double variable initialization expression of DivingDataCalculator._metrics@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 11565;
  *(_QWORD *)(a1 + 32) = 0xE200000000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_QWORD *)(a1 + 56) = 11565;
  *(_QWORD *)(a1 + 64) = 0xE200000000000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xE000000000000000;
  *(_QWORD *)(a1 + 88) = 11565;
  *(_QWORD *)(a1 + 96) = 0xE200000000000000;
  *(_QWORD *)(a1 + 104) = 11565;
  *(_QWORD *)(a1 + 112) = 0xE200000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 1;
  return result;
}

uint64_t variable initialization expression of DivingDataCalculator._chartWidth()
{
  return 0;
}

void *variable initialization expression of DivingDataCalculator.rawDepthSamples()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000D8A48()
{
  return type metadata accessor for ActivitySharingReplyCoordinator(0);
}

uint64_t type metadata accessor for ActivitySharingReplyCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10081E148;
  if (!qword_10081E148)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingReplyCoordinator);
  return result;
}

void sub_1000D8A8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for ActivitySharingHighlight(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100620C10;
    v6[2] = &unk_100620C28;
    sub_1000D8B28(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

void sub_1000D8B28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081E158)
  {
    v2 = sub_100007050((uint64_t *)&unk_10081E160);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081E158);
  }
}

uint64_t type metadata accessor for ActivitySharingReplyCoordinator.MessageComposerDelegate()
{
  return objc_opt_self(_TtCC10FitnessApp31ActivitySharingReplyCoordinator23MessageComposerDelegate);
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E430, (uint64_t)&unk_1007838B8);
}

void type metadata accessor for FCCMoveModeNotificationType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E438, (uint64_t)&unk_1007838D8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E450, (uint64_t)&unk_1007839F0);
}

void type metadata accessor for _HKWorkoutGoalType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E458, (uint64_t)&unk_100783A18);
}

void type metadata accessor for HKMCPregnancyState(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E460, (uint64_t)&unk_100783A38);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E468, (uint64_t)&unk_100783A58);
}

void type metadata accessor for FIExperienceType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E470, (uint64_t)&unk_100783A88);
}

void type metadata accessor for HKActivityMoveMode(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E478, (uint64_t)&unk_100783AA8);
}

void type metadata accessor for FIUIDistanceUnit(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E480, (uint64_t)&unk_100783AC8);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E488, (uint64_t)&unk_100783AE8);
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E490, (uint64_t)&unk_100783B10);
}

void type metadata accessor for FIUISwimmingPaceFormat(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E498, (uint64_t)&unk_100783B38);
}

__n128 initializeWithTake for AwardedWorkoutIntent(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for VO2MaxRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VO2MaxRange(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4A0, (uint64_t)&unk_100783BB0);
}

void type metadata accessor for FIWorkoutSplitMeasurementSystem(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4A8, (uint64_t)&unk_100783BE0);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4B0, (uint64_t)&unk_100783C58);
}

void type metadata accessor for HKActivityGoalType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4B8, (uint64_t)&unk_100783C80);
}

void type metadata accessor for CHASActivitySetupPresentationContext(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4C0, (uint64_t)&unk_100783CA0);
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4C8, (uint64_t)&unk_100783D18);
}

void type metadata accessor for MKCoordinateRegion(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4D0, (uint64_t)&unk_100783D98);
}

void type metadata accessor for MessageComposeResult(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4D8, (uint64_t)&unk_100783DC0);
}

uint64_t getEnumTagSinglePayload for ActivitySharingReplyMenuContext(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingReplyMenuContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D8E64 + 4 * byte_100620BD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D8E98 + 4 * byte_100620BD0[v4]))();
}

uint64_t sub_1000D8E98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D8EA8);
  return result;
}

uint64_t sub_1000D8EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D8EBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D8EC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8EC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000D8ED8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingReplyMenuContext()
{
  return &type metadata for ActivitySharingReplyMenuContext;
}

void type metadata accessor for HKWorkoutMetricType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E4E0, (uint64_t)&unk_100783E70);
}

uint64_t sub_1000D8F08()
{
  return sub_1000083D8(&qword_10081E4F0, (uint64_t (*)(uint64_t))type metadata accessor for ASFriendListDisplayMode, (uint64_t)&unk_100620FA8);
}

uint64_t sub_1000D8F34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006217F0);
  v5 = swift_getKeyPath(&unk_100621818);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1000D8FB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006217F0);
  v5 = swift_getKeyPath(&unk_100621818);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

void sub_1000D9028(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000D9030(uint64_t a1, uint64_t a2)
{
  return sub_1000D9ECC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSNumber sub_1000D904C()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_1000D9054(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1000D90A4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_1000D90F8(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1000D911C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

NSNumber sub_1000D9128()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1000D9130(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1000D9180(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1000D91D4(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

_QWORD *sub_1000D91F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000D920C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1000D9220@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000D924C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000D9270(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000D9284@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000D9298(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000D92AC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000D92C0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000D92D4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000D92E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000D92FC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

NSNumber sub_1000D9318()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_1000D9320(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1000D9370(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_1000D93C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

BOOL sub_1000D93E8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000D9418@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000D942C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000D9440(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

void sub_1000D9454()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000D947C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000D94F0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000D956C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

BOOL sub_1000D95AC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_1000D95C0(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000D95C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10062260C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

Swift::Int sub_1000D9614()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000D9658(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000D9698@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100153DBC();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unint64_t sub_1000D96D8()
{
  unint64_t result;

  result = qword_10081E4F8;
  if (!qword_10081E4F8)
  {
    result = swift_getWitnessTable(&unk_1006210D0, &type metadata for ActivitySharingReplyMenuContext);
    atomic_store(result, (unint64_t *)&qword_10081E4F8);
  }
  return result;
}

_DWORD *sub_1000D971C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000D9728()
{
  return sub_1000083D8(&qword_10081E500, (uint64_t (*)(uint64_t))type metadata accessor for FIWorkoutSplitMeasurementSystem, (uint64_t)&unk_100621228);
}

_QWORD *sub_1000D9754@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000D9764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8((unint64_t *)&qword_10081E850, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1006226C0);
  v3 = sub_1000083D8(&qword_10081E858, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100621BB4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_DWORD *sub_1000D97E8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_1000D97F8@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_1000D9804(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8(&qword_10081E810, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1006220A8);
  v3 = sub_1000083D8(&qword_10081E818, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100622048);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_1000D9898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8((unint64_t *)&qword_10081E830, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10062267C);
  v3 = sub_1000083D8(&qword_10081E838, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100621E20);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000D991C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8(&qword_10081E800, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_100622424);
  v3 = sub_1000083D8(&qword_10081E808, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1006223C4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_1000D99A0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_1000D99B0@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1000D99BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_1000083D8(&qword_10081E7E8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10062257C);
  v3 = sub_1000083D8(&qword_10081E7F0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10062251C);
  v4 = sub_1000DA758();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_1000D9A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8(&qword_10081E5B0, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100621364);
  v3 = sub_1000083D8(&qword_10081E5B8, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100621304);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_1000D9AF0()
{
  return sub_1000083D8(&qword_10081E508, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1006212C8);
}

uint64_t sub_1000D9B1C()
{
  return sub_1000083D8(&qword_10081E510, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_10062129C);
}

uint64_t sub_1000D9B48@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D9B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8(&qword_10081E5A0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1006214AC);
  v3 = sub_1000083D8(&qword_10081E5A8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100621454);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000D9BF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8((unint64_t *)&qword_10081E820, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100622638);
  v3 = sub_1000083D8(&qword_10081E828, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100621F34);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000D9C78@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000D9CBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000083D8(&qword_10081E840, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_100621D28);
  v3 = sub_1000083D8(&qword_10081E848, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_100621CC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000D9D40(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10062260C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000D9D7C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10062260C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000D9DC4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_10062260C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1000D9E1C()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_1000D9E24()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000D9E54(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

uint64_t sub_1000D9E68()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_1000D9E70()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000D9EA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_1000D9EB0()
{
  _QWORD *v0;

  return Int.hashValue.getter(*v0);
}

uint64_t sub_1000D9EB8(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

uint64_t sub_1000D9EC0(uint64_t a1, uint64_t a2)
{
  return sub_1000D9ECC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000D9ECC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000D9F08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

BOOL sub_1000D9F48(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_1000D9F5C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000D9F70()
{
  return sub_1000083D8(&qword_10081E518, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100621338);
}

uint64_t sub_1000D9F9C()
{
  return sub_1000083D8(&qword_10081E520, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10062141C);
}

uint64_t sub_1000D9FC8()
{
  return sub_1000083D8(&qword_10081E528, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1006213F4);
}

uint64_t sub_1000D9FF4()
{
  return sub_1000083D8(&qword_10081E530, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100621484);
}

uint64_t sub_1000DA020()
{
  return sub_1000083D8(&qword_10081E538, (uint64_t (*)(uint64_t))type metadata accessor for HKWorkoutActivityType, (uint64_t)&unk_100621750);
}

void *sub_1000DA04C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000DA058()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000DA084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10081E65C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  v3[3] = v2;
  return swift_task_switch(sub_1000D77BC, 0, 0);
}

uint64_t sub_1000DA0E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000DA12C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DA150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10082829C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000DA0E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100828298 + dword_100828298))(a1, v4);
}

uint64_t sub_1000DA1C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivitySharingHighlight(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HKStatisticsOptions(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E688, (uint64_t)&unk_100783F50);
}

void type metadata accessor for AAUIBadgeImageFactoryStackType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E690, (uint64_t)&unk_100783F78);
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E698, (uint64_t)&unk_100783FA0);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6A0, (uint64_t)&unk_100783FD0);
}

void type metadata accessor for AAUIBadgeImageFactoryStackAlignment(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6A8, (uint64_t)&unk_100783FF8);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6B0, (uint64_t)&unk_100784020);
}

void type metadata accessor for MKMapRect(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6C0, (uint64_t)&unk_1007840D0);
}

void type metadata accessor for MKMapPoint(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6C8, (uint64_t)&unk_100784150);
}

uint64_t getEnumTagSinglePayload for TrendsCoachingAverageInformation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6D8, (uint64_t)&unk_100784200);
}

void type metadata accessor for FIUIDistanceType(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E6F8, (uint64_t)&unk_1007842A0);
}

void type metadata accessor for HKBiologicalSex(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E700, (uint64_t)&unk_1007842C0);
}

void type metadata accessor for MKCoordinateSpan(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E708, (uint64_t)&unk_100784338);
}

uint64_t sub_1000DA30C()
{
  return sub_1000083D8(&qword_10081E710, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100621B78);
}

uint64_t sub_1000DA338()
{
  return sub_1000083D8(&qword_10081E718, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100621B4C);
}

uint64_t sub_1000DA364()
{
  return sub_1000083D8(&qword_10081E720, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_100621C8C);
}

uint64_t sub_1000DA390()
{
  return sub_1000083D8(&qword_10081E728, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_100621C60);
}

uint64_t sub_1000DA3BC()
{
  return sub_1000083D8(&qword_10081E730, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_100621CFC);
}

uint64_t sub_1000DA3E8()
{
  return sub_1000083D8(&qword_10081E738, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100621DE4);
}

uint64_t sub_1000DA414()
{
  return sub_1000083D8(&qword_10081E740, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100621DB8);
}

uint64_t sub_1000DA440()
{
  return sub_1000083D8(&qword_10081E748, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100621EF8);
}

uint64_t sub_1000DA46C()
{
  return sub_1000083D8(&qword_10081E750, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100621ECC);
}

uint64_t sub_1000DA498()
{
  return sub_1000083D8(&qword_10081E758, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_10062200C);
}

uint64_t sub_1000DA4C4()
{
  return sub_1000083D8(&qword_10081E760, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100621FE0);
}

uint64_t sub_1000DA4F0()
{
  return sub_1000083D8(&qword_10081E768, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_10062207C);
}

uint64_t sub_1000DA51C()
{
  return sub_1000083D8(&qword_10081E770, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_100622148);
}

uint64_t sub_1000DA548()
{
  return sub_1000083D8(&qword_10081E778, (uint64_t (*)(uint64_t))type metadata accessor for HKStatisticsOptions, (uint64_t)&unk_1006221EC);
}

uint64_t sub_1000DA574()
{
  return sub_1000083D8(&qword_10081E780, (uint64_t (*)(uint64_t))type metadata accessor for HKStatisticsOptions, (uint64_t)&unk_1006221B8);
}

uint64_t sub_1000DA5A0()
{
  return sub_1000083D8(&qword_10081E788, (uint64_t (*)(uint64_t))type metadata accessor for HKStatisticsOptions, (uint64_t)&unk_100622218);
}

uint64_t sub_1000DA5CC()
{
  return sub_1000083D8(&qword_10081E790, (uint64_t (*)(uint64_t))type metadata accessor for HKStatisticsOptions, (uint64_t)&unk_100622254);
}

uint64_t sub_1000DA5F8()
{
  return sub_1000083D8(&qword_10081E798, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_100622388);
}

uint64_t sub_1000DA624()
{
  return sub_1000083D8(&qword_10081E7A0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10062235C);
}

uint64_t sub_1000DA650()
{
  return sub_1000083D8(&qword_10081E7A8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1006223F8);
}

uint64_t sub_1000DA67C()
{
  return sub_1000083D8(&qword_10081E7B0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1006224E0);
}

uint64_t sub_1000DA6A8()
{
  return sub_1000083D8(&qword_10081E7B8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1006224B4);
}

uint64_t sub_1000DA6D4()
{
  return sub_1000083D8(&qword_10081E7C0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100622550);
}

uint64_t sub_1000DA700()
{
  return sub_1000083D8(&qword_10081E7C8, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_100622174);
}

uint64_t sub_1000DA72C()
{
  return sub_1000083D8(&qword_10081E7D0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100621F68);
}

unint64_t sub_1000DA758()
{
  unint64_t result;

  result = qword_10081E7F8;
  if (!qword_10081E7F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10081E7F8);
  }
  return result;
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E860, (uint64_t)&unk_100784360);
}

void type metadata accessor for MKMapSize(uint64_t a1)
{
  sub_1000DA7C4(a1, &qword_10081E868, (uint64_t)&unk_1007843E0);
}

void sub_1000DA7C4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000DA808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivitySharingHighlight(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_1000DA890(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000DA8A8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000DA8EC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000DA914(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000DA954()
{
  return sub_1000DA97C((uint64_t)&unk_100622960, (uint64_t)&unk_100622988);
}

uint64_t sub_1000DA968()
{
  return sub_1000DA97C((uint64_t)&unk_100622918, (uint64_t)&unk_100622940);
}

uint64_t sub_1000DA97C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000DA9E4()
{
  return sub_1000DABD8((uint64_t)&unk_100622A38, (uint64_t)&unk_100622A60);
}

double sub_1000DA9F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100622A80);
  v2 = swift_getKeyPath(&unk_100622AA8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

double sub_1000DAA6C(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  double v15;
  double v16;

  KeyPath = swift_getKeyPath(&unk_100622A80);
  v10 = swift_getKeyPath(&unk_100622AA8);
  *(double *)&v14 = a1;
  *((double *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain(v4);
  static Published.subscript.setter(&v14, v4, KeyPath, v10);
  v11 = swift_getKeyPath(&unk_100622A80);
  v12 = swift_getKeyPath(&unk_100622AA8);
  static Published.subscript.getter(&v14, v4, v11, v12);
  swift_release(v11);
  swift_release(v12);
  result = *(double *)&v14;
  *(_OWORD *)(v4 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_issueLocation) = v14;
  return result;
}

uint64_t sub_1000DAB54()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1006229F0);
  v2 = swift_getKeyPath(&unk_100622A18);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000DABC4()
{
  return sub_1000DABD8((uint64_t)&unk_1006229A8, (uint64_t)&unk_1006229D0);
}

uint64_t sub_1000DABD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000DAC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  unint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD v21[2];

  v1 = v0;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_trackId))
  {
    KeyPath = swift_getKeyPath(&unk_100622960);
    v3 = swift_getKeyPath(&unk_100622988);
    static Published.subscript.getter(v21, v1, KeyPath, v3);
    swift_release(KeyPath);
    swift_release(v3);
    if (LOBYTE(v21[0]) == 2 || (v21[0] & 1) != 0)
    {
      v4 = swift_getKeyPath(&unk_100622960);
      v5 = &unk_100622988;
      goto LABEL_9;
    }
    return 1;
  }
  v6 = swift_getKeyPath(&unk_100622918);
  v7 = swift_getKeyPath(&unk_100622940);
  static Published.subscript.getter(v21, v1, v6, v7);
  swift_release(v6);
  swift_release(v7);
  if (LOBYTE(v21[0]) != 2 && (v21[0] & 1) == 0)
  {
    v8 = swift_getKeyPath(&unk_100622A38);
    v9 = swift_getKeyPath(&unk_100622A60);
    static Published.subscript.getter(v21, v1, v8, v9);
    swift_release(v8);
    swift_release(v9);
    v10 = (CHWorkoutDetailHeartRateTableViewCell *)v21[1];
    v11 = sub_100038CA0();
    LOBYTE(v8) = StringProtocol.isEmptyOrWhiteSpace.getter(&type metadata for String, v11);
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
    if ((v8 & 1) == 0)
      return 1;
  }
  v4 = swift_getKeyPath(&unk_100622918);
  v5 = &unk_100622940;
LABEL_9:
  v19 = swift_getKeyPath(v5);
  static Published.subscript.getter(v21, v1, v4, v19);
  swift_release(v4);
  swift_release(v19);
  if (LOBYTE(v21[0]) == 2)
    return 0;
  else
    return v21[0] & 1;
}

uint64_t sub_1000DAE10(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  CLLocationDegrees latitude;
  CLLocationDegrees longitude;
  CLLocationDegrees latitudeDelta;
  CLLocationDegrees longitudeDelta;
  uint64_t v42;
  void *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  CLLocationDegrees v54;
  CLLocationDegrees v55;
  _BYTE v56[24];
  CLLocationCoordinate2D v57;
  MKCoordinateRegion v58;

  v51 = a1;
  v6 = sub_100047110(&qword_10081EC78);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10081EC80);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_10081EC88);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_10081EC90);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v19);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_trackId) = 0;
  v20 = v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__trackWorkoutIssueType;
  LOBYTE(v52) = 2;
  v21 = sub_100047110(&qword_10081E9A0);
  Published.init(initialValue:)(&v52, v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v20, v18, v15);
  v22 = v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__nonTrackWorkoutIssueType;
  LOBYTE(v52) = 2;
  v23 = sub_100047110(&qword_10081E9B0);
  Published.init(initialValue:)(&v52, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v22, v14, v11);
  v24 = v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__trackName;
  v52 = 0;
  v53 = 0xE000000000000000;
  Published.init(initialValue:)(&v52, &type metadata for String);
  v25 = v47;
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
  v26(v24, v10, v47);
  v27 = v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__laneCount;
  v52 = 8;
  v28 = v48;
  Published.init(initialValue:)(&v52, &type metadata for Int);
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v27, v28, v50);
  v29 = v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__comment;
  v52 = 0;
  v53 = 0xE000000000000000;
  Published.init(initialValue:)(&v52, &type metadata for String);
  v26(v29, v10, v25);
  v30 = (uint64_t *)(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_placeholderComment);
  v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v31, "localizedStringForKey:value:table:", v32, 0, 0);

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *v30 = v34;
  v30[1] = v36;
  v37 = (double *)(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_issueLocation);
  *v37 = a2;
  v37[1] = a3;
  v57.latitude = a2;
  v57.longitude = a3;
  v58 = MKCoordinateRegionMakeWithDistance(v57, 500.0, 500.0);
  latitude = v58.center.latitude;
  longitude = v58.center.longitude;
  latitudeDelta = v58.span.latitudeDelta;
  longitudeDelta = v58.span.longitudeDelta;
  swift_beginAccess(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__issueRegion, v56, 33, 0);
  v52 = *(_QWORD *)&latitude;
  v53 = *(_QWORD *)&longitude;
  v54 = latitudeDelta;
  v55 = longitudeDelta;
  type metadata accessor for MKCoordinateRegion(0);
  Published.init(initialValue:)(&v52, v42);
  swift_endAccess(v56);
  v43 = *(void **)(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_trackId);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_trackId) = v51;

  return v3;
}

uint64_t sub_1000DB1EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_100622960);
  v2 = swift_getKeyPath(&unk_100622988);
  static Published.subscript.getter((uint64_t *)((char *)&v11 + 3), v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  if (BYTE3(v11) != 2 && (v11 & 0x1000000) == 0)
    return 4;
  v4 = swift_getKeyPath(&unk_100622960);
  v5 = swift_getKeyPath(&unk_100622988);
  static Published.subscript.getter((uint64_t *)((char *)&v11 + 2), v0, v4, v5);
  swift_release(v4);
  swift_release(v5);
  if ((v11 & 0x10000) != 0)
    return 5;
  v6 = swift_getKeyPath(&unk_100622918);
  v7 = swift_getKeyPath(&unk_100622940);
  static Published.subscript.getter((uint64_t *)((char *)&v11 + 1), v0, v6, v7);
  swift_release(v6);
  swift_release(v7);
  if (BYTE1(v11) != 2 && (v11 & 0x100) == 0)
    return 1;
  v9 = swift_getKeyPath(&unk_100622918);
  v10 = swift_getKeyPath(&unk_100622940);
  static Published.subscript.getter(&v11, v0, v9, v10);
  swift_release(v9);
  swift_release(v10);
  return 2 * (v11 & 1);
}

void sub_1000DB388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void **v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;

  v1 = v0;
  v2 = sub_1000DB1EC();
  if ((v3 & 1) == 0)
  {
    v4 = v2;
    if ((sub_1000DAC40() & 1) != 0)
    {
      v5 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_issueLocation);
      v6 = *(double *)(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_issueLocation + 8);
      v7 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_trackId);
      if (v7)
      {
        v39 = (void **)objc_msgSend(v7, "longLongValue");
        LOBYTE(v40) = 0;
        v8 = sub_100047110(&qword_10081EC98);
        v9 = Optional.description.getter(v8);
        v11 = v10;
      }
      else
      {
        v9 = 0;
        v11 = 0;
      }
      KeyPath = swift_getKeyPath(&unk_100622918);
      v13 = swift_getKeyPath(&unk_100622940);
      static Published.subscript.getter(&v39, v1, KeyPath, v13);
      swift_release(KeyPath);
      swift_release(v13);
      v14 = 0;
      v15 = 0;
      if (v39 != 2 && (v39 & 1) == 0)
      {
        v16 = swift_getKeyPath(&unk_100622A38);
        v17 = swift_getKeyPath(&unk_100622A60);
        static Published.subscript.getter(&v39, v1, v16, v17);
        swift_release(v16);
        swift_release(v17);
        v14 = (uint64_t)v39;
        v15 = v40;
      }
      v18 = swift_getKeyPath(&unk_100622960);
      v19 = swift_getKeyPath(&unk_100622988);
      static Published.subscript.getter(&v39, v1, v18, v19);
      swift_release(v18);
      swift_release(v19);
      v20 = 0;
      if (v39 != 2 && (v39 & 1) == 0)
      {
        v21 = swift_getKeyPath(&unk_1006229F0);
        v22 = swift_getKeyPath(&unk_100622A18);
        static Published.subscript.getter(&v39, v1, v21, v22);
        swift_release(v21);
        swift_release(v22);
        v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v39);
      }
      v23 = swift_getKeyPath(&unk_100622960);
      v24 = swift_getKeyPath(&unk_100622988);
      static Published.subscript.getter(&v39, v1, v23, v24);
      swift_release(v23);
      swift_release(v24);
      if (v39 == 2
        && (v25 = swift_getKeyPath(&unk_100622918),
            v26 = swift_getKeyPath(&unk_100622940),
            static Published.subscript.getter(&v39, v1, v25, v26),
            swift_release(v25),
            swift_release(v26),
            v39 == 2))
      {
        v27 = 0;
        v28 = 0;
      }
      else
      {
        v29 = swift_getKeyPath(&unk_1006229A8);
        v30 = swift_getKeyPath(&unk_1006229D0);
        static Published.subscript.getter(&v39, v1, v29, v30);
        swift_release(v29);
        swift_release(v30);
        v27 = (uint64_t)v39;
        v28 = v40;
      }
      v31 = objc_allocWithZone((Class)MKFitnessRAPReport);
      v32 = sub_1000DC404(v4, v5, v6, v9, v11, v14, v15, v20, v27, v28);
      v33 = objc_msgSend((id)objc_opt_self(MKMapService), "sharedService");
      if (v33)
      {
        v34 = v33;
        v35 = objc_msgSend(v33, "feedbackTicketForFitnessRAPReport:", v32);
        if (v35)
        {
          v36 = v35;
          v43 = sub_1000DB7F8;
          v44 = 0;
          v39 = _NSConcreteStackBlock;
          v40 = 1107296256;
          v41 = sub_1000DBA98;
          v42 = &unk_1007846E0;
          v37 = _Block_copy(&v39);
          v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ASFriendListDisplayMode.id.getter;
          v44 = 0;
          v39 = _NSConcreteStackBlock;
          v40 = 1107296256;
          v41 = sub_1003B91BC;
          v42 = &unk_100784708;
          v38 = _Block_copy(&v39);
          objc_msgSend((id)swift_unknownObjectRetain(v36), "submitWithHandler:networkActivity:", v37, v38);

          swift_unknownObjectRelease_n(v36, 2);
          _Block_release(v38);
          _Block_release(v37);
        }
        else
        {

        }
      }
      else
      {

      }
    }
  }
}

uint64_t sub_1000DB7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  CHWorkoutDetailHeartRateTableViewCell *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  char v41[8];
  uint64_t v42;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v37 - v11;
  if (a4)
  {
    swift_errorRetain(a4);
    static WOLog.trackRunning.getter(v13);
    swift_errorRetain(a4);
    v14 = swift_errorRetain(a4);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v38 = v5;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v42 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_getErrorValue(a4, v41, v40);
      v20 = Error.errorDescription.getter(v40[1], v40[2]);
      v22 = (CHWorkoutDetailHeartRateTableViewCell *)v21;
      v39 = sub_10003E8EC(v20, v21, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v18 + 4);
      swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received an error from MapKit while submitting report: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a4);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v38);
    }
    swift_errorRelease(a4);
    swift_errorRelease(a4);
    swift_errorRelease(a4);

    v35 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v36 = v8;
  }
  else
  {
    v31 = static WOLog.trackRunning.getter(v10);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfully submitted report to MapKit", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v35 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v36 = v12;
  }
  return v35(v36, v5);
}

double sub_1000DBA98(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v5;
  uint64_t v7;
  void (*v8)(void *, void *, unint64_t, void *);
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  double result;

  v5 = a3;
  v8 = *(void (**)(void *, void *, unint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    swift_retain(v7);
    v9 = a2;
    v10 = v5;
    v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v12 = v11;

  }
  else
  {
    swift_retain(v7);
    v13 = a2;
    v12 = 0xF000000000000000;
  }
  v14 = a4;
  v8(a2, v5, v12, a4);

  sub_1000DC774((uint64_t)v5, v12);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1000DBB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__trackWorkoutIssueType;
  v4 = sub_100047110(&qword_10081EC90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__nonTrackWorkoutIssueType;
  v6 = sub_100047110(&qword_10081EC88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__trackName;
  v8 = sub_100047110(&qword_10081EC80);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__issueRegion;
  v11 = sub_100047110(&qword_10081ECA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__laneCount;
  v13 = sub_100047110(&qword_10081EC78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v9(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue__comment, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_placeholderComment + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000DBCB8()
{
  return type metadata accessor for TrackIssue(0);
}

uint64_t type metadata accessor for TrackIssue(uint64_t a1)
{
  uint64_t result;

  result = qword_10081E988;
  if (!qword_10081E988)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackIssue);
  return result;
}

void sub_1000DBCFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[10];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v15[0] = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = "\b";
    sub_1000DBE4C(319, &qword_10081E998, &qword_10081E9A0);
    if (v5 <= 0x3F)
    {
      v15[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000DBE4C(319, &qword_10081E9A8, &qword_10081E9B0);
      if (v7 <= 0x3F)
      {
        v15[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100038D3C(319, &qword_10081E9B8, (uint64_t)&type metadata for String);
        if (v9 <= 0x3F)
        {
          v10 = *(_QWORD *)(v8 - 8) + 64;
          v15[4] = v10;
          sub_1000DBE98(319);
          if (v12 <= 0x3F)
          {
            v15[5] = *(_QWORD *)(v11 - 8) + 64;
            v15[6] = &unk_100622768;
            sub_100038D3C(319, (unint64_t *)&qword_10081E9C8, (uint64_t)&type metadata for Int);
            if (v14 <= 0x3F)
            {
              v15[7] = *(_QWORD *)(v13 - 8) + 64;
              v15[8] = v10;
              v15[9] = &unk_100622780;
              swift_updateClassMetadata2(a1, 256, 10, v15, a1 + 80);
            }
          }
        }
      }
    }
  }
}

void sub_1000DBE4C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100007050(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1000DBE98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081E9C0)
  {
    type metadata accessor for MKCoordinateRegion(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081E9C0);
  }
}

ValueMetadata *type metadata accessor for TrackIssue.NonTrackWorkoutIssue()
{
  return &type metadata for TrackIssue.NonTrackWorkoutIssue;
}

uint64_t _s10FitnessApp10TrackIssueC17TrackWorkoutIssueOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DBF50 + 4 * byte_100622735[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DBF84 + 4 * byte_100622730[v4]))();
}

uint64_t sub_1000DBF84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DBF8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DBF94);
  return result;
}

uint64_t sub_1000DBFA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DBFA8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000DBFAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DBFB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrackIssue.TrackWorkoutIssue()
{
  return &type metadata for TrackIssue.TrackWorkoutIssue;
}

unint64_t sub_1000DBFD4()
{
  unint64_t result;

  result = qword_10081EC68;
  if (!qword_10081EC68)
  {
    result = swift_getWitnessTable(&unk_100622814, &type metadata for TrackIssue.TrackWorkoutIssue);
    atomic_store(result, (unint64_t *)&qword_10081EC68);
  }
  return result;
}

unint64_t sub_1000DC01C()
{
  unint64_t result;

  result = qword_10081EC70;
  if (!qword_10081EC70)
  {
    result = swift_getWitnessTable(&unk_10062287C, &type metadata for TrackIssue.NonTrackWorkoutIssue);
    atomic_store(result, (unint64_t *)&qword_10081EC70);
  }
  return result;
}

uint64_t sub_1000DC060@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC10FitnessApp10TrackIssue_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000DC0A8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TrackIssue(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000DC0E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100828330;
  if (!qword_100828330)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100828330);
  }
  return result;
}

double sub_1000DC130@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100622A80);
  v5 = swift_getKeyPath(&unk_100622AA8);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)v8;
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

double sub_1000DC1AC(double *a1)
{
  return sub_1000DAA6C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000DC1D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000DC2FC(a1, (uint64_t)&unk_100622A38, (uint64_t)&unk_100622A60, a2);
}

uint64_t sub_1000DC1E8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC388(a1, a2, a3, a4, (uint64_t)&unk_100622A38, (uint64_t)&unk_100622A60);
}

uint64_t sub_1000DC1FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006229F0);
  v5 = swift_getKeyPath(&unk_100622A18);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000DC278(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006229F0);
  v5 = swift_getKeyPath(&unk_100622A18);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000DC2E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000DC2FC(a1, (uint64_t)&unk_1006229A8, (uint64_t)&unk_1006229D0, a2);
}

uint64_t sub_1000DC2FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(v11, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  v10 = v11[1];
  *a4 = v11[0];
  a4[1] = v10;
  return result;
}

uint64_t sub_1000DC374(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC388(a1, a2, a3, a4, (uint64_t)&unk_1006229A8, (uint64_t)&unk_1006229D0);
}

uint64_t sub_1000DC388(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v13[2];

  v8 = *a1;
  v7 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11 = swift_getKeyPath(a6);
  v13[0] = v8;
  v13[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  return static Published.subscript.setter(v13, v9, KeyPath, v11);
}

id sub_1000DC404(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  NSString v18;
  NSString v19;
  NSString v20;
  id v21;

  if (a5)
  {
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
    if (a7)
      goto LABEL_3;
LABEL_6:
    v19 = 0;
    if (a10)
      goto LABEL_4;
LABEL_7:
    v20 = 0;
    goto LABEL_8;
  }
  v18 = 0;
  if (!a7)
    goto LABEL_6;
LABEL_3:
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!a10)
    goto LABEL_7;
LABEL_4:
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
LABEL_8:
  v21 = objc_msgSend(v10, "initForRunningTrackIssue:trackCoordinate:trackFeatureID:nameOfTrack:numberOfLanes:comment:", a1, v18, v19, a8, v20, a2, a3);

  return v21;
}

uint64_t sub_1000DC518@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100622960, (uint64_t)&unk_100622988, a2);
}

uint64_t sub_1000DC52C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100622960, (uint64_t)&unk_100622988);
}

uint64_t sub_1000DC540@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100622918, (uint64_t)&unk_100622940, a2);
}

uint64_t sub_1000DC554@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1000DC5CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100622918, (uint64_t)&unk_100622940, a2);
}

uint64_t sub_1000DC5F0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100622918, (uint64_t)&unk_100622940);
}

uint64_t sub_1000DC604(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_1000DC670(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100622918, (uint64_t)&unk_100622940);
}

uint64_t sub_1000DC694@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100622960, (uint64_t)&unk_100622988, a2);
}

uint64_t sub_1000DC6B8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100622960, (uint64_t)&unk_100622988);
}

uint64_t sub_1000DC6DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000DC2FC(a1, (uint64_t)&unk_1006229A8, (uint64_t)&unk_1006229D0, a2);
}

uint64_t sub_1000DC700(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC388(a1, a2, a3, a4, (uint64_t)&unk_1006229A8, (uint64_t)&unk_1006229D0);
}

uint64_t sub_1000DC72C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000DC2FC(a1, (uint64_t)&unk_100622A38, (uint64_t)&unk_100622A60, a2);
}

uint64_t sub_1000DC750(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC388(a1, a2, a3, a4, (uint64_t)&unk_100622A38, (uint64_t)&unk_100622A60);
}

uint64_t sub_1000DC774(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10004D9E4(result, a2);
  return result;
}

double sub_1000DC78C(double *a1)
{
  return sub_1000DAA6C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000DC7CC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v18[2];
  _BYTE v19[24];

  v4 = type metadata accessor for ScrollViewProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10081ED80);
  __chkstk_darwin(v8);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + OBJC_IVAR____TtC10FitnessApp22ScrollToTopCoordinator_scrollViewProxy;
  swift_beginAccess(v11, v19, 0, 0);
  sub_1000DC98C(v11, (uint64_t)v10);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v12)
  {
    result = sub_1000DC9D4((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    v14 = sub_1000DC9D4((uint64_t)v10);
    v18[0] = 0xD000000000000011;
    v18[1] = 0x8000000100688270;
    v15 = static UnitPoint.top.getter(v14);
    ScrollViewProxy.scrollTo<A>(_:anchor:)(v18, *(_QWORD *)&v15, v16, 0, &type metadata for String, &protocol witness table for String);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v12 != 0;
  return result;
}

uint64_t sub_1000DC954()
{
  uint64_t v0;

  sub_1000DC9D4(v0 + OBJC_IVAR____TtC10FitnessApp22ScrollToTopCoordinator_scrollViewProxy);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000DC984()
{
  return type metadata accessor for ScrollToTopCoordinator(0);
}

uint64_t sub_1000DC98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081ED80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DC9D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081ED80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000DCA14()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CHWorkoutDetailHeartRateTableViewCell *v21;
  id v22;
  void *v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;

  v1 = v0;
  v2 = sub_100047110((uint64_t *)&unk_100827440);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - v9;
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v32 = (char *)&v31 - v13;
  v14 = objc_msgSend(v1, "downhillRunEvents", v12);
  if (!v14)
    return;
  v15 = v14;
  v16 = sub_1000DCD38();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  v18 = v17;
  v31 = v17;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v29 = v31;
    else
      v29 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v30 = v29;
    v18 = v31;
    v19 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v19)
      goto LABEL_4;
LABEL_22:
    swift_bridgeObjectRelease_n(v18, 2);
    return;
  }
  v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v17);
  if (!v19)
    goto LABEL_22;
LABEL_4:
  if (v19 >= 1)
  {
    v20 = 0;
    v33 = v18 & 0xC000000000000001;
    v21 = &_swiftEmptyArrayStorage;
    do
    {
      if (v33)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      else
        v22 = *(id *)(v18 + 8 * v20 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, "dateInterval", v31);
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v25(v4, v10, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_1000DCD74((uint64_t)v4);
      }
      else
      {
        v26 = v32;
        v25(v32, v4, v5);
        v25(v34, v26, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10013F868(0, *(_QWORD *)v21->cellPadding + 1, 1, (unint64_t)v21);
        v28 = *(_QWORD *)v21->cellPadding;
        v27 = *(_QWORD *)v21->cellInset;
        if (v28 >= v27 >> 1)
          v21 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10013F868(v27 > 1, v28 + 1, 1, (unint64_t)v21);
        *(_QWORD *)v21->cellPadding = v28 + 1;
        v25((char *)v21+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v28, v34, v5);
        v18 = v31;
      }
      ++v20;
    }
    while (v19 != v20);
    goto LABEL_22;
  }
  __break(1u);
}

unint64_t sub_1000DCD38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081ED88;
  if (!qword_10081ED88)
  {
    v1 = objc_opt_self(HKWorkoutEvent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10081ED88);
  }
  return result;
}

uint64_t sub_1000DCD74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110((uint64_t *)&unk_100827440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithCopy for ActivitySharingTabView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  v16 = *(void **)(a2 + 32);
  v17 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  v18 = v16;

  v19 = *(void **)(a2 + 40);
  v20 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v19;
  v21 = v19;

  v22 = *(void **)(a2 + 48);
  v23 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v22;
  v24 = v22;

  v25 = *(void **)(a2 + 56);
  v26 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v25;
  v27 = v25;

  v28 = *(void **)(a2 + 64);
  v29 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v28;
  v30 = v28;

  v31 = *(_QWORD *)(a2 + 72);
  v32 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v31;
  swift_retain(v31);
  swift_release(v32);
  v33 = *(void **)(a2 + 80);
  v34 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v33;
  v35 = v33;

  v36 = *(_QWORD *)(a2 + 88);
  v37 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = *(void **)(a2 + 96);
  v39 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v38;
  v40 = v38;

  v41 = *(void **)(a2 + 104);
  v42 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v41;
  v43 = v41;

  v44 = *(void **)(a2 + 112);
  v45 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v44;
  v46 = v44;

  v47 = *(void **)(a2 + 120);
  v48 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v47;
  v49 = v47;

  v50 = *(void **)(a2 + 128);
  v51 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v50;
  v52 = v50;

  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v53 = *(_QWORD *)(a2 + 144);
  v54 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v53;
  swift_retain(v53);
  swift_release(v54);
  v55 = *(_QWORD *)(a2 + 152);
  v56 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v55;
  swift_retain(v55);
  swift_release(v56);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v57 = *(_QWORD *)(a2 + 168);
  v58 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v57;
  swift_retain(v57);
  swift_release(v58);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v59 = *(_QWORD *)(a2 + 184);
  v60 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v59;
  swift_retain(v59);
  swift_release(v60);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v61 = *(void **)(a2 + 200);
  v62 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v61;
  v63 = v61;

  v64 = *(_QWORD *)(a2 + 208);
  v65 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v64;
  swift_retain(v64);
  swift_release(v65);
  return a1;
}

__n128 initializeWithTake for ActivitySharingTabView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for ActivitySharingTabView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v7 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  v8 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(v8);

  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release(v9);

  v10 = *(void **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);

  v11 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);

  v12 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(*(_QWORD *)(a1 + 144));
  v13 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 168);
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v14;
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 184);
  v17 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  swift_release(v17);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  v18 = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingTabView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingTabView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1000DD254(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AAEB0, 1);
}

id sub_1000DD264(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD *v32;
  id v33;
  id v35;
  id v36;
  id v39;
  id v40;

  v22 = type metadata accessor for ActivitySharingFriendDetailDataProvider(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v40 = a2;
  v39 = a3;
  swift_retain(a4);
  v36 = a5;
  v35 = a6;
  v23 = a7;
  v24 = a1;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  swift_retain(a11);
  v28 = a12;
  v29 = a13;
  v30 = a14;
  v31 = a15;
  v32 = sub_10042DC10(v40, v39, a4, v36, v35, v23, v24, v25, v26, v27, a11, v28, v29, v30, v31);
  v33 = objc_allocWithZone((Class)type metadata accessor for ActivitySharingFriendDetailViewController());
  return sub_100336364((uint64_t)v32, v31);
}

void sub_1000DD3E4(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  const void *v30;
  id v31;
  _QWORD aBlock[5];
  uint64_t v36;

  v16 = swift_allocObject(&unk_100784980, 32, 7);
  *(_QWORD *)(v16 + 16) = a10;
  *(_QWORD *)(v16 + 24) = a11;
  v31 = objc_allocWithZone((Class)CHFriendInboxTableViewController);
  aBlock[4] = sub_10003A294;
  v36 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E04F0;
  aBlock[3] = &unk_100784998;
  v17 = _Block_copy(aBlock);
  v29 = v36;
  v30 = v17;
  swift_retain(a11);
  v28 = a9;
  v18 = a8;
  v19 = a7;
  v20 = a6;
  v21 = a5;
  v22 = a4;
  v23 = a3;
  v24 = a2;
  v25 = a1;
  v26 = v18;
  v27 = objc_msgSend(v31, "initWithFriendListManager:friendManager:achievementsDataProvider:workoutsDataProvider:workoutFormattingManager:formattingManager:badgeImageFactory:healthStore:fitnessAppContext:makeFriendDetailViewControllerBlock:", v25, v24, v23, v22, v21, v20, swift_release(v29).n128_f64[0], v19, v18, v28, v30);

  _Block_release(v30);
  if (!v27)
    __break(1u);
}

uint64_t sub_1000DD598@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = (_QWORD *)v1;
  v45 = a1;
  v3 = sub_100047110(&qword_10081ED98);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_10081EDA0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100047110(&qword_10081EDA8);
  __chkstk_darwin(v42);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100047110(&qword_10081EDB0);
  __chkstk_darwin(v43);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100047110(&qword_10081EDB8);
  __chkstk_darwin(v44);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DD978(v1, (uint64_t)v5);
  v15 = *(_QWORD *)(v1 + 184);
  v16 = type metadata accessor for ActivitySharingFriendDetailAlertCoordinator(0);
  v17 = sub_1000083D8((unint64_t *)&qword_10082EF70, type metadata accessor for ActivitySharingFriendDetailAlertCoordinator, (uint64_t)&unk_10063E438);
  v18 = static ObservableObject.environmentStore.getter(v16, v17);
  sub_100021CC0((uint64_t)v5, (uint64_t)v8, &qword_10081ED98);
  v19 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v19 = v18;
  v19[1] = v15;
  swift_retain(v15);
  sub_10001BE90((uint64_t)v5, &qword_10081ED98);
  v20 = v2[18];
  v21 = type metadata accessor for ActivitySharingNavigationCoordinator();
  v22 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
  swift_retain(v20);
  v23 = static ObservableObject.environmentStore.getter(v21, v22);
  sub_100021CC0((uint64_t)v8, (uint64_t)v10, &qword_10081EDA0);
  v24 = (uint64_t *)&v10[*(int *)(v42 + 36)];
  *v24 = v23;
  v24[1] = v20;
  sub_10001BE90((uint64_t)v8, &qword_10081EDA0);
  v25 = v2[19];
  v26 = type metadata accessor for ActivitySharingHighlightDataProvider(0);
  v27 = sub_1000083D8(&qword_10081EDC8, type metadata accessor for ActivitySharingHighlightDataProvider, (uint64_t)&unk_100633F88);
  v28 = static ObservableObject.environmentStore.getter(v26, v27);
  sub_100021CC0((uint64_t)v10, (uint64_t)v12, &qword_10081EDA8);
  v29 = (uint64_t *)&v12[*(int *)(v43 + 36)];
  *v29 = v28;
  v29[1] = v25;
  swift_retain(v25);
  sub_10001BE90((uint64_t)v10, &qword_10081EDA8);
  v30 = v2[21];
  v31 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v32 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  swift_retain(v30);
  v33 = static ObservableObject.environmentStore.getter(v31, v32);
  sub_100021CC0((uint64_t)v12, (uint64_t)v14, &qword_10081EDB0);
  v34 = (uint64_t *)&v14[*(int *)(v44 + 36)];
  *v34 = v33;
  v34[1] = v30;
  sub_10001BE90((uint64_t)v12, &qword_10081EDB0);
  v35 = v2[11];
  v36 = type metadata accessor for ReachableContactsDataSource(0);
  v37 = sub_1000083D8(&qword_10081EDD0, type metadata accessor for ReachableContactsDataSource, (uint64_t)&unk_1006491AC);
  v38 = static ObservableObject.environmentStore.getter(v36, v37);
  v39 = v45;
  sub_100021CC0((uint64_t)v14, v45, &qword_10081EDB8);
  v40 = (uint64_t *)(v39 + *(int *)(sub_100047110(&qword_10081EDD8) + 36));
  *v40 = v38;
  v40[1] = v35;
  swift_retain(v35);
  return sub_10001BE90((uint64_t)v14, &qword_10081EDB8);
}

uint64_t sub_1000DD978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  ValueMetadata *v42;
  unint64_t v43;

  v41 = a2;
  v39 = sub_100047110(&qword_10081EDE0);
  __chkstk_darwin(v39);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100047110(&qword_10081EDE8);
  v5 = *(_QWORD *)(v40 - 8);
  v6 = __chkstk_darwin(v40);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v37 = sub_100047110(&qword_10081EDF0);
  __chkstk_darwin(v37);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100047110(&qword_10081EDF8);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(a1 + 200);
  KeyPath = swift_getKeyPath(&unk_100622B98);
  v17 = swift_getKeyPath(&unk_100622BC0);
  static Published.subscript.getter(&v42, v15, KeyPath, v17);
  swift_release(KeyPath);
  swift_release(v17);
  if ((v42 & 1) != 0)
  {
    sub_1000DDD44(a1);
    v18 = sub_1000E1A9C(&qword_10081EE10, &qword_10081EDE0, (void (*)(void))sub_1000E06A0);
    v19 = (ValueMetadata *)v39;
    View.toolbar(_:for:)(1, _swiftEmptyArrayStorage, v39, v18);
    sub_10001BE90((uint64_t)v4, &qword_10081EDE0);
    v20 = v40;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v40);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v12, v10, v20);
    swift_storeEnumTagMultiPayload(v12, v37, 1);
    v21 = sub_1000E065C();
    v42 = &type metadata for FriendSetupView;
    v43 = v21;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v42 = v19;
    v43 = v18;
    v23 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    _ConditionalContent<>.init(storage:)(v12, v38, v20, OpaqueTypeConformance2, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v20);
  }
  else
  {
    v25 = type metadata accessor for FriendsSetupCoordinator(0);
    v26 = sub_1000083D8(&qword_10081EE00, type metadata accessor for FriendsSetupCoordinator, (uint64_t)&unk_100647378);
    v27 = ObservedObject.init(wrappedValue:)(v15, v25, v26);
    v29 = v28;
    v42 = (ValueMetadata *)v27;
    v43 = (unint64_t)v28;
    v30 = sub_1000E065C();
    View.toolbar(_:for:)(2, _swiftEmptyArrayStorage, &type metadata for FriendSetupView, v30);

    v31 = v36;
    v32 = v38;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v12, v14, v38);
    swift_storeEnumTagMultiPayload(v12, v37, 0);
    v42 = &type metadata for FriendSetupView;
    v43 = v30;
    v33 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v34 = sub_1000E1A9C(&qword_10081EE10, &qword_10081EDE0, (void (*)(void))sub_1000E06A0);
    v42 = (ValueMetadata *)v39;
    v43 = v34;
    v35 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    _ConditionalContent<>.init(storage:)(v12, v32, v40, v33, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  }
}

uint64_t sub_1000DDD44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v26)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  char v61;
  _OWORD v62[2];

  v2 = sub_100047110(&qword_10081EE70);
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081EE68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62[0] = *(_OWORD *)(a1 + 160);
  v9 = *((_QWORD *)&v62[0] + 1);
  KeyPath = swift_getKeyPath(&unk_100622BE0);
  v11 = swift_getKeyPath(&unk_100622C08);
  v12 = swift_retain(v9);
  static Published.subscript.getter(&v56, v12, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  sub_10004D634((uint64_t)v62);
  if ((_QWORD)v56)
  {
    v13 = *((_QWORD *)&v56 + 1);
    v14 = v57;
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v14);
    swift_retain(v9);
    LOBYTE(v13) = sub_10012F7A0();
    sub_10004D634((uint64_t)v62);
    if ((v13 & 1) != 0)
    {
      v15 = swift_allocObject(&unk_100784890, 232, 7);
      v16 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(v15 + 176) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(v15 + 192) = v16;
      *(_OWORD *)(v15 + 208) = *(_OWORD *)(a1 + 192);
      *(_QWORD *)(v15 + 224) = *(_QWORD *)(a1 + 208);
      v17 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v15 + 112) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(v15 + 128) = v17;
      v18 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(v15 + 144) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v15 + 160) = v18;
      v19 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v15 + 48) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v15 + 64) = v19;
      v20 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(v15 + 80) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v15 + 96) = v20;
      v21 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v15 + 32) = v21;
      v50 = sub_1000E0818;
      v51 = v15;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0;
      sub_100021D04(a1);
    }
    else
    {
      v26 = *(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(a1 + 72);
      v27 = type metadata accessor for ReachableContactsDataSource(0);
      v28 = sub_1000083D8(&qword_10081EDD0, type metadata accessor for ReachableContactsDataSource, (uint64_t)&unk_1006491AC);
      swift_retain(v26);
      v29 = EnvironmentObject.init()(v27, v28);
      v31 = v30;
      v32 = static Edge.Set.all.getter(v29);
      v33 = EdgeInsets.init(_all:)(0.0);
      v50 = v26;
      v51 = v29;
      *(_QWORD *)&v52 = v31;
      *((_QWORD *)&v52 + 1) = v32;
      *(double *)&v53 = v33;
      *((_QWORD *)&v53 + 1) = v34;
      *(_QWORD *)&v54 = v35;
      *((_QWORD *)&v54 + 1) = v36;
      v55 = 256;
    }
    v37 = sub_100047110(&qword_10081EE40);
    v38 = sub_100047110(&qword_10081EE50);
    v39 = sub_100028384(&qword_10081EE38, &qword_10081EE40, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    v40 = sub_1000E0A18(&qword_10081EE48, &qword_10081EE50, (void (*)(void))sub_1000E07C8);
    _ConditionalContent<>.init(storage:)(&v50, v37, v38, v39, v40);
    v41 = v57;
    v42 = v58;
    v43 = v59;
    v44 = v60;
    v45 = v61;
    *(_OWORD *)v4 = v56;
    *((_OWORD *)v4 + 1) = v41;
    *((_OWORD *)v4 + 2) = v42;
    *((_OWORD *)v4 + 3) = v43;
    v4[64] = v44;
    v4[65] = v45;
    swift_storeEnumTagMultiPayload(v4, v2, 0);
    v46 = sub_100047110(&qword_10081EE30);
    v47 = sub_1000E0724();
    v48 = sub_100028384((unint64_t *)&qword_10081EE60, &qword_10081EE68, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    return _ConditionalContent<>.init(storage:)(v4, v46, v5, v47, v48);
  }
  else
  {
    ProgressView<>.init<>()();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    v22 = sub_100047110(&qword_10081EE30);
    v23 = sub_1000E0724();
    v24 = sub_100028384((unint64_t *)&qword_10081EE60, &qword_10081EE68, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    _ConditionalContent<>.init(storage:)(v4, v22, v5, v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1000DE138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)();
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;

  v58 = a1;
  v54 = a3;
  v4 = type metadata accessor for PPTTestCase.Name(0);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  __chkstk_darwin(v4);
  v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for ScrollViewProxy(0);
  v6 = *(_QWORD *)(v51 - 8);
  v57 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v51);
  v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10081EE78);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_10081EE80);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100047110(&qword_10081EE88);
  v15 = __chkstk_darwin(v52);
  v50 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a2;
  v17 = static Axis.Set.vertical.getter(v15);
  v18 = sub_100047110(&qword_10081EE90);
  v19 = sub_100028384(&qword_10081EE98, &qword_10081EE90, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v20 = ScrollView.init(_:showsIndicators:content:)(v17, 1, sub_1000E0820, v59, v18, v19);
  LOBYTE(v17) = static Edge.Set.all.getter(v20);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
  v21 = &v14[*(int *)(v12 + 36)];
  *v21 = v17;
  *((_QWORD *)v21 + 1) = 0x4024000000000000;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = 0;
  v21[40] = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = v6;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v23 = v49;
  v24 = v51;
  v48(v49, v58, v51);
  v25 = *(unsigned __int8 *)(v22 + 80);
  v26 = v22;
  v27 = (v25 + 232) & ~v25;
  v47 = v25 | 7;
  v28 = swift_allocObject(&unk_1007848B8, v27 + v57, v25 | 7);
  v29 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v28 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v28 + 192) = v29;
  *(_OWORD *)(v28 + 208) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(v28 + 224) = *(_QWORD *)(a2 + 208);
  v30 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v28 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v28 + 128) = v30;
  v31 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v28 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v28 + 160) = v31;
  v32 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v28 + 64) = v32;
  v33 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v28 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v28 + 96) = v33;
  v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v28 + 32) = v34;
  v35 = v28 + v27;
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v37 = v23;
  v36(v35, v23, v24);
  v38 = v50;
  sub_100021CC0((uint64_t)v14, v50, &qword_10081EE80);
  v39 = v52;
  v40 = (uint64_t (**)())(v38 + *(int *)(v52 + 36));
  *v40 = sub_1000E094C;
  v40[1] = (uint64_t (*)())v28;
  v40[2] = 0;
  v40[3] = 0;
  sub_100021D04(a2);
  sub_10001BE90((uint64_t)v14, &qword_10081EE80);
  v41 = v53;
  PPTTestCase.Name.init(_:)(0xD000000000000010, 0x80000001006883D0);
  v48(v37, v58, v24);
  v42 = (v25 + 16) & ~v25;
  v43 = swift_allocObject(&unk_1007848E0, v42 + v57, v47);
  v36(v43 + v42, v37, v24);
  v44 = sub_1000E0A18(&qword_10081EEA0, &qword_10081EE88, (void (*)(void))sub_1000E0A80);
  View.onTest(_:handler:)(v41, sub_1000E09DC, v43, v39, v44);
  v45 = swift_release(v43);
  (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v41, v56, v45);
  return sub_10001BE90(v38, &qword_10081EE88);
}

double sub_1000DE530@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[11];
  uint64_t v12;
  _OWORD v13[12];

  v4 = static HorizontalAlignment.center.getter();
  sub_1000DE628(a1, (uint64_t)v11);
  *(_OWORD *)((char *)&v13[8] + 7) = v11[8];
  *(_OWORD *)((char *)&v13[9] + 7) = v11[9];
  *(_OWORD *)((char *)&v13[10] + 7) = v11[10];
  *(_QWORD *)((char *)&v13[11] + 7) = v12;
  *(_OWORD *)((char *)&v13[4] + 7) = v11[4];
  *(_OWORD *)((char *)&v13[5] + 7) = v11[5];
  *(_OWORD *)((char *)&v13[6] + 7) = v11[6];
  *(_OWORD *)((char *)&v13[7] + 7) = v11[7];
  *(_OWORD *)((char *)v13 + 7) = v11[0];
  *(_OWORD *)((char *)&v13[1] + 7) = v11[1];
  *(_OWORD *)((char *)&v13[2] + 7) = v11[2];
  *(_OWORD *)((char *)&v13[3] + 7) = v11[3];
  v5 = v13[9];
  *(_OWORD *)(a2 + 145) = v13[8];
  *(_OWORD *)(a2 + 161) = v5;
  *(_OWORD *)(a2 + 177) = v13[10];
  *(_OWORD *)(a2 + 192) = *(_OWORD *)((char *)&v13[10] + 15);
  v6 = v13[5];
  *(_OWORD *)(a2 + 81) = v13[4];
  *(_OWORD *)(a2 + 97) = v6;
  v7 = v13[7];
  *(_OWORD *)(a2 + 113) = v13[6];
  *(_OWORD *)(a2 + 129) = v7;
  v8 = v13[1];
  *(_OWORD *)(a2 + 17) = v13[0];
  *(_OWORD *)(a2 + 33) = v8;
  result = *(double *)&v13[2];
  v10 = v13[3];
  *(_OWORD *)(a2 + 49) = v13[2];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 65) = v10;
  return result;
}

double sub_1000DE628@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  double result;
  uint64_t (*v44)@<X0>(uint64_t *@<X8>);
  uint64_t (*v45)@<X0>(uint64_t *@<X8>);
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  __int128 v54;
  uint64_t v55;

  v5 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168);
  KeyPath = swift_getKeyPath(&unk_100622BE0);
  v7 = swift_getKeyPath(&unk_100622C08);
  v8 = swift_retain(v4);
  static Published.subscript.getter(&v54, v8, KeyPath, v7);
  swift_release(v4);
  swift_release(KeyPath);
  swift_release(v7);
  v9 = v54;
  if ((_QWORD)v54
    && (v10 = v55,
        swift_bridgeObjectRelease(*((_QWORD *)&v54 + 1)),
        swift_bridgeObjectRelease(v10),
        v11 = *(_QWORD *)(v9 + 16),
        swift_bridgeObjectRelease(v9),
        v11))
  {
    v12 = *(void **)(a1 + 56);
    v13 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
    v14 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
    v53 = v12;
    v15 = ObservedObject.projectedValue.getter(v5, v4, v13, v14);
    v16 = swift_getKeyPath(&unk_100622C70);
    ObservedObject.Wrapper.subscript.getter(&v54, v16, v15, v14);
    swift_release(v16);
    swift_release(v15);
    v48 = v54;
    v44 = sub_1000DEBA4;
    v51 = *((_QWORD *)&v54 + 1);
    v52 = v55;
  }
  else
  {
    v52 = 0;
    v53 = 0;
    v48 = 0;
    v51 = 0;
    v44 = 0;
  }
  v17 = *(_QWORD *)(a1 + 152);
  v18 = swift_getKeyPath(&unk_100622C28);
  v19 = swift_getKeyPath(&unk_100622C50);
  static Published.subscript.getter(&v54, v17, v18, v19);
  swift_release(v18);
  swift_release(v19);
  v50 = v4;
  if ((_QWORD)v54)
  {
    swift_bridgeObjectRelease(v54);
    v20 = *(void **)(a1 + 56);
    v21 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
    v22 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
    v47 = v20;
    v23 = ObservedObject.projectedValue.getter(v5, v4, v21, v22);
    v24 = swift_getKeyPath(&unk_100622C70);
    ObservedObject.Wrapper.subscript.getter(&v54, v24, v23, v22);
    swift_release(v24);
    swift_release(v23);
    v46 = *((_QWORD *)&v54 + 1);
    v25 = v54;
    v26 = v55;
    v27 = v5;
    v28 = swift_allocObject(&unk_100784908, 232, 7);
    v29 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(v28 + 176) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(v28 + 192) = v29;
    *(_OWORD *)(v28 + 208) = *(_OWORD *)(a1 + 192);
    *(_QWORD *)(v28 + 224) = *(_QWORD *)(a1 + 208);
    v30 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v28 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v28 + 128) = v30;
    v31 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(v28 + 144) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v28 + 160) = v31;
    v32 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v28 + 64) = v32;
    v33 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v28 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v28 + 96) = v33;
    v34 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v28 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v28 + 32) = v34;
    sub_100021D04(a1);
    v45 = sub_1000E0D18;
    v35 = 1;
  }
  else
  {
    v46 = 0;
    v47 = 0;
    v35 = 0;
    v25 = 0;
    v26 = 0;
    v45 = 0;
    v27 = v5;
    v28 = 0;
  }
  v36 = *(void **)(a1 + 56);
  v37 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v38 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  v49 = v36;
  v39 = ObservedObject.projectedValue.getter(v27, v50, v37, v38);
  v40 = swift_getKeyPath(&unk_100622C70);
  ObservedObject.Wrapper.subscript.getter(&v54, v40, v39, v38);
  swift_release(v40);
  swift_release(v39);
  v41 = v54;
  v42 = v55;
  *(_DWORD *)(a2 + 137) = v54;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)((char *)&v54 + 3);
  *(_QWORD *)a2 = 0xD000000000000011;
  *(_QWORD *)(a2 + 8) = 0x8000000100688270;
  *(_QWORD *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v48;
  *(_QWORD *)(a2 + 40) = v51;
  *(_QWORD *)(a2 + 48) = v52;
  *(_QWORD *)(a2 + 56) = v44;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v47;
  *(_QWORD *)(a2 + 80) = v35;
  *(_QWORD *)(a2 + 88) = v25;
  *(_QWORD *)(a2 + 96) = v46;
  *(_QWORD *)(a2 + 104) = v26;
  *(_QWORD *)(a2 + 112) = v45;
  *(_QWORD *)(a2 + 120) = v28;
  *(_QWORD *)(a2 + 128) = v49;
  *(_BYTE *)(a2 + 136) = 2;
  *(_OWORD *)(a2 + 144) = v41;
  *(_QWORD *)(a2 + 160) = v42;
  *(_QWORD *)(a2 + 168) = sub_1000DEDA0;
  *(_QWORD *)(a2 + 176) = 0;
  swift_bridgeObjectRetain(0x8000000100688270);
  sub_1000E0BA4(v53, 0, v48, v51, v52, (uint64_t)v44, 0);
  sub_1000E0BA4(v47, v35, v25, v46, v26, (uint64_t)v45, v28);
  sub_1000E0BF4(v47, v35, v25, v46, v26, (uint64_t)v45, v28);
  sub_1000E0BF4(v53, 0, v48, v51, v52, (uint64_t)v44, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x8000000100688270).n128_u64[0];
  return result;
}

uint64_t sub_1000DEAB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100622C70);
  v5 = swift_getKeyPath(&unk_100622C98);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

double sub_1000DEB30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100622C70);
  v5 = swift_getKeyPath(&unk_100622C98);
  v7 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v7, v3, KeyPath, v5);
  return sub_10012F464();
}

uint64_t sub_1000DEBA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];
  char v20;

  v2 = type metadata accessor for SafeAreaPaddingModifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v7 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  v11 = type metadata accessor for ActivitySharingNavigationCoordinator();
  v12 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
  v13 = EnvironmentObject.init()(v11, v12);
  v15 = v14;
  v16 = static Edge.Set.horizontal.getter();
  memset(v19, 0, sizeof(v19));
  v20 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)(v16, v19);
  v17 = sub_100047110(&qword_10081EEB8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)a1 + *(int *)(v17 + 36), v5, v2);
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v13;
  a1[3] = v15;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000DECEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t result;
  uint64_t v14;

  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a1 + 48);
  v6 = *(void **)(*(_QWORD *)(a1 + 40) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
  v7 = type metadata accessor for ActivitySharingHighlightDataProvider(0);
  v8 = sub_1000083D8(&qword_10081EDC8, type metadata accessor for ActivitySharingHighlightDataProvider, (uint64_t)&unk_100633F88);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  result = EnvironmentObject.init()(v7, v8);
  *a2 = result;
  a2[1] = v14;
  a2[2] = (uint64_t)v9;
  a2[3] = (uint64_t)v10;
  a2[4] = (uint64_t)v11;
  a2[5] = (uint64_t)v12;
  return result;
}

uint64_t sub_1000DEDA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  char v15;

  v2 = type metadata accessor for SafeAreaPaddingModifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  v7 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  v11 = static Edge.Set.horizontal.getter();
  memset(v14, 0, sizeof(v14));
  v15 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)(v11, v14);
  v12 = sub_100047110(&qword_10081EEC0);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)a1 + *(int *)(v12 + 36), v5, v2);
  *a1 = v8;
  a1[1] = v10;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000DEEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_100047110(&qword_10081ED80);
  v5 = __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v16[-v8 - 8];
  v10 = *(_QWORD *)(a1 + 208);
  v11 = type metadata accessor for ScrollViewProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  sub_1000E0B04((uint64_t)v9, (uint64_t)v7);
  v13 = v10 + OBJC_IVAR____TtC10FitnessApp22ScrollToTopCoordinator_scrollViewProxy;
  swift_beginAccess(v10 + OBJC_IVAR____TtC10FitnessApp22ScrollToTopCoordinator_scrollViewProxy, v16, 33, 0);
  sub_1000E0B4C((uint64_t)v7, v13);
  return swift_endAccess(v16);
}

uint64_t sub_1000DEFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for PPTTestCase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v6);
  v10 = HKLogActivity;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if (os_log_type_enabled(v10, v9))
  {
    v28 = v10;
    v11 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v30 = v27;
    *(_DWORD *)v11 = 136315394;
    v29 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v30);
    v26 = v9;
    v12 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 4);
    *(_WORD *)(v11 + 12) = 2080;
    v24 = v11 + 14;
    v13 = a2;
    v14 = PPTTestCase.parameters.getter(v12);
    v25 = (char *)&type metadata for Any + 8;
    v15 = Dictionary.description.getter(v14, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v17 = v16;
    v18 = v14;
    a2 = v13;
    swift_bridgeObjectRelease(v18);
    v29 = sub_10003E8EC(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24);
    v19 = swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v19);
    v20 = v28;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v26, "%s Running scroll test with options %s", (uint8_t *)v11, 0x16u);
    v21 = v27;
    swift_arrayDestroy(v27, 2, v25);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return PPTTestCase.performScrollTest(_:)(a2);
}

double sub_1000DF208()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v11 = *(_OWORD *)(v0 + 136);
  v1 = *(void **)(*((_QWORD *)&v11 + 1) + 144);
  if (!v1)
    goto LABEL_6;
  v2 = objc_msgSend(v1, "viewControllers");
  v3 = sub_1000E0D58();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    v10 = v4 < 0 ? v4 : v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v4);
  if (v5 >= 2)
  {

    sub_10004D634((uint64_t)&v11);
  }
  else
  {
LABEL_6:
    v7 = *(_QWORD *)(v0 + 208);
    v8 = static Animation.default.getter(v1);
    v9 = sub_100047110(&qword_1008282F0);
    withAnimation<A>(_:_:)(v8, sub_1000E0D94, v7, v9);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000DF33C(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  os_log_type_t v29;
  NSObject *v30;
  void (*v31)(char *, os_log_t, uint64_t);
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  os_log_t v41;
  uint64_t v42;
  void *v43;
  os_log_t v44;
  NSURL *v45;
  void *v46;
  void *v47;
  id v48;
  Class v49;
  char *v50;
  void (*v51)(char *, char *, NSObject *);
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  NSObject *v55;
  char *v56;
  os_log_type_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  void (*v66)(char *, NSObject *, __n128);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  char v76;
  id v77;
  os_log_type_t v78;
  void *v79;
  _BOOL4 v80;
  NSObject *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSURL *v90;
  uint64_t v91;
  NSObject *v92;
  uint8_t *v93;
  uint64_t v94;
  os_log_type_t v95;
  const char *v96;
  NSObject *v97;
  char v98;
  void *v99;
  void *v100;
  id v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  Class v109;
  Class v110;
  id v111;
  uint64_t v112;
  os_log_type_t v113;
  NSObject *v114;
  uint64_t v115;
  char *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  __n128 v125;
  void (*v126)(char *, uint64_t, __n128);
  os_log_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  os_log_type_t v137;
  NSObject *v138;
  char *v139;
  os_log_t v140;
  uint64_t v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  __n128 v149;
  os_log_t v150;
  char *v151;
  char v152;
  os_log_type_t v153;
  void *v154;
  os_log_type_t v155;
  NSObject *v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  os_log_type_t v160;
  void *v161;
  os_log_type_t v162;
  os_log_t v163;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  void (*v169)(char *, uint64_t, __n128);
  void (*v170)(char *, os_log_t, uint64_t);
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  os_log_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  Class isa;
  os_log_t v181;
  os_log_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185[4];

  v2 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v2);
  v173 = (char *)&v165 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v174 = v4;
  v175 = v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v168 = (char *)&v165 - v10;
  __chkstk_darwin(v9);
  v167 = (char *)&v165 - v11;
  v12 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v12);
  v14 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  isa = v15[-1].isa;
  v16 = __chkstk_darwin(v15);
  v179 = (char *)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v177 = (char *)&v165 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v165 - v20;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v171 = (char *)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v165 - v27;
  v29 = static os_log_type_t.default.getter(v26);
  v30 = HKLogActivity;
  v31 = *(void (**)(char *, os_log_t, uint64_t))(v23 + 16);
  v181 = a1;
  v170 = v31;
  v31(v28, a1, v22);
  v32 = os_log_type_enabled(v30, v29);
  v178 = v22;
  v166 = v8;
  if (v32)
  {
    v176 = v30;
    v33 = swift_slowAlloc(22, -1);
    v172 = v21;
    v34 = v33;
    v35 = swift_slowAlloc(64, -1);
    v185[0] = v35;
    *(_DWORD *)v34 = 136315394;
    v184 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v34 + 4);
    *(_WORD *)(v34 + 12) = 2080;
    v36 = sub_1000083D8((unint64_t *)&unk_100839C40, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v22, v36);
    v39 = v38;
    v184 = sub_10003E8EC(v37, v38, v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v34 + 14);
    v40 = swift_bridgeObjectRelease(v39);
    v169 = *(void (**)(char *, uint64_t, __n128))(v23 + 8);
    v169(v28, v178, v40);
    v41 = v176;
    _os_log_impl((void *)&_mh_execute_header, v176, v29, "%s handling URL %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v42 = v34;
    v21 = v172;
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {
    v169 = *(void (**)(char *, uint64_t, __n128))(v23 + 8);
    ((void (*)(char *, uint64_t))v169)(v28, v22);
  }
  *(_OWORD *)v185 = *(_OWORD *)&v182[17].isa;
  v43 = *(void **)(v185[1] + 144);
  v176 = (os_log_t)v185[1];

  sub_10004D634((uint64_t)v185);
  sub_10047433C();
  v44 = v181;
  URL._bridgeToObjectiveC()(v45);
  v47 = v46;
  v48 = (id)ASDateFromActivityAppLaunchURL(v46);

  v49 = isa;
  if (v48)
  {
    v50 = v177;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v51 = (void (*)(char *, char *, NSObject *))*((_QWORD *)v49 + 4);
    v51(v14, v50, v15);
    (*((void (**)(char *, _QWORD, uint64_t, NSObject *))v49 + 7))(v14, 0, 1, v15);
    v52 = (*((uint64_t (**)(char *, uint64_t, NSObject *))v49 + 6))(v14, 1, v15);
    if ((_DWORD)v52 != 1)
    {
      v53 = ((uint64_t (*)(char *, char *, NSObject *))v51)(v21, v14, v15);
      goto LABEL_9;
    }
  }
  else
  {
    v52 = (*((uint64_t (**)(char *, uint64_t, uint64_t, NSObject *))isa + 7))(v14, 1, 1, v15);
  }
  Date.init()(v52);
  v53 = sub_10001BE90((uint64_t)v14, (uint64_t *)&unk_100828370);
LABEL_9:
  v54 = static os_log_type_t.default.getter(v53);
  v55 = HKLogActivity;
  v56 = v179;
  (*((void (**)(char *, char *, NSObject *))v49 + 2))(v179, v21, v15);
  v57 = v54;
  if (os_log_type_enabled(v55, v54))
  {
    v58 = v55;
    v59 = swift_slowAlloc(22, -1);
    v60 = swift_slowAlloc(64, -1);
    v184 = v60;
    *(_DWORD *)v59 = 136315394;
    v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v59 + 4);
    *(_WORD *)(v59 + 12) = 2080;
    v61 = sub_1000083D8((unint64_t *)&qword_10081EEC8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v15, v61);
    v64 = v63;
    v183 = sub_10003E8EC(v62, v63, &v184);
    v44 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v59 + 14);
    v65 = swift_bridgeObjectRelease(v64);
    v66 = (void (*)(char *, NSObject *, __n128))*((_QWORD *)isa + 1);
    v66(v56, v15, v65);
    _os_log_impl((void *)&_mh_execute_header, v58, v57, "%s date: %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {
    v66 = (void (*)(char *, NSObject *, __n128))*((_QWORD *)v49 + 1);
    v67 = ((uint64_t (*)(char *, NSObject *))v66)(v56, v15);
  }
  v68 = URL.host.getter(v67);
  v70 = v69;
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(kASActivitySharingHostMe);
  v73 = v72;
  if (v70)
  {
    if (v68 == v71 && v70 == v72)
    {
      swift_bridgeObjectRelease(v70);
      *(_QWORD *)&v74 = swift_bridgeObjectRelease(v73).n128_u64[0];
      goto LABEL_18;
    }
    v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v71, v72, 0);
    swift_bridgeObjectRelease(v70);
    *(_QWORD *)&v74 = swift_bridgeObjectRelease(v73).n128_u64[0];
    if ((v76 & 1) != 0)
    {
LABEL_18:
      v77 = -[objc_class me](v182[7].isa, "me", v74);
      v78 = static os_log_type_t.default.getter(v77);
      v79 = (void *)HKLogActivity;
      v80 = os_log_type_enabled(HKLogActivity, v78);
      if (v77)
      {
        if (v80)
        {
          v81 = v79;
          v82 = (uint8_t *)swift_slowAlloc(12, -1);
          v83 = swift_slowAlloc(32, -1);
          v184 = v83;
          *(_DWORD *)v82 = 136315138;
          v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v82 + 4);
          _os_log_impl((void *)&_mh_execute_header, v81, v78, "%s showing me friend detail", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);

        }
        swift_retain(v176);
        sub_10029D3A0(v77, 0);
        sub_10004D634((uint64_t)v185);

        goto LABEL_52;
      }
      if (v80)
      {
        v92 = v79;
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        v184 = v94;
        *(_DWORD *)v93 = 136315138;
        v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v93 + 4);
        v95 = v78;
        v96 = "%s failed to show me friend detail";
        v97 = v92;
LABEL_51:
        _os_log_impl((void *)&_mh_execute_header, v97, v95, v96, v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

        goto LABEL_52;
      }
      goto LABEL_52;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v72);
  }
  v84 = URL.host.getter(v75);
  v86 = v85;
  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(kASActivitySharingHostFriendDetail);
  v89 = v88;
  if (!v86)
  {
    swift_bridgeObjectRelease(v88);
    goto LABEL_35;
  }
  if (v84 == v87 && v86 == v88)
  {
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v89);
    goto LABEL_30;
  }
  v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v86, v87, v88, 0);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v89);
  if ((v98 & 1) == 0)
  {
LABEL_35:
    v129 = URL.host.getter(v91);
    v131 = v130;
    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(kASActivitySharingHostInbox);
    v134 = v133;
    if (v131)
    {
      if (v129 == v132 && v131 == v133)
      {
        swift_bridgeObjectRelease(v131);
        swift_bridgeObjectRelease(v134);
LABEL_46:
        v153 = static os_log_type_t.default.getter(v135);
        v154 = (void *)HKLogActivity;
        v155 = v153;
        if (os_log_type_enabled(HKLogActivity, v153))
        {
          v156 = v154;
          v157 = (uint8_t *)swift_slowAlloc(12, -1);
          v158 = swift_slowAlloc(32, -1);
          v184 = v158;
          *(_DWORD *)v157 = 136315138;
          v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v157 + 4);
          _os_log_impl((void *)&_mh_execute_header, v156, v155, "%s showing friend inbox view", v157, 0xCu);
          swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v158, -1, -1);
          swift_slowDealloc(v157, -1, -1);

        }
        swift_retain(v176);
        sub_10029D9F0(v159);
        sub_10004D634((uint64_t)v185);
        goto LABEL_52;
      }
      v152 = _stringCompareWithSmolCheck(_:_:expecting:)(v129, v131, v132, v133, 0);
      swift_bridgeObjectRelease(v131);
      swift_bridgeObjectRelease(v134);
      if ((v152 & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      swift_bridgeObjectRelease(v133);
    }
    v160 = static os_log_type_t.default.getter(v135);
    v161 = (void *)HKLogActivity;
    v162 = v160;
    if (os_log_type_enabled(HKLogActivity, v160))
    {
      v92 = v161;
      v93 = (uint8_t *)swift_slowAlloc(12, -1);
      v94 = swift_slowAlloc(32, -1);
      v184 = v94;
      *(_DWORD *)v93 = 136315138;
      v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v93 + 4);
      v96 = "%s showing friend list";
      v97 = v92;
      v95 = v162;
      goto LABEL_51;
    }
LABEL_52:
    v151 = v21;
    goto LABEL_53;
  }
LABEL_30:
  URL._bridgeToObjectiveC()(v90);
  v100 = v99;
  v101 = (id)ASFriendUUIDFromActivityAppLaunchURL(v99);

  if (!v101)
  {
    v105 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v175 + 56))(v173, 1, 1, v174);
    goto LABEL_41;
  }
  v102 = v168;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v101);

  v103 = v175;
  v104 = *(void (**)(char *, char *, uint64_t))(v175 + 32);
  v105 = (uint64_t)v173;
  v106 = v102;
  v107 = v174;
  v104(v173, v106, v174);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56))(v105, 0, 1, v107);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v105, 1, v107) == 1)
  {
LABEL_41:
    v136 = sub_10001BE90(v105, (uint64_t *)&unk_10082E690);
LABEL_42:
    v137 = static os_log_type_t.default.getter(v136);
    v138 = HKLogActivity;
    v139 = v171;
    v140 = v44;
    v141 = v178;
    v170(v171, v140, v178);
    v142 = v137;
    if (os_log_type_enabled(v138, v137))
    {
      v182 = v138;
      v143 = swift_slowAlloc(22, -1);
      v144 = swift_slowAlloc(64, -1);
      v184 = v144;
      *(_DWORD *)v143 = 136315394;
      v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v143 + 4);
      *(_WORD *)(v143 + 12) = 2082;
      v172 = v21;
      v145 = sub_1000083D8((unint64_t *)&unk_100839C40, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v146 = dispatch thunk of CustomStringConvertible.description.getter(v141, v145);
      v148 = v147;
      v183 = sub_10003E8EC(v146, v147, &v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v143 + 14);
      v149 = swift_bridgeObjectRelease(v148);
      v169(v139, v141, v149);
      v150 = v182;
      _os_log_impl((void *)&_mh_execute_header, v182, v142, "%s failed to show friend detail for friendUUID %{public}s", (uint8_t *)v143, 0x16u);
      swift_arrayDestroy(v144, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1, -1);
      swift_slowDealloc(v143, -1, -1);

      v151 = v172;
LABEL_53:
      v163 = v15;
      return ((uint64_t (*)(char *, os_log_t))v66)(v151, v163);
    }
    ((void (*)(char *, uint64_t))v169)(v139, v141);
    goto LABEL_52;
  }
  v108 = v167;
  v104(v167, (char *)v105, v107);
  v109 = v182[7].isa;
  v110 = UUID._bridgeToObjectiveC()().super.isa;
  v111 = -[objc_class friendWithUUID:](v109, "friendWithUUID:", v110);

  if (!v111)
  {
    v136 = (*(uint64_t (**)(char *, uint64_t))(v175 + 8))(v108, v107);
    goto LABEL_42;
  }
  v182 = v15;
  v113 = static os_log_type_t.default.getter(v112);
  v114 = HKLogActivity;
  v115 = v175;
  v116 = v166;
  (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v166, v108, v107);
  v117 = v113;
  if (os_log_type_enabled(v114, v113))
  {
    v181 = v114;
    v118 = swift_slowAlloc(22, -1);
    v172 = v21;
    v119 = v118;
    v120 = swift_slowAlloc(64, -1);
    v184 = v120;
    *(_DWORD *)v119 = 136315394;
    v183 = sub_10003E8EC(0xD000000000000016, 0x8000000100622B10, &v184);
    v121 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v119 + 4);
    *(_WORD *)(v119 + 12) = 2082;
    v122 = UUID.description.getter(v121);
    v124 = v123;
    v183 = sub_10003E8EC(v122, v123, &v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v119 + 14);
    v125 = swift_bridgeObjectRelease(v124);
    v126 = *(void (**)(char *, uint64_t, __n128))(v175 + 8);
    v126(v116, v107, v125);
    v127 = v181;
    _os_log_impl((void *)&_mh_execute_header, v181, v117, "%s showing friend detail for friendUUID %{public}s", (uint8_t *)v119, 0x16u);
    swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1, -1);
    v128 = v119;
    v21 = v172;
    swift_slowDealloc(v128, -1, -1);

  }
  else
  {
    v126 = *(void (**)(char *, uint64_t, __n128))(v115 + 8);
    ((void (*)(char *, uint64_t))v126)(v116, v107);
  }
  swift_retain(v176);
  sub_10029D3A0(v111, 0);
  sub_10004D634((uint64_t)v185);

  ((void (*)(char *, uint64_t))v126)(v167, v107);
  v151 = v21;
  v163 = v182;
  return ((uint64_t (*)(char *, os_log_t))v66)(v151, v163);
}

uint64_t sub_1000E0470()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000E0488@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DD598(a1);
}

id sub_1000E04F0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

double sub_1000E0540@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100622BE0);
  v5 = swift_getKeyPath(&unk_100622C08);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v9;
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1000E05C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_100622BE0);
  v7 = swift_getKeyPath(&unk_100622C08);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  sub_1000E0D20(v2, v3, v4);
  swift_retain(v5);
  return static Published.subscript.setter(v9, v5, KeyPath, v7);
}

unint64_t sub_1000E065C()
{
  unint64_t result;

  result = qword_10081EE08;
  if (!qword_10081EE08)
  {
    result = swift_getWitnessTable(&unk_100636674, &type metadata for FriendSetupView);
    atomic_store(result, (unint64_t *)&qword_10081EE08);
  }
  return result;
}

unint64_t sub_1000E06A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EE18;
  if (!qword_10081EE18)
  {
    v1 = sub_100007050(&qword_10081EE20);
    sub_1000E0724();
    sub_100028384((unint64_t *)&qword_10081EE60, &qword_10081EE68, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EE18);
  }
  return result;
}

unint64_t sub_1000E0724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EE28;
  if (!qword_10081EE28)
  {
    v1 = sub_100007050(&qword_10081EE30);
    sub_100028384(&qword_10081EE38, &qword_10081EE40, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    sub_1000E0A18(&qword_10081EE48, &qword_10081EE50, (void (*)(void))sub_1000E07C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EE28);
  }
  return result;
}

unint64_t sub_1000E07C8()
{
  unint64_t result;

  result = qword_10081EE58;
  if (!qword_10081EE58)
  {
    result = swift_getWitnessTable(&unk_10063DBF4, &type metadata for EmptyFriendView);
    atomic_store(result, (unint64_t *)&qword_10081EE58);
  }
  return result;
}

uint64_t sub_1000E0818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000DE138(a1, v2 + 16, a2);
}

double sub_1000E0820@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000DE530(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000E0828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 232) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 104));

  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 200));

  swift_release(*(_QWORD *)(v0 + 224));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000E094C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_1000DEEA0(v0 + 16, v0 + ((v1 + 232) & ~v1));
}

uint64_t sub_1000E097C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000E09DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_1000DEFB0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000E0A18(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007050(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E0A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EEA8;
  if (!qword_10081EEA8)
  {
    v1 = sub_100007050(&qword_10081EE80);
    sub_100028384(&qword_10081EEB0, &qword_10081EE78, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EEA8);
  }
  return result;
}

uint64_t sub_1000E0B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081ED80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081ED80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_1000E0BA4(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v9;

  if (result)
  {
    v9 = result;
    swift_retain(a3);
    swift_retain(a4);
    swift_retain(a7);
    return v9;
  }
  return result;
}

void *sub_1000E0BF4(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {

    swift_release(a4);
    swift_release(a7);
    return (void *)swift_release(a3);
  }
  return result;
}

uint64_t sub_1000E0C44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 104));

  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 200));

  swift_release(*(_QWORD *)(v0 + 224));
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_1000E0D18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000DECEC(v1 + 16, a1);
}

uint64_t sub_1000E0D20(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

unint64_t sub_1000E0D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100828310;
  if (!qword_100828310)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100828310);
  }
  return result;
}

uint64_t sub_1000E0D94@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1000DC7CC(v1, a1);
}

double sub_1000E0DAC@<D0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  id v72;
  id v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  _QWORD *v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  char *v104;
  id v105;
  _QWORD *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  id v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  double result;
  __int128 v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  id v129;
  _QWORD *v130;
  uint64_t v131;
  id v132;
  id v133;
  uint64_t v134;
  id v135;
  id v136;
  __int128 v137;
  id v138;
  _QWORD *v139;
  id v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  id v153;
  id v154;
  _QWORD v155[27];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v150 = a8;
  *((_QWORD *)&v144 + 1) = a7;
  v134 = a9;
  v148 = a17;
  v153 = a16;
  v147 = a15;
  v154 = a14;
  v149 = a13;
  v145 = a12;
  v146 = a11;
  v23 = sub_100047110(&qword_10081EED0);
  v142 = *(_QWORD *)(v23 - 8);
  v143 = v23;
  __chkstk_darwin(v23);
  v141 = (char *)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ScrollToTopCoordinator(0);
  v152 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = v152 + OBJC_IVAR____TtC10FitnessApp22ScrollToTopCoordinator_scrollViewProxy;
  v27 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = type metadata accessor for FriendsSetupCoordinator(0);
  v29 = sub_1000083D8(&qword_10081EE00, type metadata accessor for FriendsSetupCoordinator, (uint64_t)&unk_100647378);
  v140 = a1;
  v151 = a2;
  v138 = a3;
  v30 = a4;
  *((_QWORD *)&v137 + 1) = a5;
  *(_QWORD *)&v137 = a6;
  v31 = *((id *)&v144 + 1);
  v32 = v150;
  v133 = a10;
  v150 = (id)ObservedObject.init(wrappedValue:)(v133, v28, v29);
  v34 = v33;
  v35 = type metadata accessor for ActivitySharingHighlightDataProvider(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = v145;
  v37 = v32;
  v38 = v36;
  v136 = v38;
  v132 = v34;
  v39 = v146;
  v149 = v149;
  v154 = v154;
  *(_QWORD *)&v144 = v147;
  v153 = v153;
  v40 = v148;
  v41 = sub_1002CC960(v37, v38);
  v131 = v41;
  v42 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = v30;
  v148 = v43;
  v44 = v31;
  v135 = v44;
  v45 = v37;
  v46 = v39;
  v47 = v40;
  *((_QWORD *)&v144 + 1) = v47;
  swift_retain(v41);
  v48 = v44;
  v49 = v46;
  v125 = v46;
  v50 = sub_10012F91C(v43, v48, v45, v46, v47);
  v51 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
  v52 = (void *)ObservedObject.init(wrappedValue:)(v50, v42, v51);
  v146 = v53;
  v147 = v52;
  v54 = v53;
  v55 = type metadata accessor for ReachableContactsDataSource(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = v45;
  v129 = v56;
  swift_retain(v54);
  v57 = sub_100016AFC(v56);
  v130 = v57;
  v58 = type metadata accessor for ActivitySharingNavigationCoordinator();
  v59 = swift_allocObject(v58, 152, 15);
  swift_retain_n(v57, 3);
  swift_defaultActor_initialize(v59);
  v60 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
  *(_OWORD *)(v59 + 112) = 0u;
  *(_OWORD *)(v59 + 128) = 0u;
  *(_QWORD *)(v59 + 144) = 0;
  v145 = (id)ObservedObject.init(wrappedValue:)(v59, v58, v60);
  v62 = v61;
  v63 = type metadata accessor for ActivitySharingFriendDetailAlertCoordinator(0);
  v64 = swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
  swift_retain(v62);
  swift_defaultActor_initialize(v64);
  v65 = v64 + OBJC_IVAR____TtC10FitnessApp43ActivitySharingFriendDetailAlertCoordinator__presentedAlertType;
  v156 = 0u;
  v157 = 0u;
  LOBYTE(v158) = -1;
  v66 = sub_100047110(&qword_10081EED8);
  v67 = v141;
  Published.init(initialValue:)(&v156, v66);
  (*(void (**)(uint64_t, char *, uint64_t))(v142 + 32))(v65, v67, v143);
  v68 = sub_1000083D8((unint64_t *)&qword_10082EF70, type metadata accessor for ActivitySharingFriendDetailAlertCoordinator, (uint64_t)&unk_10063E438);
  v143 = ObservedObject.init(wrappedValue:)(v64, v63, v68);
  v70 = v69;
  v71 = (_QWORD *)swift_allocObject(&unk_100784930, 128, 7);
  v72 = v140;
  v74 = (void *)*((_QWORD *)&v137 + 1);
  v73 = v138;
  v71[2] = v140;
  v71[3] = v73;
  v75 = v70;
  v142 = v70;
  v71[4] = v70;
  v71[5] = v74;
  v76 = (void *)v137;
  v77 = v135;
  v71[6] = v137;
  v71[7] = v77;
  v78 = v129;
  v71[8] = v129;
  v71[9] = v49;
  v79 = v136;
  v71[10] = v136;
  v71[11] = v62;
  v80 = v144;
  v71[12] = v154;
  v71[13] = v80;
  v81 = *((_QWORD *)&v144 + 1);
  v71[14] = v153;
  v71[15] = v81;
  v82 = v62[14];
  v127 = (id)v62[15];
  v128 = v82;
  v62[14] = sub_1000E16D8;
  v62[15] = v71;
  swift_retain_n(v75, 2);
  v140 = v72;
  v138 = v73;
  v141 = v74;
  v126 = v76;
  v83 = v77;
  v84 = v78;
  v85 = v79;
  v86 = v125;
  v124 = v86;
  v154 = v154;
  v87 = (id)v144;
  *(_QWORD *)&v144 = v87;
  v88 = v153;
  v125 = v88;
  v153 = *((id *)&v144 + 1);
  swift_retain(v62);
  swift_retain(v152);
  swift_retain(v71);
  sub_100022BA4(v128, (uint64_t)v127);
  v89 = (_QWORD *)swift_allocObject(&unk_100784958, 104, 7);
  v89[2] = v84;
  v89[3] = v86;
  v90 = v138;
  v89[4] = v138;
  v89[5] = v87;
  v89[6] = v88;
  v89[7] = v83;
  v91 = v140;
  v89[8] = v140;
  v89[9] = v85;
  v92 = v85;
  v93 = v126;
  v89[10] = v126;
  v89[11] = sub_1000E16D8;
  v89[12] = v71;
  v139 = v62;
  v94 = v62[16];
  v128 = v62[17];
  v129 = (id)v94;
  v62[16] = sub_1000E178C;
  v62[17] = v89;
  v95 = v91;
  *(_QWORD *)&v137 = v95;
  v96 = v90;
  *((_QWORD *)&v137 + 1) = v96;
  v97 = v93;
  v127 = v97;
  v136 = v83;
  v135 = v84;
  v98 = v92;
  v138 = v98;
  v99 = v124;
  v140 = v99;
  v100 = (id)v144;
  *(_QWORD *)&v144 = v100;
  v101 = v125;
  *((_QWORD *)&v144 + 1) = v101;
  swift_retain(v71);
  sub_100022BA4((uint64_t)v129, v128);
  swift_release(v71);

  v155[0] = v95;
  v155[1] = v96;
  v102 = v151;
  v103 = v148;
  v155[2] = v151;
  v155[3] = v148;
  v104 = v141;
  v155[4] = v141;
  v155[5] = v97;
  v105 = v136;
  v155[6] = v136;
  v155[7] = v135;
  v155[8] = v99;
  v106 = v130;
  v155[9] = v130;
  v155[10] = v98;
  v107 = v149;
  v155[11] = v130;
  v155[12] = v149;
  v155[13] = v154;
  v155[14] = v100;
  v108 = v152;
  v155[15] = v101;
  v155[16] = v153;
  v155[17] = v145;
  v155[18] = v139;
  v109 = v131;
  v110 = v132;
  v155[19] = v131;
  v155[20] = v147;
  v155[21] = v146;
  v155[22] = v143;
  v155[23] = v142;
  v155[24] = v150;
  v155[25] = v132;
  v155[26] = v152;
  sub_100011450((uint64_t)v155);
  v156 = v137;
  *(_QWORD *)&v157 = v102;
  *((_QWORD *)&v157 + 1) = v103;
  *(_QWORD *)&v158 = v104;
  v111 = v127;
  *((_QWORD *)&v158 + 1) = v127;
  *(_QWORD *)&v159 = v105;
  v112 = v135;
  *((_QWORD *)&v159 + 1) = v135;
  v113 = v139;
  *(_QWORD *)&v160 = v140;
  *((_QWORD *)&v160 + 1) = v106;
  *(_QWORD *)&v161 = v138;
  *((_QWORD *)&v161 + 1) = v106;
  *(_QWORD *)&v162 = v107;
  *((_QWORD *)&v162 + 1) = v154;
  v163 = v144;
  *(_QWORD *)&v164 = v153;
  v114 = v146;
  *((_QWORD *)&v164 + 1) = v145;
  *(_QWORD *)&v165 = v139;
  *((_QWORD *)&v165 + 1) = v109;
  *(_QWORD *)&v166 = v147;
  *((_QWORD *)&v166 + 1) = v146;
  v115 = v142;
  *(_QWORD *)&v167 = v143;
  *((_QWORD *)&v167 + 1) = v142;
  *(_QWORD *)&v168 = v150;
  *((_QWORD *)&v168 + 1) = v110;
  v169 = v108;
  sub_100021D04((uint64_t)&v156);
  swift_release_n(v106, 2);
  swift_release(v113);
  swift_release(v109);
  swift_release(v114);
  swift_release(v115);

  swift_release(v108);
  v116 = v167;
  v117 = v134;
  *(_OWORD *)(v134 + 160) = v166;
  *(_OWORD *)(v117 + 176) = v116;
  *(_OWORD *)(v117 + 192) = v168;
  *(_QWORD *)(v117 + 208) = v169;
  v118 = v163;
  *(_OWORD *)(v117 + 96) = v162;
  *(_OWORD *)(v117 + 112) = v118;
  v119 = v165;
  *(_OWORD *)(v117 + 128) = v164;
  *(_OWORD *)(v117 + 144) = v119;
  v120 = v159;
  *(_OWORD *)(v117 + 32) = v158;
  *(_OWORD *)(v117 + 48) = v120;
  v121 = v161;
  *(_OWORD *)(v117 + 64) = v160;
  *(_OWORD *)(v117 + 80) = v121;
  result = *(double *)&v156;
  v123 = v157;
  *(_OWORD *)v117 = v156;
  *(_OWORD *)(v117 + 16) = v123;
  return result;
}

uint64_t sub_1000E164C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 88));

  return swift_deallocObject(v0, 128, 7);
}

id sub_1000E16D8(void *a1)
{
  uint64_t v1;

  return sub_1000DD264(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72), *(void **)(v1 + 80), *(_QWORD *)(v1 + 88), *(void **)(v1 + 96), *(void **)(v1 + 104), *(void **)(v1 + 112), *(void **)(v1 + 120));
}

uint64_t sub_1000E1720()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

void sub_1000E178C()
{
  uint64_t v0;

  sub_1000DD3E4(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64), *(void **)(v0 + 72), *(void **)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_1000E17C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000E17F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EEE0;
  if (!qword_10081EEE0)
  {
    v1 = sub_100007050(&qword_10081EDD8);
    sub_1000E1874();
    sub_100028384(&qword_10081EF60, &qword_10081EF68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EEE0);
  }
  return result;
}

unint64_t sub_1000E1874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EEE8;
  if (!qword_10081EEE8)
  {
    v1 = sub_100007050(&qword_10081EDB8);
    sub_1000E18F8();
    sub_100028384(&qword_10081EF50, &qword_10081EF58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EEE8);
  }
  return result;
}

unint64_t sub_1000E18F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EEF0;
  if (!qword_10081EEF0)
  {
    v1 = sub_100007050(&qword_10081EDB0);
    sub_1000E197C();
    sub_100028384(&qword_10081EF40, &qword_10081EF48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EEF0);
  }
  return result;
}

unint64_t sub_1000E197C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EEF8;
  if (!qword_10081EEF8)
  {
    v1 = sub_100007050(&qword_10081EDA8);
    sub_1000E1A00();
    sub_100028384(&qword_10081EF30, &qword_10081EF38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EEF8);
  }
  return result;
}

unint64_t sub_1000E1A00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EF00;
  if (!qword_10081EF00)
  {
    v1 = sub_100007050(&qword_10081EDA0);
    sub_1000E1A9C(&qword_10081EF08, &qword_10081ED98, (void (*)(void))sub_1000E1B00);
    sub_100028384(&qword_10081EF20, &qword_10081EF28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EF00);
  }
  return result;
}

uint64_t sub_1000E1A9C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007050(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E1B00()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  ValueMetadata *v4;
  unint64_t v5;

  result = qword_10081EF10;
  if (!qword_10081EF10)
  {
    v1 = sub_100007050(&qword_10081EF18);
    v4 = &type metadata for FriendSetupView;
    v5 = sub_1000E065C();
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v2 = sub_100007050(&qword_10081EDE0);
    v3 = sub_1000E1A9C(&qword_10081EE10, &qword_10081EDE0, (void (*)(void))sub_1000E06A0);
    v4 = (ValueMetadata *)v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EF10);
  }
  return result;
}

void destroy for MirrorStackedMetricsView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for MirrorStackedMetricsView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = (void *)a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = (void *)a2[4];
  a1[4] = v6;
  swift_retain(v3);
  v7 = v5;
  swift_bridgeObjectRetain(v4);
  v8 = v6;
  return a1;
}

_QWORD *assignWithCopy for MirrorStackedMetricsView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = a2[3];
  v10 = a1[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = (void *)a2[4];
  v12 = (void *)a1[4];
  a1[4] = v11;
  v13 = v11;

  return a1;
}

__n128 initializeWithTake for MirrorStackedMetricsView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for MirrorStackedMetricsView(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  swift_bridgeObjectRelease(a1[3]);
  v5 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorStackedMetricsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorStackedMetricsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorStackedMetricsView()
{
  return &type metadata for MirrorStackedMetricsView;
}

uint64_t sub_1000E1E04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AAF10, 1);
}

id sub_1000E1E14@<X0>(uint64_t a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  __int128 v53;

  v51 = a3;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v48 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WorkoutViewStyle(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_10081EFB0);
  v41 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100047110(&qword_10081EF98);
  __chkstk_darwin(v40);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_10081EF90);
  v44 = *(_QWORD *)(v15 - 8);
  v45 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110(&qword_10081EF80);
  v42 = *(_QWORD *)(v18 - 8);
  v43 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *((_QWORD *)a2 + 2);
  v22 = *((_QWORD *)a2 + 4);
  v53 = *a2;
  v23 = *((_QWORD *)&v53 + 1);
  swift_retain(*((_QWORD *)&v53 + 1));
  static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)(a1, v21, v22, v23);
  sub_10004D634((uint64_t)&v53);
  result = (id)HKWorkoutMetricTypeDescription(a1);
  if (result)
  {
    v25 = result;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v28 = v27;

    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v29, &opaque type descriptor for <<opaque return type of static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)>>, 1);
    View.accessibilityIdentifier(_:)(v26, v28, v10, OpaqueTypeConformance2);
    v31 = swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v12, v10, v31);
    v33 = v46;
    v32 = v47;
    (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v9, enum case for WorkoutViewStyle.iOSNormalMetric(_:), v47);
    v34 = sub_1000E25D4();
    v35 = v40;
    View.workoutViewStyle(_:)(v9, v40, v34);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
    v36 = sub_1000E2664((uint64_t)v14);
    v37 = v48;
    static AccessibilityChildBehavior.combine.getter(v36);
    v52[0] = v35;
    v52[1] = v34;
    v38 = swift_getOpaqueTypeConformance2(v52, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
    v39 = v45;
    View.accessibilityElement(children:)(v37, v45, v38);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v50);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v39);
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v51, v20, v43);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E2148@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = (void *)*((_QWORD *)v1 + 2);
  v3 = *((_QWORD *)v1 + 3);
  v5 = (void *)*((_QWORD *)v1 + 4);
  sub_1000E2468();
  *a1 = v6;
  sub_100047110(&qword_10081EF70);
  swift_bridgeObjectRetain(v3);
  sub_1003632E0(v7);
  v9 = v8;
  swift_bridgeObjectRelease(v3);
  v24 = v9;
  KeyPath = swift_getKeyPath(&unk_100622D40);
  v25 = *v1;
  v11 = swift_allocObject(&unk_100784AB0, 56, 7);
  *(_OWORD *)(v11 + 16) = *v1;
  *(_QWORD *)(v11 + 32) = v4;
  *(_QWORD *)(v11 + 40) = v3;
  *(_QWORD *)(v11 + 48) = v5;
  v12 = swift_allocObject(&unk_100784AD8, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1000E2580;
  *(_QWORD *)(v12 + 24) = v11;
  swift_bridgeObjectRetain(v3);
  sub_10004D65C((uint64_t)&v25);
  v13 = v4;
  v14 = v5;
  v15 = sub_100047110(&qword_10081EF78);
  v16 = sub_100047110(&qword_10081EF80);
  v17 = sub_100028384(&qword_10081EF88, &qword_10081EF78, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = sub_100007050(&qword_10081EF90);
  v22 = sub_100007050(&qword_10081EF98);
  v23 = sub_1000E25D4();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
  v22 = v18;
  v23 = OpaqueTypeConformance2;
  v20 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  return ForEach<>.init(_:id:content:)(&v24, KeyPath, sub_1000E25AC, v12, v15, v16, v17, &protocol witness table for Int, v20);
}

double sub_1000E2318(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

uint64_t sub_1000E2338(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double *v9;

  return sub_1000E2888(a9, a1, a2, a3, a4, *v9);
}

uint64_t sub_1000E2348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000E23A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000E2374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000E23A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000E23A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_1000E23DC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000E2438;
}

void sub_1000E2438(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1000E2468()
{
  void *v0;
  id v1;
  char v2;
  double v3;
  id v4;
  char v5;
  __n128 v6;
  __n128 v7;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = UIDevice.isLargeDisplayZoomEnabled.getter();

  if ((v2 & 1) != 0)
    v3 = 44.0;
  else
    v3 = 54.0;
  v4 = objc_msgSend(v0, "currentDevice");
  v5 = UIDevice.isLargeDisplayZoomEnabled.getter();

  v7.n128_u64[0] = 0x404C800000000000;
  if ((v5 & 1) != 0)
    v6.n128_f64[0] = 67.0;
  else
    v6.n128_f64[0] = 57.0;
  return static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v3, 60.0, v6, 62.0, v7, 66.0, 66.0);
}

uint64_t sub_1000E2544()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

id sub_1000E2580@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000E1E14(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t sub_1000E2588()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E25AC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

unint64_t sub_1000E25D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EFA0;
  if (!qword_10081EFA0)
  {
    v1 = sub_100007050(&qword_10081EF98);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of static MetricViewBuilder.view(metricType:formattingManager:activityType:metricsPublisher:)>>, 1);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EFA0);
  }
  return result;
}

uint64_t sub_1000E2664(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081EF98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for MirrorMetricsViewStackedLayout()
{
  return &type metadata for MirrorMetricsViewStackedLayout;
}

unint64_t sub_1000E26B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EFB8;
  if (!qword_10081EFB8)
  {
    v1 = sub_100007050(&qword_10081EF70);
    sub_100028384(&qword_10081EFC0, &qword_10081EFC8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_1000E273C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EFB8);
  }
  return result;
}

unint64_t sub_1000E273C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_10081EFD0;
  if (!qword_10081EFD0)
  {
    v1 = sub_100007050(&qword_10081EFD8);
    v2 = sub_100007050(&qword_10081EF90);
    v4 = sub_100007050(&qword_10081EF98);
    v5 = sub_1000E25D4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10081EFD0);
  }
  return result;
}

unint64_t sub_1000E27FC()
{
  unint64_t result;

  result = qword_10081EFE0;
  if (!qword_10081EFE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_10081EFE0);
  }
  return result;
}

unint64_t sub_1000E2844()
{
  unint64_t result;

  result = qword_10081EFE8;
  if (!qword_10081EFE8)
  {
    result = swift_getWitnessTable(&unk_100622D80, &type metadata for MirrorMetricsViewStackedLayout);
    atomic_store(result, (unint64_t *)&qword_10081EFE8);
  }
  return result;
}

uint64_t sub_1000E2888(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v12 = type metadata accessor for LayoutSubview(0);
  v48 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MetricPlatterConstants(0);
  v50 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LayoutSubviews(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  v22 = sub_1000083D8((unint64_t *)&qword_10081EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(&v52, v18, v22);
  dispatch thunk of Collection.endIndex.getter(&v51, v18, v22);
  v23 = dispatch thunk of Collection.distance(from:to:)(&v52, &v51, v18, v22);
  result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (v23 > 5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v25 = MetricPlatterConstants.init()(result);
  v26 = MetricPlatterConstants.metricMaxHeight.getter(v25);
  v27 = *(void (**)(char *, uint64_t))(v50 + 8);
  v27(v17, v15);
  dispatch thunk of Collection.startIndex.getter(&v52, v18, v22);
  dispatch thunk of Collection.endIndex.getter(&v51, v18, v22);
  v28 = dispatch thunk of Collection.distance(from:to:)(&v52, &v51, v18, v22);
  v29 = MetricPlatterConstants.init()(v28);
  v30 = MetricPlatterConstants.metricMaxHeight.getter(v29);
  v27(v17, v15);
  v31 = 4;
  if (v28 > 4)
    v31 = v28;
  v32 = (double)v31;
  if (a5 - a6 - v30 * (double)v31 < 0.0)
    v33 = 0.0;
  else
    v33 = a5 - a6 - v30 * (double)v31;
  dispatch thunk of Collection.startIndex.getter(&v52, v18, v22);
  dispatch thunk of Collection.endIndex.getter(&v51, v18, v22);
  result = dispatch thunk of Collection.distance(from:to:)(&v52, &v51, v18, v22);
  if (result < 0)
    goto LABEL_13;
  v34 = result;
  v50 = v15;
  v36 = v48;
  v35 = v49;
  if (result)
  {
    result = 0;
    v37 = v26 + v33 / (v32 + -1.0);
    v38 = a4;
    do
    {
      v39 = result + 1;
      v40 = v37 * (double)result + a3 + 8.0;
      v41 = LayoutSubviews.subscript.getter();
      v42 = MetricPlatterConstants.init()(v41);
      v43 = MetricPlatterConstants.metricMaxHeight.getter(v42);
      v44 = ((uint64_t (*)(char *, uint64_t))v27)(v17, v50);
      v45 = static UnitPoint.topLeading.getter(v44);
      LOBYTE(v52) = 0;
      LOBYTE(v51) = 0;
      LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v38, 0, *(_QWORD *)&v43, 0, a2, v40, v45, v46);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v35);
      result = v39;
    }
    while (v34 != v39);
  }
  return result;
}

uint64_t destroy for SleepingSampleMetricLineChart(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for SleepingSampleMetricLineChart(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for SleepingSampleMetricLineChart(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

__n128 initializeWithTake for ActivitySharingFriendDetailAlertType(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SleepingSampleMetricLineChart(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleMetricLineChart(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleMetricLineChart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleMetricLineChart()
{
  return &type metadata for SleepingSampleMetricLineChart;
}

uint64_t sub_1000E2E1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AAF54, 1);
}

_QWORD *sub_1000E2E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = type metadata accessor for BaselineRelativeValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for SleepingSampleSingleMetricChartPoint(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  v12 = __chkstk_darwin(v11);
  v47 = (uint64_t)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v39 = (char *)v34 - v15;
  __chkstk_darwin(v14);
  v38 = (uint64_t)v34 - v16;
  if (a2 == a1)
    return _swiftEmptyArrayStorage;
  v34[1] = v3;
  v17 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v44 = *(_QWORD *)(v17 - 8);
  v43 = a3 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
  v48 = *(_QWORD *)(a3 + 16);
  v42 = enum case for BaselineRelativeValue.determinate(_:);
  v34[0] = a3;
  v18 = swift_bridgeObjectRetain(a3);
  v19 = _swiftEmptyArrayStorage;
  v20 = a2;
  v36 = v8;
  v37 = a2;
  v45 = a1;
  v46 = v17;
  v35 = v7;
  while (1)
  {
    v21 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v21 > a1 || v21 <= a2)
      goto LABEL_17;
    if (v21 < 1)
      goto LABEL_18;
    if (v21 > v48)
      goto LABEL_19;
    v22 = v43 + *(_QWORD *)(v44 + 72) * v20;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, v22 + *(int *)(v17 + 20), v7, v18);
    v23 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
    if (v23 == v42)
    {
      (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
      v24 = *v10;
      v25 = type metadata accessor for Date(0);
      v26 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v39, v22, v25);
      v27 = *(_QWORD *)(v22 + *(int *)(v17 + 24));
      v28 = v41;
      *(_QWORD *)&v26[*(int *)(v41 + 20)] = v24;
      *(_QWORD *)&v26[*(int *)(v28 + 24)] = v27;
      v29 = (uint64_t)v26;
      v30 = v38;
      sub_1000E44AC(v29, v38);
      sub_1000E44AC(v30, v47);
      swift_retain(v27);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = (_QWORD *)sub_10013F87C(0, v19[2] + 1, 1, (unint64_t)v19);
      v32 = v19[2];
      v31 = v19[3];
      v7 = v35;
      v8 = v36;
      if (v32 >= v31 >> 1)
        v19 = (_QWORD *)sub_10013F87C(v31 > 1, v32 + 1, 1, (unint64_t)v19);
      v19[2] = v32 + 1;
      sub_1000E44AC(v47, (uint64_t)v19+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v32);
      a2 = v37;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
    }
    ++v20;
    a1 = v45;
    v17 = v46;
    if (v21 == v45)
      goto LABEL_20;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  swift_bridgeObjectRelease(v34[0]);
  return v19;
}

_QWORD *sub_1000E3170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t *, uint64_t, uint64_t, __n128);
  uint64_t v41;

  v3 = type metadata accessor for BaselineRelativeValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SleepingSampleSingleMetricChartPoint(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v36 = (char *)v33 - v10;
  __chkstk_darwin(v9);
  v37 = (uint64_t)v33 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v33[1] = v1;
  v41 = v11;
  v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = enum case for BaselineRelativeValue.determinate(_:);
  v40 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v4 + 16);
  v33[0] = a1;
  v19 = swift_bridgeObjectRetain(a1);
  v20 = _swiftEmptyArrayStorage;
  v35 = v14;
  v34 = v18;
  do
  {
    v40(v6, v16 + *(int *)(v14 + 20), v3, v19);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 88))(v6, v3) == v18)
    {
      v21 = v17;
      v22 = v4;
      (*(void (**)(uint64_t *, uint64_t))(v4 + 96))(v6, v3);
      v23 = *v6;
      v24 = type metadata accessor for Date(0);
      v25 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v36, v16, v24);
      v26 = *(_QWORD *)(v16 + *(int *)(v14 + 24));
      v27 = v39;
      *(_QWORD *)&v25[*(int *)(v39 + 20)] = v23;
      *(_QWORD *)&v25[*(int *)(v27 + 24)] = v26;
      v28 = (uint64_t)v25;
      v29 = v37;
      sub_1000E44AC(v28, v37);
      sub_1000E44AC(v29, v41);
      swift_retain(v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        v20 = (_QWORD *)sub_10013F87C(0, v20[2] + 1, 1, (unint64_t)v20);
      v4 = v22;
      v17 = v21;
      v31 = v20[2];
      v30 = v20[3];
      if (v31 >= v30 >> 1)
        v20 = (_QWORD *)sub_10013F87C(v30 > 1, v31 + 1, 1, (unint64_t)v20);
      v20[2] = v31 + 1;
      sub_1000E44AC(v41, (uint64_t)v20+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v31);
      v14 = v35;
      v18 = v34;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
    }
    v16 += v17;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease(v33[0]);
  return v20;
}

uint64_t sub_1000E345C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[3];
  _OWORD v85[3];
  char v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  char v89;
  char v90;
  char v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  char v94;
  char v95;
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _QWORD v114[2];
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v4 = sub_100047110(&qword_10081F000);
  v67 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_10081F008);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_10081F010);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v65 = (uint64_t)&v50 - v16;
  v83 = static VerticalAlignment.center.getter(v15);
  sub_1000E3F64(1751607624, 0xE400000000000000, (uint64_t)&v131);
  v81 = v133;
  v82 = v131;
  v79 = v136;
  v80 = v134;
  v78 = v137;
  v69 = v132;
  v70 = v138;
  v77 = v139;
  v71 = v140;
  v75 = v142;
  v76 = v141;
  v73 = v144;
  v74 = v143;
  v72 = v145;
  v90 = 1;
  v89 = v132;
  v88 = v135;
  v87 = v138;
  v86 = v140;
  v68 = v135;
  v84[2] = a1;
  v17 = sub_100047110(&qword_10081F018);
  v18 = sub_1000E416C();
  Chart.init(content:)(sub_1000E4164, v84, v17, v18);
  v19 = sub_100028384(&qword_10081F048, &qword_10081F000, (uint64_t)&protocol conformance descriptor for Chart<A>);
  View.chartYAxis(_:)(2, v4, v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v6, v4);
  v21 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)(v85, 0, 1, 0x4044000000000000, 0, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
  v23 = &v14[*(int *)(v11 + 36)];
  v24 = v85[1];
  *(_OWORD *)v23 = v85[0];
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v85[2];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v25 = v65;
  v26 = sub_1000E42A0((uint64_t)v14, v65);
  v64 = static VerticalAlignment.center.getter(v26);
  sub_1000E3F64(7827276, 0xE300000000000000, (uint64_t)&v131);
  v27 = v134;
  v62 = v133;
  v63 = v131;
  v50 = v134;
  v60 = v137;
  v61 = v136;
  v59 = v139;
  v57 = v142;
  v58 = v141;
  v56 = v143;
  v66 = v145;
  v67 = v144;
  v95 = 1;
  v94 = v132;
  LOBYTE(v10) = v132;
  v52 = v132;
  v53 = v138;
  v93 = v135;
  v92 = v138;
  LOBYTE(v7) = v138;
  v91 = v140;
  LOBYTE(v8) = v140;
  v54 = v140;
  LOBYTE(v6) = v135;
  v51 = v135;
  v55 = v14;
  sub_1000E42E8(v25, (uint64_t)v14);
  v96[0] = v83;
  v96[1] = 0;
  LOBYTE(v97) = 1;
  *((_QWORD *)&v97 + 1) = v82;
  LOBYTE(v98) = v69;
  *((_QWORD *)&v98 + 1) = v81;
  *(_QWORD *)&v99 = v80;
  BYTE8(v99) = v68;
  *(_QWORD *)&v100 = v79;
  *((_QWORD *)&v100 + 1) = v78;
  LOBYTE(v101) = v70;
  *((_QWORD *)&v101 + 1) = v77;
  LOBYTE(v102) = v71;
  *((_QWORD *)&v102 + 1) = v76;
  *(_QWORD *)&v103 = v75;
  *((_QWORD *)&v103 + 1) = v74;
  *(_QWORD *)&v104 = v73;
  *((_QWORD *)&v104 + 1) = v72;
  v28 = v97;
  *a2 = (unint64_t)v83;
  a2[1] = v28;
  v29 = v104;
  v30 = v102;
  a2[7] = v103;
  a2[8] = v29;
  v31 = v100;
  a2[5] = v101;
  a2[6] = v30;
  v32 = v98;
  a2[3] = v99;
  a2[4] = v31;
  a2[2] = v32;
  v33 = sub_100047110(&qword_10081F050);
  sub_1000E42E8((uint64_t)v14, (uint64_t)a2 + *(int *)(v33 + 48));
  v34 = (_OWORD *)((char *)a2 + *(int *)(v33 + 64));
  v36 = v63;
  v35 = v64;
  v105[0] = v64;
  v105[1] = 0;
  LOBYTE(v106) = 1;
  *((_QWORD *)&v106 + 1) = v63;
  LOBYTE(v107) = (_BYTE)v10;
  v37 = v61;
  v38 = v62;
  *((_QWORD *)&v107 + 1) = v62;
  *(_QWORD *)&v108 = v27;
  BYTE8(v108) = (_BYTE)v6;
  *(_QWORD *)&v109 = v61;
  v39 = v59;
  v40 = v60;
  *((_QWORD *)&v109 + 1) = v60;
  LOBYTE(v110) = v7;
  *((_QWORD *)&v110 + 1) = v59;
  LOBYTE(v111) = v8;
  v42 = v57;
  v41 = v58;
  *((_QWORD *)&v111 + 1) = v58;
  *(_QWORD *)&v112 = v57;
  v43 = v56;
  *((_QWORD *)&v112 + 1) = v56;
  *(_QWORD *)&v113 = v67;
  *((_QWORD *)&v113 + 1) = v66;
  v44 = v106;
  *v34 = (unint64_t)v64;
  v34[1] = v44;
  v45 = v108;
  v34[2] = v107;
  v34[3] = v45;
  v46 = v113;
  v47 = v111;
  v34[7] = v112;
  v34[8] = v46;
  v48 = v110;
  v34[4] = v109;
  v34[5] = v48;
  v34[6] = v47;
  sub_1000E4330((uint64_t)v96);
  sub_1000E4330((uint64_t)v105);
  sub_1000E43AC(v65);
  v114[0] = v35;
  v114[1] = 0;
  v115 = 1;
  v116 = v36;
  v117 = v52;
  v118 = v38;
  v119 = v50;
  v120 = v51;
  v121 = v37;
  v122 = v40;
  v123 = v53;
  v124 = v39;
  v125 = v54;
  v126 = v41;
  v127 = v42;
  v128 = v43;
  v129 = v67;
  v130 = v66;
  sub_1000E43EC((uint64_t)v114);
  sub_1000E43AC((uint64_t)v55);
  v131 = v83;
  v132 = 0;
  LOBYTE(v133) = 1;
  v134 = v82;
  v135 = v69;
  v136 = v81;
  v137 = v80;
  v138 = v68;
  v139 = v79;
  v140 = v78;
  LOBYTE(v141) = v70;
  v142 = v77;
  LOBYTE(v143) = v71;
  v144 = v76;
  v145 = v75;
  v146 = v74;
  v147 = v73;
  v148 = v72;
  return sub_1000E43EC((uint64_t)&v131);
}

uint64_t sub_1000E3A9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __n128 v37;
  BOOL v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t, __n128);
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a2;
  v67 = a1;
  v3 = type metadata accessor for BaselineRelativeValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  v59 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100047110(&qword_10081F058);
  __chkstk_darwin(v63);
  v60 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100047110(&qword_10081F030);
  v62 = *(_QWORD *)(v65 - 8);
  v10 = __chkstk_darwin(v65);
  v64 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - v12;
  v14 = a1[2];
  v69 = v14;
  KeyPath = swift_getKeyPath(&unk_100622F28);
  swift_bridgeObjectRetain(v14);
  v16 = sub_100047110(&qword_10081F060);
  v17 = type metadata accessor for SleepingSampleBaselineBand(0);
  v18 = sub_100028384(&qword_10081F068, &qword_10081F060, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_1000083D8(&qword_10081F070, type metadata accessor for SleepingSampleBaselineBand.Configuration, (uint64_t)&unk_10063CD90);
  v20 = sub_1000083D8(&qword_10081F038, type metadata accessor for SleepingSampleBaselineBand, (uint64_t)&unk_10063CDD0);
  v61 = v13;
  ForEach<>.init(_:id:content:)(&v69, KeyPath, sub_1000E3F44, 0, v16, v17, v18, v19, v20);
  v21 = *v67;
  v22 = *(_QWORD *)(*v67 + 16);
  if (!v22)
  {
    swift_bridgeObjectRetain(*v67);
    v29 = 0;
LABEL_8:
    v68 = (uint64_t)sub_1000E2E2C(v22, v29, v21);
    swift_bridgeObjectRelease(v21);
    v33 = v67;
    v34 = v67[1];
    swift_bridgeObjectRetain(v34);
    v36 = sub_1000E3170(v35);
    v37 = swift_bridgeObjectRelease(v34);
    v38 = *(_QWORD *)(v33[3] + 16) < 0x1EuLL;
    LODWORD(v67) = *((unsigned __int8 *)v33 + 32);
    v40 = v61;
    v39 = v62;
    v41 = *(void (**)(char *, char *, uint64_t, __n128))(v62 + 16);
    v43 = v64;
    v42 = v65;
    v41(v64, v61, v65, v37);
    sub_1000E41E0();
    v44 = v60;
    ((void (*)(char *, char *, uint64_t))v41)(v60, v43, v42);
    sub_1000E425C();
    v45 = v63;
    v46 = &v44[*(int *)(v63 + 48)];
    v47 = v68;
    *(_QWORD *)v46 = v68;
    *((_QWORD *)v46 + 1) = v36;
    v46[16] = v38;
    *(_OWORD *)(v46 + 24) = xmmword_100622E50;
    *((_QWORD *)v46 + 5) = 0;
    *((_OWORD *)v46 + 3) = xmmword_100622E60;
    *((_QWORD *)v46 + 8) = 0x4010000000000000;
    v46[72] = (char)v67;
    v48 = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v66, v44, v42);
    v49 = v48 + *(int *)(v45 + 48);
    v50 = v46[16];
    v51 = *((_QWORD *)v46 + 5);
    v52 = *((_QWORD *)v46 + 8);
    v53 = v46[72];
    *(_OWORD *)v49 = *(_OWORD *)v46;
    *(_BYTE *)(v49 + 16) = v50;
    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v46 + 24);
    *(_QWORD *)(v49 + 40) = v51;
    *(_OWORD *)(v49 + 48) = *((_OWORD *)v46 + 3);
    *(_QWORD *)(v49 + 64) = v52;
    *(_BYTE *)(v49 + 72) = v53;
    v54 = *(void (**)(char *, uint64_t, __n128))(v39 + 8);
    swift_bridgeObjectRetain(v47);
    v55 = swift_bridgeObjectRetain(v36);
    v54(v40, v42, v55);
    swift_bridgeObjectRelease(v36);
    v56 = swift_bridgeObjectRelease(v47);
    return ((uint64_t (*)(char *, uint64_t, __n128))v54)(v43, v42, v56);
  }
  v23 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v24 = enum case for BaselineRelativeValue.indeterminate(_:);
  v25 = *(_QWORD *)(v59 + 72);
  swift_bridgeObjectRetain(v21);
  v59 = v21;
  v26 = v22;
  v27 = v21 + v23 + v25 * (v22 - 1);
  v28 = -v25;
  v58 = v26;
  v29 = v26;
  while (1)
  {
    sub_10004F8C8(v27, (uint64_t)v8, type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
    v30 = &v8[*(int *)(v68 + 20)];
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 104))(v6, v24, v3);
    v31 = sub_1000083D8(&qword_10081F078, (uint64_t (*)(uint64_t))&type metadata accessor for BaselineRelativeValue, (uint64_t)&protocol conformance descriptor for BaselineRelativeValue);
    LOBYTE(v30) = dispatch thunk of static Equatable.== infix(_:_:)(v30, v6, v3, v31);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    result = sub_1000E4470((uint64_t)v8);
    if ((v30 & 1) != 0)
      break;
    v27 += v28;
    if (!--v29)
    {
      v22 = v58;
      v21 = v59;
      goto LABEL_8;
    }
  }
  v22 = v58;
  v21 = v59;
  if (v58 >= v29)
    goto LABEL_8;
  __break(1u);
  return result;
}

uint64_t sub_1000E3F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004F8C8(a1, a2, type metadata accessor for SleepingSampleBaselineBand.Configuration);
}

double sub_1000E3F64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t KeyPath;
  id v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  LOWORD(v22) = 256;
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Alignment.trailing.getter(v5, v6);
  v14 = _FrameLayout.init(width:height:alignment:)(&v27, 0, 1, 0, 1, v12, v13);
  v15 = v27;
  v16 = v28;
  v26 = v29;
  v25 = v30;
  v23 = v32;
  v24 = v31;
  v17 = static Font.caption2.getter(v14);
  KeyPath = swift_getKeyPath(&unk_100622EF0);
  v19 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor", 0, v22);
  v20 = Color.init(_:)(v19);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 48) = v15;
  *(_BYTE *)(a3 + 56) = v16;
  *(_QWORD *)(a3 + 64) = v26;
  *(_BYTE *)(a3 + 72) = v25;
  *(_QWORD *)(a3 + 80) = v24;
  *(_QWORD *)(a3 + 88) = v23;
  *(_QWORD *)(a3 + 96) = KeyPath;
  *(_QWORD *)(a3 + 104) = v17;
  *(_QWORD *)(a3 + 112) = v20;
  sub_1000E439C(v5, v7, v11);
  swift_bridgeObjectRetain(v9);
  swift_retain(KeyPath);
  swift_retain(v17);
  swift_retain(v20);
  sub_1000E4458(v5, v7, v11);
  swift_release(v20);
  swift_release(v17);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

uint64_t sub_1000E4104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  char v12;

  v8 = *(_OWORD *)(v6 + 16);
  v11[0] = *(_OWORD *)v6;
  v11[1] = v8;
  v12 = *(_BYTE *)(v6 + 32);
  *(_QWORD *)a6 = static HorizontalAlignment.center.getter(a1, a2, a3, a4, a5);
  *(_QWORD *)(a6 + 8) = 0x4000000000000000;
  *(_BYTE *)(a6 + 16) = 0;
  v9 = sub_100047110(&qword_10081EFF8);
  return sub_1000E345C((uint64_t)v11, (_OWORD *)(a6 + *(int *)(v9 + 44)));
}

uint64_t sub_1000E4164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E3A9C(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_1000E416C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F020;
  if (!qword_10081F020)
  {
    v1 = sub_100007050(&qword_10081F018);
    sub_1000E41E0();
    sub_1000E425C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F020);
  }
  return result;
}

unint64_t sub_1000E41E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F028;
  if (!qword_10081F028)
  {
    v1 = sub_100007050(&qword_10081F030);
    sub_1000083D8(&qword_10081F038, type metadata accessor for SleepingSampleBaselineBand, (uint64_t)&unk_10063CDD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F028);
  }
  return result;
}

unint64_t sub_1000E425C()
{
  unint64_t result;

  result = qword_10081F040;
  if (!qword_10081F040)
  {
    result = swift_getWitnessTable(&unk_10062BA80, &type metadata for SleepingSampleSmoothedLineTrace);
    atomic_store(result, (unint64_t *)&qword_10081F040);
  }
  return result;
}

uint64_t sub_1000E42A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081F010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E42E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081F010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E4330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  sub_1000E439C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000E439C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000E43AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081F010);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E43EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  sub_1000E4458(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_1000E4458(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000E4470(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E44AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleSingleMetricChartPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E44F0()
{
  return sub_100028384(&qword_10081F080, &qword_10081F088, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1000E451C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  _QWORD v55[3];

  v44 = a5;
  v45 = a6;
  v43 = a4;
  v42 = a3;
  v40 = a1;
  v41 = a2;
  v53 = a15;
  v51 = a14;
  v52 = a8;
  v50 = a13;
  v48 = a7;
  v49 = a12;
  v46 = a10;
  v47 = a11;
  v16 = sub_100047110(&qword_10081F090);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v39 - v20;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v39 - v27;
  v29 = (int *)type metadata accessor for MetricDetailView(0);
  v30 = (_QWORD *)(a9 + v29[9]);
  Date.init()(v29);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v22);
  State.init(wrappedValue:)(v30, v26, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
  v31 = (_QWORD *)(a9 + v29[10]);
  v54 = sub_10043D364((uint64_t)_swiftEmptyArrayStorage);
  v32 = sub_100047110(&qword_10081F098);
  State.init(wrappedValue:)(v55, &v54, v32);
  v33 = v55[1];
  *v31 = v55[0];
  v31[1] = v33;
  v34 = (_QWORD *)(a9 + v29[11]);
  v35 = type metadata accessor for MetricChartData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v21, 1, 1, v35);
  sub_100021CC0((uint64_t)v21, (uint64_t)v19, &qword_10081F090);
  State.init(wrappedValue:)(v34, v19, v16);
  sub_10001BE90((uint64_t)v21, &qword_10081F090);
  *(_BYTE *)a9 = v40;
  *(_BYTE *)(a9 + 1) = v41;
  *(_QWORD *)(a9 + 8) = v42;
  *(_BYTE *)(a9 + 16) = v43 & 1;
  v36 = v44;
  v37 = v45;
  *(_QWORD *)(a9 + 24) = 0;
  *(_QWORD *)(a9 + 32) = v36;
  *(_QWORD *)(a9 + 40) = 0;
  *(_QWORD *)(a9 + 48) = v36;
  *(_QWORD *)(a9 + v29[12]) = v37;
  result = sub_100047C88(v48, a9 + v29[13], type metadata accessor for MetricFormattingHelper);
  *(_QWORD *)(a9 + v29[14]) = v52;
  *(_QWORD *)(a9 + v29[15]) = v46;
  *(_QWORD *)(a9 + v29[16]) = v47;
  *(_QWORD *)(a9 + v29[17]) = v49;
  *(_QWORD *)(a9 + v29[18]) = v50;
  *(_QWORD *)(a9 + v29[19]) = v51;
  *(_BYTE *)(a9 + v29[20]) = v53;
  return result;
}

uint64_t type metadata accessor for MetricDetailView(uint64_t a1)
{
  uint64_t result;

  result = qword_10081F108;
  if (!qword_10081F108)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricDetailView);
  return result;
}

double sub_1000E4814()
{
  double result;

  result = 10.0;
  xmmword_100869C10 = xmmword_100622F50;
  *(_OWORD *)&qword_100869C20 = xmmword_100622F60;
  return result;
}

double sub_1000E4834()
{
  double result;

  xmmword_100869C30 = 0uLL;
  result = 20.0;
  xmmword_100869C40 = xmmword_100622F70;
  return result;
}

uint64_t sub_1000E4850()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v0 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Font.TextStyle.title(_:), v3);
  v7 = enum case for Font.Design.rounded(_:);
  v8 = type metadata accessor for Font.Design(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v2, v7, v8);
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  v11 = static Font.Weight.semibold.getter(v10);
  v12 = static Font.system(_:design:weight:)(v6, v2, *(_QWORD *)&v11, 0);
  sub_10001BE90((uint64_t)v2, &qword_10081F2F8);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  qword_100869C50 = v12;
  return result;
}

double sub_1000E499C()
{
  double result;

  xmmword_100869C58 = 0uLL;
  result = 20.0;
  xmmword_100869C68 = xmmword_100622F70;
  return result;
}

double sub_1000E49B8()
{
  double result;

  xmmword_100869C78 = 0uLL;
  result = 30.0;
  xmmword_100869C88 = xmmword_100622F80;
  return result;
}

uint64_t sub_1000E49D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.footnote(_:), v4);
  static Font.Weight.semibold.getter(v8);
  v9 = static Font.system(_:weight:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v10 = Font.leading(_:)(v3, v9);
  swift_release(v9);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_100869C98 = v10;
  return result;
}

uint64_t sub_1000E4B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v1);
  v3 = (char *)&KeyPath - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MetricDetailView(0);
  v4 = *(_BYTE *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_BYTE *)v0;
  v21 = *(_QWORD *)(v0 + 8);
  LOBYTE(v22) = v4;
  v23 = v5;
  v7 = sub_100047110(&qword_10081F1C0);
  State.wrappedValue.getter(&v24, v7);
  v8 = sub_100443474(v6);
  v10 = v9;
  v21 = v8;
  v22 = v9;
  v11 = sub_100038CA0();
  v12 = StringProtocol.localizedUppercase.getter(&type metadata for String, v11);
  v14 = v13;
  v15 = swift_bridgeObjectRelease(v10);
  AttributeContainer.init()(v15);
  AttributedString.init(_:attributes:)(v12, v14, v3);
  KeyPath = swift_getKeyPath(&unk_100623188);
  v16 = swift_getKeyPath(&unk_1006231B8);
  if (qword_10081D518 != -1)
    swift_once(&qword_10081D518, sub_1000E49D4);
  v17 = qword_100869C98;
  v21 = qword_100869C98;
  v18 = sub_1000EA1DC();
  swift_retain(v17);
  return AttributedString.subscript.setter(&v21, v16, v18);
}

uint64_t sub_1000E4C88@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  id *v15;
  id *v16;
  id v17;
  char v18;
  id v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;

  v2 = (char *)v1;
  v4 = type metadata accessor for MetricDetailViewModel(0);
  __chkstk_darwin(v4);
  v6 = (id *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MetricDetailView(0);
  v7 = *v1;
  sub_1000E4E90((uint64_t)v6);
  v8 = v1[16];
  v9 = *((_QWORD *)v1 + 3);
  v26 = *((_QWORD *)v1 + 1);
  v27 = v8;
  v28 = v9;
  v10 = sub_100047110(&qword_10081F1C0);
  State.wrappedValue.getter(&v29, v10);
  v11 = v29;
  v12 = v30;
  if (qword_10081D500 != -1)
    swift_once(&qword_10081D500, sub_1000E4850);
  v13 = qword_100869C50;
  if ((v12 & (v11 == 0)) != 0)
    v14 = (char *)v6;
  else
    v14 = (char *)(v6 + 1);
  if (((1 << v7) & 0x2224471F80) != 0)
    v15 = v6 + 1;
  else
    v15 = (id *)v14;
  if (((1 << v7) & 0x5DDBB8E070) != 0)
    v16 = v6;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *((_BYTE *)v6 + *(int *)(v4 + 40));
  v19 = *v16;
  sub_100443F58(v17, v7, v13, 0, 0, (v18 & 1) == 0, a1);

  sub_100011F54((uint64_t)v6, type metadata accessor for MetricDetailViewModel);
  KeyPath = swift_getKeyPath(&unk_100623118);
  *(&v25 - 2) = __chkstk_darwin(KeyPath);
  v21 = swift_getKeyPath(&unk_100623148);
  sub_1005F0EBC(*v2);
  v26 = Color.init(uiColor:)(v22);
  v23 = sub_1000EA158();
  return AttributedString.subscript.setter(&v26, v21, v23);
}

uint64_t sub_1000E4E90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::UInt v10;
  char v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD v34[3];
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for MetricDetailView(0);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_10081F218);
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000E710C();
  v12 = v11;
  v13 = (uint64_t *)(v1 + *(int *)(v4 + 40));
  v15 = *v13;
  v14 = v13[1];
  v34[1] = v15;
  v34[2] = v14;
  v16 = sub_100047110(&qword_10081F220);
  State.wrappedValue.getter(&v35, v16);
  v17 = v35;
  if (*(_QWORD *)(v35 + 16) && (v18 = sub_100439058(v10, v12 & 1), (v19 & 1) != 0))
  {
    v20 = v18;
    v21 = *(_QWORD *)(v17 + 56);
    v22 = type metadata accessor for MetricDetailViewModel(0);
    v23 = *(_QWORD *)(v22 - 8);
    sub_10004F8C8(v21 + *(_QWORD *)(v23 + 72) * v20, (uint64_t)v9, type metadata accessor for MetricDetailViewModel);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  }
  else
  {
    v22 = type metadata accessor for MetricDetailViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
  }
  swift_bridgeObjectRelease(v17);
  sub_10004F8C8(v2, (uint64_t)v6, type metadata accessor for MetricDetailView);
  type metadata accessor for MetricDetailViewModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v9, 1, v22) == 1)
  {
    v24 = (char *)sub_1000E710C();
    v26 = v25 & 1;
    sub_1004437C4(*v6);
    v28 = v27;
    v29 = (void *)objc_opt_self(HKQuantity);
    v30 = objc_msgSend(v29, "quantityWithUnit:doubleValue:", v28, 0.0);
    v31 = objc_msgSend(v29, "quantityWithUnit:doubleValue:", v28, 0.0);
    v32 = sub_10041E110(v24, v26, a1 + *(int *)(v22 + 36));
    Date.init()(v32);

    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v31;
    *(_QWORD *)(a1 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(a1 + 24) = _swiftEmptyArrayStorage;
    *(_QWORD *)(a1 + 32) = v24;
    *(_BYTE *)(a1 + 40) = v26;
    *(_BYTE *)(a1 + *(int *)(v22 + 40)) = 0;
    sub_100011F54((uint64_t)v6, type metadata accessor for MetricDetailView);
    return sub_10001BE90((uint64_t)v9, &qword_10081F218);
  }
  else
  {
    sub_100011F54((uint64_t)v6, type metadata accessor for MetricDetailView);
    return sub_100047C88((uint64_t)v9, a1, type metadata accessor for MetricDetailViewModel);
  }
}

uint64_t sub_1000E5144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80[16];
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;

  v77 = a1;
  v2 = type metadata accessor for TaskPriority(0);
  v74 = *(_QWORD *)(v2 - 8);
  v75 = v2;
  __chkstk_darwin(v2);
  v73 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for MetricDetailView(0);
  v4 = *(_QWORD *)(v76 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v76);
  v64 = sub_100047110(&qword_10081F190);
  v65 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100047110(&qword_10081F198);
  v70 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v63 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10081F1A0);
  v71 = *(_QWORD *)(v9 - 8);
  v72 = v9;
  __chkstk_darwin(v9);
  v66 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100047110(&qword_10081F1A8);
  v11 = __chkstk_darwin(v69);
  v68 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v1;
  v13 = static Axis.Set.vertical.getter(v11);
  v14 = sub_100047110(&qword_10081F1B0);
  v15 = sub_100028384(&qword_10081F1B8, &qword_10081F1B0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  ScrollView.init(_:showsIndicators:content:)(v13, 1, sub_1000E9704, v80, v14, v15);
  v16 = v1;
  v17 = *(_BYTE *)(v1 + 16);
  v18 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)&v82 = *(_QWORD *)(v1 + 8);
  BYTE8(v82) = v17;
  v83 = v18;
  v19 = sub_100047110(&qword_10081F1C0);
  State.wrappedValue.getter(&v85, v19);
  *(_QWORD *)&v82 = v85;
  BYTE8(v82) = v86;
  sub_10004F8C8(v1, (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricDetailView);
  v20 = *(unsigned __int8 *)(v4 + 80);
  v78 = (v20 + 16) & ~v20;
  v79 = v78 + v5;
  v21 = v78;
  v22 = v20 | 7;
  v61 = v20 | 7;
  v23 = swift_allocObject(&unk_100784CC8, v78 + v5, v20 | 7);
  v24 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047C88((uint64_t)v24, v23 + v21, type metadata accessor for MetricDetailView);
  v25 = sub_100028384(&qword_10081F1C8, &qword_10081F190, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v26 = sub_1000E9714();
  v27 = v63;
  v28 = v64;
  View.onChange<A>(of:initial:_:)(&v82, 0, sub_1000E9710, v23, v64, &type metadata for MetricDataProviderTimeScale, v25, v26);
  v29 = swift_release(v23);
  (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v7, v28, v29);
  v82 = *(_OWORD *)(v16 + 32);
  v30 = sub_100047110(&qword_10081F1D8);
  State.wrappedValue.getter(&v85, v30);
  v62 = v16;
  v31 = (uint64_t)v24;
  v60 = v24;
  sub_10004F8C8(v16, (uint64_t)v24, type metadata accessor for MetricDetailView);
  v32 = v79;
  v33 = swift_allocObject(&unk_100784CF0, v79, v22);
  v34 = v78;
  sub_100047C88(v31, v33 + v78, type metadata accessor for MetricDetailView);
  *(_QWORD *)&v82 = v28;
  *((_QWORD *)&v82 + 1) = &type metadata for MetricDataProviderTimeScale;
  v83 = v25;
  v84 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v36 = v66;
  v37 = v67;
  View.onChange<A>(of:initial:_:)(&v85, 0, sub_1000E9710, v33, v67, &type metadata for Int, OpaqueTypeConformance2, &protocol witness table for Int);
  v38 = swift_release(v33);
  (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v27, v37, v38);
  v39 = (uint64_t)v60;
  sub_10004F8C8(v16, (uint64_t)v60, type metadata accessor for MetricDetailView);
  v40 = v32;
  v41 = v61;
  v42 = swift_allocObject(&unk_100784D18, v40, v61);
  v43 = v42 + v34;
  v44 = v39;
  v45 = sub_100047C88(v39, v43, type metadata accessor for MetricDetailView);
  v46 = v73;
  static TaskPriority.userInitiated.getter(v45);
  v47 = (uint64_t)v68;
  v48 = &v68[*(int *)(v69 + 36)];
  v49 = type metadata accessor for _TaskModifier(0);
  v51 = v74;
  v50 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v48[*(int *)(v49 + 20)], v46, v75);
  *(_QWORD *)v48 = &unk_10081F1E8;
  *((_QWORD *)v48 + 1) = v42;
  v53 = v71;
  v52 = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v47, v36, v72);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v50);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v52);
  v54 = *(_QWORD *)(*(_QWORD *)(v62 + *(int *)(v76 + 56))
                  + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_metricCategoryUpdates);
  sub_10004F8C8(v62, v44, type metadata accessor for MetricDetailView);
  v55 = swift_allocObject(&unk_100784D40, v79, v41);
  sub_100047C88(v44, v55 + v78, type metadata accessor for MetricDetailView);
  v56 = v77;
  sub_100021CC0(v47, v77, &qword_10081F1A8);
  v57 = sub_100047110(&qword_10081F1F0);
  *(_QWORD *)(v56 + *(int *)(v57 + 52)) = v54;
  v58 = (_QWORD *)(v56 + *(int *)(v57 + 56));
  *v58 = sub_1000E9808;
  v58[1] = v55;
  swift_retain(v54);
  return sub_10001BE90(v47, &qword_10081F1A8);
}

void sub_1000E5754(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a2 = static Alignment.top.getter();
  a2[1] = v4;
  v5 = sub_100047110(&qword_10081F238);
  sub_1000E5798(a1, (uint64_t)a2 + *(int *)(v5 + 44));
}

void sub_1000E5798(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_100047110(&qword_10081F240);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_10081F248);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  sub_1005F0EBC(*a1);
  v14 = Color.init(uiColor:)(v13);
  v15 = static Alignment.center.getter(v14);
  v17 = _FrameLayout.init(width:height:alignment:)(&v44, 0, 1, 0x4075E00000000000, 0, v15, v16);
  v18 = v44;
  v43 = v45;
  v42 = v46;
  v41 = v47;
  v39 = v49;
  v40 = v48;
  v19 = static Edge.Set.horizontal.getter(v17);
  v20 = EdgeInsets.init(_all:)(20.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v27 = sub_100047110(&qword_10081F250);
  sub_1000E5A38((unsigned __int8 *)a1, (uint64_t *)&v6[*(int *)(v27 + 44)]);
  LOBYTE(a1) = static Edge.Set.horizontal.getter(v28);
  v29 = EdgeInsets.init(_all:)(20.0);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100021CC0((uint64_t)v6, (uint64_t)v10, &qword_10081F240);
  v36 = &v10[*(int *)(v7 + 36)];
  *v36 = (char)a1;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10001BE90((uint64_t)v6, &qword_10081F240);
  sub_100045AD4((uint64_t)v10, (uint64_t)v12, &qword_10081F248);
  sub_100021CC0((uint64_t)v12, (uint64_t)v10, &qword_10081F248);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = v43;
  *(_QWORD *)(a2 + 24) = v42;
  *(_BYTE *)(a2 + 32) = v41;
  v37 = v39;
  *(_QWORD *)(a2 + 40) = v40;
  *(_QWORD *)(a2 + 48) = v37;
  *(_BYTE *)(a2 + 56) = v19;
  *(double *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v24;
  *(_QWORD *)(a2 + 88) = v26;
  *(_BYTE *)(a2 + 96) = 0;
  v38 = sub_100047110(&qword_10081F258);
  sub_100021CC0((uint64_t)v10, a2 + *(int *)(v38 + 48), &qword_10081F248);
  swift_retain(v14);
  sub_10001BE90((uint64_t)v12, &qword_10081F248);
  sub_10001BE90((uint64_t)v10, &qword_10081F248);
  swift_release(v14);
}

void sub_1000E5A38(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  double v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD *v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  char v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  uint64_t v150;
  int *v151;
  _QWORD *v152;
  void *v153;
  id v154;
  id v155;
  id v156;
  id v157;
  _QWORD *v158;
  int v159;
  _BOOL8 v160;
  __int128 v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  int *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  unsigned __int8 *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;

  v2 = a1;
  v186 = a1;
  v225 = a2;
  v222 = type metadata accessor for MetricDetailWorkoutListView(0);
  __chkstk_darwin(v222);
  v224 = (uint64_t)&v181 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_100047110(&qword_10081F260);
  v4 = __chkstk_darwin(v223);
  v226 = (uint64_t)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v233 = (uint64_t)&v181 - v6;
  v7 = sub_100047110(&qword_10081F268);
  __chkstk_darwin(v7);
  v182 = (uint64_t)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_100047110(&qword_10081F270);
  v220 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v181 = (uint64_t)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_10081F278);
  v11 = __chkstk_darwin(v10);
  v232 = (uint64_t)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v231 = (uint64_t)&v181 - v13;
  v14 = sub_100047110(&qword_10081F280);
  __chkstk_darwin(v14);
  *(_QWORD *)&v213 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MetricFormattingHelper(0);
  __chkstk_darwin(v16);
  v210 = (uint64_t)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for MetricDetailViewModel(0);
  v216 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v205 = (uint64_t)&v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MetricDetailChartView(0);
  __chkstk_darwin(v19);
  v211 = (char *)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100047110(&qword_10081F288);
  __chkstk_darwin(v206);
  v207 = (uint64_t)&v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100047110(&qword_10081F290);
  v22 = __chkstk_darwin(v212);
  v236 = (uint64_t)&v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v235 = (uint64_t)&v181 - v24;
  v25 = sub_100047110(&qword_10081F090);
  __chkstk_darwin(v25);
  v196 = (uint64_t *)((char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v188 = type metadata accessor for MetricDetailHeaderView(0);
  __chkstk_darwin(v188);
  v191 = (char *)&v181 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100047110(&qword_10081F298);
  __chkstk_darwin(v189);
  v192 = (uint64_t)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100047110(&qword_10081F2A0);
  __chkstk_darwin(v190);
  v195 = (uint64_t)&v181 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100047110(&qword_10081F2A8);
  v30 = __chkstk_darwin(v194);
  v230 = (uint64_t)&v181 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v193 = (uint64_t)&v181 - v33;
  __chkstk_darwin(v32);
  v234 = (uint64_t)&v181 - v34;
  v228 = type metadata accessor for Date(0);
  *(_QWORD *)&v227 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v201 = (char *)&v181 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for Calendar.Component(0);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v187 = (char *)&v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for Calendar(0);
  v200 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v38 = (char *)&v181 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v239 = sub_1005F0848(*v2);
  *((_QWORD *)&v239 + 1) = v39;
  v40 = sub_100038CA0();
  v41 = Text.init<A>(_:)(&v239, &type metadata for String, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.largeTitle.getter();
  v50 = Text.font(_:)(v48, v41, v43, v47, v45, v49);
  v52 = v51;
  LOBYTE(v2) = v53;
  v55 = v54;
  swift_release(v48);
  v56 = v2 & 1;
  sub_1000E4458(v41, v43, v47);
  v57 = swift_bridgeObjectRelease(v45);
  v58 = static Font.Weight.bold.getter(v57);
  v218 = Text.fontWeight(_:)(*(_QWORD *)&v58, 0, v50, v52, v56, v55);
  v217 = v59;
  v203 = v60;
  v229 = v61;
  sub_1000E4458(v50, v52, v56);
  v62 = v55;
  v63 = v186;
  swift_bridgeObjectRelease(v62);
  v64 = v63[16];
  v65 = *((_QWORD *)v63 + 3);
  *(_QWORD *)&v237 = *((_QWORD *)v63 + 1);
  BYTE8(v237) = v64;
  v238 = v65;
  v66 = sub_100047110(&qword_10081F1C0);
  v67 = State.projectedValue.getter(&v239);
  v214 = *((_QWORD *)&v239 + 1);
  v215 = v239;
  v209 = v240;
  v208 = BYTE8(v240);
  v197 = v63[1];
  static Calendar.current.getter(v67);
  v68 = v198;
  v69 = v187;
  v70 = v199;
  v71 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v198 + 104))(v187, enum case for Calendar.Component.year(_:), v199);
  v72 = v201;
  Date.init()(v71);
  v204 = Calendar.component(_:from:)(v69, v72);
  (*(void (**)(char *, uint64_t))(v227 + 8))(v72, v228);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v200 + 8))(v38, v202);
  if (qword_10081D4F0 != -1)
    v73 = swift_once(&qword_10081D4F0, sub_1000E4814);
  v201 = (char *)*((_QWORD *)&xmmword_100869C10 + 1);
  v202 = xmmword_100869C10;
  v200 = qword_100869C20;
  v199 = unk_100869C28;
  LODWORD(v198) = static Edge.Set.all.getter(v73);
  LODWORD(v187) = *v63;
  v74 = (int *)v188;
  v75 = v191;
  sub_1000E4B00();
  sub_1000E4C88((uint64_t)&v75[v74[7]]);
  v77 = v63[16];
  v78 = *((_QWORD *)v63 + 3);
  *(_QWORD *)&v239 = *((_QWORD *)v63 + 1);
  v76 = v239;
  BYTE8(v239) = v77;
  *(_QWORD *)&v240 = v78;
  State.wrappedValue.getter(&v237, v66);
  v185 = sub_10041D2CC(v237, SBYTE8(v237));
  v80 = v79;
  *(_QWORD *)&v237 = v76;
  BYTE8(v237) = v77;
  v238 = v78;
  State.projectedValue.getter(&v239);
  v184 = v239;
  v81 = v240;
  v82 = BYTE8(v240);
  v237 = *((_OWORD *)v63 + 2);
  sub_100047110(&qword_10081F1D8);
  State.projectedValue.getter(&v239);
  v183 = v239;
  v83 = v63;
  v84 = v240;
  v85 = &v75[v74[11]];
  v86 = (int *)type metadata accessor for MetricDetailView(0);
  v87 = sub_100047110(&qword_10081F0A0);
  State.wrappedValue.getter(v85, v87);
  v88 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v85, 0, 1, v228);
  *v75 = (_BYTE)v187;
  *(_QWORD *)&v75[v74[6]] = 0x3FE6666666666666;
  v89 = (uint64_t *)&v75[v74[8]];
  *v89 = v185;
  v89[1] = v80;
  v90 = &v75[v74[9]];
  *(_OWORD *)v90 = v184;
  *((_QWORD *)v90 + 2) = v81;
  v90[24] = v82;
  v91 = &v75[v74[10]];
  *(_OWORD *)v91 = v183;
  *((_QWORD *)v91 + 2) = v84;
  v92 = v83;
  v93 = static Edge.Set.top.getter(v88);
  v94 = EdgeInsets.init(_all:)(0.0);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v101 = v192;
  sub_10004F8C8((uint64_t)v75, v192, type metadata accessor for MetricDetailHeaderView);
  v102 = v101 + *(int *)(v189 + 36);
  *(_BYTE *)v102 = v93;
  *(double *)(v102 + 8) = v94;
  *(_QWORD *)(v102 + 16) = v96;
  *(_QWORD *)(v102 + 24) = v98;
  *(_QWORD *)(v102 + 32) = v100;
  *(_BYTE *)(v102 + 40) = 0;
  v103 = sub_100011F54((uint64_t)v75, type metadata accessor for MetricDetailHeaderView);
  v104 = static Edge.Set.bottom.getter(v103);
  v105 = EdgeInsets.init(_all:)(8.0);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v112 = v195;
  sub_100021CC0(v101, v195, &qword_10081F298);
  v113 = v112 + *(int *)(v190 + 36);
  *(_BYTE *)v113 = v104;
  *(double *)(v113 + 8) = v105;
  *(_QWORD *)(v113 + 16) = v107;
  *(_QWORD *)(v113 + 24) = v109;
  *(_QWORD *)(v113 + 32) = v111;
  *(_BYTE *)(v113 + 40) = 0;
  sub_10001BE90(v101, &qword_10081F298);
  v114 = &v83[v86[11]];
  v115 = sub_100047110(&qword_10081F0A8);
  v116 = v196;
  State.wrappedValue.getter(v196, v115);
  v117 = type metadata accessor for MetricChartData(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 48))(v116, 1, v117) == 1)
    v118 = 1.0;
  else
    v118 = 0.0;
  sub_10001BE90((uint64_t)v116, &qword_10081F090);
  v119 = v193;
  sub_100021CC0(v112, v193, &qword_10081F2A0);
  *(double *)(v119 + *(int *)(v194 + 36)) = v118;
  sub_10001BE90(v112, &qword_10081F2A0);
  sub_100045AD4(v119, v234, &qword_10081F2A8);
  LOBYTE(v119) = *v83;
  v120 = v205;
  sub_1000E4E90(v205);
  v121 = v210;
  sub_10004F8C8((uint64_t)&v83[v86[13]], v210, type metadata accessor for MetricFormattingHelper);
  v122 = v213;
  *(_QWORD *)&v227 = v115;
  v228 = (uint64_t)v114;
  State.projectedValue.getter((_QWORD *)v213);
  v123 = v211;
  v124 = sub_1001E3754(v119, 1, v120, v121, v122, v211);
  v125 = static Alignment.center.getter(v124);
  _FrameLayout.init(width:height:alignment:)(&v239, 0, 1, 0x4071A00000000000, 0, v125, v126);
  v127 = v207;
  sub_10004F8C8((uint64_t)v123, v207, type metadata accessor for MetricDetailChartView);
  v128 = (_OWORD *)(v127 + *(int *)(v206 + 36));
  v129 = v240;
  *v128 = v239;
  v128[1] = v129;
  v128[2] = v241;
  v130 = sub_100011F54((uint64_t)v123, type metadata accessor for MetricDetailChartView);
  if (qword_10081D4F8 != -1)
    v130 = swift_once(&qword_10081D4F8, sub_1000E4834);
  v213 = xmmword_100869C30;
  v131 = xmmword_100869C40;
  v132 = static Edge.Set.all.getter(v130);
  v133 = v236;
  sub_100021CC0(v127, v236, &qword_10081F288);
  v134 = v133 + *(int *)(v212 + 36);
  *(_BYTE *)v134 = v132;
  *(_OWORD *)(v134 + 8) = v213;
  *(_OWORD *)(v134 + 24) = v131;
  *(_BYTE *)(v134 + 40) = 0;
  sub_10001BE90(v127, &qword_10081F288);
  sub_100045AD4(v133, v235, &qword_10081F290);
  v135 = v83[v86[20]] == 1;
  v136 = v231;
  if (v135)
  {
    v137 = v182;
    v138 = sub_1000E6D2C(v182);
    if (qword_10081D508 != -1)
      v138 = swift_once(&qword_10081D508, sub_1000E499C);
    v213 = xmmword_100869C58;
    v139 = xmmword_100869C68;
    v140 = static Edge.Set.all.getter(v138);
    v141 = v181;
    sub_100021CC0(v137, v181, &qword_10081F268);
    v144 = v221;
    v142 = v141 + *(int *)(v221 + 36);
    *(_BYTE *)v142 = v140;
    *(_OWORD *)(v142 + 8) = v213;
    *(_OWORD *)(v142 + 24) = v139;
    *(_BYTE *)(v142 + 40) = 0;
    sub_10001BE90(v137, &qword_10081F268);
    sub_100045AD4(v141, v136, &qword_10081F270);
    v143 = 0;
  }
  else
  {
    v143 = 1;
    v144 = v221;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v220 + 56))(v136, v143, 1, v144);
  v145 = v224;
  sub_1000E4E90(v224);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v145, 0, 1, v219);
  v146 = *(void **)&v92[v86[15]];
  v147 = *(_QWORD *)&v92[v86[16]];
  v148 = *(void **)&v92[v86[17]];
  v149 = *(void **)&v92[v86[18]];
  v150 = v86[19];
  v151 = (int *)v222;
  v152 = (_QWORD *)(v145 + *(int *)(v222 + 40));
  v153 = *(void **)&v92[v150];
  v154 = v146;
  swift_retain(v147);
  v155 = v148;
  v156 = v149;
  v157 = v153;
  v158 = State.projectedValue.getter(v152);
  *(_QWORD *)(v145 + v151[5]) = v154;
  *(_QWORD *)(v145 + v151[6]) = v147;
  *(_QWORD *)(v145 + v151[7]) = v155;
  *(_QWORD *)(v145 + v151[8]) = v156;
  *(_QWORD *)(v145 + v151[9]) = v157;
  if (qword_10081D510 != -1)
    v158 = (_QWORD *)swift_once(&qword_10081D510, sub_1000E49B8);
  v159 = v203 & 1;
  v160 = (v197 - 3) < 0xFFFFFFFE;
  v227 = xmmword_100869C78;
  v161 = xmmword_100869C88;
  v162 = static Edge.Set.all.getter(v158);
  v163 = v226;
  sub_10004F8C8(v145, v226, type metadata accessor for MetricDetailWorkoutListView);
  v164 = v163 + *(int *)(v223 + 36);
  *(_BYTE *)v164 = v162;
  *(_OWORD *)(v164 + 8) = v227;
  *(_OWORD *)(v164 + 24) = v161;
  *(_BYTE *)(v164 + 40) = 0;
  sub_100011F54(v145, type metadata accessor for MetricDetailWorkoutListView);
  v165 = v233;
  sub_100045AD4(v163, v233, &qword_10081F260);
  v166 = v159;
  LODWORD(v228) = v159;
  LOBYTE(v237) = v159;
  v167 = v230;
  sub_100021CC0(v234, v230, &qword_10081F2A8);
  v168 = v236;
  sub_100021CC0(v235, v236, &qword_10081F290);
  v169 = v232;
  sub_100021CC0(v136, v232, &qword_10081F278);
  sub_100021CC0(v165, v163, &qword_10081F260);
  v170 = v225;
  v171 = v218;
  v172 = v217;
  *v225 = v218;
  v170[1] = v172;
  *((_BYTE *)v170 + 16) = v166;
  v173 = v215;
  v170[3] = v229;
  v170[4] = v173;
  v174 = v214;
  v175 = v209;
  v170[5] = v214;
  v170[6] = v175;
  *((_BYTE *)v170 + 56) = v208;
  v170[8] = v160;
  *((_BYTE *)v170 + 72) = 1;
  v170[10] = v204;
  *((_BYTE *)v170 + 88) = v198;
  v176 = v201;
  v170[12] = v202;
  v170[13] = (uint64_t)v176;
  v177 = v199;
  v170[14] = v200;
  v170[15] = v177;
  *((_BYTE *)v170 + 128) = 0;
  v178 = (int *)sub_100047110(&qword_10081F2B0);
  sub_100021CC0(v167, (uint64_t)v170 + v178[16], &qword_10081F2A8);
  sub_100021CC0(v168, (uint64_t)v170 + v178[20], &qword_10081F290);
  sub_100021CC0(v169, (uint64_t)v170 + v178[24], &qword_10081F278);
  sub_100021CC0(v163, (uint64_t)v170 + v178[28], &qword_10081F260);
  v179 = (char *)v170 + v178[32];
  *(_QWORD *)v179 = 0;
  v179[8] = 1;
  LOBYTE(v168) = v228;
  sub_1000E439C(v171, v172, v228);
  swift_retain(v173);
  swift_retain(v174);
  v180 = v229;
  swift_bridgeObjectRetain(v229);
  sub_1000E439C(v171, v172, v168);
  swift_bridgeObjectRetain(v180);
  swift_retain(v173);
  swift_retain(v174);
  sub_10001BE90(v233, &qword_10081F260);
  sub_10001BE90(v231, &qword_10081F278);
  sub_10001BE90(v235, &qword_10081F290);
  sub_10001BE90(v234, &qword_10081F2A8);
  swift_release(v174);
  swift_release(v173);
  sub_1000E4458(v171, v172, v168);
  swift_bridgeObjectRelease(v180);
  sub_10001BE90(v163, &qword_10081F260);
  sub_10001BE90(v232, &qword_10081F278);
  sub_10001BE90(v236, &qword_10081F290);
  sub_10001BE90(v230, &qword_10081F2A8);
  swift_release(v174);
  swift_release(v173);
  sub_1000E4458(v171, v172, v237);
  swift_bridgeObjectRelease(v180);
}

uint64_t sub_1000E6D2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;

  v2 = v1;
  v52 = a1;
  v3 = type metadata accessor for ControlSize(0);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  __chkstk_darwin(v3);
  v49 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for BorderedProminentButtonStyle(0);
  v48 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MetricDetailView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_10081F2B8);
  v45 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_10081F2C0);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100047110(&qword_10081F2C8);
  __chkstk_darwin(v44);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F8C8(v2, (uint64_t)v10, type metadata accessor for MetricDetailView);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100784E08, v20 + v9, v19 | 7);
  sub_100047C88((uint64_t)v10, v21 + v20, type metadata accessor for MetricDetailView);
  v54 = v2;
  v22 = sub_100047110(&qword_10081F2D0);
  v23 = sub_1000EA094();
  v24 = Button.init(action:label:)(sub_1000EA060, v21, sub_1000EA08C, v53, v22, v23);
  BorderedProminentButtonStyle.init()(v24);
  v25 = sub_100028384(&qword_10081F2E0, &qword_10081F2B8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v26 = sub_1000EA0F8();
  v27 = v43;
  View.buttonStyle<A>(_:)(v6, v11, v43, v25, v26);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v27);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v11);
  v29 = v49;
  v28 = v50;
  v30 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, enum case for ControlSize.large(_:), v51);
  KeyPath = swift_getKeyPath(&unk_1006230B8);
  v32 = (uint64_t *)&v18[*(int *)(v44 + 36)];
  v33 = sub_100047110(&qword_10081F2F0);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)v32 + *(int *)(v33 + 28), v29, v30);
  *v32 = KeyPath;
  v35 = v46;
  v34 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v18, v16, v47);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v34);
  v36 = sub_100032490();
  v37 = Color.init(uiColor:)(v36);
  v38 = swift_getKeyPath(&unk_1006230E8);
  v55 = v37;
  swift_retain(v37);
  v39 = AnyShapeStyle.init<A>(_:)(&v55, &type metadata for Color, &protocol witness table for Color);
  v40 = v52;
  sub_100021CC0((uint64_t)v18, v52, &qword_10081F2C8);
  swift_release(v37);
  v41 = (uint64_t *)(v40 + *(int *)(sub_100047110(&qword_10081F268) + 36));
  *v41 = v38;
  v41[1] = v39;
  return sub_10001BE90((uint64_t)v18, &qword_10081F2C8);
}

uint64_t sub_1000E710C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_100047110(&qword_10081F1C0);
  State.wrappedValue.getter(&v3, v0);
  if ((v4 & 1) != 0)
  {
    State.wrappedValue.getter(&v3, v0);
    return v3;
  }
  else
  {
    v2 = sub_100047110(&qword_10081F1D8);
    State.wrappedValue.getter(&v3, v2);
    return sub_100421550(v3);
  }
}

uint64_t sub_1000E71D0(char *a1, char a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char *v31;
  char v32;
  char *v33;

  v3 = (uint64_t)v2;
  v5 = a2 & 1;
  v6 = type metadata accessor for MetricDetailView(0);
  v28 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v28 + 64);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MetricDetailViewModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100347FA8(*v2, a1, v5, (uint64_t)v14);
  v16 = static Animation.easeInOut.getter(v15);
  v30 = v3;
  v31 = a1;
  v32 = v5;
  v33 = v14;
  withAnimation<A>(_:_:)(v16, sub_1000E9B8C, v29, (char *)&type metadata for () + 8);
  swift_release(v16);
  if ((v14[*(int *)(v12 + 40)] & 1) == 0)
  {
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
    sub_10004F8C8(v3, (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MetricDetailView);
    v18 = type metadata accessor for MainActor(0);
    v19 = static MainActor.shared.getter(v18);
    v20 = *(unsigned __int8 *)(v28 + 80);
    v21 = (v20 + 32) & ~v20;
    v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_100784DE0, v22 + 9, v20 | 7);
    *(_QWORD *)(v23 + 16) = v19;
    *(_QWORD *)(v23 + 24) = &protocol witness table for MainActor;
    sub_100047C88((uint64_t)v8, v23 + v21, type metadata accessor for MetricDetailView);
    v24 = v23 + v22;
    *(_QWORD *)v24 = a1;
    *(_BYTE *)(v24 + 8) = v5 != 0;
    v25 = sub_10020D9C0((uint64_t)v11, (uint64_t)&unk_10081F230, v23);
    swift_release(v25);
  }
  return sub_100011F54((uint64_t)v14, type metadata accessor for MetricDetailViewModel);
}

uint64_t sub_1000E7408(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[2] = a1;
  v2 = *(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 + 64);
  v1[4] = v3;
  v1[5] = swift_task_alloc((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_10081E650);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v1[7] = v5;
  v1[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E74C4, v6, v7);
}

uint64_t sub_1000E74C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 64));
  v6 = (char *)sub_1000E710C();
  sub_1000E71D0(v6, v7 & 1);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
  v9 = sub_10004F8C8(v5, v1, type metadata accessor for MetricDetailView);
  v10 = static MainActor.shared.getter(v9);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_100784DB8, v12 + v3, v11 | 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  sub_100047C88(v1, v13 + v12, type metadata accessor for MetricDetailView);
  v14 = sub_10020D9C0(v2, (uint64_t)&unk_10081F228, v13);
  swift_release(v14);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000E75D4(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t, uint64_t, uint64_t);

  v4 = type metadata accessor for MetricDetailView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v8);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *a1;
  v13 = *a2;
  if (v13 - 4 < 0x22)
  {
    if (v12 != 1)
      return result;
    goto LABEL_3;
  }
  if (v13 >= 4)
  {
    if (v12 != 2)
      return result;
    goto LABEL_3;
  }
  if (!*a1)
  {
LABEL_3:
    v14 = type metadata accessor for TaskPriority(0);
    v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v32(v11, 1, 1, v14);
    sub_10004F8C8((uint64_t)a2, (uint64_t)&v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for MetricDetailView);
    v15 = type metadata accessor for MainActor(0);
    v16 = static MainActor.shared.getter(v15);
    v17 = *(unsigned __int8 *)(v5 + 80);
    v18 = (v17 + 32) & ~v17;
    v31 = v17 | 7;
    v19 = swift_allocObject(&unk_100784D68, v18 + v6, v17 | 7);
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = &protocol witness table for MainActor;
    sub_100047C88((uint64_t)&v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v19 + v18, type metadata accessor for MetricDetailView);
    v20 = sub_10020D9C0((uint64_t)v11, (uint64_t)&unk_10081F200, v19);
    swift_release(v20);
    v21 = sub_1000E710C();
    v30 = v22;
    v32(v11, 1, 1, v14);
    v23 = sub_10004F8C8((uint64_t)a2, (uint64_t)v7, type metadata accessor for MetricDetailView);
    v24 = static MainActor.shared.getter(v23);
    v25 = (v18 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject(&unk_100784D90, v25 + 9, v31);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = &protocol witness table for MainActor;
    sub_100047C88((uint64_t)v7, v26 + v18, type metadata accessor for MetricDetailView);
    v27 = v26 + v25;
    *(_QWORD *)v27 = v21;
    *(_BYTE *)(v27 + 8) = v30 & 1;
    v28 = sub_10020D9C0((uint64_t)v11, (uint64_t)&unk_10081F210, v26);
    *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  }
  return result;
}

double sub_1000E7830(uint64_t a1, Swift::UInt a2, char a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a3 & 1;
  v8 = sub_100047110(&qword_10081F218);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F8C8(a4, (uint64_t)v10, type metadata accessor for MetricDetailViewModel);
  v11 = type metadata accessor for MetricDetailViewModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MetricDetailView(0) + 40));
  v14 = v12[1];
  v18 = *v12;
  v13 = v18;
  v19 = v14;
  swift_retain(v14);
  swift_bridgeObjectRetain(v13);
  v15 = sub_100047110(&qword_10081F220);
  State.wrappedValue.getter(&v20, v15);
  sub_1004C5A3C((uint64_t)v10, a2, v7);
  v18 = v13;
  v19 = v14;
  v17 = v20;
  State.wrappedValue.setter(&v17, v15);
  swift_release(v14);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

uint64_t sub_1000E7974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v6 + 72) = a6;
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a5;
  v7 = sub_100047110(&qword_10081F218);
  *(_QWORD *)(v6 + 32) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 40) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = v10;
  return swift_task_switch(sub_1000E7A08, v9, v10);
}

uint64_t sub_1000E7A08()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;
  _QWORD *v3;

  v1 = *(_BYTE *)(v0 + 72);
  v2 = *(_BYTE **)(v0 + 16);
  type metadata accessor for MetricDetailView(0);
  LOBYTE(v2) = *v2;
  v3 = (_QWORD *)swift_task_alloc(dword_10082F2EC);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_1000E7A80;
  return sub_100348B28(*(_QWORD *)(v0 + 32), (char)v2, *(_QWORD *)(v0 + 24), v1 & 1);
}

uint64_t sub_1000E7A80()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return swift_task_switch(sub_1000E7ACC, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1000E7ACC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v6 = static Animation.easeInOut.getter(v5);
  v7 = swift_task_alloc(48);
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  *(_BYTE *)(v7 + 32) = v2 & 1;
  *(_QWORD *)(v7 + 40) = v1;
  withAnimation<A>(_:_:)(v6, sub_1000E9980, v7, (char *)&type metadata for () + 8);
  swift_release(v6);
  swift_task_dealloc(v7);
  sub_10001BE90(v1, &qword_10081F218);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000E7B8C(uint64_t a1, Swift::UInt a2, char a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = a3 & 1;
  v8 = sub_100047110(&qword_10081F218);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100021CC0(a4, (uint64_t)v10, &qword_10081F218);
  v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MetricDetailView(0) + 40));
  v13 = v11[1];
  v17 = *v11;
  v12 = v17;
  v18 = v13;
  swift_retain(v13);
  swift_bridgeObjectRetain(v12);
  v14 = sub_100047110(&qword_10081F220);
  State.wrappedValue.getter(&v19, v14);
  sub_1004C5A3C((uint64_t)v10, a2, v7);
  v17 = v12;
  v18 = v13;
  v16 = v19;
  State.wrappedValue.setter(&v16, v14);
  swift_release(v13);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

uint64_t sub_1000E7CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[2] = a4;
  v5 = type metadata accessor for Date(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[5] = swift_task_alloc(v7);
  v4[6] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[8] = v9;
  v4[9] = v10;
  return swift_task_switch(sub_1000E7D50, v9, v10);
}

uint64_t sub_1000E7D50()
{
  _QWORD *v0;
  _BYTE *v1;
  _QWORD *v2;

  v1 = (_BYTE *)v0[2];
  v0[10] = type metadata accessor for MetricDetailView(0);
  LOBYTE(v1) = *v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10083DD8C);
  v0[11] = v2;
  *v2 = v0;
  v2[1] = sub_1000E7DBC;
  return sub_1005EF010(v0[6], (char)v1);
}

uint64_t sub_1000E7DBC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return swift_task_switch(sub_1000E7E08, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000E7E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = swift_release(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16))(v2, v1, v4, v5);
  v6 = sub_100047110(&qword_10081F0A0);
  State.wrappedValue.setter(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E7EA8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  unsigned __int8 v4;

  type metadata accessor for MetricDetailView(0);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + 1);
  v2 = sub_100047110(&qword_10081F1C0);
  State.wrappedValue.getter(&v3, v2);
  sub_100311D24(a1, v3, v4);
}

void sub_1000E7F2C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[9];

  v4 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = sub_100047110((uint64_t *)&unk_100827460);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100622F90;
  v18 = sub_10011E43C(*(_BYTE *)(a1 + 1));
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_100038CF8();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  v22 = String.init(format:_:)(v13, v15, v17, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)&v68[0] = v22;
  *((_QWORD *)&v68[0] + 1) = v24;
  v25 = sub_100038CA0();
  v26 = Text.init<A>(_:)(v68, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.body(_:), v67);
  v34 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v6, 1, 1, v34);
  v35 = static Font.system(_:design:weight:)(v9, v6, 0, 1);
  sub_10001BE90((uint64_t)v6, &qword_10081F2F8);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v33);
  static Font.Weight.semibold.getter(v36);
  v37 = Font.weight(_:)(v35);
  v38 = swift_release(v35);
  v39 = Text.font(_:)(v37, v26, v28, v32, v30, v38);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  swift_release(v37);
  sub_1000E4458(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  v46 = objc_msgSend((id)objc_opt_self(ARUIMetricColors), "keyColors");
  if (v46)
  {
    v47 = v46;
    v48 = objc_msgSend(v46, "nonGradientTextColor");

    if (v48)
    {
      v49 = v43 & 1;
      v50 = Color.init(uiColor:)(v48);
      *(_QWORD *)&v68[0] = v50;
      v51 = Text.foregroundStyle<A>(_:)(v68, v39, v41, v49, v45, &type metadata for Color, &protocol witness table for Color);
      v53 = v52;
      v55 = v54;
      v57 = v56 & 1;
      sub_1000E4458(v39, v41, v49);
      swift_release(v50);
      swift_bridgeObjectRelease(v45);
      v59 = static Alignment.center.getter(v58);
      sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v68, 0.0, 1, 0.0, 1, v59, v60, v51, v53, v57, v55);
      sub_1000E4458(v51, v53, v57);
      swift_bridgeObjectRelease(v55);
      v61 = v68[7];
      v62 = v68[8];
      a2[6] = v68[6];
      a2[7] = v61;
      a2[8] = v62;
      v63 = v68[3];
      a2[2] = v68[2];
      a2[3] = v63;
      v64 = v68[5];
      a2[4] = v68[4];
      a2[5] = v64;
      v65 = v68[1];
      *a2 = v68[0];
      a2[1] = v65;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

_QWORD *sub_1000E8350(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  unsigned int (*v27)(void **, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void (*v37)(void **, _QWORD, uint64_t, uint64_t);
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[3];
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
    v10 = a2[5];
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v9;
    v11 = a3[9];
    v12 = (char *)(a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain(v8);
    swift_retain(v10);
    v75 = v15;
    v77 = v14;
    v15(v12, v13, v14);
    v16 = *(int *)(sub_100047110(&qword_10081F0A0) + 28);
    v17 = *(_QWORD *)&v13[v16];
    *(_QWORD *)&v12[v16] = v17;
    v18 = a3[10];
    v19 = a3[11];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    *v20 = *v21;
    v20[1] = v23;
    v24 = (void **)((char *)v4 + v19);
    v25 = (void **)((char *)a2 + v19);
    v26 = type metadata accessor for MetricChartData(0);
    v73 = *(_QWORD *)(v26 - 8);
    v27 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v73 + 48);
    swift_retain(v17);
    swift_bridgeObjectRetain(v22);
    swift_retain(v23);
    if (v27(v25, 1, v26))
    {
      v28 = sub_100047110(&qword_10081F090);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v30 = *v25;
      *v24 = *v25;
      v31 = *(int *)(v26 + 20);
      v32 = (char *)v24 + v31;
      v33 = (char *)v25 + v31;
      v34 = v30;
      v75(v32, v33, v77);
      v35 = *(int *)(v26 + 24);
      v36 = *(void **)((char *)v25 + v35);
      *(void **)((char *)v24 + v35) = v36;
      v37 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v73 + 56);
      v38 = v36;
      v37(v24, 0, 1, v26);
    }
    v39 = *(int *)(sub_100047110(&qword_10081F0A8) + 28);
    v40 = *(void **)((char *)v25 + v39);
    *(void **)((char *)v24 + v39) = v40;
    v41 = a3[12];
    v42 = a3[13];
    v43 = *(void **)((char *)a2 + v41);
    *(_QWORD *)((char *)v4 + v41) = v43;
    v44 = (char *)v4 + v42;
    v45 = (uint64_t)a2 + v42;
    v46 = *(void **)((char *)a2 + v42);
    *(_QWORD *)((char *)v4 + v42) = v46;
    v47 = type metadata accessor for MetricFormattingHelper(0);
    v48 = *(int *)(v47 + 20);
    v76 = v45 + v48;
    v78 = &v44[v48];
    v49 = type metadata accessor for AttributedString(0);
    v74 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
    swift_retain(v40);
    v50 = v43;
    v51 = v46;
    v74(v78, v76, v49);
    v52 = *(int *)(v47 + 24);
    v53 = *(void **)(v45 + v52);
    *(_QWORD *)&v44[v52] = v53;
    v54 = a3[14];
    v55 = a3[15];
    v56 = *(void **)((char *)a2 + v54);
    *(_QWORD *)((char *)v4 + v54) = v56;
    v57 = *(void **)((char *)a2 + v55);
    *(_QWORD *)((char *)v4 + v55) = v57;
    v58 = a3[16];
    v59 = a3[17];
    v60 = *(uint64_t *)((char *)a2 + v58);
    *(_QWORD *)((char *)v4 + v58) = v60;
    v61 = *(void **)((char *)a2 + v59);
    *(_QWORD *)((char *)v4 + v59) = v61;
    v62 = a3[18];
    v63 = a3[19];
    v64 = *(void **)((char *)a2 + v62);
    *(_QWORD *)((char *)v4 + v62) = v64;
    v65 = *(void **)((char *)a2 + v63);
    *(_QWORD *)((char *)v4 + v63) = v65;
    *((_BYTE *)v4 + a3[20]) = *((_BYTE *)a2 + a3[20]);
    v66 = v53;
    v67 = v56;
    v68 = v57;
    swift_retain(v60);
    v69 = v61;
    v70 = v64;
    v71 = v65;
  }
  return v4;
}

void sub_1000E8624(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 40));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = sub_100047110(&qword_10081F0A0);
  swift_release(*(_QWORD *)(v4 + *(int *)(v7 + 28)));
  v8 = (_QWORD *)(a1 + a2[10]);
  swift_bridgeObjectRelease(*v8);
  swift_release(v8[1]);
  v9 = (id *)(a1 + a2[11]);
  v10 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {

    v6((uint64_t)v9 + *(int *)(v10 + 20), v5);
  }
  v11 = sub_100047110(&qword_10081F0A8);
  swift_release(*(id *)((char *)v9 + *(int *)(v11 + 28)));

  v12 = (id *)(a1 + a2[13]);
  v13 = type metadata accessor for MetricFormattingHelper(0);
  v14 = (char *)v12 + *(int *)(v13 + 20);
  v15 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);

  swift_release(*(_QWORD *)(a1 + a2[16]));
}

uint64_t sub_1000E87C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  uint64_t v25;
  unsigned int (*v26)(void **, uint64_t, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void (*v35)(void **, _QWORD, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v8;
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain(v7);
  swift_retain(v9);
  v73 = v14;
  v75 = v13;
  v14(v11, v12, v13);
  v15 = *(int *)(sub_100047110(&qword_10081F0A0) + 28);
  v16 = *(_QWORD *)&v12[v15];
  *(_QWORD *)&v11[v15] = v16;
  v17 = a3[10];
  v18 = a3[11];
  v19 = (uint64_t *)(a1 + v17);
  v20 = (uint64_t *)(a2 + v17);
  v21 = *v20;
  v22 = v20[1];
  *v19 = *v20;
  v19[1] = v22;
  v23 = (void **)(a1 + v18);
  v24 = (void **)(a2 + v18);
  v25 = type metadata accessor for MetricChartData(0);
  v71 = *(_QWORD *)(v25 - 8);
  v26 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v71 + 48);
  swift_retain(v16);
  swift_bridgeObjectRetain(v21);
  swift_retain(v22);
  if (v26(v24, 1, v25))
  {
    v27 = sub_100047110(&qword_10081F090);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    v29 = *(int *)(v25 + 20);
    v30 = (char *)v23 + v29;
    v31 = (char *)v24 + v29;
    v32 = v28;
    v73(v30, v31, v75);
    v33 = *(int *)(v25 + 24);
    v34 = *(void **)((char *)v24 + v33);
    *(void **)((char *)v23 + v33) = v34;
    v35 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v71 + 56);
    v36 = v34;
    v35(v23, 0, 1, v25);
  }
  v37 = *(int *)(sub_100047110(&qword_10081F0A8) + 28);
  v38 = *(void **)((char *)v24 + v37);
  *(void **)((char *)v23 + v37) = v38;
  v39 = a3[12];
  v40 = a3[13];
  v41 = *(void **)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v41;
  v42 = a1 + v40;
  v43 = a2 + v40;
  v44 = *(void **)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v44;
  v45 = type metadata accessor for MetricFormattingHelper(0);
  v46 = *(int *)(v45 + 20);
  v74 = v43 + v46;
  v76 = v42 + v46;
  v47 = type metadata accessor for AttributedString(0);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  swift_retain(v38);
  v48 = v41;
  v49 = v44;
  v72(v76, v74, v47);
  v50 = *(int *)(v45 + 24);
  v51 = *(void **)(v43 + v50);
  *(_QWORD *)(v42 + v50) = v51;
  v52 = a3[14];
  v53 = a3[15];
  v54 = *(void **)(a2 + v52);
  *(_QWORD *)(a1 + v52) = v54;
  v55 = *(void **)(a2 + v53);
  *(_QWORD *)(a1 + v53) = v55;
  v56 = a3[16];
  v57 = a3[17];
  v58 = *(_QWORD *)(a2 + v56);
  *(_QWORD *)(a1 + v56) = v58;
  v59 = *(void **)(a2 + v57);
  *(_QWORD *)(a1 + v57) = v59;
  v60 = a3[18];
  v61 = a3[19];
  v62 = *(void **)(a2 + v60);
  *(_QWORD *)(a1 + v60) = v62;
  v63 = *(void **)(a2 + v61);
  *(_QWORD *)(a1 + v61) = v63;
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v64 = v51;
  v65 = v54;
  v66 = v55;
  swift_retain(v58);
  v67 = v59;
  v68 = v62;
  v69 = v63;
  return a1;
}

uint64_t sub_1000E8A6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void **, uint64_t, uint64_t);
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  id v37;
  uint64_t v38;
  void *v39;
  void (*v40)(void **, _QWORD, uint64_t, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id v87;
  void *v89;
  void *v90;
  id v91;
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  char *v98;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v14 - 8);
  v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 24);
  v97(v12, v13, v14);
  v15 = *(int *)(sub_100047110(&qword_10081F0A0) + 28);
  v16 = *(_QWORD *)(v12 + v15);
  v17 = *(_QWORD *)(v13 + v15);
  *(_QWORD *)(v12 + v15) = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = a3[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a2 + v18);
  v22 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(v19 + 8);
  v24 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v19 + 8) = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = a3[11];
  v26 = (void **)(a1 + v25);
  v27 = (void **)(a2 + v25);
  v28 = type metadata accessor for MetricChartData(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v89 = *v27;
      v90 = *v26;
      *v26 = *v27;
      v91 = v89;

      v97((uint64_t)v26 + *(int *)(v28 + 20), (uint64_t)v27 + *(int *)(v28 + 20), v14);
      v92 = *(int *)(v28 + 24);
      v93 = *(void **)((char *)v27 + v92);
      v94 = *(void **)((char *)v26 + v92);
      *(void **)((char *)v26 + v92) = v93;
      v95 = v93;

      goto LABEL_7;
    }
    sub_100011F54((uint64_t)v26, type metadata accessor for MetricChartData);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v42 = sub_100047110(&qword_10081F090);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  v33 = *v27;
  *v26 = *v27;
  v34 = *(int *)(v28 + 20);
  v35 = (char *)v26 + v34;
  v98 = (char *)v27 + v34;
  v36 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v37 = v33;
  v36(v35, v98, v14);
  v38 = *(int *)(v28 + 24);
  v39 = *(void **)((char *)v27 + v38);
  *(void **)((char *)v26 + v38) = v39;
  v40 = *(void (**)(void **, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v41 = v39;
  v40(v26, 0, 1, v28);
LABEL_7:
  v43 = *(int *)(sub_100047110(&qword_10081F0A8) + 28);
  v44 = *(uint64_t *)((char *)v26 + v43);
  v45 = *(void **)((char *)v27 + v43);
  *(void **)((char *)v26 + v43) = v45;
  swift_retain(v45);
  swift_release(v44);
  v46 = a3[12];
  v47 = *(void **)(a2 + v46);
  v48 = *(void **)(a1 + v46);
  *(_QWORD *)(a1 + v46) = v47;
  v49 = v47;

  v50 = a3[13];
  v51 = (void **)(a1 + v50);
  v52 = a2 + v50;
  v53 = *(void **)(a2 + v50);
  v54 = *v51;
  *v51 = v53;
  v55 = v53;

  v56 = type metadata accessor for MetricFormattingHelper(0);
  v57 = *(int *)(v56 + 20);
  v58 = (char *)v51 + v57;
  v59 = v52 + v57;
  v60 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 24))(v58, v59, v60);
  v61 = *(int *)(v56 + 24);
  v62 = *(void **)(v52 + v61);
  v63 = *(void **)((char *)v51 + v61);
  *(void **)((char *)v51 + v61) = v62;
  v64 = v62;

  v65 = a3[14];
  v66 = *(void **)(a2 + v65);
  v67 = *(void **)(a1 + v65);
  *(_QWORD *)(a1 + v65) = v66;
  v68 = v66;

  v69 = a3[15];
  v70 = *(void **)(a2 + v69);
  v71 = *(void **)(a1 + v69);
  *(_QWORD *)(a1 + v69) = v70;
  v72 = v70;

  v73 = a3[16];
  v74 = *(_QWORD *)(a2 + v73);
  v75 = *(_QWORD *)(a1 + v73);
  *(_QWORD *)(a1 + v73) = v74;
  swift_retain(v74);
  swift_release(v75);
  v76 = a3[17];
  v77 = *(void **)(a2 + v76);
  v78 = *(void **)(a1 + v76);
  *(_QWORD *)(a1 + v76) = v77;
  v79 = v77;

  v80 = a3[18];
  v81 = *(void **)(a2 + v80);
  v82 = *(void **)(a1 + v80);
  *(_QWORD *)(a1 + v80) = v81;
  v83 = v81;

  v84 = a3[19];
  v85 = *(void **)(a2 + v84);
  v86 = *(void **)(a1 + v84);
  *(_QWORD *)(a1 + v84) = v85;
  v87 = v85;

  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  return a1;
}

uint64_t sub_1000E8E30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[9];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = sub_100047110(&qword_10081F0A0);
  *(_QWORD *)&v7[*(int *)(v11 + 28)] = *(_QWORD *)&v8[*(int *)(v11 + 28)];
  v12 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for MetricChartData(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100047110(&qword_10081F090);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v10((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
    *(_QWORD *)((char *)v13 + *(int *)(v15 + 24)) = *(_QWORD *)((char *)v14 + *(int *)(v15 + 24));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = sub_100047110(&qword_10081F0A8);
  *(_QWORD *)((char *)v13 + *(int *)(v18 + 28)) = *(_QWORD *)((char *)v14 + *(int *)(v18 + 28));
  v19 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v22 = type metadata accessor for MetricFormattingHelper(0);
  v23 = *(int *)(v22 + 20);
  v24 = v20 + v23;
  v25 = v21 + v23;
  v26 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)(v20 + *(int *)(v22 + 24)) = *(_QWORD *)(v21 + *(int *)(v22 + 24));
  v27 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v28 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  v29 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  return a1;
}

uint64_t sub_1000E9048(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void **, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_release(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v12 - 8);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40);
  v61(v10, v11, v12);
  v13 = *(int *)(sub_100047110(&qword_10081F0A0) + 28);
  v14 = *(_QWORD *)(v10 + v13);
  *(_QWORD *)(v10 + v13) = *(_QWORD *)(v11 + v13);
  swift_release(v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v19);
  v20 = a3[11];
  v21 = (void **)(a1 + v20);
  v22 = (void **)(a2 + v20);
  v23 = type metadata accessor for MetricChartData(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v57 = *v21;
      *v21 = *v22;

      v61((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v12);
      v58 = *(int *)(v23 + 24);
      v59 = *(void **)((char *)v21 + v58);
      *(void **)((char *)v21 + v58) = *(void **)((char *)v22 + v58);

      goto LABEL_7;
    }
    sub_100011F54((uint64_t)v21, type metadata accessor for MetricChartData);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = sub_100047110(&qword_10081F090);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  *v21 = *v22;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v12);
  *(void **)((char *)v21 + *(int *)(v23 + 24)) = *(void **)((char *)v22 + *(int *)(v23 + 24));
  (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  v29 = *(int *)(sub_100047110(&qword_10081F0A8) + 28);
  v30 = *(uint64_t *)((char *)v21 + v29);
  *(void **)((char *)v21 + v29) = *(void **)((char *)v22 + v29);
  swift_release(v30);
  v31 = a3[12];
  v32 = *(void **)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);

  v33 = a3[13];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);

  v37 = type metadata accessor for MetricFormattingHelper(0);
  v38 = *(int *)(v37 + 20);
  v39 = v34 + v38;
  v40 = v35 + v38;
  v41 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = *(int *)(v37 + 24);
  v43 = *(void **)(v34 + v42);
  *(_QWORD *)(v34 + v42) = *(_QWORD *)(v35 + v42);

  v44 = a3[14];
  v45 = *(void **)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);

  v46 = a3[15];
  v47 = *(void **)(a1 + v46);
  *(_QWORD *)(a1 + v46) = *(_QWORD *)(a2 + v46);

  v48 = a3[16];
  v49 = *(_QWORD *)(a1 + v48);
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(a2 + v48);
  swift_release(v49);
  v50 = a3[17];
  v51 = *(void **)(a1 + v50);
  *(_QWORD *)(a1 + v50) = *(_QWORD *)(a2 + v50);

  v52 = a3[18];
  v53 = *(void **)(a1 + v52);
  *(_QWORD *)(a1 + v52) = *(_QWORD *)(a2 + v52);

  v54 = a3[19];
  v55 = *(void **)(a1 + v54);
  *(_QWORD *)(a1 + v54) = *(_QWORD *)(a2 + v54);

  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  return a1;
}

uint64_t sub_1000E9388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9394);
}

uint64_t sub_1000E9394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = sub_100047110(&qword_10081F0A0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_100047110(&qword_10081F0A8);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[11];
    }
    else
    {
      v8 = type metadata accessor for MetricFormattingHelper(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[13];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[10]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000E9464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9470);
}

uint64_t sub_1000E9470(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_100047110(&qword_10081F0A0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[9];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
      return result;
    }
    v12 = sub_100047110(&qword_10081F0A8);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[11];
    }
    else
    {
      v10 = type metadata accessor for MetricFormattingHelper(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[13];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1000E953C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[17];

  v8[0] = &unk_100622FD8;
  v8[1] = &unk_100622FF0;
  v8[2] = &unk_100623008;
  v8[3] = &unk_100623020;
  v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000E9648(319);
  if (v3 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(v2 - 8) + 64;
    v8[6] = &unk_100623038;
    sub_1000E969C(319);
    if (v5 <= 0x3F)
    {
      v8[7] = *(_QWORD *)(v4 - 8) + 64;
      v8[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6 = type metadata accessor for MetricFormattingHelper(319);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        v8[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8[12] = (char *)&value witness table for Builtin.NativeObject + 64;
        v8[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v8[16] = &unk_100623050;
        swift_initStructMetadata(a1, 256, 17, v8, a1 + 16);
      }
    }
  }
}

void sub_1000E9648(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081F118)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081F118);
  }
}

void sub_1000E969C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081F120)
  {
    v2 = sub_100007050(&qword_10081F090);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081F120);
  }
}

uint64_t sub_1000E96F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AAFA4, 1);
}

void sub_1000E9704(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000E5754(*(char **)(v1 + 16), a1);
}

unint64_t sub_1000E9714()
{
  unint64_t result;

  result = qword_10081F1D0;
  if (!qword_10081F1D0)
  {
    result = swift_getWitnessTable(&unk_10063BCEC, &type metadata for MetricDataProviderTimeScale);
    atomic_store(result, (unint64_t *)&qword_10081F1D0);
  }
  return result;
}

uint64_t sub_1000E975C()
{
  char *v0;
  char v1;

  type metadata accessor for MetricDetailView(0);
  v0 = (char *)sub_1000E710C();
  return sub_1000E71D0(v0, v1 & 1);
}

uint64_t sub_1000E97A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10081F1E4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000EA380;
  return sub_1000E7408(v3);
}

double sub_1000E9808(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8) + 80);
  return sub_1000E75D4(a1, (unsigned __int8 *)(v1 + ((v3 + 16) & ~v3)));
}

uint64_t sub_1000E9848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10081F1FC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000EA380;
  return sub_1000E7CAC(a1, v5, v6, v7);
}

uint64_t sub_1000E98D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = (_QWORD *)swift_task_alloc(dword_10081F20C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000EA380;
  return sub_1000E7974(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1000E9980()
{
  return sub_1000E9BA8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1000E7B8C);
}

uint64_t sub_1000E99A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v1 = (int *)type metadata accessor for MetricDetailView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  v7 = v0 + v4 + v1[9];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = sub_100047110(&qword_10081F0A0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v10 + 28)));
  v11 = (_QWORD *)(v0 + v4 + v1[10]);
  swift_bridgeObjectRelease(*v11);
  swift_release(v11[1]);
  v12 = (id *)(v0 + v4 + v1[11]);
  v13 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {

    v9((uint64_t)v12 + *(int *)(v13 + 20), v8);
  }
  v14 = v3 | 7;
  v15 = v4 + v5;
  v16 = sub_100047110(&qword_10081F0A8);
  swift_release(*(id *)((char *)v12 + *(int *)(v16 + 28)));

  v17 = (id *)(v6 + v1[13]);
  v18 = type metadata accessor for MetricFormattingHelper(0);
  v19 = (char *)v17 + *(int *)(v18 + 20);
  v20 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_release(*(_QWORD *)(v6 + v1[16]));
  return swift_deallocObject(v0, v15, v14);
}

uint64_t sub_1000E9B8C()
{
  return sub_1000E9BA8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1000E7830);
}

uint64_t sub_1000E9BA8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000E9BD0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v1 = (int *)type metadata accessor for MetricDetailView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  v7 = v0 + v4 + v1[9];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = sub_100047110(&qword_10081F0A0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v10 + 28)));
  v11 = (_QWORD *)(v0 + v4 + v1[10]);
  swift_bridgeObjectRelease(*v11);
  swift_release(v11[1]);
  v12 = (id *)(v0 + v4 + v1[11]);
  v13 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {

    v9((uint64_t)v12 + *(int *)(v13 + 20), v8);
  }
  v14 = ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  v15 = v3 | 7;
  v16 = sub_100047110(&qword_10081F0A8);
  swift_release(*(id *)((char *)v12 + *(int *)(v16 + 28)));

  v17 = (id *)(v6 + v1[13]);
  v18 = type metadata accessor for MetricFormattingHelper(0);
  v19 = (char *)v17 + *(int *)(v18 + 20);
  v20 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_release(*(_QWORD *)(v6 + v1[16]));
  return swift_deallocObject(v0, v14, v15);
}

uint64_t sub_1000E9DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = (_QWORD *)swift_task_alloc(dword_10081F20C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000DA0E4;
  return sub_1000E7974(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1000E9E7C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v1 = (int *)type metadata accessor for MetricDetailView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  v7 = v0 + v4 + v1[9];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = sub_100047110(&qword_10081F0A0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v10 + 28)));
  v11 = (_QWORD *)(v0 + v4 + v1[10]);
  swift_bridgeObjectRelease(*v11);
  swift_release(v11[1]);
  v12 = (id *)(v0 + v4 + v1[11]);
  v13 = type metadata accessor for MetricChartData(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {

    v9((uint64_t)v12 + *(int *)(v13 + 20), v8);
  }
  v14 = v3 | 7;
  v15 = v4 + v5;
  v16 = sub_100047110(&qword_10081F0A8);
  swift_release(*(id *)((char *)v12 + *(int *)(v16 + 28)));

  v17 = (id *)(v6 + v1[13]);
  v18 = type metadata accessor for MetricFormattingHelper(0);
  v19 = (char *)v17 + *(int *)(v18 + 20);
  v20 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);

  swift_release(*(_QWORD *)(v6 + v1[16]));
  return swift_deallocObject(v0, v15, v14);
}

void sub_1000EA060()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricDetailView(0) - 8) + 80);
  sub_1000E7EA8(v0 + ((v1 + 16) & ~v1));
}

void sub_1000EA08C(_OWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000E7F2C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000EA094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F2D8;
  if (!qword_10081F2D8)
  {
    v1 = sub_100007050(&qword_10081F2D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F2D8);
  }
  return result;
}

unint64_t sub_1000EA0F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F2E8;
  if (!qword_10081F2E8)
  {
    v1 = type metadata accessor for BorderedProminentButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BorderedProminentButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_10081F2E8);
  }
  return result;
}

unint64_t sub_1000EA158()
{
  unint64_t result;

  result = qword_10081F300;
  if (!qword_10081F300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
    atomic_store(result, (unint64_t *)&qword_10081F300);
  }
  return result;
}

uint64_t sub_1000EA1A0()
{
  return 8;
}

uint64_t sub_1000EA1AC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000EA1B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_1000EA1C8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1000EA1DC()
{
  unint64_t result;

  result = qword_10081F308;
  if (!qword_10081F308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_10081F308);
  }
  return result;
}

uint64_t sub_1000EA224()
{
  return 8;
}

uint64_t sub_1000EA238()
{
  return sub_100028384(&qword_10081F310, &qword_10081F1F0, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t storeEnumTagSinglePayload for MetricDetailViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000EA2B0 + 4 * byte_100622FA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000EA2E4 + 4 * byte_100622FA0[v4]))();
}

uint64_t sub_1000EA2E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EA2EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EA2F4);
  return result;
}

uint64_t sub_1000EA300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EA308);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000EA30C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EA314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricDetailViewStyle()
{
  return &type metadata for MetricDetailViewStyle;
}

unint64_t sub_1000EA334()
{
  unint64_t result;

  result = qword_10081F318;
  if (!qword_10081F318)
  {
    result = swift_getWitnessTable(&unk_100623258, &type metadata for MetricDetailViewStyle);
    atomic_store(result, (unint64_t *)&qword_10081F318);
  }
  return result;
}

uint64_t sub_1000EA388()
{
  _BYTE *v0;

  if (*v0)
    return 1702521203;
  else
    return 1701869940;
}

uint64_t sub_1000EA3AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000EF7B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000EA3D0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000EA3DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EFA64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EA404(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EFA64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EA42C(_QWORD *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  char v22;

  v8 = sub_100047110(&qword_10081F3A0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100016804(a1, v12);
  v14 = sub_1000EFA64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CardTemplate.CodingKeys, &type metadata for CardTemplate.CodingKeys, v14, v12, v13);
  v20[0] = a2;
  v20[1] = a3;
  v21 = a4;
  v22 = 0;
  v15 = sub_1000EFB30();
  v16 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v22, v8, &type metadata for CardType, v15);
  if (!v16)
  {
    LOBYTE(v20[0]) = HIBYTE(a4) & 1;
    v22 = 1;
    v17 = sub_1000EFB74();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v22, v8, &type metadata for CardSize, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int sub_1000EA584(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, 0);
  sub_10054FFE4(a1, a2, a3);
  v7 = v6;
  String.hash(into:)(v10, v8, v6);
  swift_bridgeObjectRelease(v7);
  if (!(_BYTE)a3 || a3 == 2)
  {
    Hasher._combine(_:)(a1);
  }
  else if (a3 == 1)
  {
    String.hash(into:)(v10, a1, a2);
  }
  Hasher._combine(_:)((a3 >> 8) & 1);
  return Hasher._finalize()();
}

uint64_t sub_1000EA640()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100623400);
  v2 = swift_getKeyPath(&unk_100623428);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000EA6B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int16 v6;

  result = sub_1000EF880(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t sub_1000EA6E4(_QWORD *a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  return sub_1000EA42C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 16));
}

Swift::Int sub_1000EA714()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 17))
    v1 = 256;
  else
    v1 = 0;
  return sub_1000EA584(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16));
}

void sub_1000EA734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 17);
  sub_10054FFE4(*(_QWORD *)v1, v4, *(_BYTE *)(v1 + 16));
  v8 = v7;
  String.hash(into:)(a1, v9, v7);
  swift_bridgeObjectRelease(v8);
  if (!v5 || v5 == 2)
  {
    Hasher._combine(_:)(v3);
  }
  else if (v5 == 1)
  {
    String.hash(into:)(a1, v3, v4);
  }
  Hasher._combine(_:)(v6);
}

Swift::Int sub_1000EA7DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v3 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 17);
  Hasher.init(_seed:)(v10, a1);
  sub_10054FFE4(v3, v2, v4);
  v7 = v6;
  String.hash(into:)(v10, v8, v6);
  swift_bridgeObjectRelease(v7);
  if (!v4 || v4 == 2)
  {
    Hasher._combine(_:)(v3);
  }
  else if (v4 == 1)
  {
    String.hash(into:)(v10, v3, v2);
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_1000EA898(uint64_t a1)
{
  sub_1000EE664(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

id sub_1000EA8D8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  objc_class *v8;
  id v9;
  uint64_t v11;
  objc_super v12;
  _QWORD *v13;

  v1 = sub_100047110(&qword_10081F3E0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider__currentCardConfiguration];
  v13 = _swiftEmptyArrayStorage;
  v6 = v0;
  v7 = sub_100047110(&qword_10081F368);
  Published.init(initialValue:)(&v13, v7);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes] = &_swiftEmptySetSingleton;
  v6[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_didSetToDefaultConfiguration] = 0;

  v8 = (objc_class *)type metadata accessor for SummaryConfigurationProvider(0);
  v12.receiver = v6;
  v12.super_class = v8;
  v9 = objc_msgSendSuper2(&v12, "init");
  sub_1000EA9EC();
  sub_1000EADF4();

  return v9;
}

double sub_1000EA9EC()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  NSObject *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONDecoder.init()();
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v6 = objc_msgSend(v5, "dataForKey:", CFSTR("ActivityDashboardCardConfigurationKey"));

  if (v6)
  {
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

    v11 = sub_100047110(&qword_10081F368);
    v12 = sub_1000F0610(&qword_10081F3F8, &qword_10081F368, (void (*)(void))sub_1000F0674, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v41, v11, v8, v10, v11, v12);
    v23 = v41;
    v24 = *(_QWORD *)(v41 + 16);
    if (v24)
    {
      swift_bridgeObjectRetain(v41);
      v25 = (char *)(v23 + 49);
      do
      {
        v26 = *(v25 - 1);
        v27 = *v25;
        v41 = *(_OWORD *)(v25 - 17);
        v42 = v26;
        v43 = v27;
        sub_1000EB854((uint64_t)&v41, ObjectType);
        v25 += 24;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease(v23);
    }
    KeyPath = swift_getKeyPath(&unk_100623400);
    v29 = swift_getKeyPath(&unk_100623428);
    *(_QWORD *)&v41 = v23;
    v30 = static Published.subscript.setter(&v41, v1, KeyPath, v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = (void *)HKLogActivity;
    v33 = v31;
    v34 = os_log_type_enabled(HKLogActivity, v31);
    v35 = v32;
    if (v34)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v41 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = _typeName(_:qualified:)(ObjectType, 0);
      v40 = v39;
      v44 = sub_10003E8EC(v38, v39, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v36 + 4);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v35, v33, "%s Loaded stored configuration", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    sub_10004D9E4(v8, v10);

    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  else
  {
    v13 = static os_log_type_t.default.getter(v7);
    v14 = (void *)HKLogActivity;
    v15 = v13;
    if (os_log_type_enabled(HKLogActivity, v13))
    {
      v16 = v14;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v41 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = _typeName(_:qualified:)(ObjectType, 0);
      v21 = v20;
      v44 = sub_10003E8EC(v19, v20, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v17 + 4);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v15, "%s No configuration read from file, using default layout instead.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
    *((_BYTE *)v1 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_didSetToDefaultConfiguration) = 1;
  }
  return result;
}

void sub_1000EADF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *log;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45[4];

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONDecoder.init()();
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v6 = objc_msgSend(v5, "dataForKey:", CFSTR("ActivityDashboardUserRemovedCardTypes"));

  if (!v6)
  {
    swift_release(v4);
    return;
  }
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = sub_100047110(&qword_10081F3E8);
  v11 = sub_1000F0610(&qword_10081F3F0, &qword_10081F3E8, (void (*)(void))sub_1000EFAA8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v41 = v9;
  v42 = v7;
  v12 = dispatch thunk of JSONDecoder.decode<A>(_:from:)(v45, v10, v7, v9, v10, v11);
  v40 = v45[0];
  v13 = static os_log_type_t.default.getter(v12);
  v14 = (void *)HKLogActivity;
  v15 = v13;
  if (os_log_type_enabled(HKLogActivity, v13))
  {
    log = v14;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v45[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = _typeName(_:qualified:)(ObjectType, 0);
    v21 = v20;
    *(_QWORD *)&v43 = sub_10003E8EC(v19, v20, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v17 + 4);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, log, v15, "%s Loading userRemovedCardTypes:", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes);
  swift_beginAccess(v22, v45, 1, 0);
  v23 = *v22;
  v24 = *v22 + 56;
  v25 = 1 << *(_BYTE *)(*v22 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(*v22 + 56);
  v28 = (unint64_t)(v25 + 63) >> 6;
  swift_bridgeObjectRetain_n(*v22, 2);
  v29 = 0;
  while (1)
  {
    if (v27)
    {
      v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v31 = v30 | (v29 << 6);
      goto LABEL_10;
    }
    if (__OFADD__(v29++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v29 >= v28)
      goto LABEL_31;
    v35 = *(_QWORD *)(v24 + 8 * v29);
    if (!v35)
      break;
LABEL_26:
    v27 = (v35 - 1) & v35;
    v31 = __clz(__rbit64(v35)) + (v29 << 6);
LABEL_10:
    v32 = *(_QWORD *)(v23 + 48) + 24 * v31;
    v33 = *(_BYTE *)(v32 + 16);
    v43 = *(_OWORD *)v32;
    v44 = v33;
    sub_1000ED120((uint64_t)&v43, ObjectType);
  }
  v36 = v29 + 1;
  if (v29 + 1 >= v28)
    goto LABEL_31;
  v35 = *(_QWORD *)(v24 + 8 * v36);
  if (v35)
    goto LABEL_25;
  v36 = v29 + 2;
  if (v29 + 2 >= v28)
    goto LABEL_31;
  v35 = *(_QWORD *)(v24 + 8 * v36);
  if (v35)
    goto LABEL_25;
  v36 = v29 + 3;
  if (v29 + 3 >= v28)
    goto LABEL_31;
  v35 = *(_QWORD *)(v24 + 8 * v36);
  if (v35)
    goto LABEL_25;
  v36 = v29 + 4;
  if (v29 + 4 >= v28)
    goto LABEL_31;
  v35 = *(_QWORD *)(v24 + 8 * v36);
  if (v35)
    goto LABEL_25;
  v36 = v29 + 5;
  if (v29 + 5 >= v28)
  {
LABEL_31:
    swift_release(v23);
    swift_bridgeObjectRelease(v23);
    v37 = sub_10014823C(v40);
    swift_bridgeObjectRelease(v40);
    v38 = *v22;
    *v22 = v37;
    swift_bridgeObjectRelease(v38);
    sub_10004D9E4(v42, v41);
    swift_release(v4);
    return;
  }
  v35 = *(_QWORD *)(v24 + 8 * v36);
  if (v35)
  {
LABEL_25:
    v29 = v36;
    goto LABEL_26;
  }
  while (1)
  {
    v29 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v29 >= v28)
      goto LABEL_31;
    v35 = *(_QWORD *)(v24 + 8 * v29);
    ++v36;
    if (v35)
      goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

id sub_1000EB248()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SummaryConfigurationProvider(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000EB2D0()
{
  return type metadata accessor for SummaryConfigurationProvider(0);
}

uint64_t type metadata accessor for SummaryConfigurationProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10081F350;
  if (!qword_10081F350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SummaryConfigurationProvider);
  return result;
}

void sub_1000EB314(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000EB398(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_100623310;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1000EB398(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081F360)
  {
    v2 = sub_100007050(&qword_10081F368);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081F360);
  }
}

uint64_t sub_1000EB3F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for CardType(uint64_t a1)
{
  return sub_1000EB41C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000EB41C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s10FitnessApp12CardTemplateVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1000EB3F4(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for CardTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1000EB3F4(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000EB41C(v7, v8, v9);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for CardTemplate(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CardTemplate(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1000EB41C(v5, v6, v7);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardTemplate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CardTemplate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardTemplate()
{
  return &type metadata for CardTemplate;
}

unint64_t sub_1000EB5F4()
{
  unint64_t result;

  result = qword_10081F370;
  if (!qword_10081F370)
  {
    result = swift_getWitnessTable(&unk_100623338, &type metadata for CardTemplate);
    atomic_store(result, (unint64_t *)&qword_10081F370);
  }
  return result;
}

uint64_t sub_1000EB638@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  v8 = *(unsigned __int8 *)(result + 16);
  if ((_DWORD)v8 == 2)
  {
    if ((~a2 & 0x30) != 0)
      goto LABEL_18;
    result = sub_1002D357C(*(_QWORD *)result, a3);
    if ((result & 1) == 0)
      goto LABEL_18;
  }
  else if ((_DWORD)v8 == 3)
  {
    if (!(v7 | v6))
      goto LABEL_18;
    if (v6 == 6 && v7 == 0)
    {
      if ((a2 & 2) == 0)
        goto LABEL_18;
    }
    else if (v6 != 5 || v7)
    {
      if (v6 == 7 && !v7 && (a2 & 0x10) == 0)
        goto LABEL_18;
    }
    else if ((~a2 & 6) != 0)
    {
      goto LABEL_18;
    }
  }
  result = sub_1002D35DC(v6, v7, v8, (uint64_t)&off_10077BD58);
  if ((result & 1) == 0 || (a2 & 0x40) != 0)
    __asm { BR              X9 }
LABEL_18:
  *a4 = _swiftEmptyArrayStorage;
  return result;
}

void sub_1000EB854(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  os_log_type_t v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *log;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 17);
  v7 = static os_log_type_t.default.getter(a1);
  v8 = (void *)HKLogActivity;
  v9 = v7;
  if (os_log_type_enabled(HKLogActivity, v7))
  {
    sub_1000EB3F4(v3, v4, v5);
    sub_1000EB3F4(v3, v4, v5);
    log = v8;
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = _typeName(_:qualified:)(a2, 0);
    v14 = v13;
    v19 = sub_10003E8EC(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    v19 = v3;
    v20 = v4;
    v21 = v5;
    v22 = v6;
    sub_1000EB3F4(v3, v4, v5);
    v15 = String.init<A>(describing:)(&v19, &type metadata for CardTemplate);
    v17 = v16;
    v19 = sub_10003E8EC(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 14);
    swift_bridgeObjectRelease(v17);
    sub_1000EB41C(v3, v4, v5);
    sub_1000EB41C(v3, v4, v5);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "%s loaded card type from stored configuration: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
}

double sub_1000EBA5C(uint64_t a1)
{
  void *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  void *v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v30 = _swiftEmptyArrayStorage;
    sub_1001214FC(0, v2, 0);
    v5 = a1 + 32;
    v3 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000252E0(v5, (uint64_t)v27);
      v6 = v28;
      v7 = v29;
      sub_100016804(v27, v28);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      v10 = v9;
      v12 = v11;
      v13 = v28;
      v14 = v29;
      sub_100016804(v27, v28);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v27);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1001214FC(0, v3[2] + 1, 1);
        v3 = v30;
      }
      v17 = v3[2];
      v16 = v3[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001214FC(v16 > 1, v17 + 1, 1);
        v3 = v30;
      }
      v3[2] = v17 + 1;
      v18 = &v3[3 * v17];
      v18[4] = v8;
      v18[5] = v10;
      *((_BYTE *)v18 + 48) = v12;
      *((_BYTE *)v18 + 49) = v15 & 1;
      v5 += 40;
      --v2;
    }
    while (v2);
    v1 = v26;
  }
  KeyPath = swift_getKeyPath(&unk_100623400);
  v20 = swift_getKeyPath(&unk_100623428);
  v27[0] = v3;
  v21 = v1;
  static Published.subscript.setter(v27, v21, KeyPath, v20);
  v22 = swift_getKeyPath(&unk_100623400);
  v23 = swift_getKeyPath(&unk_100623428);
  static Published.subscript.getter(v27, v21, v22, v23);
  swift_release(v22);
  swift_release(v23);
  v24 = v27[0];
  sub_1000EFBCC();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v24).n128_u64[0];
  return result;
}

_QWORD *sub_1000EBC60(uint64_t a1)
{
  int64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100121528(0, v1, 0);
    v3 = (char *)(a1 + 48);
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      v5 = *((_QWORD *)v3 - 1);
      v6 = *v3;
      sub_1000EB3F4(v4, v5, *v3);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_100121528(v7 > 1, v8 + 1, 1);
      v3 += 24;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[3 * v8];
      v9[4] = v4;
      v9[5] = v5;
      *((_BYTE *)v9 + 48) = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

double sub_1000EBD50(unsigned int a1)
{
  void *v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_didSetToDefaultConfiguration) & 1) != 0)
  {
    v3 = sub_1000F026C(a1);
    KeyPath = swift_getKeyPath(&unk_100623400);
    v5 = swift_getKeyPath(&unk_100623428);
    v18 = v3;
    static Published.subscript.setter(&v18, v1, KeyPath, v5);
  }
  else
  {
    v7 = swift_getKeyPath(&unk_100623400);
    v8 = swift_getKeyPath(&unk_100623428);
    static Published.subscript.getter(&v18, v1, v7, v8);
    swift_release(v7);
    swift_release(v8);
    v9 = (uint64_t)v18;
    v10 = sub_1000EBEE4(a1, (uint64_t)v18);
    swift_bridgeObjectRelease(v9);
    v11 = sub_1000EC410(a1, v10);
    swift_bridgeObjectRelease(v10);
    v12 = swift_getKeyPath(&unk_100623400);
    v13 = swift_getKeyPath(&unk_100623428);
    v18 = (_QWORD *)v11;
    v14 = v1;
    static Published.subscript.setter(&v18, v14, v12, v13);
    v15 = swift_getKeyPath(&unk_100623400);
    v16 = swift_getKeyPath(&unk_100623428);
    static Published.subscript.getter(&v18, v14, v15, v16);
    swift_release(v15);
    swift_release(v16);
    v17 = (uint64_t)v18;
    sub_1000EFBCC();
    *(_QWORD *)&result = swift_bridgeObjectRelease(v17).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000EBEE4(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  NSObject *log;
  uint64_t v42;
  __int128 v43;
  char v44;
  ValueMetadata *v45;
  unint64_t v46;
  _QWORD *v47;

  ObjectType = swift_getObjectType(v2);
  v47 = _swiftEmptyArrayStorage;
  if ((a1 & 0x40) == 0)
    sub_10013BFC8((uint64_t)&off_10077BD58);
  if ((~(_BYTE)a1 & 6) != 0)
  {
    v6 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      v6 = sub_10013FAA8(0, v47[2] + 1, 1, v47);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_10013FAA8((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v6[2] = v8 + 1;
    v9 = &v6[3 * v8];
    *((_OWORD *)v9 + 2) = xmmword_100623560;
    *((_BYTE *)v9 + 48) = 3;
    v47 = v6;
  }
  if ((a1 & 2) == 0)
  {
    v10 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      v10 = sub_10013FAA8(0, v47[2] + 1, 1, v47);
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
      v10 = sub_10013FAA8((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10[2] = v12 + 1;
    v13 = &v10[3 * v12];
    *((_OWORD *)v13 + 2) = xmmword_100623570;
    *((_BYTE *)v13 + 48) = 3;
    v47 = v10;
  }
  v45 = &type metadata for FitnessFeatures;
  v14 = sub_10004F7EC();
  v46 = v14;
  LOBYTE(v43) = 4;
  v15 = isFeatureEnabled(_:)(&v43);
  v16 = _s10FitnessApp24HistoryViewActionContextVwxx_0(&v43);
  v17 = a1 & 1;
  if ((a1 & 9) == 0 && (v15 & 1) != 0)
  {
    v18 = v47;
    if ((a1 & 1) == 0)
      goto LABEL_31;
    goto LABEL_26;
  }
  v19 = static os_log_type_t.default.getter(v16);
  v20 = (void *)HKLogActivity;
  v21 = v19;
  if (os_log_type_enabled(HKLogActivity, v19))
  {
    log = v20;
    v22 = swift_slowAlloc(30, -1);
    v23 = swift_slowAlloc(32, -1);
    *(_DWORD *)v22 = 136315906;
    v42 = v23;
    v24 = _typeName(_:qualified:)(ObjectType, 0);
    v26 = v25;
    *(_QWORD *)&v43 = sub_10003E8EC(v24, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 8, v22 + 4);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v22 + 12) = 1024;
    v45 = &type metadata for FitnessFeatures;
    v46 = v14;
    LOBYTE(v43) = 4;
    v27 = isFeatureEnabled(_:)(&v43);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&v43);
    LODWORD(v43) = v27 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 4, v22 + 14);
    *(_WORD *)(v22 + 18) = 1024;
    LODWORD(v43) = (a1 >> 3) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 4, v22 + 20);
    *(_WORD *)(v22 + 24) = 1024;
    v17 = a1 & 1;
    LODWORD(v43) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 4, v22 + 26);
    _os_log_impl((void *)&_mh_execute_header, log, v21, "%s removing load card.\nisFeatureEnabled: %{BOOL}d,\nuserProfile contains standalone: %{BOOL}d,\nuserProfile contains fitnessJr: %{BOOL}d", (uint8_t *)v22, 0x1Eu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  v18 = v47;
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v18 = sub_10013FAA8(0, v18[2] + 1, 1, v18);
  v29 = v18[2];
  v28 = v18[3];
  if (v29 >= v28 >> 1)
    v18 = sub_10013FAA8((_QWORD *)(v28 > 1), v29 + 1, 1, v18);
  v18[2] = v29 + 1;
  v30 = &v18[3 * v29];
  *((_OWORD *)v30 + 2) = xmmword_100623580;
  *((_BYTE *)v30 + 48) = 3;
  v47 = v18;
  if (v17)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      v18 = sub_10013FAA8(0, v18[2] + 1, 1, v18);
    v32 = v18[2];
    v31 = v18[3];
    if (v32 >= v31 >> 1)
      v18 = sub_10013FAA8((_QWORD *)(v31 > 1), v32 + 1, 1, v18);
    v18[2] = v32 + 1;
    v33 = &v18[3 * v32];
    *((_OWORD *)v33 + 2) = xmmword_100623590;
    *((_BYTE *)v33 + 48) = 3;
    v47 = v18;
  }
LABEL_31:
  v34 = sub_1000EBC60(a2);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v18);
  v36 = sub_1000EEED8(v35, (uint64_t)v34);
  swift_bridgeObjectRelease_n(v18, 2);
  swift_bridgeObjectRelease_n(v34, 2);
  v42 = a2;
  v37 = v36[2];
  if (v37)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v36);
    v38 = v36 + 6;
    do
    {
      v39 = *v38;
      v43 = *((_OWORD *)v38 - 1);
      v44 = v39;
      sub_1000EC774((uint64_t)&v43, (uint64_t)&v42, ObjectType);
      v38 += 24;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease_n(v36, 2);
    return v42;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v36);
  }
  return a2;
}

uint64_t sub_1000EC410(char a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;

  v3 = v2;
  ObjectType = swift_getObjectType(v3);
  v7 = sub_1000EBC60(a2);
  if ((a1 & 0x40) == 0)
  {
    v8 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_20;
    goto LABEL_9;
  }
  v8 = sub_10013FABC(0, 1, 1, _swiftEmptyArrayStorage);
  v10 = v8[2];
  v9 = v8[3];
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = sub_10013FABC((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
    v9 = v8[3];
    v11 = v9 >> 1;
  }
  v8[2] = v12;
  v13 = &v8[3 * v10];
  *((_OWORD *)v13 + 2) = xmmword_1006235A0;
  *((_WORD *)v13 + 24) = 0;
  v14 = v10 + 2;
  if (v11 <= v12)
    v8 = sub_10013FABC((_QWORD *)(v9 > 1), v14, 1, v8);
  v8[2] = v14;
  v15 = &v8[3 * v12];
  *((_OWORD *)v15 + 2) = xmmword_1006235B0;
  *((_WORD *)v15 + 24) = 0;
  if ((a1 & 2) != 0)
  {
LABEL_9:
    if ((a1 & 4) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_10013FABC(0, v8[2] + 1, 1, v8);
      v17 = v8[2];
      v16 = v8[3];
      if (v17 >= v16 >> 1)
        v8 = sub_10013FABC((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
      v8[2] = v17 + 1;
      v18 = &v8[3 * v17];
      *((_OWORD *)v18 + 2) = xmmword_100623560;
      *((_WORD *)v18 + 24) = 259;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10013FABC(0, v8[2] + 1, 1, v8);
    v20 = v8[2];
    v19 = v8[3];
    if (v20 >= v19 >> 1)
      v8 = sub_10013FABC((_QWORD *)(v19 > 1), v20 + 1, 1, v8);
    v8[2] = v20 + 1;
    v21 = &v8[3 * v20];
    *((_OWORD *)v21 + 2) = xmmword_100623570;
    *((_WORD *)v21 + 24) = 3;
  }
LABEL_20:
  if ((a1 & 0x81) == 0x80)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10013FABC(0, v8[2] + 1, 1, v8);
    v23 = v8[2];
    v22 = v8[3];
    if (v23 >= v22 >> 1)
      v8 = sub_10013FABC((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
    v8[2] = v23 + 1;
    v24 = &v8[3 * v23];
    *((_OWORD *)v24 + 2) = xmmword_100623590;
    *((_WORD *)v24 + 24) = 259;
  }
  v25 = v3;
  v26 = sub_1000EF260((uint64_t)v8, (uint64_t)v7, v25, ObjectType);

  swift_bridgeObjectRelease(v7);
  v35 = a2;
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    swift_bridgeObjectRetain(a2);
    v28 = (char *)(v26 + 49);
    do
    {
      v29 = *(v28 - 1);
      v30 = *v28;
      v32 = *(_OWORD *)(v28 - 17);
      v33 = v29;
      v34 = v30;
      sub_1000ECE74((uint64_t)&v32, &v35, ObjectType);
      v28 += 24;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease(v26);
    return v35;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v26);
  }
  return a2;
}

void *sub_1000EC774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *result;
  int64_t v21;
  NSObject *log;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = static os_log_type_t.default.getter(a1);
  v9 = (void *)HKLogActivity;
  v10 = v8;
  if (os_log_type_enabled(HKLogActivity, v8))
  {
    sub_1000EB3F4(v5, v6, v7);
    sub_1000EB3F4(v5, v6, v7);
    log = v9;
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = _typeName(_:qualified:)(a3, 0);
    v15 = v14;
    v23 = sub_10003E8EC(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v11 + 12) = 2080;
    v23 = v5;
    v24 = v6;
    v25 = v7;
    sub_1000EB3F4(v5, v6, v7);
    v16 = String.init<A>(describing:)(&v23, &type metadata for CardType);
    v18 = v17;
    v23 = sub_10003E8EC(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 14);
    swift_bridgeObjectRelease(v18);
    sub_1000EB41C(v5, v6, v7);
    sub_1000EB41C(v5, v6, v7);
    _os_log_impl((void *)&_mh_execute_header, log, v10, "%s removing card type %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  sub_1000EB3F4(v5, v6, v7);
  v19 = sub_1000EFDB4(a2);
  result = (void *)sub_1000EB41C(v5, v6, v7);
  v21 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v21 >= v19)
    return sub_10011EF18(v19, v21);
  __break(1u);
  return result;
}

uint64_t sub_1000EC9D4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  os_log_type_t v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  char *v27;
  char *v29;
  uint64_t v30;
  NSObject *log;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38[24];
  uint64_t v39;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 16);
  v32 = *(_BYTE *)(a1 + 17);
  v10 = sub_1002D35DC(*(_QWORD *)a1, v8, v9, a2);
  if ((v10 & 1) == 0)
  {
    v11 = (uint64_t *)&a3[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes];
    swift_beginAccess(&a3[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes], v38, 0, 0);
    v12 = *v11;
    sub_1000EB3F4(v7, v8, v9);
    swift_bridgeObjectRetain(v12);
    v13 = sub_1002D3EF0(v7, v8, v9, v12);
    swift_bridgeObjectRelease(v12);
    v10 = sub_1000EB41C(v7, v8, v9);
    if ((v13 & 1) == 0)
      return 1;
  }
  v14 = static os_log_type_t.default.getter(v10);
  v15 = HKLogActivity;
  sub_1000EB3F4(v7, v8, v9);
  sub_1000EB3F4(v7, v8, v9);
  sub_1000EB3F4(v7, v8, v9);
  sub_1000EB3F4(v7, v8, v9);
  if (os_log_type_enabled(v15, v14))
  {
    sub_1000EB3F4(v7, v8, v9);
    swift_bridgeObjectRetain(a2);
    v16 = a3;
    sub_1000EB3F4(v7, v8, v9);
    swift_bridgeObjectRetain(a2);
    v29 = v16;
    log = v15;
    v17 = swift_slowAlloc(34, -1);
    v30 = swift_slowAlloc(64, -1);
    v39 = v30;
    *(_DWORD *)v17 = 136315906;
    v18 = _typeName(_:qualified:)(a4, 0);
    v20 = v19;
    v34 = sub_10003E8EC(v18, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v17 + 12) = 2080;
    v34 = v7;
    v35 = v8;
    v36 = v9;
    v37 = v32;
    sub_1000EB3F4(v7, v8, v9);
    v21 = String.init<A>(describing:)(&v34, &type metadata for CardTemplate);
    v23 = v22;
    v34 = sub_10003E8EC(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14);
    swift_bridgeObjectRelease(v23);
    sub_1000EB41C(v7, v8, v9);
    sub_1000EB41C(v7, v8, v9);
    *(_WORD *)(v17 + 22) = 1024;
    LOBYTE(v20) = sub_1002D35DC(v7, v8, v9, a2);
    swift_bridgeObjectRelease(a2);
    sub_1000EB41C(v7, v8, v9);
    LODWORD(v34) = v20 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v17 + 24);
    swift_bridgeObjectRelease(a2);
    sub_1000EB41C(v7, v8, v9);
    *(_WORD *)(v17 + 28) = 1024;
    v24 = (uint64_t *)&v29[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes];
    swift_beginAccess(&v29[OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes], &v34, 0, 0);
    v25 = *v24;
    sub_1000EB3F4(v7, v8, v9);
    swift_bridgeObjectRetain(v25);
    v26 = sub_1002D3EF0(v7, v8, v9, v25);
    swift_bridgeObjectRelease(v25);
    sub_1000EB41C(v7, v8, v9);

    sub_1000EB41C(v7, v8, v9);
    v33 = v26 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 30);

    sub_1000EB41C(v7, v8, v9);
    _os_log_impl((void *)&_mh_execute_header, log, v14, "%s filtering out card template %s from templatesToAdd.\nactiveTypes contains template: %{BOOL}d,\nuserRemovedCardTypes contains template: %{BOOL}d", (uint8_t *)v17, 0x22u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v27 = a3;
    sub_1000EB41C(v7, v8, v9);
    sub_1000EB41C(v7, v8, v9);
    swift_bridgeObjectRelease(a2);
    sub_1000EB41C(v7, v8, v9);

    sub_1000EB41C(v7, v8, v9);
  }
  return 0;
}

uint64_t sub_1000ECE74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  NSObject *log;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 17);
  v9 = static os_log_type_t.default.getter(a1);
  v10 = (void *)HKLogActivity;
  v11 = v9;
  if (os_log_type_enabled(HKLogActivity, v9))
  {
    sub_1000EB3F4(v5, v6, v7);
    sub_1000EB3F4(v5, v6, v7);
    log = v10;
    v29 = v8;
    v12 = swift_slowAlloc(22, -1);
    v28 = a2;
    v13 = swift_slowAlloc(64, -1);
    v34 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = _typeName(_:qualified:)(a3, 0);
    v16 = v15;
    v30 = sub_10003E8EC(v14, v15, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 4);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v12 + 12) = 2080;
    v30 = v5;
    v31 = v6;
    v32 = v7;
    v33 = v29;
    sub_1000EB3F4(v5, v6, v7);
    v17 = String.init<A>(describing:)(&v30, &type metadata for CardTemplate);
    v19 = v18;
    v30 = sub_10003E8EC(v17, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v12 + 14);
    swift_bridgeObjectRelease(v19);
    sub_1000EB41C(v5, v6, v7);
    sub_1000EB41C(v5, v6, v7);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "%s adding card template %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    v20 = v13;
    a2 = v28;
    swift_slowDealloc(v20, -1, -1);
    v21 = v12;
    v8 = v29;
    swift_slowDealloc(v21, -1, -1);

  }
  v22 = (_QWORD *)*a2;
  sub_1000EB3F4(v5, v6, v7);
  result = swift_isUniquelyReferenced_nonNull_native(v22);
  *a2 = (uint64_t)v22;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_10013FABC(0, v22[2] + 1, 1, v22);
    v22 = (_QWORD *)result;
    *a2 = result;
  }
  v25 = v22[2];
  v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    result = (uint64_t)sub_10013FABC((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
    v22 = (_QWORD *)result;
    *a2 = result;
  }
  v22[2] = v25 + 1;
  v26 = &v22[3 * v25];
  v26[4] = v5;
  v26[5] = v6;
  *((_BYTE *)v26 + 48) = v7;
  *((_BYTE *)v26 + 49) = v8;
  return result;
}

void sub_1000ED120(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *log;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = static os_log_type_t.default.getter(a1);
  v7 = (void *)HKLogActivity;
  v8 = v6;
  if (os_log_type_enabled(HKLogActivity, v6))
  {
    sub_1000EB3F4(v3, v4, v5);
    sub_1000EB3F4(v3, v4, v5);
    log = v7;
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v21 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = _typeName(_:qualified:)(a2, 0);
    v13 = v12;
    v18 = sub_10003E8EC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2080;
    v18 = v3;
    v19 = v4;
    v20 = v5;
    sub_1000EB3F4(v3, v4, v5);
    v14 = String.init<A>(describing:)(&v18, &type metadata for CardType);
    v16 = v15;
    v18 = sub_10003E8EC(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 14);
    swift_bridgeObjectRelease(v16);
    sub_1000EB41C(v3, v4, v5);
    sub_1000EB41C(v3, v4, v5);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "%s loaded cardType: %s to userRemovedCardTypes.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
}

uint64_t sub_1000ED318(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  CHWorkoutDetailHeartRateTableViewCell *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  CHWorkoutDetailHeartRateTableViewCell *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  CHWorkoutDetailHeartRateTableViewCell **v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  CHWorkoutDetailHeartRateTableViewCell *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  unint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  Class isa;
  __CFString *v54;
  NSObject *log;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60[2];
  char v61;

  v4 = v3;
  ObjectType = swift_getObjectType(v4);
  v9 = static os_log_type_t.default.getter(ObjectType);
  v10 = (void *)HKLogActivity;
  v11 = v9;
  if (os_log_type_enabled(HKLogActivity, v9))
  {
    sub_1000EB3F4(a1, a2, a3);
    sub_1000EB3F4(a1, a2, a3);
    log = v10;
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v60[0] = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = _typeName(_:qualified:)(ObjectType, 0);
    v16 = (CHWorkoutDetailHeartRateTableViewCell *)v15;
    v57 = sub_10003E8EC(v14, v15, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 4);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    *(_WORD *)(v12 + 12) = 2080;
    v57 = a1;
    v58 = a2;
    v59 = a3;
    sub_1000EB3F4(a1, a2, a3);
    v24 = String.init<A>(describing:)(&v57, &type metadata for CardType);
    v26 = (CHWorkoutDetailHeartRateTableViewCell *)v25;
    v57 = sub_10003E8EC(v24, v25, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 14);
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
    sub_1000EB41C(a1, a2, a3);
    sub_1000EB41C(a1, a2, a3);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "%s Inserting cardType: %s to userRemovedCardTypes.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  v34 = (CHWorkoutDetailHeartRateTableViewCell **)(v4
                                                 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes);
  swift_beginAccess(v34, &v57, 33, 0);
  sub_1000EB3F4(a1, a2, a3);
  sub_100141CF4((uint64_t)v60, a1, a2, a3);
  v35 = v60[0];
  v36 = v60[1];
  v37 = v61;
  swift_endAccess(&v57);
  sub_1000EB41C(v35, v36, v37);
  v38 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v39 = JSONEncoder.init()();
  v40 = *v34;
  v57 = (uint64_t)v40;
  swift_bridgeObjectRetain(v40);
  v41 = sub_100047110(&qword_10081F3B8);
  v42 = sub_1000F0610(&qword_10081F3C0, &qword_10081F3B8, (void (*)(void))sub_1000EFB30, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v57, v41, v42);
  v45 = (unint64_t)v44;
  swift_bridgeObjectRelease(v40, v44, v46, v47, v48, v49, v50, v51);
  v52 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v54 = CFSTR("ActivityDashboardUserRemovedCardTypes");
  objc_msgSend(v52, "setObject:forKey:", isa, v54);

  swift_release(v39);
  return sub_10004D9E4(v43, v45);
}

uint64_t sub_1000ED6A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  Class isa;
  __CFString *v36;
  NSObject *log;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  char v42;

  v4 = v3;
  ObjectType = swift_getObjectType(v4);
  v9 = static os_log_type_t.default.getter(ObjectType);
  v10 = (void *)HKLogActivity;
  v11 = v9;
  if (os_log_type_enabled(HKLogActivity, v9))
  {
    sub_1000EB3F4(a1, a2, a3);
    sub_1000EB3F4(a1, a2, a3);
    log = v10;
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v39[0] = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = _typeName(_:qualified:)(ObjectType, 0);
    v16 = v15;
    v40 = sub_10003E8EC(v14, v15, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v12 + 4);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v12 + 12) = 2080;
    v40 = a1;
    v41 = a2;
    v42 = a3;
    sub_1000EB3F4(a1, a2, a3);
    v17 = String.init<A>(describing:)(&v40, &type metadata for CardType);
    v19 = v18;
    v40 = sub_10003E8EC(v17, v18, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v12 + 14);
    swift_bridgeObjectRelease(v19);
    sub_1000EB41C(a1, a2, a3);
    sub_1000EB41C(a1, a2, a3);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "%s Removing cardType: %s from userRemovedCardTypes.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_userRemovedCardTypes);
  swift_beginAccess(v20, &v40, 33, 0);
  v21 = sub_1000EDC00(a1, a2, a3);
  v23 = v22;
  v25 = v24;
  swift_endAccess(&v40);
  sub_1000EFBB8(v21, v23, v25);
  v26 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = JSONEncoder.init()();
  v28 = *v20;
  v40 = v28;
  swift_bridgeObjectRetain(v28);
  v29 = sub_100047110(&qword_10081F3B8);
  v30 = sub_1000F0610(&qword_10081F3C0, &qword_10081F3B8, (void (*)(void))sub_1000EFB30, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  v31 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v40, v29, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v28);
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v36 = CFSTR("ActivityDashboardUserRemovedCardTypes");
  objc_msgSend(v34, "setObject:forKey:", isa, v36);

  swift_release(v27);
  return sub_10004D9E4(v31, v33);
}

_QWORD *sub_1000EDA28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v4 = (_BYTE *)(v3 + 48);
  v5 = _swiftEmptyArrayStorage;
  do
  {
    if (!*v4)
    {
      v6 = *(v4 - 16);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_10013FA9C(0, v5[2] + 1, 1, v5);
      v8 = v5[2];
      v7 = v5[3];
      if (v8 >= v7 >> 1)
        v5 = sub_10013FA9C((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
      v5[2] = v8 + 1;
      *((_BYTE *)v5 + v8 + 32) = v6;
    }
    v4 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  return v5;
}

uint64_t sub_1000EDB10@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100623400);
  v5 = swift_getKeyPath(&unk_100623428);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000EDB8C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100623400);
  v5 = swift_getKeyPath(&unk_100623428);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000EDC00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[9];

  v7 = *v3;
  Hasher.init(_seed:)(v13, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  sub_10054FFE4(a1, a2, a3);
  v9 = v8;
  String.hash(into:)(v13, v10, v8);
  swift_bridgeObjectRelease(v9);
  if (!a3 || a3 == 2)
  {
    Hasher._combine(_:)(a1);
  }
  else if (a3 == 1)
  {
    String.hash(into:)(v13, a1, a2);
  }
  v11 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v7 + 32));
  if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v7);
  return 0;
}

uint64_t sub_1000EDF68(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v3 = *v1;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v1 + 40));
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 39;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(unsigned __int8 *)(v7 + v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 39;
    }
    while (*(unsigned __int8 *)(v7 + v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v14[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100145204();
    v10 = v14[0];
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v6);
  sub_1000EE4BC(v6);
  v12 = *v1;
  *v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_1000EE088(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v13[9];

  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(a1, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(_QWORD *)(v3 + 40);
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 24 * v6 + 16);
      Hasher.init(_seed:)(v13, v8);
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1000EE48CLL);
  }
  *(_QWORD *)(v3 + 16) = v12;
  ++*(_DWORD *)(v3 + 36);
}

unint64_t sub_1000EE4BC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v3 + 40));
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_BYTE *)(v12 + v2);
          v14 = (_BYTE *)(v12 + v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1000EE664(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1000EE698@<X0>(char a1@<W3>, char a2@<W8>)
{
  __int16 v2;
  __int16 v3;
  uint64_t result;

  result = 0;
  if (!(_BYTE)v2 && a1 == a2)
    return ((v3 & 0x100) == 0) ^ ((unsigned __int16)(v2 & 0x100) >> 8);
  return result;
}

_QWORD *sub_1000EE824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *i;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;

  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
    return _swiftEmptyArrayStorage;
  v20 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v9 = *(unsigned __int8 *)(v20 + v7);
    KeyPath = swift_getKeyPath(&unk_100623400);
    v11 = swift_getKeyPath(&unk_100623428);
    static Published.subscript.getter(&v24, a2, KeyPath, v11);
    swift_release(KeyPath);
    swift_release(v11);
    v12 = *(_QWORD *)(v24 + 16);
    if (v12)
    {
      v13 = v12 - 1;
      for (i = (unsigned __int8 *)(v24 + 49); ; i += 24)
      {
        if (v9 == *i)
          __asm { BR              X9 }
        if (!v13)
          break;
        --v13;
      }
    }
    swift_bridgeObjectRelease(v24);
    sub_1000EB3F4(a3, a4, a5);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10013FABC(0, v8[2] + 1, 1, v8);
    v16 = v8[2];
    v15 = v8[3];
    if (v16 >= v15 >> 1)
      v8 = sub_10013FABC((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
    v8[2] = v16 + 1;
    v17 = &v8[3 * v16];
    v17[4] = a3;
    v17[5] = a4;
    *((_BYTE *)v17 + 48) = a5;
    *((_BYTE *)v17 + 49) = v9;
    ++v7;
  }
  while (v7 != v21);
  swift_bridgeObjectRelease(a1);
  return v8;
}

_QWORD *sub_1000EEB80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  _QWORD v37[2];
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v43 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v8);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(a1 + 16);
  if (v42)
  {
    v37[0] = a1;
    v37[1] = v2;
    v41 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v40 = v11;
    v12 = swift_bridgeObjectRetain(a1);
    v13 = 0;
    v14 = _swiftEmptyArrayStorage;
    v38 = v10;
    v44 = v5;
    do
    {
      v39(v10, v41 + v40 * v13, v4, v12);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v16)(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      {
        a1 = v37[0];
        goto LABEL_25;
      }
      v45 = v14;
      v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      v18 = v7;
      v19 = UUID.uuidString.getter(v17);
      v21 = v20;
      KeyPath = swift_getKeyPath(&unk_100623400);
      v23 = swift_getKeyPath(&unk_100623428);
      static Published.subscript.getter(&v46, v43, KeyPath, v23);
      swift_release(KeyPath);
      swift_release(v23);
      v24 = v46;
      v25 = *(_QWORD *)(v46 + 16);
      if (v25)
      {
        v26 = (_BYTE *)(v46 + 49);
        while (1)
        {
          if ((*v26 & 1) == 0 && *(v26 - 1) == 1)
          {
            v27 = *(_QWORD *)(v26 - 17);
            v28 = *(_QWORD *)(v26 - 9);
            v29 = v27 == v19 && v28 == v21;
            if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v19, v21, 0) & 1) != 0)
              break;
          }
          v26 += 24;
          if (!--v25)
            goto LABEL_17;
        }
        swift_bridgeObjectRelease(v21);
        v15 = swift_bridgeObjectRelease(v24);
        v5 = v44;
        v7 = v18;
        (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v18, v4, v15);
        v14 = v45;
      }
      else
      {
LABEL_17:
        v30 = swift_bridgeObjectRelease(v24);
        v7 = v18;
        (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v18, v4, v30);
        v14 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
          v14 = sub_10013FABC(0, v14[2] + 1, 1, v14);
        v32 = v14[2];
        v31 = v14[3];
        if (v32 >= v31 >> 1)
          v14 = sub_10013FABC((_QWORD *)(v31 > 1), v32 + 1, 1, v14);
        v14[2] = v32 + 1;
        v33 = &v14[3 * v32];
        v33[4] = v19;
        v33[5] = v21;
        *((_WORD *)v33 + 24) = 1;
        v5 = v44;
      }
      ++v13;
      v10 = v38;
    }
    while (v13 != v42);
    a1 = v37[0];
    v16(v38, 1, 1, v4, v12);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
    v35 = swift_bridgeObjectRetain(a1);
    v14 = _swiftEmptyArrayStorage;
    v34(v10, 1, 1, v4, v35);
  }
LABEL_25:
  swift_bridgeObjectRelease(a1);
  return v14;
}

_QWORD *sub_1000EEED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (v3 == v2)
      {
        __break(1u);
        JUMPOUT(0x1000EF230);
      }
      v4 = v3 + 1;
      if (*(_QWORD *)(a2 + 16))
        __asm { BR              X8 }
      ++v3;
    }
    while (v4 != v2);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000EF260(uint64_t result, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v23[2];
  char v24;
  char v25;
  _QWORD *v26;

  v5 = result;
  v19 = *(_QWORD *)(result + 16);
  if (v19)
  {
    v6 = 0;
    v7 = (char *)(result + 49);
    v8 = _swiftEmptyArrayStorage;
    v18 = result;
    while (v6 < *(_QWORD *)(v5 + 16))
    {
      v9 = *(_QWORD *)(v7 - 17);
      v10 = *(_QWORD *)(v7 - 9);
      v11 = *(v7 - 1);
      v12 = *v7;
      v23[0] = v9;
      v23[1] = v10;
      v24 = v11;
      v25 = v12;
      sub_1000EB3F4(v9, v10, v11);
      v13 = sub_1000EC9D4((uint64_t)v23, a2, a3, a4);
      if (v4)
      {
        sub_1000EB41C(v9, v10, v11);
        swift_release(v8);
        goto LABEL_15;
      }
      if ((v13 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v8);
        v26 = v8;
        if ((result & 1) == 0)
        {
          result = sub_1001214FC(0, v8[2] + 1, 1);
          v8 = v26;
        }
        v15 = v8[2];
        v14 = v8[3];
        v16 = v15 + 1;
        if (v15 >= v14 >> 1)
        {
          result = sub_1001214FC(v14 > 1, v15 + 1, 1);
          v16 = v15 + 1;
          v8 = v26;
        }
        v8[2] = v16;
        v17 = &v8[3 * v15];
        v17[4] = v9;
        v17[5] = v10;
        *((_BYTE *)v17 + 48) = v11;
        *((_BYTE *)v17 + 49) = v12;
        v5 = v18;
      }
      else
      {
        result = sub_1000EB41C(v9, v10, v11);
      }
      ++v6;
      v7 += 24;
      if (v19 == v6)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease(v5);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1000EF408(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  BOOL v19;
  uint64_t v21;

  v2 = a1[1];
  if (v2 < 1)
    return 0;
  v4 = 0;
  v5 = *a1;
LABEL_5:
  v7 = *(unsigned __int8 *)(v5 + v4);
  KeyPath = swift_getKeyPath(&unk_100623400);
  v9 = swift_getKeyPath(&unk_100623428);
  static Published.subscript.getter(&v21, a2, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = v21;
  v11 = *(_QWORD *)(v21 + 16);
  if (!v11)
    goto LABEL_15;
  v12 = (_BYTE *)(v21 + 49);
  do
  {
    v13 = *v12 != 1 && *(v12 - 1) == 0;
    if (v13 && v7 == *(v12 - 17))
    {
      swift_bridgeObjectRelease(v21);
LABEL_4:
      if (++v4 >= v2)
        return v4;
      goto LABEL_5;
    }
    v12 += 24;
    --v11;
  }
  while (v11);
LABEL_15:
  while (1)
  {
    swift_bridgeObjectRelease(v10);
    if (v4 >= --v2)
      return v4;
    v14 = *(unsigned __int8 *)(v5 + v2);
    v15 = swift_getKeyPath(&unk_100623400);
    v16 = swift_getKeyPath(&unk_100623428);
    static Published.subscript.getter(&v21, a2, v15, v16);
    swift_release(v15);
    swift_release(v16);
    v10 = v21;
    v17 = *(_QWORD *)(v21 + 16);
    if (v17)
    {
      v18 = (_BYTE *)(v21 + 49);
      while (1)
      {
        v19 = *v18 != 1 && *(v18 - 1) == 0;
        if (v19 && v14 == *(v18 - 17))
          break;
        v18 += 24;
        if (!--v17)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease(v21);
      if (v5)
      {
        v6 = *(_BYTE *)(v5 + v4);
        *(_BYTE *)(v5 + v4) = *(_BYTE *)(v5 + v2);
        *(_BYTE *)(v5 + v2) = v6;
        goto LABEL_4;
      }
      __break(1u);
      return 0;
    }
  }
}

_QWORD *sub_1000EF5BC(char a1)
{
  void *v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17[2];

  v2 = sub_1005F14AC(a1);
  v3 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1004DEE30(v2);
  v4 = v2[2];
  v17[0] = (uint64_t)(v2 + 4);
  v17[1] = v4;
  v5 = v3;
  v6 = sub_1000EF408(v17, (uint64_t)v5);

  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v2[2] < v6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease(v2);
    v11 = sub_1002958F4((uint64_t)v2, (uint64_t)(v2 + 4), 0, (2 * v6) | 1);
    goto LABEL_10;
  }
  v5 = (id)type metadata accessor for __ContiguousArrayStorageBase(0);
  swift_bridgeObjectRetain(v2);
  v8 = swift_unknownObjectRetain_n(v7, 2);
  v9 = (_QWORD *)swift_dynamicCastClass(v8, v5);
  if (!v9)
  {
    swift_bridgeObjectRelease(v2);
    v9 = _swiftEmptyArrayStorage;
  }
  v10 = v9[2];
  swift_release(v9);
  if (v10 != v6)
    goto LABEL_19;
  v11 = (_QWORD *)swift_dynamicCastClass(v2, v5);
  if (!v11)
  {
    swift_bridgeObjectRelease(v2);
    v11 = _swiftEmptyArrayStorage;
  }
LABEL_10:
  swift_bridgeObjectRelease(v2);
  v12 = v2[2];
  if (v12 < v6)
  {
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease(v2);
    sub_1002958F4((uint64_t)v2, (uint64_t)(v2 + 4), v6, (2 * v12) | 1);
    goto LABEL_16;
  }
  v13 = swift_unknownObjectRetain_n(v2, 2);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v5);
  if (!v14)
  {
    swift_bridgeObjectRelease(v2);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  swift_release(v14);
  if (v15 != v12 - v6)
    goto LABEL_21;
  if (!swift_dynamicCastClass(v2, v5))
    swift_bridgeObjectRelease(v2);
LABEL_16:
  swift_bridgeObjectRelease(v2);
  return v11;
}

uint64_t sub_1000EF7B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000EF880(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v3 = sub_100047110(&qword_10081F380);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100016804(a1, v7);
  v9 = sub_1000EFA64();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CardTemplate.CodingKeys, &type metadata for CardTemplate.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v19 = 0;
    v10 = sub_1000EFAA8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for CardType, &v19, v3, &type metadata for CardType, v10);
    v7 = v16;
    v12 = v17;
    v13 = v18;
    v19 = 1;
    sub_1000EB3F4(v16, v17, v18);
    v14 = sub_1000EFAEC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for CardSize, &v19, v3, &type metadata for CardSize, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
    sub_1000EB41C(v7, v12, v13);
  }
  return v7;
}

unint64_t sub_1000EFA64()
{
  unint64_t result;

  result = qword_10081F388;
  if (!qword_10081F388)
  {
    result = swift_getWitnessTable(&unk_10062350C, &type metadata for CardTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10081F388);
  }
  return result;
}

unint64_t sub_1000EFAA8()
{
  unint64_t result;

  result = qword_10081F390;
  if (!qword_10081F390)
  {
    result = swift_getWitnessTable(&unk_1006451D8, &type metadata for CardType);
    atomic_store(result, (unint64_t *)&qword_10081F390);
  }
  return result;
}

unint64_t sub_1000EFAEC()
{
  unint64_t result;

  result = qword_10081F398;
  if (!qword_10081F398)
  {
    result = swift_getWitnessTable(&unk_100643458, &type metadata for CardSize);
    atomic_store(result, (unint64_t *)&qword_10081F398);
  }
  return result;
}

unint64_t sub_1000EFB30()
{
  unint64_t result;

  result = qword_10081F3A8;
  if (!qword_10081F3A8)
  {
    result = swift_getWitnessTable(&unk_1006451B0, &type metadata for CardType);
    atomic_store(result, (unint64_t *)&qword_10081F3A8);
  }
  return result;
}

unint64_t sub_1000EFB74()
{
  unint64_t result;

  result = qword_10081F3B0;
  if (!qword_10081F3B0)
  {
    result = swift_getWitnessTable(&unk_100643430, &type metadata for CardSize);
    atomic_store(result, (unint64_t *)&qword_10081F3B0);
  }
  return result;
}

uint64_t sub_1000EFBB8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_1000EB41C(a1, a2, a3);
  return a1;
}

uint64_t sub_1000EFBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  Class isa;
  __CFString *v14;
  uint64_t v16;

  v1 = v0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp28SummaryConfigurationProvider_didSetToDefaultConfiguration) = 0;
  v2 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = JSONEncoder.init()();
  KeyPath = swift_getKeyPath(&unk_100623400);
  v5 = swift_getKeyPath(&unk_100623428);
  static Published.subscript.getter(&v16, v1, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v16;
  v7 = sub_100047110(&qword_10081F368);
  v8 = sub_1000F0610(&qword_10081F3C8, &qword_10081F368, (void (*)(void))sub_1000EFD70, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v16, v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = CFSTR("ActivityDashboardCardConfigurationKey");
  objc_msgSend(v12, "setObject:forKey:", isa, v14);

  swift_release(v3);
  return sub_10004D9E4(v9, v11);
}

unint64_t sub_1000EFD70()
{
  unint64_t result;

  result = qword_10081F3D0;
  if (!qword_10081F3D0)
  {
    result = swift_getWitnessTable(&unk_1006233A0, &type metadata for CardTemplate);
    atomic_store(result, (unint64_t *)&qword_10081F3D0);
  }
  return result;
}

uint64_t sub_1000EFDB4(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    __asm { BR              X9 }
  return 0;
}

_QWORD *sub_1000F026C(char a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;

  v2 = sub_100047110(&qword_10081F3D8);
  v3 = (_QWORD *)swift_allocObject(v2, 56, 7);
  *((_OWORD *)v3 + 1) = xmmword_100622F90;
  v3[4] = 0;
  v3[5] = 0;
  *((_WORD *)v3 + 24) = 259;
  if ((a1 & 0x40) != 0)
  {
    v3 = sub_10013FABC((_QWORD *)1, 2, 1, v3);
    v3[2] = 2;
    *(_OWORD *)(v3 + 7) = xmmword_1006235A0;
    *((_WORD *)v3 + 36) = 0;
    v5 = v3[3];
    if (v5 <= 5)
    {
      v3 = sub_10013FABC((_QWORD *)(v5 > 1), 3, 1, v3);
      v5 = v3[3];
    }
    v4 = 3;
    v3[2] = 3;
    *((_OWORD *)v3 + 5) = xmmword_1006235B0;
    *((_WORD *)v3 + 48) = 0;
  }
  else
  {
    v4 = 1;
    v5 = 2;
  }
  v6 = v5 >> 1;
  v7 = v4 + 1;
  if (v5 >> 1 <= v4)
  {
    v3 = sub_10013FABC((_QWORD *)(v5 > 1), v4 + 1, 1, v3);
    v5 = v3[3];
    v6 = v5 >> 1;
  }
  v3[2] = v7;
  v8 = &v3[3 * v4];
  v9 = v4 + 2;
  v8[4] = 0;
  v8[5] = 0;
  *((_WORD *)v8 + 24) = 0;
  if (v6 <= v7)
    v3 = sub_10013FABC((_QWORD *)(v5 > 1), v4 + 2, 1, v3);
  v3[2] = v9;
  v10 = &v3[3 * v7];
  *((_OWORD *)v10 + 2) = xmmword_100623580;
  *((_WORD *)v10 + 24) = 0;
  v11 = a1 & 6;
  if (v11 == 6)
  {
    v12 = v3[3];
    v13 = v4 + 3;
    if (v9 >= v12 >> 1)
      v3 = sub_10013FABC((_QWORD *)(v12 > 1), v4 + 3, 1, v3);
    v3[2] = v13;
    v14 = &v3[3 * v9];
    *((_OWORD *)v14 + 2) = xmmword_100623560;
    *((_WORD *)v14 + 24) = 259;
  }
  else
  {
    v13 = v4 + 2;
  }
  v15 = v3[3];
  v16 = v13 + 1;
  if (v13 >= v15 >> 1)
    v3 = sub_10013FABC((_QWORD *)(v15 > 1), v13 + 1, 1, v3);
  v3[2] = v16;
  v17 = &v3[3 * v13];
  *((_OWORD *)v17 + 2) = xmmword_1006235A0;
  *((_WORD *)v17 + 24) = 3;
  v18 = v3[3];
  v19 = v18 >> 1;
  v20 = v13 + 2;
  if (v11 == 2)
  {
    if (v19 <= v16)
      v3 = sub_10013FABC((_QWORD *)(v18 > 1), v20, 1, v3);
    v3[2] = v20;
    v21 = &v3[3 * v16];
    *((_OWORD *)v21 + 2) = xmmword_100623570;
    *((_WORD *)v21 + 24) = 3;
    v16 = v3[2];
    v22 = v3[3];
    v20 = v16 + 1;
    v23 = 1;
    if (v16 >= v22 >> 1)
      v3 = sub_10013FABC((_QWORD *)(v22 > 1), v16 + 1, 1, v3);
  }
  else
  {
    if (v19 <= v16)
      v3 = sub_10013FABC((_QWORD *)(v18 > 1), v20, 1, v3);
    v23 = 0;
  }
  v3[2] = v20;
  v24 = &v3[3 * v16];
  *((_OWORD *)v24 + 2) = xmmword_1006235B0;
  *((_BYTE *)v24 + 48) = 3;
  *((_BYTE *)v24 + 49) = v23;
  if ((a1 & 0x81) == 0x80)
  {
    v26 = v3[2];
    v25 = v3[3];
    if (v26 >= v25 >> 1)
      v3 = sub_10013FABC((_QWORD *)(v25 > 1), v26 + 1, 1, v3);
    v3[2] = v26 + 1;
    v27 = &v3[3 * v26];
    *((_OWORD *)v27 + 2) = xmmword_100623590;
    *((_WORD *)v27 + 24) = 259;
  }
  if (v11 == 6)
  {
    v29 = v3[2];
    v28 = v3[3];
    if (v29 >= v28 >> 1)
      v3 = sub_10013FABC((_QWORD *)(v28 > 1), v29 + 1, 1, v3);
    v3[2] = v29 + 1;
    v30 = &v3[3 * v29];
    *((_OWORD *)v30 + 2) = xmmword_100623570;
    *((_WORD *)v30 + 24) = 3;
  }
  return v3;
}

uint64_t sub_1000F0610(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007050(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F0674()
{
  unint64_t result;

  result = qword_10081F400;
  if (!qword_10081F400)
  {
    result = swift_getWitnessTable(&unk_1006233C8, &type metadata for CardTemplate);
    atomic_store(result, (unint64_t *)&qword_10081F400);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CardTemplate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F0704 + 4 * byte_1006232BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F0738 + 4 * byte_1006232B8[v4]))();
}

uint64_t sub_1000F0738(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F0748);
  return result;
}

uint64_t sub_1000F0754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F075CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F0760(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0768(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CardTemplate.CodingKeys()
{
  return &type metadata for CardTemplate.CodingKeys;
}

unint64_t sub_1000F0788()
{
  unint64_t result;

  result = qword_10081F408;
  if (!qword_10081F408)
  {
    result = swift_getWitnessTable(&unk_1006234E4, &type metadata for CardTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10081F408);
  }
  return result;
}

unint64_t sub_1000F07D0()
{
  unint64_t result;

  result = qword_10081F410;
  if (!qword_10081F410)
  {
    result = swift_getWitnessTable(&unk_100623454, &type metadata for CardTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10081F410);
  }
  return result;
}

unint64_t sub_1000F0818()
{
  unint64_t result;

  result = qword_10081F418;
  if (!qword_10081F418)
  {
    result = swift_getWitnessTable(&unk_10062347C, &type metadata for CardTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10081F418);
  }
  return result;
}

void destroy for PaceTargetValue(uint64_t a1)
{

}

uint64_t initializeWithCopy for PaceTargetValue(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = v3;
  v7 = v5;
  return a1;
}

uint64_t assignWithCopy for PaceTargetValue(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PaceTargetValue(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaceTargetValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PaceTargetValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaceTargetValue()
{
  return &type metadata for PaceTargetValue;
}

uint64_t sub_1000F0A20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB104, 1);
}

void sub_1000F0A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v1 = type metadata accessor for LocalizationFeature(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(double *)v0;
  if ((sub_1000F0D04(v5, *(_BYTE *)(v0 + 32) & 1, *(double *)v0) & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationFeature.workout(_:), v1);
    static Localization.workoutUILocalizedString(_:feature:)(0xD00000000000001ALL, 0x8000000100688510, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v7 = *(void **)(v0 + 8);
    v8 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    v9 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v8, v6);

    v10 = FIUIDistanceTypeForActivityType(v5);
    v11 = FIUIPaceFormatForDistanceType(v10);
    v12 = objc_msgSend(v7, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v9, v11, FIUIDistanceTypeForActivityType(v5), 1.0);

    if (v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000F0BE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for MetricText(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F0A30();
  v8 = v7;
  v10 = v9;
  v11 = *(_QWORD *)(v1 + 16);
  v12 = FIUIDistanceTypeForActivityType(v11);
  v13 = 0;
  v14 = 0;
  if (FIUIPaceFormatForDistanceType(v12) == 4)
  {
    v15 = objc_msgSend(*(id *)(v1 + 8), "localizedSpeedUnitStringForActivityType:", v11);
    if (v15)
    {
      v16 = v15;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v14 = v17;

    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  MetricText.init(value:unit:description:stale:includesSlashes:)(v8, v10, v13, v14, 0, 0, 0, 0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v6, v3);
}

uint64_t sub_1000F0D04(uint64_t a1, char a2, double a3)
{
  uint64_t v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v6 = FIUIDistanceTypeForActivityType(a1);
  if (FIUIPaceFormatForDistanceType(v6) == 4
    && a3 >= 0.0
    && (sub_10001E724(0, (unint64_t *)&qword_10081E630, NSObject_ptr),
        sub_10001E724(0, (unint64_t *)&qword_10081F420, FIUIWorkoutActivityType_ptr),
        v7 = (void *)static FIUIWorkoutActivityType.indoorCycle.getter(),
        v8 = static NSObject.== infix(_:_:)(a1, v7),
        v7,
        (v8 & 1) != 0))
  {
    v9 = 0;
  }
  else
  {
    v10 = FIUIDistanceTypeForActivityType(a1);
    v11 = FIUIPaceFormatForDistanceType(v10);
    v9 = a2 | (a3 < 0.0);
    if (v11 != 4)
      v9 = 0;
  }
  return v9 & 1;
}

unint64_t sub_1000F0DE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F428;
  if (!qword_10081F428)
  {
    v1 = type metadata accessor for MetricText(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricText, v1);
    atomic_store(result, (unint64_t *)&qword_10081F428);
  }
  return result;
}

uint64_t destroy for AwardViewActionContext(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for AwardViewActionContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  __int128 v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = v4;
  v6 = (id)v5;
  swift_retain(v8);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for AwardViewActionContext(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = (void *)a2[4];
  v5 = (void *)a1[4];
  a1[4] = v4;
  v6 = v4;

  v7 = a2[6];
  v8 = a1[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_retain(v7);
  swift_release(v8);
  v10 = a2[7];
  v9 = a2[8];
  v11 = a1[8];
  a1[7] = v10;
  a1[8] = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for TrendsCardFactory(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AwardViewActionContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(*(_QWORD *)(a1 + 48));
  v5 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardViewActionContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardViewActionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardViewActionContext()
{
  return &type metadata for AwardViewActionContext;
}

_QWORD *sub_1000F1074(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for AwardsCard(0);
    v19 = v18[5];
    v20 = &v15[v19];
    v21 = &v16[v19];
    v22 = *(_QWORD *)v21;
    v23 = *((_QWORD *)v21 + 1);
    v24 = v21[16];
    sub_1000EB3F4(*(_QWORD *)v21, v23, v24);
    *(_QWORD *)v20 = v22;
    *((_QWORD *)v20 + 1) = v23;
    v20[16] = v24;
    v15[v18[6]] = v16[v18[6]];
    v15[v18[7]] = v16[v18[7]];
    v15[v18[8]] = v16[v18[8]];
    v25 = v18[9];
    v26 = *(_QWORD *)&v16[v25];
    *(_QWORD *)&v15[v25] = v26;
    v27 = v18[10];
    v28 = *(void **)&v16[v27];
    *(_QWORD *)&v15[v27] = v28;
    v29 = v18[11];
    v30 = *(void **)&v16[v29];
    *(_QWORD *)&v15[v29] = v30;
    v31 = v18[12];
    v32 = *(void **)&v16[v31];
    *(_QWORD *)&v15[v31] = v32;
    v33 = v18[13];
    v34 = *(void **)&v16[v33];
    *(_QWORD *)&v15[v33] = v34;
    v35 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = *(_QWORD *)((char *)a2 + v35 + 24);
    swift_bridgeObjectRetain(v26);
    v39 = v28;
    v40 = v30;
    v41 = v32;
    v42 = v34;
    if (v38)
    {
      v43 = *((_QWORD *)v37 + 4);
      *((_QWORD *)v36 + 3) = v38;
      *((_QWORD *)v36 + 4) = v43;
      (**(void (***)(char *, char *, uint64_t))(v38 - 8))(v36, v37, v38);
    }
    else
    {
      v44 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v44;
      *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
    }
    v45 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = type metadata accessor for GeometryProxy(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_100047110(&qword_10081F430);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v51 = *(int *)(sub_100047110(&qword_10081F438) + 28);
    v12 = *(_QWORD *)&v47[v51];
    *(_QWORD *)&v46[v51] = v12;
  }
  swift_retain(v12);
  return a1;
}

double sub_1000F1324(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (int *)type metadata accessor for AwardsCard(0);
  sub_1000EB41C(*(_QWORD *)&v6[v8[5]], *(_QWORD *)&v6[v8[5] + 8], v6[v8[5] + 16]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v8[9]]);

  v9 = (_QWORD *)((char *)a1 + a2[7]);
  if (v9[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
  v10 = (char *)a1 + a2[9];
  v11 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  v13 = *(_QWORD *)&v10[*(int *)(sub_100047110(&qword_10081F438) + 28)];
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

_QWORD *sub_1000F147C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AwardsCard(0);
  v17 = v16[5];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  v22 = v19[16];
  sub_1000EB3F4(*(_QWORD *)v19, v21, v22);
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  v18[16] = v22;
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v23 = v16[9];
  v24 = *(_QWORD *)&v14[v23];
  *(_QWORD *)&v13[v23] = v24;
  v25 = v16[10];
  v26 = *(void **)&v14[v25];
  *(_QWORD *)&v13[v25] = v26;
  v27 = v16[11];
  v28 = *(void **)&v14[v27];
  *(_QWORD *)&v13[v27] = v28;
  v29 = v16[12];
  v30 = *(void **)&v14[v29];
  *(_QWORD *)&v13[v29] = v30;
  v31 = v16[13];
  v32 = *(void **)&v14[v31];
  *(_QWORD *)&v13[v31] = v32;
  v33 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)((char *)a2 + v33 + 24);
  swift_bridgeObjectRetain(v24);
  v37 = v26;
  v38 = v28;
  v39 = v30;
  v40 = v32;
  if (v36)
  {
    v41 = *((_QWORD *)v35 + 4);
    *((_QWORD *)v34 + 3) = v36;
    *((_QWORD *)v34 + 4) = v41;
    (**(void (***)(char *, char *, uint64_t))(v36 - 8))(v34, v35, v36);
  }
  else
  {
    v42 = *((_OWORD *)v35 + 1);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *((_OWORD *)v34 + 1) = v42;
    *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
  }
  v43 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for GeometryProxy(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_100047110(&qword_10081F430);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v49 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v50 = *(_QWORD *)&v45[v49];
  *(_QWORD *)&v44[v49] = v50;
  swift_retain(v50);
  return a1;
}

_QWORD *sub_1000F1704(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AwardsCard(0);
  v17 = v16[5];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = *(_QWORD *)v19;
  v21 = *((_QWORD *)v19 + 1);
  v22 = v19[16];
  sub_1000EB3F4(*(_QWORD *)v19, v21, v22);
  v23 = *(_QWORD *)v18;
  v24 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v18 = v20;
  *((_QWORD *)v18 + 1) = v21;
  v25 = v18[16];
  v18[16] = v22;
  sub_1000EB41C(v23, v24, v25);
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v26 = v16[9];
  v27 = *(_QWORD *)&v13[v26];
  v28 = *(_QWORD *)&v14[v26];
  *(_QWORD *)&v13[v26] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v27);
  v29 = v16[10];
  v30 = *(void **)&v13[v29];
  v31 = *(void **)&v14[v29];
  *(_QWORD *)&v13[v29] = v31;
  v32 = v31;

  v33 = v16[11];
  v34 = *(void **)&v13[v33];
  v35 = *(void **)&v14[v33];
  *(_QWORD *)&v13[v33] = v35;
  v36 = v35;

  v37 = v16[12];
  v38 = *(void **)&v13[v37];
  v39 = *(void **)&v14[v37];
  *(_QWORD *)&v13[v37] = v39;
  v40 = v39;

  v41 = v16[13];
  v42 = *(void **)&v13[v41];
  v43 = *(void **)&v14[v41];
  *(_QWORD *)&v13[v41] = v43;
  v44 = v43;

  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v45 = a3[7];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *(_QWORD *)((char *)a2 + v45 + 24);
  if (*(_QWORD *)((char *)a1 + v45 + 24))
  {
    if (v48)
    {
      sub_1000F1A58(v46, v47);
      goto LABEL_13;
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v46);
  }
  else if (v48)
  {
    *((_QWORD *)v46 + 3) = v48;
    *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
    (**(void (***)(char *, char *))(v48 - 8))(v46, v47);
    goto LABEL_13;
  }
  v49 = *(_OWORD *)v47;
  v50 = *((_OWORD *)v47 + 1);
  *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
  *(_OWORD *)v46 = v49;
  *((_OWORD *)v46 + 1) = v50;
LABEL_13:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v51 = a3[9];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for GeometryProxy(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 24))(v52, v53, v54);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
    goto LABEL_18;
  }
  if (v58)
  {
LABEL_18:
    v59 = sub_100047110(&qword_10081F430);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_19:
  v60 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v61 = *(_QWORD *)&v52[v60];
  v62 = *(_QWORD *)&v53[v60];
  *(_QWORD *)&v52[v60] = v62;
  swift_retain(v62);
  swift_release(v61);
  return a1;
}

_QWORD *sub_1000F1A58(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

char *sub_1000F1BC0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for AwardsCard(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  *(_QWORD *)&v9[v12[9]] = *(_QWORD *)&v10[v12[9]];
  *(_QWORD *)&v9[v12[10]] = *(_QWORD *)&v10[v12[10]];
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v10[v12[11]];
  *(_QWORD *)&v9[v12[12]] = *(_QWORD *)&v10[v12[12]];
  *(_QWORD *)&v9[v12[13]] = *(_QWORD *)&v10[v12[13]];
  v16 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v20 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for GeometryProxy(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_100047110(&qword_10081F430);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = sub_100047110(&qword_10081F438);
  *(_QWORD *)&v21[*(int *)(v26 + 28)] = *(_QWORD *)&v22[*(int *)(v26 + 28)];
  return a1;
}

char *sub_1000F1DDC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for AwardsCard(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = v15[16];
  v17 = *(_QWORD *)v14;
  v18 = *((_QWORD *)v14 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v19 = v14[16];
  v14[16] = v16;
  sub_1000EB41C(v17, v18, v19);
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v20 = v12[9];
  v21 = *(_QWORD *)&v9[v20];
  *(_QWORD *)&v9[v20] = *(_QWORD *)&v10[v20];
  swift_bridgeObjectRelease(v21);
  v22 = v12[10];
  v23 = *(void **)&v9[v22];
  *(_QWORD *)&v9[v22] = *(_QWORD *)&v10[v22];

  v24 = v12[11];
  v25 = *(void **)&v9[v24];
  *(_QWORD *)&v9[v24] = *(_QWORD *)&v10[v24];

  v26 = v12[12];
  v27 = *(void **)&v9[v26];
  *(_QWORD *)&v9[v26] = *(_QWORD *)&v10[v26];

  v28 = v12[13];
  v29 = *(void **)&v9[v28];
  *(_QWORD *)&v9[v28] = *(_QWORD *)&v10[v28];

  v30 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v31 = &a1[v30];
  v32 = &a2[v30];
  if (*(_QWORD *)&a1[v30 + 24])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v30]);
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  v34 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for GeometryProxy(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    v42 = sub_100047110(&qword_10081F430);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
  v43 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v44 = *(_QWORD *)&v35[v43];
  *(_QWORD *)&v35[v43] = *(_QWORD *)&v36[v43];
  swift_release(v44);
  return a1;
}

uint64_t sub_1000F20AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F20B8);
}

uint64_t sub_1000F20B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for AwardsCard(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = sub_100047110(&qword_10081F438);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[7] + 24);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_1000F219C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F21A8);
}

uint64_t sub_1000F21A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for AwardsCard(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[7] + 24) = a2;
        return result;
      }
      v10 = sub_100047110(&qword_10081F438);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AwardsCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_10081F4A0;
  if (!qword_10081F4A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AwardsCardView);
  return result;
}

void sub_1000F22B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for AwardsCard(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[3] = "(";
      v8[4] = &unk_1006236A0;
      sub_1000F23CC(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

void sub_1000F2378(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081F4B0)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081F4B0);
  }
}

void sub_1000F23CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10081F4B8)
  {
    v2 = sub_100007050(&qword_10081F430);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10081F4B8);
  }
}

uint64_t sub_1000F2424(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB170, 1);
}

uint64_t sub_1000F2434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081F4F8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10081F500);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v9, v12, v13, v14, v15);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v16 = sub_100047110(&qword_10081F508);
  v17 = sub_1000F25EC(v0, (uint64_t)&v7[*(int *)(v16 + 44)]);
  v18 = static Alignment.center.getter(v17);
  sub_1003EADE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v18, v19);
  v20 = sub_10001BE90((uint64_t)v7, &qword_10081F4F8);
  static AccessibilityChildBehavior.combine.getter(v20);
  v21 = sub_1000F4494();
  View.accessibilityElement(children:)(v4, v8, v21);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10001BE90((uint64_t)v11, &qword_10081F500);
}

uint64_t sub_1000F25EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  unsigned int *v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v136 = a2;
  v3 = type metadata accessor for AwardsCardView(0);
  v120 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v121 = v4;
  v122 = (uint64_t)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for DynamicTypeSize(0);
  v115 = *(_QWORD *)(v112 - 8);
  v5 = __chkstk_darwin(v112);
  v117 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v116 = (uint64_t)&v109 - v7;
  v114 = type metadata accessor for AdaptiveStackType(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v118 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10081F520);
  v125 = *(_QWORD *)(v9 - 8);
  v126 = v9;
  __chkstk_darwin(v9);
  v123 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100047110(&qword_10081F528);
  __chkstk_darwin(v119);
  v127 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100047110(&qword_10081F530);
  v12 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v128 = (uint64_t)&v109 - v14;
  v131 = sub_100047110(&qword_10081F538);
  __chkstk_darwin(v131);
  v132 = (uint64_t *)((char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100047110(&qword_10081F540);
  v17 = __chkstk_darwin(v16);
  v135 = (uint64_t)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v133 = (char *)&v109 - v19;
  v20 = sub_100047110(&qword_10081F548);
  __chkstk_darwin(v20);
  v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100047110(&qword_10081F550);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100047110(&qword_10081F558);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v109 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v109 - v33;
  sub_100047110(&qword_10081F438);
  State.projectedValue.getter(v25);
  v35 = sub_100021CC0((uint64_t)v25, (uint64_t)v29, &qword_10081F550);
  *(_QWORD *)v22 = static HorizontalAlignment.center.getter(v35, v36, v37, v38, v39);
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 0;
  v40 = sub_100047110(&qword_10081F560);
  sub_1000F2F88(a1, &v22[*(int *)(v40 + 44)]);
  sub_10001BE90((uint64_t)v25, &qword_10081F550);
  sub_100045AD4((uint64_t)v22, (uint64_t)&v29[*(int *)(v26 + 36)], &qword_10081F548);
  v129 = v29;
  sub_100045AD4((uint64_t)v29, (uint64_t)v32, &qword_10081F558);
  v130 = v34;
  sub_100045AD4((uint64_t)v32, (uint64_t)v34, &qword_10081F558);
  v41 = a1;
  v42 = a1 + *(int *)(v3 + 20);
  v43 = (int *)type metadata accessor for AwardsCard(0);
  v44 = v43[6];
  if (*(_BYTE *)(v42 + v44) != 1)
  {
    v46 = *(void **)(v42 + v43[10]);
    if (v46)
    {
      v110 = v43[6];
      v111 = v42;
      v47 = sub_100047110((uint64_t *)&unk_100828340);
      v48 = swift_allocObject(v47, 40, 7);
      *(_OWORD *)(v48 + 16) = xmmword_100623630;
      *(_QWORD *)(v48 + 32) = v46;
      v137 = v48;
      specialized Array._endMutation()(v48);
      v109 = v137;
      v49 = v46;
      goto LABEL_6;
    }
LABEL_14:
    v100 = v131;
    v101 = v132;
    *v132 = 0;
    *((_BYTE *)v101 + 8) = 1;
    swift_storeEnumTagMultiPayload(v101, v100, 1);
    v102 = sub_1000F4518(&qword_10081F568, &qword_10081F530, (void (*)(void))sub_1000F4584);
    v99 = (uint64_t)v133;
    _ConditionalContent<>.init(storage:)(v101, v134, &type metadata for Spacer, v102, &protocol witness table for Spacer);
    goto LABEL_15;
  }
  v45 = *(_QWORD *)(v42 + v43[9]);
  if (!v45)
    goto LABEL_14;
  v110 = v44;
  v111 = v42;
  v109 = v45;
  swift_bridgeObjectRetain(v45);
LABEL_6:
  v50 = v116;
  sub_1003F6E18(v116);
  v51 = enum case for DynamicTypeSize.xxLarge(_:);
  v52 = v115;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 104);
  v54 = v117;
  v55 = v112;
  v53(v117, enum case for DynamicTypeSize.xxLarge(_:), v112);
  sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v56 = dispatch thunk of static Comparable.< infix(_:_:)(v54, v50, v55);
  v57 = *(void (**)(char *, uint64_t))(v52 + 8);
  v57(v54, v55);
  v57((char *)v50, v55);
  v58 = (unsigned int *)&enum case for AdaptiveStackType.vertical(_:);
  if ((v56 & 1) == 0)
    v58 = (unsigned int *)&enum case for AdaptiveStackType.horizontal(_:);
  v59 = v118;
  v60 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v113 + 104))(v118, *v58, v114);
  v115 = static VerticalAlignment.top.getter(v60);
  v114 = static HorizontalAlignment.leading.getter();
  sub_1003F6E18(v50);
  v53(v54, v51, v55);
  v61 = dispatch thunk of static Comparable.< infix(_:_:)(v54, v50, v55);
  v57(v54, v55);
  v57((char *)v50, v55);
  if ((v61 & 1) != 0)
    v62 = 0;
  else
    v62 = 0x402E000000000000;
  v63 = v122;
  sub_10004F8C8(v41, v122, type metadata accessor for AwardsCardView);
  v64 = *(unsigned __int8 *)(v120 + 80);
  v65 = (v64 + 24) & ~v64;
  v66 = swift_allocObject(&unk_1007852F8, v65 + v121, v64 | 7);
  *(_QWORD *)(v66 + 16) = v109;
  sub_1000F47AC(v63, v66 + v65);
  v67 = sub_100047110(&qword_10081F590);
  v68 = sub_1000F4830();
  v69 = v123;
  v70 = AdaptiveStack.init(type:verticalAlignment:horizontalAlignment:spacing:content:)(v59, v115, v114, v62, 0, sub_1000F47F0, v66, v67, v68);
  v71 = static Edge.Set.bottom.getter(v70);
  v72 = 0.0;
  if (*(_BYTE *)(v111 + v110))
    v72 = 12.0;
  v73 = EdgeInsets.init(_all:)(v72);
  v75 = v74;
  v77 = v76;
  v79 = v78;
  v81 = v125;
  v80 = v126;
  v82 = (uint64_t)v127;
  (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v127, v69, v126);
  v83 = v82 + *(int *)(v119 + 36);
  *(_BYTE *)v83 = v71;
  *(double *)(v83 + 8) = v73;
  *(_QWORD *)(v83 + 16) = v75;
  *(_QWORD *)(v83 + 24) = v77;
  *(_QWORD *)(v83 + 32) = v79;
  *(_BYTE *)(v83 + 40) = 0;
  v84 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v69, v80);
  v85 = static Edge.Set.horizontal.getter(v84);
  v86 = EdgeInsets.init(_all:)(15.0);
  v88 = v87;
  v90 = v89;
  v92 = v91;
  v93 = v124;
  sub_100021CC0(v82, v124, &qword_10081F528);
  v94 = v134;
  v95 = v93 + *(int *)(v134 + 36);
  *(_BYTE *)v95 = v85;
  *(double *)(v95 + 8) = v86;
  *(_QWORD *)(v95 + 16) = v88;
  *(_QWORD *)(v95 + 24) = v90;
  *(_QWORD *)(v95 + 32) = v92;
  *(_BYTE *)(v95 + 40) = 0;
  sub_10001BE90(v82, &qword_10081F528);
  v96 = v128;
  sub_100045AD4(v93, v128, &qword_10081F530);
  v97 = v132;
  sub_100021CC0(v96, (uint64_t)v132, &qword_10081F530);
  swift_storeEnumTagMultiPayload(v97, v131, 0);
  v98 = sub_1000F4518(&qword_10081F568, &qword_10081F530, (void (*)(void))sub_1000F4584);
  v99 = (uint64_t)v133;
  _ConditionalContent<>.init(storage:)(v97, v94, &type metadata for Spacer, v98, &protocol witness table for Spacer);
  sub_10001BE90(v96, &qword_10081F530);
LABEL_15:
  v104 = (uint64_t)v129;
  v103 = (uint64_t)v130;
  sub_100021CC0((uint64_t)v130, (uint64_t)v129, &qword_10081F558);
  v105 = v135;
  sub_100021CC0(v99, v135, &qword_10081F540);
  v106 = v136;
  sub_100021CC0(v104, v136, &qword_10081F558);
  v107 = sub_100047110(&qword_10081F580);
  sub_100021CC0(v105, v106 + *(int *)(v107 + 48), &qword_10081F540);
  sub_10001BE90(v99, &qword_10081F540);
  sub_10001BE90(v103, &qword_10081F558);
  sub_10001BE90(v105, &qword_10081F540);
  return sub_10001BE90(v104, &qword_10081F558);
}

uint64_t sub_1000F2F88@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE v52[96];
  __int128 v53;
  __int128 v54;
  char v55;
  _QWORD v56[5];
  _BYTE v57[104];

  v50 = a2;
  v3 = type metadata accessor for Divider(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100047110(&qword_10081F618);
  v5 = __chkstk_darwin(v47);
  v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v46 = (uint64_t)&v41 - v7;
  v8 = (int *)type metadata accessor for AwardsCardView(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v51 = sub_100047110(&qword_10081F620);
  v44 = *(_QWORD *)(v51 - 8);
  v11 = __chkstk_darwin(v51);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v43 = (char *)&v41 - v14;
  v15 = a1 + v8[5];
  v56[3] = type metadata accessor for AwardsCard(0);
  v56[4] = &off_100793248;
  v16 = sub_10004C480(v56);
  sub_10004F8C8(v15, (uint64_t)v16, type metadata accessor for AwardsCard);
  v17 = sub_100021CC0(a1 + v8[7], (uint64_t)v57, &qword_10081F600);
  v57[40] = *(_BYTE *)(a1 + v8[8]);
  v18 = static Edge.Set.all.getter(v17);
  sub_1000F4B28((uint64_t)v56, (uint64_t)v52);
  v52[88] = v18;
  v53 = xmmword_100623640;
  v54 = xmmword_100623640;
  v55 = 0;
  sub_1000F4B64(v56);
  sub_100021CC0((uint64_t)v52, (uint64_t)v56, &qword_10081F628);
  v57[89] = 0;
  sub_10001BE90((uint64_t)v52, &qword_10081F628);
  sub_10004F8C8(a1, (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AwardsCardView);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_100785370, v20 + v10, v19 | 7);
  sub_1000F47AC((uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20);
  v22 = sub_100047110(&qword_10081F630);
  v23 = sub_1000F4D64();
  View.onTapGesture(count:perform:)(1, sub_1000F4D38, v21, v22, v23);
  swift_release(v21);
  sub_10001BE90((uint64_t)v56, &qword_10081F630);
  v25 = v43;
  v24 = v44;
  v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 32))(v43, v13, v51);
  v27 = v45;
  Divider.init()(v26);
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "quaternarySystemFillColor");
  v29 = Color.init(_:)(v28);
  LOBYTE(v21) = static Edge.Set.all.getter(v29);
  v31 = v48;
  v30 = v49;
  v32 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v27, v49);
  v33 = v32 + *(int *)(v47 + 36);
  *(_QWORD *)v33 = v29;
  *(_BYTE *)(v33 + 8) = v21;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v30);
  v34 = v46;
  sub_100045AD4(v32, v46, &qword_10081F618);
  v35 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v36 = v51;
  v35(v13, v25, v51);
  sub_100021CC0(v34, v32, &qword_10081F618);
  v37 = v50;
  v35(v50, v13, v36);
  v38 = sub_100047110((uint64_t *)&unk_10081F660);
  sub_100021CC0(v32, (uint64_t)&v37[*(int *)(v38 + 48)], &qword_10081F618);
  sub_10001BE90(v34, &qword_10081F618);
  v39 = *(void (**)(char *, uint64_t))(v24 + 8);
  v39(v25, v36);
  sub_10001BE90(v32, &qword_10081F618);
  return ((uint64_t (*)(char *, uint64_t))v39)(v13, v36);
}

uint64_t sub_1000F33A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _OWORD v6[2];
  _QWORD v7[3];
  uint64_t v8;

  v2 = type metadata accessor for AwardsCardView(0);
  sub_100021CC0(a1 + *(int *)(v2 + 28), (uint64_t)v7, &qword_10081F600);
  if (!v8)
    return sub_10001BE90((uint64_t)v7, &qword_10081F600);
  v3 = sub_100016804(v7, v8);
  v4 = a1 + *(int *)(v2 + 20);
  memset(v6, 0, sizeof(v6));
  sub_1004147F4(v4, (uint64_t)v6, *v3);
  sub_10001BE90((uint64_t)v6, (uint64_t *)&unk_100828420);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v7);
}

uint64_t sub_1000F3444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for AwardsCardView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  swift_bridgeObjectRetain(a1);
  sub_100363444(v7);
  v9 = v8;
  swift_bridgeObjectRelease(a1);
  v22 = v9;
  KeyPath = swift_getKeyPath(&unk_100623708);
  sub_10004F8C8(a2, (uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AwardsCardView);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_100785320, v12 + v6, v11 | 7);
  sub_1000F47AC((uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  v14 = swift_allocObject(&unk_100785348, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000F4A54;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = sub_100047110(&qword_10081F5D0);
  v16 = sub_100047110(&qword_10081F5A8);
  v17 = sub_100028384(&qword_10081F5D8, &qword_10081F5D0, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = sub_1000F4ACC();
  v19 = sub_1000F4894();
  return ForEach<>.init(_:id:content:)(&v22, KeyPath, sub_1000E25AC, v14, v15, v16, v17, v18, v19);
}

void sub_1000F35D4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "uniqueName");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1000F3638(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setUniqueName:");

}

uint64_t sub_1000F3694@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  double v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t OpaqueTypeConformance2;
  uint64_t v85;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  id v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  _QWORD v146[5];
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  _UNKNOWN **v150;

  v145 = a2;
  v125 = a1;
  v6 = type metadata accessor for LargeAwardsCardView(0);
  __chkstk_darwin(v6);
  v128 = (uint64_t *)((char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = sub_100047110(&qword_10081F5C0);
  __chkstk_darwin(v135);
  v131 = (uint64_t)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10081F5E8);
  v133 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v132 = (uint64_t)&v123 - v13;
  v141 = sub_100047110(&qword_10081F5F0);
  __chkstk_darwin(v141);
  v142 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for AppEntityVisualState(0);
  v137 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v136 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v16);
  v134 = (char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100047110(&qword_10081F430);
  __chkstk_darwin(v18);
  v20 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100047110(&qword_10081F550);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for SmallAwardsCardView(0);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = sub_100047110(&qword_10081F5B0);
  __chkstk_darwin(v138);
  v127 = (uint64_t)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100047110(&qword_10081F5F8);
  v130 = *(_QWORD *)(v140 - 8);
  v28 = __chkstk_darwin(v140);
  v126 = (char *)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v129 = (char *)&v123 - v30;
  v31 = (int *)type metadata accessor for AwardsCardView(0);
  v32 = a3 + v31[5];
  v33 = type metadata accessor for AwardsCard(0);
  v34 = v33;
  v35 = *(_BYTE *)(v32 + *(int *)(v33 + 24));
  v143 = v9;
  v144 = a4;
  if ((v35 & 1) != 0)
  {
    v149 = v33;
    v150 = &off_100793248;
    v36 = sub_10004C480(&v147);
    sub_10004F8C8(v32, (uint64_t)v36, type metadata accessor for AwardsCard);
    v37 = *(void **)(v32 + *(int *)(v34 + 48));
    v124 = v12;
    if (v37)
    {
      v38 = v37;
      v39 = objc_msgSend(v38, "titleForAchievement:", v145);
      if (v39)
      {
        v40 = v39;
        v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

LABEL_10:
        v50 = v145;
        v51 = sub_1000F431C(v145);
        v53 = v52;
        v54 = *(void **)(v32 + *(int *)(v34 + 44));
        sub_100021CC0(a3 + v31[7], (uint64_t)v146, &qword_10081F600);
        v55 = v54;
        sub_100047110(&qword_10081F438);
        State.projectedValue.getter(v23);
        v56 = type metadata accessor for GeometryProxy(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v20, 1, 1, v56);
        v57 = v50;
        v122 = (uint64_t)v20;
        v58 = v128;
        sub_100257AFC(&v147, (uint64_t)v50, v125, v130, v42, v51, v53, (uint64_t)v54, v128, (uint64_t)v146, (uint64_t)v23, 0, 0, 1u, 0, 1u, v122);
        v59 = objc_msgSend(v57, "template");
        v60 = objc_msgSend(v59, "uniqueName");

        if (v60)
        {
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          v63 = v62;

        }
        else
        {
          v61 = 0;
          v63 = 0;
        }
        v64 = v135;
        v65 = v134;
        v66 = v131;
        sub_10004F8C8((uint64_t)v58, v131, type metadata accessor for LargeAwardsCardView);
        v67 = (uint64_t *)(v66 + *(int *)(v64 + 52));
        *v67 = v61;
        v67[1] = v63;
        sub_100011F54((uint64_t)v58, type metadata accessor for LargeAwardsCardView);
        sub_100047110((uint64_t *)&unk_10083D730);
        v68 = v57;
        LocalizedStringResource.init(stringLiteral:)(0x64656E726145, 0xE600000000000000);
        v69 = EntityProperty<>.init(title:)(v65);
        v70 = v68;
        swift_retain(v69);
        LOBYTE(v147) = objc_msgSend(v70, "unearned") ^ 1;
        EntityProperty.wrappedValue.setter(&v147);

        swift_release(v69);
        *(_QWORD *)&v147 = v69;
        *((_QWORD *)&v147 + 1) = v70;
        v146[0] = _swiftEmptyArrayStorage;
        v71 = sub_1000083D8((unint64_t *)&qword_10081F608, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
        v72 = sub_100047110((uint64_t *)&unk_10083D740);
        v73 = sub_100028384((unint64_t *)&qword_10081F610, (uint64_t *)&unk_10083D740, (uint64_t)&protocol conformance descriptor for [A]);
        v74 = v136;
        v75 = v139;
        dispatch thunk of SetAlgebra.init<A>(_:)(v146, v72, v73, v139, v71);
        v76 = sub_100028384(&qword_10081F5C8, &qword_10081F5C0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
        v77 = sub_1000F49B4();
        v78 = v124;
        View.appEntity<A>(_:state:)(&v147, v74, v64, &type metadata for AwardEntity, v76, v77);
        (*(void (**)(char *, uint64_t))(v137 + 8))(v74, v75);
        swift_release(v147);

        sub_10001BE90(v66, &qword_10081F5C0);
        v79 = v133;
        v80 = v132;
        v81 = v143;
        (*(void (**)(uint64_t, char *, uint64_t))(v133 + 32))(v132, v78, v143);
        v82 = v142;
        (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v142, v80, v81);
        swift_storeEnumTagMultiPayload(v82, v141, 1);
        v83 = sub_100028384(&qword_10081F5B8, &qword_10081F5B0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
        *(_QWORD *)&v147 = v138;
        *((_QWORD *)&v147 + 1) = &type metadata for AwardEntity;
        v148 = v83;
        v149 = v77;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
        *(_QWORD *)&v147 = v64;
        *((_QWORD *)&v147 + 1) = &type metadata for AwardEntity;
        v148 = v76;
        v149 = v77;
        v85 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
        _ConditionalContent<>.init(storage:)(v82, v140, v81, OpaqueTypeConformance2, v85);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v80, v81);
      }

    }
    v130 = 0;
    v42 = 0xE000000000000000;
    goto LABEL_10;
  }
  v149 = v33;
  v150 = &off_100793248;
  v43 = sub_10004C480(&v147);
  sub_10004F8C8(v32, (uint64_t)v43, type metadata accessor for AwardsCard);
  v44 = *(double *)(a3 + v31[6]);
  v45 = *(void **)(v32 + *(int *)(v34 + 48));
  if (!v45)
    goto LABEL_15;
  v46 = v45;
  v47 = objc_msgSend(v46, "titleForAchievement:", v145);
  if (!v47)
  {

LABEL_15:
    v133 = 0;
    v132 = 0xE000000000000000;
    goto LABEL_16;
  }
  v48 = v47;
  v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v132 = v49;

LABEL_16:
  v87 = v145;
  v88 = sub_1000F431C(v145);
  v90 = v89;
  v91 = *(void **)(v32 + *(int *)(v34 + 44));
  sub_100021CC0(a3 + v31[7], (uint64_t)v146, &qword_10081F600);
  v92 = v91;
  sub_100047110(&qword_10081F438);
  State.projectedValue.getter(v23);
  v93 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v20, 1, 1, v93);
  v94 = v87;
  sub_10016B17C(&v147, (uint64_t)v87, v133, v132, v88, v90, (uint64_t)v91, (uint64_t)v146, v26, v44, (uint64_t)v23, (uint64_t)v20, 0, 0, 1u, 0, 1u);
  v95 = objc_msgSend(v94, "template");
  v96 = objc_msgSend(v95, "uniqueName");

  if (v96)
  {
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v99 = v98;

  }
  else
  {
    v97 = 0;
    v99 = 0;
  }
  v100 = v134;
  v101 = v127;
  sub_10004F8C8((uint64_t)v26, v127, type metadata accessor for SmallAwardsCardView);
  v102 = v138;
  v103 = (uint64_t *)(v101 + *(int *)(v138 + 52));
  *v103 = v97;
  v103[1] = v99;
  sub_100011F54((uint64_t)v26, type metadata accessor for SmallAwardsCardView);
  sub_100047110((uint64_t *)&unk_10083D730);
  v104 = v94;
  LocalizedStringResource.init(stringLiteral:)(0x64656E726145, 0xE600000000000000);
  v105 = EntityProperty<>.init(title:)(v100);
  v106 = v104;
  swift_retain(v105);
  LOBYTE(v147) = objc_msgSend(v106, "unearned") ^ 1;
  EntityProperty.wrappedValue.setter(&v147);

  swift_release(v105);
  *(_QWORD *)&v147 = v105;
  *((_QWORD *)&v147 + 1) = v106;
  v146[0] = _swiftEmptyArrayStorage;
  v107 = sub_1000083D8((unint64_t *)&qword_10081F608, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v108 = sub_100047110((uint64_t *)&unk_10083D740);
  v109 = sub_100028384((unint64_t *)&qword_10081F610, (uint64_t *)&unk_10083D740, (uint64_t)&protocol conformance descriptor for [A]);
  v110 = v136;
  v111 = v139;
  dispatch thunk of SetAlgebra.init<A>(_:)(v146, v108, v109, v139, v107);
  v112 = sub_100028384(&qword_10081F5B8, &qword_10081F5B0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v113 = sub_1000F49B4();
  v114 = v126;
  View.appEntity<A>(_:state:)(&v147, v110, v102, &type metadata for AwardEntity, v112, v113);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v110, v111);
  swift_release(v147);

  sub_10001BE90(v101, &qword_10081F5B0);
  v115 = v130;
  v116 = v129;
  v117 = v140;
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v129, v114, v140);
  v118 = v142;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v142, v116, v117);
  swift_storeEnumTagMultiPayload(v118, v141, 0);
  *(_QWORD *)&v147 = v102;
  *((_QWORD *)&v147 + 1) = &type metadata for AwardEntity;
  v148 = v112;
  v149 = v113;
  v119 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
  v120 = sub_100028384(&qword_10081F5C8, &qword_10081F5C0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  *(_QWORD *)&v147 = v135;
  *((_QWORD *)&v147 + 1) = &type metadata for AwardEntity;
  v148 = v120;
  v149 = v113;
  v121 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
  _ConditionalContent<>.init(storage:)(v118, v117, v143, v119, v121);
  return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v116, v117);
}

uint64_t sub_1000F431C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = v1 + *(int *)(type metadata accessor for AwardsCardView(0) + 20);
  v4 = *(void **)(v3 + *(int *)(type metadata accessor for AwardsCard(0) + 48));
  if (v4)
  {
    v5 = v4;
    if (objc_msgSend(a1, "unearned"))
      v6 = objc_msgSend(v5, "unachievedShortDescriptionForAchievement:", a1);
    else
      v6 = objc_msgSend(v5, "achievedShortDescriptionForAchievement:", a1);
    v8 = v6;
    v9 = v8;
    if (!v8)
      goto LABEL_15;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    if (v7 != 0xD000000000000028 || (v12 = 0x8000000100688530, v11 != 0x8000000100688530))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v11, 0xD000000000000028, 0x8000000100688530, 0) & 1) == 0)
      {
        if (v7 == 0xD000000000000026)
        {
          v12 = 0x8000000100688560;
          if (v11 == 0x8000000100688560)
            goto LABEL_14;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v11, 0xD000000000000026, 0x8000000100688560, 0) & 1) == 0)
        {
LABEL_16:

          return v7;
        }
      }
      v12 = v11;
    }
LABEL_14:
    swift_bridgeObjectRelease(v12);
LABEL_15:
    v7 = 0;
    goto LABEL_16;
  }
  return 0;
}

unint64_t sub_1000F4494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F510;
  if (!qword_10081F510)
  {
    v1 = sub_100007050(&qword_10081F500);
    sub_100028384(&qword_10081F518, &qword_10081F4F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F510);
  }
  return result;
}

uint64_t sub_1000F4518(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007050(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F4584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F570;
  if (!qword_10081F570)
  {
    v1 = sub_100007050(&qword_10081F528);
    sub_100028384(&qword_10081F578, &qword_10081F520, (uint64_t)&protocol conformance descriptor for AdaptiveStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F570);
  }
  return result;
}

uint64_t sub_1000F4608()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for AwardsCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)v6 + v1[5];
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (int *)type metadata accessor for AwardsCard(0);
  sub_1000EB41C(*(_QWORD *)&v9[v11[5]], *(_QWORD *)&v9[v11[5] + 8], v9[v11[5] + 16]);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v11[9]]);

  v12 = (_QWORD *)((char *)v6 + v1[7]);
  if (v12[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v12);
  v13 = (char *)v6 + v1[9];
  v14 = type metadata accessor for GeometryProxy(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v16 = sub_100047110(&qword_10081F438);
  swift_release(*(_QWORD *)&v13[*(int *)(v16 + 28)]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000F47AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardsCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F47F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardsCardView(0) - 8) + 80);
  return sub_1000F3444(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

unint64_t sub_1000F4830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F598;
  if (!qword_10081F598)
  {
    v1 = sub_100007050(&qword_10081F590);
    sub_1000F4894();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F598);
  }
  return result;
}

unint64_t sub_1000F4894()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  unint64_t v10;

  result = qword_10081F5A0;
  if (!qword_10081F5A0)
  {
    v1 = sub_100007050(&qword_10081F5A8);
    v2 = sub_100007050(&qword_10081F5B0);
    v3 = sub_100028384(&qword_10081F5B8, &qword_10081F5B0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v4 = sub_1000F49B4();
    v7 = v2;
    v8 = &type metadata for AwardEntity;
    v9 = v3;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
    v5 = sub_100007050(&qword_10081F5C0);
    v6 = sub_100028384(&qword_10081F5C8, &qword_10081F5C0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    v7 = v5;
    v8 = &type metadata for AwardEntity;
    v9 = v6;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.appEntity<A>(_:state:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F5A0);
  }
  return result;
}

unint64_t sub_1000F49B4()
{
  unint64_t result;

  result = qword_10083D750;
  if (!qword_10083D750)
  {
    result = swift_getWitnessTable(&unk_10064404C, &type metadata for AwardEntity);
    atomic_store(result, (unint64_t *)&qword_10083D750);
  }
  return result;
}

const char *sub_1000F49F8()
{
  return "template";
}

id sub_1000F4A04@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "template");
  *a2 = result;
  return result;
}

const char *sub_1000F4A3C()
{
  return "uniqueName";
}

uint64_t sub_1000F4A54@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardsCardView(0) - 8) + 80);
  return sub_1000F3694(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

uint64_t sub_1000F4AA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000F4ACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F5E0;
  if (!qword_10081F5E0)
  {
    v1 = sub_100007050(&qword_10082B520);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081F5E0);
  }
  return result;
}

uint64_t sub_1000F4B28(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CardHeaderView(a2, a1);
  return a2;
}

_QWORD *sub_1000F4B64(_QWORD *a1)
{
  destroy for CardHeaderView(a1);
  return a1;
}

uint64_t sub_1000F4B9C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for AwardsCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)v6 + v1[5];
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (int *)type metadata accessor for AwardsCard(0);
  sub_1000EB41C(*(_QWORD *)&v9[v11[5]], *(_QWORD *)&v9[v11[5] + 8], v9[v11[5] + 16]);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[v11[9]]);

  v12 = (_QWORD *)((char *)v6 + v1[7]);
  if (v12[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v12);
  v13 = (char *)v6 + v1[9];
  v14 = type metadata accessor for GeometryProxy(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v16 = sub_100047110(&qword_10081F438);
  swift_release(*(_QWORD *)&v13[*(int *)(v16 + 28)]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000F4D38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardsCardView(0) - 8) + 80);
  return sub_1000F33A0(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1000F4D64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F638;
  if (!qword_10081F638)
  {
    v1 = sub_100007050(&qword_10081F630);
    sub_1000F4518(&qword_10081F640, &qword_10081F628, (void (*)(void))sub_1000F4E00);
    sub_100028384(&qword_10081F650, &qword_10081F658, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F638);
  }
  return result;
}

unint64_t sub_1000F4E00()
{
  unint64_t result;

  result = qword_10081F648;
  if (!qword_10081F648)
  {
    result = swift_getWitnessTable(&unk_10063AE3C, &type metadata for CardHeaderView);
    atomic_store(result, (unint64_t *)&qword_10081F648);
  }
  return result;
}

uint64_t sub_1000F4E44()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_10081F500);
  v1[1] = sub_1000F4494();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

id sub_1000F4E90(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  void *v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  objc_super v22;

  *(_QWORD *)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_observers] = _swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController__delegate], 0);
  *(_QWORD *)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_presentationContext] = a1;
  v3 = sub_10001E724(0, (unint64_t *)&qword_10081F6D8, off_1007765E0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "bundleForClass:", ObjCClassFromMetadata);
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, 0, v8);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v5, "bundleForClass:", ObjCClassFromMetadata, swift_bridgeObjectRelease(v11).n128_f64[0]);
  v14 = String._bridgeToObjectiveC()();
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, v15);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v22.receiver = v1;
  v22.super_class = (Class)type metadata accessor for ActivitySetupThreeRingsOnboardingViewController();
  v20 = objc_msgSendSuper2(&v22, "initWithTitle:detailText:icon:contentLayout:", v12, v19, 0, 3);

  return v20;
}

void sub_1000F5128()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  void *v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void (*v24)(_BYTE *, _QWORD);
  id v25;
  id v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  id v34;
  _BYTE v35[32];
  objc_super v36;

  v1 = v0;
  v2 = sub_100047110(&qword_10081F6D0);
  v3 = __chkstk_darwin(v2);
  v5 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v35[-v6];
  v8 = (objc_class *)type metadata accessor for ActivitySetupThreeRingsOnboardingViewController();
  v36.receiver = v0;
  v36.super_class = v8;
  objc_msgSendSuper2(&v36, "viewDidLoad");
  v9 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v9, "addTarget:action:forControlEvents:", v1, "didTapAcceptButton", 64);
  v10 = sub_10001E724(0, (unint64_t *)&qword_10081F6D8, off_1007765E0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = objc_msgSend(v12, "bundleForClass:", ObjCClassFromMetadata);
  v14 = String._bridgeToObjectiveC()();
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, v15);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setTitle:forState:", v19, 0, swift_bridgeObjectRelease(v18).n128_f64[0]);

  v20 = v9;
  UIButton.configuration.getter();
  v21 = type metadata accessor for UIButton.Configuration(0);
  v22 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v7, 1, v21);
  if ((_DWORD)v22)
  {
    sub_1000F612C((uint64_t)v7, (uint64_t)v5);
    UIButton.configuration.setter(v5);

    sub_1000F6174((uint64_t)v7);
  }
  else
  {
    v23 = (id)BPSPillSelectedColor(v22);
    v24 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v35);
    UIBackgroundConfiguration.backgroundColor.setter(v23);
    v24(v35, 0);
    UIButton.configuration.setter(v7);

  }
  v25 = objc_msgSend(v1, "buttonTray");
  objc_msgSend(v25, "addButton:", v20);

  if (*(_QWORD *)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_presentationContext] == 4)
  {
    v26 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
    objc_msgSend(v26, "addTarget:action:forControlEvents:", v1, "didTapSkipButton", 64);
    v27 = objc_msgSend(v12, "bundleForClass:", ObjCClassFromMetadata);
    v28 = String._bridgeToObjectiveC()();
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v27, "localizedStringForKey:value:table:", v28, 0, v29);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = v31;

    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "setTitle:forState:", v33, 0, swift_bridgeObjectRelease(v32).n128_f64[0]);

    v34 = objc_msgSend(v1, "buttonTray");
    objc_msgSend(v34, "addButton:", v26);

  }
  sub_1000F58BC();

}

void sub_1000F55A4(char a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  id v6;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for ActivitySetupThreeRingsOnboardingViewController();
  objc_msgSendSuper2(&v7, "viewDidAppear:", a1 & 1);
  sub_1000F5CB4();
  v3 = *(char **)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView];
  if (v3)
  {
    v4 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp42ActivitySetupThreeRingsOnboardingVideoView_playerLayer];
    v5 = v3;
    v6 = objc_msgSend(v4, "player");
    objc_msgSend(v6, "play");

  }
}

void sub_1000F5680(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  objc_super v8;

  v2 = v1;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ActivitySetupThreeRingsOnboardingViewController();
  objc_msgSendSuper2(&v8, "viewDidDisappear:", a1 & 1);
  v4 = OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView;
  v5 = *(void **)&v2[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView];
  if (v5)
  {
    v6 = v5;
    sub_1005CF9E8();

    v7 = *(void **)&v2[v4];
    if (v7)
    {
      objc_msgSend(v7, "removeFromSuperview");
      v5 = *(void **)&v2[v4];
    }
    else
    {
      v5 = 0;
    }
  }
  *(_QWORD *)&v2[v4] = 0;

}

void sub_1000F5754()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)CHASActivitySetupViewController), "initWithPresentationContext:", *(_QWORD *)&v0[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_presentationContext]);
  v1 = objc_msgSend(v0, "delegate");
  objc_msgSend(v4, "setDelegate:", v1);
  swift_unknownObjectRelease(v1);
  v2 = objc_msgSend(v0, "navigationController");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "pushViewController:animated:", v4, 1);

  }
}

void sub_1000F58BC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  void (*v20)(uint64_t);
  uint64_t v21;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  v3 = (void *)objc_opt_self(NSOperationQueue);
  v4 = objc_msgSend(v3, "mainQueue");
  v5 = swift_allocObject(&unk_1007853D0, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v20 = sub_1000F611C;
  v21 = v5;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000398D4;
  v19 = &unk_1007853E8;
  v6 = _Block_copy(&v16);
  v7 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", UIApplicationWillEnterForegroundNotification, 0, v4, v6, swift_release(v21).n128_f64[0]);
  _Block_release(v6);

  v8 = objc_msgSend(v1, "defaultCenter");
  v9 = objc_msgSend(v3, "mainQueue");
  v10 = swift_allocObject(&unk_1007853D0, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v0);
  v20 = sub_1000F6124;
  v21 = v10;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000398D4;
  v19 = &unk_100785410;
  v11 = _Block_copy(&v16);
  v12 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", UIApplicationDidEnterBackgroundNotification, 0, v9, v11, swift_release(v21).n128_f64[0]);
  _Block_release(v11);

  v13 = sub_100047110(&qword_10082CEC0);
  v14 = swift_allocObject(v13, 96, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v14 + 56) = swift_getObjectType(v7);
  *(_QWORD *)(v14 + 32) = v7;
  *(_QWORD *)(v14 + 88) = swift_getObjectType(v12);
  *(_QWORD *)(v14 + 64) = v12;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_observers);
  *(_QWORD *)(v0 + OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_observers) = v14;
  swift_bridgeObjectRelease(v15);
}

void sub_1000F5B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000F5CB4();

  }
  swift_beginAccess(v2, &v10, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v2);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = *(void **)(v5 + OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView);
    v8 = v7;

    if (v7)
    {
      v9 = objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC10FitnessApp42ActivitySetupThreeRingsOnboardingVideoView_playerLayer], "player");
      objc_msgSend(v9, "play");

    }
  }
}

void sub_1000F5C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView;
    v6 = *(void **)(Strong + OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView);
    if (v6 && (v7 = v6, sub_1005CF9E8(), v7, (v8 = *(void **)&v4[v5]) != 0))
    {
      objc_msgSend(v8, "removeFromSuperview");
      v9 = *(void **)&v4[v5];
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)&v4[v5] = 0;

  }
}

void sub_1000F5CB4()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  Class isa;
  void *v25;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActivitySetupThreeRingsOnboardingVideoView()), "init");
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = objc_msgSend(v0, "contentView");
  objc_msgSend(v3, "addSubview:", v2);

  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_100047110((uint64_t *)&unk_100828340);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100623750;
  v7 = objc_msgSend(v2, "leadingAnchor");
  v8 = objc_msgSend(v1, "contentView");
  v9 = objc_msgSend(v8, "leadingAnchor");

  v10 = objc_msgSend(v7, "constraintEqualToAnchor:", v9);
  *(_QWORD *)(v6 + 32) = v10;
  v11 = objc_msgSend(v2, "trailingAnchor");
  v12 = objc_msgSend(v1, "contentView");
  v13 = objc_msgSend(v12, "trailingAnchor");

  v14 = objc_msgSend(v11, "constraintEqualToAnchor:", v13);
  *(_QWORD *)(v6 + 40) = v14;
  v15 = objc_msgSend(v2, "topAnchor");
  v16 = objc_msgSend(v1, "contentView");
  v17 = objc_msgSend(v16, "topAnchor");

  v18 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v17, 30.0);
  *(_QWORD *)(v6 + 48) = v18;
  v19 = objc_msgSend(v2, "bottomAnchor");
  v20 = objc_msgSend(v1, "contentView");
  v21 = objc_msgSend(v20, "bottomAnchor");

  v22 = objc_msgSend(v19, "constraintEqualToAnchor:", v21);
  *(_QWORD *)(v6 + 56) = v22;
  specialized Array._endMutation()(v23);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v25 = *(void **)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView];
  *(_QWORD *)&v1[OBJC_IVAR___CHASActivitySetupThreeRingsOnboardingViewController_videoView] = v2;

}

id sub_1000F602C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySetupThreeRingsOnboardingViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivitySetupThreeRingsOnboardingViewController()
{
  return objc_opt_self(CHASActivitySetupThreeRingsOnboardingViewController);
}

uint64_t sub_1000F60F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F611C(uint64_t a1)
{
  uint64_t v1;

  sub_1000F5B44(a1, v1);
}

void sub_1000F6124(uint64_t a1)
{
  uint64_t v1;

  sub_1000F5C18(a1, v1);
}

uint64_t sub_1000F612C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081F6D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F6174(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081F6D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F61B4(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

id sub_1000F620C(uint64_t a1)
{
  return sub_1000F62A0(a1, type metadata accessor for ActivityChartData);
}

uint64_t type metadata accessor for ActivityChartData()
{
  return objc_opt_self(_TtC10FitnessApp17ActivityChartData);
}

id sub_1000F6290()
{
  return sub_1000F62A0(0, (uint64_t (*)(void))type metadata accessor for ActivityChartDataCache);
}

id sub_1000F62A0(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000F6330()
{
  return type metadata accessor for ActivityChartDataCache(0);
}

uint64_t destroy for MirrorPauseResumeButton(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for MirrorPauseResumeButton(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for MirrorPauseResumeButton(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for ReachableContact(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MirrorPauseResumeButton(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorPauseResumeButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorPauseResumeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorPauseResumeButton()
{
  return &type metadata for MirrorPauseResumeButton;
}

uint64_t sub_1000F6530(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB37C, 1);
}

uint64_t sub_1000F6540@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  _OWORD *v40;
  _OWORD v41[3];
  __int128 v42;
  id v43[4];

  v2 = v1;
  v38 = a1;
  v35 = sub_100047110(&qword_10081F780);
  v3 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100047110(&qword_10081F788);
  __chkstk_darwin(v34);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100047110(&qword_10081F790);
  __chkstk_darwin(v36);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100047110(&qword_10081F798);
  __chkstk_darwin(v37);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v42 = v1[1];
  *(_OWORD *)v43 = v12;
  v13 = *((_QWORD *)&v42 + 1);
  v14 = (_OWORD *)swift_allocObject(&unk_1007854D0, 64, 7);
  v15 = v2[1];
  v14[1] = *v2;
  v14[2] = v15;
  v14[3] = v2[2];
  v40 = v2;
  sub_1000F7048(v43);
  sub_10004D65C((uint64_t)&v42);
  v16 = sub_100047110(&qword_10081F7A0);
  v17 = sub_100028384(&qword_10081F7A8, &qword_10081F7A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  Button.init(action:label:)(sub_1000F7038, v14, sub_1000F7040, v39, v16, v17);
  v18 = swift_retain(v13);
  LOBYTE(v16) = WorkoutStatePublisher.isGymKit.getter(v18);
  sub_10004D634((uint64_t)&v42);
  if ((v16 & 1) != 0)
    v19 = 0.35;
  else
    v19 = 1.0;
  v20 = v35;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v35);
  *(double *)&v7[*(int *)(v34 + 36)] = v19;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  v21 = swift_retain(v13);
  v22 = WorkoutStatePublisher.isGymKit.getter(v21);
  sub_10004D634((uint64_t)&v42);
  KeyPath = swift_getKeyPath(&unk_100623878);
  v24 = swift_allocObject(&unk_1007854F8, 17, 7);
  *(_BYTE *)(v24 + 16) = v22 & 1;
  sub_100021CC0((uint64_t)v7, (uint64_t)v9, &qword_10081F788);
  v25 = (uint64_t *)&v9[*(int *)(v36 + 36)];
  *v25 = KeyPath;
  v25[1] = (uint64_t)sub_1000F7088;
  v25[2] = v24;
  v26 = sub_10001BE90((uint64_t)v7, &qword_10081F788);
  v27 = *((_QWORD *)v2 + 4);
  v28 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v41, v27, 0, 0, 1, v28, v29);
  sub_100021CC0((uint64_t)v9, (uint64_t)v11, &qword_10081F790);
  v30 = &v11[*(int *)(v37 + 36)];
  v31 = v41[1];
  *(_OWORD *)v30 = v41[0];
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v41[2];
  sub_10001BE90((uint64_t)v9, &qword_10081F790);
  return sub_1000F7090((uint64_t)v11, v38);
}

uint64_t sub_1000F6884(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  void (*v28)(char *, uint64_t, __n128);
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v2 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DataLinkCommand(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v37 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  v45 = *(_OWORD *)(a1 + 16);
  swift_retain(*((_QWORD *)&v45 + 1));
  v15 = WorkoutStatePublisher.workoutPaused.getter();
  sub_10004D634((uint64_t)&v45);
  v16 = (unsigned int *)&enum case for DataLinkCommand.resume(_:);
  if ((v15 & 1) == 0)
    v16 = (unsigned int *)&enum case for DataLinkCommand.pause(_:);
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v6 + 104))(v14, *v16, v5);
  static WOLog.dataLink.getter(v17);
  v18 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
  v19 = v18(v12, v14, v5);
  v41 = v4;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v40 = a1;
    v23 = (uint8_t *)v22;
    v38 = swift_slowAlloc(32, -1);
    v44 = v38;
    v39 = v2;
    *(_DWORD *)v23 = 136315138;
    v37 = v23 + 4;
    v18(v9, v12, v5);
    v24 = String.init<A>(describing:)(v9, v5);
    v26 = v25;
    v43 = sub_10003E8EC(v24, v25, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37);
    v27 = swift_bridgeObjectRelease(v26);
    v28 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
    v28(v12, v5, v27);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sending %s", v23, 0xCu);
    v29 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v23;
    a1 = v40;
    swift_slowDealloc(v30, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v39);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
    ((void (*)(char *, uint64_t))v28)(v12, v5);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v2);
  }
  if (*(_QWORD *)a1)
  {
    v31 = *(_QWORD *)(*(_QWORD *)a1 + OBJC_IVAR___WODataLinkMonitor_client);
    swift_retain(v31);
    dispatch thunk of DataLinkClient.send(command:acknowledged:)(v14, sub_1000F6BBC, 0);
    v32 = swift_release(v31);
    return ((uint64_t (*)(char *, uint64_t, __n128))v28)(v14, v5, v32);
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 8);
    v35 = type metadata accessor for DataLinkMonitor();
    v36 = sub_1000F70E8();
    result = EnvironmentObject.error()(0, v34, v35, v36);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F6BBC(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static WOLog.dataLink.getter(v6);
  swift_errorRetain(a2);
  v9 = swift_errorRetain(a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(18, -1);
    v13 = swift_slowAlloc(32, -1);
    v20 = v13;
    *(_DWORD *)v12 = 67109378;
    LODWORD(v19) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 4, v12 + 4);
    *(_WORD *)(v12 + 8) = 2080;
    v19 = a2;
    v14 = sub_100047110(&qword_10081F7B8);
    v15 = Optional.description.getter(v14);
    v17 = v16;
    v19 = sub_10003E8EC(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 10);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received %{BOOL}d with error %s", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

__n128 sub_1000F6DB0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  __n128 v17;
  uint64_t v18;

  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_1000F6E28(a1, (uint64_t)&v13);
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v18;
  result = v17;
  v12 = v16;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 25) = v9;
  *(_OWORD *)(a2 + 32) = v12;
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = v10;
  return result;
}

uint64_t sub_1000F6E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t result;
  __int128 v20;

  v4 = sub_100047110(&qword_10081F2F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10081DCD8 != -1)
    swift_once(&qword_10081DCD8, sub_1003D1FC8);
  v7 = qword_10086A848;
  v20 = *(_OWORD *)(a1 + 16);
  swift_retain(qword_10086A848);
  v8 = sub_10004D65C((uint64_t)&v20);
  v9 = WorkoutStatePublisher.workoutPaused.getter(v8);
  sub_10004D634((uint64_t)&v20);
  if ((v9 & 1) != 0)
    v10 = 0x6C632E776F727261;
  else
    v10 = 0x6573756170;
  if ((v9 & 1) != 0)
    v11 = 0xEF657369776B636FLL;
  else
    v11 = 0xE500000000000000;
  v12 = Image.init(systemName:)(v10, v11);
  v13 = *(double *)(a1 + 40);
  v14 = static Font.Weight.semibold.getter(v12);
  v15 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = static Font.system(size:weight:design:)(*(_QWORD *)&v14, 0, v6, v13);
  sub_10001BE90((uint64_t)v6, &qword_10081F2F8);
  KeyPath = swift_getKeyPath(&unk_1006238A8);
  v18 = static Color.white.getter();
  result = swift_getKeyPath(&unk_1006238D8);
  *(_QWORD *)a2 = v7;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = KeyPath;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 48) = v18;
  return result;
}

uint64_t sub_1000F6FD4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F6540(a1);
}

uint64_t sub_1000F700C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000F7038()
{
  uint64_t v0;

  return sub_1000F6884(v0 + 16);
}

double sub_1000F7040@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000F6DB0(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

id *sub_1000F7048(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_1000F7078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000F7088(_BYTE *a1)
{
  uint64_t v1;

  return sub_100561D3C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1000F7090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_10081F798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F70E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F7B0;
  if (!qword_10081F7B0)
  {
    v1 = type metadata accessor for DataLinkMonitor();
    result = swift_getWitnessTable(&unk_100636D30, v1);
    atomic_store(result, (unint64_t *)&qword_10081F7B0);
  }
  return result;
}

unint64_t sub_1000F7134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F7C0;
  if (!qword_10081F7C0)
  {
    v1 = sub_100007050(&qword_10081F798);
    sub_1000F71A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F7C0);
  }
  return result;
}

unint64_t sub_1000F71A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F7C8;
  if (!qword_10081F7C8)
  {
    v1 = sub_100007050(&qword_10081F790);
    sub_1000F7224();
    sub_100028384(&qword_10081F7E0, &qword_10081F7E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F7C8);
  }
  return result;
}

unint64_t sub_1000F7224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F7D0;
  if (!qword_10081F7D0)
  {
    v1 = sub_100007050(&qword_10081F788);
    sub_100028384(&qword_10081F7D8, &qword_10081F780, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F7D0);
  }
  return result;
}

uint64_t sub_1000F72A8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for DialogUtilities()
{
  return objc_opt_self(_TtC10FitnessApp15DialogUtilities);
}

ValueMetadata *type metadata accessor for ActivitySharingFriendDetailHeaderView()
{
  return &type metadata for ActivitySharingFriendDetailHeaderView;
}

uint64_t sub_1000F72E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB3FC, 1);
}

void sub_1000F72F8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  void *v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _BYTE v69[7];
  char v70;
  _BYTE v71[7];
  char v72;
  _BYTE v73[7];
  _BYTE v74[7];
  _BYTE v75[7];
  char v76;
  _BYTE v77[7];
  char v78;
  _BYTE v79[7];
  char v80;

  type metadata accessor for ActivitySharingAvatarProvider();
  v4 = sub_1004B1860(a1, 120.0);
  v64 = Image.init(uiImage:)(v4);
  v63 = static Edge.Set.top.getter(v64);
  v5 = EdgeInsets.init(_all:)(8.0);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v61 = a1;
  v12 = objc_msgSend(a1, "displayName");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    v65 = v14;
    v66 = v16;
    v17 = sub_100038CA0();
    v18 = Text.init<A>(_:)(&v65, &type metadata for String, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23 & 1;
    v25 = static Font.largeTitle.getter();
    v27 = Text.font(_:)(v25, v18, v20, v24, v22, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    swift_release(v25);
    LOBYTE(v25) = v31 & 1;
    sub_1000E4458(v18, v20, v24);
    v34 = swift_bridgeObjectRelease(v22);
    v35 = Text.bold()(v27, v29, v31 & 1, v33, v34);
    v60 = v36;
    v38 = v37;
    v40 = v39 & 1;
    sub_1000E4458(v27, v29, v25);
    swift_bridgeObjectRelease(v33);
    KeyPath = swift_getKeyPath(&unk_1006239B8);
    v58 = swift_getKeyPath(&unk_1006239E8);
    v57 = static Edge.Set.top.getter(v58);
    v41 = EdgeInsets.init(_all:)(11.0);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    sub_1000F76A4(v61, (uint64_t)&v65);
    v48 = v65;
    v49 = v66;
    v62 = v67;
    v50 = v68;
    v56 = v68;
    v80 = 0;
    v78 = v40;
    v76 = 0;
    v72 = 0;
    v70 = v67;
    *(_DWORD *)(a2 + 9) = v65;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)((char *)&v65 + 3);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)v79;
    *(_DWORD *)(a2 + 52) = *(_DWORD *)&v79[3];
    *(_DWORD *)(a2 + 73) = *(_DWORD *)v77;
    *(_DWORD *)(a2 + 76) = *(_DWORD *)&v77[3];
    v51 = *(_DWORD *)v75;
    *(_DWORD *)(a2 + 108) = *(_DWORD *)&v75[3];
    *(_DWORD *)(a2 + 105) = v51;
    v52 = *(_DWORD *)v74;
    *(_DWORD *)(a2 + 124) = *(_DWORD *)&v74[3];
    *(_DWORD *)(a2 + 121) = v52;
    v53 = *(_DWORD *)v73;
    *(_DWORD *)(a2 + 132) = *(_DWORD *)&v73[3];
    *(_DWORD *)(a2 + 129) = v53;
    LOBYTE(v53) = v72;
    v54 = *(_DWORD *)v71;
    *(_DWORD *)(a2 + 172) = *(_DWORD *)&v71[3];
    *(_DWORD *)(a2 + 169) = v54;
    LOBYTE(v54) = v70;
    v55 = *(_DWORD *)v69;
    *(_DWORD *)(a2 + 196) = *(_DWORD *)&v69[3];
    *(_DWORD *)(a2 + 193) = v55;
    *(_QWORD *)a2 = v64;
    *(_BYTE *)(a2 + 8) = v63;
    *(double *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v11;
    *(_BYTE *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = v35;
    *(_QWORD *)(a2 + 64) = v60;
    *(_BYTE *)(a2 + 72) = v40;
    *(_QWORD *)(a2 + 80) = v38;
    *(_QWORD *)(a2 + 88) = KeyPath;
    *(_QWORD *)(a2 + 96) = 2;
    *(_BYTE *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = v58;
    *(_BYTE *)(a2 + 120) = 1;
    *(_BYTE *)(a2 + 128) = v57;
    *(double *)(a2 + 136) = v41;
    *(_QWORD *)(a2 + 144) = v43;
    *(_QWORD *)(a2 + 152) = v45;
    *(_QWORD *)(a2 + 160) = v47;
    *(_BYTE *)(a2 + 168) = v53;
    *(_QWORD *)(a2 + 176) = v48;
    *(_QWORD *)(a2 + 184) = v49;
    *(_BYTE *)(a2 + 192) = v54;
    *(_QWORD *)(a2 + 200) = v50;
    swift_retain(v64);
    sub_1000E439C(v35, v60, v40);
    swift_bridgeObjectRetain(v38);
    swift_retain(KeyPath);
    swift_retain(v58);
    sub_1000E439C(v48, v49, v62);
    swift_bridgeObjectRetain(v56);
    sub_1000E4458(v48, v49, v62);
    swift_bridgeObjectRelease(v56);
    sub_1000E4458(v35, v60, v40);
    swift_release(v64);
    swift_release(v58);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v38);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F76A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v3 = objc_msgSend(a1, "contact");
  v4 = v3;
  if (!v3)
    goto LABEL_5;
  v5 = objc_msgSend(v3, "relationship");

  v6 = objc_msgSend(v5, "cloudKitAddress");
  if (!v6)
  {
    v4 = 0;
LABEL_5:
    v8 = 0xE000000000000000;
    goto LABEL_6;
  }
  v4 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

LABEL_6:
  v34[0] = v4;
  v34[1] = v8;
  v9 = sub_100038CA0();
  v10 = Text.init<A>(_:)(v34, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter();
  v19 = Text.font(_:)(v17, v10, v12, v16, v14, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v17);
  LOBYTE(v17) = v23 & 1;
  sub_1000E4458(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Color.secondary.getter(v26);
  v28 = Text.foregroundColor(_:)(v27, v19, v21, v23 & 1, v25);
  v30 = v29;
  LOBYTE(v16) = v31;
  v33 = v32;
  swift_release(v27);
  sub_1000E4458(v19, v21, v17);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + 16) = v16 & 1;
  *(_QWORD *)(a2 + 24) = v33;
}

void *sub_1000F7840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  void **v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[53];
  char v14;
  _BYTE __src[344];

  v8 = *v6;
  static HorizontalAlignment.center.getter(a1, a2, a3, a4, a5);
  sub_1000F72F8(v8, (uint64_t)v13);
  *(_OWORD *)((char *)&v13[44] + 7) = *(_OWORD *)&v13[18];
  *(_OWORD *)((char *)&v13[46] + 7) = *(_OWORD *)&v13[20];
  *(_OWORD *)((char *)&v13[48] + 7) = *(_OWORD *)&v13[22];
  *(_OWORD *)((char *)&v13[50] + 7) = *(_OWORD *)&v13[24];
  *(_OWORD *)((char *)&v13[36] + 7) = *(_OWORD *)&v13[10];
  *(_OWORD *)((char *)&v13[38] + 7) = *(_OWORD *)&v13[12];
  *(_OWORD *)((char *)&v13[40] + 7) = *(_OWORD *)&v13[14];
  *(_OWORD *)((char *)&v13[42] + 7) = *(_OWORD *)&v13[16];
  *(_OWORD *)((char *)&v13[28] + 7) = *(_OWORD *)&v13[2];
  *(_OWORD *)((char *)&v13[30] + 7) = *(_OWORD *)&v13[4];
  *(_OWORD *)((char *)&v13[32] + 7) = *(_OWORD *)&v13[6];
  *(_OWORD *)((char *)&v13[34] + 7) = *(_OWORD *)&v13[8];
  *(_OWORD *)((char *)&v13[26] + 7) = *(_OWORD *)v13;
  v14 = 0;
  v10 = static Alignment.center.getter(v9);
  sub_1003EAE3C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)__src, 0.0, 1, 0.0, 1, v10, v11);
  sub_1000F79BC((uint64_t)v13);
  return memcpy(a6, __src, 0x158uLL);
}

uint64_t sub_1000F79BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 184);
  v10 = *(_BYTE *)(a1 + 192);
  v12 = *(_QWORD *)(a1 + 200);
  swift_release(*(_QWORD *)a1);
  sub_1000E4458(v2, v3, v4);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  sub_1000E4458(v8, v9, v10);
  swift_bridgeObjectRelease(v12);
  return a1;
}

unint64_t sub_1000F7A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F888;
  if (!qword_10081F888)
  {
    v1 = sub_100007050(&qword_10081F890);
    sub_1000F7AEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F888);
  }
  return result;
}

unint64_t sub_1000F7AEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F898;
  if (!qword_10081F898)
  {
    v1 = sub_100007050(&qword_10081F8A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10081F898);
  }
  return result;
}

uint64_t sub_1000F7B38()
{
  return sub_1000DA97C((uint64_t)&unk_100623AA8, (uint64_t)&unk_100623AD0);
}

uint64_t sub_1000F7B4C()
{
  return sub_1000DA97C((uint64_t)&unk_100623DC0, (uint64_t)&unk_100623DE8);
}

void sub_1000F7B60()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = objc_msgSend(*(id *)(v0 + 16), "unitManager");
  if (v1)
  {
    v2 = v1;
    KeyPath = swift_getKeyPath(&unk_100623AF0);
    v4 = swift_getKeyPath(&unk_100623B18);
    static Published.subscript.getter(&v7, v0, KeyPath, v4);
    swift_release(KeyPath);
    swift_release(v4);
    if ((_BYTE)v7)
    {
      if (v7 == 1)
        v5 = objc_msgSend((id)objc_opt_self(HKUnit), "kilocalorieUnit");
      else
        v5 = objc_msgSend((id)objc_opt_self(HKUnit), "jouleUnitWithMetricPrefix:", 9);
    }
    else
    {
      v5 = objc_msgSend((id)objc_opt_self(HKUnit), "largeCalorieUnit");
    }
    v6 = v5;
    objc_msgSend(v2, "setUserActiveEnergyBurnedUnit:", v6);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F7C7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100623AF0);
  v2 = swift_getKeyPath(&unk_100623B18);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_1000F7CEC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(*(id *)(v0 + 16), "unitManager");
  if (v1)
  {
    v2 = v1;
    KeyPath = swift_getKeyPath(&unk_100623B38);
    v4 = swift_getKeyPath(&unk_100623B60);
    static Published.subscript.getter(&v6, v0, KeyPath, v4);
    swift_release(KeyPath);
    swift_release(v4);
    if ((_BYTE)v6)
      v5 = 1;
    else
      v5 = 4;
    objc_msgSend(v2, "setUserDistanceUnit:forDistanceType:", v5, 3);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F7DA4()
{
  return sub_1000DA97C((uint64_t)&unk_100623B38, (uint64_t)&unk_100623B60);
}

uint64_t sub_1000F7DB8()
{
  return sub_1000DA97C((uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8);
}

uint64_t sub_1000F7DCC()
{
  return sub_1000DA97C((uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0);
}

uint64_t sub_1000F7DE0()
{
  return sub_1000DA97C((uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38);
}

uint64_t sub_1000F7DF4()
{
  return sub_1000DA97C((uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80);
}

uint64_t sub_1000F7E08()
{
  return sub_1000DA97C((uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8);
}

uint64_t sub_1000F7E1C()
{
  return sub_1000DA97C((uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10);
}

void sub_1000F7E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = objc_msgSend(*(id *)(v3 + 16), "unitManager");
  if (v7)
  {
    v8 = v7;
    KeyPath = swift_getKeyPath(a1);
    v10 = swift_getKeyPath(a2);
    static Published.subscript.getter(&v12, v3, KeyPath, v10);
    swift_release(KeyPath);
    swift_release(v10);
    if ((_BYTE)v12)
      v11 = 2;
    else
      v11 = 3;
    objc_msgSend(v8, "setUserDistanceUnit:forDistanceType:", v11, a3);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F7EF4()
{
  return sub_1000DA97C((uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58);
}

void sub_1000F7F08(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  unsigned int v19;
  id v20;
  void *v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id aBlock[5];
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100623D78);
  v13 = swift_getKeyPath(&unk_100623DA0);
  static Published.subscript.getter(aBlock, v2, KeyPath, v13);
  swift_release(KeyPath);
  swift_release(v13);
  if (((((a1 & 1) == 0) ^ LOBYTE(aBlock[0])) & 1) == 0)
  {
    v32 = v5;
    v14 = *(void **)(v2 + 24);
    v15 = swift_getKeyPath(&unk_100623D78);
    v16 = swift_getKeyPath(&unk_100623DA0);
    static Published.subscript.getter(aBlock, v2, v15, v16);
    swift_release(v15);
    swift_release(v16);
    v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", LOBYTE(aBlock[0]));
    v18 = String._bridgeToObjectiveC()();
    aBlock[0] = 0;
    v19 = objc_msgSend(v14, "setNumber:forKey:error:", v17, v18, aBlock);

    v20 = aBlock[0];
    if (!v19)
    {
      v21 = v20;
      v22 = _convertNSErrorToError(_:)(v20);

      swift_willThrow();
      swift_errorRelease(v22);
    }
    sub_10002FB54();
    v24 = (void *)static OS_dispatch_queue.main.getter(v23);
    aBlock[4] = sub_1000FA0CC;
    v34 = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10002D0F8;
    aBlock[3] = &unk_100785648;
    v25 = _Block_copy(aBlock);
    v26 = v34;
    swift_retain(v2);
    swift_release(v26);
    static DispatchQoS.unspecified.getter(v27);
    aBlock[0] = _swiftEmptyArrayStorage;
    v28 = sub_10002FAC0();
    v29 = sub_100047110(&qword_100828C80);
    v30 = sub_10002FB08();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v4, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_1000F8230(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[6];

  v1 = *(void **)(a1 + 32);
  v3[4] = sub_1000F82B8;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1000064EC;
  v3[3] = &unk_100785670;
  v2 = _Block_copy(v3);
  objc_msgSend(v1, "forceNanoSyncWithOptions:completion:", 0, v2);
  _Block_release(v2);
}

void sub_1000F82B8(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3;
  void *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a1 & 1) == 0)
  {
    v3 = static os_log_type_t.default.getter(a1);
    v4 = (void *)HKLogActivity;
    if (os_log_type_enabled(HKLogActivity, v3))
    {
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      v5 = v4;
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138412290;
      if (a2)
      {
        swift_errorRetain(a2);
        v8 = _swift_stdlib_bridgeErrorToNSError(a2);
        v10 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v6 + 4);
      }
      else
      {
        v10 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v6 + 4);
        v8 = 0;
      }
      *v7 = v8;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, v3, "[UnitSettingsDataProvider] Failed to nano sync after updating track unit: %@", v6, 0xCu);
      v9 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
  }
}

uint64_t sub_1000F8460()
{
  return sub_1000DA97C((uint64_t)&unk_100623D78, (uint64_t)&unk_100623DA0);
}

_QWORD *sub_1000F8474(void *a1, void *a2, int a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  NSString v36;
  id v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  int v47;
  int v48;
  char v49;
  _BYTE v50[24];

  v47 = a3;
  v48 = a4;
  v45 = a1;
  v46 = a2;
  v5 = sub_100047110(&qword_10081FCC0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_10081FCC8);
  v41 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_10081FCD0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_10081FCD8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[5] = _swiftEmptyArrayStorage;
  v18 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__energyUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsEnergyUnit);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  v19 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__poolLengthUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsPoolLengthUnit);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v13, v10);
  v20 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__cyclingWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v21(v20, v9, v7);
  v22 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__walkingAndRunningWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v22, v9, v7);
  v23 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__crossCountrySkiingWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v23, v9, v7);
  v24 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__downhillSnowSportsWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v24, v9, v7);
  v25 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__rowingWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v25, v9, v7);
  v26 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__paddleSportsWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v26, v9, v7);
  v27 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__skatingSportsWorkoutsUnit;
  v50[0] = 0;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsDistanceUnit);
  v21(v27, v9, v7);
  v28 = (char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__trackWorkoutsUnit;
  v50[0] = 1;
  v29 = v42;
  Published.init(initialValue:)(v50, &type metadata for UnitSettingsTrackDistanceUnit);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v28, v29, v44);
  v30 = v45;
  v4[2] = v45;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kHKNanolifestylePreferencesDomain);
  v32 = v31;
  v33 = objc_allocWithZone((Class)HKKeyValueDomain);
  v34 = v30;
  v35 = v46;
  v36 = String._bridgeToObjectiveC()();
  v37 = objc_msgSend(v33, "initWithCategory:domainName:healthStore:", 0, v36, v35, swift_bridgeObjectRelease(v32).n128_f64[0]);

  v4[3] = v37;
  v4[4] = objc_msgSend(objc_allocWithZone((Class)HKNanoSyncControl), "initWithHealthStore:", v35);
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__isWheelchairUser, v50, 33, 0);
  v49 = v47;
  Published.init(initialValue:)(&v49, &type metadata for Bool);
  swift_endAccess(v50);
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__isAppleMoveTime, v50, 33, 0);
  v49 = v48;
  Published.init(initialValue:)(&v49, &type metadata for Bool);
  swift_endAccess(v50);
  sub_1000F8C5C();
  sub_1000F9308();
  v38 = v37;
  objc_msgSend(v38, "startObservation:", v4, swift_retain(v4).n128_f64[0]);

  swift_release(v4);
  return v4;
}

uint64_t sub_1000F8944()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;

  objc_msgSend(*(id *)(v0 + 24), "stopObservation:", v0);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = (void *)objc_opt_self(NSNotificationCenter);
  v3 = objc_msgSend(v2, "defaultCenter", swift_bridgeObjectRetain(v1).n128_f64[0]);
  v4 = v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    v6 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    v7 = v4;
    do
    {
      sub_10003E9BC(v6, (uint64_t)v24);
      v8 = v25;
      v9 = sub_100016804(v24, v25);
      v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v8);
      objc_msgSend(v7, "removeObserver:", v10);
      swift_unknownObjectRelease(v10);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v24);
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n(v1, 2);

  }
  else
  {

    swift_bridgeObjectRelease(v1);
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v11 = v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__isWheelchairUser;
  v12 = sub_100047110(&qword_10083B500);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__isAppleMoveTime, v12);
  v14 = v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__energyUnit;
  v15 = sub_100047110(&qword_10081FCD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__poolLengthUnit;
  v17 = sub_100047110(&qword_10081FCD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__cyclingWorkoutsUnit;
  v19 = sub_100047110(&qword_10081FCC8);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__walkingAndRunningWorkoutsUnit, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__crossCountrySkiingWorkoutsUnit, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__downhillSnowSportsWorkoutsUnit, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__rowingWorkoutsUnit, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__paddleSportsWorkoutsUnit, v19);
  v20(v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__skatingSportsWorkoutsUnit, v19);
  v21 = v0 + OBJC_IVAR____TtC10FitnessApp25UnitsSettingsDataProvider__trackWorkoutsUnit;
  v22 = sub_100047110(&qword_10081FCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  return v0;
}

uint64_t sub_1000F8BF4()
{
  uint64_t v0;

  sub_1000F8944();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000F8C18()
{
  return type metadata accessor for UnitsSettingsDataProvider(0);
}

uint64_t type metadata accessor for UnitsSettingsDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10081F930;
  if (!qword_10081F930)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnitsSettingsDataProvider);
  return result;
}

void sub_1000F8C5C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  void *v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  v3 = objc_msgSend(v2, "unitManager");
  if (!v3)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "userActiveEnergyBurnedUnit");

  LOBYTE(v4) = sub_100105AB8(v5);
  KeyPath = swift_getKeyPath(&unk_100623AF0);
  v7 = swift_getKeyPath(&unk_100623B18);
  LOBYTE(v65) = (_BYTE)v4;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, KeyPath, v7);
  sub_1000F7B60();
  v8 = objc_msgSend(v2, "unitManager");
  if (!v8)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "userDistanceUnitForDistanceType:", 3);

  v11 = sub_100466FC0((uint64_t)v10);
  v12 = swift_getKeyPath(&unk_100623B38);
  v13 = swift_getKeyPath(&unk_100623B60);
  LOBYTE(v65) = v11;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v12, v13);
  sub_1000F7CEC();
  v14 = objc_msgSend(v2, "unitManager");
  if (!v14)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "userDistanceUnitForDistanceType:", 2);

  v17 = sub_100190388((uint64_t)v16) & 1;
  v18 = swift_getKeyPath(&unk_100623B80);
  v19 = swift_getKeyPath(&unk_100623BA8);
  LOBYTE(v65) = v17;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v18, v19);
  sub_1000F7E30((uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8, 2);
  v20 = objc_msgSend(v2, "unitManager");
  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "userDistanceUnitForDistanceType:", 1);

  v23 = sub_100190388((uint64_t)v22) & 1;
  v24 = swift_getKeyPath(&unk_100623BC8);
  v25 = swift_getKeyPath(&unk_100623BF0);
  LOBYTE(v65) = v23;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v24, v25);
  sub_1000F7E30((uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0, 1);
  v26 = objc_msgSend(v2, "unitManager");
  if (!v26)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "userDistanceUnitForDistanceType:", 6);

  v29 = sub_100190388((uint64_t)v28) & 1;
  v30 = swift_getKeyPath(&unk_100623C10);
  v31 = swift_getKeyPath(&unk_100623C38);
  LOBYTE(v65) = v29;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v30, v31);
  sub_1000F7E30((uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38, 6);
  v32 = objc_msgSend(v2, "unitManager");
  if (!v32)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "userDistanceUnitForDistanceType:", 7);

  v35 = sub_100190388((uint64_t)v34) & 1;
  v36 = swift_getKeyPath(&unk_100623C58);
  v37 = swift_getKeyPath(&unk_100623C80);
  LOBYTE(v65) = v35;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v36, v37);
  sub_1000F7E30((uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80, 7);
  v38 = objc_msgSend(v2, "unitManager");
  if (!v38)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v39 = v38;
  v40 = objc_msgSend(v38, "userDistanceUnitForDistanceType:", 9);

  v41 = sub_100190388((uint64_t)v40) & 1;
  v42 = swift_getKeyPath(&unk_100623CA0);
  v43 = swift_getKeyPath(&unk_100623CC8);
  LOBYTE(v65) = v41;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v42, v43);
  sub_1000F7E30((uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8, 9);
  v44 = objc_msgSend(v2, "unitManager");
  if (!v44)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v45 = v44;
  v46 = objc_msgSend(v44, "userDistanceUnitForDistanceType:", 8);

  v47 = sub_100190388((uint64_t)v46) & 1;
  v48 = swift_getKeyPath(&unk_100623CE8);
  v49 = swift_getKeyPath(&unk_100623D10);
  LOBYTE(v65) = v47;
  swift_retain(v1);
  static Published.subscript.setter(&v65, v1, v48, v49);
  sub_1000F7E30((uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10, 8);
  v50 = objc_msgSend(v2, "unitManager");
  if (v50)
  {
    v51 = v50;
    v52 = objc_msgSend(v50, "userDistanceUnitForDistanceType:", 10);

    v53 = sub_100190388((uint64_t)v52) & 1;
    v54 = swift_getKeyPath(&unk_100623D30);
    v55 = swift_getKeyPath(&unk_100623D58);
    LOBYTE(v65) = v53;
    swift_retain(v1);
    static Published.subscript.setter(&v65, v1, v54, v55);
    sub_1000F7E30((uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58, 10);
    v56._object = (void *)0x8000000100688AD0;
    v56._countAndFlagsBits = 0xD000000000000013;
    v57 = (void *)HKKeyValueDomain.number(for:)(v56);
    if (v58)
    {
      swift_errorRelease(v58);
      v59 = 0;
    }
    else
    {
      v59 = v57;
      if (v57 && !objc_msgSend(v57, "integerValue"))
      {
        v60 = 0;
        goto LABEL_15;
      }
    }
    v60 = 1;
LABEL_15:
    v61 = swift_getKeyPath(&unk_100623D78);
    v62 = swift_getKeyPath(&unk_100623DA0);
    static Published.subscript.getter(&v65, v1, v61, v62);
    swift_release(v61);
    swift_release(v62);
    LOBYTE(v61) = v65;
    v63 = swift_getKeyPath(&unk_100623D78);
    v64 = swift_getKeyPath(&unk_100623DA0);
    LOBYTE(v65) = v60;
    swift_retain(v1);
    static Published.subscript.setter(&v65, v1, v63, v64);
    sub_1000F7F08(v61);

    return;
  }
LABEL_25:
  __break(1u);
}

void sub_1000F9308()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  void *v23;
  uint64_t v24;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  if (qword_10081D640 != -1)
    swift_once(&qword_10081D640, sub_10004CE14);
  v3 = (void *)qword_100869F70;
  v4 = (void *)objc_opt_self(NSOperationQueue);
  v5 = v3;
  v6 = objc_msgSend(v4, "mainQueue");
  v7 = swift_allocObject(&unk_1007855E0, 24, 7);
  swift_weakInit(v7 + 16, v0);
  v23 = sub_1000F995C;
  v24 = v7;
  v19 = _NSConcreteStackBlock;
  v20 = 1107296256;
  v21 = sub_1000398D4;
  v22 = &unk_1007855F8;
  v8 = _Block_copy(&v19);
  v9 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v5, 0, v6, v8, swift_release(v24).n128_f64[0]);
  _Block_release(v8);

  v10 = objc_msgSend(v1, "defaultCenter");
  v11 = kFIUIFitnessUnitPreferencesDidChangeNotification;
  v12 = objc_msgSend(v4, "mainQueue");
  v13 = swift_allocObject(&unk_1007855E0, 24, 7);
  swift_weakInit(v13 + 16, v0);
  v23 = sub_1000F9964;
  v24 = v13;
  v19 = _NSConcreteStackBlock;
  v20 = 1107296256;
  v21 = sub_1000398D4;
  v22 = &unk_100785620;
  v14 = _Block_copy(&v19);
  v15 = objc_msgSend(v10, "addObserverForName:object:queue:usingBlock:", v11, 0, v12, v14, swift_release(v24).n128_f64[0]);
  _Block_release(v14);

  v16 = sub_100047110(&qword_10082CEC0);
  v17 = swift_allocObject(v16, 96, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v17 + 56) = swift_getObjectType(v9);
  *(_QWORD *)(v17 + 32) = v9;
  *(_QWORD *)(v17 + 88) = swift_getObjectType(v15);
  *(_QWORD *)(v17 + 64) = v15;
  v18 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 40) = v17;
  swift_bridgeObjectRelease(v18);
}

uint64_t sub_1000F95C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;

  v3 = Notification.userInfo.getter();
  if (!v3)
  {
    v15 = 0u;
    v16 = 0u;
    return sub_1000F996C((uint64_t)&v15);
  }
  v4 = v3;
  v13[0] = 0xD000000000000010;
  v13[1] = 0x8000000100688AB0;
  AnyHashable.init<A>(_:)(v14, v13, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_10004C814((uint64_t)v14), (v6 & 1) != 0))
  {
    sub_10003E9BC(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  swift_bridgeObjectRelease(v4);
  sub_10004CC10((uint64_t)v14);
  if (!*((_QWORD *)&v16 + 1))
    return sub_1000F996C((uint64_t)&v15);
  result = swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((result & 1) != 0)
  {
    v8 = a2 + 16;
    v9 = v14[0];
    swift_beginAccess(v8, v14, 0, 0);
    result = swift_weakLoadStrong(v8);
    if (result)
    {
      v10 = result;
      KeyPath = swift_getKeyPath(&unk_100623AA8);
      v12 = swift_getKeyPath(&unk_100623AD0);
      LOBYTE(v15) = v9;
      return static Published.subscript.setter(&v15, v10, KeyPath, v12);
    }
  }
  return result;
}

double sub_1000F971C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_1000F8C5C();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

void sub_1000F97A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100038D3C(319, (unint64_t *)&qword_10083B460, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v13 = *(_QWORD *)(v2 - 8) + 64;
    v14 = v13;
    sub_100038D3C(319, &qword_10081F940, (uint64_t)&type metadata for UnitSettingsEnergyUnit);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      sub_100038D3C(319, &qword_10081F948, (uint64_t)&type metadata for UnitSettingsPoolLengthUnit);
      if (v7 <= 0x3F)
      {
        v16 = *(_QWORD *)(v6 - 8) + 64;
        sub_100038D3C(319, &qword_10081F950, (uint64_t)&type metadata for UnitSettingsDistanceUnit);
        if (v9 <= 0x3F)
        {
          v17 = *(_QWORD *)(v8 - 8) + 64;
          v18 = v17;
          v19 = v17;
          v20 = v17;
          v21 = v17;
          v22 = v17;
          v23 = v17;
          sub_100038D3C(319, (unint64_t *)&unk_10081F958, (uint64_t)&type metadata for UnitSettingsTrackDistanceUnit);
          if (v11 <= 0x3F)
          {
            v24 = *(_QWORD *)(v10 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 16, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t sub_1000F98FC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for UnitsSettingsDataProvider(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000F9938()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F995C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F95C4(a1, v1);
}

double sub_1000F9964(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F971C(a1, v1);
}

uint64_t sub_1000F996C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110((uint64_t *)&unk_100828420);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F99AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100623AF0);
  v5 = swift_getKeyPath(&unk_100623B18);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

void sub_1000F9A28(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100623AF0);
  v5 = swift_getKeyPath(&unk_100623B18);
  v6 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v6, v3, KeyPath, v5);
  sub_1000F7B60();
}

uint64_t sub_1000F9A9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623B38, (uint64_t)&unk_100623B60, a2);
}

void sub_1000F9AB0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100623B38);
  v5 = swift_getKeyPath(&unk_100623B60);
  v6 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v6, v3, KeyPath, v5);
  sub_1000F7CEC();
}

uint64_t sub_1000F9B24@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8, a2);
}

void sub_1000F9B38(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8, 2);
}

void sub_1000F9B50(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  char v14;

  v10 = *a1;
  v11 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v13 = swift_getKeyPath(a6);
  v14 = v10;
  swift_retain(v11);
  static Published.subscript.setter(&v14, v11, KeyPath, v13);
  sub_1000F7E30(a5, a6, a7);
}

uint64_t sub_1000F9BE4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0, a2);
}

void sub_1000F9BF8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0, 1);
}

uint64_t sub_1000F9C10@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623D78, (uint64_t)&unk_100623DA0, a2);
}

void sub_1000F9C24(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100623D78);
  v5 = swift_getKeyPath(&unk_100623DA0);
  static Published.subscript.getter(&v9, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  LOBYTE(KeyPath) = v9;
  v6 = swift_getKeyPath(&unk_100623D78);
  v7 = swift_getKeyPath(&unk_100623DA0);
  v8 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v8, v3, v6, v7);
  sub_1000F7F08(KeyPath);
}

uint64_t sub_1000F9CEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38, a2);
}

void sub_1000F9D00(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38, 6);
}

uint64_t sub_1000F9D18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80, a2);
}

void sub_1000F9D2C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80, 7);
}

uint64_t sub_1000F9D44@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8, a2);
}

void sub_1000F9D58(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8, 9);
}

uint64_t sub_1000F9D70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10, a2);
}

void sub_1000F9D84(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10, 8);
}

uint64_t sub_1000F9D9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58, a2);
}

void sub_1000F9DB0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58, 10);
}

uint64_t sub_1000F9DC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623AA8, (uint64_t)&unk_100623AD0, a2);
}

uint64_t sub_1000F9DDC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100623AA8, (uint64_t)&unk_100623AD0);
}

uint64_t sub_1000F9DF0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623DC0, (uint64_t)&unk_100623DE8, a2);
}

uint64_t sub_1000F9E04(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100623DC0, (uint64_t)&unk_100623DE8);
}

uint64_t sub_1000F9E18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623AA8, (uint64_t)&unk_100623AD0, a2);
}

uint64_t sub_1000F9E3C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100623AA8, (uint64_t)&unk_100623AD0);
}

uint64_t sub_1000F9E68@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623B38, (uint64_t)&unk_100623B60, a2);
}

uint64_t sub_1000F9E90@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8, a2);
}

void sub_1000F9EB4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623B80, (uint64_t)&unk_100623BA8, 2);
}

uint64_t sub_1000F9EDC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0, a2);
}

void sub_1000F9F00(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623BC8, (uint64_t)&unk_100623BF0, 1);
}

uint64_t sub_1000F9F28@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38, a2);
}

void sub_1000F9F4C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623C10, (uint64_t)&unk_100623C38, 6);
}

uint64_t sub_1000F9F74@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80, a2);
}

void sub_1000F9F98(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623C58, (uint64_t)&unk_100623C80, 7);
}

uint64_t sub_1000F9FC0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8, a2);
}

void sub_1000F9FE4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623CA0, (uint64_t)&unk_100623CC8, 9);
}

uint64_t sub_1000FA00C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10, a2);
}

void sub_1000FA030(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623CE8, (uint64_t)&unk_100623D10, 8);
}

uint64_t sub_1000FA058@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58, a2);
}

void sub_1000FA07C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000F9B50(a1, a2, a3, a4, (uint64_t)&unk_100623D30, (uint64_t)&unk_100623D58, 10);
}

uint64_t sub_1000FA0A4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623D78, (uint64_t)&unk_100623DA0, a2);
}

void sub_1000FA0CC()
{
  uint64_t v0;

  sub_1000F8230(v0);
}

uint64_t sub_1000FA0D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000DC554(a1, (uint64_t)&unk_100623DC0, (uint64_t)&unk_100623DE8, a2);
}

uint64_t sub_1000FA0F8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DC604(a1, a2, a3, a4, (uint64_t)&unk_100623DC0, (uint64_t)&unk_100623DE8);
}

uint64_t sub_1000FA11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB54();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_1000FA2D0;
  v20 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100785698;
  v12 = _Block_copy(aBlock);
  v13 = v20;
  swift_retain(v1);
  swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10002FAC0();
  v16 = sub_100047110(&qword_100828C80);
  v17 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

_QWORD *sub_1000FA2E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)a1 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    v16 = a3[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)((char *)a2 + v16 + 24);
    if (v19)
    {
      v20 = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }
    else
    {
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v21;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    }
    v22 = a3[7];
    v23 = a3[8];
    v12 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v12;
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  swift_retain(v12);
  return a1;
}

double sub_1000FA42C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)a1 + a2[5]));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  if (v6[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v6);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[7])).n128_u64[0];
  return result;
}

_QWORD *sub_1000FA4BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = *(_OWORD *)((char *)a2 + v12 + 24);
  *(_OWORD *)((char *)a1 + v12 + 24) = v13;
  (**(void (***)(void))(v13 - 8))();
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a2 + v14 + 24);
  if (v17)
  {
    v18 = *((_QWORD *)v16 + 4);
    *((_QWORD *)v15 + 3) = v17;
    *((_QWORD *)v15 + 4) = v18;
    (**(void (***)(void))(v17 - 8))();
  }
  else
  {
    v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  }
  v20 = a3[7];
  v21 = a3[8];
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  swift_retain(v22);
  return a1;
}

_QWORD *sub_1000FA5E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  sub_1000F1A58((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]));
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 24);
  if (!*(_QWORD *)((char *)a1 + v12 + 24))
  {
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      (**(void (***)(char *, char *))(v15 - 8))(v13, v14);
      goto LABEL_13;
    }
LABEL_12:
    v16 = *(_OWORD *)v14;
    v17 = *((_OWORD *)v14 + 1);
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    *(_OWORD *)v13 = v16;
    *((_OWORD *)v13 + 1) = v17;
    goto LABEL_13;
  }
  if (!v15)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v13);
    goto LABEL_12;
  }
  sub_1000F1A58(v13, v14);
LABEL_13:
  v18 = a3[7];
  v19 = *(_QWORD *)((char *)a2 + v18);
  v20 = *(_QWORD *)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  swift_retain(v19);
  swift_release(v20);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_1000FA750(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
  v13 = &a1[v9];
  v14 = &a2[v9];
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v16] = a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1000FA840(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v8]);
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  v12 = a3[6];
  v13 = &a1[v12];
  if (*(_QWORD *)&a1[v12 + 24])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v12]);
  v14 = *(_OWORD *)&a2[v12 + 16];
  *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
  *((_OWORD *)v13 + 1) = v14;
  *((_QWORD *)v13 + 4) = *(_QWORD *)&a2[v12 + 32];
  v15 = a3[7];
  v16 = *(_QWORD *)&a1[v15];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  swift_release(v16);
  v17 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v17] = a2[v17];
  return a1;
}

uint64_t sub_1000FA974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FA980);
}

uint64_t sub_1000FA980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000FAA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FAA10);
}

uint64_t sub_1000FAA10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DashboardCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_10081FD38;
  if (!qword_10081FD38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DashboardCardView);
  return result;
}

void sub_1000FAACC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_100623E80;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_100623E98;
    v4[5] = &unk_100623E98;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_1000FAB60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB704, 1);
}

uint64_t sub_1000FAB70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  double v17;
  char *v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[40];

  v34 = a1;
  v2 = sub_100047110(&qword_10081FD80);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081FD88);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_10081FD90);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100047110(&qword_10081FD98);
  __chkstk_darwin(v33);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FAEB8(v1, (uint64_t)v7);
  if (qword_10081DBE8 != -1)
    swift_once(&qword_10081DBE8, sub_10038F560);
  v13 = *(double *)&qword_10086A780;
  v14 = (_QWORD *)(v1 + *(int *)(type metadata accessor for DashboardCardView(0) + 20));
  sub_1003F6E18((uint64_t)v4);
  v15 = type metadata accessor for DynamicTypeSize(0);
  v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v4, 0, 1, v15);
  v17 = sub_100514A9C(v14, (uint64_t)v4, v13);
  sub_1000252E0((uint64_t)v14, (uint64_t)v35);
  sub_100514D4C((uint64_t)v35, (uint64_t)v4, v17);
  sub_10001BE90((uint64_t)v35, &qword_100832410);
  sub_10001BE90((uint64_t)v4, &qword_10081FD80);
  sub_100021CC0((uint64_t)v7, (uint64_t)v10, &qword_10081FD88);
  v18 = &v10[*(int *)(v8 + 36)];
  *v18 = 1;
  *((double *)v18 + 1) = v17;
  v18[16] = 0;
  sub_10001BE90((uint64_t)v7, &qword_10081FD88);
  v19 = *(double *)&qword_10086A780;
  sub_1003F6E18((uint64_t)v4);
  v16(v4, 0, 1, v15);
  v20 = sub_100514A9C(v14, (uint64_t)v4, v19);
  sub_1000252E0((uint64_t)v14, (uint64_t)v35);
  v21 = sub_100514D4C((uint64_t)v35, (uint64_t)v4, v20);
  v23 = v22;
  sub_10001BE90((uint64_t)v35, &qword_100832410);
  sub_10001BE90((uint64_t)v4, &qword_10081FD80);
  sub_100021CC0((uint64_t)v10, (uint64_t)v12, &qword_10081FD90);
  v24 = &v12[*(int *)(v33 + 36)];
  *v24 = 1;
  *((_QWORD *)v24 + 1) = v21;
  v24[16] = v23 & 1;
  v25 = sub_10001BE90((uint64_t)v10, &qword_10081FD90);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = v34;
  sub_100021CC0((uint64_t)v12, v34, &qword_10081FD98);
  v30 = (uint64_t *)(v29 + *(int *)(sub_100047110(&qword_10081FDA0) + 36));
  *v30 = v26;
  v30[1] = v28;
  return sub_10001BE90((uint64_t)v12, &qword_10081FD98);
}

uint64_t sub_1000FAEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;

  v108 = a2;
  v110 = sub_100047110(&qword_10081FDA8);
  __chkstk_darwin(v110);
  v96 = (uint64_t)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100047110(&qword_10081FDB0);
  v94 = *(_QWORD *)(v107 - 8);
  v4 = __chkstk_darwin(v107);
  v95 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v93 = (char *)&v88 - v6;
  v102 = sub_100047110(&qword_10081FDB8);
  __chkstk_darwin(v102);
  v90 = (uint64_t *)((char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = sub_100047110(&qword_10081FDC0);
  v92 = *(_QWORD *)(v103 - 8);
  v8 = __chkstk_darwin(v103);
  v89 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v91 = (char *)&v88 - v10;
  v105 = sub_100047110(&qword_10081FDC8);
  __chkstk_darwin(v105);
  v104 = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100047110(&qword_10081FDD0);
  __chkstk_darwin(v100);
  v99 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100047110(&qword_10081FDD8);
  __chkstk_darwin(v106);
  v101 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for AccessibilityChildBehavior(0);
  v14 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100047110(&qword_10081FDE0);
  __chkstk_darwin(v97);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100047110(&qword_10081FDE8);
  v19 = *(_QWORD *)(v98 - 8);
  v20 = __chkstk_darwin(v98);
  v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v88 - v23;
  v25 = (_QWORD *)(a1 + *(int *)(type metadata accessor for DashboardCardView(0) + 20));
  v27 = v25[3];
  v26 = v25[4];
  sub_100016804(v25, v27);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v27, v26);
  v31 = a1;
  if (v30 != 3)
    goto LABEL_6;
  v32 = v24;
  v33 = v14;
  v34 = v19;
  v36 = v109;
  v35 = v110;
  v37 = v95;
  v38 = v96;
  if (__PAIR128__((unint64_t)(v28 >= 3) + v29 - 1, v28 - 3) < 2)
  {
    v39 = sub_1000FBF08(1, v96);
    static AccessibilityChildBehavior.combine.getter(v39);
    v40 = sub_1000FFA24();
    View.accessibilityElement(children:)(v16, v35, v40);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v36);
    sub_10001BE90(v38, &qword_10081FDA8);
    v42 = v93;
    v41 = v94;
    v43 = v107;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v37, v107);
    v44 = v104;
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v104, v42, v43);
    swift_storeEnumTagMultiPayload(v44, v105, 1);
    v45 = sub_1000FF928();
    v111 = v35;
    v112 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    _ConditionalContent<>.init(storage:)(v44, v106, v43, v45, OpaqueTypeConformance2);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  }
  v19 = v34;
  v14 = v33;
  v24 = v32;
  if (v28 ^ 5 | v29)
  {
LABEL_6:
    v70 = sub_1000EB41C(v28, v29, v30);
    *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v70, v71, v72, v73, v74);
    *((_QWORD *)v18 + 1) = 0;
    v18[16] = 0;
    v75 = sub_100047110(&qword_10081FDF0);
    v76 = sub_1000FB6EC(v31, &v18[*(int *)(v75 + 44)]);
    static AccessibilityChildBehavior.combine.getter(v76);
    v77 = sub_100028384(&qword_10081FDF8, &qword_10081FDE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v78 = v97;
    View.accessibilityElement(children:)(v16, v97, v77);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v109);
    sub_10001BE90((uint64_t)v18, &qword_10081FDE0);
    v58 = v98;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v22, v98);
    v79 = v99;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v99, v24, v58);
    swift_storeEnumTagMultiPayload(v79, v100, 0);
    v111 = v78;
    v112 = v77;
    v80 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v81 = sub_100028384(&qword_10081FE00, &qword_10081FDB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v111 = v102;
    v112 = v81;
    v82 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v83 = (uint64_t)v101;
    _ConditionalContent<>.init(storage:)(v79, v58, v103, v80, v82);
    v84 = v104;
    sub_100021CC0(v83, v104, &qword_10081FDD8);
    swift_storeEnumTagMultiPayload(v84, v105, 0);
    v85 = sub_1000FF928();
    v86 = sub_1000FFA24();
    v111 = v110;
    v112 = v86;
    v87 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    _ConditionalContent<>.init(storage:)(v84, v106, v107, v85, v87);
    sub_10001BE90(v83, &qword_10081FDD8);
    v68 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
    v69 = v24;
  }
  else
  {
    v48 = static Alignment.top.getter();
    v49 = (uint64_t)v90;
    *v90 = v48;
    *(_QWORD *)(v49 + 8) = v50;
    v51 = sub_100047110(&qword_10081FFD0);
    v52 = sub_1000FC220(v31, (char *)(v49 + *(int *)(v51 + 44)));
    static AccessibilityChildBehavior.combine.getter(v52);
    v53 = sub_100028384(&qword_10081FE00, &qword_10081FDB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v54 = v89;
    v55 = v102;
    View.accessibilityElement(children:)(v16, v102, v53);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v109);
    sub_10001BE90(v49, &qword_10081FDB8);
    v56 = v92;
    v57 = v91;
    v58 = v103;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v54, v103);
    v59 = v99;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v99, v57, v58);
    swift_storeEnumTagMultiPayload(v59, v100, 1);
    v60 = sub_100028384(&qword_10081FDF8, &qword_10081FDE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v111 = v97;
    v112 = v60;
    v61 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v111 = v55;
    v112 = v53;
    v62 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v63 = (uint64_t)v101;
    _ConditionalContent<>.init(storage:)(v59, v98, v58, v61, v62);
    v64 = v104;
    sub_100021CC0(v63, v104, &qword_10081FDD8);
    swift_storeEnumTagMultiPayload(v64, v105, 0);
    v65 = sub_1000FF928();
    v66 = sub_1000FFA24();
    v111 = v110;
    v112 = v66;
    v67 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    _ConditionalContent<>.init(storage:)(v64, v106, v107, v65, v67);
    sub_10001BE90(v63, &qword_10081FDD8);
    v68 = *(uint64_t (**)(char *, uint64_t))(v56 + 8);
    v69 = v57;
  }
  return v68(v69, v58);
}

uint64_t sub_1000FB6EC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[96];
  __int128 v108;
  __int128 v109;
  char v110;
  _QWORD v111[5];
  _BYTE v112[104];

  v98 = a2;
  v3 = type metadata accessor for AccessibilityActionKind(0);
  v96 = *(_QWORD *)(v3 - 8);
  v97 = v3;
  __chkstk_darwin(v3);
  v93 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_10081FDA8);
  __chkstk_darwin(v5);
  v88 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100047110(&qword_10081FFD8);
  __chkstk_darwin(v90);
  v87 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100047110(&qword_1008200D0);
  __chkstk_darwin(v89);
  v101 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100047110(&qword_1008200D8);
  __chkstk_darwin(v94);
  v91 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100047110(&qword_1008200E0);
  v104 = *(_QWORD *)(v95 - 8);
  v10 = __chkstk_darwin(v95);
  v92 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v103 = (char *)&v76 - v12;
  v13 = type metadata accessor for Divider(0);
  v85 = *(_QWORD *)(v13 - 8);
  v86 = v13;
  __chkstk_darwin(v13);
  v82 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100047110(&qword_10081F618);
  v15 = __chkstk_darwin(v84);
  v99 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v105 = (uint64_t)&v76 - v17;
  v18 = (int *)type metadata accessor for DashboardCardView(0);
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v102 = sub_100047110(&qword_10081F620);
  v106 = *(_QWORD *)(v102 - 8);
  v21 = __chkstk_darwin(v102);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v76 - v24;
  v100 = (char *)&v76 - v24;
  sub_1000252E0(a1 + v18[5], (uint64_t)v111);
  v26 = sub_100021CC0(a1 + v18[6], (uint64_t)v112, &qword_10081F600);
  v112[40] = *(_BYTE *)(a1 + v18[8]);
  LOBYTE(v18) = static Edge.Set.all.getter(v26);
  sub_1000F4B28((uint64_t)v111, (uint64_t)v107);
  v107[88] = (_BYTE)v18;
  v108 = xmmword_100623640;
  v109 = xmmword_100623640;
  v110 = 0;
  sub_1000F4B64(v111);
  sub_100021CC0((uint64_t)v107, (uint64_t)v111, &qword_10081F628);
  v112[89] = 0;
  sub_10001BE90((uint64_t)v107, &qword_10081F628);
  v27 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v27;
  sub_10004F8C8(a1, (uint64_t)v27, type metadata accessor for DashboardCardView);
  v28 = *(unsigned __int8 *)(v19 + 80);
  v29 = ((v28 + 16) & ~v28) + v20;
  v80 = v29;
  v81 = (v28 + 16) & ~v28;
  v30 = v81;
  v31 = v28 | 7;
  v77 = v28 | 7;
  v32 = swift_allocObject(&unk_100785768, v29, v28 | 7);
  sub_100047C88((uint64_t)v27, v32 + v30, type metadata accessor for DashboardCardView);
  v33 = sub_100047110(&qword_10081F630);
  v34 = sub_1000F4D64();
  v83 = v23;
  View.onTapGesture(count:perform:)(1, sub_1001004EC, v32, v33, v34);
  swift_release(v32);
  sub_10001BE90((uint64_t)v111, &qword_10081F630);
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v106 + 32))(v25, v23, v102);
  v36 = v82;
  Divider.init()(v35);
  v37 = objc_msgSend((id)objc_opt_self(UIColor), "quaternarySystemFillColor");
  v38 = Color.init(_:)(v37);
  LOBYTE(v33) = static Edge.Set.all.getter(v38);
  v40 = v85;
  v39 = v86;
  v41 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v99, v36, v86);
  v42 = v41 + *(int *)(v84 + 36);
  *(_QWORD *)v42 = v38;
  *(_BYTE *)(v42 + 8) = v33;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v39);
  sub_100045AD4(v41, v105, &qword_10081F618);
  v43 = v88;
  v44 = a1;
  v78 = a1;
  sub_1000FBF08(0, v88);
  v45 = v87;
  sub_100021CC0(v43, v87, &qword_10081FDA8);
  *(_BYTE *)(v45 + *(int *)(v90 + 36)) = 0;
  v46 = sub_10001BE90(v43, &qword_10081FDA8);
  LOBYTE(v38) = static Edge.Set.all.getter(v46);
  v47 = v101;
  sub_100021CC0(v45, v101, &qword_10081FFD8);
  v48 = v89;
  v49 = v47 + *(int *)(v89 + 36);
  *(_BYTE *)v49 = v38;
  *(_OWORD *)(v49 + 8) = xmmword_100623E10;
  *(_OWORD *)(v49 + 24) = xmmword_100623E20;
  *(_BYTE *)(v49 + 40) = 0;
  sub_10001BE90(v45, &qword_10081FFD8);
  v50 = (uint64_t)v79;
  sub_10004F8C8(v44, (uint64_t)v79, type metadata accessor for DashboardCardView);
  v51 = v80;
  v52 = swift_allocObject(&unk_100785790, v80, v31);
  v53 = v81;
  v54 = sub_100047C88(v50, v52 + v81, type metadata accessor for DashboardCardView);
  v55 = v93;
  static AccessibilityActionKind.default.getter(v54);
  v56 = sub_1000F4518(&qword_1008200E8, &qword_1008200D0, (void (*)(void))sub_100100464);
  v57 = (uint64_t)v91;
  v58 = v101;
  View.accessibilityAction(_:_:)(v55, sub_100100458, v52, v48, v56);
  v59 = swift_release(v52);
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v55, v97, v59);
  sub_10001BE90(v58, &qword_1008200D0);
  sub_10004F8C8(v78, v50, type metadata accessor for DashboardCardView);
  v60 = swift_allocObject(&unk_1007857B8, v51, v77);
  sub_100047C88(v50, v60 + v53, type metadata accessor for DashboardCardView);
  v61 = sub_100100694();
  v62 = v92;
  View.onTapGesture(count:perform:)(1, sub_100100458, v60, v94, v61);
  swift_release(v60);
  sub_10001BE90(v57, &qword_1008200D8);
  v64 = v103;
  v63 = v104;
  v65 = v95;
  (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v62, v95);
  v66 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
  v67 = v83;
  v68 = v102;
  v66(v83, v100, v102);
  v69 = v99;
  sub_100021CC0(v105, v99, &qword_10081F618);
  v70 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v70(v62, v64, v65);
  v71 = v98;
  v66(v98, v67, v68);
  v72 = sub_100047110(&qword_1008200F8);
  sub_100021CC0(v69, (uint64_t)&v71[*(int *)(v72 + 48)], &qword_10081F618);
  v70(&v71[*(int *)(v72 + 64)], v62, v65);
  v73 = *(void (**)(char *, uint64_t))(v104 + 8);
  v73(v103, v65);
  sub_10001BE90(v105, &qword_10081F618);
  v74 = *(void (**)(char *, uint64_t))(v106 + 8);
  v74(v100, v68);
  v73(v62, v65);
  sub_10001BE90(v69, &qword_10081F618);
  return ((uint64_t (*)(char *, uint64_t))v74)(v67, v68);
}

uint64_t sub_1000FBF08@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE v28[4];
  int v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  v3 = sub_100047110(&qword_10081FE30);
  __chkstk_darwin(v3);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100047110(&qword_10081FFF8);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100047110(&qword_10081FE20);
  __chkstk_darwin(v9);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DashboardCardView(0) + 20));
  v13 = v12[3];
  v14 = v12[4];
  sub_100016804(v12, v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 56))(v13, v14);
  if ((v15 & 1) != 0)
  {
    sub_1000FCC4C();
    v21 = &qword_10081FE30;
    sub_100021CC0((uint64_t)v5, (uint64_t)v8, &qword_10081FE30);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v25 = sub_100028384(&qword_10081FE18, &qword_10081FE20, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v26 = sub_1000FFAA8();
    _ConditionalContent<>.init(storage:)(v8, v9, v3, v25, v26);
    v24 = (uint64_t)v5;
  }
  else
  {
    *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v15, v16, v17, v18, v19);
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 0;
    v20 = sub_100047110(&qword_100820000);
    sub_1000FC6BC(v29 & 1, v2, (uint64_t)&v11[*(int *)(v20 + 44)]);
    v21 = &qword_10081FE20;
    sub_100021CC0((uint64_t)v11, (uint64_t)v8, &qword_10081FE20);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    v22 = sub_100028384(&qword_10081FE18, &qword_10081FE20, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v23 = sub_1000FFAA8();
    _ConditionalContent<>.init(storage:)(v8, v9, v3, v22, v23);
    v24 = (uint64_t)v11;
  }
  return sub_10001BE90(v24, v21);
}

uint64_t sub_1000FC158(uint64_t a1, void (*a2)(_QWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD v12[2];
  _QWORD v13[3];
  uint64_t v14;

  v4 = type metadata accessor for DashboardCardView(0);
  sub_100021CC0(a1 + *(int *)(v4 + 24), (uint64_t)v13, &qword_10081F600);
  if (!v14)
    return sub_10001BE90((uint64_t)v13, &qword_10081F600);
  v5 = sub_100016804(v13, v14);
  v6 = (_QWORD *)(a1 + *(int *)(v4 + 20));
  memset(v12, 0, sizeof(v12));
  v7 = *v5;
  v8 = v6[3];
  v9 = v6[4];
  v10 = sub_100016804(v6, v8);
  a2(v10, v12, v7, v8, v9);
  sub_10001BE90((uint64_t)v12, (uint64_t *)&unk_100828420);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v13);
}

uint64_t sub_1000FC220@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[96];
  __int128 v62;
  __int128 v63;
  char v64;
  _QWORD v65[5];
  _BYTE v66[104];

  v57 = a2;
  v56 = sub_100047110(&qword_10081F620);
  v60 = *(_QWORD *)(v56 - 8);
  v3 = __chkstk_darwin(v56);
  v54 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v55 = (char *)&v48 - v5;
  v53 = type metadata accessor for DashboardCardView(0);
  v6 = *(_QWORD *)(v53 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v53);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_10081FDA8);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_10081FFD8);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110(&qword_10081FFE0);
  v58 = *(_QWORD *)(v15 - 8);
  v59 = v15;
  v16 = __chkstk_darwin(v15);
  v49 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v48 - v18;
  v52 = (char *)&v48 - v18;
  sub_1000FBF08(0, (uint64_t)v11);
  sub_100021CC0((uint64_t)v11, (uint64_t)v14, &qword_10081FDA8);
  v14[*(int *)(v12 + 36)] = 0;
  sub_10001BE90((uint64_t)v11, &qword_10081FDA8);
  v50 = v8;
  sub_10004F8C8(a1, (uint64_t)v8, type metadata accessor for DashboardCardView);
  v20 = *(unsigned __int8 *)(v6 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = v21 + v7;
  v51 = v21 + v7;
  v23 = v20 | 7;
  v24 = swift_allocObject(&unk_1007856F0, v22, v20 | 7);
  sub_100047C88((uint64_t)v8, v24 + v21, type metadata accessor for DashboardCardView);
  v25 = sub_100100464();
  v26 = v49;
  View.onTapGesture(count:perform:)(1, sub_100100458, v24, v12, v25);
  swift_release(v24);
  sub_10001BE90((uint64_t)v14, &qword_10081FFD8);
  v27 = v58;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v19, v26, v59);
  v28 = v53;
  sub_1000252E0(a1 + *(int *)(v53 + 20), (uint64_t)v65);
  v29 = sub_100021CC0(a1 + *(int *)(v28 + 24), (uint64_t)v66, &qword_10081F600);
  v66[40] = *(_BYTE *)(a1 + *(int *)(v28 + 32));
  v30 = static Edge.Set.all.getter(v29);
  sub_1000F4B28((uint64_t)v65, (uint64_t)v61);
  v61[88] = v30;
  v62 = xmmword_100623640;
  v63 = xmmword_100623640;
  v64 = 0;
  sub_1000F4B64(v65);
  sub_100021CC0((uint64_t)v61, (uint64_t)v65, &qword_10081F628);
  v66[89] = 0;
  sub_10001BE90((uint64_t)v61, &qword_10081F628);
  v31 = (uint64_t)v50;
  sub_10004F8C8(a1, (uint64_t)v50, type metadata accessor for DashboardCardView);
  v32 = swift_allocObject(&unk_100785718, v51, v23);
  sub_100047C88(v31, v32 + v21, type metadata accessor for DashboardCardView);
  v33 = sub_100047110(&qword_10081F630);
  v34 = sub_1000F4D64();
  v35 = v54;
  View.onTapGesture(count:perform:)(1, sub_1001004EC, v32, v33, v34);
  swift_release(v32);
  sub_10001BE90((uint64_t)v65, &qword_10081F630);
  v36 = v60;
  v38 = v55;
  v37 = v56;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v55, v35, v56);
  v39 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v40 = v52;
  v41 = v59;
  v39(v26, v52, v59);
  v42 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v42(v35, v38, v37);
  v43 = v57;
  v39(v57, v26, v41);
  v44 = sub_100047110(&qword_10081FFF0);
  v42(&v43[*(int *)(v44 + 48)], v35, v37);
  v45 = *(void (**)(char *, uint64_t))(v60 + 8);
  v45(v38, v37);
  v46 = *(void (**)(char *, uint64_t))(v58 + 8);
  v46(v40, v41);
  v45(v35, v37);
  return ((uint64_t (*)(char *, uint64_t))v46)(v26, v41);
}

uint64_t sub_1000FC6BC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[11];
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  _QWORD v72[5];
  char v73[8];
  uint64_t v74;
  char v75;
  char v76;
  char v77[9];

  v66 = a2;
  v64 = a3;
  v4 = type metadata accessor for Divider(0);
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  __chkstk_darwin(v4);
  v57 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100047110(&qword_10081F618);
  v6 = __chkstk_darwin(v58);
  v59 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v54 - v8;
  v65 = type metadata accessor for DashboardCardView(0);
  v10 = *(_QWORD *)(v65 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v65);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100047110(&qword_10081F620);
  v13 = *(_QWORD *)(v62 - 8);
  v14 = __chkstk_darwin(v62);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v54 - v17;
  v19 = sub_100047110(&qword_100820008);
  v20 = __chkstk_darwin(v19);
  v63 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v54 - v22;
  if ((a1 & 1) != 0)
  {
    v55 = v9;
    v56 = (char *)&v54 - v22;
    v25 = v65;
    v24 = v66;
    sub_1000252E0(v66 + *(int *)(v65 + 20), (uint64_t)v72);
    v26 = sub_100021CC0(v24 + *(int *)(v25 + 24), (uint64_t)v73, &qword_10081F600);
    v75 = *(_BYTE *)(v24 + *(int *)(v25 + 32));
    v27 = static Edge.Set.all.getter(v26);
    sub_1000F4B28((uint64_t)v72, (uint64_t)v67);
    v68 = v27;
    v69 = xmmword_100623640;
    v70 = xmmword_100623640;
    v71 = 0;
    sub_1000F4B64(v72);
    sub_100021CC0((uint64_t)v67, (uint64_t)v72, &qword_10081F628);
    v76 = 0;
    sub_10001BE90((uint64_t)v67, &qword_10081F628);
    sub_10004F8C8(v24, (uint64_t)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DashboardCardView);
    v28 = *(unsigned __int8 *)(v10 + 80);
    v29 = (v28 + 16) & ~v28;
    v30 = swift_allocObject(&unk_100785740, v29 + v11, v28 | 7);
    sub_100047C88((uint64_t)v12, v30 + v29, type metadata accessor for DashboardCardView);
    v31 = sub_100047110(&qword_10081F630);
    v32 = sub_1000F4D64();
    View.onTapGesture(count:perform:)(1, sub_1001004EC, v30, v31, v32);
    swift_release(v30);
    sub_10001BE90((uint64_t)v72, &qword_10081F630);
    v54 = v13;
    v33 = v18;
    v34 = v62;
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v18, v16, v62);
    v36 = v57;
    Divider.init()(v35);
    v37 = objc_msgSend((id)objc_opt_self(UIColor), "quaternarySystemFillColor");
    v38 = Color.init(_:)(v37);
    LOBYTE(v30) = static Edge.Set.all.getter(v38);
    v39 = (uint64_t)v59;
    v40 = v60;
    v41 = v61;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v59, v36, v61);
    v42 = v39 + *(int *)(v58 + 36);
    *(_QWORD *)v42 = v38;
    *(_BYTE *)(v42 + 8) = v30;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v41);
    v43 = (uint64_t)v55;
    sub_100045AD4(v39, (uint64_t)v55, &qword_10081F618);
    v44 = v54;
    v45 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v45(v16, v33, v34);
    sub_100021CC0(v43, v39, &qword_10081F618);
    v46 = (uint64_t)v63;
    v45(v63, v16, v34);
    v47 = sub_100047110((uint64_t *)&unk_10081F660);
    sub_100021CC0(v39, v46 + *(int *)(v47 + 48), &qword_10081F618);
    sub_10001BE90(v43, &qword_10081F618);
    v48 = *(void (**)(char *, uint64_t))(v44 + 8);
    v48(v33, v34);
    sub_10001BE90(v39, &qword_10081F618);
    v48(v16, v34);
    v49 = sub_100047110(&qword_100820010);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v46, 0, 1, v49);
    v23 = v56;
    sub_100045AD4(v46, (uint64_t)v56, &qword_100820008);
  }
  else
  {
    v50 = sub_100047110(&qword_100820010);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v23, 1, 1, v50);
    v46 = (uint64_t)v63;
  }
  sub_1000252E0(v66 + *(int *)(v65 + 20), (uint64_t)v72);
  v77[0] = 1;
  State.init(wrappedValue:)(v67, v77, &type metadata for Bool);
  v73[0] = v67[0];
  v74 = v67[1];
  sub_100021CC0((uint64_t)v23, v46, &qword_100820008);
  sub_1001004F8((uint64_t)v72, (uint64_t)v67);
  v51 = v64;
  sub_100021CC0(v46, v64, &qword_100820008);
  v52 = sub_100047110(&qword_100820018);
  sub_1001004F8((uint64_t)v67, v51 + *(int *)(v52 + 48));
  sub_100100534(v72);
  sub_10001BE90((uint64_t)v23, &qword_100820008);
  sub_100100534(v67);
  return sub_10001BE90(v46, &qword_100820008);
}

uint64_t sub_1000FCC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  unint64_t v24;

  v1 = sub_100047110(&qword_10081FE40);
  __chkstk_darwin(v1);
  v3 = (char *)&v21[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FCDEC(v0, (uint64_t)v3);
  v4 = sub_100047110(&qword_100820020);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v5 + 32) = static FitnessAccessibilityIdentifier.SummaryView.base.getter();
  *(_QWORD *)(v5 + 40) = v6;
  v23 = 0;
  v24 = 0xE000000000000000;
  v7 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DashboardCardView(0) + 20));
  v8 = v7[3];
  v9 = v7[4];
  sub_100016804(v7, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v12 = v11;
  LOBYTE(v9) = v13;
  v21[0] = v10;
  v21[1] = v11;
  v22 = v13;
  _print_unlocked<A, B>(_:_:)(v21, &v23, &type metadata for CardType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_1000EB41C(v10, v12, v9);
  v14 = v24;
  *(_QWORD *)(v5 + 48) = v23;
  *(_QWORD *)(v5 + 56) = v14;
  v15 = static FitnessAccessibilityIdentifier.build(_:)(v5);
  v17 = v16;
  swift_bridgeObjectRelease(v5);
  v18 = sub_1000E1A9C(&qword_10081FE38, &qword_10081FE40, (void (*)(void))sub_1000FFB44);
  View.accessibilityIdentifier(_:)(v15, v17, v1, v18);
  swift_bridgeObjectRelease(v17);
  return sub_10001BE90((uint64_t)v3, &qword_10081FE40);
}

