void sub_1000FCDEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v91[6];
  uint64_t CardView;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t Card;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t View;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;

  v217 = a2;
  v184 = type metadata accessor for MetricCardView(0);
  v182 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v166 = (char *)v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100820028);
  __chkstk_darwin(v4);
  v181 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for MetricCard(0);
  v179 = *(_QWORD *)(v180 - 8);
  v6 = __chkstk_darwin(v180);
  v165 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v164 = (char *)v91 - v8;
  v211 = sub_100047110(&qword_10081FFC0);
  __chkstk_darwin(v211);
  v183 = (char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100047110(&qword_100820030);
  __chkstk_darwin(v209);
  v210 = (char *)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100047110(&qword_10081FF98);
  __chkstk_darwin(v216);
  v212 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for TrendsCardView(0);
  v193 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v171 = (char *)v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100820038);
  __chkstk_darwin(v13);
  v192 = (char *)v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for TrendsCard(0);
  v190 = *(_QWORD *)(v191 - 8);
  v15 = __chkstk_darwin(v191);
  v170 = (char *)v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v169 = (char *)v91 - v17;
  v208 = sub_100047110(&qword_10081FFA8);
  __chkstk_darwin(v208);
  v194 = (char *)v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for CatalogTipCardView(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v108 = (char *)v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100047110(&qword_100820040);
  __chkstk_darwin(v20);
  v138 = (char *)v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for CatalogTipCard(0);
  v135 = *(_QWORD *)(v137 - 8);
  v22 = __chkstk_darwin(v137);
  v106 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v105 = (char *)v91 - v24;
  v158 = sub_100047110(&qword_10081FF80);
  __chkstk_darwin(v158);
  v144 = (char *)v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100047110(&qword_100820048);
  __chkstk_darwin(v156);
  v157 = (char *)v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100047110(&qword_10081FF58);
  __chkstk_darwin(v200);
  v159 = (char *)v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  View = type metadata accessor for FitnessPlusUpNextView(0);
  v139 = *(_QWORD *)(View - 8);
  __chkstk_darwin(View);
  v107 = (char *)v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100047110(&qword_100820050);
  __chkstk_darwin(v29);
  v132 = (char *)v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  Card = type metadata accessor for FitnessPlusUpNextCard(0);
  v130 = *(_QWORD *)(Card - 8);
  v31 = __chkstk_darwin(Card);
  v103 = (char *)v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v104 = (char *)v91 - v33;
  v155 = sub_100047110(&qword_10081FF68);
  __chkstk_darwin(v155);
  v143 = (char *)v91 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for FriendsHighlightCardView(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v102 = (char *)v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100047110(&qword_100820058);
  __chkstk_darwin(v36);
  v128 = (char *)v91 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for FriendsHighlightCard(0);
  v124 = *(_QWORD *)(v127 - 8);
  v38 = __chkstk_darwin(v127);
  v101 = (char *)v91 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v100 = (char *)v91 - v40;
  v188 = sub_100047110(&qword_10081FF40);
  __chkstk_darwin(v188);
  v136 = (char *)v91 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100047110(&qword_100820060);
  __chkstk_darwin(v196);
  v198 = (char *)v91 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100047110(&qword_100820068);
  __chkstk_darwin(v186);
  v187 = (char *)v91 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100047110(&qword_10081FF18);
  __chkstk_darwin(v197);
  v189 = (char *)v91 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100047110(&qword_10081FF08);
  __chkstk_darwin(v205);
  v199 = (char *)v91 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100047110(&qword_100820070);
  __chkstk_darwin(v46);
  v177 = (char *)v91 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for FriendCard(0);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v160 = (char *)v91 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100047110(&qword_10081FF28);
  __chkstk_darwin(v185);
  v178 = (char *)v91 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100047110(&qword_10081F430);
  v50 = __chkstk_darwin(v99);
  v98 = (char *)v91 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v97 = (char *)v91 - v52;
  v126 = type metadata accessor for AwardsCardView(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v96 = (char *)v91 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100047110(&qword_100820078);
  __chkstk_darwin(v54);
  v120 = (char *)v91 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for AwardsCard(0);
  v117 = *(_QWORD *)(v118 - 8);
  v56 = __chkstk_darwin(v118);
  v94 = (char *)v91 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v95 = (char *)v91 - v58;
  v153 = sub_100047110(&qword_10081FEF0);
  __chkstk_darwin(v153);
  v129 = (char *)v91 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100047110(&qword_100820080);
  __chkstk_darwin(v151);
  v152 = (char *)v91 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100047110(&qword_10081FEC8);
  __chkstk_darwin(v168);
  v154 = (char *)v91 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for HistoryItemsCardView(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v91[4] = (char *)v91 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100047110(&qword_10081FED8);
  __chkstk_darwin(v150);
  v122 = (char *)v91 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  CardView = type metadata accessor for LoadCardView(0);
  __chkstk_darwin(CardView);
  v93 = (char *)v91 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100047110(&qword_100820088);
  v119 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v91[5] = (char *)v91 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100047110(&qword_100820090);
  __chkstk_darwin(v66);
  v113 = (char *)v91 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for LoadCard(0);
  v111 = *(_QWORD *)(v114 - 8);
  v68 = __chkstk_darwin(v114);
  v91[2] = (char *)v91 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v91[3] = (char *)v91 - v70;
  v149 = sub_100047110(&qword_10081FEA8);
  __chkstk_darwin(v149);
  v123 = (char *)v91 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100047110(&qword_100820098);
  __chkstk_darwin(v213);
  v215 = (char *)v91 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100047110(&qword_1008200A0);
  __chkstk_darwin(v201);
  v203 = (char *)v91 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100047110(&qword_1008200A8);
  __chkstk_darwin(v161);
  v163 = (char *)v91 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100047110(&qword_1008200B0);
  __chkstk_darwin(v146);
  v147 = (char *)v91 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100047110(&qword_10081FE80);
  __chkstk_darwin(v162);
  v148 = (char *)v91 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100047110(&qword_10081FE70);
  __chkstk_darwin(v202);
  v167 = (char *)v91 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100047110(&qword_10081FE60);
  __chkstk_darwin(v214);
  v204 = (char *)v91 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100047110(&qword_10081FD80);
  __chkstk_darwin(v79);
  v174 = (char *)v91 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for DynamicTypeSize(0);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v91[1] = (char *)v91 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for ActivityRingsCardView(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v82 = sub_100047110(&qword_1008200B8);
  __chkstk_darwin(v82);
  v83 = type metadata accessor for ActivityRingsCard(0);
  v84 = __chkstk_darwin(v83);
  __chkstk_darwin(v84);
  v145 = sub_100047110(&qword_10081FE90);
  __chkstk_darwin(v145);
  v112 = (char *)v91 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for DashboardCardView(0);
  v86 = *(int *)(v206 + 20);
  v207 = a1;
  v87 = (_QWORD *)(a1 + v86);
  v89 = v87[3];
  v88 = v87[4];
  sub_100016804(v87, v89);
  (*(void (**)(uint64_t, uint64_t))(v88 + 16))(v89, v88);
  __asm { BR              X10 }
}

uint64_t sub_1000FDFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  sub_1000252E0(v0, v1 - 144);
  v2 = sub_100047110(&qword_1008200C0);
  v3 = *(_QWORD *)(v1 - 488);
  v4 = *(_QWORD *)(v1 - 496);
  v5 = swift_dynamicCast(v3, v1 - 144, v2, v4, 6);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 504) + 56);
  if ((v5 & 1) != 0)
  {
    v6(v3, 0, 1, v4);
    v7 = *(_QWORD *)(v1 - 624);
    sub_100047C88(v3, v7, type metadata accessor for MetricCard);
    v8 = *(_QWORD *)(v1 - 616);
    sub_10004F8C8(v7, v8, type metadata accessor for MetricCard);
    v9 = *(_BYTE *)(v7 + *(int *)(v4 + 40));
    sub_100021CC0(*(_QWORD *)(v1 - 280) + *(int *)(*(_QWORD *)(v1 - 288) + 24), v1 - 144, &qword_10081F600);
    v10 = *(_QWORD **)(v1 - 608);
    sub_1005293E0(v8, v9, v1 - 144, v10);
    sub_100011F54(v7, type metadata accessor for MetricCard);
    v11 = *(_QWORD *)(v1 - 472);
    sub_100047C88((uint64_t)v10, v11, type metadata accessor for MetricCardView);
    v12 = 0;
  }
  else
  {
    v12 = 1;
    v6(v3, 1, 1, v4);
    sub_10001BE90(v3, &qword_100820028);
    v11 = *(_QWORD *)(v1 - 472);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 - 480) + 56))(v11, v12, 1, *(_QWORD *)(v1 - 464));
  v13 = *(_QWORD *)(v1 - 256);
  sub_100021CC0(v11, v13, &qword_10081FFC0);
  swift_storeEnumTagMultiPayload(v13, *(_QWORD *)(v1 - 264), 1);
  v14 = sub_10010035C();
  v15 = sub_1001003D8();
  v16 = *(_QWORD *)(v1 - 240);
  _ConditionalContent<>.init(storage:)(v13, *(_QWORD *)(v1 - 272), *(_QWORD *)(v1 - 248), v14, v15);
  v17 = *(_QWORD *)(v1 - 216);
  sub_100021CC0(v16, v17, &qword_10081FF98);
  swift_storeEnumTagMultiPayload(v17, *(_QWORD *)(v1 - 232), 1);
  v18 = sub_1000FFBB0();
  v19 = sub_1001002F0();
  _ConditionalContent<>.init(storage:)(v17, *(_QWORD *)(v1 - 224), *(_QWORD *)(v1 - 208), v18, v19);
  sub_10001BE90(v16, &qword_10081FF98);
  return sub_10001BE90(v11, &qword_10081FFC0);
}

unint64_t sub_1000FF928()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_10081FE08;
  if (!qword_10081FE08)
  {
    v1 = sub_100007050(&qword_10081FDD8);
    v4 = sub_100007050(&qword_10081FDE0);
    v5 = sub_100028384(&qword_10081FDF8, &qword_10081FDE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v2 = sub_100007050(&qword_10081FDB8);
    v3 = sub_100028384(&qword_10081FE00, &qword_10081FDB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE08);
  }
  return result;
}

unint64_t sub_1000FFA24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE10;
  if (!qword_10081FE10)
  {
    v1 = sub_100007050(&qword_10081FDA8);
    sub_100028384(&qword_10081FE18, &qword_10081FE20, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000FFAA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE10);
  }
  return result;
}

unint64_t sub_1000FFAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE28;
  if (!qword_10081FE28)
  {
    v1 = sub_100007050(&qword_10081FE30);
    sub_1000E1A9C(&qword_10081FE38, &qword_10081FE40, (void (*)(void))sub_1000FFB44);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE28);
  }
  return result;
}

unint64_t sub_1000FFB44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE48;
  if (!qword_10081FE48)
  {
    v1 = sub_100007050(&qword_10081FE50);
    sub_1000FFBB0();
    sub_1001002F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE48);
  }
  return result;
}

unint64_t sub_1000FFBB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE58;
  if (!qword_10081FE58)
  {
    v1 = sub_100007050(&qword_10081FE60);
    sub_1000FFC1C();
    sub_1000FFFBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE58);
  }
  return result;
}

unint64_t sub_1000FFC1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE68;
  if (!qword_10081FE68)
  {
    v1 = sub_100007050(&qword_10081FE70);
    sub_1000FFC88();
    sub_1000FFE58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE68);
  }
  return result;
}

unint64_t sub_1000FFC88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE78;
  if (!qword_10081FE78)
  {
    v1 = sub_100007050(&qword_10081FE80);
    sub_1000FFCF4();
    sub_1000FFD70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE78);
  }
  return result;
}

unint64_t sub_1000FFCF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FE88;
  if (!qword_10081FE88)
  {
    v1 = sub_100007050(&qword_10081FE90);
    sub_1000083D8(&qword_10081FE98, type metadata accessor for ActivityRingsCardView, (uint64_t)&unk_10063C130);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FE88);
  }
  return result;
}

unint64_t sub_1000FFD70()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10081FEA0;
  if (!qword_10081FEA0)
  {
    v1 = sub_100007050(&qword_10081FEA8);
    v2[0] = type metadata accessor for LoadCardView(255);
    v2[1] = type metadata accessor for BalanceDataProvider(255);
    v2[2] = sub_1000083D8(&qword_10081FEB0, type metadata accessor for LoadCardView, (uint64_t)&unk_1006471B8);
    v2[3] = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FEA0);
  }
  return result;
}

unint64_t sub_1000FFE58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FEC0;
  if (!qword_10081FEC0)
  {
    v1 = sub_100007050(&qword_10081FEC8);
    sub_1000FFEC4();
    sub_1000FFF40();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FEC0);
  }
  return result;
}

unint64_t sub_1000FFEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FED0;
  if (!qword_10081FED0)
  {
    v1 = sub_100007050(&qword_10081FED8);
    sub_1000083D8(&qword_10081FEE0, type metadata accessor for HistoryItemsCardView, (uint64_t)&unk_10062BF90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FED0);
  }
  return result;
}

unint64_t sub_1000FFF40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FEE8;
  if (!qword_10081FEE8)
  {
    v1 = sub_100007050(&qword_10081FEF0);
    sub_1000083D8(&qword_10081FEF8, type metadata accessor for AwardsCardView, (uint64_t)&unk_1006236B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FEE8);
  }
  return result;
}

unint64_t sub_1000FFFBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF00;
  if (!qword_10081FF00)
  {
    v1 = sub_100007050(&qword_10081FF08);
    sub_100100028();
    sub_10010018C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF00);
  }
  return result;
}

unint64_t sub_100100028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF10;
  if (!qword_10081FF10)
  {
    v1 = sub_100007050(&qword_10081FF18);
    sub_100100094();
    sub_100100110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF10);
  }
  return result;
}

unint64_t sub_100100094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF20;
  if (!qword_10081FF20)
  {
    v1 = sub_100007050(&qword_10081FF28);
    sub_1000083D8(&qword_10081FF30, type metadata accessor for FriendCardView, (uint64_t)&unk_10062CA40);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF20);
  }
  return result;
}

unint64_t sub_100100110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF38;
  if (!qword_10081FF38)
  {
    v1 = sub_100007050(&qword_10081FF40);
    sub_1000083D8(&qword_10081FF48, type metadata accessor for FriendsHighlightCardView, (uint64_t)&unk_100646CF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF38);
  }
  return result;
}

unint64_t sub_10010018C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF50;
  if (!qword_10081FF50)
  {
    v1 = sub_100007050(&qword_10081FF58);
    sub_1001001F8();
    sub_100100274();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF50);
  }
  return result;
}

unint64_t sub_1001001F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF60;
  if (!qword_10081FF60)
  {
    v1 = sub_100007050(&qword_10081FF68);
    sub_1000083D8(&qword_10081FF70, type metadata accessor for FitnessPlusUpNextView, (uint64_t)&unk_10063BA34);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF60);
  }
  return result;
}

unint64_t sub_100100274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF78;
  if (!qword_10081FF78)
  {
    v1 = sub_100007050(&qword_10081FF80);
    sub_1000083D8(&qword_10081FF88, type metadata accessor for CatalogTipCardView, (uint64_t)&unk_100648CC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF78);
  }
  return result;
}

unint64_t sub_1001002F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FF90;
  if (!qword_10081FF90)
  {
    v1 = sub_100007050(&qword_10081FF98);
    sub_10010035C();
    sub_1001003D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FF90);
  }
  return result;
}

unint64_t sub_10010035C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FFA0;
  if (!qword_10081FFA0)
  {
    v1 = sub_100007050(&qword_10081FFA8);
    sub_1000083D8(&qword_10081FFB0, type metadata accessor for TrendsCardView, (uint64_t)&unk_100647FF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FFA0);
  }
  return result;
}

unint64_t sub_1001003D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FFB8;
  if (!qword_10081FFB8)
  {
    v1 = sub_100007050(&qword_10081FFC0);
    sub_1000083D8(&qword_10081FFC8, type metadata accessor for MetricCardView, (uint64_t)&unk_100643E00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10081FFB8);
  }
  return result;
}

uint64_t sub_100100458()
{
  return sub_100100654((void (*)(_QWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))sub_100561D50);
}

unint64_t sub_100100464()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081FFE8;
  if (!qword_10081FFE8)
  {
    v1 = sub_100007050(&qword_10081FFD8);
    sub_1000FFA24();
    sub_100028384(&qword_10081F650, &qword_10081F658, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10081FFE8);
  }
  return result;
}

uint64_t sub_1001004EC()
{
  return sub_100100654((void (*)(_QWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))sub_100562CC8);
}

uint64_t sub_1001004F8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DashboardCardProgressView(a2, a1);
  return a2;
}

_QWORD *sub_100100534(_QWORD *a1)
{
  destroy for DashboardCardProgressView(a1);
  return a1;
}

uint64_t sub_100100580()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (int *)type metadata accessor for DashboardCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)v6 + v1[5]));
  v9 = (_QWORD *)((char *)v6 + v1[6]);
  if (v9[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
  swift_release(*(_QWORD *)((char *)v6 + v1[7]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100100654(void (*a1)(_QWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DashboardCardView(0) - 8) + 80);
  return sub_1000FC158(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_100100694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008200F0;
  if (!qword_1008200F0)
  {
    v1 = sub_100007050(&qword_1008200D8);
    sub_1000F4518(&qword_1008200E8, &qword_1008200D0, (void (*)(void))sub_100100464);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008200F0);
  }
  return result;
}

unint64_t sub_100100734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820100;
  if (!qword_100820100)
  {
    v1 = sub_100007050(&qword_10081FDA0);
    sub_1001007B8();
    sub_100028384(&qword_100820140, &qword_100820148, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820100);
  }
  return result;
}

unint64_t sub_1001007B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820108;
  if (!qword_100820108)
  {
    v1 = sub_100007050(&qword_10081FD98);
    sub_100100824();
    sub_100100988();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820108);
  }
  return result;
}

unint64_t sub_100100824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820110;
  if (!qword_100820110)
  {
    v1 = sub_100007050(&qword_10081FD90);
    sub_1000E1A9C(&qword_100820118, &qword_10081FD88, (void (*)(void))sub_1001008A8);
    sub_100100944();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820110);
  }
  return result;
}

unint64_t sub_1001008A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100820120;
  if (!qword_100820120)
  {
    v1 = sub_100007050(&qword_100820128);
    sub_1000FF928();
    v2[0] = sub_100007050(&qword_10081FDA8);
    v2[1] = sub_1000FFA24();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820120);
  }
  return result;
}

unint64_t sub_100100944()
{
  unint64_t result;

  result = qword_100820130;
  if (!qword_100820130)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConditionalFrameWidthModifier, &type metadata for ConditionalFrameWidthModifier);
    atomic_store(result, (unint64_t *)&qword_100820130);
  }
  return result;
}

unint64_t sub_100100988()
{
  unint64_t result;

  result = qword_100820138;
  if (!qword_100820138)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConditionalFrameHeightModifier, &type metadata for ConditionalFrameHeightModifier);
    atomic_store(result, (unint64_t *)&qword_100820138);
  }
  return result;
}

unint64_t sub_1001009D0()
{
  unint64_t result;

  result = qword_100820150;
  if (!qword_100820150)
  {
    result = swift_getWitnessTable(&unk_100623F90, &type metadata for OpenHistoryIntent.HistoryFilterOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_100820150);
  }
  return result;
}

unint64_t sub_100100A18()
{
  unint64_t result;

  result = qword_100820158;
  if (!qword_100820158)
  {
    result = swift_getWitnessTable(&unk_100629D90, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100820158);
  }
  return result;
}

unint64_t sub_100100A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820160;
  if (!qword_100820160)
  {
    v1 = sub_100007050(qword_100820168);
    sub_100100A18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100820160);
  }
  return result;
}

uint64_t sub_100100AC4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100008398(v0, qword_100869CB0);
  sub_10003CE9C(v0, (uint64_t)qword_100869CB0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x8000000100688B90);
}

uint64_t sub_100100B24()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_100047110(&qword_100820218);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110(&qword_100820220);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100100F90();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1, &type metadata for OpenHistoryIntent, v6);
  v7._object = (void *)0x8000000100688B70;
  v7._countAndFlagsBits = 0xD000000000000019;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100624180);
  v9 = sub_100047110(&qword_100820228);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenHistoryIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenHistoryIntent, v6);
}

uint64_t sub_100100C8C()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_100100CAC()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100100CE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_100820234);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100100D3C;
  return swift_task_switch(sub_1001014E4, 0, 0);
}

uint64_t sub_100100D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100100D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000DA0E4;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_100100E0C()
{
  unint64_t result;

  result = qword_100820180;
  if (!qword_100820180)
  {
    result = swift_getWitnessTable(&unk_10062402C, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_100820180);
  }
  return result;
}

unint64_t sub_100100E54()
{
  unint64_t result;

  result = qword_100820188;
  if (!qword_100820188)
  {
    result = swift_getWitnessTable(&unk_100629C78, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100820188);
  }
  return result;
}

_QWORD *sub_100100E98@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;
  __int16 v3;
  uint64_t v4;
  __int16 v5;

  result = IntentParameter.wrappedValue.getter(&v4);
  v3 = v5;
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_100100ED8(uint64_t *a1)
{
  __int16 v1;
  uint64_t v3;
  __int16 v4;

  v1 = *((_WORD *)a1 + 4);
  v3 = *a1;
  v4 = v1;
  return IntentParameter.wrappedValue.setter(&v3);
}

void (*sub_100100F14(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100100F5C;
}

void sub_100100F5C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_100100F90()
{
  unint64_t result;

  result = qword_100820190;
  if (!qword_100820190)
  {
    result = swift_getWitnessTable(&unk_100624054, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_100820190);
  }
  return result;
}

uint64_t sub_100100FD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1001019EC();
  v5 = sub_100101A74();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_10010102C()
{
  unint64_t result;

  result = qword_100820198;
  if (!qword_100820198)
  {
    result = swift_getWitnessTable(&unk_1006240E4, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_100820198);
  }
  return result;
}

unint64_t sub_100101074()
{
  unint64_t result;

  result = qword_1008201A0;
  if (!qword_1008201A0)
  {
    result = swift_getWitnessTable(&unk_10062410C, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_1008201A0);
  }
  return result;
}

unint64_t sub_1001010BC()
{
  unint64_t result;

  result = qword_1008201A8;
  if (!qword_1008201A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1008201A8);
  }
  return result;
}

uint64_t sub_100101100(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB76C, 1);
}

uint64_t sub_100101110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D520 != -1)
    swift_once(&qword_10081D520, sub_100100AC4);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869CB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100101180(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001019EC();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_1001011B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_1001019EC();
  v6 = sub_100101A30();
  v7 = sub_100101A74();
  *v4 = v2;
  v4[1] = sub_10010123C;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_10010123C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_100101298@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100101698();
  *a1 = result;
  return result;
}

uint64_t sub_1001012BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100100F90();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenHistoryIntent()
{
  return &type metadata for OpenHistoryIntent;
}

uint64_t destroy for CatalogTipCardFactory(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s10FitnessApp21CatalogTipCardFactoryVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for CatalogTipCardFactory(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for CatalogTipCardFactory(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceDataProvider.WorkoutAndActivityKey(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceDataProvider.WorkoutAndActivityKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenHistoryIntent.HistoryFilterOptionsProvider()
{
  return &type metadata for OpenHistoryIntent.HistoryFilterOptionsProvider;
}

unint64_t sub_100101484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008201B8;
  if (!qword_1008201B8)
  {
    v1 = sub_100007050(&qword_1008201C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentParameterSummary<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1008201B8);
  }
  return result;
}

uint64_t sub_1001014D0()
{
  return swift_task_switch(sub_1001014E4, 0, 0);
}

uint64_t sub_1001014E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  sub_100047110(&qword_1008201E0);
  v1 = type metadata accessor for AppDependencyManager(0);
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v2 = static AppDependencyManager.shared.getter(v1);
  v0[2] = AppDependency.__allocating_init(key:manager:)(&v9, v2);
  v3 = sub_100047110(&qword_100820238);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  v5 = AppDependency.__allocating_init(key:manager:)(&v9, v4);
  v0[3] = v5;
  v8 = (uint64_t (*)(uint64_t))((char *)&dword_10082C480 + dword_10082C480);
  v6 = (_QWORD *)swift_task_alloc(unk_10082C484);
  v0[4] = v6;
  *v6 = v0;
  v6[1] = sub_1001015C8;
  return v8(v5);
}

uint64_t sub_1001015C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *v2;
  *(_QWORD *)(v5 + 40) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10010165C, 0, 0);
  v7 = *(_QWORD *)(v5 + 24);
  swift_release(*(_QWORD *)(v5 + 16));
  v8 = swift_release(v7);
  return (*(uint64_t (**)(uint64_t, __n128))(v5 + 8))(a1, v8);
}

uint64_t sub_10010165C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101698()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;

  v28 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110(&qword_1008201C8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  v9 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100047110(&qword_1008201D8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x8000000100688B10);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100688B40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v32 = 0;
  v33 = 512;
  v16 = type metadata accessor for IntentDialog(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v8, 1, 1, v16);
  v17(v6, 1, 1, v16);
  sub_100047110(&qword_1008201E0);
  v18 = type metadata accessor for AppDependencyManager(0);
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  v19 = static AppDependencyManager.shared.getter(v18);
  v20 = AppDependency.__allocating_init(key:manager:)(&v29, v19);
  v21 = sub_100047110(&qword_1008201E8);
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v22 = static AppDependencyManager.shared.getter(v21);
  v23 = AppDependency.__allocating_init(key:manager:)(&v29, v22);
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v23;
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v28);
  v24 = sub_100101964();
  v25 = sub_1001019A8();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v15, v11, &v32, v8, v6, v2, &v29, &type metadata for OpenHistoryIntent.HistoryFilterOptionsProvider, v24, v25);
}

unint64_t sub_100101964()
{
  unint64_t result;

  result = qword_1008201F0;
  if (!qword_1008201F0)
  {
    result = swift_getWitnessTable(&unk_100623F30, &type metadata for OpenHistoryIntent.HistoryFilterOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_1008201F0);
  }
  return result;
}

unint64_t sub_1001019A8()
{
  unint64_t result;

  result = qword_1008201F8;
  if (!qword_1008201F8)
  {
    result = swift_getWitnessTable(&unk_100629BE8, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_1008201F8);
  }
  return result;
}

unint64_t sub_1001019EC()
{
  unint64_t result;

  result = qword_100820200;
  if (!qword_100820200)
  {
    result = swift_getWitnessTable(&unk_100623FAC, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_100820200);
  }
  return result;
}

unint64_t sub_100101A30()
{
  unint64_t result;

  result = qword_100820208;
  if (!qword_100820208)
  {
    result = swift_getWitnessTable(&unk_100623FFC, &type metadata for OpenHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_100820208);
  }
  return result;
}

unint64_t sub_100101A74()
{
  unint64_t result;

  result = qword_100820210;
  if (!qword_100820210)
  {
    result = swift_getWitnessTable(&unk_100629C40, &type metadata for HistoryFilterEntity);
    atomic_store(result, (unint64_t *)&qword_100820210);
  }
  return result;
}

uint64_t sub_100101AB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

id sub_100101B28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutActivityCacheContainer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutActivityCacheContainer()
{
  return objc_opt_self(_TtC10FitnessApp29WorkoutActivityCacheContainer);
}

uint64_t sub_100101B88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1006243F8);
  v2 = swift_getKeyPath(&unk_100624420);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100101BF8()
{
  return sub_100101C84((uint64_t)&unk_100624368, (uint64_t)&unk_100624390);
}

uint64_t sub_100101C0C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100624248);
  v4 = swift_getKeyPath(&unk_100624270);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100101C70()
{
  return sub_100101C84((uint64_t)&unk_100624290, (uint64_t)&unk_1006242B8);
}

uint64_t sub_100101C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100101CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = sub_100047110(&qword_10081E650);
  v3[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100101D48, 0, 0);
}

uint64_t sub_100101D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = swift_allocObject(&unk_100785A08, 24, 7);
  swift_weakInit(v4 + 16, v2);
  v5 = (_QWORD *)swift_allocObject(&unk_100785A30, 40, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  sub_1004C6CF4(v1, (uint64_t)&unk_100820558, (uint64_t)v5);
  sub_10001BE90(v1, &qword_10081E650);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_100101E28, 0, 0);
}

uint64_t sub_100101E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1001026B8();
    v3 = swift_release(v4);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

uint64_t sub_100101E88(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  id v29;
  uint64_t KeyPath;
  uint64_t v31;
  void *v32;
  id v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  NSString v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  id v69;
  NSString v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  NSString v77;
  id v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v92;
  char *v93;
  id v94;
  void *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  id v103;

  v3 = v2;
  v96 = a1;
  v5 = sub_100047110(&qword_1008202F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v92 = (char *)&v92 - v9;
  v10 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v10);
  v93 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v92 - v16;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v102 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v98 = (char *)&v92 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v92 - v24;
  *(_QWORD *)&v27 = __chkstk_darwin(v26).n128_u64[0];
  v100 = (char *)&v92 - v28;
  v94 = *(id *)(v3 + 64);
  v95 = a2;
  v29 = objc_msgSend(v94, "formattedHeartRate:context:", a2, CFSTR("WorkoutDetailDisplayContext"), v27);
  KeyPath = swift_getKeyPath(&unk_1006243F8);
  v31 = swift_getKeyPath(&unk_100624420);
  v103 = v29;
  swift_retain(v3);
  static Published.subscript.setter(&v103, v3, KeyPath, v31);
  v32 = *(void **)(v3 + 24);
  v101 = v19;
  v99 = v25;
  v97 = v7;
  if (v32)
  {
    v33 = objc_msgSend(v32, "startDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v34 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v34(v17, v25, v18);
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v35(v17, 0, 1, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      v36 = v100;
      v34(v100, v17, v18);
      v37 = v98;
      v38 = v95;
      v39 = (uint64_t)v93;
      goto LABEL_7;
    }
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v35(v17, 1, 1, v18);
  }
  v37 = v98;
  v39 = (uint64_t)v93;
  v40 = objc_msgSend(*(id *)(v3 + 16), "startDate");
  v36 = v100;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

  sub_10001BE90((uint64_t)v17, (uint64_t *)&unk_100828370);
  if (!v32)
  {
    v35(v14, 1, 1, v18);
    v44 = v101;
    v38 = v95;
LABEL_12:
    v45 = objc_msgSend(*(id *)(v3 + 16), "endDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v45);

    sub_10001BE90((uint64_t)v14, (uint64_t *)&unk_100828370);
    goto LABEL_14;
  }
  v38 = v95;
LABEL_7:
  v41 = objc_msgSend(v32, "endDate");
  if (v41)
  {
    v42 = v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = v101;
  v35((char *)v39, v43, 1, v18);
  sub_100045AD4(v39, (uint64_t)v14, (uint64_t *)&unk_100828370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v14, 1, v18) == 1)
    goto LABEL_12;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v37, v14, v18);
LABEL_14:
  v46 = (uint64_t)v99;
  v47 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v47(v99, v36, v18);
  v48 = v102;
  v47(v102, v37, v18);
  v49 = type metadata accessor for WorkoutChartProperties(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = sub_10026A764(v46, v48, 0, 1, 0, 1, 1, 10.0, 90.0);
  sub_100104988(v96, v50);
  v52 = v51;
  v53 = (char *)sub_1001B9140(v50);
  v54 = objc_msgSend(v94, "fitnessUIFormattingManager");
  objc_msgSend(v38, "doubleValue");
  v55 = objc_msgSend(v54, "localizedStringWithBeatsPerMinute:requirePositiveValue:", 1);

  v95 = (void *)v50;
  v96 = v52;
  v93 = v53;
  if (v55)
  {
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

  }
  else
  {
    v56 = 0;
    v58 = 0;
  }
  v59 = (void *)objc_opt_self(NSBundle);
  v60 = objc_msgSend(v59, "mainBundle");
  v61 = String._bridgeToObjectiveC()();
  v62 = objc_msgSend(v60, "localizedStringForKey:value:table:", v61, 0, 0);

  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  v65 = v64;

  v66 = sub_100047110((uint64_t *)&unk_100827460);
  v67 = swift_allocObject(v66, 72, 7);
  *(_OWORD *)(v67 + 16) = xmmword_100622F90;
  *(_QWORD *)(v67 + 56) = &type metadata for String;
  *(_QWORD *)(v67 + 64) = sub_100038CF8();
  if (!v58)
  {
    v69 = objc_msgSend(v59, "mainBundle");
    v70 = String._bridgeToObjectiveC()();
    v71 = objc_msgSend(v69, "localizedStringForKey:value:table:", v70, 0, 0);

    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v58 = v72;

  }
  v73 = (uint64_t)v92;
  *(_QWORD *)(v67 + 32) = v56;
  *(_QWORD *)(v67 + 40) = v58;
  String.init(format:_:)(v63, v65, v67, v68);
  v75 = v74;
  swift_bridgeObjectRelease(v65);
  v76 = objc_allocWithZone((Class)NSAttributedString);
  v77 = String._bridgeToObjectiveC()();
  v78 = objc_msgSend(v76, "initWithString:", v77, swift_bridgeObjectRelease(v75).n128_f64[0]);

  v79 = (uint64_t)v99;
  v80 = v100;
  v47(v99, v100, v18);
  v81 = (uint64_t)v102;
  v82 = v98;
  v47(v102, v98, v18);
  swift_retain(*(_QWORD *)(v3 + 56));
  sub_1002A23DC(0, 0, (int *)0xE000000000000000, v78, v96, 1, v79, v81, v73, v93, 0, v83);
  v84 = type metadata accessor for WorkoutChartViewModel(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v73, 0, 1, v84);
  v85 = swift_getKeyPath(&unk_1006242D8);
  v86 = swift_getKeyPath(&unk_100624300);
  v87 = (uint64_t)v97;
  sub_1001048E0(v73, (uint64_t)v97);
  swift_retain(v3);
  static Published.subscript.setter(v87, v3, v85, v86);
  sub_10001BE90(v73, &qword_1008202F0);
  v88 = swift_getKeyPath(&unk_100624320);
  v89 = swift_getKeyPath(&unk_100624348);
  v103 = v95;
  swift_retain(v3);
  static Published.subscript.setter(&v103, v3, v88, v89);
  v90 = *(void (**)(char *, uint64_t))(v101 + 8);
  v90(v82, v18);
  return ((uint64_t (*)(char *, uint64_t))v90)(v80, v18);
}

void sub_1001026B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;

  v1 = v0;
  v2 = *v0;
  v3 = (void *)v0[6];
  v4 = v0[2];
  v5 = v0[3];
  v6 = swift_allocObject(&unk_100785A08, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = swift_allocObject(&unk_100785A58, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v2;
  v9[4] = sub_10010494C;
  v10 = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_1004C6E98;
  v9[3] = &unk_100785A70;
  v8 = _Block_copy(v9);
  objc_msgSend(v3, "heartRateDataForWorkout:workoutActivity:completion:", v4, v5, v8, swift_release(v10).n128_f64[0]);
  _Block_release(v8);
}

void sub_1001027A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Strong;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  void *v41;
  os_log_type_t v42;
  NSObject *v43;
  uint8_t *v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  char *v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  id v78;
  char *v79;
  uint64_t v80;
  id v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint8_t *v101;
  void **v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __n128 v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  id v119;
  double v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  NSString v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  id v135;
  NSString v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  id v142;
  NSString v143;
  id v144;
  int *v145;
  int *v146;
  int *v147;
  id v148;
  NSString v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  __n128 v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  id v180;
  void *v181;
  id v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  char *v191;
  uint64_t v192;
  id v193;
  NSString v194;
  id v195;
  int *v196;
  int *v197;
  int *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __n128 v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  void (*v215)(char *, uint64_t);
  uint64_t v216;
  void (*v217)(char *, uint64_t);
  uint64_t v218;
  __n128 v219;
  void (*v220)(char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(char *, char *, uint64_t);
  char *v227;
  id v228;
  unint64_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(char *, uint64_t);
  void (*v236)(char *, uint64_t);
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  id v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  _QWORD v260[3];
  char v261[8];
  uint64_t v262;
  void **aBlock;
  uint64_t v264;
  uint64_t (*v265)(uint64_t);
  void *v266;
  uint64_t (*v267)();
  uint64_t v268;
  char v269[8];

  v255 = a3;
  v248 = a2;
  v251 = a1;
  v7 = type metadata accessor for WorkoutChartViewModel(0);
  v247 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v247 + 64);
  v9 = __chkstk_darwin(v7);
  v240 = (uint64_t)&v223 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v249 = (uint64_t)&v223 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v223 - v12;
  v246 = type metadata accessor for Logger(0);
  v245 = *(_QWORD **)(v246 - 8);
  __chkstk_darwin(v246);
  v244 = (char *)&v223 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100047110((uint64_t *)&unk_100828370);
  v16 = __chkstk_darwin(v15);
  v242 = (char *)&v223 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v243 = (uint64_t)&v223 - v18;
  v256 = type metadata accessor for Date(0);
  v252 = *(_QWORD *)(v256 - 8);
  v19 = __chkstk_darwin(v256);
  v21 = (char *)&v223 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v241 = (char *)&v223 - v23;
  v24 = __chkstk_darwin(v22);
  v250 = (char *)&v223 - v25;
  v26 = __chkstk_darwin(v24);
  v254 = (char *)&v223 - v27;
  v28 = __chkstk_darwin(v26);
  v257 = (char *)&v223 - v29;
  __chkstk_darwin(v28);
  v253 = (char *)&v223 - v30;
  v259 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v259 - 8);
  __chkstk_darwin(v259);
  v33 = (char *)&v223 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v258 = (char *)&v223 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v269, 0, 0);
  Strong = swift_weakLoadStrong(a5);
  if (!Strong)
    return;
  v38 = Strong;
  if (!a4)
  {
    v229 = v8;
    v227 = v21;
    v230 = v13;
    v233 = sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
    v50 = (void *)static OS_dispatch_queue.main.getter(v49);
    v51 = swift_allocObject(&unk_100785AA8, 32, 7);
    v52 = v255;
    *(_QWORD *)(v51 + 16) = v38;
    *(_QWORD *)(v51 + 24) = v52;
    v267 = sub_100104980;
    v268 = v51;
    aBlock = _NSConcreteStackBlock;
    v264 = 1107296256;
    v265 = sub_10002D0F8;
    v266 = &unk_100785AC0;
    v53 = _Block_copy(&aBlock);
    v54 = v268;
    v228 = v52;
    swift_retain(v38);
    swift_release(v54);
    v55 = v258;
    static DispatchQoS.unspecified.getter(v56);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v57 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v58 = sub_100047110(&qword_100828C80);
    v59 = sub_10002FB08();
    v232 = v58;
    v231 = v59;
    v238 = v34;
    v60 = v259;
    v234 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v58, v59, v259, v57);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v33, v53);
    _Block_release(v53);

    v61 = *(void (**)(char *, uint64_t))(v31 + 8);
    v237 = v33;
    v62 = v60;
    v63 = v238;
    v236 = v61;
    v61(v33, v62);
    v235 = *(void (**)(char *, uint64_t))(v35 + 8);
    v235(v55, v63);
    v64 = v251;
    if (!v251)
      goto LABEL_13;
    v239 = v38;
    if ((unint64_t)v251 >> 62)
    {
      if (v251 >= 0)
        v221 = v251 & 0xFFFFFFFFFFFFFF8;
      else
        v221 = v251;
      swift_bridgeObjectRetain(v251);
      v65 = _CocoaArrayWrapper.endIndex.getter(v221);
      swift_bridgeObjectRelease(v64);
    }
    else
    {
      v65 = *(_QWORD *)((v251 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v66 = v252;
    v67 = v257;
    v68 = v237;
    if (!v65)
    {
      v80 = v239;
      goto LABEL_14;
    }
    v69 = v239;
    v70 = *(void **)(v239 + 24);
    if (v70)
    {
      v71 = v70;
      v72 = objc_msgSend(v71, "endDate");
      if (v72)
      {
        v73 = v72;
        v74 = v254;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        v75 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 32);
        v76 = v243;
        v77 = v256;
        v75(v243, v74, v256);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v76, 0, 1, v77);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v76, 1, v77) != 1)
        {
          v67 = v257;
          v75((uint64_t)v257, (char *)v76, v256);
          v78 = objc_msgSend(v71, "startDate");
          v79 = v253;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

          v69 = v239;
          goto LABEL_21;
        }
      }
      else
      {
        v76 = v243;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v243, 1, 1, v256);
      }

      sub_10001BE90(v76, (uint64_t *)&unk_100828370);
      v69 = v239;
      v67 = v257;
    }
    v81 = objc_msgSend(*(id *)(v69 + 16), "startDate");
    v82 = v253;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

    v79 = v82;
    v71 = objc_msgSend(*(id *)(v69 + 16), "endDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);
LABEL_21:

    v83 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    v84 = (uint64_t)v254;
    v85 = v256;
    v83(v254, v79, v256);
    v86 = v250;
    v226 = v83;
    v83(v250, v67, v85);
    v87 = type metadata accessor for WorkoutChartProperties(0);
    v88 = *(unsigned int *)(v87 + 48);
    v89 = *(unsigned __int16 *)(v87 + 52);
    v224 = v87;
    swift_allocObject(v87, v88, v89);
    v243 = sub_10026A764(v84, v86, 0, 1, 0, 1, 1, 10.0, 90.0);
    sub_100104988(v64, v243);
    v225 = v90;
    v92 = *(void **)(v69 + 16);
    v91 = *(void **)(v69 + 24);
    v93 = type metadata accessor for WorkoutHeartRateInfo(0);
    swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
    v94 = v91;
    v95 = sub_100293CA0(v92, v91);
    v96 = v244;
    static WOLog.app.getter();
    v97 = swift_retain_n(v95, 2);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.default.getter(v98);
    v100 = os_log_type_enabled(v98, v99);
    v251 = v95;
    if (v100)
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = (void **)swift_slowAlloc(32, -1);
      aBlock = v102;
      *(_DWORD *)v101 = 136315138;
      v223 = v101 + 4;
      swift_retain(v251);
      v103 = sub_10029377C();
      v105 = v104;
      swift_release(v251);
      v262 = sub_10003E8EC(v103, v105, (uint64_t *)&aBlock);
      v95 = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v262, &aBlock, v223);
      swift_release_n(v95, 2);
      swift_bridgeObjectRelease(v105);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "[HeartRate] Loaded heartRateInfo: %s", v101, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);

    }
    else
    {

      swift_release_n(v95, 2);
    }
    v106.n128_f64[0] = ((double (*)(char *, uint64_t))v245[1])(v96, v246);
    v107 = (void *)static OS_dispatch_queue.main.getter(v106);
    v108 = swift_allocObject(&unk_100785AF8, 32, 7);
    v109 = v239;
    *(_QWORD *)(v108 + 16) = v239;
    *(_QWORD *)(v108 + 24) = v95;
    v267 = sub_10010559C;
    v268 = v108;
    aBlock = _NSConcreteStackBlock;
    v264 = 1107296256;
    v265 = sub_10002D0F8;
    v266 = &unk_100785B10;
    v110 = _Block_copy(&aBlock);
    v111 = v268;
    swift_retain(v109);
    swift_retain(v95);
    swift_release(v111);
    v112 = v258;
    static DispatchQoS.unspecified.getter(v113);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v114 = v259;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v232, v231, v259, v234);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v112, v68, v110);
    _Block_release(v110);

    v236(v68, v114);
    v235(v112, v63);
    v115 = COERCE_DOUBLE(sub_100293410());
    v116 = 0;
    if ((v117 & 1) == 0 && v115 > 0.0)
      v116 = sub_10029355C();
    v246 = v116;
    v118 = v239;
    v245 = sub_1001B9140(v243);
    v119 = objc_msgSend(*(id *)(v118 + 64), "fitnessUIFormattingManager");
    if (v255)
      objc_msgSend(v228, "doubleValue");
    else
      v120 = -1.0;
    v121 = objc_msgSend(v119, "localizedStringWithBeatsPerMinute:requirePositiveValue:", 1, v120);

    if (v121)
    {
      v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      v124 = v123;

    }
    else
    {
      v122 = 0;
      v124 = 0;
    }
    v125 = (void *)objc_opt_self(NSBundle);
    v126 = objc_msgSend(v125, "mainBundle");
    v127 = String._bridgeToObjectiveC()();
    v128 = objc_msgSend(v126, "localizedStringForKey:value:table:", v127, 0, 0);

    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
    v131 = v130;

    v132 = sub_100047110((uint64_t *)&unk_100827460);
    v133 = swift_allocObject(v132, 72, 7);
    *(_OWORD *)(v133 + 16) = xmmword_100622F90;
    *(_QWORD *)(v133 + 56) = &type metadata for String;
    *(_QWORD *)(v133 + 64) = sub_100038CF8();
    if (!v124)
    {
      v135 = objc_msgSend(v125, "mainBundle");
      v136 = String._bridgeToObjectiveC()();
      v137 = objc_msgSend(v135, "localizedStringForKey:value:table:", v136, 0, 0);

      v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
      v124 = v138;

    }
    *(_QWORD *)(v133 + 32) = v122;
    *(_QWORD *)(v133 + 40) = v124;
    String.init(format:_:)(v129, v131, v133, v134);
    v140 = v139;
    *(_QWORD *)&v141 = swift_bridgeObjectRelease(v131).n128_u64[0];
    v255 = v125;
    v142 = objc_msgSend(v125, "mainBundle", v141);
    v143 = String._bridgeToObjectiveC()();
    v144 = objc_msgSend(v142, "localizedStringForKey:value:table:", v143, 0, 0);

    v145 = (int *)static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    v147 = v146;

    v148 = objc_allocWithZone((Class)NSAttributedString);
    v149 = String._bridgeToObjectiveC()();
    v150 = objc_msgSend(v148, "initWithString:", v149, swift_bridgeObjectRelease(v140).n128_f64[0]);

    v151 = (uint64_t)v254;
    v152 = v256;
    v153 = v226;
    v226(v254, v253, v256);
    v154 = (uint64_t)v250;
    v153(v250, v257, v152);
    v155 = v239;
    v156 = *(_QWORD *)(v239 + 56);
    v157 = (void *)v246;
    swift_retain(v246);
    swift_retain(v156);
    v158 = (uint64_t)v230;
    sub_1002A23DC(0, v145, v147, v150, v225, 1, v151, v154, (uint64_t)v230, v245, v157, v156);
    v160 = (void *)static OS_dispatch_queue.main.getter(v159);
    v161 = v249;
    sub_10004F8C8(v158, v249, type metadata accessor for WorkoutChartViewModel);
    v162 = *(unsigned __int8 *)(v247 + 80);
    v163 = (_QWORD *)((v162 + 24) & ~v162);
    v164 = ((unint64_t)v163 + v229 + 7) & 0xFFFFFFFFFFFFFFF8;
    v229 = v164 + 8;
    v244 = (char *)(v162 | 7);
    v165 = swift_allocObject(&unk_100785B48, v164 + 8, v162 | 7);
    *(_QWORD *)(v165 + 16) = v155;
    v245 = v163;
    sub_100047C88(v161, (uint64_t)v163 + v165, type metadata accessor for WorkoutChartViewModel);
    v166 = v243;
    v247 = v164;
    *(_QWORD *)(v165 + v164) = v243;
    v267 = sub_1001055A8;
    v268 = v165;
    aBlock = _NSConcreteStackBlock;
    v264 = 1107296256;
    v265 = sub_10002D0F8;
    v266 = &unk_100785B60;
    v167 = _Block_copy(&aBlock);
    v168 = v268;
    swift_retain(v155);
    swift_retain(v166);
    swift_release(v168);
    v169 = v258;
    static DispatchQoS.unspecified.getter(v170);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v171 = v237;
    v172 = v259;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v232, v231, v259, v234);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v169, v171, v167);
    _Block_release(v167);

    v236(v171, v172);
    v235(v169, v238);
    v173 = v248;
    if (!v248)
    {
      swift_release(v155);
      swift_release(v251);
      swift_release(v157);
      swift_release(v166);
      sub_100011F54(v158, type metadata accessor for WorkoutChartViewModel);
      v217 = *(void (**)(char *, uint64_t))(v252 + 8);
      v218 = v256;
      v217(v257, v256);
      v217(v253, v218);
      return;
    }
    v174 = v158;
    if (v248 >> 62)
    {
      if ((v248 & 0x8000000000000000) == 0)
        v222 = v248 & 0xFFFFFFFFFFFFFF8;
      else
        v222 = v248;
      swift_bridgeObjectRetain(v248);
      v175 = _CocoaArrayWrapper.endIndex.getter(v222);
    }
    else
    {
      v175 = *(_QWORD *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v248);
    }
    v176 = v256;
    v177 = v252;
    v178 = v254;
    v179 = v251;
    if (v175)
    {
      if ((v173 & 0xC000000000000001) != 0)
      {
        v180 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v173);
      }
      else
      {
        if (!*(_QWORD *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v180 = *(id *)(v173 + 32);
      }
      v181 = v180;
      v182 = objc_msgSend(v180, "date", swift_bridgeObjectRelease(v173).n128_f64[0]);

      static Date._unconditionallyBridgeFromObjectiveC(_:)(v182);
      v183 = *(void (**)(char *, char *, uint64_t))(v177 + 32);
      v184 = (uint64_t)v242;
      v183(v242, v178, v176);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v184, 0, 1, v176);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v184, 1, v176) != 1)
      {
        v185 = v241;
        v186 = ((uint64_t (*)(char *, uint64_t, uint64_t))v183)(v241, v184, v176);
        v187 = v185;
        Date.addingTimeInterval(_:)(v186, 180.0);
        v188 = (uint64_t)v250;
        v189 = v226;
        v226(v250, v187, v176);
        v190 = v173;
        v191 = v227;
        v189(v227, v178, v176);
        swift_allocObject(v224, *(unsigned int *)(v224 + 48), *(unsigned __int16 *)(v224 + 52));
        v252 = sub_10026A764(v188, v191, 0, 1, 0, 1, 1, 10.0, 90.0);
        sub_100104988(v190, v252);
        v248 = v192;
        v193 = objc_msgSend(v255, "mainBundle");
        v194 = String._bridgeToObjectiveC()();
        v195 = objc_msgSend(v193, "localizedStringForKey:value:table:", v194, 0, 0);

        v196 = (int *)static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
        v198 = v197;

        v199 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
        v200 = (uint64_t)v250;
        v189(v250, v241, v176);
        v189(v191, v178, v176);
        v201 = v239;
        swift_retain(*(_QWORD *)(v239 + 56));
        v202 = v249;
        sub_1002A23DC(0, v196, v198, v199, v248, 1, v200, (uint64_t)v191, v249, _swiftEmptyArrayStorage, 0, v203);
        v205 = (void *)static OS_dispatch_queue.main.getter(v204);
        v206 = v240;
        sub_10004F8C8(v202, v240, type metadata accessor for WorkoutChartViewModel);
        v207 = swift_allocObject(&unk_100785B98, v229, v244);
        *(_QWORD *)(v207 + 16) = v201;
        sub_100047C88(v206, (uint64_t)v245 + v207, type metadata accessor for WorkoutChartViewModel);
        v208 = v252;
        *(_QWORD *)(v207 + v247) = v252;
        v267 = sub_100105714;
        v268 = v207;
        aBlock = _NSConcreteStackBlock;
        v264 = 1107296256;
        v265 = sub_10002D0F8;
        v266 = &unk_100785BB0;
        v209 = _Block_copy(&aBlock);
        v210 = v268;
        swift_retain(v201);
        swift_retain(v208);
        swift_release(v210);
        v211 = v258;
        static DispatchQoS.unspecified.getter(v212);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v213 = v237;
        v214 = v259;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v232, v231, v259, v234);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v211, v213, v209);
        _Block_release(v209);
        swift_release(v201);
        swift_release(v251);
        swift_release(v246);
        swift_release(v243);
        swift_release(v208);

        v236(v213, v214);
        v235(v211, v238);
        sub_100011F54(v202, type metadata accessor for WorkoutChartViewModel);
        v215 = *(void (**)(char *, uint64_t))(v177 + 8);
        v216 = v256;
        v215(v254, v256);
        v215(v241, v216);
        sub_100011F54((uint64_t)v230, type metadata accessor for WorkoutChartViewModel);
        v215(v257, v216);
        v215(v253, v216);
        return;
      }
    }
    else
    {
      v219 = swift_bridgeObjectRelease(v173);
      v184 = (uint64_t)v242;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v177 + 56))(v242, 1, 1, v176, v219);
    }
    swift_release(v246);
    swift_release(v243);
    swift_release(v239);
    swift_release(v179);
    sub_100011F54(v174, type metadata accessor for WorkoutChartViewModel);
    v220 = *(void (**)(char *, uint64_t))(v177 + 8);
    v220(v257, v176);
    v220(v253, v176);
    sub_10001BE90(v184, (uint64_t *)&unk_100828370);
    return;
  }
  v39 = swift_errorRetain(a4);
  v40 = static os_log_type_t.error.getter(v39);
  v41 = (void *)HKLogWorkouts;
  v42 = v40;
  if (os_log_type_enabled(HKLogWorkouts, v40))
  {
    swift_errorRetain(a4);
    swift_errorRetain(a4);
    v43 = v41;
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (void **)swift_slowAlloc(32, -1);
    aBlock = v45;
    *(_DWORD *)v44 = 136315138;
    swift_getErrorValue(a4, v261, v260);
    v46 = Error.localizedDescription.getter(v260[1], v260[2]);
    v48 = v47;
    v262 = sub_10003E8EC(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v262, &aBlock, v44 + 4);
    swift_bridgeObjectRelease(v48);
    swift_errorRelease(a4);
    swift_errorRelease(a4);
    _os_log_impl((void *)&_mh_execute_header, v43, v42, "Error getting heart rates: %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
    swift_errorRelease(a4);

LABEL_13:
    v80 = v38;
LABEL_14:
    swift_release(v80);
    return;
  }
  swift_release(v38);
  swift_errorRelease(a4);
}

uint64_t sub_100103EE0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v7;

  v3 = objc_msgSend(*(id *)(a1 + 64), "formattedHeartRate:context:", a2, CFSTR("WorkoutDetailDisplayContext"));
  KeyPath = swift_getKeyPath(&unk_1006243F8);
  v5 = swift_getKeyPath(&unk_100624420);
  v7 = v3;
  swift_retain(a1);
  return static Published.subscript.setter(&v7, a1, KeyPath, v5);
}

uint64_t sub_100103F78(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100624368);
  v5 = swift_getKeyPath(&unk_100624390);
  v7 = a2;
  swift_retain(a2);
  swift_retain(a1);
  return static Published.subscript.setter(&v7, a1, KeyPath, v5);
}

uint64_t sub_100103FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v14 = sub_100047110(&qword_1008202F0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v32 - v18;
  sub_10004F8C8(a2, (uint64_t)&v32 - v18, type metadata accessor for WorkoutChartViewModel);
  v20 = type metadata accessor for WorkoutChartViewModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
  KeyPath = swift_getKeyPath(a4);
  v22 = swift_getKeyPath(a5);
  sub_1001048E0((uint64_t)v19, (uint64_t)v17);
  swift_retain(a1);
  static Published.subscript.setter(v17, a1, KeyPath, v22);
  sub_10001BE90((uint64_t)v19, &qword_1008202F0);
  v23 = swift_getKeyPath(a6);
  v24 = swift_getKeyPath(a7);
  v33 = a3;
  swift_retain(a1);
  swift_retain(a3);
  static Published.subscript.setter(&v33, a1, v23, v24);
  result = swift_unknownObjectWeakLoadStrong(a1 + 32);
  if (result)
  {
    v26 = result;
    v27 = *(_QWORD *)(a1 + 40);
    v28 = swift_getKeyPath(a6);
    v29 = swift_getKeyPath(a7);
    static Published.subscript.getter(&v33, a1, v28, v29);
    swift_release(v28);
    swift_release(v29);
    v30 = v33;
    if (v33)
    {
      v31 = v33 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_delegate;
      *(_QWORD *)(v31 + 8) = v27;
      swift_unknownObjectWeakAssign(v31, v26);
      swift_release(v30);
    }
    return swift_unknownObjectRelease(v26);
  }
  return result;
}

uint64_t sub_1001041EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__averageHeartRate;
  v2 = sub_100047110(&qword_100820578);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__heartRateInfo;
  v4 = sub_100047110(&qword_100820570);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutData;
  v6 = sub_100047110(&qword_100820568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutProperties;
  v8 = sub_100047110(&qword_100820560);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_1001042B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_1001B8F04();
  v1 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__averageHeartRate;
  v2 = sub_100047110(&qword_100820578);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__heartRateInfo;
  v4 = sub_100047110(&qword_100820570);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutData;
  v6 = sub_100047110(&qword_100820568);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutProperties;
  v8 = sub_100047110(&qword_100820560);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100104390()
{
  return type metadata accessor for WorkoutDetailHeartRateDataStore(0);
}

uint64_t type metadata accessor for WorkoutDetailHeartRateDataStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1008202B8;
  if (!qword_1008202B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WorkoutDetailHeartRateDataStore);
  return result;
}

void sub_1001043D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_1001044C0(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000DBE4C(319, &qword_1008202D8, &qword_1008202E0);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000DBE4C(319, &qword_1008202E8, &qword_1008202F0);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_1000DBE4C(319, &qword_1008202F8, (uint64_t *)&unk_100820300);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 4, v10, a1 + 288);
        }
      }
    }
  }
}

void sub_1001044C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1008202C8)
  {
    v2 = sub_10001E724(255, (unint64_t *)&qword_1008202D0, NSAttributedString_ptr);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1008202C8);
  }
}

uint64_t sub_100104524@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for WorkoutDetailHeartRateDataStore(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100104560()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100104584()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001045B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100820554);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  v3[5] = v2;
  return swift_task_switch(sub_100101E28, 0, 0);
}

_QWORD *sub_100104610(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  _QWORD v39[3];

  v36 = a3;
  v37 = a4;
  v34 = a1;
  v35 = a2;
  v5 = sub_100047110(&qword_100820560);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100820568);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100047110(&qword_1008202F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v30 - v15;
  v17 = sub_100047110(&qword_100820570);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v4 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__heartRateInfo;
  v39[0] = 0;
  swift_retain(v4);
  v22 = sub_100047110(&qword_1008202E0);
  Published.init(initialValue:)(v39, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v21, v20, v17);
  v23 = v4 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutData;
  v24 = type metadata accessor for WorkoutChartViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v16, 1, 1, v24);
  sub_1001048E0((uint64_t)v16, (uint64_t)v14);
  Published.init(initialValue:)(v14, v11);
  sub_10001BE90((uint64_t)v16, &qword_1008202F0);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v23, v10, v31);
  v25 = v4 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__postWorkoutProperties;
  v39[0] = 0;
  v26 = sub_100047110((uint64_t *)&unk_100820300);
  Published.init(initialValue:)(v39, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v25, v7, v33);
  v27 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  swift_beginAccess(v4 + OBJC_IVAR____TtC10FitnessApp31WorkoutDetailHeartRateDataStore__averageHeartRate, v39, 33, 0);
  v38 = v27;
  v28 = sub_10001E724(0, (unint64_t *)&qword_1008202D0, NSAttributedString_ptr);
  Published.init(initialValue:)(&v38, v28);
  swift_endAccess(v39);
  swift_release(v4);
  return sub_1001B9B58(v34, v35, v36, v37);
}

uint64_t sub_1001048E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008202F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100104928()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10010494C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;

  sub_1001027A4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_100104954()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104980()
{
  uint64_t v0;

  return sub_100103EE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100104988(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  id v37;
  char *v38;
  id v39;
  char *v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  id v51;
  double v52;
  double v53;
  unint64_t v54;
  char v55;
  id v56;
  unint64_t v57;
  char v58;
  char v59;
  __n128 v60;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __n128 v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void (*v81)(char *, char *, _QWORD *);
  id v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  id v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;

  v111 = a2;
  v3 = type metadata accessor for NSIndexSetIterator(0);
  v109 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v95 - v7;
  v9 = type metadata accessor for WorkoutChartDataElement(0);
  v107 = *(_QWORD *)(v9 - 8);
  v108 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v116 = (char *)&v95 - v13;
  v14 = sub_100047110(&qword_100820580);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v95 - v18;
  v20 = (_QWORD *)type metadata accessor for Date(0);
  v119 = *(v20 - 1);
  v21 = __chkstk_darwin(v20);
  v115 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v114 = (uint64_t)&v95 - v24;
  v25 = __chkstk_darwin(v23);
  v105 = (char *)&v95 - v26;
  v27 = __chkstk_darwin(v25);
  v104 = (char *)&v95 - v28;
  __chkstk_darwin(v27);
  v103 = (char *)&v95 - v29;
  if ((unint64_t)a1 >> 62)
    goto LABEL_84;
  v30 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    v118 = v20;
    v106 = v12;
    v112 = v17;
    v110 = v19;
    if (!v30)
    {
      swift_bridgeObjectRelease(a1);
      v63 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_32:
      v64 = *((_QWORD *)v63 + 8);
      v104 = v63 + 64;
      v65 = 1 << v63[32];
      v66 = -1;
      if (v65 < 64)
        v66 = ~(-1 << v65);
      v67 = v66 & v64;
      v105 = (char *)((unint64_t)(v65 + 63) >> 6);
      v103 = v105 - 1;
      v113 = v63;
      v68 = swift_bridgeObjectRetain(v63);
      v111 = 0;
      v117 = _swiftEmptyArrayStorage;
      if (v67)
      {
LABEL_35:
        v114 = (v67 - 1) & v67;
        v69 = __clz(__rbit64(v67)) | (v111 << 6);
      }
      else
      {
        while (1)
        {
          v75 = v111 + 1;
          if (__OFADD__(v111, 1))
            goto LABEL_80;
          if (v75 < (uint64_t)v105)
          {
            v76 = *(_QWORD *)&v104[8 * v75];
            if (v76)
              goto LABEL_40;
            v77 = v111 + 2;
            ++v111;
            if (v75 + 1 < (uint64_t)v105)
            {
              v76 = *(_QWORD *)&v104[8 * v77];
              if (v76)
                goto LABEL_43;
              v111 = v75 + 1;
              if (v75 + 2 < (uint64_t)v105)
              {
                v76 = *(_QWORD *)&v104[8 * v75 + 16];
                if (v76)
                {
                  v75 += 2;
                  goto LABEL_40;
                }
                v77 = v75 + 3;
                v111 = v75 + 2;
                if (v75 + 3 < (uint64_t)v105)
                  break;
              }
            }
          }
LABEL_54:
          v78 = sub_100047110(&qword_100820588);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v17, 1, 1, v78);
          v114 = 0;
LABEL_55:
          sub_100045AD4((uint64_t)v17, (uint64_t)v19, &qword_100820580);
          v79 = sub_100047110(&qword_100820588);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48))(v19, 1, v79) == 1)
          {
            v93 = v113;
            swift_release(v113);
            swift_bridgeObjectRelease(v93);
            return;
          }
          v80 = *(void **)&v19[*(int *)(v79 + 48)];
          v81 = *(void (**)(char *, char *, _QWORD *))(v119 + 32);
          v81(v115, v19, v20);
          v82 = v80;
          NSIndexSet.makeIterator()();

          v83 = sub_1000083D8(&qword_100820590, (uint64_t (*)(uint64_t))&type metadata accessor for NSIndexSetIterator, (uint64_t)&protocol conformance descriptor for NSIndexSetIterator);
          dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
          if ((v121 & 1) != 0)
          {
            v84 = *(void (**)(char *, uint64_t))(v109 + 8);
            v84(v8, v3);
            v85 = 0;
          }
          else
          {
            v85 = (uint64_t)v120;
            dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
            if ((v121 & 1) == 0)
            {
              do
              {
                if ((uint64_t)v120 < v85)
                  v85 = (uint64_t)v120;
                dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
              }
              while (v121 != 1);
            }
            v84 = *(void (**)(char *, uint64_t))(v109 + 8);
            v84(v8, v3);
          }
          v86 = v82;
          NSIndexSet.makeIterator()();

          dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
          if ((v121 & 1) != 0)
          {
            v84(v6, v3);
            v87 = 0;
          }
          else
          {
            v87 = (uint64_t)v120;
            dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
            if ((v121 & 1) == 0)
            {
              do
              {
                if (v87 <= (uint64_t)v120)
                  v87 = (uint64_t)v120;
                dispatch thunk of IteratorProtocol.next()(&v120, v3, v83);
              }
              while (v121 != 1);
            }
            v84(v6, v3);
          }
          v88 = (uint64_t)v116;
          v20 = v118;
          v81(v116, v115, v118);
          v89 = v108;
          *(double *)(v88 + *(int *)(v108 + 24)) = (double)v85;
          *(double *)(v88 + *(int *)(v89 + 28)) = (double)v87;
          *(double *)(v88 + *(int *)(v89 + 20)) = ((double)v85 + (double)v87) * 0.5;
          v12 = v106;
          sub_10004F8C8(v88, (uint64_t)v106, type metadata accessor for WorkoutChartDataElement);
          v90 = v117;
          if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
            v90 = (_QWORD *)sub_10013FD24(0, v90[2] + 1, 1, (unint64_t)v90);
          v17 = v112;
          a1 = v90[2];
          v91 = v90[3];
          if (a1 >= v91 >> 1)
            v90 = (_QWORD *)sub_10013FD24(v91 > 1, a1 + 1, 1, (unint64_t)v90);
          v90[2] = a1 + 1;
          v92 = (*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
          v117 = v90;
          sub_100047C88((uint64_t)v12, (uint64_t)v90 + v92 + *(_QWORD *)(v107 + 72) * a1, type metadata accessor for WorkoutChartDataElement);

          sub_100011F54((uint64_t)v116, type metadata accessor for WorkoutChartDataElement);
          v19 = v110;
          v67 = v114;
          if (v114)
            goto LABEL_35;
        }
        v76 = *(_QWORD *)&v104[8 * v77];
        if (!v76)
        {
          while (1)
          {
            v75 = v77 + 1;
            if (__OFADD__(v77, 1))
              goto LABEL_89;
            if (v75 >= (uint64_t)v105)
            {
              v111 = (uint64_t)v103;
              goto LABEL_54;
            }
            v76 = *(_QWORD *)&v104[8 * v75];
            ++v77;
            if (v76)
              goto LABEL_40;
          }
        }
LABEL_43:
        v75 = v77;
LABEL_40:
        v114 = (v76 - 1) & v76;
        v69 = __clz(__rbit64(v76)) + (v75 << 6);
        v111 = v75;
      }
      v70 = v113;
      (*(void (**)(char *, unint64_t, _QWORD *, __n128))(v119 + 16))(v17, v113[6] + *(_QWORD *)(v119 + 72) * v69, v20, v68);
      v71 = v70[7];
      v72 = sub_100047110(&qword_100820588);
      v73 = *(void **)(v71 + 8 * v69);
      *(_QWORD *)&v17[*(int *)(v72 + 48)] = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v17, 0, 1, v72);
      v74 = v73;
      goto LABEL_55;
    }
    v102 = (id)objc_opt_self(HKUnit);
    if (v30 < 1)
      break;
    v31 = 0;
    v101 = OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_bucketDuration;
    v113 = &_swiftEmptyDictionarySingleton;
    v100 = a1 & 0xC000000000000001;
    v99 = OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_workoutDuration;
    v98 = a1;
    v97 = v30;
    v96 = v6;
    while (1)
    {
      if (v100)
        v38 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, a1);
      else
        v38 = (char *)*(id *)(a1 + 8 * v31 + 32);
      v6 = v38;
      v20 = v113;
      v39 = objc_msgSend(v38, "date");
      v40 = v104;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

      KeyPath = swift_getKeyPath(&unk_1006243B0);
      v42 = swift_getKeyPath(&unk_1006243D8);
      v17 = v105;
      v43 = v111;
      static Published.subscript.getter(v105, v111, KeyPath, v42);
      swift_release(KeyPath);
      swift_release(v42);
      v44 = *(double *)(v43 + v101);
      v45 = ceil(*(double *)(v43 + v99) / v44) + -1.0;
      v47 = floor(Date.timeIntervalSince(_:)(v17) / v44);
      if (v45 < v47)
        v47 = v45;
      v48 = v103;
      Date.addingTimeInterval(_:)(v46, v44 * 0.5 + v44 * v47);
      v49 = v118;
      a1 = *(_QWORD *)(v119 + 8);
      ((void (*)(char *, _QWORD *))a1)(v17, v118);
      v50 = v40;
      v12 = v48;
      ((void (*)(char *, _QWORD *))a1)(v50, v49);
      v117 = v6;
      v51 = objc_msgSend(v6, "quantity");
      v19 = (char *)objc_msgSend(v102, "_countPerMinuteUnit");
      objc_msgSend(v51, "doubleValueForUnit:", v19);
      v53 = v52;

      if (v20[2])
      {
        v54 = sub_10043939C((uint64_t)v12);
        if ((v55 & 1) != 0)
        {
          if ((~*(_QWORD *)&v53 & 0x7FF0000000000000) == 0)
            goto LABEL_81;
          if (v53 <= -9.22337204e18)
            goto LABEL_82;
          if (v53 >= 9.22337204e18)
            goto LABEL_83;
          objc_msgSend(*(id *)(v20[7] + 8 * v54), "addIndex:", (uint64_t)v53);
          v20 = v118;
          goto LABEL_7;
        }
      }
      (*(void (**)(uint64_t, char *, _QWORD *))(v119 + 16))(v114, v12, v118);
      if ((~*(_QWORD *)&v53 & 0x7FF0000000000000) == 0)
        break;
      if (v53 <= -9.22337204e18)
        goto LABEL_78;
      if (v53 >= 9.22337204e18)
        goto LABEL_79;
      v56 = objc_msgSend(objc_allocWithZone((Class)NSMutableIndexSet), "initWithIndex:", (uint64_t)v53);
      if (!v56)
      {
        swift_bridgeObjectRetain(v20);
        v57 = sub_10043939C(v114);
        v59 = v58;
        v60 = swift_bridgeObjectRelease(v20);
        v17 = v112;
        v6 = v96;
        if ((v59 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
          v120 = v20;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100400E50();
            v20 = v120;
          }
          v62 = v20[6];
          v20 = v118;
          ((void (*)(unint64_t, _QWORD *))a1)(v62 + *(_QWORD *)(v119 + 72) * v57, v118);
          v37 = *(id *)(v120[7] + 8 * v57);
          v113 = v120;
          sub_1004D1788(v57, (uint64_t)v120);
          v60 = swift_bridgeObjectRelease(0x8000000000000000);
        }
        else
        {
          v37 = 0;
          v20 = v118;
        }
        ((void (*)(uint64_t, _QWORD *, __n128))a1)(v114, v20, v60);

        goto LABEL_8;
      }
      v32 = (uint64_t)v56;
      v33 = swift_isUniquelyReferenced_nonNull_native(v20);
      v120 = v20;
      v34 = v32;
      v35 = v114;
      sub_1003FE848(v34, v114, v33);
      v113 = v120;
      v36 = swift_bridgeObjectRelease(0x8000000000000000);
      v20 = v118;
      ((void (*)(uint64_t, _QWORD *, __n128))a1)(v35, v118, v36);
LABEL_7:
      v17 = v112;
      v37 = v117;
      v6 = v96;
LABEL_8:
      ++v31;

      ((void (*)(char *, _QWORD *))a1)(v12, v20);
      a1 = v98;
      if (v97 == v31)
      {
        swift_bridgeObjectRelease(v98);
        v19 = v110;
        v63 = (char *)v113;
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    if (a1 < 0)
      v94 = a1;
    else
      v94 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v30 = _CocoaArrayWrapper.endIndex.getter(v94);
  }
  __break(1u);
LABEL_89:
  __break(1u);
}

uint64_t sub_100105570()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010559C()
{
  uint64_t v0;

  return sub_100103F78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001055A8()
{
  return sub_100105738((uint64_t)&unk_1006242D8, (uint64_t)&unk_100624300, (uint64_t)&unk_100624320, (uint64_t)&unk_100624348);
}

uint64_t sub_1001055D0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for WorkoutChartViewModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8]));
  v9 = v7 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[11], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12]));
  swift_release(*(_QWORD *)(v7 + v1[13]));
  swift_release(*(_QWORD *)(v7 + v1[14]));

  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100105714()
{
  return sub_100105738((uint64_t)&unk_100624248, (uint64_t)&unk_100624270, (uint64_t)&unk_100624290, (uint64_t)&unk_1006242B8);
}

uint64_t sub_100105738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for WorkoutChartViewModel(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_100103FF0(*(_QWORD *)(v4 + 16), v4 + v10, *(_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)), a1, a2, a3, a4);
}

uint64_t getEnumTagSinglePayload for ActivityDashboardMetricCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitSettingsEnergyUnit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001058E0 + 4 * byte_100624445[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100105914 + 4 * byte_100624440[v4]))();
}

uint64_t sub_100105914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010591C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100105924);
  return result;
}

uint64_t sub_100105930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100105938);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10010593C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100105944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100105950(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UnitSettingsEnergyUnit()
{
  return &type metadata for UnitSettingsEnergyUnit;
}

void *sub_100105968()
{
  return &protocol witness table for String;
}

unint64_t sub_100105974(char a1)
{
  unint64_t result;

  result = 0xD000000000000029;
  if (a1)
  {
    if (a1 == 1)
      return 0xD00000000000002DLL;
    else
      return 0xD00000000000002BLL;
  }
  return result;
}

BOOL sub_1001059D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1001059E8(_QWORD *a1@<X8>)
{
  *a1 = &off_10077EFE0;
}

unint64_t sub_1001059F8@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_100105974(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100105A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820598;
  if (!qword_100820598)
  {
    v1 = sub_100007050(&qword_1008205A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100820598);
  }
  return result;
}

unint64_t sub_100105A74()
{
  unint64_t result;

  result = qword_1008205A8;
  if (!qword_1008205A8)
  {
    result = swift_getWitnessTable(&unk_100624528, &type metadata for UnitSettingsEnergyUnit);
    atomic_store(result, (unint64_t *)&qword_1008205A8);
  }
  return result;
}

uint64_t sub_100105AB8(void *a1)
{
  void *v2;
  id v3;
  char v4;
  id v6;
  char v7;
  id v8;
  char v9;
  uint64_t v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  id v14;
  NSObject *v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v2 = (void *)objc_opt_self(HKUnit);
  v3 = objc_msgSend(v2, "largeCalorieUnit");
  sub_100105CC8();
  v4 = static NSObject.== infix(_:_:)(v3, a1);

  if ((v4 & 1) != 0)
    return 0;
  v6 = objc_msgSend(v2, "kilocalorieUnit");
  v7 = static NSObject.== infix(_:_:)(v6, a1);

  if ((v7 & 1) != 0)
    return 1;
  v8 = objc_msgSend(v2, "jouleUnitWithMetricPrefix:", 9);
  v9 = static NSObject.== infix(_:_:)(v8, a1);

  if ((v9 & 1) == 0)
  {
    v11 = static os_log_type_t.error.getter(v10);
    v12 = (void *)HKLogActivity;
    v13 = v11;
    if (os_log_type_enabled(HKLogActivity, v11))
    {
      v14 = a1;
      v15 = v12;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v20 = v14;
      v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4);
      *v17 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v13, "Unexpected energy units %@. Setting energy units to kilojoules", v16, 0xCu);
      v19 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
  }
  return 2;
}

unint64_t sub_100105CC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008274D0;
  if (!qword_1008274D0)
  {
    v1 = objc_opt_self(HKUnit);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1008274D0);
  }
  return result;
}

id sub_100105D04(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t *v6;
  void *v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  objc_super v16;

  v6 = (uint64_t *)&v3[OBJC_IVAR___CHWelcomeViewController_buttonHandler];
  *v6 = a2;
  v6[1] = a3;
  v3[OBJC_IVAR___CHWelcomeViewController_fitnessPlusAvailable] = a1;
  v7 = (void *)objc_opt_self(NSBundle);
  sub_10003AFE0(a2, a3);
  v8 = objc_msgSend(v7, "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for WelcomeViewController();
  v14 = objc_msgSendSuper2(&v16, "initWithTitle:detailText:icon:contentLayout:", v13, 0, 0, 2);
  sub_100022BA4(a2, a3);

  return v14;
}

void sub_100105ECC()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  __CFString **v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  id v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  NSString v31;
  id v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  id v48;
  id v49;
  NSString v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  id v55;
  NSString v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  id v61;
  id v62;
  NSString v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  id v68;
  id v69;
  id v70;
  NSString v71;
  id v72;
  id v73;
  objc_super v74;

  v74.receiver = v0;
  v74.super_class = (Class)type metadata accessor for WelcomeViewController();
  objc_msgSendSuper2(&v74, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = v1;
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v2, "setBackgroundColor:", v4);

  v5 = (void *)objc_opt_self(_HKBehavior);
  v6 = objc_msgSend(v5, "sharedBehavior");
  if (!v6)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "isStandalonePhoneFitnessMode");

  if ((v8 & 1) != 0)
    v9 = &off_10077A798;
  else
    v9 = &off_10077A790;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  v73 = v3;
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend((id)objc_opt_self(UIImage), "smm_systemImageNamed:", v12);

  v14 = objc_msgSend(v5, "sharedBehavior");
  if (!v14)
    goto LABEL_15;
  v15 = v14;
  v16 = objc_msgSend(v14, "isStandalonePhoneFitnessMode");

  if (v16)
    v17 = 0x8000000100688F40;
  else
    v17 = 0x8000000100688E80;
  v18 = (void *)objc_opt_self(NSBundle);
  v19 = objc_msgSend(v18, "mainBundle");
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "localizedStringForKey:value:table:", v20, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v23 = v22;

  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v18, "mainBundle", swift_bridgeObjectRelease(v23).n128_f64[0]);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "localizedStringForKey:value:table:", v26, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v29 = v28;

  swift_bridgeObjectRelease(v17);
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "addBulletedListItemWithTitle:description:image:", v24, v30, v13, swift_bridgeObjectRelease(v29).n128_f64[0]);

  if (*((_BYTE *)v0 + OBJC_IVAR___CHWelcomeViewController_fitnessPlusAvailable) == 1)
  {
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend((id)objc_opt_self(UIImage), "smm_systemImageNamed:", v31);

    v33 = objc_msgSend(v18, "mainBundle");
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "localizedStringForKey:value:table:", v34, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v37 = v36;

    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v18, "mainBundle", swift_bridgeObjectRelease(v37).n128_f64[0]);
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v43 = v42;

    v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "addBulletedListItemWithTitle:description:image:", v38, v44, v32, swift_bridgeObjectRelease(v43).n128_f64[0]);

  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("person.2.fill"));
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  v48 = objc_msgSend((id)objc_opt_self(UIImage), "smm_systemImageNamed:", v47);

  v49 = objc_msgSend(v18, "mainBundle");
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "localizedStringForKey:value:table:", v50, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v53 = v52;

  v54 = String._bridgeToObjectiveC()();
  v55 = objc_msgSend(v18, "mainBundle", swift_bridgeObjectRelease(v53).n128_f64[0]);
  v56 = String._bridgeToObjectiveC()();
  v57 = objc_msgSend(v55, "localizedStringForKey:value:table:", v56, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v59 = v58;

  v60 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "addBulletedListItemWithTitle:description:image:", v54, v60, v48, swift_bridgeObjectRelease(v59).n128_f64[0]);

  v61 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v61, "addTarget:action:forControlEvents:", v0, "didTapContinueButton", 64);
  v62 = objc_msgSend(v18, "mainBundle");
  v63 = String._bridgeToObjectiveC()();
  v64 = objc_msgSend(v62, "localizedStringForKey:value:table:", v63, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v66 = v65;

  v67 = String._bridgeToObjectiveC()();
  objc_msgSend(v61, "setTitle:forState:", v67, 0, swift_bridgeObjectRelease(v66).n128_f64[0]);

  v68 = v61;
  v69 = objc_msgSend(v73, "tertiarySystemGroupedBackgroundColor");
  objc_msgSend(v68, "setTintColor:", v69);

  v70 = v68;
  v71 = String._bridgeToObjectiveC()();
  objc_msgSend(v70, "setAccessibilityIdentifier:", v71);

  v72 = objc_msgSend(v0, "buttonTray");
  objc_msgSend(v72, "addButton:", v70);

  objc_msgSend(v0, "setModalInPresentation:", 1);
}

id sub_100106808()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WelcomeViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WelcomeViewController()
{
  return objc_opt_self(CHWelcomeViewController);
}

uint64_t sub_10010686C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100106890()
{
  uint64_t v0;

  return sub_1005EBF10(*(_QWORD *)(v0 + 16));
}

void destroy for ActivitySharingHighlightsSectionView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

}

uint64_t *initializeWithCopy for ActivitySharingHighlightsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  v6 = (void *)a2[3];
  a1[2] = (uint64_t)v5;
  a1[3] = (uint64_t)v6;
  v7 = (void *)a2[4];
  v8 = (void *)a2[5];
  a1[4] = (uint64_t)v7;
  a1[5] = (uint64_t)v8;
  swift_retain(v3);
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  return a1;
}

uint64_t *assignWithCopy for ActivitySharingHighlightsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = (uint64_t)v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = (uint64_t)v9;
  v11 = v9;

  v12 = (void *)a2[4];
  v13 = (void *)a1[4];
  a1[4] = (uint64_t)v12;
  v14 = v12;

  v15 = (void *)a2[5];
  v16 = (void *)a1[5];
  a1[5] = (uint64_t)v15;
  v17 = v15;

  return a1;
}

uint64_t *assignWithTake for ActivitySharingHighlightsSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];

  v5 = (void *)a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);

  v6 = (void *)a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);

  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingHighlightsSectionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingHighlightsSectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingHighlightsSectionView()
{
  return &type metadata for ActivitySharingHighlightsSectionView;
}

uint64_t sub_100106AE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AB994, 1);
}

uint64_t sub_100106AF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  unint64_t v52;
  uint64_t result;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[4];
  __int128 v80;
  __int128 v81;
  char v82;

  v2 = v1;
  v68 = sub_100047110(&qword_1008205E8);
  __chkstk_darwin(v68);
  v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100047110(&qword_1008205F0);
  __chkstk_darwin(v69);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100047110(&qword_1008205F8);
  __chkstk_darwin(v74);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100047110(&qword_100820600);
  v72 = *(_QWORD *)(v76 - 8);
  v10 = __chkstk_darwin(v76);
  v70 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v71 = (char *)&v67 - v12;
  v77 = sub_100047110(&qword_100820608);
  __chkstk_darwin(v77);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100047110(&qword_100820610);
  __chkstk_darwin(v73);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100047110(&qword_100820618);
  __chkstk_darwin(v78);
  v75 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v2;
  if (*v2)
  {
    KeyPath = swift_getKeyPath(&unk_100624638);
    v20 = swift_getKeyPath(&unk_100624660);
    swift_retain(v18);
    static Published.subscript.getter(&v80, v21, KeyPath, v20);
    swift_release(v18);
    swift_release(KeyPath);
    v22 = swift_release(v20);
    v23 = v80;
    if ((_QWORD)v80)
    {
      if (*(_QWORD *)(v80 + 16))
      {
        v24 = static Axis.Set.horizontal.getter(v22);
        v67 = a1;
        __chkstk_darwin(v24);
        *(&v67 - 2) = v23;
        *(&v67 - 1) = (uint64_t)v2;
        v25 = sub_100047110(&qword_100820698);
        v26 = sub_1001078CC();
        ScrollView.init(_:showsIndicators:content:)(v24, 0, sub_1001078C4, &v67 - 4, v25, v26);
        swift_bridgeObjectRelease(v23);
        v28 = static Edge.Set.horizontal.getter(v27);
        v80 = 0u;
        v81 = 0u;
        v82 = 1;
        v29 = SafeAreaPaddingModifier.init(edges:insets:)(v28, &v80);
        LOBYTE(v25) = static Edge.Set.bottom.getter(v29);
        v30 = EdgeInsets.init(_all:)(15.0);
        v32 = v31;
        v34 = v33;
        v36 = v35;
        sub_100021CC0((uint64_t)v5, (uint64_t)v7, &qword_1008205E8);
        v37 = &v7[*(int *)(v69 + 36)];
        *v37 = v25;
        *((double *)v37 + 1) = v30;
        *((_QWORD *)v37 + 2) = v32;
        *((_QWORD *)v37 + 3) = v34;
        *((_QWORD *)v37 + 4) = v36;
        v37[40] = 0;
        v38 = sub_10001BE90((uint64_t)v5, &qword_1008205E8);
        LOBYTE(v25) = static Edge.Set.horizontal.getter(v38);
        v39 = static SafeAreaRegions.all.getter();
        sub_100021CC0((uint64_t)v7, (uint64_t)v9, &qword_1008205F0);
        v40 = v74;
        v41 = &v9[*(int *)(v74 + 36)];
        *(_QWORD *)v41 = v39;
        v41[8] = v25;
        sub_10001BE90((uint64_t)v7, &qword_1008205F0);
        v42 = sub_100107760();
        v43 = sub_100107880();
        v44 = v70;
        View.scrollTargetBehavior<A>(_:)(v43, v40, &type metadata for HighlightsPagingScrollTargetBehavior, v42, v43);
        sub_10001BE90((uint64_t)v9, &qword_1008205F8);
        v45 = v71;
        v46 = v72;
        v47 = v76;
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v44, v76);
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v16, v45, v47);
        swift_storeEnumTagMultiPayload(v16, v73, 1);
        v48 = sub_100047110(&qword_100820630);
        v49 = sub_100107680();
        v79[0] = v40;
        v79[1] = &type metadata for HighlightsPagingScrollTargetBehavior;
        v79[2] = v42;
        v79[3] = v43;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v79, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
        v51 = (uint64_t)v75;
        _ConditionalContent<>.init(storage:)(v16, v48, v47, v49, OpaqueTypeConformance2);
        sub_100021CC0(v51, (uint64_t)v14, &qword_100820618);
        swift_storeEnumTagMultiPayload(v14, v77, 0);
        v52 = sub_1001075D0();
        _ConditionalContent<>.init(storage:)(v14, v78, &type metadata for EmptyView, v52, &protocol witness table for EmptyView);
        sub_10001BE90(v51, &qword_100820618);
        return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v45, v47);
      }
      else
      {
        swift_bridgeObjectRelease(v80);
        v56 = static Edge.Set.all.getter(v55);
        *v16 = 0;
        *(_OWORD *)(v16 + 8) = xmmword_100624580;
        v16[24] = v56;
        *((_OWORD *)v16 + 2) = xmmword_100624590;
        *((_OWORD *)v16 + 3) = xmmword_1006245A0;
        v16[64] = 0;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        v16[104] = 1;
        swift_storeEnumTagMultiPayload(v16, v73, 0);
        v57 = sub_100047110(&qword_100820630);
        v58 = sub_100107680();
        v59 = sub_100107760();
        v60 = sub_100107880();
        *(_QWORD *)&v80 = v74;
        *((_QWORD *)&v80 + 1) = &type metadata for HighlightsPagingScrollTargetBehavior;
        *(_QWORD *)&v81 = v59;
        *((_QWORD *)&v81 + 1) = v60;
        v61 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
        v62 = (uint64_t)v75;
        _ConditionalContent<>.init(storage:)(v16, v57, v76, v58, v61);
        sub_100021CC0(v62, (uint64_t)v14, &qword_100820618);
        swift_storeEnumTagMultiPayload(v14, v77, 0);
        v63 = sub_1001075D0();
        _ConditionalContent<>.init(storage:)(v14, v78, &type metadata for EmptyView, v63, &protocol witness table for EmptyView);
        return sub_10001BE90(v62, &qword_100820618);
      }
    }
    else
    {
      swift_storeEnumTagMultiPayload(v14, v77, 1);
      v54 = sub_1001075D0();
      return _ConditionalContent<>.init(storage:)(v14, v78, &type metadata for EmptyView, v54, &protocol witness table for EmptyView);
    }
  }
  else
  {
    v64 = v2[1];
    v65 = type metadata accessor for ActivitySharingHighlightDataProvider(0);
    v66 = sub_1000083D8(&qword_10081EDC8, type metadata accessor for ActivitySharingHighlightDataProvider, (uint64_t)&unk_100633F88);
    result = EnvironmentObject.error()(0, v64, v65, v66);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001071D4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _OWORD *v14;
  __int128 v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v6 = sub_100047110(&qword_1008206B0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0x4024000000000000;
  v9[16] = 0;
  sub_100047110(&qword_1008206B8);
  v28 = a1;
  v29 = *a2;
  v10 = (void *)*((_QWORD *)a2 + 2);
  v11 = (void *)*((_QWORD *)a2 + 3);
  v13 = (void *)*((_QWORD *)a2 + 4);
  v12 = (void *)*((_QWORD *)a2 + 5);
  v14 = (_OWORD *)swift_allocObject(&unk_100785DF8, 64, 7);
  v15 = a2[1];
  v14[1] = *a2;
  v14[2] = v15;
  v14[3] = a2[2];
  swift_bridgeObjectRetain(a1);
  sub_10010799C(&v29);
  v16 = v10;
  v17 = v11;
  v18 = v13;
  v19 = v12;
  v20 = sub_100047110(&qword_1008206C0);
  v21 = type metadata accessor for UUID(0);
  v22 = type metadata accessor for ActivitySharingHighlightViewWrapper(0);
  v23 = sub_100028384(&qword_1008206C8, &qword_1008206C0, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_1000083D8(&qword_1008206D0, type metadata accessor for ActivitySharingHighlightViewWrapper, (uint64_t)&unk_100632010);
  v25 = sub_1000083D8(&qword_1008206D8, type metadata accessor for ActivitySharingHighlight, (uint64_t)&unk_10062E848);
  ForEach<>.init(_:content:)(&v28, sub_100107994, v14, v20, v21, v22, v23, v24, v25);
  sub_100021CC0((uint64_t)v9, a3, &qword_1008206B0);
  *(_WORD *)(a3 + *(int *)(sub_100047110(&qword_100820698) + 36)) = 256;
  return sub_10001BE90((uint64_t)v9, &qword_1008206B0);
}

uint64_t sub_1001073D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v6 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for ActivitySharingHighlightViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F8C8(a1, (uint64_t)v11, type metadata accessor for ActivitySharingHighlight);
  v12 = (void *)a2[2];
  v13 = (void *)a2[3];
  v14 = (void *)a2[4];
  v15 = (void *)a2[5];
  *(_QWORD *)&v11[v9[5]] = v12;
  *(_QWORD *)&v11[v9[6]] = v13;
  *(_QWORD *)&v11[v9[7]] = v14;
  *(_QWORD *)&v11[v9[8]] = v15;
  v11[v9[9]] = 0;
  v16 = v12;
  v17 = v13;
  v18 = v14;
  static Calendar.autoupdatingCurrent.getter(v15);
  FIUIRelativeDateTimeFormatter.init(calendar:)(v8);
  v19 = v9[11];
  v20 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v20, "setDateStyle:", 1);
  *(_QWORD *)&v11[v19] = v20;
  sub_10004F8C8((uint64_t)v11, a3, type metadata accessor for ActivitySharingHighlightViewModel);
  v21 = (_QWORD *)(a3 + *(int *)(type metadata accessor for ActivitySharingHighlightViewWrapper(0) + 20));
  v22 = type metadata accessor for ActivitySharingNavigationCoordinator();
  v23 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
  *v21 = EnvironmentObject.init()(v22, v23);
  v21[1] = v24;
  return sub_1001079C4((uint64_t)v11);
}

uint64_t sub_100107590@<X0>(uint64_t a1@<X8>)
{
  return sub_100106AF0(a1);
}

unint64_t sub_1001075D0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100820620;
  if (!qword_100820620)
  {
    v1 = sub_100007050(&qword_100820618);
    sub_100107680();
    v2[0] = sub_100007050(&qword_1008205F8);
    v2[1] = &type metadata for HighlightsPagingScrollTargetBehavior;
    v2[2] = sub_100107760();
    v2[3] = sub_100107880();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820620);
  }
  return result;
}

unint64_t sub_100107680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820628;
  if (!qword_100820628)
  {
    v1 = sub_100007050(&qword_100820630);
    sub_1000F4518(&qword_100820638, &qword_100820640, (void (*)(void))sub_10010771C);
    sub_100028384(&qword_100820650, &qword_100820658, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820628);
  }
  return result;
}

unint64_t sub_10010771C()
{
  unint64_t result;

  result = qword_100820648;
  if (!qword_100820648)
  {
    result = swift_getWitnessTable(&unk_100632104, &type metadata for ActivitySharingHighlightEmptyView);
    atomic_store(result, (unint64_t *)&qword_100820648);
  }
  return result;
}

unint64_t sub_100107760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820660;
  if (!qword_100820660)
  {
    v1 = sub_100007050(&qword_1008205F8);
    sub_1000F4518(&qword_100820668, &qword_1008205F0, (void (*)(void))sub_1001077E4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820660);
  }
  return result;
}

unint64_t sub_1001077E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820670;
  if (!qword_100820670)
  {
    v1 = sub_100007050(&qword_1008205E8);
    sub_100028384(&qword_100820678, &qword_100820680, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    sub_1000083D8((unint64_t *)&qword_100820688, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820670);
  }
  return result;
}

unint64_t sub_100107880()
{
  unint64_t result;

  result = qword_100820690;
  if (!qword_100820690)
  {
    result = swift_getWitnessTable(&unk_1006497E8, &type metadata for HighlightsPagingScrollTargetBehavior);
    atomic_store(result, (unint64_t *)&qword_100820690);
  }
  return result;
}

uint64_t sub_1001078C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001071D4(*(_QWORD *)(v1 + 16), *(__int128 **)(v1 + 24), a1);
}

unint64_t sub_1001078CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008206A0;
  if (!qword_1008206A0)
  {
    v1 = sub_100007050(&qword_100820698);
    sub_100028384(&qword_1008206A8, &qword_1008206B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008206A0);
  }
  return result;
}

uint64_t sub_100107950()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100107994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001073D0(a1, (_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_10010799C(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_1001079C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActivitySharingHighlightViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100107A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008206E0;
  if (!qword_1008206E0)
  {
    v1 = sub_100007050(&qword_1008206E8);
    sub_1001075D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008206E0);
  }
  return result;
}

unint64_t sub_100107A70@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100107D94(*a1);
  *a2 = result;
  return result;
}

void sub_100107A98(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_100107AA4(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F008;
}

id sub_100107AE0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalDay();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GoalDay()
{
  return objc_opt_self(_TtC10FitnessApp7GoalDay);
}

uint64_t getEnumTagSinglePayload for GoalDay.Day(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalDay.Day(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100107C1C + 4 * byte_100624685[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100107C50 + 4 * byte_100624680[v4]))();
}

uint64_t sub_100107C50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100107C58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100107C60);
  return result;
}

uint64_t sub_100107C6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100107C74);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100107C78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100107C80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GoalDay.Day()
{
  return &type metadata for GoalDay.Day;
}

unint64_t sub_100107CA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820730;
  if (!qword_100820730)
  {
    v1 = sub_100007050(&qword_100820738);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100820730);
  }
  return result;
}

unint64_t sub_100107CF0()
{
  unint64_t result;

  result = qword_100820740;
  if (!qword_100820740)
  {
    result = swift_getWitnessTable(&unk_100624754, &type metadata for GoalDay.Day);
    atomic_store(result, (unint64_t *)&qword_100820740);
  }
  return result;
}

unint64_t sub_100107D38()
{
  unint64_t result;

  result = qword_100820748;
  if (!qword_100820748)
  {
    result = swift_getWitnessTable(&unk_100624714, &type metadata for GoalDay.Day);
    atomic_store(result, (unint64_t *)&qword_100820748);
  }
  return result;
}

void sub_100107D7C(_BYTE *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *(_BYTE *)(*v1 + OBJC_IVAR____TtC10FitnessApp7GoalDay_day);
}

unint64_t sub_100107D94(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

uint64_t destroy for IntervalsHeroView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));

  swift_release(*(_QWORD *)(a1 + 40));
  return swift_release(*(_QWORD *)(a1 + 56));
}

_QWORD *initializeWithCopy for IntervalsHeroView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  v8 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v8;
  v9 = v3;
  swift_retain(v4);
  swift_retain(v5);
  v10 = v6;
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for IntervalsHeroView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = *(void **)(a2 + 24);
  v12 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  v13 = v11;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

__n128 initializeWithTake for HistoryCardFactory(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IntervalsHeroView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryCardFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryCardFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IntervalsHeroView()
{
  return &type metadata for IntervalsHeroView;
}

uint64_t sub_100108058(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABA38, 1);
}

uint64_t sub_100108068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;

  v5 = sub_100047110((uint64_t *)&unk_100828370);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_OWORD *)(v2 + 32);
  v15 = swift_retain(*((_QWORD *)&v22 + 1));
  IntervalsMetricsPublisher.intervalStartDate.getter(v15);
  sub_10004D634((uint64_t)&v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001BE90((uint64_t)v10, (uint64_t *)&unk_100828370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, a1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v21 = *(_OWORD *)(v2 + 48);
    v17 = *((_QWORD *)&v21 + 1);
    v18 = swift_retain(*((_QWORD *)&v21 + 1));
    v19 = WorkoutStatePublisher.pauseTimes.getter(v18);
    sub_10004D634((uint64_t)&v21);
    v20 = swift_retain(v17);
    WorkoutStatePublisher.lastUnbalancedPauseStart.getter(v20);
    sub_10004D634((uint64_t)&v21);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)(a1, v19, v8);
    swift_bridgeObjectRelease(v19);
    sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828370);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

void sub_100108238(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  int *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  NSString v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double (*v81)(uint64_t);
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  double (**v87)(uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t OpaqueTypeConformance2;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  id v103;
  char *v104;
  uint64_t v105;
  char *v106;
  void *v107;
  id v108;
  uint64_t v109;
  char *v110;
  double v111;
  __n128 v112;
  double v113;
  double v114;
  double v115;
  float v116;
  __n128 v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  __n128 v123;
  double v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  char v173;
  __int128 v174;
  __int128 v175;

  v170 = a2;
  v158 = type metadata accessor for WorkoutViewStyle(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Date(0);
  v147 = *(_QWORD *)(v148 - 8);
  v4 = __chkstk_darwin(v148);
  v6 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v146 = (uint64_t)&v143 - v7;
  v151 = type metadata accessor for AnimatingOpenGoalTimeRing(0);
  __chkstk_darwin(v151);
  v144 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100047110(&qword_100820768);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100047110(&qword_100820770);
  v10 = __chkstk_darwin(v169);
  v150 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v155 = (uint64_t)&v143 - v12;
  v13 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v13);
  v145 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for MirrorIntervalTimeView(0);
  v15 = __chkstk_darwin(v164);
  v17 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v149 = (uint64_t)&v143 - v18;
  v166 = sub_100047110(&qword_100820778);
  __chkstk_darwin(v166);
  v168 = (uint64_t)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100047110(&qword_100820780);
  __chkstk_darwin(v163);
  v21 = (char *)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100047110(&qword_100820788);
  __chkstk_darwin(v167);
  v165 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for StepType(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v143 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = *(_OWORD *)(a1 + 32);
  v30 = *((_QWORD *)&v175 + 1);
  v31 = swift_retain(*((_QWORD *)&v175 + 1));
  v32 = IntervalsMetricsPublisher.intervalThisStep.getter(v31);
  v33 = sub_10004D634((uint64_t)&v175);
  v162 = v25;
  v161 = v26;
  v159 = v29;
  v160 = v27;
  if (v32)
  {
    v34 = a1;
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for StepType.rest(_:), v26);
    sub_100109248();
    v35 = static NLSessionActivityGoal.makeOpenGoal()();
    v34 = a1;
    v36 = *(id *)(a1 + 24);
    UUID.init()(v36);
    v37 = type metadata accessor for WorkoutStep(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v33 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v29, v35, v36, v25, 0, 0);
    v32 = v33;
  }
  v38 = (void *)WorkoutStep.goal.getter(v33);
  v39 = objc_msgSend(v38, "goalTypeIdentifier", swift_release(v32).n128_f64[0]);

  if (v39 == (id)2)
  {
    v47 = swift_retain(v30);
    v48 = (uint64_t)v145;
    IntervalsMetricsPublisher.intervalStartDate.getter(v47);
    sub_10004D634((uint64_t)&v175);
    v49 = swift_retain(v30);
    v50 = IntervalsMetricsPublisher.intervalThisStep.getter(v49);
    sub_10004D634((uint64_t)&v175);
    v51 = v34;
    if (!v50)
    {
      v52 = v159;
      (*(void (**)(char *, _QWORD, uint64_t))(v160 + 104))(v159, enum case for StepType.rest(_:), v161);
      sub_100109248();
      v53 = static NLSessionActivityGoal.makeOpenGoal()();
      v54 = *(id *)(v51 + 24);
      v55 = v162;
      UUID.init()(v54);
      v56 = type metadata accessor for WorkoutStep(0);
      swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
      v50 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v52, v53, v54, v55, 0, 0);
    }
    v171 = *(_OWORD *)(v51 + 48);
    v57 = *((_QWORD *)&v171 + 1);
    v58 = swift_retain(*((_QWORD *)&v171 + 1));
    v59 = WorkoutStatePublisher.pauseTimes.getter(v58);
    sub_10004D634((uint64_t)&v171);
    v60 = (int *)v164;
    v61 = swift_retain(v57);
    WorkoutStatePublisher.lastUnbalancedPauseStart.getter(v61);
    sub_10004D634((uint64_t)&v171);
    if (qword_10081D528 != -1)
      swift_once(&qword_10081D528, sub_10010A2B0);
    v62 = qword_100869CC8;
    sub_100045AD4(v48, (uint64_t)v17, (uint64_t *)&unk_100828370);
    *(_QWORD *)&v17[v60[5]] = v50;
    *(_QWORD *)&v17[v60[6]] = v59;
    v17[v60[8]] = 1;
    v63 = &v17[v60[9]];
    *(_QWORD *)v63 = v62;
    v63[8] = 0;
    v17[v60[10]] = 0;
    v64 = v149;
    sub_10010949C((uint64_t)v17, v149);
    sub_1001094E0(v64, (uint64_t)v21);
    swift_storeEnumTagMultiPayload(v21, v163, 1);
    v65 = sub_100047110(&qword_1008207B0);
    v66 = sub_100028384(&qword_1008207A8, &qword_1008207B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v67 = sub_1000083D8(&qword_1008207B8, type metadata accessor for MirrorIntervalTimeView, (uint64_t)&unk_100629B88);
    v68 = (uint64_t)v165;
    _ConditionalContent<>.init(storage:)(v21, v65, v60, v66, v67);
    v69 = v168;
    sub_100021CC0(v68, v168, &qword_100820788);
    swift_storeEnumTagMultiPayload(v69, v166, 0);
    v70 = sub_100109340();
    v71 = sub_1001093DC();
    _ConditionalContent<>.init(storage:)(v69, v167, v169, v70, v71);
    sub_10001BE90(v68, &qword_100820788);
    sub_100011F54(v64, type metadata accessor for MirrorIntervalTimeView);
  }
  else
  {
    v41 = v34;
    if (v39 == (id)1)
    {
      v42 = swift_retain(v30);
      v43 = IntervalsMetricsPublisher.intervalThisStep.getter(v42);
      v44 = sub_10004D634((uint64_t)&v175);
      if (v43)
      {
        v45 = v161;
        v46 = v160;
      }
      else
      {
        v100 = v160;
        v101 = v159;
        v45 = v161;
        (*(void (**)(char *, _QWORD, uint64_t))(v160 + 104))(v159, enum case for StepType.rest(_:), v161);
        sub_100109248();
        v102 = static NLSessionActivityGoal.makeOpenGoal()();
        v103 = *(id *)(v34 + 24);
        v104 = v162;
        UUID.init()(v103);
        v105 = type metadata accessor for WorkoutStep(0);
        swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
        v106 = v104;
        v46 = v100;
        v44 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v101, v102, v103, v106, 0, 0);
        v43 = v44;
      }
      v107 = (void *)WorkoutStep.goal.getter(v44);
      v108 = objc_msgSend(v107, "goalTypeIdentifier", swift_release(v43).n128_f64[0]);

      if (qword_10081D528 != -1)
        swift_once(&qword_10081D528, sub_10010A2B0);
      v109 = qword_100869CC8;
      v110 = v162;
      if (qword_10081E0A8 != -1)
        swift_once(&qword_10081E0A8, sub_1005CFD2C);
      v111 = *(double *)&qword_10086B028;
      v112 = swift_retain(v30);
      v113 = IntervalsMetricsPublisher.intervalProgress.getter(v112);
      sub_10004D634((uint64_t)&v175);
      v114 = 0.0;
      if (v113 >= 0.0)
        v114 = v113;
      if (v114 <= 1.0)
        v115 = v114;
      else
        v115 = 1.0;
      v116 = v111;
      v117 = swift_retain(v30);
      v118 = IntervalsMetricsPublisher.intervalThisStep.getter(v117);
      sub_10004D634((uint64_t)&v175);
      if (!v118)
      {
        v119 = v159;
        (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v159, enum case for StepType.rest(_:), v45);
        sub_100109248();
        v120 = static NLSessionActivityGoal.makeOpenGoal()();
        v121 = *(id *)(v41 + 24);
        UUID.init()(v121);
        v122 = type metadata accessor for WorkoutStep(0);
        swift_allocObject(v122, *(unsigned int *)(v122 + 48), *(unsigned __int16 *)(v122 + 52));
        v118 = WorkoutStep.init(_:goal:activityType:uuid:displayName:)(v119, v120, v121, v110, 0, 0);
      }
      v123 = swift_retain(v30);
      v124 = IntervalsMetricsPublisher.intervalDistance.getter(v123);
      sub_10004D634((uint64_t)&v175);
      v125 = *(_QWORD *)(v41 + 24);
      v126 = *(id *)v41;
      v127 = FIUIDistanceTypeForActivityType(v125);
      v128 = qword_100869CC8;
      v129 = static Alignment.center.getter(v127);
      _FrameLayout.init(width:height:alignment:)(&v171, v128, 0, v128, 0, v129, v130);
      v131 = v171;
      v132 = BYTE8(v171);
      v133 = v172;
      v134 = v173;
      v135 = v126;
      *(_QWORD *)v21 = v108;
      *((_QWORD *)v21 + 1) = v109;
      *((float *)v21 + 4) = v116;
      *((double *)v21 + 3) = v115;
      *((_QWORD *)v21 + 4) = v118;
      *((double *)v21 + 5) = v124;
      *((_QWORD *)v21 + 6) = v135;
      *((_QWORD *)v21 + 7) = v127;
      *((_QWORD *)v21 + 8) = v131;
      v21[72] = v132;
      *((_QWORD *)v21 + 10) = v133;
      v21[88] = v134;
      *((_OWORD *)v21 + 6) = v174;
      swift_retain(v118);
      swift_storeEnumTagMultiPayload(v21, v163, 0);
      v136 = sub_100047110(&qword_1008207B0);
      v137 = sub_100028384(&qword_1008207A8, &qword_1008207B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v138 = sub_1000083D8(&qword_1008207B8, type metadata accessor for MirrorIntervalTimeView, (uint64_t)&unk_100629B88);
      v139 = (uint64_t)v165;
      _ConditionalContent<>.init(storage:)(v21, v136, v164, v137, v138);
      v140 = v168;
      sub_100021CC0(v139, v168, &qword_100820788);
      swift_storeEnumTagMultiPayload(v140, v166, 0);
      v141 = sub_100109340();
      v142 = sub_1001093DC();
      _ConditionalContent<>.init(storage:)(v140, v167, v169, v141, v142);
      sub_10001BE90(v139, &qword_100820788);

      swift_release(v118);
    }
    else
    {
      Date.init()(v40);
      v72 = v146;
      sub_100108068((uint64_t)v6, v146);
      v73 = v147;
      v74 = v148;
      (*(void (**)(char *, uint64_t))(v147 + 8))(v6, v148);
      v75 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v76 = String._bridgeToObjectiveC()();
      v77 = objc_msgSend(v75, "localizedStringForKey:value:table:", v76, 0, 0);

      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v80 = v79;

      v81 = (double (*)(uint64_t))swift_allocObject(&unk_100786018, 80, 7);
      v82 = *(_OWORD *)(v41 + 16);
      *((_OWORD *)v81 + 1) = *(_OWORD *)v41;
      *((_OWORD *)v81 + 2) = v82;
      v83 = *(_OWORD *)(v41 + 48);
      *((_OWORD *)v81 + 3) = *(_OWORD *)(v41 + 32);
      *((_OWORD *)v81 + 4) = v83;
      v84 = (uint64_t)v144;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v144, v72, v74);
      v85 = v151;
      v86 = (uint64_t *)(v84 + *(int *)(v151 + 20));
      *v86 = v78;
      v86[1] = v80;
      v87 = (double (**)(uint64_t))(v84 + *(int *)(v85 + 24));
      *v87 = sub_1001092D0;
      v87[1] = v81;
      v88 = v157;
      v89 = v156;
      v90 = v158;
      (*(void (**)(char *, _QWORD, uint64_t))(v157 + 104))(v156, enum case for WorkoutViewStyle.iOSHeroEnclosedMetric(_:), v158);
      sub_1001092D8(v41);
      v91 = sub_1000083D8(&qword_100820798, type metadata accessor for AnimatingOpenGoalTimeRing, (uint64_t)&unk_100649048);
      v92 = v152;
      View.workoutViewStyle(_:)(v89, v85, v91);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
      sub_100011F54(v84, type metadata accessor for AnimatingOpenGoalTimeRing);
      *(_QWORD *)&v171 = v85;
      *((_QWORD *)&v171 + 1) = v91;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v171, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
      v94 = (uint64_t)v150;
      v95 = v154;
      View.accessibility(identifier:)(0xD000000000000017, 0x8000000100688FB0, v154, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v153 + 8))(v92, v95);
      v96 = v155;
      sub_100045AD4(v94, v155, &qword_100820770);
      v97 = v168;
      sub_100021CC0(v96, v168, &qword_100820770);
      swift_storeEnumTagMultiPayload(v97, v166, 1);
      v98 = sub_100109340();
      v99 = sub_1001093DC();
      _ConditionalContent<>.init(storage:)(v97, v167, v169, v98, v99);
      sub_10001BE90(v96, &qword_100820770);
    }
  }
}

double sub_100109054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v8;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100108068(a1, (uint64_t)v5);
  v6 = Date.timeIntervalSince(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

uint64_t sub_1001090F8()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[4];

  v1 = type metadata accessor for WorkoutViewStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100820750);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = v0[1];
  v15[0] = *v0;
  v15[1] = v9;
  v10 = v0[3];
  v15[2] = v0[2];
  v15[3] = v10;
  *v8 = static Alignment.center.getter(v6);
  v8[1] = v11;
  v12 = sub_100047110(&qword_100820758);
  sub_100108238((uint64_t)v15, (uint64_t)v8 + *(int *)(v12 + 44));
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for WorkoutViewStyle.iOSHeroEnclosedMetric(_:), v1);
  v13 = sub_100028384(&qword_100820760, &qword_100820750, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.workoutViewStyle(_:)(v4, v5, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10001BE90((uint64_t)v8, &qword_100820750);
}

unint64_t sub_100109248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820790;
  if (!qword_100820790)
  {
    v1 = objc_opt_self(NLSessionActivityGoal);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100820790);
  }
  return result;
}

uint64_t sub_100109284()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

double sub_1001092D0(uint64_t a1)
{
  return sub_100109054(a1);
}

uint64_t sub_1001092D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(id *)a1;
  swift_retain(v2);
  swift_retain(v3);
  v8 = v4;
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

unint64_t sub_100109340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008207A0;
  if (!qword_1008207A0)
  {
    v1 = sub_100007050(&qword_100820788);
    sub_100028384(&qword_1008207A8, &qword_1008207B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_1000083D8(&qword_1008207B8, type metadata accessor for MirrorIntervalTimeView, (uint64_t)&unk_100629B88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008207A0);
  }
  return result;
}

unint64_t sub_1001093DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1008207C0;
  if (!qword_1008207C0)
  {
    v1 = sub_100007050(&qword_100820770);
    v2[0] = type metadata accessor for AnimatingOpenGoalTimeRing(255);
    v2[1] = sub_1000083D8(&qword_100820798, type metadata accessor for AnimatingOpenGoalTimeRing, (uint64_t)&unk_100649048);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
    sub_1000083D8((unint64_t *)&qword_10081EFA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008207C0);
  }
  return result;
}

uint64_t sub_10010949C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MirrorIntervalTimeView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001094E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MirrorIntervalTimeView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100109524()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_100820750);
  v1[1] = sub_100028384(&qword_100820760, &qword_100820750, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.workoutViewStyle(_:)>>, 1);
}

void sub_100109678()
{
  char *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  objc_super v24;

  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for WorkoutDetailedPowerViewController();
  objc_msgSendSuper2(&v24, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v1;
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "systemBackgroundColor");
  objc_msgSend(v2, "setBackgroundColor:", v4);

  v5 = objc_msgSend(v0, "navigationItem");
  v6 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 24, v0, "close");
  objc_msgSend(v5, "setRightBarButtonItem:", v6);

  v7 = objc_msgSend(v0, "navigationItem");
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setTitle:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v14 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedPowerViewController_powerController];
  v15 = objc_msgSend(v14, "view");
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = v15;
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v17 = objc_msgSend(v14, "view");
  if (!v17)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v18 = v17;
  v19 = objc_msgSend(v3, "clearColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  v20 = objc_msgSend(v0, "view");
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21 = v20;
  v22 = objc_msgSend(v14, "view");
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v21, "addSubview:", v22);

    objc_msgSend(v0, "addChildViewController:", v14);
    objc_msgSend(v14, "didMoveToParentViewController:", v0);
    sub_100109BA8();
    return;
  }
LABEL_11:
  __break(1u);
}

void sub_1001099C4(char a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  objc_super v14;

  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for WorkoutDetailedPowerViewController();
  objc_msgSendSuper2(&v14, "viewWillAppear:", a1 & 1);
  v3 = objc_msgSend(objc_allocWithZone((Class)UINavigationBarAppearance), "init");
  objc_msgSend(v3, "configureWithOpaqueBackground");
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v3;
  v6 = objc_msgSend(v4, "systemBackgroundColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = v5;
  v8 = objc_msgSend(v4, "systemBackgroundColor");
  objc_msgSend(v7, "setShadowColor:", v8);

  v9 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v9, "setScrollEdgeAppearance:", v7);

  v10 = objc_msgSend(v1, "tabBarController");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, "tabBar");

    v13 = objc_msgSend(objc_allocWithZone((Class)UITabBarAppearance), "init");
    objc_msgSend(v12, "setScrollEdgeAppearance:", v13);

  }
}

void sub_100109BA8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  Class isa;

  v1 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v1, 64, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100623750;
  v3 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedPowerViewController_powerController];
  v4 = objc_msgSend(v3, "view");
  if (!v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v4;
  v6 = objc_msgSend(v4, "topAnchor");

  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "safeAreaLayoutGuide");

  v10 = objc_msgSend(v9, "topAnchor");
  v11 = objc_msgSend(v6, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v2 + 32) = v11;
  v12 = objc_msgSend(v3, "view");
  if (!v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "leadingAnchor");

  v15 = objc_msgSend(v0, "view");
  if (!v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "safeAreaLayoutGuide");

  v18 = objc_msgSend(v17, "leadingAnchor");
  v19 = objc_msgSend(v14, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v2 + 40) = v19;
  v20 = objc_msgSend(v3, "view");
  if (!v20)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "trailingAnchor");

  v23 = objc_msgSend(v0, "view");
  if (!v23)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "safeAreaLayoutGuide");

  v26 = objc_msgSend(v25, "trailingAnchor");
  v27 = objc_msgSend(v22, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v2 + 48) = v27;
  v28 = objc_msgSend(v3, "view");
  if (!v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "bottomAnchor");

  v31 = objc_msgSend(v0, "view");
  if (v31)
  {
    v32 = v31;
    v33 = (void *)objc_opt_self(NSLayoutConstraint);
    v34 = objc_msgSend(v32, "safeAreaLayoutGuide");

    v35 = objc_msgSend(v34, "bottomAnchor");
    v36 = objc_msgSend(v30, "constraintEqualToAnchor:", v35);

    *(_QWORD *)(v2 + 56) = v36;
    specialized Array._endMutation()(v37);
    sub_100039898();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "activateConstraints:", isa, swift_bridgeObjectRelease(v2).n128_f64[0]);

    return;
  }
LABEL_17:
  __break(1u);
}

id sub_100109FA8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailedPowerViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailedPowerViewController()
{
  return objc_opt_self(CHWorkoutDetailedPowerViewController);
}

id sub_10010A080(void *a1, void *a2, void *a3, void *a4, char a5)
{
  char *v5;
  id v11;
  id v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  id v28;
  objc_super v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;

  *(_QWORD *)&v5[OBJC_IVAR___CHWorkoutDetailedPowerViewController_workout] = a1;
  *(_QWORD *)&v5[OBJC_IVAR___CHWorkoutDetailedPowerViewController_workoutActivity] = a2;
  v11 = a2;
  v12 = a1;
  v13 = v11;
  v14 = v5;
  v15 = v12;
  v16 = objc_msgSend(a4, "dataCalculator");
  v17 = type metadata accessor for WorkoutDetailPowerDataStore(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = a4;
  v19 = sub_1004404F4(v15, a2, v16, v18);

  *(_QWORD *)&v14[OBJC_IVAR___CHWorkoutDetailedPowerViewController_dataStore] = v19;
  v20 = sub_10010A268();
  swift_retain(v19);
  v21 = a3;
  v22 = ObservedObject.init(wrappedValue:)(v19, v17, v20);
  v24 = v23;
  v37 = 0;
  State.init(wrappedValue:)(&v31, &v37, &type metadata for Bool);
  v25 = v31;
  v26 = v32;
  v27 = &v14[OBJC_IVAR___CHWorkoutDetailedPowerViewController_powerView];
  *(_QWORD *)v27 = v22;
  *((_QWORD *)v27 + 1) = v24;
  *((_QWORD *)v27 + 2) = v21;
  v27[24] = a5;
  v27[32] = v25;
  *((_QWORD *)v27 + 5) = v26;
  v31 = v22;
  v32 = v24;
  v33 = v21;
  v34 = a5;
  v35 = v25;
  v36 = v26;
  objc_allocWithZone((Class)sub_100047110(&qword_100820820));
  swift_retain(v26);
  v28 = v21;
  swift_retain(v24);
  *(_QWORD *)&v14[OBJC_IVAR___CHWorkoutDetailedPowerViewController_powerController] = UIHostingController.init(rootView:)(&v31);

  v30.receiver = v14;
  v30.super_class = (Class)type metadata accessor for WorkoutDetailedPowerViewController();
  return objc_msgSendSuper2(&v30, "initWithNibName:bundle:", 0, 0);
}

unint64_t sub_10010A268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820818;
  if (!qword_100820818)
  {
    v1 = type metadata accessor for WorkoutDetailPowerDataStore(255);
    result = swift_getWitnessTable(&unk_10063CB6C, v1);
    atomic_store(result, (unint64_t *)&qword_100820818);
  }
  return result;
}

void sub_10010A2B0(double a1, double a2, __n128 a3, double a4, __n128 a5)
{
  a3.n128_u64[0] = 0x4071200000000000;
  a5.n128_u64[0] = 0x4071200000000000;
  qword_100869CC8 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(200.0, 274.0, a3, 274.0, a5, 308.0, 308.0);
}

uint64_t getEnumTagSinglePayload for MirrorHeroGraphicsMetricsViewLayout(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorHeroGraphicsMetricsViewLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10010A3E8 + 4 * byte_100624885[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10010A41C + 4 * asc_100624880[v4]))();
}

uint64_t sub_10010A41C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010A424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010A42CLL);
  return result;
}

uint64_t sub_10010A438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10010A440);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10010A444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010A44C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MirrorHeroGraphicsMetricsViewLayout()
{
  return &type metadata for MirrorHeroGraphicsMetricsViewLayout;
}

uint64_t sub_10010A468(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;

  return sub_10010A4C0(a9, a1, a2, a3, a4, a10, *v10);
}

unint64_t sub_10010A47C()
{
  unint64_t result;

  result = qword_100820828;
  if (!qword_100820828)
  {
    result = swift_getWitnessTable(&unk_1006248C4, &type metadata for MirrorHeroGraphicsMetricsViewLayout);
    atomic_store(result, (unint64_t *)&qword_100820828);
  }
  return result;
}

uint64_t sub_10010A4C0(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  void (*v33)(char *, uint64_t);
  double v34;
  uint64_t v35;
  uint64_t result;
  void *v37;
  id v38;
  char v39;
  double v40;
  id v41;
  char v42;
  double v43;
  id v44;
  char v45;
  double v46;
  id v47;
  char v48;
  double v49;
  double v50;
  id v51;
  char v52;
  id v53;
  char v54;
  double v55;
  id v56;
  char v57;
  __n128 v58;
  __n128 v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  void (*v67)(char *, _QWORD);
  BOOL v68;
  double v69;
  double v70;
  double v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  BOOL v83;
  double v84;
  double v85;
  char *v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  double v95;
  double v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  uint64_t v124;
  double v125;
  char *v126;
  char *v127;
  double v128;
  double v129;
  double v130;
  double v131;
  uint64_t v132;
  char *v133;
  double v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[2];

  v135 = a7;
  v136 = type metadata accessor for LayoutSubview(0);
  v132 = *(_QWORD *)(v136 - 8);
  v12 = __chkstk_darwin(v136);
  v126 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v127 = (char *)&v126 - v15;
  __chkstk_darwin(v14);
  v133 = (char *)&v126 - v16;
  v134 = COERCE_DOUBLE(type metadata accessor for MetricPlatterConstants(0));
  v131 = *(double *)(*(_QWORD *)&v134 - 8);
  __chkstk_darwin(*(_QWORD *)&v134);
  v18 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LayoutSubviews(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v126 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v126 - v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v29((char *)&v126 - v27, a1, v19);
  v30 = sub_10010AEA4();
  dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
  dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
  v31 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30);
  v29(v26, (uint64_t)v28, v19);
  if (v31 == 5)
  {
    v32 = 1;
  }
  else
  {
    dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
    dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
    v32 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30) == 4;
  }
  v33 = *(void (**)(char *, uint64_t))(v20 + 8);
  v33(v26, v19);
  v29(v23, (uint64_t)v28, v19);
  if (v32)
  {
    v33(v23, v19);
    v33(v28, v19);
    v34 = v134;
  }
  else
  {
    dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
    dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
    v35 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30);
    v33(v23, v19);
    result = ((uint64_t (*)(char *, uint64_t))v33)(v28, v19);
    v34 = v134;
    if (v35 != 3)
    {
      __break(1u);
      goto LABEL_44;
    }
  }
  v134 = a2;
  v37 = (void *)objc_opt_self(UIDevice);
  v38 = objc_msgSend(v37, "currentDevice");
  v39 = UIDevice.isLargeDisplayZoomEnabled.getter();

  v40 = 60.0;
  if ((v39 & 1) != 0)
    v40 = 61.0;
  v130 = v40;
  v41 = objc_msgSend(v37, "currentDevice");
  v42 = UIDevice.isLargeDisplayZoomEnabled.getter();

  v43 = 69.0;
  if ((v42 & 1) != 0)
    v43 = 80.0;
  v129 = v43;
  v44 = objc_msgSend(v37, "currentDevice");
  v45 = UIDevice.isLargeDisplayZoomEnabled.getter();

  if ((v45 & 1) != 0)
    v46 = 84.0;
  else
    v46 = 65.0;
  v128 = v46;
  v47 = objc_msgSend(v37, "currentDevice");
  v48 = UIDevice.isLargeDisplayZoomEnabled.getter();

  v49 = 78.0;
  if ((v48 & 1) != 0)
    v50 = 78.0;
  else
    v50 = 73.0;
  v51 = objc_msgSend(v37, "currentDevice");
  v52 = UIDevice.isLargeDisplayZoomEnabled.getter();

  if ((v52 & 1) == 0)
    v49 = 65.0;
  v53 = objc_msgSend(v37, "currentDevice");
  v54 = UIDevice.isLargeDisplayZoomEnabled.getter();

  if ((v54 & 1) != 0)
    v55 = 84.0;
  else
    v55 = 74.0;
  v56 = objc_msgSend(v37, "currentDevice");
  v57 = UIDevice.isLargeDisplayZoomEnabled.getter();

  if ((v57 & 1) != 0)
    v60 = 84.0;
  else
    v60 = 74.0;
  v61 = a5;
  v58.n128_f64[0] = v128;
  v59.n128_f64[0] = v49;
  v62 = static LayoutUtilities.layoutMetric(compact38:regular42:junior40:senior44:aloeSmall41:aloeBig45:agave49:)(v130, v129, v58, v50, v59, v55, v60);
  v63 = a3 + v61 - v62;
  v65 = MetricPlatterConstants.init()(v64);
  v66 = MetricPlatterConstants.metricMaxHeight.getter(v65);
  v67 = *(void (**)(char *, _QWORD))(*(_QWORD *)&v131 + 8);
  v67(v18, *(_QWORD *)&v34);
  v130 = a4;
  v131 = v66;
  dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
  dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
  v68 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30) != 3;
  v69 = v66 * 0.5;
  if (((v68 | v135) & 1) != 0)
    v69 = -0.0;
  v70 = v69 + a3;
  v71 = v34;
  v72 = v133;
  v73 = LayoutSubviews.subscript.getter(0);
  if (qword_10081D528 != -1)
    v73 = swift_once(&qword_10081D528, sub_10010A2B0);
  v74 = qword_100869CC8;
  v75 = static UnitPoint.topLeading.getter(v73);
  LOBYTE(v138[0]) = 0;
  LOBYTE(v137) = 0;
  v76 = v134;
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&a4, 0, v74, 0, v134, v70, v75, v77);
  v132 = *(_QWORD *)(v132 + 8);
  v78 = ((uint64_t (*)(char *, uint64_t))v132)(v72, v136);
  v79 = MetricPlatterConstants.init()(v78);
  v80 = MetricPlatterConstants.metricMaxHeight.getter(v79);
  v67(v18, *(_QWORD *)&v71);
  v81 = v61 - v62 + v80 * -5.0;
  v82 = v81 * 0.25;
  v83 = v81 < 0.0;
  v84 = 0.0;
  if (!v83)
    v84 = v82;
  v85 = v63 - (v66 + v66) - v84;
  dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
  dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
  v86 = v72;
  if (dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30) == 2)
  {
    v87 = LayoutSubviews.subscript.getter(1);
    v88 = static UnitPoint.topLeading.getter(v87);
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&a4, 0, *(_QWORD *)&v131, 0, v76, v85, v88, v89);
    return ((uint64_t (*)(char *, uint64_t))v132)(v72, v136);
  }
  v90 = a4;
  v91 = v130;
  dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
  dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
  v92 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30);
  v93 = v131;
  if (v92 == 5)
  {
    v94 = LayoutSubviews.subscript.getter(1);
    v95 = static UnitPoint.topLeading.getter(v94);
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))LayoutSubview.place(at:anchor:proposal:))((v91 + -7.0) * 0.5, 0, *(_QWORD *)&v93, 0, v76, v85, v95, v96);
    v97 = v72;
    v98 = v136;
    v99 = (void (*)(char *, uint64_t))v132;
    ((void (*)(char *, uint64_t))v132)(v97, v136);
    v100 = LayoutSubviews.subscript.getter(2);
    v101 = static UnitPoint.topLeading.getter(v100);
    v103 = v102;
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    v104 = (v91 + 7.0) * 0.5 + v76;
    v105 = v85;
    v106 = (v91 + -7.0) * 0.5;
  }
  else
  {
    dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
    dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
    v107 = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30);
    v98 = v136;
    v99 = (void (*)(char *, uint64_t))v132;
    if (v107 != 4)
      goto LABEL_38;
    v108 = LayoutSubviews.subscript.getter(1);
    v101 = static UnitPoint.topLeading.getter(v108);
    v103 = v109;
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    v104 = v76;
    v105 = v85;
    v106 = v90;
  }
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v106, 0, *(_QWORD *)&v93, 0, v104, v105, v101, v103);
  v99(v86, v98);
LABEL_38:
  dispatch thunk of Collection.startIndex.getter(v138, v19, v30);
  dispatch thunk of Collection.endIndex.getter(&v137, v19, v30);
  result = dispatch thunk of Collection.distance(from:to:)(v138, &v137, v19, v30);
  v110 = result - 2;
  if (__OFSUB__(result, 2))
  {
LABEL_44:
    __break(1u);
    return result;
  }
  v111 = v127;
  LayoutSubviews.subscript.getter(result - 2);
  v112 = v110 + 1;
  v113 = v126;
  v114 = LayoutSubviews.subscript.getter(v112);
  v116 = static UnitPoint.topLeading.getter(v114);
  LOBYTE(v138[0]) = 0;
  LOBYTE(v137) = 0;
  if ((v135 & 1) != 0)
  {
    v117 = LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v90, 0, *(_QWORD *)&v93, 0, v76, v85, v116, v115);
    v118 = static UnitPoint.topLeading.getter(v117);
    v120 = v119;
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    v121 = v76;
    v122 = v63 - v66;
    v123 = v90;
  }
  else
  {
    v124 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))LayoutSubview.place(at:anchor:proposal:))((v91 + -7.0) * 0.5, 0, *(_QWORD *)&v93, 0, v76, v63 - v66, v116, v115);
    v118 = static UnitPoint.topLeading.getter(v124);
    v120 = v125;
    LOBYTE(v138[0]) = 0;
    LOBYTE(v137) = 0;
    v121 = (v91 + 7.0) * 0.5 + v76;
    v122 = v63 - v66;
    v123 = (v91 + -7.0) * 0.5;
  }
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v123, 0, *(_QWORD *)&v93, 0, v121, v122, v118, v120);
  v99(v113, v98);
  return ((uint64_t (*)(char *, uint64_t))v99)(v111, v98);
}

unint64_t sub_10010AEA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081EFF0;
  if (!qword_10081EFF0)
  {
    v1 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews, v1);
    atomic_store(result, (unint64_t *)&qword_10081EFF0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlaceholderTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for PlaceholderTextView(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for PlaceholderTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for PlaceholderTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaceholderTextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceholderTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceholderTextView()
{
  return &type metadata for PlaceholderTextView;
}

uint64_t sub_10010B024(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABAE4, 1);
}

uint64_t sub_10010B034@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t result;
  _QWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v24[0] = v3;
  v24[1] = v4;
  v5 = sub_100038CA0();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(v24, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.footnote.getter();
  v15 = Text.font(_:)(v13, v6, v8, v12, v10, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v13);
  sub_1000E4458(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  KeyPath = swift_getKeyPath(&unk_100624A08);
  result = static HierarchicalShapeStyle.secondary.getter();
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v19 & 1;
  *(_QWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_WORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 42) = 1;
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

unint64_t sub_10010B140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820830;
  if (!qword_100820830)
  {
    v1 = sub_100007050(&qword_100820838);
    sub_10010B1C4();
    sub_100028384(&qword_100820870, &qword_100820878, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820830);
  }
  return result;
}

unint64_t sub_10010B1C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820840;
  if (!qword_100820840)
  {
    v1 = sub_100007050(&qword_100820848);
    sub_10010B230();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820840);
  }
  return result;
}

unint64_t sub_10010B230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820850;
  if (!qword_100820850)
  {
    v1 = sub_100007050(&qword_100820858);
    sub_100028384(&qword_100820860, &qword_100820868, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820850);
  }
  return result;
}

_QWORD *sub_10010B2BC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  v10 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_updateHandler);
  *v10 = 0;
  v10[1] = 0;
  v1[15] = a1;
  v1[16] = 0x8000000000000000;
  v11 = a1;
  v1[14] = sub_1004359AC((uint64_t)_swiftEmptyArrayStorage);
  v1[17] = _swiftEmptyArrayStorage;
  static Date.distantPast.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_lastRecommendationUpdate, v9, v6);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  v13 = swift_allocObject(&unk_1007865A0, 24, 7);
  swift_weakInit(v13 + 16, v1);
  v14 = (_QWORD *)swift_allocObject(&unk_1007865C8, 40, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v13;
  v15 = sub_1005A9074((uint64_t)v5, (uint64_t)&unk_100820A70, (uint64_t)v14);

  v16 = v1[16];
  v1[16] = v15;
  swift_release(v16 & 0x3FFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t sub_10010B45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_10010B474, 0, 0);
}

uint64_t sub_10010B474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_1008208C4);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_10010B514;
  v3[7] = Strong;
  return swift_task_switch(sub_10010B588, Strong, 0);
}

uint64_t sub_10010B514()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    swift_errorRelease(v0);
  swift_release(*(_QWORD *)(v2 + 48));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10010B570()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10010B588, v0, 0);
}

uint64_t sub_10010B588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "[SeymourWorkoutRecommendationDataProvider] Activating...", 56, 2, _swiftEmptyArrayStorage);

  if (*(_QWORD *)(v2 + 128) >> 62 == 1)
  {
    v6 = static os_log_type_t.default.getter(v5);
    v7 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "[SeymourWorkoutRecommendationDataProvider] Data Provider already activated.", 75, 2, _swiftEmptyArrayStorage);

    v8 = sub_10010FCD8();
    swift_allocError(&type metadata for SeymourWorkoutRecommendationDataProviderError, v8, 0, 0);
    *v9 = 0;
    swift_willThrow();
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v10 + 120) + OBJC_IVAR___CHFitnessAppContext_eventHub);
    v12 = *v11;
    v13 = v11[1];
    v14 = type metadata accessor for SubscriptionToken(0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = swift_unknownObjectRetain(v12);
    v16 = SubscriptionToken.init(eventHub:)(v15, v13);
    ObjectType = swift_getObjectType(v12);
    v18 = type metadata accessor for RecommendationsUpdated(0);
    swift_unknownObjectRetain(v12);
    swift_retain(v10);
    dispatch thunk of EventHubProtocol.subscribe<A>(_:subscriptionToken:handler:)((_QWORD *)(v1 + 16), v18, v16, sub_100110164, v10, v18, &protocol witness table for RecommendationsUpdated, ObjectType, v13);
    swift_release(v10);
    swift_unknownObjectRelease(v12);
    v19 = _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)(v1 + 16));
    v20 = static os_log_type_t.default.getter(v19);
    v21 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "[SeymourWorkoutRecommendationDataProvider] Setting state to activated", 69, 2, _swiftEmptyArrayStorage);

    v22 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v2 + 128) = v16 | 0x4000000000000000;
    v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain(v16);
    swift_release(v23);
    sub_10010B7E0();
    swift_release(v16);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010B7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void (*v17)(_BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v23[24];
  _BYTE v24[24];

  v1 = v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v23[-v11];
  Date.init()(v10);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_updateHandler);
  if (!v13)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v12, v5);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_updateHandler + 8);
  v15 = v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_lastRecommendationUpdate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_lastRecommendationUpdate, v24, 0, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v15, v5);
  swift_retain(v14);
  v16 = Date.timeIntervalSince(_:)(v9);
  v17 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v17(v9, v5);
  if (v16 <= 5.0)
  {
    v17(v12, v5);
    return sub_100022BA4(v13, v14);
  }
  else
  {
    swift_beginAccess(v15, v23, 33, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 24))(v15, v12, v5);
    swift_endAccess(v23);
    v18 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 1, 1, v18);
    v19 = swift_allocObject(&unk_1007865A0, 24, 7);
    swift_weakInit(v19 + 16, v1);
    v20 = (_QWORD *)swift_allocObject(&unk_1007865F0, 56, 7);
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v19;
    v20[5] = v13;
    v20[6] = v14;
    swift_retain(v14);
    v21 = sub_10020D9C0((uint64_t)v4, (uint64_t)&unk_100820A80, (uint64_t)v20);
    swift_release(v21);
    sub_100022BA4(v13, v14);
    return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v12, v5);
  }
}

uint64_t sub_10010BA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return swift_task_switch(sub_10010BA5C, 0, 0);
}

uint64_t sub_10010BA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 120) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 144) = Strong;
  if (Strong)
    return swift_task_switch(sub_10010BB24, Strong, 0);
  v4 = static os_log_type_t.default.getter(0);
  v5 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "[SeymourWorkoutRecommendationDataProvider] Received no recommendations", 70, 2, _swiftEmptyArrayStorage);

  (*(void (**)(void))(v0 + 128))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BB24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(void **)(v1 + 120);
  *(_QWORD *)(v0 + 152) = v2;
  v3 = v2;
  swift_release(v1);
  return swift_task_switch(sub_10010BB70, 0, 0);
}

uint64_t sub_10010BB70()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = (char *)v0[19];
  v2 = *(void **)&v1[OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider];
  v0[20] = v2;
  v3 = v2;

  v4 = swift_task_alloc(32);
  v0[21] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)
                                  + 1));
  v0[22] = v5;
  v6 = sub_100047110(&qword_100820A88);
  *v5 = v0;
  v5[1] = sub_10010BC40;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 13, 0, 0, 0xD000000000000024, 0x80000001006893D0, sub_10011015C, v4, v6);
}

uint64_t sub_10010BC40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10010C03C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 168));
    v4 = sub_10010BCAC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10010BCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  __n128 v12;

  v1 = *(_QWORD *)(v0 + 120);

  v1 += 16;
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 104);
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 200) = Strong;
  if (Strong)
    return swift_task_switch(sub_10010BE44, Strong, 0);
  v4 = static os_log_type_t.default.getter(0);
  v5 = (void *)HKLogActivity;
  v6 = v4;
  v7 = os_log_type_enabled(HKLogActivity, v4);
  v8 = *(_QWORD *)(v0 + 192);
  if (v7)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 192));
    v9 = v5;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    v11 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v0 + 112) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v10 + 4);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v9, v6, "[SeymourWorkoutRecommendationDataProvider] Received %ld updated recommendations", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v12 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  }
  (*(void (**)(__n128))(v0 + 128))(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = v1;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  return swift_task_switch(sub_10010BE98, 0, 0);
}

uint64_t sub_10010BE98()
{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = static os_log_type_t.default.getter();
  v2 = (void *)HKLogActivity;
  v3 = v1;
  if (os_log_type_enabled(HKLogActivity, v1))
  {
    v4 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRetain(v4);
    v5 = v2;
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v7 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 112) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v6 + 4);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v5, v3, "[SeymourWorkoutRecommendationDataProvider] Received %ld updated recommendations", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v8 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  }
  (*(void (**)(uint64_t))(v0 + 128))(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  swift_release(v1);
  return swift_task_switch(sub_10010C004, 0, 0);
}

uint64_t sub_10010C004()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_errorRelease(*(_QWORD *)(v0 + 184));
  (*(void (**)(uint64_t))(v0 + 128))(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010C03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = v0 + 64;
  v4 = v0 + 160;
  v3 = *(void **)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v4 + 8));

  v6 = static os_log_type_t.error.getter(v5);
  v7 = (void *)HKLogActivity;
  v8 = v6;
  if (os_log_type_enabled(HKLogActivity, v6))
  {
    v9 = *(_QWORD *)(v1 + 184);
    swift_errorRetain(v9);
    swift_errorRetain(v9);
    v10 = v7;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v21 = v12;
    *(_QWORD *)(v1 + 88) = v9;
    swift_errorRetain(v9);
    v13 = sub_100047110(&qword_10082EEA0);
    v14 = String.init<A>(describing:)(v1 + 88, v13);
    v16 = v15;
    *(_QWORD *)(v1 + 96) = sub_10003E8EC(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v11 + 4);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v10, v8, "[SeymourWorkoutRecommendationDataProvider] Failed to fetch recommendations: %s.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  v17 = *(_QWORD *)(v1 + 120) + 16;
  swift_beginAccess(v17, v2, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  *(_QWORD *)(v1 + 208) = Strong;
  if (Strong)
    return swift_task_switch(sub_10010BFB0, Strong, 0);
  v20 = swift_errorRelease(*(_QWORD *)(v1 + 184));
  (*(void (**)(uint64_t))(v1 + 128))(v20);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010C258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));

  swift_release(*(_QWORD *)(v0 + 128) & 0x3FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  v1 = v0 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_lastRecommendationUpdate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100022BA4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_updateHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp40SeymourWorkoutRecommendationDataProvider_updateHandler + 8));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10010C2DC()
{
  return type metadata accessor for SeymourWorkoutRecommendationDataProvider(0);
}

uint64_t type metadata accessor for SeymourWorkoutRecommendationDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1008208B0;
  if (!qword_1008208B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeymourWorkoutRecommendationDataProvider);
  return result;
}

uint64_t sub_10010C320(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_100624B08;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100624B20;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SeymourWorkoutRecommendationDataProvider.State(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SeymourWorkoutRecommendationDataProvider.State(_QWORD *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for SeymourWorkoutRecommendationDataProvider.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  v4 = *a1;
  *a1 = *a2;
  v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t *assignWithTake for SeymourWorkoutRecommendationDataProvider.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeymourWorkoutRecommendationDataProvider.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SeymourWorkoutRecommendationDataProvider.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10010C524(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_10010C540(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_10010C550(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for SeymourWorkoutRecommendationDataProvider.State()
{
  return &type metadata for SeymourWorkoutRecommendationDataProvider.State;
}

uint64_t initializeBufferWithCopyOfBuffer for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10010C5D0(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_10010C5D0(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain(a1);
}

void destroy for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t a1)
{
  sub_10010C5EC(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_10010C5EC(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release(a1);
}

uint64_t assignWithCopy for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10010C5D0(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10010C5EC(v5, v6);
  return a1;
}

uint64_t initializeWithTake for ActivitySharingHighlight.HighlightType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10010C5EC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10010C724(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10010C72C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus()
{
  return &type metadata for SeymourWorkoutRecommendationDataProvider.SeymourArtworkCacheStatus;
}

uint64_t sub_10010C748()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10010C754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch(sub_10010C770, v2, 0);
}

uint64_t sub_10010C770(uint64_t a1)
{
  _QWORD *v1;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  CHWorkoutDetailHeartRateTableViewCell *v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Swift::String v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  NSObject *log;
  uint64_t v41[3];

  v2 = static os_log_type_t.default.getter(a1);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    v5 = (CHWorkoutDetailHeartRateTableViewCell *)v1[5];
    v6 = v1[4];
    swift_bridgeObjectRetain_n(v5, 2);
    log = v3;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v41[0] = v8;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)0xE000000000000000, v9, v10, v11, v12, v13, v14, v15);
    v41[1] = 91;
    v41[2] = 0xE100000000000000;
    swift_bridgeObjectRetain(v5);
    v16._countAndFlagsBits = v6;
    v16._object = v5;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v5, v17, v18, v19, v20, v21, v22, v23);
    v24._object = (void *)0x8000000100689250;
    v24._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v24);
    v1[3] = sub_10003E8EC(91, 0xE100000000000000, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v7 + 4);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)0xE100000000000000, v25, v26, v27, v28, v29, v30, v31);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "[SeymourWorkoutRecommendationDataProvider][%s] Fetching catalog item view model.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  v33 = v1[5];
  v32 = v1[6];
  v34 = v1[4];
  v35 = sub_1000083D8(&qword_100820A20, type metadata accessor for SeymourWorkoutRecommendationDataProvider, (uint64_t)&unk_100624B6C);
  v36 = (_QWORD *)swift_task_alloc(48);
  v1[7] = v36;
  v36[2] = v32;
  v36[3] = v34;
  v36[4] = v33;
  v37 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v1[8] = v37;
  v38 = type metadata accessor for CatalogItemViewModel(0);
  *v37 = v1;
  v37[1] = sub_10010C9F4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 2, v32, v35, 0xD000000000000031, 0x8000000100689210, sub_10010FEA8, v36, v38);
}

uint64_t sub_10010C9F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = sub_10010CA70;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 48);
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v5 = sub_10010CA64;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10010CA64()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10010CA70()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10010CAA4(uint64_t a1, uint64_t a2, uint64_t a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;

  v8 = sub_100047110(&qword_100820A40);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(void **)(*(_QWORD *)(a2 + 120) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1007863E8, v14 + v10, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v16 = v12;
  swift_bridgeObjectRetain(a4);
  sub_10010DBB0(a3, a4, (void (*)(id))sub_10010FF18, v15, (uint64_t)v16);
  swift_bridgeObjectRelease(a4, v17, v18, v19, v20, v21, v22, v23);
  swift_release(v15);

}

uint64_t sub_10010CBCC(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v8 = (uint64_t)a1;
    v1 = a1;
    v2 = sub_100047110(&qword_100820A40);
    return CheckedContinuation.resume(returning:)(&v8, v2);
  }
  else
  {
    v4 = sub_10010FCD8();
    v5 = swift_allocError(&type metadata for SeymourWorkoutRecommendationDataProviderError, v4, 0, 0);
    *v6 = 2;
    v8 = v5;
    v7 = sub_100047110(&qword_100820A40);
    return CheckedContinuation.resume(throwing:)(&v8, v7);
  }
}

uint64_t sub_10010CC58(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 144) = v3;
  *(double *)(v4 + 128) = a2;
  *(double *)(v4 + 136) = a3;
  *(_QWORD *)(v4 + 120) = a1;
  v5 = sub_100047110(&qword_10081E650);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010CCBC, v3, 0);
}

uint64_t sub_10010CCBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  id v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  CHWorkoutDetailHeartRateTableViewCell **v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  id v14;
  unint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  os_log_type_t v35;
  void *v36;
  os_log_type_t v37;
  id v38;
  uint8_t *v39;
  _QWORD *v40;
  void *v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  char isUniquelyReferenced_nonNull_native;
  CHWorkoutDetailHeartRateTableViewCell *v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  NSObject *log;
  NSObject *loga;
  CHWorkoutDetailHeartRateTableViewCell *v78;

  v2 = v1;
  v3 = v1 + 16;
  v4 = static os_log_type_t.default.getter(a1);
  v5 = (void *)HKLogActivity;
  v6 = v4;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    v7 = *(id *)(v2 + 120);
    log = v5;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v2 + 112) = v7;
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 112, v2 + 120, v8 + 4);
    *v9 = v7;

    _os_log_impl((void *)&_mh_execute_header, log, v6, "[SeymourWorkoutRecommendationDataProvider] Looking up artwork for %@", v8, 0xCu);
    v11 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  v12 = (CHWorkoutDetailHeartRateTableViewCell **)(*(_QWORD *)(v2 + 144) + 112);
  swift_beginAccess(v12, v3, 0, 0);
  v13 = *v12;
  if (!*(_QWORD *)(*v12)->cellPadding)
    goto LABEL_10;
  v14 = *(id *)(v2 + 120);
  swift_bridgeObjectRetain(v13);
  v15 = sub_100439434((uint64_t)v14);
  v23 = *(void **)(v2 + 120);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22);

LABEL_10:
    v47 = *(_QWORD *)(v2 + 144);
    v46 = *(_QWORD *)(v2 + 152);
    v49 = *(_QWORD *)(v2 + 128);
    v48 = *(_QWORD *)(v2 + 136);
    v50 = *(void **)(v2 + 120);
    v51 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v46, 1, 1, v51);
    v52 = sub_1000083D8(&qword_100820A20, type metadata accessor for SeymourWorkoutRecommendationDataProvider, (uint64_t)&unk_100624B6C);
    v53 = (_QWORD *)swift_allocObject(&unk_100786398, 72, 7);
    v53[2] = v47;
    v53[3] = v52;
    v53[4] = v50;
    v53[5] = v47;
    v53[6] = v50;
    v53[7] = v49;
    v53[8] = v48;
    v54 = v50;
    swift_retain_n(v47, 2);
    v55 = v54;
    v56 = sub_1005A91A0(v46, (uint64_t)&unk_100820A28, (uint64_t)v53);
    *(_QWORD *)(v2 + 184) = v56;
    swift_beginAccess(v12, v2 + 40, 33, 0);
    v57 = v55;
    swift_retain(v56);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
    v78 = *v12;
    *v12 = (CHWorkoutDetailHeartRateTableViewCell *)0x8000000000000000;
    sub_1003FE9DC(v56, 0, v57, isUniquelyReferenced_nonNull_native);
    v59 = *v12;
    *v12 = v78;
    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);

    swift_endAccess(v2 + 40);
    v67 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v2 + 192) = v67;
    v68 = sub_10001E724(0, (unint64_t *)&qword_1008284B0, UIImage_ptr);
    v69 = sub_100047110(&qword_10082EEA0);
    *v67 = v2;
    v67[1] = sub_10010D2D8;
    v70 = v2 + 88;
    v71 = v56;
    v72 = v68;
    return Task.value.getter(v70, v71, v72, v69, &protocol self-conformance witness table for Error);
  }
  v24 = *(_QWORD *)v13[1].cellInset + 16 * v15;
  v25 = *(void **)v24;
  *(_QWORD *)(v2 + 160) = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10010C5D0(v25, v26);
  swift_bridgeObjectRelease(v13, v27, v28, v29, v30, v31, v32, v33);

  v35 = static os_log_type_t.default.getter(v34);
  v36 = (void *)HKLogActivity;
  v37 = v35;
  if (os_log_type_enabled(HKLogActivity, v35))
  {
    v38 = *(id *)(v2 + 120);
    loga = v36;
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v39 = 138412290;
    *(_QWORD *)(v2 + 104) = v38;
    v41 = v25;
    v42 = v26;
    v43 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 104, v2 + 112, v39 + 4);
    *v40 = v38;

    v26 = v42;
    v25 = v41;
    _os_log_impl((void *)&_mh_execute_header, loga, v37, "[SeymourWorkoutRecommendationDataProvider] Found artwork in cache for %@.", v39, 0xCu);
    v44 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v40, 1, v44);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  if ((v26 & 1) != 0)
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 152));
    return (*(uint64_t (**)(void *))(v2 + 8))(v25);
  }
  v73 = async function pointer to Task.value.getter[1];
  swift_retain(v25);
  v74 = (_QWORD *)swift_task_alloc(v73);
  *(_QWORD *)(v2 + 168) = v74;
  v75 = sub_10001E724(0, (unint64_t *)&qword_1008284B0, UIImage_ptr);
  v69 = sub_100047110(&qword_10082EEA0);
  *v74 = v2;
  v74[1] = sub_10010D21C;
  v70 = v2 + 96;
  v71 = (uint64_t)v25;
  v72 = v75;
  return Task.value.getter(v70, v71, v72, v69, &protocol self-conformance witness table for Error);
}

uint64_t sub_10010D21C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10010D418;
  else
    v4 = sub_10010D280;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_10010D280()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 160);
  sub_10010C5EC(v1, 0);
  sub_10010C5EC(v1, 0);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10010D2D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10010D468;
  else
    v4 = sub_10010D33C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_10010D33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  CHWorkoutDetailHeartRateTableViewCell *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(void **)(v0 + 120);
  v4 = *(void **)(v0 + 88);
  swift_beginAccess(v2 + 112, v0 + 64, 33, 0);
  v5 = v3;
  v6 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 112));
  v17 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0x8000000000000000;
  sub_1003FE9DC((uint64_t)v4, 1, v5, isUniquelyReferenced_nonNull_native);
  v8 = *(CHWorkoutDetailHeartRateTableViewCell **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v17;
  swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);

  swift_endAccess(v0 + 64);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(id))(v0 + 8))(v6);
}

uint64_t sub_10010D418()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  sub_10010C5EC(v1, 0);
  sub_10010C5EC(v1, 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010D468()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010D4A4(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(double *)(v8 + 48) = a2;
  *(double *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a6;
  return swift_task_switch(sub_10010D4C4, a7, 0);
}

uint64_t sub_10010D4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1000083D8(&qword_100820A20, type metadata accessor for SeymourWorkoutRecommendationDataProvider, (uint64_t)&unk_100624B6C);
  v5 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 64) = v5;
  v9 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v1;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 72) = v6;
  v7 = sub_10001E724(0, (unint64_t *)&qword_1008284B0, UIImage_ptr);
  *v6 = v0;
  v6[1] = sub_10010D5BC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), v9, v4, 0xD00000000000002FLL, 0x80000001006891E0, sub_10010FDDC, v5, v7);
}

uint64_t sub_10010D5BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10010D630, *(_QWORD *)(v3 + 32), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10010D630()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10010D664(uint64_t a1, void *a2, uint64_t a3, char *a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  os_log_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;

  v12 = sub_100047110(&qword_100820A30);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v43 = v15;
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static os_log_type_t.default.getter(v14);
  v18 = (void *)HKLogActivity;
  v19 = v17;
  if (os_log_type_enabled(HKLogActivity, v17))
  {
    v20 = a2;
    v39 = a1;
    v21 = v20;
    v37 = v18;
    v38 = a3;
    v22 = swift_slowAlloc(12, -1);
    v41 = a2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(8, -1);
    v42 = a4;
    v25 = (_QWORD *)v24;
    v40 = v16;
    *(_DWORD *)v23 = 138412290;
    v44 = v21;
    v26 = v21;
    a3 = v38;
    v16 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v23 + 4);
    *v25 = v21;
    a1 = v39;

    v27 = v37;
    _os_log_impl((void *)&_mh_execute_header, v37, v19, "[SeymourWorkoutRecommendationDataProvider] Fetching artwork for %@.", v23, 0xCu);
    v28 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v25, 1, v28);
    v29 = v25;
    a4 = v42;
    swift_slowDealloc(v29, -1, -1);
    v30 = v23;
    a2 = v41;
    swift_slowDealloc(v30, -1, -1);

  }
  v31 = *(void **)(*(_QWORD *)(a3 + 120) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  v32 = *(unsigned __int8 *)(v13 + 80);
  v33 = (v32 + 24) & ~v32;
  v34 = swift_allocObject(&unk_1007863C0, v33 + v43, v32 | 7);
  *(_QWORD *)(v34 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v34 + v33, v16, v12);
  v35 = a2;
  v36 = v31;
  sub_10039636C(a4, (uint64_t)sub_10010FE64, v34, a5, a6);
  swift_release(v34);

}

uint64_t sub_10010D8D8(void *a1, void *a2)
{
  id v3;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  id v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  id v17;
  NSObject *v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  NSObject *log;
  uint64_t v28;
  uint64_t v29;

  if (a1)
  {
    v3 = a1;
    v4 = static os_log_type_t.default.getter(v3);
    v5 = (void *)HKLogActivity;
    v6 = v4;
    if (os_log_type_enabled(HKLogActivity, v4))
    {
      v7 = a2;
      log = v5;
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      v28 = (uint64_t)v7;
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 4);
      *v9 = v7;

      _os_log_impl((void *)&_mh_execute_header, log, v6, "[SeymourWorkoutRecommendationDataProvider] Fetched artwork for %@.", v8, 0xCu);
      v11 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    v28 = (uint64_t)v3;
    v12 = sub_100047110(&qword_100820A30);
    return CheckedContinuation.resume(returning:)(&v28, v12);
  }
  else
  {
    v14 = static os_log_type_t.error.getter(0);
    v15 = (void *)HKLogActivity;
    v16 = v14;
    if (os_log_type_enabled(HKLogActivity, v14))
    {
      v17 = a2;
      v18 = v15;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v28 = (uint64_t)v17;
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v19 + 4);
      *v20 = v17;

      _os_log_impl((void *)&_mh_execute_header, v18, v16, "[SeymourWorkoutRecommendationDataProvider] Failed to fetch artwork for %@.", v19, 0xCu);
      v22 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    v23 = sub_10010FCD8();
    v24 = swift_allocError(&type metadata for SeymourWorkoutRecommendationDataProviderError, v23, 0, 0);
    *v25 = 3;
    v28 = v24;
    v26 = sub_100047110(&qword_100820A30);
    return CheckedContinuation.resume(throwing:)(&v28, v26);
  }
}

uint64_t sub_10010DBB0(uint64_t a1, CHWorkoutDetailHeartRateTableViewCell *a2, void (*a3)(id), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  __n128 v23;
  uint64_t v24;
  CHWorkoutDetailHeartRateTableViewCell *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  CHWorkoutDetailHeartRateTableViewCell *v35;
  unint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  CHWorkoutDetailHeartRateTableViewCell *v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  Swift::String v59;
  CHWorkoutDetailHeartRateTableViewCell *v60;
  uint64_t v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  Swift::String v69;
  __int128 v70;
  uint64_t v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  void *v80;
  NSString v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  id v89;
  SEL v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  CHWorkoutDetailHeartRateTableViewCell *v104;
  id v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  Swift::String v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  Swift::String v121;
  __int128 v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  uint64_t v131;
  _QWORD *v132;
  void (*v133)(id);
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  __n128 v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t (**v165)(uint64_t *);
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t (**v177)(uint64_t);
  uint64_t v178;
  char *v179;
  void (*v180)(char *, uint64_t);
  void (*v181)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __n128 v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(id);
  __int128 v206;
  __int128 v207;
  _QWORD v208[2];
  char v209[16];
  uint64_t v210;
  CHWorkoutDetailHeartRateTableViewCell *v211;
  ValueMetadata *v212;
  _UNKNOWN **v213;

  v204 = a5;
  v197 = sub_100047110(&qword_100820A48);
  v196 = *(_QWORD *)(v197 - 8);
  v9 = *(_QWORD *)(v196 + 64);
  __chkstk_darwin(v197);
  v195 = (char *)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v201 = (char *)&v186 - v11;
  v12 = sub_100047110((uint64_t *)&unk_100836170);
  v200 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v200 + 64);
  __chkstk_darwin(v12);
  v198 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v199 = (char *)&v186 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v186 - v17;
  v19 = type metadata accessor for CatalogLockupPlaceholder(0);
  v203 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v202 = (char *)&v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = &type metadata for SeymourWorkoutRecommendation;
  v213 = &off_1007A3C38;
  v210 = a1;
  v211 = a2;
  v21 = sub_100047110(&qword_100820A50);
  inited = swift_initStackObject(v21, v209);
  v194 = xmmword_100622F90;
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  v23 = swift_bridgeObjectRetain(a2);
  *(_QWORD *)(inited + 32) = static HealthDataConstants.catalogWorkoutIdentifierProperty.getter(v23);
  *(_QWORD *)(inited + 40) = v24;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  v25 = (CHWorkoutDetailHeartRateTableViewCell *)sub_100435AC8(inited);
  v27 = static HealthDataConstants.catalogWorkoutIdentifierProperty.getter(v26);
  v35 = (CHWorkoutDetailHeartRateTableViewCell *)v28;
  if (*(_QWORD *)v25->cellPadding && (v36 = sub_100438F74(v27, v28), (v28 & 1) != 0))
  {
    sub_10003E9BC(*(_QWORD *)v25[1].cellInset + 32 * v36, (uint64_t)&v206);
  }
  else
  {
    v207 = 0u;
    v206 = 0u;
  }
  swift_bridgeObjectRelease(v25, (SEL)v28, v29, v30, v31, v32, v33, v34);
  swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
  v205 = a3;
  if (!*((_QWORD *)&v207 + 1))
  {
    v44 = sub_1000F996C((uint64_t)&v206);
    goto LABEL_10;
  }
  v193 = v19;
  v44 = swift_dynamicCast(v208, &v206, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_DWORD)v44)
  {
LABEL_10:
    v98 = static os_log_type_t.error.getter(v44);
    v99 = (void *)HKLogActivity;
    v100 = sub_100047110((uint64_t *)&unk_100827460);
    v101 = swift_allocObject(v100, 112, 7);
    *(_OWORD *)(v101 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v101 + 56) = &type metadata for String;
    v102 = sub_100038CF8();
    *(_QWORD *)(v101 + 64) = v102;
    *(_QWORD *)(v101 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v101 + 40) = 0x80000001006892D0;
    v103 = v210;
    v104 = v211;
    *(_QWORD *)&v206 = 0;
    *((_QWORD *)&v206 + 1) = 0xE000000000000000;
    v105 = v99;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(*((CHWorkoutDetailHeartRateTableViewCell **)&v206 + 1), v106, v107, v108, v109, v110, v111, v112);
    *(_QWORD *)&v206 = 91;
    *((_QWORD *)&v206 + 1) = 0xE100000000000000;
    swift_bridgeObjectRetain(v104);
    v113._countAndFlagsBits = v103;
    v113._object = v104;
    String.append(_:)(v113);
    swift_bridgeObjectRelease(v104, v114, v115, v116, v117, v118, v119, v120);
    v121._countAndFlagsBits = 0xD000000000000021;
    v121._object = (void *)0x8000000100689250;
    String.append(_:)(v121);
    v122 = v206;
    *(_QWORD *)(v101 + 96) = &type metadata for String;
    *(_QWORD *)(v101 + 104) = v102;
    *(_OWORD *)(v101 + 72) = v122;
    os_log(_:dso:log:_:_:)(v98, &_mh_execute_header, v105, "[seymour] %@ failed to load catalog workout identifier for catalog item: %@", 75, 2, v101);

    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v101, v123, v124, v125, v126, v127, v128, v129);
    v205(0);
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(&v210);
  }
  v186 = v18;
  v192 = a4;
  v187 = v12;
  v45 = v208[1];
  v191 = v208[0];
  LODWORD(v190) = static os_log_type_t.default.getter(v44);
  v46 = (void *)HKLogActivity;
  v189 = sub_100047110((uint64_t *)&unk_100827460);
  v47 = swift_allocObject(v189, 112, 7);
  *(_OWORD *)(v47 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v47 + 56) = &type metadata for String;
  v48 = sub_100038CF8();
  *(_QWORD *)(v47 + 64) = v48;
  *(_QWORD *)(v47 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v47 + 40) = 0x80000001006892D0;
  v188 = 0x80000001006892D0;
  v49 = v210;
  v50 = v211;
  *(_QWORD *)&v206 = 0;
  *((_QWORD *)&v206 + 1) = 0xE000000000000000;
  v51 = v46;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(*((CHWorkoutDetailHeartRateTableViewCell **)&v206 + 1), v52, v53, v54, v55, v56, v57, v58);
  *(_QWORD *)&v206 = 91;
  *((_QWORD *)&v206 + 1) = 0xE100000000000000;
  swift_bridgeObjectRetain(v50);
  v59._countAndFlagsBits = v49;
  v59._object = v50;
  String.append(_:)(v59);
  v60 = v50;
  v61 = v45;
  swift_bridgeObjectRelease(v60, v62, v63, v64, v65, v66, v67, v68);
  v69._countAndFlagsBits = 0xD000000000000021;
  v69._object = (void *)0x8000000100689250;
  String.append(_:)(v69);
  v70 = v206;
  *(_QWORD *)(v47 + 96) = &type metadata for String;
  *(_QWORD *)(v47 + 104) = v48;
  *(_OWORD *)(v47 + 72) = v70;
  os_log(_:dso:log:_:_:)(v190, &_mh_execute_header, v51, "[seymour] %@ fetching catalog item view model for catalog item: %@", 66, 2, v47);

  v71 = v191;
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v47, v72, v73, v74, v75, v76, v77, v78);
  v79 = v204;
  v80 = *(void **)(v204 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogItemViewModelCache);
  v81 = String._bridgeToObjectiveC()();
  v82 = objc_msgSend(v80, "objectForKey:", v81);

  if (v82)
  {
    v84 = static os_log_type_t.default.getter(v83);
    v85 = (void *)HKLogActivity;
    v86 = swift_allocObject(v189, 152, 7);
    *(_OWORD *)(v86 + 16) = xmmword_100624A40;
    *(_QWORD *)(v86 + 56) = &type metadata for String;
    *(_QWORD *)(v86 + 64) = v48;
    v87 = v188;
    *(_QWORD *)(v86 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v86 + 40) = v87;
    *(_QWORD *)(v86 + 96) = &type metadata for String;
    *(_QWORD *)(v86 + 104) = v48;
    *(_QWORD *)(v86 + 72) = v71;
    *(_QWORD *)(v86 + 80) = v45;
    *(_QWORD *)(v86 + 136) = type metadata accessor for CatalogItemViewModel(0);
    *(_QWORD *)(v86 + 144) = sub_1000083D8(&qword_100820A60, type metadata accessor for CatalogItemViewModel, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v86 + 112) = v82;
    v88 = v85;
    v89 = v82;
    os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v88, "[seymour] %@ returning cached catalog item view model for catalog item identifier: %@, catalog item view model: %@", 114, 2, v86);

    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v86, v90, v91, v92, v93, v94, v95, v96);
    v97 = v89;
    v205(v82);

  }
  else
  {
    v131 = swift_allocObject(&unk_100786410, 24, 7);
    swift_unknownObjectWeakInit(v131 + 16, v79);
    v132 = (_QWORD *)swift_allocObject(&unk_100786438, 56, 7);
    v132[2] = v131;
    v132[3] = v71;
    v133 = v205;
    v132[4] = v45;
    v132[5] = v133;
    v134 = v192;
    v132[6] = v192;
    v135 = v132;
    sub_1000252E0((uint64_t)&v210, (uint64_t)&v206);
    v136 = swift_allocObject(&unk_100786460, 72, 7);
    v190 = v136;
    sub_10002411C(&v206, v136 + 16);
    *(_QWORD *)(v136 + 56) = v133;
    *(_QWORD *)(v136 + 64) = v134;
    swift_retain_n(v134, 2);
    v137 = swift_bridgeObjectRetain(v61);
    v138 = v202;
    CatalogLockupPlaceholder.init(identifier:referenceType:editorialCardIdentifier:)(v71, v61, 8, 0, 1, 0, 0, v137);
    v139 = *(_QWORD *)(v79 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 24);
    v140 = *(_QWORD *)(v79 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 32);
    sub_100016804((_QWORD *)(v79 + OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient), v139);
    v141 = sub_100047110(&qword_100820A58);
    v142 = *(unsigned __int8 *)(v203 + 80);
    v143 = v203;
    v144 = (v142 + 32) & ~v142;
    v145 = swift_allocObject(v141, v144 + *(_QWORD *)(v203 + 72), v142 | 7);
    *(_OWORD *)(v145 + 16) = v194;
    (*(void (**)(uint64_t, char *, uint64_t))(v143 + 16))(v145 + v144, v138, v193);
    v146 = v201;
    dispatch thunk of CatalogClientProtocol.fetchRemoteCatalogLockups(displayStyle:placeholders:)(33, v145, v139, v140);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v145, v147, v148, v149, v150, v151, v152, v153);
    v154 = swift_allocObject(&unk_100786488, 32, 7);
    *(_QWORD *)(v154 + 16) = sub_10010FF90;
    *(_QWORD *)(v154 + 24) = v135;
    v155 = v135;
    v189 = (uint64_t)v135;
    v156 = swift_allocObject(&unk_1007864B0, 32, 7);
    *(_QWORD *)(v156 + 16) = sub_10010FFA4;
    *(_QWORD *)(v156 + 24) = v154;
    v157 = v196;
    v158 = v195;
    v159 = v146;
    v160 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v195, v159, v197);
    v161 = *(unsigned __int8 *)(v157 + 80);
    v162 = (v161 + 16) & ~v161;
    v163 = (v9 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
    v164 = swift_allocObject(&unk_1007864D8, v163 + 16, v161 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v164 + v162, v158, v160);
    v165 = (uint64_t (**)(uint64_t *))(v164 + v163);
    *v165 = sub_10010FFBC;
    v165[1] = (uint64_t (*)(uint64_t *))v156;
    swift_retain(v155);
    v205 = (void (*)(id))((char *)&type metadata for () + 8);
    v166 = v199;
    Promise.init(asyncOperation:)(sub_10010FFD0, v164, (char *)&type metadata for () + 8);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v201, v160);
    v167 = swift_allocObject(&unk_100786500, 32, 7);
    v168 = v190;
    *(_QWORD *)(v167 + 16) = sub_10010FF98;
    *(_QWORD *)(v167 + 24) = v168;
    v169 = swift_allocObject(&unk_100786528, 32, 7);
    *(_QWORD *)(v169 + 16) = sub_10010FFE4;
    *(_QWORD *)(v169 + 24) = v167;
    v170 = v200;
    v171 = v198;
    v172 = v187;
    (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v198, v166, v187);
    v173 = *(unsigned __int8 *)(v170 + 80);
    v174 = (v173 + 16) & ~v173;
    v175 = (v13 + v174 + 7) & 0xFFFFFFFFFFFFFFF8;
    v176 = swift_allocObject(&unk_100786550, v175 + 16, v173 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v170 + 32))(v176 + v174, v171, v172);
    v177 = (uint64_t (**)(uint64_t))(v176 + v175);
    *v177 = sub_10010FFFC;
    v177[1] = (uint64_t (*)(uint64_t))v169;
    v178 = v168;
    swift_retain(v168);
    v179 = v186;
    Promise.init(asyncOperation:)(sub_100110010, v176, v205);
    v180 = *(void (**)(char *, uint64_t))(v170 + 8);
    v180(v166, v172);
    v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))Promise.operation.getter(v172);
    v183 = v182;
    v184 = swift_allocObject(&unk_100786578, 32, 7);
    *(_QWORD *)(v184 + 16) = 0;
    *(_QWORD *)(v184 + 24) = 0;
    v181(sub_100110028, v184);
    swift_release(v189);
    swift_release(v178);
    swift_release(v183);
    v185 = swift_release(v184);
    ((void (*)(char *, uint64_t, __n128))v180)(v179, v172, v185);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v202, v193);
  }
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(&v210);
}

uint64_t sub_10010E6C8(void *a1, void (*a2)(_QWORD), uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  void (*v52)(_QWORD, __n128);
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  id v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  void (*v103)(uint64_t (*)(), uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  __int128 v128;
  __int128 v129;
  _QWORD v130[2];
  _QWORD v131[5];

  v127 = a4;
  v120 = sub_100047110(&qword_100820A48);
  v119 = *(_QWORD *)(v120 - 8);
  v7 = *(_QWORD *)(v119 + 64);
  v8 = __chkstk_darwin(v120);
  v9 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v108 - v10;
  v12 = sub_100047110((uint64_t *)&unk_100836170);
  v123 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v123 + 64);
  v14 = __chkstk_darwin(v12);
  v121 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v122 = (char *)&v108 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v108 - v17;
  v19 = type metadata accessor for CatalogLockupPlaceholder(0);
  v125 = *(_QWORD *)(v19 - 8);
  v126 = v19;
  __chkstk_darwin(v19);
  v124 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131[3] = sub_10001E724(0, (unint64_t *)&qword_100828390, HKWorkout_ptr);
  v131[4] = &off_10078FAE8;
  v131[0] = a1;
  v21 = objc_msgSend(a1, "metadata");
  if (!v21)
  {
    v128 = 0u;
    v129 = 0u;
    goto LABEL_10;
  }
  v22 = v21;
  v118 = v18;
  v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v24 = static HealthDataConstants.catalogWorkoutIdentifierProperty.getter();
  v26 = v25;
  if (!*(_QWORD *)(v23 + 16) || (v27 = sub_100438F74(v24, v25), (v28 & 1) == 0))
  {
    v128 = 0u;
    v129 = 0u;
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v23);
    goto LABEL_10;
  }
  sub_10003E9BC(*(_QWORD *)(v23 + 56) + 32 * v27, (uint64_t)&v128);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v23);
  if (!*((_QWORD *)&v129 + 1))
  {
LABEL_10:
    v29 = sub_1000F996C((uint64_t)&v128);
    goto LABEL_11;
  }
  v29 = swift_dynamicCast(v130, &v128, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_DWORD)v29)
  {
LABEL_11:
    v52 = (void (*)(_QWORD, __n128))a2;
    v53 = static os_log_type_t.error.getter(v29);
    v54 = (void *)HKLogActivity;
    v55 = sub_100047110((uint64_t *)&unk_100827460);
    v56 = swift_allocObject(v55, 112, 7);
    *(_OWORD *)(v56 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v56 + 56) = &type metadata for String;
    v57 = sub_100038CF8();
    *(_QWORD *)(v56 + 64) = v57;
    *(_QWORD *)(v56 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v56 + 40) = 0x80000001006892D0;
    v58 = (void *)v131[0];
    v59 = v54;
    v60 = objc_msgSend(v58, "description");
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v63 = v62;

    *(_QWORD *)(v56 + 96) = &type metadata for String;
    *(_QWORD *)(v56 + 104) = v57;
    *(_QWORD *)(v56 + 72) = v61;
    *(_QWORD *)(v56 + 80) = v63;
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v59, "[seymour] %@ failed to load catalog workout identifier for catalog item: %@", 75, 2, v56);

    v64 = swift_bridgeObjectRelease(v56);
    v52(0, v64);
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(v131);
  }
  v109 = v12;
  v116 = v130[0];
  v117 = v130[1];
  LODWORD(v115) = static os_log_type_t.default.getter(v29);
  v30 = (void *)HKLogActivity;
  v112 = sub_100047110((uint64_t *)&unk_100827460);
  v31 = swift_allocObject(v112, 112, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  v32 = sub_100038CF8();
  *(_QWORD *)(v31 + 64) = v32;
  *(_QWORD *)(v31 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v31 + 40) = 0x80000001006892D0;
  v110 = 0x80000001006892D0;
  v33 = (void *)v131[0];
  v114 = v30;
  v34 = objc_msgSend(v33, "description");
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v36 = v35;

  *(_QWORD *)(v31 + 96) = &type metadata for String;
  *(_QWORD *)(v31 + 104) = v32;
  v111 = v32;
  *(_QWORD *)(v31 + 72) = v113;
  *(_QWORD *)(v31 + 80) = v36;
  v37 = v116;
  v38 = v114;
  os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v114, "[seymour] %@ fetching catalog item view model for catalog item: %@", 66, 2, v31);

  swift_bridgeObjectRelease(v31);
  v39 = v127;
  v40 = *(void **)&v127[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogItemViewModelCache];
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v40, "objectForKey:", v41);

  if (v42)
  {
    v44 = static os_log_type_t.default.getter(v43);
    v45 = (void *)HKLogActivity;
    v46 = swift_allocObject(v112, 152, 7);
    *(_OWORD *)(v46 + 16) = xmmword_100624A40;
    v47 = v111;
    *(_QWORD *)(v46 + 56) = &type metadata for String;
    *(_QWORD *)(v46 + 64) = v47;
    *(_QWORD *)(v46 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v46 + 40) = v110;
    *(_QWORD *)(v46 + 96) = &type metadata for String;
    *(_QWORD *)(v46 + 104) = v47;
    v48 = v117;
    *(_QWORD *)(v46 + 72) = v37;
    *(_QWORD *)(v46 + 80) = v48;
    *(_QWORD *)(v46 + 136) = type metadata accessor for CatalogItemViewModel(0);
    *(_QWORD *)(v46 + 144) = sub_1000083D8(&qword_100820A60, type metadata accessor for CatalogItemViewModel, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v46 + 112) = v42;
    v49 = v45;
    v50 = v42;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v49, "[seymour] %@ returning cached catalog item view model for catalog item identifier: %@, catalog item view model: %@", 114, 2, v46);

    swift_bridgeObjectRelease(v46);
    v51 = v50;
    a2(v42);

  }
  else
  {
    v66 = swift_allocObject(&unk_100786410, 24, 7);
    swift_unknownObjectWeakInit(v66 + 16, v39);
    v67 = (_QWORD *)swift_allocObject(&unk_1007866A8, 56, 7);
    v115 = v67;
    v67[2] = v66;
    v67[3] = v37;
    v68 = v117;
    v67[4] = v117;
    v67[5] = a2;
    v67[6] = a3;
    sub_1000252E0((uint64_t)v131, (uint64_t)&v128);
    v69 = swift_allocObject(&unk_1007866D0, 72, 7);
    v114 = (id)v69;
    sub_10002411C(&v128, v69 + 16);
    *(_QWORD *)(v69 + 56) = a2;
    *(_QWORD *)(v69 + 64) = a3;
    swift_retain_n(a3, 2);
    v70 = swift_bridgeObjectRetain(v68);
    v71 = v124;
    CatalogLockupPlaceholder.init(identifier:referenceType:editorialCardIdentifier:)(v37, v68, 8, 0, 1, 0, 0, v70);
    v72 = *(_QWORD *)&v39[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 24];
    v127 = *(char **)&v39[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 32];
    sub_100016804(&v39[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient], v72);
    v73 = sub_100047110(&qword_100820A58);
    v74 = *(unsigned __int8 *)(v125 + 80);
    v75 = v125;
    v76 = (v74 + 32) & ~v74;
    v77 = swift_allocObject(v73, v76 + *(_QWORD *)(v125 + 72), v74 | 7);
    *(_OWORD *)(v77 + 16) = xmmword_100622F90;
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(v77 + v76, v71, v126);
    dispatch thunk of CatalogClientProtocol.fetchRemoteCatalogLockups(displayStyle:placeholders:)(33, v77, v72, v127);
    swift_bridgeObjectRelease(v77);
    v78 = swift_allocObject(&unk_1007866F8, 32, 7);
    v79 = v115;
    *(_QWORD *)(v78 + 16) = sub_10010FF90;
    *(_QWORD *)(v78 + 24) = v79;
    v80 = swift_allocObject(&unk_100786720, 32, 7);
    *(_QWORD *)(v80 + 16) = sub_100110498;
    *(_QWORD *)(v80 + 24) = v78;
    v81 = v119;
    v82 = v120;
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v9, v11, v120);
    v83 = *(unsigned __int8 *)(v81 + 80);
    v84 = (v83 + 16) & ~v83;
    v85 = (v7 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
    v86 = swift_allocObject(&unk_100786748, v85 + 16, v83 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v86 + v84, v9, v82);
    v87 = (_QWORD *)(v86 + v85);
    *v87 = sub_1001104C0;
    v87[1] = v80;
    swift_retain(v79);
    v127 = (char *)&type metadata for () + 8;
    v88 = v122;
    Promise.init(asyncOperation:)(sub_10010FFD0, v86, (char *)&type metadata for () + 8);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v11, v82);
    v89 = swift_allocObject(&unk_100786770, 32, 7);
    v90 = v114;
    *(_QWORD *)(v89 + 16) = sub_100110464;
    *(_QWORD *)(v89 + 24) = v90;
    v91 = swift_allocObject(&unk_100786798, 32, 7);
    *(_QWORD *)(v91 + 16) = sub_1001104AC;
    *(_QWORD *)(v91 + 24) = v89;
    v92 = v123;
    v93 = v121;
    v94 = v109;
    (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v121, v88, v109);
    v95 = *(unsigned __int8 *)(v92 + 80);
    v96 = (v95 + 16) & ~v95;
    v97 = (v13 + v96 + 7) & 0xFFFFFFFFFFFFFFF8;
    v98 = swift_allocObject(&unk_1007867C0, v97 + 16, v95 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v98 + v96, v93, v94);
    v99 = (_QWORD *)(v98 + v97);
    *v99 = sub_1001104C4;
    v99[1] = v91;
    v100 = v90;
    swift_retain(v90);
    v101 = v118;
    Promise.init(asyncOperation:)(sub_100110010, v98, v127);
    v102 = *(void (**)(char *, uint64_t))(v92 + 8);
    v102(v88, v94);
    v103 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v94);
    v105 = v104;
    v106 = swift_allocObject(&unk_1007867E8, 32, 7);
    *(_QWORD *)(v106 + 16) = 0;
    *(_QWORD *)(v106 + 24) = 0;
    v103(sub_1001104CC, v106);
    swift_release(v115);
    swift_release(v100);
    swift_release(v105);
    v107 = swift_release(v106);
    ((void (*)(char *, uint64_t, __n128))v102)(v101, v94, v107);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v126);
  }
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v131);
}

uint64_t sub_10010F0C0(void *a1, void (*a2)(_QWORD), uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  void *v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  void (*v50)(_QWORD, __n128);
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  __n128 v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  void (*v101)(uint64_t (*)(), uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  _QWORD v128[2];
  _QWORD v129[5];

  v125 = a4;
  v118 = sub_100047110(&qword_100820A48);
  v7 = *(_QWORD *)(v118 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v118);
  v10 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v106 - v11;
  v13 = sub_100047110((uint64_t *)&unk_100836170);
  v121 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v121 + 64);
  v15 = __chkstk_darwin(v13);
  v119 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v120 = (char *)&v106 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v106 - v18;
  v20 = type metadata accessor for CatalogLockupPlaceholder(0);
  v123 = *(_QWORD *)(v20 - 8);
  v124 = v20;
  __chkstk_darwin(v20);
  v122 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129[3] = type metadata accessor for MindfulnessSessionViewModel(0);
  v129[4] = &off_10078FAD0;
  v129[0] = a1;
  v22 = MindfulnessSessionViewModel.metadata.getter(a1);
  if (!v22)
  {
    v126 = 0u;
    v127 = 0u;
    goto LABEL_10;
  }
  v23 = v22;
  v117 = v19;
  v24 = static HealthDataConstants.catalogWorkoutIdentifierProperty.getter();
  v26 = v25;
  if (!*(_QWORD *)(v23 + 16) || (v27 = sub_100438F74(v24, v25), (v28 & 1) == 0))
  {
    v126 = 0u;
    v127 = 0u;
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v23);
    goto LABEL_10;
  }
  sub_10003E9BC(*(_QWORD *)(v23 + 56) + 32 * v27, (uint64_t)&v126);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v23);
  if (!*((_QWORD *)&v127 + 1))
  {
LABEL_10:
    v29 = sub_1000F996C((uint64_t)&v126);
    goto LABEL_11;
  }
  v29 = swift_dynamicCast(v128, &v126, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_DWORD)v29)
  {
LABEL_11:
    v50 = (void (*)(_QWORD, __n128))a2;
    v51 = static os_log_type_t.error.getter(v29);
    v52 = (void *)HKLogActivity;
    v53 = sub_100047110((uint64_t *)&unk_100827460);
    v54 = swift_allocObject(v53, 112, 7);
    *(_OWORD *)(v54 + 16) = xmmword_100620BC0;
    *(_QWORD *)(v54 + 56) = &type metadata for String;
    v55 = sub_100038CF8();
    *(_QWORD *)(v54 + 64) = v55;
    *(_QWORD *)(v54 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v54 + 40) = 0x80000001006892D0;
    v56 = (void *)v129[0];
    v57 = v52;
    v58 = objc_msgSend(v56, "description");
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;

    *(_QWORD *)(v54 + 96) = &type metadata for String;
    *(_QWORD *)(v54 + 104) = v55;
    *(_QWORD *)(v54 + 72) = v59;
    *(_QWORD *)(v54 + 80) = v61;
    os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v57, "[seymour] %@ failed to load catalog workout identifier for catalog item: %@", 75, 2, v54);

    v62 = swift_bridgeObjectRelease(v54);
    v50(0, v62);
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(v129);
  }
  v107 = v13;
  v116 = (_QWORD *)v128[0];
  v115 = v128[1];
  LODWORD(v114) = static os_log_type_t.default.getter(v29);
  v113 = (id)HKLogActivity;
  v110 = sub_100047110((uint64_t *)&unk_100827460);
  v30 = swift_allocObject(v110, 112, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  v31 = sub_100038CF8();
  *(_QWORD *)(v30 + 64) = v31;
  *(_QWORD *)(v30 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v30 + 40) = 0x80000001006892D0;
  v108 = 0x80000001006892D0;
  v32 = (void *)v129[0];
  v113 = v113;
  v33 = objc_msgSend(v32, "description");
  v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v111 = v34;

  *(_QWORD *)(v30 + 96) = &type metadata for String;
  *(_QWORD *)(v30 + 104) = v31;
  v109 = v31;
  v35 = v111;
  *(_QWORD *)(v30 + 72) = v112;
  *(_QWORD *)(v30 + 80) = v35;
  v36 = v113;
  os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, v113, "[seymour] %@ fetching catalog item view model for catalog item: %@", 66, 2, v30);

  swift_bridgeObjectRelease(v30);
  v37 = v125;
  v38 = *(void **)&v125[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogItemViewModelCache];
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "objectForKey:", v39);

  if (v40)
  {
    v42 = static os_log_type_t.default.getter(v41);
    v43 = (void *)HKLogActivity;
    v44 = swift_allocObject(v110, 152, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100624A40;
    v45 = v109;
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    *(_QWORD *)(v44 + 64) = v45;
    *(_QWORD *)(v44 + 32) = 0xD00000000000002ALL;
    *(_QWORD *)(v44 + 40) = v108;
    *(_QWORD *)(v44 + 96) = &type metadata for String;
    *(_QWORD *)(v44 + 104) = v45;
    v46 = v115;
    *(_QWORD *)(v44 + 72) = v116;
    *(_QWORD *)(v44 + 80) = v46;
    *(_QWORD *)(v44 + 136) = type metadata accessor for CatalogItemViewModel(0);
    *(_QWORD *)(v44 + 144) = sub_1000083D8(&qword_100820A60, type metadata accessor for CatalogItemViewModel, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v44 + 112) = v40;
    v47 = v43;
    v48 = v40;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v47, "[seymour] %@ returning cached catalog item view model for catalog item identifier: %@, catalog item view model: %@", 114, 2, v44);

    swift_bridgeObjectRelease(v44);
    v49 = v48;
    a2(v40);

  }
  else
  {
    v64 = swift_allocObject(&unk_100786410, 24, 7);
    swift_unknownObjectWeakInit(v64 + 16, v37);
    v65 = (_QWORD *)swift_allocObject(&unk_100786810, 56, 7);
    v114 = v65;
    v66 = v116;
    v65[2] = v64;
    v65[3] = v66;
    v67 = v115;
    v65[4] = v115;
    v65[5] = a2;
    v65[6] = a3;
    sub_1000252E0((uint64_t)v129, (uint64_t)&v126);
    v68 = (_QWORD *)swift_allocObject(&unk_100786838, 72, 7);
    v113 = v68;
    sub_10002411C(&v126, (uint64_t)(v68 + 2));
    v68[7] = a2;
    v68[8] = a3;
    swift_retain_n(a3, 2);
    v69 = swift_bridgeObjectRetain(v67);
    v70 = v122;
    CatalogLockupPlaceholder.init(identifier:referenceType:editorialCardIdentifier:)(v116, v67, 8, 0, 1, 0, 0, v69);
    v71 = *(_QWORD *)&v37[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 24];
    v125 = *(char **)&v37[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient + 32];
    v116 = sub_100016804(&v37[OBJC_IVAR____TtC10FitnessApp30SeymourCatalogItemDataProvider_catalogClient], v71);
    v72 = sub_100047110(&qword_100820A58);
    v73 = *(unsigned __int8 *)(v123 + 80);
    v74 = v123;
    v75 = (v73 + 32) & ~v73;
    v76 = swift_allocObject(v72, v75 + *(_QWORD *)(v123 + 72), v73 | 7);
    *(_OWORD *)(v76 + 16) = xmmword_100622F90;
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v76 + v75, v70, v124);
    dispatch thunk of CatalogClientProtocol.fetchRemoteCatalogLockups(displayStyle:placeholders:)(33, v76, v71, v125);
    swift_bridgeObjectRelease(v76);
    v77 = swift_allocObject(&unk_100786860, 32, 7);
    v78 = v114;
    *(_QWORD *)(v77 + 16) = sub_10010FF90;
    *(_QWORD *)(v77 + 24) = v78;
    v79 = swift_allocObject(&unk_100786888, 32, 7);
    *(_QWORD *)(v79 + 16) = sub_100110498;
    *(_QWORD *)(v79 + 24) = v77;
    v80 = v118;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v118);
    v81 = *(unsigned __int8 *)(v7 + 80);
    v82 = (v81 + 16) & ~v81;
    v83 = (v8 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
    v84 = swift_allocObject(&unk_1007868B0, v83 + 16, v81 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v84 + v82, v10, v80);
    v85 = (_QWORD *)(v84 + v83);
    *v85 = sub_1001104C0;
    v85[1] = v79;
    swift_retain(v78);
    v125 = (char *)&type metadata for () + 8;
    v86 = v120;
    Promise.init(asyncOperation:)(sub_10010FFD0, v84, (char *)&type metadata for () + 8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v80);
    v87 = swift_allocObject(&unk_1007868D8, 32, 7);
    v88 = v113;
    *(_QWORD *)(v87 + 16) = sub_100110464;
    *(_QWORD *)(v87 + 24) = v88;
    v89 = swift_allocObject(&unk_100786900, 32, 7);
    *(_QWORD *)(v89 + 16) = sub_1001104AC;
    *(_QWORD *)(v89 + 24) = v87;
    v90 = v121;
    v91 = v119;
    v92 = v107;
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v119, v86, v107);
    v93 = *(unsigned __int8 *)(v90 + 80);
    v94 = (v93 + 16) & ~v93;
    v95 = (v14 + v94 + 7) & 0xFFFFFFFFFFFFFFF8;
    v96 = swift_allocObject(&unk_100786928, v95 + 16, v93 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v96 + v94, v91, v92);
    v97 = (_QWORD *)(v96 + v95);
    *v97 = sub_1001104C4;
    v97[1] = v89;
    v98 = v88;
    swift_retain(v88);
    v99 = v117;
    Promise.init(asyncOperation:)(sub_100110010, v96, v125);
    v100 = *(void (**)(char *, uint64_t))(v90 + 8);
    v100(v86, v92);
    v101 = (void (*)(uint64_t (*)(), uint64_t))Promise.operation.getter(v92);
    v103 = v102;
    v104 = swift_allocObject(&unk_100786950, 32, 7);
    *(_QWORD *)(v104 + 16) = 0;
    *(_QWORD *)(v104 + 24) = 0;
    v101(sub_1001104CC, v104);
    swift_release(v114);
    swift_release(v98);
    swift_release(v103);
    v105 = swift_release(v104);
    ((void (*)(char *, uint64_t, __n128))v100)(v99, v92, v105);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v122, v124);
  }
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(v129);
}

uint64_t sub_10010FAA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10010FABC, v0, 0);
}

uint64_t sub_10010FABC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v0 + 24) = v2;
  if (v2 >> 62)
  {
    if (*(_QWORD *)(v1 + 128) >> 62 == 1)
    {
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v1 + 136));
    }
    else
    {
      v7 = sub_10010FCD8();
      v8 = swift_allocError(&type metadata for SeymourWorkoutRecommendationDataProviderError, v7, 0, 0);
      *v9 = 1;
      swift_willThrow(v8);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v3 = async function pointer to Task.value.getter[1];
    swift_retain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 32) = v4;
    v5 = sub_100047110(&qword_10082EEA0);
    *v4 = v0;
    v4[1] = sub_10010FBD0;
    return Task.value.getter(v5, v2, (char *)&type metadata for () + 8, v5, &protocol self-conformance witness table for Error);
  }
}

uint64_t sub_10010FBD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  v3 = *(_QWORD *)(v2 + 16);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1001104C8;
  }
  else
  {
    v4 = sub_10010FC3C;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10010FC3C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  v2 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v2 + 128) >> 62 == 1)
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v2 + 136), v1);
  v4 = sub_10010FCD8();
  v5 = swift_allocError(&type metadata for SeymourWorkoutRecommendationDataProviderError, v4, 0, 0);
  *v6 = 1;
  swift_willThrow(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10010FCD8()
{
  unint64_t result;

  result = qword_100820A08;
  if (!qword_100820A08)
  {
    result = swift_getWitnessTable(&unk_100624C38, &type metadata for SeymourWorkoutRecommendationDataProviderError);
    atomic_store(result, &qword_100820A08);
  }
  return result;
}

uint64_t sub_10010FD1C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10010FD58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = swift_task_alloc(dword_100820A1C);
  v8 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_1000EA380;
  *(_QWORD *)(v7 + 48) = v5;
  *(_QWORD *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v4;
  return swift_task_switch(sub_10010D4C4, v8, 0);
}

void sub_10010FDDC(uint64_t a1)
{
  uint64_t v1;

  sub_10010D664(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t sub_10010FDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100047110(&qword_100820A30);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10010FE64(void *a1)
{
  uint64_t v1;

  sub_100047110(&qword_100820A30);
  return sub_10010D8D8(a1, *(void **)(v1 + 16));
}

void sub_10010FEA8(uint64_t a1)
{
  uint64_t v1;

  sub_10010CAA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(CHWorkoutDetailHeartRateTableViewCell **)(v1 + 32));
}

uint64_t sub_10010FEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100047110(&qword_100820A40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10010FF18(void *a1)
{
  sub_100047110(&qword_100820A40);
  return sub_10010CBCC(a1);
}

uint64_t sub_10010FF58()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010FF7C()
{
  return sub_100110354((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10010FF98(uint64_t a1)
{
  uint64_t v1;

  return sub_1003947B8(a1, (_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD, __n128))(v1 + 56));
}

uint64_t sub_10010FFA4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10039490C(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_10010FFBC(uint64_t *a1)
{
  uint64_t v1;

  return sub_10039BFE0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10010FFC4()
{
  return sub_10004BE58(&qword_100820A48);
}

uint64_t sub_10010FFD0(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, &qword_100820A48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B18C);
}

uint64_t sub_10010FFE4(uint64_t a1)
{
  uint64_t v1;

  return sub_100394388(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10010FFFC(uint64_t a1)
{
  uint64_t v1;

  return sub_10039AF0C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100110004()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_100110010(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, (uint64_t *)&unk_100836170, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039AF90);
}

uint64_t sub_100110028(uint64_t a1)
{
  uint64_t v1;

  return sub_10039BF20(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_100110030()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100110054()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100110080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100820A6C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000DA0E4;
  v3[5] = v2;
  return swift_task_switch(sub_10010B474, 0, 0);
}

uint64_t sub_1001100E0()
{
  return sub_100110354((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001100F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_100820A7C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1000DA0E4;
  *(_QWORD *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v4;
  return swift_task_switch(sub_10010BA5C, 0, 0);
}

uint64_t sub_10011015C(uint64_t a1)
{
  uint64_t v1;

  return sub_100397F00(a1, *(_QWORD *)(v1 + 16));
}

uint64_t getEnumTagSinglePayload for SeymourWorkoutRecommendationDataProviderError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SeymourWorkoutRecommendationDataProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100110244 + 4 * byte_100624A55[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100110278 + 4 * byte_100624A50[v4]))();
}

uint64_t sub_100110278(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110280(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100110288);
  return result;
}

uint64_t sub_100110294(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011029CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001102A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001102A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeymourWorkoutRecommendationDataProviderError()
{
  return &type metadata for SeymourWorkoutRecommendationDataProviderError;
}

unint64_t sub_1001102C8()
{
  unint64_t result;

  result = qword_100820A90;
  if (!qword_100820A90)
  {
    result = swift_getWitnessTable(&unk_100624C10, &type metadata for SeymourWorkoutRecommendationDataProviderError);
    atomic_store(result, (unint64_t *)&qword_100820A90);
  }
  return result;
}

uint64_t sub_10011030C()
{
  return sub_100110354((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100110324()
{
  return sub_10004BE58(&qword_100820A48);
}

uint64_t sub_100110330()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_100110340()
{
  return sub_100110354((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100110354(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  a1(v2[2]);
  a2(v2[4]);
  swift_release(v2[6]);
  return swift_deallocObject(v2, 56, 7);
}

uint64_t sub_100110398(uint64_t a1)
{
  uint64_t v1;

  return sub_1003943A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(_QWORD, __n128))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1001103AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001103D0()
{
  return sub_10004BE58(&qword_100820A48);
}

uint64_t sub_1001103DC()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_1001103E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(sub_100047110(a3) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(a1, a2, v4 + v8, *v9, v9[1]);
}

uint64_t sub_100110498(_QWORD *a1)
{
  return sub_10010FFA4(a1);
}

uint64_t sub_1001104AC(uint64_t a1)
{
  return sub_10010FFE4(a1);
}

char *sub_1001104D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v6;
  char *v7;
  id v8;
  NSString v9;
  char *v10;
  uint64_t v11;
  char *v12;
  objc_super v14;

  v6 = objc_allocWithZone((Class)type metadata accessor for WorkoutsListContentView());
  v7 = v3;
  v8 = objc_msgSend(v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v7[OBJC_IVAR___CHWorkoutsListTableViewCell_workoutContentView] = v8;

  if (a3)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v9 = 0;
  }
  v14.receiver = v7;
  v14.super_class = (Class)type metadata accessor for WorkoutsListTableViewCell();
  v10 = (char *)objc_msgSendSuper2(&v14, "initWithStyle:reuseIdentifier:", a1, v9);

  v11 = *(_QWORD *)&v10[OBJC_IVAR___CHWorkoutsListTableViewCell_workoutContentView];
  v12 = v10;
  objc_msgSend(v12, "addSubview:", v11);
  sub_100110628();

  return v12;
}

void sub_100110628()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  Class isa;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100047110((uint64_t *)&unk_100828340);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100623750;
  v5 = *(void **)&v1[OBJC_IVAR___CHWorkoutsListTableViewCell_workoutContentView];
  v6 = objc_msgSend(v5, "topAnchor");
  v7 = objc_msgSend(v1, "topAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:", v7);

  *(_QWORD *)(v4 + 32) = v8;
  v9 = objc_msgSend(v5, "leadingAnchor");
  v10 = objc_msgSend(v1, "leadingAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v4 + 40) = v11;
  v12 = objc_msgSend(v5, "trailingAnchor");
  v13 = objc_msgSend(v1, "trailingAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  *(_QWORD *)(v4 + 48) = v14;
  v15 = objc_msgSend(v5, "bottomAnchor");
  v16 = objc_msgSend(v1, "bottomAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  *(_QWORD *)(v4 + 56) = v17;
  specialized Array._endMutation()(v18);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

uint64_t sub_100110A00(void *a1, void *a2, void *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;

  v13 = a5 & 1;
  v14 = *(_BYTE **)(v7 + OBJC_IVAR___CHWorkoutsListTableViewCell_workoutContentView);
  v15 = swift_allocObject(&unk_100786A08, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v7);
  v16 = (_QWORD *)swift_allocObject(&unk_100786A30, 40, 7);
  v16[2] = v15;
  v16[3] = a6;
  v16[4] = a7;
  v17 = *(void **)&v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workout];
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workout] = a1;
  swift_retain(v15);
  sub_10003AFE0(a6, a7);
  v18 = a1;

  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_achievementCount] = a4;
  v19 = *(void **)&v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_formattingManager];
  *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_formattingManager] = a3;
  v20 = a3;

  v14[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_diveDisplayStyle] = v13;
  sub_1005ED270(v18, a2, v20, a4, v13, (uint64_t)sub_1001125C4, (uint64_t)v16);
  objc_msgSend(v14, "configureWithCurrentWorkout");
  swift_release(v15);
  return swift_release(v16);
}

uint64_t sub_100110B5C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[5];
  uint64_t v10;

  v4 = objc_opt_self(UIView);
  v5 = swift_allocObject(&unk_100786A58, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001125D0;
  *(_QWORD *)(v5 + 24) = a1;
  v9[4] = sub_10003A2B4;
  v10 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_1004462C0;
  v9[3] = &unk_100786A70;
  v6 = _Block_copy(v9);
  v7 = v10;
  swift_retain(a1);
  swift_retain(v5);
  swift_release(v7);
  objc_msgSend((id)v4, "performWithoutAnimation:", v6);
  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v5, "", 108, 70, 44, 1);
  result = swift_release(v5);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
      a2(result);
    return swift_release(a1);
  }
  return result;
}

void sub_100110C94(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "invalidateIntrinsicContentSize");

  }
}

id sub_100110DB0()
{
  return sub_100111F3C(type metadata accessor for WorkoutsListTableViewCell);
}

char *sub_100110DCC(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  objc_super v26;

  swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workout] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_formattingManager] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_achievementCount] = 0;
  v4[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_diveDisplayStyle] = 1;
  v9 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView;
  v10 = objc_allocWithZone((Class)UIView);
  v11 = v4;
  v12 = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v4[v9] = v12;
  v13 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workoutCellImageLabelView;
  v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WorkoutCellImageLabelView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v11[v13] = v14;
  v15 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_dateLabel;
  v16 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v11[v15] = v16;

  v26.receiver = v11;
  v26.super_class = (Class)type metadata accessor for WorkoutsListContentView();
  v17 = (char *)objc_msgSendSuper2(&v26, "initWithFrame:", a1, a2, a3, a4);
  v18 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView;
  v19 = *(void **)&v17[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView];
  v20 = v17;
  v21 = v19;
  v22 = sub_100032478();
  objc_msgSend(v21, "setBackgroundColor:", v22);

  v23 = objc_msgSend(*(id *)&v17[v18], "layer");
  objc_msgSend(v23, "setCornerRadius:", sub_10003249C());

  v24 = *(void **)&v17[v18];
  objc_msgSend(v24, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workoutCellImageLabelView]);
  objc_msgSend(v24, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_dateLabel]);
  objc_msgSend(v20, "addSubview:", v24);
  sub_100111090();

  return v20;
}

void sub_100111090()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;
  id v12;
  double v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t inited;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  Class isa;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _QWORD v87[2];
  char v88[56];
  uint64_t v89;

  v1 = v0;
  swift_getObjectType(v0);
  v85 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v85, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100624C80;
  v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView];
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = objc_msgSend(v0, "topAnchor");
  v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, sub_100032C24());

  *(_QWORD *)(v2 + 32) = v6;
  v7 = objc_msgSend(v3, "leadingAnchor");
  v8 = objc_msgSend(v0, "leadingAnchor");
  sub_100032C24();
  v10 = objc_msgSend(v7, "constraintEqualToAnchor:constant:", v8, v9);

  *(_QWORD *)(v2 + 40) = v10;
  v11 = objc_msgSend(v3, "trailingAnchor");
  v12 = objc_msgSend(v0, "trailingAnchor");
  sub_100032C24();
  v14 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v12, -v13);

  *(_QWORD *)(v2 + 48) = v14;
  v15 = objc_msgSend(v3, "bottomAnchor");
  v16 = objc_msgSend(v0, "bottomAnchor");
  sub_100032C24();
  v18 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v16, -v17);

  *(_QWORD *)(v2 + 56) = v18;
  v19 = *(char **)&v1[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workoutCellImageLabelView];
  v20 = objc_msgSend(v19, "leadingAnchor");
  v21 = objc_msgSend(v3, "leadingAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v21, 16.0);

  *(_QWORD *)(v2 + 64) = v22;
  v23 = objc_msgSend(v19, "topAnchor");
  v24 = objc_msgSend(v3, "topAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v2 + 72) = v25;
  v26 = objc_msgSend(v19, "bottomAnchor");
  v27 = objc_msgSend(v3, "bottomAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  *(_QWORD *)(v2 + 80) = v28;
  v29 = objc_msgSend(v19, "trailingAnchor");
  v30 = objc_msgSend(v3, "trailingAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, -16.0);

  *(_QWORD *)(v2 + 88) = v31;
  v89 = v2;
  specialized Array._endMutation()(v32);
  v84 = v2;
  inited = swift_initStackObject(v85, v88);
  *(_OWORD *)(inited + 16) = xmmword_100624C90;
  v34 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_dateLabel];
  v35 = objc_msgSend(v34, "leadingAnchor");
  v36 = objc_msgSend(v3, "leadingAnchor");
  v37 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v36, 16.0);

  v86 = v37;
  *(_QWORD *)(inited + 32) = v37;
  v38 = objc_msgSend(v34, "topAnchor");
  v39 = OBJC_IVAR___CHWorkoutCellImageLabelView_goalLabel;
  v40 = objc_msgSend(*(id *)&v19[OBJC_IVAR___CHWorkoutCellImageLabelView_goalLabel], "lastBaselineAnchor");
  v41 = objc_msgSend(v38, "constraintGreaterThanOrEqualToAnchor:constant:", v40, 10.0);

  v83 = v41;
  *(_QWORD *)(inited + 40) = v41;
  v42 = objc_msgSend(v34, "lastBaselineAnchor");
  v43 = objc_msgSend(*(id *)&v19[OBJC_IVAR___CHWorkoutCellImageLabelView_badgeCountLabel], "lastBaselineAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

  *(_QWORD *)(inited + 48) = v44;
  v45 = objc_msgSend(v34, "trailingAnchor");
  v46 = objc_msgSend(v3, "trailingAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -16.0);

  v87[0] = v47;
  v48 = objc_msgSend(v34, "lastBaselineAnchor");
  v49 = objc_msgSend(*(id *)&v19[v39], "lastBaselineAnchor");
  v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

  v87[1] = v50;
  v51 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v52 = objc_msgSend(v51, "preferredContentSizeCategory");

  LOBYTE(v51) = UIContentSizeCategory.isAccessibilityCategory.getter(v52);
  if ((v51 & 1) != 0)
  {
    swift_arrayDestroy(v87, 2, (char *)&type metadata for Swift.AnyObject + 8);
    v89 = v84;
    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v78 = v84;
      else
        v78 = v84 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v84);
      v79 = _CocoaArrayWrapper.endIndex.getter(v78);
      v80 = __OFADD__(v79, 3);
      v55 = v79 + 3;
      if (!v80)
      {
LABEL_4:
        v56 = sub_10003561C(v55, 1);
        specialized Array._endMutation()(v56);
        v47 = v86;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        v39 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v54 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v39 < v54 >> 1)
        {
LABEL_5:
          v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v47);
          specialized Array._endMutation()(v57);
          v58 = v83;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
          v60 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v59 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v60 >= v59 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
          v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
          specialized Array._endMutation()(v61);
          v62 = v44;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
          v64 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v63 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v64 >= v63 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
          v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v62);
          specialized Array._endMutation()(v65);
          v66 = v89;
          swift_release(inited);
          swift_bridgeObjectRelease(v84);
          goto LABEL_16;
        }
LABEL_23:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v39 + 1, 1);
        goto LABEL_5;
      }
    }
    else
    {
      v53 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v84);
      v55 = v53 + 3;
      if (!__OFADD__(v53, 3))
        goto LABEL_4;
    }
    __break(1u);
    goto LABEL_23;
  }
  swift_release(inited);
  v89 = v84;
  if (!((unint64_t)v84 >> 62))
  {
    v67 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v84);
    v69 = v67 + 2;
    if (!__OFADD__(v67, 2))
      goto LABEL_12;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v84 < 0)
    v81 = v84;
  else
    v81 = v84 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v84);
  v82 = _CocoaArrayWrapper.endIndex.getter(v81);
  v80 = __OFADD__(v82, 2);
  v69 = v82 + 2;
  if (v80)
    goto LABEL_29;
LABEL_12:
  v70 = sub_10003561C(v69, 1);
  specialized Array._endMutation()(v70);
  v47 = v47;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
  inited = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v68 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (inited >= v68 >> 1)
LABEL_30:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, inited + 1, 1);
  v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(inited, v47);
  specialized Array._endMutation()(v71);
  v72 = v50;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
  v74 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v73 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v74 >= v73 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
  v75 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
  specialized Array._endMutation()(v75);
  v66 = v89;
  swift_bridgeObjectRelease(v84);
  swift_arrayDestroy(v87, 2, (char *)&type metadata for Swift.AnyObject + 8);
LABEL_16:
  v76 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v76, "activateConstraints:", isa, swift_bridgeObjectRelease(v66).n128_f64[0]);

}

void sub_1001119E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void *v14;
  NSString *v15;
  id v16;
  uint64_t v17;
  void *v18;
  NSString *v19;
  id v20;
  unint64_t v21;
  id v22;
  NSString v23;
  Class isa;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  void *v33;
  _QWORD v34[2];
  id v35;
  id v36;
  _OWORD v37[16];
  uint64_t v38;
  _OWORD v39[16];

  v1 = v0;
  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workout);
  if (v5)
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_formattingManager);
    if (v6)
    {
      v7 = v5;
      v35 = v7;
      v36 = v6;
      v8 = objc_msgSend(v36, "formattedDateForWorkout:context:", v7, CFSTR("WorkoutsListDisplayContext"));
      v9 = objc_msgSend(v8, "string");

      v34[1] = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v11 = v10;

      v12 = sub_100047110((uint64_t *)&unk_10082EDA0);
      inited = swift_initStackObject(v12, &v38);
      *(_OWORD *)(inited + 16) = xmmword_100620BC0;
      *(_QWORD *)(inited + 32) = NSFontAttributeName;
      v14 = (void *)objc_opt_self(UIFont);
      v15 = NSFontAttributeName;
      v16 = objc_msgSend(v14, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
      v17 = sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
      *(_QWORD *)(inited + 40) = v16;
      *(_QWORD *)(inited + 64) = v17;
      *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
      v18 = (void *)objc_opt_self(UIColor);
      v19 = NSForegroundColorAttributeName;
      v20 = objc_msgSend(v18, "secondaryLabelColor");
      *(_QWORD *)(inited + 104) = sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
      *(_QWORD *)(inited + 80) = v20;
      v21 = sub_100038C84(inited);
      v22 = objc_allocWithZone((Class)NSAttributedString);
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      type metadata accessor for Key(0);
      sub_1000083D8((unint64_t *)&qword_10081E850, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1006226C0);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v25 = objc_msgSend(v22, "initWithString:attributes:", v23, isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_dateLabel), "setAttributedText:", v25);
      v26 = v35;
      v27 = v36;
      sub_1001641A8(v26, v27, v39);
      *(_QWORD *)&v37[0] = _swiftEmptyArrayStorage;
      sub_100112010(v39);
      v28 = sub_1000083D8((unint64_t *)&qword_10081F608, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v29 = sub_100047110((uint64_t *)&unk_10083D740);
      v30 = sub_1001121C8();
      dispatch thunk of SetAlgebra.init<A>(_:)(v37, v29, v30, v2, v28);
      v37[12] = v39[12];
      v37[13] = v39[13];
      v37[14] = v39[14];
      v37[15] = v39[15];
      v37[8] = v39[8];
      v37[9] = v39[9];
      v37[10] = v39[10];
      v37[11] = v39[11];
      v37[4] = v39[4];
      v37[5] = v39[5];
      v37[6] = v39[6];
      v37[7] = v39[7];
      v37[0] = v39[0];
      v37[1] = v39[1];
      v37[2] = v39[2];
      v37[3] = v39[3];
      v31 = objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v32 = sub_100112214();
      v33 = (void *)AppEntityViewAnnotation.init<A>(entity:state:)(v37, v4, &type metadata for WorkoutEntity, v32);
      UIView.annotate(with:)();

      sub_100112258(v39);
    }
  }
}

void sub_100111E58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  swift_getObjectType(v0);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workoutCellImageLabelView);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___CHWorkoutCellImageLabelView_workoutImageView), "setImage:", 0);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___CHWorkoutCellImageLabelView_workoutIconView), "setImage:", 0);
  *(_QWORD *)(v1 + OBJC_IVAR___CHWorkoutCellImageLabelView_achievementCount) = 0;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___CHWorkoutCellImageLabelView_separatorView), "setHidden:", 1);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView);
  v3 = sub_100032478();
  objc_msgSend(v2, "setBackgroundColor:", v3);

}

id sub_100111F30()
{
  return sub_100111F3C(type metadata accessor for WorkoutsListContentView);
}

id sub_100111F3C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for WorkoutsListContentView()
{
  return objc_opt_self(_TtC10FitnessApp23WorkoutsListContentView);
}

unint64_t sub_100111FF4()
{
  return 0xD000000000000019;
}

_QWORD *sub_100112010(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v13 = a1[13];
  v14 = a1[14];
  v15 = a1[15];
  v16 = a1[16];
  v17 = a1[17];
  v18 = a1[18];
  v19 = a1[19];
  v20 = a1[20];
  v21 = a1[21];
  v22 = a1[22];
  v23 = a1[23];
  v24 = a1[24];
  v25 = a1[25];
  v26 = a1[26];
  v27 = a1[27];
  v28 = (void *)a1[28];
  v29 = a1[29];
  v30 = a1[30];
  v31 = a1[31];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v24);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v27);
  v11 = v28;
  swift_retain(v29);
  swift_retain(v30);
  swift_retain(v31);
  return a1;
}

unint64_t sub_1001121C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F610;
  if (!qword_10081F610)
  {
    v1 = sub_100007050((uint64_t *)&unk_10083D740);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10081F610);
  }
  return result;
}

unint64_t sub_100112214()
{
  unint64_t result;

  result = qword_100820B28;
  if (!qword_100820B28)
  {
    result = swift_getWitnessTable(&unk_100627DD8, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100820B28);
  }
  return result;
}

_QWORD *sub_100112258(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a1[3];
  v30 = a1[1];
  v28 = a1[5];
  v26 = a1[7];
  v27 = a1[6];
  v24 = a1[9];
  v25 = a1[8];
  v22 = a1[11];
  v23 = a1[10];
  v20 = a1[13];
  v21 = a1[12];
  v18 = a1[15];
  v19 = a1[14];
  v16 = a1[17];
  v17 = a1[16];
  v14 = a1[19];
  v15 = a1[18];
  v2 = a1[22];
  v12 = a1[21];
  v13 = a1[20];
  v3 = a1[23];
  v4 = a1[24];
  v5 = a1[25];
  v6 = a1[26];
  v8 = a1[27];
  v7 = (void *)a1[28];
  v9 = a1[29];
  v10 = a1[30];
  swift_release(a1[31]);
  swift_release(v10);
  swift_release(v9);

  swift_release(v8);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  swift_release(v21);
  swift_release(v22);
  swift_release(v23);
  swift_release(v24);
  swift_release(v25);
  swift_release(v26);
  swift_release(v27);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v30);
  return a1;
}

void sub_100112408()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workout] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_formattingManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_achievementCount] = 0;
  v0[OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_diveDisplayStyle] = 1;
  v1 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_insetContentView;
  v2 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v1] = v2;
  v3 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_workoutCellImageLabelView;
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WorkoutCellImageLabelView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v3] = v4;
  v5 = OBJC_IVAR____TtC10FitnessApp23WorkoutsListContentView_dateLabel;
  v6 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v5] = v6;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/WorkoutsListTableViewCell.swift", 42, 2, 131, 0);
  __break(1u);
}

uint64_t sub_10011256C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100112590()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001125C4()
{
  uint64_t v0;

  return sub_100110B5C(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_1001125D0()
{
  uint64_t v0;

  sub_100110C94(v0);
}

uint64_t sub_1001125D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001125E8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011260C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;

  v39 = a1;
  v1 = type metadata accessor for URLComponents(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v17 = sub_100047110(&qword_10082E5E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(string:)(0xD000000000000012, 0x8000000100689720);
  URLQueryItem.init(name:value:)(0x656C746954, 0xE500000000000000, 0xD000000000000011, 0x8000000100689740);
  v42 = v13;
  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43, 0xED0000656D614E74, 0x7974697669746341, 0xEF73646E65725420);
  v41 = v10;
  URLQueryItem.init(name:value:)(0xD000000000000010, 0x8000000100689760, 7105601, 0xE300000000000000);
  v40 = v7;
  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43, 0xEB00000000444974, 0x32343731333031, 0xE700000000000000);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (!v20(v19, 1, v1))
  {
    v21 = sub_100047110(&qword_1008396C0);
    v37 = v2;
    v22 = *(_QWORD *)(v5 + 72);
    v23 = *(unsigned __int8 *)(v5 + 80);
    v24 = (v23 + 32) & ~v23;
    v25 = swift_allocObject(v21, v24 + 4 * v22, v23 | 7);
    *(_OWORD *)(v25 + 16) = xmmword_100624D00;
    v26 = v25 + v24;
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 16);
    v27(v26, v16, v4);
    v27(v26 + v22, v42, v4);
    v36 = v1;
    v27(v26 + 2 * v22, v41, v4);
    v28 = 3 * v22;
    v1 = v36;
    v2 = v37;
    v27(v26 + v28, v40, v4);
    URLComponents.queryItems.setter(v25);
  }
  if (v20(v19, 1, v1))
  {
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v40, v4);
    v29(v41, v4);
    v29(v42, v4);
    v29(v16, v4);
    v30 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v39, 1, 1, v30);
  }
  else
  {
    v31 = v38;
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v38, v19, v1);
    URLComponents.url.getter(v32);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v31, v1);
    v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v40, v4);
    v33(v41, v4);
    v33(v42, v4);
    v33(v16, v4);
  }
  return sub_100112A1C((uint64_t)v19);
}

uint64_t type metadata accessor for TrendsRadarHandler()
{
  return objc_opt_self(_TtC10FitnessApp18TrendsRadarHandler);
}

uint64_t sub_100112A1C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10082E5E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for TrendsCoachingUserInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for TrendsCoachingUserInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

__n128 initializeWithTake for TrendsCoachingUserInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TrendsCoachingUserInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendsCoachingUserInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 43))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendsCoachingUserInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 43) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 43) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendsCoachingUserInfo()
{
  return &type metadata for TrendsCoachingUserInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActivitySharingFriendListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ActivitySharingFriendListSectionView(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for ActivitySharingFriendListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for ActivitySharingFriendListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingFriendListSectionView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingFriendListSectionView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingFriendListSectionView()
{
  return &type metadata for ActivitySharingFriendListSectionView;
}

uint64_t sub_100112DEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABE0C, 1);
}

uint64_t sub_100112DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v6 = sub_100047110(&qword_100820BC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100047110(&qword_100820BD0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_100624E08);
    v14 = swift_getKeyPath(&unk_100624E30);
    swift_retain(a1);
    static Published.subscript.getter(v31, v15, KeyPath, v14);
    swift_release(a1);
    swift_release(KeyPath);
    swift_release(v14);
    if (v31[0])
    {
      v17 = v31[1];
      v16 = v31[2];
      swift_bridgeObjectRelease(v31[0]);
      swift_bridgeObjectRelease(v16);
      v31[0] = v17;
      v18 = swift_allocObject(&unk_100786BE8, 32, 7);
      *(_QWORD *)(v18 + 16) = a1;
      *(_QWORD *)(v18 + 24) = a2;
      swift_retain(a1);
      v19 = sub_100047110(&qword_100820C28);
      v20 = sub_100047110(&qword_100820BE8);
      v21 = sub_100028384(&qword_100820C30, &qword_100820C28, (uint64_t)&protocol conformance descriptor for [A]);
      v22 = sub_100113848();
      v30 = a3;
      v23 = v22;
      v24 = sub_1000083D8(&qword_100820C38, type metadata accessor for ActivitySharingFriendListDateItemGroup, (uint64_t)&unk_100629AF8);
      ForEach<>.init(_:content:)(v31, sub_1001139E4, v18, v19, &type metadata for Int, v20, v21, v23, v24);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
      swift_storeEnumTagMultiPayload(v8, v6, 0);
      v25 = sub_1001137E4();
      _ConditionalContent<>.init(storage:)(v8, v9, &type metadata for EmptyView, v25, &protocol witness table for EmptyView);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v8, v6, 1);
      v27 = sub_1001137E4();
      return _ConditionalContent<>.init(storage:)(v8, v9, &type metadata for EmptyView, v27, &protocol witness table for EmptyView);
    }
  }
  else
  {
    v28 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
    v29 = sub_1000083D8((unint64_t *)&qword_1008240B0, type metadata accessor for ActivitySharingFriendListDataProvider, (uint64_t)&unk_100625DD8);
    result = EnvironmentObject.error()(0, a2, v28, v29);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001130CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;

  v2 = sub_100047110(&qword_100820C08);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_100820BF8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = (void *)objc_opt_self(FIUIDateFormattingUtilities);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, "stringWithEitherTodayOrLongStyleDateFromDate:", isa);

  if (v13)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v18 = sub_100047110(&qword_100820C40);
  sub_100113490(v15, v17, (uint64_t)&v4[*(int *)(v18 + 44)]);
  swift_bridgeObjectRelease(v17);
  v20 = static Edge.Set.all.getter(v19);
  sub_100021CC0((uint64_t)v4, (uint64_t)v10, &qword_100820C08);
  v21 = &v10[*(int *)(v5 + 36)];
  *v21 = v20;
  *(_OWORD *)(v21 + 8) = xmmword_100624D70;
  *(_OWORD *)(v21 + 24) = xmmword_100622F50;
  v21[40] = 0;
  sub_10001BE90((uint64_t)v4, &qword_100820C08);
  v22 = sub_100021CC0((uint64_t)v10, (uint64_t)v8, &qword_100820BF8);
  __chkstk_darwin(v22);
  *(&v27 - 2) = a1;
  v23 = sub_100047110(&qword_100820C18);
  v24 = sub_1001138C0();
  v25 = sub_100113944();
  Section<>.init(header:content:)(v8, sub_1001139EC, &v27 - 4, v5, v23, v24, v25);
  return sub_10001BE90((uint64_t)v10, &qword_100820BF8);
}

uint64_t sub_10011331C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ActivitySharingFriendListDateItemGroup(0) + 20));
  swift_bridgeObjectRetain(v8);
  v1 = sub_100047110(&qword_100820C48);
  v2 = type metadata accessor for UUID(0);
  v3 = type metadata accessor for ActivitySharingFriendListItemView(0);
  v4 = sub_100028384(&qword_100820C50, &qword_100820C48, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_1000083D8(&qword_100820C20, type metadata accessor for ActivitySharingFriendListItemView, (uint64_t)&unk_100633B80);
  v6 = sub_1000083D8(&qword_100820C58, type metadata accessor for ActivitySharingFriendListItem, (uint64_t)&unk_10062E0A8);
  return ForEach<>.init(_:content:)(&v8, sub_100113424, 0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_100113424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1001139F4(a1, a2);
  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ActivitySharingFriendListItemView(0) + 20));
  v4 = type metadata accessor for ActivitySharingNavigationCoordinator();
  v5 = sub_1000083D8(&qword_10081EDC0, (uint64_t (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator, (uint64_t)&unk_1006328F8);
  result = EnvironmentObject.init()(v4, v5);
  *v3 = result;
  v3[1] = v7;
  return result;
}

uint64_t sub_100113490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v41 = a3;
  v38 = sub_100047110(&qword_100820C60);
  __chkstk_darwin(v38);
  v37 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100047110(&qword_100820C68);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100047110(&qword_100820C70);
  __chkstk_darwin(v36);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100047110(&qword_100820C78);
  v11 = __chkstk_darwin(v40);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v39 = (uint64_t)&v36 - v14;
  v42[0] = a1;
  v42[1] = a2;
  v15 = sub_100038CA0();
  swift_bridgeObjectRetain(a2);
  v16 = Text.init<A>(_:)(v42, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = enum case for Text.Case.uppercase(_:);
  v24 = type metadata accessor for Text.Case(0);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v8, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v8, 0, 1, v24);
  KeyPath = swift_getKeyPath(&unk_100624E50);
  v27 = v37;
  sub_100021CC0((uint64_t)v8, (uint64_t)v37 + *(int *)(v38 + 28), &qword_100820C68);
  *v27 = KeyPath;
  sub_100021CC0((uint64_t)v27, (uint64_t)&v10[*(int *)(v36 + 36)], &qword_100820C60);
  *(_QWORD *)v10 = v16;
  *((_QWORD *)v10 + 1) = v18;
  v10[16] = v22;
  *((_QWORD *)v10 + 3) = v20;
  sub_1000E439C(v16, v18, v22);
  swift_bridgeObjectRetain(v20);
  sub_10001BE90((uint64_t)v27, &qword_100820C60);
  sub_10001BE90((uint64_t)v8, &qword_100820C68);
  sub_1000E4458(v16, v18, v22);
  v28 = swift_bridgeObjectRelease(v20);
  v29 = static Color.gray.getter(v28);
  v30 = swift_getKeyPath(&unk_100624E80);
  sub_100021CC0((uint64_t)v10, (uint64_t)v13, &qword_100820C70);
  v31 = (uint64_t *)&v13[*(int *)(v40 + 36)];
  *v31 = v30;
  v31[1] = v29;
  sub_10001BE90((uint64_t)v10, &qword_100820C70);
  v32 = v39;
  sub_100113A48((uint64_t)v13, v39);
  sub_100021CC0(v32, (uint64_t)v13, &qword_100820C78);
  v33 = v41;
  sub_100021CC0((uint64_t)v13, v41, &qword_100820C78);
  v34 = v33 + *(int *)(sub_100047110(&qword_100820C80) + 48);
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  sub_10001BE90(v32, &qword_100820C78);
  return sub_10001BE90((uint64_t)v13, &qword_100820C78);
}

uint64_t sub_1001137D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100112DFC(*v1, v1[1], a1);
}

unint64_t sub_1001137E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820BD8;
  if (!qword_100820BD8)
  {
    v1 = sub_100007050(&qword_100820BD0);
    sub_100113848();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100820BD8);
  }
  return result;
}

unint64_t sub_100113848()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820BE0;
  if (!qword_100820BE0)
  {
    v1 = sub_100007050(&qword_100820BE8);
    sub_1001138C0();
    sub_100113944();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100820BE0);
  }
  return result;
}

unint64_t sub_1001138C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820BF0;
  if (!qword_100820BF0)
  {
    v1 = sub_100007050(&qword_100820BF8);
    sub_100028384(&qword_100820C00, &qword_100820C08, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820BF0);
  }
  return result;
}

unint64_t sub_100113944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820C10;
  if (!qword_100820C10)
  {
    v1 = sub_100007050(&qword_100820C18);
    sub_1000083D8(&qword_100820C20, type metadata accessor for ActivitySharingFriendListItemView, (uint64_t)&unk_100633B80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100820C10);
  }
  return result;
}

uint64_t sub_1001139C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001139E4(uint64_t a1)
{
  return sub_1001130CC(a1);
}

uint64_t sub_1001139EC()
{
  uint64_t v0;

  return sub_10011331C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001139F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivitySharingFriendListItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100113A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100820C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100113A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820C88;
  if (!qword_100820C88)
  {
    v1 = sub_100007050(&qword_100820C90);
    sub_1001137E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820C88);
  }
  return result;
}

uint64_t sub_100113B04(uint64_t a1, uint64_t a2)
{
  return DateInterval.contains(_:)(a2) & 1;
}

uint64_t sub_100113B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_100047110(&qword_100820D40);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100820D48);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100820D38);
  sub_100008398(v7, qword_100869CD8);
  sub_10003CE9C(v7, (uint64_t)qword_100869CD8);
  v8 = sub_1001145D4();
  EnumURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for SettingsEnum, v8);
  v9._object = (void *)0x80000001006897A0;
  v9._countAndFlagsBits = 0xD000000000000016;
  EnumURLRepresentation.StringInterpolation.appendLiteral(_:)(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for EnumURLRepresentation.StringInterpolation.Token.rawValue<A>(_:), v0);
  EnumURLRepresentation.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  EnumURLRepresentation.StringInterpolation.appendLiteral(_:)(v10);
  return EnumURLRepresentation.init(stringInterpolation:)(v6, &type metadata for SettingsEnum, v8);
}

uint64_t sub_100113CB4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100008398(v7, qword_100869CF0);
  sub_10003CE9C(v7, (uint64_t)qword_100869CF0);
  LocalizedStringResource.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_100113DC0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t result;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);

  v0 = sub_100047110(&qword_100820D18);
  __chkstk_darwin(v0);
  v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100820D20);
  v11 = sub_100047110(&qword_100820D28);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v30 = 4 * v13;
  v16 = swift_allocObject(v10, v15 + 5 * v13, v14 | 7);
  v31 = v16;
  *(_OWORD *)(v16 + 16) = xmmword_100624EB0;
  v17 = v16 + v15;
  v29 = v16 + v15 + *(int *)(v11 + 48);
  *(_BYTE *)(v16 + v15) = 0;
  LocalizedStringResource.init(stringLiteral:)(0x74746553206C6C41, 0xEC00000073676E69);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v32(v5, 1, 1, v6);
  v18 = type metadata accessor for DisplayRepresentation.Image(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v2, 1, 1, v18);
  v27 = v19;
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  v20 = v17 + v13 + *(int *)(v11 + 48);
  v28 = v13;
  v29 = v20;
  *(_BYTE *)(v17 + v13) = 1;
  LocalizedStringResource.init(stringLiteral:)(0x472065676E616843, 0xEC000000736C616FLL);
  v21 = v32;
  v32(v5, 1, 1, v6);
  v19(v2, 1, 1, v18);
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  *(_BYTE *)(v17 + 2 * v13) = 2;
  LocalizedStringResource.init(stringLiteral:)(0x442068746C616548, 0xEE00736C69617465);
  v21(v5, 1, 1, v6);
  v22 = v27;
  v27(v2, 1, 1, v18);
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  *(_BYTE *)(v17 + 2 * v13 + v28) = 3;
  LocalizedStringResource.init(stringLiteral:)(0x6163696669746F4ELL, 0xED0000736E6F6974);
  v23 = v6;
  v24 = v6;
  v25 = v32;
  v32(v5, 1, 1, v24);
  v22(v2, 1, 1, v18);
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  *(_BYTE *)(v17 + v30) = 4;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x8000000100689780);
  v25(v5, 1, 1, v23);
  v22(v2, 1, 1, v18);
  DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
  result = sub_100435BFC(v31);
  qword_100869D08 = result;
  return result;
}

void sub_1001141A4(char *a1)
{
  sub_100390CCC(*a1);
}

unint64_t sub_1001141B4()
{
  unint64_t result;

  result = qword_100820C98;
  if (!qword_100820C98)
  {
    result = swift_getWitnessTable(&unk_100624EE0, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820C98);
  }
  return result;
}

void sub_1001141F8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10011423C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x736C616F67, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_1001142C0()
{
  __asm { BR              X10 }
}

uint64_t sub_1001142F4(uint64_t a1)
{
  String.hash(into:)(a1, 0x736C616F67, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100114364(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1001143A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x736C616F67, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100114428@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100114BFC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100114454()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10011447C + 4 * byte_100624ECF[*v0]))();
}

void sub_10011447C(_QWORD *a1@<X8>)
{
  *a1 = 0x736C616F67;
  a1[1] = 0xE500000000000000;
}

void sub_100114494(_QWORD *a1@<X8>)
{
  *a1 = 0x68746C616568;
  a1[1] = 0xE600000000000000;
}

void sub_1001144AC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "notifications");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1001144D4(_QWORD *a1@<X8>)
{
  *a1 = 0x7374696E75;
  a1[1] = 0xE500000000000000;
}

unint64_t sub_1001144F0()
{
  unint64_t result;

  result = qword_100820CA0;
  if (!qword_100820CA0)
  {
    result = swift_getWitnessTable(&unk_100624FF8, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CA0);
  }
  return result;
}

unint64_t sub_100114538()
{
  unint64_t result;

  result = qword_100820CA8;
  if (!qword_100820CA8)
  {
    result = swift_getWitnessTable(&unk_100625030, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CA8);
  }
  return result;
}

unint64_t sub_100114580()
{
  unint64_t result;

  result = qword_100820CB0;
  if (!qword_100820CB0)
  {
    result = swift_getWitnessTable(&unk_100624F48, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CB0);
  }
  return result;
}

void *sub_1001145C4()
{
  return &protocol witness table for String;
}

unint64_t sub_1001145D4()
{
  unint64_t result;

  result = qword_100820CB8;
  if (!qword_100820CB8)
  {
    result = swift_getWitnessTable(&unk_100624F80, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CB8);
  }
  return result;
}

unint64_t sub_10011461C()
{
  unint64_t result;

  result = qword_100820CC0;
  if (!qword_100820CC0)
  {
    result = swift_getWitnessTable(&unk_100625060, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CC0);
  }
  return result;
}

uint64_t sub_100114660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D530 != -1)
    swift_once(&qword_10081D530, sub_100113B34);
  v2 = sub_100047110(&qword_100820D38);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869CD8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1001146D8()
{
  unint64_t result;

  result = qword_100820CC8;
  if (!qword_100820CC8)
  {
    result = swift_getWitnessTable(&unk_100625088, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CC8);
  }
  return result;
}

unint64_t sub_100114720()
{
  unint64_t result;

  result = qword_100820CD0;
  if (!qword_100820CD0)
  {
    result = swift_getWitnessTable(&unk_1006250B0, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CD0);
  }
  return result;
}

unint64_t sub_100114768()
{
  unint64_t result;

  result = qword_100820CD8;
  if (!qword_100820CD8)
  {
    result = swift_getWitnessTable(&unk_1006250D8, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CD8);
  }
  return result;
}

unint64_t sub_1001147B0()
{
  unint64_t result;

  result = qword_100820CE0;
  if (!qword_100820CE0)
  {
    result = swift_getWitnessTable(&unk_100625130, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CE0);
  }
  return result;
}

uint64_t sub_1001147F4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100114BA4();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_100114BE8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100114840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D538 != -1)
    swift_once(&qword_10081D538, sub_100113CB4);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869CF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001148B0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1001145D4();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

uint64_t sub_1001148F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001145D4();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10011492C()
{
  unint64_t result;

  result = qword_100820CF0;
  if (!qword_100820CF0)
  {
    result = swift_getWitnessTable(&unk_100625170, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CF0);
  }
  return result;
}

unint64_t sub_100114974()
{
  unint64_t result;

  result = qword_100820CF8;
  if (!qword_100820CF8)
  {
    result = swift_getWitnessTable(&unk_100625198, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820CF8);
  }
  return result;
}

unint64_t sub_1001149BC()
{
  unint64_t result;

  result = qword_100820D00;
  if (!qword_100820D00)
  {
    result = swift_getWitnessTable(&unk_100624F08, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820D00);
  }
  return result;
}

double sub_100114A00()
{
  double result;

  if (qword_10081D540 != -1)
    swift_once(&qword_10081D540, sub_100113DC0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(qword_100869D08).n128_u64[0];
  return result;
}

uint64_t sub_100114A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001147B0();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100114A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820D08;
  if (!qword_100820D08)
  {
    v1 = sub_100007050(&qword_100820D10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100820D08);
  }
  return result;
}

void sub_100114AC8(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F0C8;
}

uint64_t storeEnumTagSinglePayload for SettingsEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100114B24 + 4 * byte_100624ED9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100114B58 + 4 * byte_100624ED4[v4]))();
}

uint64_t sub_100114B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100114B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100114B68);
  return result;
}

uint64_t sub_100114B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100114B7CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100114B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100114B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingsEnum()
{
  return &type metadata for SettingsEnum;
}

unint64_t sub_100114BA4()
{
  unint64_t result;

  result = qword_100820D30;
  if (!qword_100820D30)
  {
    result = swift_getWitnessTable(&unk_100624FC0, &type metadata for SettingsEnum);
    atomic_store(result, (unint64_t *)&qword_100820D30);
  }
  return result;
}

uint64_t sub_100114BE8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

unint64_t sub_100114BFC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10077F030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t destroy for WorkoutDetailPowerView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for WorkoutDetailPowerView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v3);
  v6 = v4;
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for WorkoutDetailPowerView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v8 = v6;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_retain(v10);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for WorkoutDetailPowerView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutDetailPowerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutDetailPowerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutDetailPowerView()
{
  return &type metadata for WorkoutDetailPowerView;
}

uint64_t sub_100114E64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABE6C, 1);
}

uint64_t sub_100114E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v32 = a3;
  v33 = type metadata accessor for TaskPriority(0);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100047110(&qword_100820D50);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.leading.getter(v11);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = sub_100047110(&qword_100820D58);
  sub_1001150A0(a2, &v13[*(int *)(v14 + 44)]);
  v15 = *(_OWORD *)a2;
  v16 = *(void **)(a2 + 16);
  v34 = *(_OWORD *)(a2 + 32);
  v35 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 64) & ~v17;
  v19 = (char *)swift_allocObject(&unk_100786F40, v18 + v9, v17 | 7);
  v20 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v19 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v19 + 2) = v20;
  *((_OWORD *)v19 + 3) = *(_OWORD *)(a2 + 32);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v18], (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_10004D65C((uint64_t)&v35);
  v21 = v16;
  v22 = sub_10004D65C((uint64_t)&v34);
  static TaskPriority.userInitiated.getter(v22);
  v23 = sub_100047110(&qword_100820D70);
  v24 = v32;
  v25 = (char *)(v32 + *(int *)(v23 + 36));
  v26 = type metadata accessor for _TaskModifier(0);
  v27 = v31;
  v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(&v25[*(int *)(v26 + 20)], v6, v33);
  *(_QWORD *)v25 = &unk_100820D68;
  *((_QWORD *)v25 + 1) = v19;
  sub_100021CC0((uint64_t)v13, v24, &qword_100820D50);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  return sub_10001BE90((uint64_t)v13, &qword_100820D50);
}

uint64_t sub_1001150A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  id v32;
  NSString v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  __n128 v43;
  void (*v44)(char *, char *, uint64_t, __n128);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  char v53;
  _QWORD *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  void (*v82)(char *, uint64_t, __n128);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  char v91;
  uint64_t v92;
  id v93;
  NSString v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  id v123;
  NSString v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  int v153;
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  uint64_t v156;
  char *v157;
  void (*v158)(char *, char *, uint64_t);
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  int *v163;
  uint64_t v164;
  char *v165;
  void (*v166)(char *, uint64_t, uint64_t);
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  void *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  uint64_t v182;
  void (*v183)(char *, uint64_t);
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  id v190;
  unint64_t v191;
  uint64_t v192;
  void (*v193)(char *, uint64_t, uint64_t);
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  _QWORD *v206;
  unsigned int (**v207)(_QWORD, _QWORD, _QWORD);
  _QWORD *v208;
  char *v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  __int128 v217;
  unint64_t v218;
  void *v219;
  unsigned __int8 v220;
  uint64_t v221;
  _QWORD *v222;
  unsigned int (**v223)(_QWORD, _QWORD, _QWORD);
  _QWORD *v224;
  char *v225;
  __int128 v226;

  v204 = a1;
  v194 = a2;
  v189 = type metadata accessor for WorkoutDetailChartView(0);
  v2 = __chkstk_darwin(v189);
  v188 = (char *)&v185 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v187 = (char *)&v185 - v4;
  v5 = sub_100047110(&qword_1008202F0);
  __chkstk_darwin(v5);
  v206 = (uint64_t *)((char *)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v208 = (_QWORD *)type metadata accessor for WorkoutChartViewModel(0);
  v207 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))*(v208 - 1);
  __chkstk_darwin(v208);
  v192 = (uint64_t)&v185 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100820D88);
  v9 = __chkstk_darwin(v8);
  v203 = (uint64_t)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v196 = (uint64_t)&v185 - v11;
  v195 = type metadata accessor for Divider(0);
  v201 = *(_QWORD *)(v195 - 8);
  v12 = __chkstk_darwin(v195);
  v186 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v202 = (char *)&v185 - v15;
  __chkstk_darwin(v14);
  v211 = (char *)&v185 - v16;
  v17 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v17);
  v205 = (char *)&v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DynamicTypeSize(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v185 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100047110(&qword_100820D90);
  v210 = *(_QWORD **)(v200 - 8);
  v23 = __chkstk_darwin(v200);
  v199 = (char *)&v185 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v209 = (char *)&v185 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v185 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v185 - v30;
  v190 = (id)objc_opt_self(NSBundle);
  v32 = objc_msgSend(v190, "mainBundle");
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, 0, 0);

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v221 = v35;
  v222 = v37;
  v191 = sub_100038CA0();
  v221 = Text.init<A>(_:)(&v221, &type metadata for String, v191);
  v222 = v38;
  LOBYTE(v223) = v39 & 1;
  v224 = v40;
  v41 = enum case for DynamicTypeSize.large(_:);
  v193 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 104);
  v193(v22, enum case for DynamicTypeSize.large(_:), v19);
  View.dynamicTypeSize(_:)(v22, &type metadata for Text, &protocol witness table for Text);
  v42 = *(void (**)(char *, uint64_t))(v20 + 8);
  v42(v22, v19);
  sub_1000E4458(v221, (uint64_t)v222, (char)v223);
  v43 = swift_bridgeObjectRelease(v224);
  v44 = (void (*)(char *, char *, uint64_t, __n128))v210[4];
  v197 = v31;
  v45 = v31;
  v46 = v200;
  v44(v45, v29, v200, v43);
  v226 = *(_OWORD *)v204;
  v47 = *((_QWORD *)&v226 + 1);
  KeyPath = swift_getKeyPath(&unk_100625308);
  v49 = swift_getKeyPath(&unk_100625330);
  swift_retain(v47);
  static Published.subscript.getter(&v221, v50, KeyPath, v49);
  swift_release(KeyPath);
  swift_release(v49);
  sub_10004D634((uint64_t)&v226);
  v51 = v205;
  AttributedString.init(_:)(v221);
  v221 = Text.init(_:)(v51);
  v222 = v52;
  LOBYTE(v223) = v53 & 1;
  v224 = v54;
  v193(v22, v41, v19);
  View.dynamicTypeSize(_:)(v22, &type metadata for Text, &protocol witness table for Text);
  v42(v22, v19);
  sub_1000E4458(v221, (uint64_t)v222, (char)v223);
  v55 = swift_bridgeObjectRelease(v224);
  v198 = v29;
  v56 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v44)(v209, v29, v46, v55);
  Divider.init()(v56);
  v57 = swift_getKeyPath(&unk_100625350);
  v58 = swift_getKeyPath(&unk_100625378);
  swift_retain(v47);
  v59 = v206;
  static Published.subscript.getter(v206, v60, v57, v58);
  swift_release(v57);
  swift_release(v58);
  sub_10004D634((uint64_t)&v226);
  if (((unsigned int (**)(_QWORD *, uint64_t, _QWORD *))v207)[6](v59, 1, v208) == 1)
  {
    sub_10001BE90((uint64_t)v59, &qword_1008202F0);
  }
  else
  {
    v61 = v186;
    v62 = v189;
    v63 = (uint64_t)v187;
    v64 = (uint64_t)v188;
    v65 = (uint64_t)v59;
    v66 = v192;
    sub_100116C08(v65, v192);
    v67 = swift_getKeyPath(&unk_100625278);
    v68 = swift_getKeyPath(&unk_1006252A0);
    swift_retain(v47);
    static Published.subscript.getter(&v221, v69, v67, v68);
    swift_release(v67);
    swift_release(v68);
    sub_10004D634((uint64_t)&v226);
    v70 = v221;
    if (v221)
    {
      sub_10004F8C8(v66, v63, type metadata accessor for WorkoutChartViewModel);
      *(_QWORD *)(v63 + *(int *)(v62 + 20)) = v70;
      swift_retain(v70);
      v71 = v202;
      Divider.init()(v72);
      v73 = v64;
      sub_10004F8C8(v63, v64, type metadata accessor for WorkoutDetailChartView);
      v74 = v201;
      v75 = *(void (**)(char *, char *, uint64_t))(v201 + 16);
      v76 = v61;
      v77 = v61;
      v78 = v195;
      v75(v77, v71, v195);
      v79 = v203;
      sub_10004F8C8(v73, v203, type metadata accessor for WorkoutDetailChartView);
      v80 = sub_100047110(&qword_100820DA8);
      v75((char *)(v79 + *(int *)(v80 + 48)), v76, v78);
      v81 = swift_release(v70);
      v82 = *(void (**)(char *, uint64_t, __n128))(v74 + 8);
      v82(v71, v78, v81);
      sub_100011F54(v63, type metadata accessor for WorkoutDetailChartView);
      sub_100011F54(v192, type metadata accessor for WorkoutChartViewModel);
      ((void (*)(char *, uint64_t))v82)(v76, v78);
      sub_100011F54(v73, type metadata accessor for WorkoutDetailChartView);
      v83 = sub_100047110(&qword_100820D98);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v79, 0, 1, v83);
      v84 = v196;
      sub_100116C4C(v79, v196);
      goto LABEL_7;
    }
    sub_100011F54(v66, type metadata accessor for WorkoutChartViewModel);
  }
  v84 = v196;
  v85 = sub_100047110(&qword_100820D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
LABEL_7:
  v86 = swift_getKeyPath(&unk_1006252C0);
  v87 = swift_getKeyPath(&unk_1006252E8);
  swift_retain(v47);
  static Published.subscript.getter(&v221, v88, v86, v87);
  swift_release(v86);
  swift_release(v87);
  sub_10004D634((uint64_t)&v226);
  v89 = v221;
  if (v221)
  {
    if (*(_QWORD *)(v221 + 16))
    {
      v90 = COERCE_DOUBLE(sub_10056B47C());
      if ((v91 & 1) == 0 && v90 > 0.0)
      {
        sub_1005788EC(v89, objc_msgSend(*(id *)(v47 + 64), "fitnessUIFormattingManager", v90), &v221);
        v193 = (void (*)(char *, uint64_t, uint64_t))v221;
        v208 = v222;
        v207 = v223;
        v206 = v224;
        v205 = v225;
        goto LABEL_14;
      }
    }
    swift_release(v89);
  }
  v193 = 0;
  v208 = 0;
  v207 = 0;
  v206 = 0;
  v205 = 0;
LABEL_14:
  v217 = *(_OWORD *)(v204 + 32);
  v92 = sub_100047110(&qword_100820D80);
  State.wrappedValue.getter(&v212, v92);
  if (v212 == 1)
  {
    v93 = objc_msgSend(v190, "mainBundle");
    v94 = String._bridgeToObjectiveC()();
    v95 = objc_msgSend(v93, "localizedStringForKey:value:table:", v94, 0, 0);

    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v98 = v97;

    *(_QWORD *)&v217 = v96;
    *((_QWORD *)&v217 + 1) = v98;
    v99 = Text.init<A>(_:)(&v217, &type metadata for String, v191);
    v101 = v100;
    v103 = v102;
    v105 = v104 & 1;
    v106 = static Font.footnote.getter();
    v108 = Text.font(_:)(v106, v99, v101, v105, v103, v107);
    v110 = v109;
    v112 = v111;
    v114 = v113;
    swift_release(v106);
    sub_1000E4458(v99, v101, v105);
    v115 = swift_bridgeObjectRelease(v103);
    LODWORD(v217) = static HierarchicalShapeStyle.secondary.getter(v115);
    v116 = Text.foregroundStyle<A>(_:)(&v217, v108, v110, v112 & 1, v114, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v118 = v117;
    v120 = v119;
    v122 = v121 & 1;
    sub_1000E4458(v108, v110, v112 & 1);
    swift_bridgeObjectRelease(v114);
    v212 = v116;
    v213 = v118;
    v214 = v122;
    v215 = v120;
    v216 = 0;
  }
  else
  {
    if ((*(_BYTE *)(v204 + 24) & 1) != 0)
    {
      v204 = 0;
      v192 = 0;
      v191 = 0;
      v190 = 0;
      v153 = 255;
      goto LABEL_20;
    }
    v123 = objc_msgSend(v190, "mainBundle");
    v124 = String._bridgeToObjectiveC()();
    v125 = objc_msgSend(v123, "localizedStringForKey:value:table:", v124, 0, 0);

    v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
    v128 = v127;

    *(_QWORD *)&v217 = v126;
    *((_QWORD *)&v217 + 1) = v128;
    v129 = Text.init<A>(_:)(&v217, &type metadata for String, v191);
    v131 = v130;
    v133 = v132;
    v135 = v134 & 1;
    v136 = static Font.footnote.getter();
    v138 = Text.font(_:)(v136, v129, v131, v135, v133, v137);
    v140 = v139;
    v142 = v141;
    v144 = v143;
    swift_release(v136);
    sub_1000E4458(v129, v131, v135);
    v145 = swift_bridgeObjectRelease(v133);
    LODWORD(v217) = static HierarchicalShapeStyle.secondary.getter(v145);
    v146 = Text.foregroundStyle<A>(_:)(&v217, v138, v140, v142 & 1, v144, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v148 = v147;
    v150 = v149;
    v152 = v151 & 1;
    sub_1000E4458(v138, v140, v142 & 1);
    swift_bridgeObjectRelease(v144);
    v212 = v146;
    v213 = v148;
    v214 = v152;
    v215 = v150;
    v216 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v212, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v192 = *((_QWORD *)&v217 + 1);
  v204 = v217;
  v191 = v218;
  v190 = v219;
  v153 = v220;
LABEL_20:
  LODWORD(v189) = v153;
  v154 = (void (*)(char *, char *, uint64_t))v210[2];
  v155 = v198;
  v156 = v200;
  v154(v198, v197, v200);
  v157 = v199;
  v154(v199, v209, v156);
  v158 = *(void (**)(char *, char *, uint64_t))(v201 + 16);
  v159 = v202;
  v160 = v195;
  v158(v202, v211, v195);
  v161 = v203;
  sub_100021CC0(v84, v203, &qword_100820D88);
  LOBYTE(v217) = 1;
  v162 = v194;
  v154(v194, v155, v156);
  v163 = (int *)sub_100047110(&qword_100820DA0);
  v154(&v162[v163[12]], v157, v156);
  v164 = v160;
  v158(&v162[v163[16]], v159, v160);
  sub_100021CC0(v161, (uint64_t)&v162[v163[20]], &qword_100820D88);
  v165 = &v162[v163[24]];
  v166 = v193;
  v167 = v208;
  *(_QWORD *)v165 = v193;
  *((_QWORD *)v165 + 1) = v167;
  v168 = v167;
  v208 = v167;
  v169 = v207;
  *((_QWORD *)v165 + 2) = v207;
  v170 = v169;
  v207 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))v169;
  v171 = v206;
  *((_QWORD *)v165 + 3) = v206;
  v172 = (uint64_t)v171;
  v206 = v171;
  v173 = v205;
  *((_QWORD *)v165 + 4) = v205;
  v174 = v173;
  v205 = v173;
  v175 = &v162[v163[28]];
  v176 = v204;
  v177 = v192;
  *(_QWORD *)v175 = v204;
  *((_QWORD *)v175 + 1) = v177;
  LOBYTE(v160) = v191;
  v178 = (uint64_t)v190;
  *((_QWORD *)v175 + 2) = v191;
  *((_QWORD *)v175 + 3) = v178;
  v179 = v189;
  v175[32] = v189;
  v180 = &v162[v163[32]];
  LOBYTE(v173) = v217;
  *(_QWORD *)v180 = 0;
  v180[8] = (char)v173;
  sub_100116AD8(v166, v168, v170, v172, v174);
  sub_100116B30(v176, v177, v160, v178, v179);
  sub_10001BE90(v196, &qword_100820D88);
  v181 = *(void (**)(char *, uint64_t))(v201 + 8);
  v182 = v164;
  v181(v211, v164);
  v183 = (void (*)(char *, uint64_t))v210[1];
  v183(v209, v156);
  v183(v197, v156);
  sub_100116B70(v176, v177, v160, v178, v179);
  sub_100116BB0((uint64_t)v166, v208, v207, (uint64_t)v206, v205);
  sub_10001BE90(v203, &qword_100820D88);
  v181(v202, v182);
  v183(v199, v156);
  return ((uint64_t (*)(char *, uint64_t))v183)(v198, v156);
}

uint64_t sub_100116090(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[13] = a1;
  v2[14] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[15] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[16] = v4;
  v2[17] = v5;
  return swift_task_switch(sub_1001160FC, v4, v5);
}

uint64_t sub_1001160FC()
{
  uint64_t v0;
  uint64_t v1;

  *(_OWORD *)(v0 + 48) = *(_OWORD *)*(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 144) = v1;
  swift_retain(v1);
  return swift_task_switch(sub_100116148, 0, 0);
}

uint64_t sub_100116148()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_1001161BC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001161BC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_100116210, 0, 0);
}

uint64_t sub_100116210()
{
  uint64_t v0;

  sub_10004D634(v0 + 48);
  return swift_task_switch(sub_100116248, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t sub_100116248()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  id v43;
  void (*v45)(_QWORD *);

  v1 = (_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_retain(v2);
  v3 = sub_1001B900C((_QWORD *)(v0 + 16));
  v5 = v4;
  v6 = type metadata accessor for WorkoutChartViewModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v45 = v3;
    v7 = *(_QWORD *)(v0 + 144);
    KeyPath = swift_getKeyPath(&unk_1006252C0);
    v9 = swift_getKeyPath(&unk_1006252E8);
    swift_retain(v7);
    static Published.subscript.getter((_QWORD *)(v0 + 96), v10, KeyPath, v9);
    swift_release(v9);
    swift_release(KeyPath);
    sub_10004D634(v0 + 48);
    v11 = *(_QWORD *)(v0 + 96);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 16))
      {
        sub_10056B47C();
        swift_release(v11);
      }
      else
      {
        swift_release(*(_QWORD *)(v0 + 96));
      }
    }
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "localizedStringForKey:value:table:", v13, 0, 0);

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = (uint64_t *)(v5 + *(int *)(v6 + 24));
    v19 = v18[1];
    *v18 = v15;
    v18[1] = v17;
    swift_bridgeObjectRelease(v19);
    v3 = v45;
    v1 = (_QWORD *)(v0 + 88);
  }
  ((void (*)(uint64_t, _QWORD))v3)(v0 + 16, 0);
  v20 = *(_QWORD *)(v0 + 144);
  sub_10004D634(v0 + 48);
  v21 = swift_getKeyPath(&unk_100625278);
  v22 = swift_getKeyPath(&unk_1006252A0);
  swift_retain(v20);
  static Published.subscript.getter((_QWORD *)(v0 + 80), v23, v21, v22);
  swift_release(v22);
  swift_release(v21);
  v24 = sub_10004D634(v0 + 48);
  v25 = *(_QWORD *)(v0 + 80);
  if (v25)
  {
    v26 = GeometryProxy.size.getter(v24);
    v27 = v25 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_viewWidth;
    *(double *)v27 = v26 + -2.0;
    *(_BYTE *)(v27 + 8) = 0;
    swift_release(v25);
  }
  v28 = *(_QWORD *)(v0 + 144);
  v29 = swift_getKeyPath(&unk_1006252C0);
  v30 = swift_getKeyPath(&unk_1006252E8);
  swift_retain(v28);
  static Published.subscript.getter(v1, v31, v29, v30);
  swift_release(v30);
  swift_release(v29);
  sub_10004D634(v0 + 48);
  v32 = *(_QWORD *)(v0 + 88);
  if (!v32 || (v33 = *(_QWORD *)(v32 + 16), v34 = swift_release(v32), !v33))
  {
    v35 = *(_QWORD *)(v0 + 104);
    v36 = *(void **)(v35 + 16);
    v37 = type metadata accessor for FunctionalThresholdPowerStore(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v38 = v36;
    v39 = FunctionalThresholdPowerStore.init(with:)();
    *(_OWORD *)(v0 + 64) = *(_OWORD *)(v35 + 32);
    v40 = (_OWORD *)swift_allocObject(&unk_100786F68, 64, 7);
    v42 = *(_OWORD *)(v35 + 16);
    v41 = *(_OWORD *)(v35 + 32);
    v40[1] = *(_OWORD *)v35;
    v40[2] = v42;
    v40[3] = v41;
    sub_10004D65C(v0 + 48);
    v43 = v38;
    sub_10004D65C(v0 + 64);
    dispatch thunk of FunctionalThresholdPowerStore.fetchMostRecentAppleFTP(completion:)(sub_100116A78, v40);
    swift_release(v40);
    v34 = swift_release(v39);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v34);
}

double sub_100116630@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  double result;
  _BYTE v9[24];
  __int128 v10;
  __int128 v11;

  v3 = (void *)*((_QWORD *)v1 + 2);
  *(_OWORD *)v9 = *(__int128 *)((char *)v1 + 24);
  *(_QWORD *)&v9[16] = *((_QWORD *)v1 + 5);
  v10 = *v1;
  v11 = *(_OWORD *)&v9[8];
  v4 = swift_allocObject(&unk_100786F18, 64, 7);
  *(_OWORD *)(v4 + 16) = *v1;
  *(_QWORD *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 40) = *(__int128 *)((char *)v1 + 24);
  *(_QWORD *)(v4 + 56) = *((_QWORD *)v1 + 5);
  sub_10004D65C((uint64_t)&v10);
  v5 = v3;
  v6 = sub_10004D65C((uint64_t)&v11);
  v7 = static Edge.Set.all.getter(v6);
  *(_QWORD *)a1 = sub_1001166F0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v7;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = xmmword_1006251F0;
  *(_OWORD *)(a1 + 40) = xmmword_1006251F0;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1001166F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100114E74(a1, v2 + 16, a2);
}

uint64_t sub_1001166F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10011677C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  v3 = v0 + 16;
  v4 = v0 + ((v2 + 64) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100820D64);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000DA0E4;
  return sub_100116090(v3, v4);
}

uint64_t sub_1001167E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100833B0C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000EA380;
  return sub_10043E694(a1, a2, v2);
}

uint64_t sub_100116854@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100625308);
  v5 = swift_getKeyPath(&unk_100625330);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001168D0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100625308);
  v5 = swift_getKeyPath(&unk_100625330);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_100116944@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006252C0);
  v5 = swift_getKeyPath(&unk_1006252E8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001169C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006252C0);
  v5 = swift_getKeyPath(&unk_1006252E8);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100116A44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100116A78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  __int128 v5;

  v5 = *(_OWORD *)(v1 + 48);
  v4 = a1 == 0;
  v2 = sub_100047110(&qword_100820D80);
  return State.wrappedValue.setter(&v4, v2);
}

id sub_100116AD8(id result, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;

  if (result)
  {
    swift_retain(result);
    v8 = a2;
    v9 = a3;
    swift_bridgeObjectRetain(a4);
    return a5;
  }
  return result;
}

double sub_100116B30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  double result;

  if (a5 != 255)
    return sub_100116B48(a1, a2, a3, a4);
  return result;
}

double sub_100116B48(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_1000E439C(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

double sub_100116B70(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5)
{
  double result;

  if (a5 != 255)
    return sub_100116B88(a1, a2, a3, a4);
  return result;
}

double sub_100116B88(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_1000E4458(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

void sub_100116BB0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    swift_release(a1);

    swift_bridgeObjectRelease(a4);
  }
}

uint64_t sub_100116C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WorkoutChartViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100116C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100820D88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100116C98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820DB0;
  if (!qword_100820DB0)
  {
    v1 = sub_100007050(&qword_100820DB8);
    sub_100116D04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820DB0);
  }
  return result;
}

unint64_t sub_100116D04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820DC0;
  if (!qword_100820DC0)
  {
    v1 = sub_100007050(&qword_100820DC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100820DC0);
  }
  return result;
}

uint64_t type metadata accessor for CalendarCache()
{
  return objc_opt_self(_TtC10FitnessApp13CalendarCache);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadOnboardingNavigationView.Page(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100116DBC + 4 * byte_1006253C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100116DF0 + 4 * asc_1006253C0[v4]))();
}

uint64_t sub_100116DF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100116DF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100116E00);
  return result;
}

uint64_t sub_100116E0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100116E14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100116E18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100116E20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadOnboardingNavigationView.Page()
{
  return &type metadata for TrainingLoadOnboardingNavigationView.Page;
}

_OWORD *sub_100116E3C(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    if (*a2)
    {
      v7 = a2[1];
      *(_QWORD *)v4 = *a2;
      *((_QWORD *)v4 + 1) = v7;
      swift_retain(v7);
    }
    else
    {
      *a1 = *(_OWORD *)a2;
    }
    v9 = a2[2];
    if (v9)
    {
      v10 = a2[3];
      *((_QWORD *)v4 + 2) = v9;
      *((_QWORD *)v4 + 3) = v10;
      swift_retain(v10);
    }
    else
    {
      v4[1] = *((_OWORD *)a2 + 1);
    }
    v11 = a2[4];
    v12 = a2[5];
    *((_QWORD *)v4 + 4) = v11;
    *((_QWORD *)v4 + 5) = v12;
    *((_BYTE *)v4 + 48) = *((_BYTE *)a2 + 48);
    v13 = a2[7];
    *((_QWORD *)v4 + 7) = v13;
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    swift_retain(v13);
    v17 = sub_100047110((uint64_t *)&unk_100832400);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return v4;
}

double sub_100116F90(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  if (*a1)
    swift_release(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v5 = sub_100047110((uint64_t *)&unk_100832400);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100117038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  swift_retain(v11);
  v15 = sub_100047110((uint64_t *)&unk_100832400);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  return a1;
}

uint64_t sub_100117158(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      swift_retain(v7);
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v6)
  {
    v9 = a2[1];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v9;
    swift_retain(v9);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v10)
    {
      v11 = a2[3];
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v10)
  {
    v13 = a2[3];
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v13;
    swift_retain(v13);
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v14 = a2[4];
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = a2[5];
  *(_QWORD *)(a1 + 40) = v17;
  swift_retain(v17);
  swift_release(v16);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = a2[7];
  *(_QWORD *)(a1 + 56) = v19;
  swift_retain(v19);
  swift_release(v18);
  if ((uint64_t *)a1 != a2)
  {
    v20 = *(int *)(a3 + 32);
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    sub_10001BE90(a1 + v20, (uint64_t *)&unk_100832400);
    v23 = sub_100047110((uint64_t *)&unk_100832400);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  return a1;
}

uint64_t sub_100117314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100047110((uint64_t *)&unk_100832400);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001173FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v6)
  {
    v9 = a2[1];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v10)
    {
      v11 = a2[3];
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      swift_release(v12);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v10)
  {
    v13 = a2[3];
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v13;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_release(v15);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_release(v16);
  if ((uint64_t *)a1 != a2)
  {
    v17 = *(int *)(a3 + 32);
    v18 = (void *)(a1 + v17);
    v19 = (char *)a2 + v17;
    sub_10001BE90(a1 + v17, (uint64_t *)&unk_100832400);
    v20 = sub_100047110((uint64_t *)&unk_100832400);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10011758C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100117598);
}

uint64_t sub_100117598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_100820E68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100117618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100117624);
}

uint64_t sub_100117624(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_100047110(&qword_100820E68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrainingLoadOnboardingNavigationView(uint64_t a1)
{
  uint64_t result;

  result = qword_100820EC8;
  if (!qword_100820EC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrainingLoadOnboardingNavigationView);
  return result;
}

void sub_1001176D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100625408;
  v4[1] = &unk_100625408;
  v4[2] = &unk_100625420;
  v4[3] = &unk_100625408;
  sub_100117758(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_100117758(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100820ED8)
  {
    v2 = type metadata accessor for DismissAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100820ED8);
  }
}

uint64_t sub_1001177AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABF38, 1);
}

uint64_t *sub_1001177BC@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1001177D4(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F0F0;
}

uint64_t sub_1001177E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t OnboardingNavigationView;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WorkoutsAddUpView;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[16];
  uint64_t v40;
  ValueMetadata *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  ValueMetadata *v46;
  __int128 v47;

  v2 = v1;
  v38 = a1;
  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  v35 = *(_QWORD *)(OnboardingNavigationView - 8);
  v4 = *(_QWORD *)(v35 + 64);
  __chkstk_darwin(OnboardingNavigationView);
  v5 = sub_100047110(&qword_100820F28);
  v6 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  v37 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 40);
  v46 = *(ValueMetadata **)(v1 + 32);
  *(_QWORD *)&v47 = v9;
  sub_100047110(&qword_100820F30);
  State.projectedValue.getter(&v41);
  v46 = v41;
  v47 = v42;
  v40 = v1;
  v34 = sub_100047110((uint64_t *)&unk_10082E630);
  v33 = sub_100047110(&qword_100820F38);
  v32 = sub_100028384(&qword_100820F40, (uint64_t *)&unk_10082E630, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_100028384(&qword_100820F48, (uint64_t *)&unk_10082E630, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = sub_100028384(&qword_100820F50, (uint64_t *)&unk_10082E630, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_100007050(&qword_100820F58);
  v12 = sub_100007050(&qword_100820F60);
  WorkoutsAddUpView = type metadata accessor for TrainingLoadWorkoutsAddUpView(255);
  v14 = sub_100007050(&qword_100820F68);
  v15 = sub_1000083D8(&qword_100820F70, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadWorkoutsAddUpView, (uint64_t)&protocol conformance descriptor for TrainingLoadWorkoutsAddUpView);
  v16 = sub_10011898C();
  v41 = &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
  *(_QWORD *)&v42 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v41 = (ValueMetadata *)WorkoutsAddUpView;
  *(_QWORD *)&v42 = v14;
  *((_QWORD *)&v42 + 1) = v15;
  v43 = OpaqueTypeConformance2;
  v18 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v19 = sub_1001189D0();
  v20 = sub_100118A14();
  v41 = (ValueMetadata *)v11;
  *(_QWORD *)&v42 = &type metadata for TrainingLoadOnboardingNavigationView.Page;
  *((_QWORD *)&v42 + 1) = v12;
  v43 = v18;
  v44 = v19;
  v45 = v20;
  v21 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  NavigationStack.init<>(path:root:)(&v46, sub_100118984, v39, v34, v33, v32, v31, v10, v21, v19);
  v22 = *(_QWORD *)(v2 + 56);
  LOBYTE(v41) = *(_BYTE *)(v2 + 48);
  *(_QWORD *)&v42 = v22;
  v23 = sub_100047110(&qword_100820D80);
  State.wrappedValue.getter(&v46, v23);
  LOBYTE(v41) = (_BYTE)v46;
  sub_100118BA0(v2, (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(unsigned __int8 *)(v35 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_100787078, v25 + v4, v24 | 7);
  sub_100118BE8((uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
  v27 = sub_100028384(&qword_100820FB0, &qword_100820F28, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  v28 = v36;
  View.onChange<A>(of:initial:_:)(&v41, 0, sub_100118C2C, v26, v36, &type metadata for Bool, v27, &protocol witness table for Bool);
  v29 = swift_release(v26);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v37 + 8))(v8, v28, v29);
}

uint64_t sub_100117B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OnboardingNavigationView;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t WorkoutsAddUpView;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a2;
  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  v4 = *(_QWORD *)(OnboardingNavigationView - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(OnboardingNavigationView);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  WorkoutsAddUpView = type metadata accessor for TrainingLoadWorkoutsAddUpView(0);
  v33 = *(_QWORD *)(WorkoutsAddUpView - 8);
  __chkstk_darwin(WorkoutsAddUpView);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100820F58);
  v11 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  v35 = v11;
  __chkstk_darwin(v10);
  v31 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100118BA0(a1, (uint64_t)v6);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v5;
  v32 = v13 | 7;
  v16 = swift_allocObject(&unk_1007870A0, v15, v13 | 7);
  sub_100118BE8((uint64_t)v6, v16 + v14);
  TrainingLoadWorkoutsAddUpView.init(onNext:)(sub_100118F00, v16);
  v38 = a1;
  v17 = sub_100047110(&qword_100820F68);
  v18 = sub_1000083D8(&qword_100820F70, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadWorkoutsAddUpView, (uint64_t)&protocol conformance descriptor for TrainingLoadWorkoutsAddUpView);
  v19 = sub_10011898C();
  v39 = &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
  v40 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_100119424, v37, WorkoutsAddUpView, v17, v18, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, WorkoutsAddUpView);
  sub_100118BA0(a1, (uint64_t)v6);
  v21 = swift_allocObject(&unk_1007870C8, v15, v32);
  sub_100118BE8((uint64_t)v6, v21 + v14);
  v22 = sub_100047110(&qword_100820F60);
  v39 = (ValueMetadata *)WorkoutsAddUpView;
  v40 = v17;
  v41 = v18;
  v42 = OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v24 = sub_1001189D0();
  v25 = sub_100118A14();
  v26 = v34;
  v27 = v22;
  v28 = v31;
  View.navigationDestination<A, B>(for:destination:)(&type metadata for TrainingLoadOnboardingNavigationView.Page, sub_100118F0C, v21, v34, &type metadata for TrainingLoadOnboardingNavigationView.Page, v27, v23, v24, v25);
  v29 = swift_release(v21);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v35 + 8))(v28, v26, v29);
}

uint64_t sub_100117DE4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OnboardingNavigationView;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t WorkoutsAddUpView;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  ValueMetadata *v53;
  ValueMetadata *v54;
  _BYTE *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t EffortExplanationView;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t NewInsightsDailyView;
  ValueMetadata *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v78 = a1;
  v79 = a2;
  v83 = a3;
  NewInsightsDailyView = type metadata accessor for TrainingLoadNewInsightsDailyView(0);
  v71 = *(_QWORD *)(NewInsightsDailyView - 8);
  __chkstk_darwin(NewInsightsDailyView);
  v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  EffortExplanationView = type metadata accessor for TrainingLoadEffortExplanationView(0);
  v73 = *(_QWORD *)(EffortExplanationView - 8);
  __chkstk_darwin(EffortExplanationView);
  v72 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100047110(&qword_100820FC8);
  __chkstk_darwin(v80);
  v82 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100047110(&qword_100820FD0);
  __chkstk_darwin(v74);
  v75 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100047110(&qword_100820F98);
  __chkstk_darwin(v81);
  v76 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  v10 = *(_QWORD *)(OnboardingNavigationView - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(OnboardingNavigationView);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  WorkoutsAddUpView = type metadata accessor for TrainingLoadWorkoutsAddUpView(0);
  v14 = *(_QWORD *)(WorkoutsAddUpView - 8);
  __chkstk_darwin(WorkoutsAddUpView);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110(&qword_100820F58);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v71 - v23;
  if (*v78)
  {
    if (*v78 == 1)
    {
      v25 = v22;
      sub_100118BA0(v79, (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      v26 = *(unsigned __int8 *)(v10 + 80);
      v27 = (v26 + 16) & ~v26;
      v28 = swift_allocObject(&unk_100787118, v27 + v11, v26 | 7);
      sub_100118BE8((uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27);
      v29 = v72;
      TrainingLoadEffortExplanationView.init(isStandalone:onNext:)(0, sub_100118F8C, v28);
      v30 = v73;
      v31 = v75;
      v32 = EffortExplanationView;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v75, v29, EffortExplanationView);
      swift_storeEnumTagMultiPayload(v31, v74, 1);
      v33 = sub_100007050(&qword_100820F68);
      v34 = sub_1000083D8(&qword_100820F70, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadWorkoutsAddUpView, (uint64_t)&protocol conformance descriptor for TrainingLoadWorkoutsAddUpView);
      v35 = sub_10011898C();
      v85 = &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
      v86 = v35;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v85, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      v85 = (ValueMetadata *)WorkoutsAddUpView;
      v86 = v33;
      v87 = v34;
      v88 = OpaqueTypeConformance2;
      v37 = swift_getOpaqueTypeConformance2(&v85, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
      v38 = sub_1000083D8(&qword_100820FA0, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadEffortExplanationView, (uint64_t)&protocol conformance descriptor for TrainingLoadEffortExplanationView);
      v39 = (uint64_t)v76;
      _ConditionalContent<>.init(storage:)(v31, v25, v32, v37, v38);
      v40 = v82;
      sub_100118FD4(v39, v82);
      swift_storeEnumTagMultiPayload(v40, v80, 0);
      v41 = sub_100118A98();
      v42 = sub_1000083D8(&qword_100820FA8, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadNewInsightsDailyView, (uint64_t)&protocol conformance descriptor for TrainingLoadNewInsightsDailyView);
      _ConditionalContent<>.init(storage:)(v40, v81, NewInsightsDailyView, v41, v42);
      sub_10001BE90(v39, &qword_100820F98);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v32);
    }
    else
    {
      sub_100118BA0(v79, (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      v63 = *(unsigned __int8 *)(v10 + 80);
      v64 = (v63 + 16) & ~v63;
      v65 = swift_allocObject(&unk_1007870F0, v64 + v11, v63 | 7);
      sub_100118BE8((uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v65 + v64);
      TrainingLoadNewInsightsDailyView.init(onConfirm:)(sub_100118F5C, v65);
      v66 = v71;
      v67 = v82;
      v68 = NewInsightsDailyView;
      (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v82, v4, NewInsightsDailyView);
      swift_storeEnumTagMultiPayload(v67, v80, 1);
      v69 = sub_100118A98();
      v70 = sub_1000083D8(&qword_100820FA8, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadNewInsightsDailyView, (uint64_t)&protocol conformance descriptor for TrainingLoadNewInsightsDailyView);
      _ConditionalContent<>.init(storage:)(v67, v81, v68, v69, v70);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v4, v68);
    }
  }
  else
  {
    v78 = (_BYTE *)v22;
    v73 = WorkoutsAddUpView;
    v44 = v79;
    sub_100118BA0(v79, (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v45 = *(unsigned __int8 *)(v10 + 80);
    v46 = (v45 + 16) & ~v45;
    v47 = swift_allocObject(&unk_100787140, v46 + v11, v45 | 7);
    sub_100118BE8((uint64_t)v12, v47 + v46);
    v48 = TrainingLoadWorkoutsAddUpView.init(onNext:)(sub_100118F00, v47);
    v72 = (char *)&v71;
    __chkstk_darwin(v48);
    *(&v71 - 2) = v44;
    v49 = sub_100047110(&qword_100820F68);
    v50 = sub_1000083D8(&qword_100820F70, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadWorkoutsAddUpView, (uint64_t)&protocol conformance descriptor for TrainingLoadWorkoutsAddUpView);
    v51 = sub_10011898C();
    v85 = &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
    v86 = v51;
    v52 = swift_getOpaqueTypeConformance2(&v85, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v53 = (ValueMetadata *)v73;
    View.toolbar<A>(content:)(sub_100119100, &v71 - 4, v73, v49, v50, v52);
    v54 = v53;
    (*(void (**)(char *, ValueMetadata *))(v14 + 8))(v16, v53);
    v55 = v78;
    (*(void (**)(char *, char *, _BYTE *))(v18 + 32))(v24, v21, v78);
    v56 = v75;
    (*(void (**)(char *, char *, _BYTE *))(v18 + 16))(v75, v24, v55);
    swift_storeEnumTagMultiPayload(v56, v74, 0);
    v85 = v54;
    v86 = v49;
    v87 = v50;
    v88 = v52;
    v57 = swift_getOpaqueTypeConformance2(&v85, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v58 = sub_1000083D8(&qword_100820FA0, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadEffortExplanationView, (uint64_t)&protocol conformance descriptor for TrainingLoadEffortExplanationView);
    v59 = (uint64_t)v76;
    _ConditionalContent<>.init(storage:)(v56, v55, EffortExplanationView, v57, v58);
    v60 = v82;
    sub_100118FD4(v59, v82);
    swift_storeEnumTagMultiPayload(v60, v80, 0);
    v61 = sub_100118A98();
    v62 = sub_1000083D8(&qword_100820FA8, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadNewInsightsDailyView, (uint64_t)&protocol conformance descriptor for TrainingLoadNewInsightsDailyView);
    _ConditionalContent<>.init(storage:)(v60, v81, NewInsightsDailyView, v61, v62);
    sub_10001BE90(v59, &qword_100820F98);
    return (*(uint64_t (**)(char *, _BYTE *))(v18 + 8))(v24, v55);
  }
}

double sub_1001184F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  double result;
  _QWORD v4[2];

  sub_100047110(&qword_100820D80);
  State.projectedValue.getter(v4);
  v0 = v4[0];
  v1 = v4[1];
  v2 = sub_10011898C();
  static ToolbarContentBuilder.buildBlock<A>(_:)(v4, &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton, v2);
  swift_release(v1);
  *(_QWORD *)&result = swift_release(v0).n128_u64[0];
  return result;
}

double sub_100118588(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  double result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v3 = v11;
  v12 = v4;
  swift_retain(v4);
  swift_bridgeObjectRetain(v11);
  v5 = sub_100047110(&qword_100820F30);
  State.wrappedValue.getter(&v13, v5);
  v6 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
    v6 = sub_10013FD38(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_10013FD38((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  *((_BYTE *)v6 + v8 + 32) = a2;
  v11 = v3;
  v12 = v4;
  v10 = v6;
  State.wrappedValue.setter(&v10, v5);
  swift_release(v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

uint64_t sub_10011868C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[9];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 56);
  v5[1] = *(_BYTE *)(a1 + 48);
  v6 = v2;
  v5[0] = 1;
  v3 = sub_100047110(&qword_100820D80);
  result = State.wrappedValue.setter(v5, v3);
  if (*(_QWORD *)a1)
    return (*(uint64_t (**)(uint64_t))a1)(result);
  return result;
}

uint64_t sub_1001186F4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t HasSeenTrainingLoadOnboarding;
  void (*v16)(uint64_t);
  _BYTE v17[16];
  _QWORD v18[3];
  char v19;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*a2 == 1)
  {
    if (qword_10081DE50 != -1)
      swift_once(&qword_10081DE50, sub_1004B24C0);
    v10 = sub_100047110(&qword_100820FB8);
    v11 = sub_10003CE9C(v10, (uint64_t)qword_10086AC78);
    v19 = 1;
    swift_beginAccess(v11, v18, 33, 0);
    Tips.Parameter.wrappedValue.setter(&v19, v10);
    swift_endAccess(v18);
    if (qword_10081DA00 != -1)
      swift_once(&qword_10081DA00, sub_1002B7E84);
    v12 = qword_10086A4B0;
    KeyPath = swift_getKeyPath(&unk_100625560);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v17[-16] = v12;
    v17[-8] = 1;
    v18[0] = v12;
    v14 = sub_1000083D8((unint64_t *)&qword_100820FC0, type metadata accessor for TrainingLoadOnboardingStateHandler, (uint64_t)&unk_1006333E0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v18, KeyPath, sub_100118EE0, &v17[-32], (char *)&type metadata for () + 8, v14);
    swift_release(KeyPath);
    HasSeenTrainingLoadOnboarding = FISetHasSeenTrainingLoadOnboarding(1);
    v16 = *(void (**)(uint64_t))(a3 + 16);
    if (v16)
      v16(HasSeenTrainingLoadOnboarding);
    type metadata accessor for TrainingLoadOnboardingNavigationView(0);
    sub_1003F6E4C((uint64_t)v9);
    DismissAction.callAsFunction()();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_100118910()
{
  return sub_100028384(&qword_100820F18, (uint64_t *)&unk_10082E630, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100118940()
{
  unint64_t result;

  result = qword_100820F20;
  if (!qword_100820F20)
  {
    result = swift_getWitnessTable(&unk_100625538, &type metadata for TrainingLoadOnboardingNavigationView.Page);
    atomic_store(result, (unint64_t *)&qword_100820F20);
  }
  return result;
}

uint64_t sub_100118984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100117B34(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10011898C()
{
  unint64_t result;

  result = qword_100820F78;
  if (!qword_100820F78)
  {
    result = swift_getWitnessTable(&unk_1006255C0, &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton);
    atomic_store(result, (unint64_t *)&qword_100820F78);
  }
  return result;
}

unint64_t sub_1001189D0()
{
  unint64_t result;

  result = qword_100820F80;
  if (!qword_100820F80)
  {
    result = swift_getWitnessTable(&unk_1006254F8, &type metadata for TrainingLoadOnboardingNavigationView.Page);
    atomic_store(result, (unint64_t *)&qword_100820F80);
  }
  return result;
}

unint64_t sub_100118A14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100820F88;
  if (!qword_100820F88)
  {
    v1 = sub_100007050(&qword_100820F60);
    sub_100118A98();
    sub_1000083D8(&qword_100820FA8, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadNewInsightsDailyView, (uint64_t)&protocol conformance descriptor for TrainingLoadNewInsightsDailyView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820F88);
  }
  return result;
}

unint64_t sub_100118A98()
{
  unint64_t result;
  uint64_t v1;
  uint64_t WorkoutsAddUpView;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_100820F90;
  if (!qword_100820F90)
  {
    v1 = sub_100007050(&qword_100820F98);
    WorkoutsAddUpView = type metadata accessor for TrainingLoadWorkoutsAddUpView(255);
    v3 = sub_100007050(&qword_100820F68);
    v4 = sub_1000083D8(&qword_100820F70, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadWorkoutsAddUpView, (uint64_t)&protocol conformance descriptor for TrainingLoadWorkoutsAddUpView);
    v6 = &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
    v7 = sub_10011898C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v6 = (ValueMetadata *)WorkoutsAddUpView;
    v7 = v3;
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_1000083D8(&qword_100820FA0, (uint64_t (*)(uint64_t))&type metadata accessor for TrainingLoadEffortExplanationView, (uint64_t)&protocol conformance descriptor for TrainingLoadEffortExplanationView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100820F90);
  }
  return result;
}

uint64_t sub_100118BA0(uint64_t a1, uint64_t a2)
{
  uint64_t OnboardingNavigationView;

  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(OnboardingNavigationView - 8) + 16))(a2, a1, OnboardingNavigationView);
  return a2;
}

uint64_t sub_100118BE8(uint64_t a1, uint64_t a2)
{
  uint64_t OnboardingNavigationView;

  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(OnboardingNavigationView - 8) + 32))(a2, a1, OnboardingNavigationView);
  return a2;
}

uint64_t sub_100118C2C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrainingLoadOnboardingNavigationView(0) - 8) + 80);
  return sub_1001186F4(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_100118C78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject(&unk_1007871E8, 33, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3;
  swift_retain(a1);
  swift_retain(a2);
  return Button.init(action:label:)(sub_10011936C, v6, sub_100118D0C, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100118D0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100118D78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  char v19;

  v1 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100047110(&qword_100820FD8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *v0;
  v10 = v0[1];
  v11 = *((_BYTE *)v0 + 16);
  static ToolbarItemPlacement.cancellationAction.getter(v6);
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v12 = sub_100047110(&qword_100820FE0);
  v13 = sub_100028384(&qword_100820FE8, &qword_100820FE0, (uint64_t)&protocol conformance descriptor for Button<A>);
  ToolbarItem<>.init(placement:content:)(v3, sub_100119334, v16, v12, v13);
  v14 = sub_100028384(&qword_100820FF0, &qword_100820FD8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v8, v4, v14);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_100118EE0()
{
  uint64_t v0;

  sub_1002B7FBC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

double sub_100118F00()
{
  return sub_100118F94(1);
}

uint64_t sub_100118F0C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrainingLoadOnboardingNavigationView(0) - 8) + 80);
  return sub_100117DE4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100118F5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrainingLoadOnboardingNavigationView(0) - 8) + 80);
  return sub_10011868C(v0 + ((v1 + 16) & ~v1));
}

double sub_100118F8C()
{
  return sub_100118F94(2);
}

double sub_100118F94(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrainingLoadOnboardingNavigationView(0) - 8) + 80);
  return sub_100118588(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100118FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100820F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100119020()
{
  uint64_t v0;
  uint64_t OnboardingNavigationView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  OnboardingNavigationView = type metadata accessor for TrainingLoadOnboardingNavigationView(0);
  v2 = *(_QWORD *)(OnboardingNavigationView - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v6[1]);
  if (v6[2])
    swift_release(v6[3]);
  swift_bridgeObjectRelease(v6[4]);
  swift_release(v6[5]);
  swift_release(v6[7]);
  v7 = (_QWORD *)((char *)v6 + *(int *)(OnboardingNavigationView + 32));
  v8 = sub_100047110((uint64_t *)&unk_100832400);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_100119100()
{
  return sub_1001184F8();
}

uint64_t sub_10011911C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for TrainingLoadOnboardingFlowToolbarCancelButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

__n128 initializeWithTake for CardType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TrainingLoadOnboardingFlowToolbarCancelButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadOnboardingFlowToolbarCancelButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadOnboardingFlowToolbarCancelButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadOnboardingFlowToolbarCancelButton()
{
  return &type metadata for TrainingLoadOnboardingFlowToolbarCancelButton;
}

uint64_t sub_1001192AC()
{
  _QWORD v1[4];

  v1[0] = sub_100007050(&qword_100820F28);
  v1[1] = &type metadata for Bool;
  v1[2] = sub_100028384(&qword_100820FB0, &qword_100820F28, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  v1[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_100119324(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABF60, 1);
}

uint64_t sub_100119334()
{
  uint64_t v0;

  return sub_100118C78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_100119340()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10011936C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v1;
  v8 = v2;
  v5 = 1;
  v3 = sub_100047110(&qword_100820FF8);
  return Binding.wrappedValue.setter(&v5, v3);
}

uint64_t sub_1001193C0()
{
  _QWORD v1[2];

  v1[0] = sub_100007050(&qword_100820FD8);
  v1[1] = sub_100028384(&qword_100820FF0, &qword_100820FD8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
}

void sub_100119428(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  _QWORD *v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  CHWorkoutDetailHeartRateTableViewCell *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  CHWorkoutDetailHeartRateTableViewCell *v36;
  CHWorkoutDetailHeartRateTableViewCell *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  Class isa;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  _BYTE v68[16];
  _QWORD *v69;
  CHWorkoutDetailHeartRateTableViewCell *v70;

  *a9 = swift_getKeyPath(&unk_100625658);
  v15 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(a9, v15, 0);
  v16 = (int *)type metadata accessor for CardConfigurationView(0);
  v17 = v16[7];
  v18 = type metadata accessor for DashboardCardCellViewCache();
  v19 = swift_allocObject(v18, 40, 7);
  *(_BYTE *)(v19 + 16) = 1;
  *(_QWORD *)(v19 + 24) = sub_10043D6F8((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v19 + 32) = sub_10043D6F8((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)((char *)a9 + v17) = v19;
  v64 = v16[11];
  *(_QWORD *)((char *)a9 + v64) = &_swiftEmptyArrayStorage;
  *(_QWORD *)((char *)a9 + v16[5]) = a1;
  *(_QWORD *)((char *)a9 + v16[6]) = a2;
  v20 = (char *)a9 + v16[8];
  *(_QWORD *)v20 = a3;
  v20[8] = a4 & 1;
  v21 = (char *)a9 + v16[9];
  *(_QWORD *)v21 = a5;
  v21[8] = a6 & 1;
  v63 = a1;
  v22 = a2;
  v23 = sub_10035BFD8();
  *(_QWORD *)((char *)a9 + v16[10]) = v23;
  v24 = (_QWORD *)((char *)a9 + v16[12]);
  *v24 = a7;
  v24[1] = a8;
  v70 = v23;
  KeyPath = swift_getKeyPath(&unk_100625688);
  swift_retain(a8);
  swift_bridgeObjectRetain(v23);
  v26 = sub_100047110(&qword_100821000);
  v27 = sub_100028384(&qword_100821008, &qword_100821000, (uint64_t)&protocol conformance descriptor for [A : B].Keys);
  v28 = (CHWorkoutDetailHeartRateTableViewCell *)Sequence.sorted<A>(key:)(KeyPath, v26, v27, &protocol witness table for Int);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v70, v29, v30, v31, v32, v33, v34, v35);
  v69 = a9;
  v36 = sub_1005B9730((void (*)(__int128 *__return_ptr, char *, __n128))sub_10011CF84, (uint64_t)v68, v28);
  v37 = v28;
  v38 = v36;
  swift_bridgeObjectRelease(v37, v39, v40, v41, v42, v43, v44, v45);
  if (*(_QWORD *)v38->cellPadding)
  {
    swift_bridgeObjectRetain(v38);
    v46 = *(_QWORD *)v38[1].cellInset;
    isa = v38[2].super.super.super.super.isa;
    sub_100016804(&v38[1].super.super.super.super.isa, v46);
    (*((void (**)(uint64_t, Class))isa + 2))(v46, isa);
    __asm { BR              X10 }
  }

  swift_release(a8);
  swift_bridgeObjectRelease(v38, v49, v50, v51, v52, v53, v54, v55);

  swift_bridgeObjectRelease(*(CHWorkoutDetailHeartRateTableViewCell **)((char *)a9 + v64), v56, v57, v58, v59, v60, v61, v62);
  *(_QWORD *)((char *)a9 + v64) = &_swiftEmptyArrayStorage;
}

uint64_t sub_100119AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Font.title.getter(v2);
  static Font.Weight.bold.getter();
  v6 = Font.weight(_:)(v5);
  swift_release(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Font.Leading.tight(_:), v0);
  v7 = Font.leading(_:)(v4, v6);
  swift_release(v6);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_100869D60 = v7;
  return result;
}

double sub_100119BA8()
{
  double result;

  result = 30.0;
  xmmword_100869D70 = xmmword_100625610;
  *(_OWORD *)&qword_100869D80 = xmmword_100625610;
  return result;
}

uint64_t sub_100119BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  _QWORD v23[2];
  _BYTE v24[16];
  uint64_t v25;

  v23[1] = a2;
  v3 = type metadata accessor for CardConfigurationView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100047110(&qword_1008210D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v11 = static Axis.Set.vertical.getter(v8);
  v12 = sub_100047110(&qword_100821100);
  v13 = sub_100028384(&qword_100821108, &qword_100821100, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ScrollView.init(_:showsIndicators:content:)(v11, 1, sub_10011D9D8, v24, v12, v13);
  sub_10004F8C8(a1, (uint64_t)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CardConfigurationView);
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1007872F0, v15 + v5, v14 | 7);
  sub_10011D9E4((uint64_t)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  v17 = sub_100047110(&qword_1008210D8);
  v18 = sub_100028384(&qword_1008210E0, &qword_1008210D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v19 = sub_10011D8E8();
  v20 = sub_10011D92C();
  View.navigationDestination<A, B>(for:destination:)(&type metadata for CardTypeFamily, sub_10011DA28, v16, v6, &type metadata for CardTypeFamily, v17, v18, v19, v20);
  v21 = swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v21);
}

uint64_t sub_100119DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  double v81;
  __int128 v82;
  uint64_t v83;
  char v84;

  v67 = a1;
  v72 = a2;
  v73 = type metadata accessor for CardConfigurationView(0);
  v65 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v66 = v2;
  v68 = (uint64_t)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110(&qword_100821110);
  v4 = __chkstk_darwin(v3);
  v71 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v62 - v6;
  v64 = type metadata accessor for AccessibilityTraits(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100821118);
  v11 = __chkstk_darwin(v10);
  v70 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v62 = (char *)&v62 - v14;
  __chkstk_darwin(v13);
  v69 = (uint64_t)&v62 - v15;
  v16 = LocalizedStringKey.init(stringLiteral:)(0x455441435F444441, 0xEC00000059524F47);
  v17 = Text.init(_:tableName:bundle:comment:)(v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  if (qword_10081D560 != -1)
    swift_once(&qword_10081D560, sub_100119AD8);
  v25 = v22 & 1;
  v26 = Text.font(_:)(qword_100869D60, v17, v20, v25, v24, v18);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000E4458(v17, v20, v25);
  swift_bridgeObjectRelease(v24);
  KeyPath = swift_getKeyPath(&unk_100625740);
  v34 = KeyPath;
  v35 = v67;
  v36 = v67 + *(int *)(v73 + 36);
  if (*(_BYTE *)(v36 + 8))
    v37 = 54.0;
  else
    v37 = *(double *)v36 * 0.09;
  v38 = static Edge.Set.all.getter(KeyPath);
  v74 = v26;
  v75 = v28;
  v76 = v30 & 1;
  v77 = v32;
  v78 = v34;
  v79 = 1;
  v80 = v38;
  v81 = v37;
  v82 = xmmword_100625620;
  v83 = 0x404E000000000000;
  v84 = 0;
  static AccessibilityTraits.isHeader.getter();
  v39 = sub_100047110(&qword_100821120);
  v40 = sub_10011DA7C();
  v41 = (uint64_t)v62;
  View.accessibilityAddTraits(_:)(v9, v39, v40);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v64);
  v42 = v77;
  v43 = v78;
  sub_1000E4458(v74, v75, v76);
  swift_release(v43);
  swift_bridgeObjectRelease(v42);
  v44 = v69;
  v45 = sub_100045AD4(v41, v69, &qword_100821118);
  *(_QWORD *)v7 = static Alignment.center.getter(v45);
  *((_QWORD *)v7 + 1) = v46;
  *((_QWORD *)v7 + 2) = 0;
  v7[24] = 1;
  *((_QWORD *)v7 + 4) = 0;
  v7[40] = 0;
  sub_100047110(&qword_100821130);
  v47 = *(_QWORD *)(*(_QWORD *)(v35 + *(int *)(v73 + 44)) + 16);
  v74 = 0;
  v75 = v47;
  v48 = swift_getKeyPath(&unk_100625778);
  v49 = v68;
  sub_10004F8C8(v35, v68, type metadata accessor for CardConfigurationView);
  v50 = *(unsigned __int8 *)(v65 + 80);
  v51 = (v50 + 16) & ~v50;
  v52 = swift_allocObject(&unk_100787318, v51 + v66, v50 | 7);
  sub_10011D9E4(v49, v52 + v51);
  v53 = sub_100047110(&qword_100821138);
  v54 = sub_100047110(&qword_100821140);
  v55 = sub_10011DC2C();
  v56 = sub_100028384(&qword_100821158, &qword_100821140, (uint64_t)&protocol conformance descriptor for VStack<A>);
  ForEach<>.init(_:id:content:)(&v74, v48, sub_10011DBE0, v52, v53, v54, v55, &protocol witness table for Int, v56);
  v57 = v70;
  sub_100021CC0(v44, v70, &qword_100821118);
  v58 = v71;
  sub_100021CC0((uint64_t)v7, v71, &qword_100821110);
  v59 = v72;
  sub_100021CC0(v57, v72, &qword_100821118);
  v60 = sub_100047110(&qword_100821160);
  sub_100021CC0(v58, v59 + *(int *)(v60 + 48), &qword_100821110);
  sub_10001BE90((uint64_t)v7, &qword_100821110);
  sub_10001BE90(v44, &qword_100821118);
  sub_10001BE90(v58, &qword_100821110);
  return sub_10001BE90(v57, &qword_100821118);
}

void sub_10011A2E4(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  v6 = type metadata accessor for CardConfigurationView(0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + *(int *)(v6 + 44));
    if (v5 < *(_QWORD *)(v7 + 16))
    {
      v8 = *(_QWORD *)(v7 + 8 * v5 + 32);
      swift_bridgeObjectRetain(v8);
      *(_QWORD *)a3 = static HorizontalAlignment.center.getter(v9, v10, v11, v12, v13);
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      v14 = sub_100047110(&qword_100821168);
      sub_10011A37C(v8, a2, v5, a3 + *(int *)(v14 + 44));
      swift_bridgeObjectRelease(v8);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10011A37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = (char *)a1;
  v44 = a3;
  v45 = a4;
  v5 = type metadata accessor for Divider(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100047110(&qword_100821170);
  v7 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100821178);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v39 - v14;
  v16 = sub_100047110(&qword_100821180);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v39 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v39 - v24;
  *(_QWORD *)v22 = 0;
  v26 = 1;
  v22[8] = 1;
  sub_10011A6C0((uint64_t)v43, a2, (uint64_t)&v22[*(int *)(v23 + 36)]);
  sub_100045AD4((uint64_t)v22, (uint64_t)v25, &qword_100821180);
  v27 = type metadata accessor for CardConfigurationView(0);
  if (*(_QWORD *)(*(_QWORD *)(a2 + *(int *)(v27 + 44)) + 16) - 1 != v44)
  {
    v43 = v13;
    v44 = v7;
    v28 = v40;
    v29 = Divider.init()(v27);
    if (qword_10081D568 != -1)
      v29 = swift_once(&qword_10081D568, sub_100119BA8);
    v39 = xmmword_100869D70;
    v30 = qword_100869D80;
    v31 = unk_100869D88;
    v32 = static Edge.Set.all.getter(v29);
    v33 = v41;
    v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v9, v28, v42);
    v35 = &v9[*(int *)(v46 + 36)];
    *v35 = v32;
    *(_OWORD *)(v35 + 8) = v39;
    *((_QWORD *)v35 + 3) = v30;
    *((_QWORD *)v35 + 4) = v31;
    v35[40] = 0;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v34);
    sub_100045AD4((uint64_t)v9, (uint64_t)v15, &qword_100821170);
    v26 = 0;
    v13 = v43;
    v7 = v44;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, v26, 1, v46);
  sub_100021CC0((uint64_t)v25, (uint64_t)v19, &qword_100821180);
  sub_100021CC0((uint64_t)v15, (uint64_t)v13, &qword_100821178);
  v36 = v45;
  sub_100021CC0((uint64_t)v19, v45, &qword_100821180);
  v37 = sub_100047110(&qword_100821188);
  sub_100021CC0((uint64_t)v13, v36 + *(int *)(v37 + 48), &qword_100821178);
  sub_10001BE90((uint64_t)v15, &qword_100821178);
  sub_10001BE90((uint64_t)v25, &qword_100821180);
  sub_10001BE90((uint64_t)v13, &qword_100821178);
  return sub_10001BE90((uint64_t)v19, &qword_100821180);
}

uint64_t sub_10011A6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[40];
  _QWORD v104[5];
  _QWORD v105[5];
  _QWORD v106[4];

  v96 = a2;
  v102 = a3;
  v4 = sub_100047110(&qword_100821190);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = sub_100047110(&qword_100821198);
  v7 = __chkstk_darwin(v101);
  v9 = (uint64_t *)((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v90 - v10;
  v12 = sub_100047110(&qword_1008211A0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = sub_100047110(&qword_1008211A8);
  v15 = __chkstk_darwin(v94);
  v17 = (uint64_t *)((char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v90 = (uint64_t)&v90 - v18;
  v97 = sub_100047110(&qword_1008211B0);
  __chkstk_darwin(v97);
  v99 = (uint64_t)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100047110(&qword_1008211B8);
  __chkstk_darwin(v92);
  v93 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100047110(&qword_1008211C0);
  __chkstk_darwin(v98);
  v95 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100047110(&qword_1008211C8);
  __chkstk_darwin(v22);
  v100 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100047110(&qword_1008211D0);
  __chkstk_darwin(v24);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100047110(&qword_1008211D8);
  v27 = __chkstk_darwin(v91);
  v29 = (uint64_t *)((char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  v31 = (char *)&v90 - v30;
  v32 = sub_100047110(&qword_10081FD80);
  __chkstk_darwin(v32);
  v34 = (char *)&v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(a1 + 16);
  switch(v35)
  {
    case 3:
      sub_1000252E0(a1 + 32, (uint64_t)v105);
      sub_1000252E0((uint64_t)v105, (uint64_t)v106);
      if (qword_10081DBE8 != -1)
        swift_once(&qword_10081DBE8, sub_10038F560);
      v50 = *(double *)&qword_10086A780;
      v51 = type metadata accessor for DynamicTypeSize(0);
      v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56);
      v52(v34, 1, 1, v51);
      v53 = sub_100514A9C(v105, (uint64_t)v34, v50);
      sub_1000252E0((uint64_t)v105, (uint64_t)v104);
      sub_100514D4C((uint64_t)v104, (uint64_t)v34, v53);
      sub_10001BE90((uint64_t)v104, &qword_100832410);
      sub_10001BE90((uint64_t)v34, &qword_10081FD80);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v105);
      sub_1000252E0(a1 + 72, (uint64_t)v104);
      sub_1000252E0((uint64_t)v104, (uint64_t)v105);
      v54 = *(double *)&qword_10086A780;
      v52(v34, 1, 1, v51);
      v55 = sub_100514A9C(v104, (uint64_t)v34, v54);
      sub_1000252E0((uint64_t)v104, (uint64_t)v103);
      sub_100514D4C((uint64_t)v103, (uint64_t)v34, v55);
      sub_10001BE90((uint64_t)v103, &qword_100832410);
      sub_10001BE90((uint64_t)v34, &qword_10081FD80);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v104);
      sub_1000252E0((uint64_t)v106, (uint64_t)v104);
      *v9 = swift_getKeyPath(&unk_100625658);
      v56 = sub_100047110(&qword_1008325D0);
      swift_storeEnumTagMultiPayload(v9, v56, 0);
      v57 = v101;
      v58 = sub_1000252E0((uint64_t)v104, (uint64_t)v9 + *(int *)(v101 + 36));
      *((_BYTE *)v9 + *(int *)(v57 + 40)) = 1;
      *v6 = static Alignment.center.getter(v58);
      v6[1] = v59;
      v60 = sub_100047110(&qword_1008211E8);
      sub_10011BC8C(v106, v96, v105, a1, (uint64_t)v6 + *(int *)(v60 + 44), v55);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v104);
      sub_100045AD4((uint64_t)v6, (uint64_t)v9 + *(int *)(v57 + 44), &qword_100821190);
      sub_100045AD4((uint64_t)v9, (uint64_t)v11, &qword_100821198);
      v61 = v99;
      sub_100021CC0((uint64_t)v11, v99, &qword_100821198);
      swift_storeEnumTagMultiPayload(v61, v97, 1);
      v62 = sub_10011DCDC();
      v63 = sub_100028384(&qword_100821208, &qword_100821198, (uint64_t)&unk_10063F428);
      v64 = v100;
      _ConditionalContent<>.init(storage:)(v61, v98, v57, v62, v63);
      sub_10001BE90((uint64_t)v11, &qword_100821198);
      v65 = sub_100047110(&qword_1008211E0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 0, 1, v65);
      v66 = (uint64_t)v64;
      goto LABEL_13;
    case 2:
      sub_1000252E0(a1 + 32, (uint64_t)v105);
      sub_1000252E0((uint64_t)v105, (uint64_t)v106);
      if (qword_10081DBE8 != -1)
        swift_once(&qword_10081DBE8, sub_10038F560);
      v67 = *(double *)&qword_10086A780;
      v68 = type metadata accessor for DynamicTypeSize(0);
      v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
      v69(v34, 1, 1, v68);
      v70 = sub_100514A9C(v105, (uint64_t)v34, v67);
      sub_1000252E0((uint64_t)v105, (uint64_t)v104);
      sub_100514D4C((uint64_t)v104, (uint64_t)v34, v70);
      sub_10001BE90((uint64_t)v104, &qword_100832410);
      sub_10001BE90((uint64_t)v34, &qword_10081FD80);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v105);
      sub_1000252E0(a1 + 72, (uint64_t)v104);
      sub_1000252E0((uint64_t)v104, (uint64_t)v105);
      v71 = *(double *)&qword_10086A780;
      v69(v34, 1, 1, v68);
      v72 = sub_100514A9C(v104, (uint64_t)v34, v71);
      sub_1000252E0((uint64_t)v104, (uint64_t)v103);
      sub_100514D4C((uint64_t)v103, (uint64_t)v34, v72);
      sub_10001BE90((uint64_t)v103, &qword_100832410);
      sub_10001BE90((uint64_t)v34, &qword_10081FD80);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v104);
      sub_1000252E0((uint64_t)v106, (uint64_t)v104);
      *v17 = swift_getKeyPath(&unk_100625658);
      v73 = sub_100047110(&qword_1008325D0);
      swift_storeEnumTagMultiPayload(v17, v73, 0);
      v74 = v94;
      v75 = sub_1000252E0((uint64_t)v104, (uint64_t)v17 + *(int *)(v94 + 36));
      *((_BYTE *)v17 + *(int *)(v74 + 40)) = 1;
      *v14 = static Alignment.center.getter(v75);
      v14[1] = v76;
      v77 = sub_100047110(&qword_100821210);
      sub_10011B3F4(v106, v96, v105, (uint64_t)v14 + *(int *)(v77 + 44), v72);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v104);
      sub_100045AD4((uint64_t)v14, (uint64_t)v17 + *(int *)(v74 + 44), &qword_1008211A0);
      v78 = v90;
      sub_100045AD4((uint64_t)v17, v90, &qword_1008211A8);
      v79 = v93;
      sub_100021CC0(v78, v93, &qword_1008211A8);
      swift_storeEnumTagMultiPayload(v79, v92, 1);
      v80 = sub_100028384(&qword_1008211F8, &qword_1008211D8, (uint64_t)&unk_10063F428);
      v81 = sub_100028384(&qword_100821200, &qword_1008211A8, (uint64_t)&unk_10063F428);
      v82 = (uint64_t)v95;
      _ConditionalContent<>.init(storage:)(v79, v91, v74, v80, v81);
      v83 = v99;
      sub_100021CC0(v82, v99, &qword_1008211C0);
      swift_storeEnumTagMultiPayload(v83, v97, 0);
      v84 = sub_10011DCDC();
      v85 = sub_100028384(&qword_100821208, &qword_100821198, (uint64_t)&unk_10063F428);
      v86 = v100;
      _ConditionalContent<>.init(storage:)(v83, v98, v101, v84, v85);
      sub_10001BE90(v82, &qword_1008211C0);
      sub_10001BE90(v78, &qword_1008211A8);
      v87 = sub_100047110(&qword_1008211E0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 0, 1, v87);
      v66 = (uint64_t)v86;
LABEL_13:
      sub_100045AD4(v66, v102, &qword_1008211C8);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v105);
      return _s10FitnessApp24HistoryViewActionContextVwxx_0(v106);
    case 1:
      sub_1000252E0(a1 + 32, (uint64_t)v105);
      sub_1000252E0((uint64_t)v105, (uint64_t)v106);
      if (qword_10081DBE8 != -1)
        swift_once(&qword_10081DBE8, sub_10038F560);
      v36 = *(double *)&qword_10086A780;
      v37 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v34, 1, 1, v37);
      v38 = sub_100514A9C(v105, (uint64_t)v34, v36);
      sub_1000252E0((uint64_t)v105, (uint64_t)v104);
      sub_100514D4C((uint64_t)v104, (uint64_t)v34, v38);
      sub_10001BE90((uint64_t)v104, &qword_100832410);
      sub_10001BE90((uint64_t)v34, &qword_10081FD80);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v105);
      sub_1000252E0((uint64_t)v106, (uint64_t)v105);
      *v29 = swift_getKeyPath(&unk_100625658);
      v39 = sub_100047110(&qword_1008325D0);
      swift_storeEnumTagMultiPayload(v29, v39, 0);
      v40 = v91;
      sub_1000252E0((uint64_t)v105, (uint64_t)v29 + *(int *)(v91 + 36));
      *((_BYTE *)v29 + *(int *)(v40 + 40)) = 0;
      sub_10011C950(v106, v96, 0, (uint64_t)v26);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v105);
      sub_100045AD4((uint64_t)v26, (uint64_t)v29 + *(int *)(v40 + 44), &qword_1008211D0);
      sub_100045AD4((uint64_t)v29, (uint64_t)v31, &qword_1008211D8);
      v41 = v93;
      sub_100021CC0((uint64_t)v31, v93, &qword_1008211D8);
      swift_storeEnumTagMultiPayload(v41, v92, 0);
      v42 = sub_100028384(&qword_1008211F8, &qword_1008211D8, (uint64_t)&unk_10063F428);
      v43 = sub_100028384(&qword_100821200, &qword_1008211A8, (uint64_t)&unk_10063F428);
      v44 = (uint64_t)v95;
      _ConditionalContent<>.init(storage:)(v41, v40, v94, v42, v43);
      v45 = v99;
      sub_100021CC0(v44, v99, &qword_1008211C0);
      swift_storeEnumTagMultiPayload(v45, v97, 0);
      v46 = sub_10011DCDC();
      v47 = sub_100028384(&qword_100821208, &qword_100821198, (uint64_t)&unk_10063F428);
      v48 = (uint64_t)v100;
      _ConditionalContent<>.init(storage:)(v45, v98, v101, v46, v47);
      sub_10001BE90(v44, &qword_1008211C0);
      sub_10001BE90((uint64_t)v31, &qword_1008211D8);
      v49 = sub_100047110(&qword_1008211E0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
      sub_100045AD4(v48, v102, &qword_1008211C8);
      return _s10FitnessApp24HistoryViewActionContextVwxx_0(v106);
  }
  v89 = sub_100047110(&qword_1008211E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v102, 1, 1, v89);
}

uint64_t sub_10011B3F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v86 = a3;
  v90 = a4;
  v91 = sub_100047110(&qword_100821240);
  __chkstk_darwin(v91);
  v85 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100047110(&qword_100821248);
  v9 = __chkstk_darwin(v80);
  v82 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v84 = (uint64_t)&v67 - v11;
  v77 = sub_100047110(&qword_100821250);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100047110(&qword_100821258);
  v13 = __chkstk_darwin(v75);
  v81 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v83 = (uint64_t)&v67 - v15;
  v87 = sub_100047110(&qword_100821260);
  __chkstk_darwin(v87);
  v89 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100047110(&qword_100821268);
  __chkstk_darwin(v88);
  v79 = (uint64_t)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100047110(&qword_100821270);
  __chkstk_darwin(v70);
  v72 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100047110(&qword_100821278);
  v19 = __chkstk_darwin(v69);
  v73 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v76 = (uint64_t)&v67 - v21;
  v22 = sub_100047110(&qword_1008211D0);
  __chkstk_darwin(v22);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100047110(&qword_100821280);
  v25 = __chkstk_darwin(v68);
  v71 = (uint64_t)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v74 = (uint64_t)&v67 - v27;
  v28 = type metadata accessor for DynamicTypeSize(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1[3];
  v33 = a1[4];
  sub_100016804(a1, v32);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
  v36 = v35;
  v38 = v37;
  v39 = a2;
  sub_1003F6E18((uint64_t)v31);
  LODWORD(a2) = sub_10054FD90((uint64_t)v31, v34, v36, v38);
  sub_1000EB41C(v34, v36, v38);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  sub_10011C950(a1, v39, 0, (uint64_t)v24);
  if ((_DWORD)a2 == 2)
  {
    v40 = v71;
    sub_100021CC0((uint64_t)v24, v71, &qword_1008211D0);
    *(_QWORD *)(v40 + *(int *)(v68 + 36)) = 0x3FF0000000000000;
    sub_10001BE90((uint64_t)v24, &qword_1008211D0);
    v41 = v74;
    sub_100045AD4(v40, v74, &qword_100821280);
    sub_10011C950(v86, v39, 1, (uint64_t)v24);
    v42 = v72;
    sub_100021CC0((uint64_t)v24, v72, &qword_1008211D0);
    *(_QWORD *)(v42 + *(int *)(v70 + 36)) = 0x3FE6666666666666;
    sub_10001BE90((uint64_t)v24, &qword_1008211D0);
    v43 = v73;
    sub_100021CC0(v42, v73, &qword_100821270);
    *(_OWORD *)(v43 + *(int *)(v69 + 36)) = xmmword_100625630;
    sub_10001BE90(v42, &qword_100821270);
    v44 = v76;
    sub_100045AD4(v43, v76, &qword_100821278);
    sub_100021CC0(v41, v40, &qword_100821280);
    sub_100021CC0(v44, v43, &qword_100821278);
    v45 = v79;
    sub_100021CC0(v40, v79, &qword_100821280);
    v46 = sub_100047110(&qword_1008212A0);
    sub_100021CC0(v43, v45 + *(int *)(v46 + 48), &qword_100821278);
    sub_10001BE90(v43, &qword_100821278);
    sub_10001BE90(v40, &qword_100821280);
    v47 = v89;
    sub_100021CC0(v45, v89, &qword_100821268);
    swift_storeEnumTagMultiPayload(v47, v87, 0);
    v48 = sub_100028384(&qword_100821290, &qword_100821268, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v49 = sub_100028384(&qword_100821298, &qword_100821240, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v47, v88, v91, v48, v49);
    sub_10001BE90(v45, &qword_100821268);
    sub_10001BE90(v44, &qword_100821278);
    v50 = v41;
    v51 = &qword_100821280;
  }
  else
  {
    v52 = a5 * -0.7 * 0.25;
    v53 = v78;
    sub_100021CC0((uint64_t)v24, v78, &qword_1008211D0);
    v54 = v77;
    v55 = v53 + *(int *)(v77 + 36);
    *(double *)v55 = v52;
    *(_QWORD *)(v55 + 8) = 0;
    sub_10001BE90((uint64_t)v24, &qword_1008211D0);
    v56 = v81;
    sub_100021CC0(v53, v81, &qword_100821250);
    *(_QWORD *)(v56 + *(int *)(v75 + 36)) = 0x3FF0000000000000;
    sub_10001BE90(v53, &qword_100821250);
    v57 = v83;
    sub_100045AD4(v56, v83, &qword_100821258);
    sub_10011C950(v86, v39, 1, (uint64_t)v24);
    sub_100021CC0((uint64_t)v24, v53, &qword_1008211D0);
    v58 = v53 + *(int *)(v54 + 36);
    *(double *)v58 = a5 * 0.5 + v52;
    *(_QWORD *)(v58 + 8) = 0;
    sub_10001BE90((uint64_t)v24, &qword_1008211D0);
    v59 = v82;
    sub_100021CC0(v53, v82, &qword_100821250);
    *(_QWORD *)(v59 + *(int *)(v80 + 36)) = 0x3FE3333333333333;
    sub_10001BE90(v53, &qword_100821250);
    v60 = v84;
    sub_100045AD4(v59, v84, &qword_100821248);
    sub_100021CC0(v57, v56, &qword_100821258);
    sub_100021CC0(v60, v59, &qword_100821248);
    v61 = v85;
    sub_100021CC0(v56, v85, &qword_100821258);
    v62 = sub_100047110(&qword_100821288);
    sub_100021CC0(v59, v61 + *(int *)(v62 + 48), &qword_100821248);
    sub_10001BE90(v59, &qword_100821248);
    sub_10001BE90(v56, &qword_100821258);
    v63 = v89;
    sub_100021CC0(v61, v89, &qword_100821240);
    swift_storeEnumTagMultiPayload(v63, v87, 1);
    v64 = sub_100028384(&qword_100821290, &qword_100821268, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v65 = sub_100028384(&qword_100821298, &qword_100821240, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v63, v88, v91, v64, v65);
    sub_10001BE90(v61, &qword_100821240);
    sub_10001BE90(v60, &qword_100821248);
    v50 = v57;
    v51 = &qword_100821258;
  }
  return sub_10001BE90(v50, v51);
}

uint64_t sub_10011BC8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _BYTE v108[40];
  _QWORD v109[2];
  uint64_t v110;

  v96 = a4;
  v106 = a3;
  v101 = a5;
  v103 = sub_100047110(&qword_1008212A8);
  __chkstk_darwin(v103);
  v90 = (uint64_t)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100047110(&qword_100821250);
  __chkstk_darwin(v85);
  v86 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100047110(&qword_100821248);
  v11 = __chkstk_darwin(v84);
  v88 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v87 = (uint64_t)&v82 - v14;
  v15 = __chkstk_darwin(v13);
  v89 = (uint64_t)&v82 - v16;
  __chkstk_darwin(v15);
  v98 = (uint64_t)&v82 - v17;
  v18 = sub_100047110(&qword_10081FD80);
  __chkstk_darwin(v18);
  v83 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100047110(&qword_1008212B0);
  __chkstk_darwin(v100);
  v99 = (uint64_t)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100047110(&qword_100821268);
  __chkstk_darwin(v102);
  v97 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100047110(&qword_100821270);
  __chkstk_darwin(v92);
  v93 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100047110(&qword_100821278);
  v23 = __chkstk_darwin(v91);
  v94 = (uint64_t)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v95 = (uint64_t)&v82 - v25;
  v26 = sub_100047110(&qword_1008211D0);
  __chkstk_darwin(v26);
  v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100047110(&qword_100821280);
  v29 = __chkstk_darwin(v104);
  v105 = (uint64_t)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v107 = (uint64_t)&v82 - v31;
  v32 = type metadata accessor for DynamicTypeSize(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1[3];
  v37 = a1[4];
  v38 = a1;
  sub_100016804(a1, v36);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  v41 = v40;
  v43 = v42;
  sub_1003F6E18((uint64_t)v35);
  LODWORD(a1) = sub_10054FD90((uint64_t)v35, v39, v41, v43);
  sub_1000EB41C(v39, v41, v43);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  if ((_DWORD)a1 == 2)
  {
    v44 = a2;
    sub_10011C950(v38, a2, 0, (uint64_t)v28);
    v45 = v105;
    sub_100021CC0((uint64_t)v28, v105, &qword_1008211D0);
    *(_QWORD *)(v45 + *(int *)(v104 + 36)) = 0x3FF0000000000000;
    sub_10001BE90((uint64_t)v28, &qword_1008211D0);
    v46 = v107;
    sub_100045AD4(v45, v107, &qword_100821280);
    sub_10011C950(v106, v44, 1, (uint64_t)v28);
    v47 = v93;
    sub_100021CC0((uint64_t)v28, v93, &qword_1008211D0);
    *(_QWORD *)(v47 + *(int *)(v92 + 36)) = 0x3FE6666666666666;
    sub_10001BE90((uint64_t)v28, &qword_1008211D0);
    v48 = v94;
    sub_100021CC0(v47, v94, &qword_100821270);
    *(_OWORD *)(v48 + *(int *)(v91 + 36)) = xmmword_100625630;
    sub_10001BE90(v47, &qword_100821270);
    v49 = v95;
    sub_100045AD4(v48, v95, &qword_100821278);
    sub_100021CC0(v46, v45, &qword_100821280);
    sub_100021CC0(v49, v48, &qword_100821278);
    v50 = v97;
    sub_100021CC0(v45, v97, &qword_100821280);
    v51 = sub_100047110(&qword_1008212A0);
    sub_100021CC0(v48, v50 + *(int *)(v51 + 48), &qword_100821278);
    sub_10001BE90(v48, &qword_100821278);
    sub_10001BE90(v45, &qword_100821280);
    v52 = v99;
    sub_100021CC0(v50, v99, &qword_100821268);
    swift_storeEnumTagMultiPayload(v52, v100, 0);
    v53 = sub_100028384(&qword_100821290, &qword_100821268, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v54 = sub_100028384(&qword_1008212C0, &qword_1008212A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v52, v102, v103, v53, v54);
    sub_10001BE90(v50, &qword_100821268);
    sub_10001BE90(v49, &qword_100821278);
    return sub_10001BE90(v46, &qword_100821280);
  }
  v56 = v38;
  v58 = v104;
  v57 = v105;
  v59 = a2;
  v60 = v106;
  v61 = v107;
  if (*(_QWORD *)(v96 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1000252E0(v96 + 112, (uint64_t)v109);
  sub_1000252E0((uint64_t)v109, (uint64_t)&v110);
  if (qword_10081DBE8 != -1)
LABEL_7:
    swift_once(&qword_10081DBE8, sub_10038F560);
  v62 = *(double *)&qword_10086A780;
  v63 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v83, 1, 1, v32);
  v64 = sub_100514A9C(v109, v63, v62);
  sub_1000252E0((uint64_t)v109, (uint64_t)v108);
  sub_100514D4C((uint64_t)v108, v63, v64);
  sub_10001BE90((uint64_t)v108, &qword_100832410);
  sub_10001BE90(v63, &qword_10081FD80);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v109);
  v65 = v59;
  sub_10011C950(v56, v59, 0, (uint64_t)v28);
  v66 = v57;
  sub_100021CC0((uint64_t)v28, v57, &qword_1008211D0);
  *(_QWORD *)(v57 + *(int *)(v58 + 36)) = 0x3FF0000000000000;
  sub_10001BE90((uint64_t)v28, &qword_1008211D0);
  sub_100045AD4(v57, v61, &qword_100821280);
  sub_10011C950(v60, v65, 1, (uint64_t)v28);
  v67 = v86;
  sub_100021CC0((uint64_t)v28, v86, &qword_1008211D0);
  v68 = v85;
  v69 = v67 + *(int *)(v85 + 36);
  *(double *)v69 = a6 * -0.5;
  *(_QWORD *)(v69 + 8) = 0;
  sub_10001BE90((uint64_t)v28, &qword_1008211D0);
  v70 = v89;
  sub_100021CC0(v67, v89, &qword_100821250);
  v71 = v84;
  *(_QWORD *)(v70 + *(int *)(v84 + 36)) = 0x3FE3333333333333;
  sub_10001BE90(v67, &qword_100821250);
  v72 = v98;
  sub_100045AD4(v70, v98, &qword_100821248);
  sub_10011C950(&v110, v65, 1, (uint64_t)v28);
  sub_100021CC0((uint64_t)v28, v67, &qword_1008211D0);
  v73 = v67 + *(int *)(v68 + 36);
  *(double *)v73 = v64 * 0.5;
  *(_QWORD *)(v73 + 8) = 0;
  sub_10001BE90((uint64_t)v28, &qword_1008211D0);
  v74 = v87;
  sub_100021CC0(v67, v87, &qword_100821250);
  *(_QWORD *)(v74 + *(int *)(v71 + 36)) = 0x3FE3333333333333;
  sub_10001BE90(v67, &qword_100821250);
  sub_100045AD4(v74, v70, &qword_100821248);
  v75 = v107;
  sub_100021CC0(v107, v66, &qword_100821280);
  sub_100021CC0(v72, v74, &qword_100821248);
  v76 = v88;
  sub_100021CC0(v70, v88, &qword_100821248);
  v77 = v90;
  sub_100021CC0(v66, v90, &qword_100821280);
  v78 = sub_100047110(&qword_1008212B8);
  sub_100021CC0(v74, v77 + *(int *)(v78 + 48), &qword_100821248);
  sub_100021CC0(v76, v77 + *(int *)(v78 + 64), &qword_100821248);
  sub_10001BE90(v76, &qword_100821248);
  sub_10001BE90(v74, &qword_100821248);
  sub_10001BE90(v66, &qword_100821280);
  v79 = v99;
  sub_100021CC0(v77, v99, &qword_1008212A8);
  swift_storeEnumTagMultiPayload(v79, v100, 1);
  v80 = sub_100028384(&qword_100821290, &qword_100821268, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v81 = sub_100028384(&qword_1008212C0, &qword_1008212A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v79, v102, v103, v80, v81);
  sub_10001BE90(v77, &qword_1008212A8);
  sub_10001BE90(v70, &qword_100821248);
  sub_10001BE90(v98, &qword_100821248);
  sub_10001BE90(v75, &qword_100821280);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0(&v110);
}

void sub_10011C778(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v5 = *a1;
  v6 = type metadata accessor for CardConfigurationView(0);
  v7 = *(_QWORD *)(a2 + *(int *)(v6 + 40));
  if (*(_QWORD *)(v7 + 16) && (v8 = (int *)v6, v9 = sub_100049DE0(v5), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    v12 = *(void **)(a2 + v8[6]);
    v13 = *(void **)(a2 + v8[5]);
    v14 = a2 + v8[8];
    v15 = *(_QWORD *)v14;
    v16 = *(_BYTE *)(v14 + 8);
    v17 = a2 + v8[9];
    v18 = (uint64_t *)(a2 + v8[12]);
    v19 = v18[1];
    sub_1001EBFC4(v5, (uint64_t)v24, v11, 0, (uint64_t)v12, (uint64_t)v13, v15, v16, a3, *(_QWORD *)v17, *(_BYTE *)(v17 + 8), *v18, v19);
    v20 = type metadata accessor for CardTypeConfigurationRoomView(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 0, 1, v20);
    swift_bridgeObjectRetain(v11);
    v21 = v12;
    v22 = v13;
    swift_retain(v19);
  }
  else
  {
    v23 = type metadata accessor for CardTypeConfigurationRoomView(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a3, 1, 1, v23);
  }
}

double sub_10011C8CC@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double result;

  v5 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for CardConfigurationView(0) + 40));
  if (*(_QWORD *)(v5 + 16)
    && (v6 = sub_100049DE0(*a1), (v7 & 1) != 0)
    && (v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6), *(_QWORD *)(v8 + 16)))
  {
    sub_1000252E0(v8 + 32, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10011C950@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  __int128 v68[3];

  v64 = a3;
  v65 = a4;
  v59 = type metadata accessor for DynamicTypeSize(0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v57 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v61);
  v8 = (_OWORD *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (int *)type metadata accessor for DashboardCardView(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100047110(&qword_100821218);
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100047110(&qword_100821220);
  __chkstk_darwin(v60);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100047110(&qword_100821228);
  __chkstk_darwin(v62);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100047110(&qword_100821230);
  __chkstk_darwin(v63);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a1;
  sub_1000252E0((uint64_t)a1, (uint64_t)v68);
  v21 = type metadata accessor for CardConfigurationView(0);
  v67 = 0;
  memset(v66, 0, sizeof(v66));
  v22 = *(int *)(v21 + 28);
  v56 = a2;
  v23 = *(_QWORD *)(a2 + v22);
  *v11 = swift_getKeyPath(&unk_100625658);
  v24 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(v11, v24, 0);
  sub_10002411C(v68, (uint64_t)v11 + v9[5]);
  sub_100045AD4((uint64_t)v66, (uint64_t)v11 + v9[6], &qword_10081F600);
  *(_QWORD *)((char *)v11 + v9[7]) = v23;
  *((_BYTE *)v11 + v9[8]) = 1;
  *((_BYTE *)v11 + v9[9]) = 0;
  sub_10004F8C8((uint64_t)v11, (uint64_t)v14, type metadata accessor for DashboardCardView);
  v14[*(int *)(v12 + 36)] = 0;
  swift_retain(v23);
  sub_100011F54((uint64_t)v11, type metadata accessor for DashboardCardView);
  v25 = (char *)v8 + *(int *)(v61 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  __asm { FMOV            V0.2D, #20.0 }
  *v8 = _Q0;
  v33 = (uint64_t)&v16[*(int *)(v60 + 36)];
  sub_10004F8C8((uint64_t)v8, v33, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v33 + *(int *)(sub_100047110(&qword_100821238) + 36)) = 256;
  sub_100021CC0((uint64_t)v14, (uint64_t)v16, &qword_100821218);
  sub_100011F54((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v34 = sub_10001BE90((uint64_t)v14, &qword_100821218);
  v35 = static Color.black.getter(v34);
  v36 = Color.opacity(_:)(0.2);
  swift_release(v35);
  sub_100021CC0((uint64_t)v16, (uint64_t)v18, &qword_100821220);
  v37 = &v18[*(int *)(v62 + 36)];
  *(_QWORD *)v37 = v36;
  *(_OWORD *)(v37 + 8) = xmmword_100625640;
  *((_QWORD *)v37 + 3) = 0x4034000000000000;
  v38 = sub_10001BE90((uint64_t)v16, &qword_100821220);
  v39 = 1.0;
  if ((v64 & 1) != 0)
  {
    v40 = v55[3];
    v41 = v55[4];
    sub_100016804(v55, v40);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41);
    v44 = v43;
    v46 = v45;
    v47 = v57;
    sub_1003F6E18(v57);
    v48 = sub_10054FD90(v47, v42, v44, v46);
    sub_1000EB41C(v42, v44, v46);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v47, v59);
    if (v48 == 2)
      v39 = 0.9;
    else
      v39 = 0.7;
  }
  v49 = static UnitPoint.center.getter(v38);
  v51 = v50;
  sub_100021CC0((uint64_t)v18, (uint64_t)v20, &qword_100821228);
  v52 = &v20[*(int *)(v63 + 36)];
  *(double *)v52 = v39;
  *((double *)v52 + 1) = v39;
  *((double *)v52 + 2) = v49;
  *((_QWORD *)v52 + 3) = v51;
  sub_10001BE90((uint64_t)v18, &qword_100821228);
  return sub_100045AD4((uint64_t)v20, v65, &qword_100821230);
}

uint64_t sub_10011CE5C()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  _QWORD v4[6];

  v0 = sub_100047110(&qword_1008210C8);
  v4[0] = sub_100007050(&qword_1008210D0);
  v4[1] = &type metadata for CardTypeFamily;
  v4[2] = sub_100007050(&qword_1008210D8);
  v4[3] = sub_100028384(&qword_1008210E0, &qword_1008210D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v4[4] = sub_10011D8E8();
  v4[5] = sub_10011D92C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  return NavigationStack.init<>(root:)(sub_10011D8E0, &v3, v0, OpaqueTypeConformance2);
}

uint64_t type metadata accessor for CardConfigurationView(uint64_t a1)
{
  uint64_t result;

  result = qword_100821070;
  if (!qword_100821070)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardConfigurationView);
  return result;
}

unsigned __int8 *sub_10011CF78@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

double sub_10011CF84@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10011C8CC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t *sub_10011CF9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  id v33;
  id v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = (uint64_t)v17;
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = v20;
    v21 = (char *)v4 + v19;
    v22 = (char *)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = a3[9];
    v24 = a3[10];
    v25 = (char *)v4 + v23;
    v26 = (char *)a2 + v23;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = *(uint64_t *)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = v27;
    v28 = a3[11];
    v29 = a3[12];
    v30 = *(uint64_t *)((char *)a2 + v28);
    *(uint64_t *)((char *)v4 + v28) = v30;
    v31 = (uint64_t *)((char *)v4 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v12 = v32[1];
    *v31 = *v32;
    v31[1] = v12;
    v33 = v16;
    v34 = v17;
    swift_retain(v20);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
  }
  swift_retain(v12);
  return v4;
}

double sub_10011D10C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_10011D1BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  id v33;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
  v15 = *(void **)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = (uint64_t)v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = *(uint64_t *)((char *)a2 + v16);
  *(uint64_t *)((char *)a1 + v16) = v18;
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[9];
  v22 = a3[10];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = *(uint64_t *)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = *(uint64_t *)((char *)a2 + v26);
  *(uint64_t *)((char *)a1 + v26) = v28;
  v29 = (uint64_t *)((char *)a1 + v27);
  v30 = (uint64_t *)((char *)a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = v14;
  v33 = v15;
  swift_retain(v18);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  swift_retain(v31);
  return a1;
}

uint64_t *sub_10011D304(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = *(void **)((char *)a2 + v12);
  v14 = *(void **)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v15 = v13;

  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v16);
  v18 = *(void **)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
  v19 = v17;

  v20 = a3[7];
  v21 = *(uint64_t *)((char *)a2 + v20);
  v22 = *(uint64_t *)((char *)a1 + v20);
  *(uint64_t *)((char *)a1 + v20) = v21;
  swift_retain(v21);
  swift_release(v22);
  v23 = a3[8];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)v24 = v26;
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v28[8] = v29[8];
  *(_QWORD *)v28 = v30;
  v31 = a3[10];
  v32 = *(uint64_t *)((char *)a2 + v31);
  v33 = *(uint64_t *)((char *)a1 + v31);
  *(uint64_t *)((char *)a1 + v31) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[11];
  v35 = *(uint64_t *)((char *)a2 + v34);
  v36 = *(uint64_t *)((char *)a1 + v34);
  *(uint64_t *)((char *)a1 + v34) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[12];
  v38 = (uint64_t *)((char *)a1 + v37);
  v39 = (uint64_t *)((char *)a2 + v37);
  v40 = v39[1];
  v41 = v38[1];
  *v38 = *v39;
  v38[1] = v40;
  swift_retain(v40);
  swift_release(v41);
  return a1;
}

char *sub_10011D49C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = a3[9];
  v13 = a3[10];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v16 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  return a1;
}

char *sub_10011D5A8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];

  v10 = a3[6];
  v11 = *(void **)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];

  v12 = a3[7];
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release(v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = a3[10];
  v21 = *(_QWORD *)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  swift_bridgeObjectRelease(v21);
  v22 = a3[11];
  v23 = *(_QWORD *)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  swift_bridgeObjectRelease(v23);
  v24 = a3[12];
  v25 = *(_QWORD *)&a1[v24 + 8];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  swift_release(v25);
  return a1;
}

uint64_t sub_10011D70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D718);
}

uint64_t sub_10011D718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10011D798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D7A4);
}

uint64_t sub_10011D7A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_10011D820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = "\t";
    v4[5] = "\t";
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

uint64_t sub_10011D8D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006ABFB0, 1);
}

uint64_t sub_10011D8E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100119BC0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10011D8E8()
{
  unint64_t result;

  result = qword_1008210E8;
  if (!qword_1008210E8)
  {
    result = swift_getWitnessTable(&unk_1006258E4, &type metadata for CardTypeFamily);
    atomic_store(result, (unint64_t *)&qword_1008210E8);
  }
  return result;
}

unint64_t sub_10011D92C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008210F0;
  if (!qword_1008210F0)
  {
    v1 = sub_100007050(&qword_1008210D8);
    sub_10011D990();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1008210F0);
  }
  return result;
}

unint64_t sub_10011D990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008210F8;
  if (!qword_1008210F8)
  {
    v1 = type metadata accessor for CardTypeConfigurationRoomView(255);
    result = swift_getWitnessTable(&unk_10062C710, v1);
    atomic_store(result, (unint64_t *)&qword_1008210F8);
  }
  return result;
}

uint64_t sub_10011D9D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100119DA4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10011D9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardConfigurationView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10011DA28(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CardConfigurationView(0) - 8) + 80);
  sub_10011C778(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10011DA7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821128;
  if (!qword_100821128)
  {
    v1 = sub_100007050(&qword_100821120);
    sub_10010B230();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100821128);
  }
  return result;
}

uint64_t sub_10011DAEC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for CardConfigurationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }

  swift_release(*(_QWORD *)((char *)v6 + v1[7]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[10]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[11]));
  swift_release(*(_QWORD *)((char *)v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10011DBE0(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CardConfigurationView(0) - 8) + 80);
  sub_10011A2E4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10011DC2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821148;
  if (!qword_100821148)
  {
    v1 = sub_100007050(&qword_100821138);
    sub_10011DC98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100821148);
  }
  return result;
}

unint64_t sub_10011DC98()
{
  unint64_t result;

  result = qword_100821150;
  if (!qword_100821150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100821150);
  }
  return result;
}

unint64_t sub_10011DCDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008211F0;
  if (!qword_1008211F0)
  {
    v1 = sub_100007050(&qword_1008211C0);
    sub_100028384(&qword_1008211F8, &qword_1008211D8, (uint64_t)&unk_10063F428);
    sub_100028384(&qword_100821200, &qword_1008211A8, (uint64_t)&unk_10063F428);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008211F0);
  }
  return result;
}

uint64_t sub_10011DD80()
{
  return sub_100028384(&qword_1008212C8, &qword_1008212D0, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

void sub_10011DDAC(double a1, double a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  double v12;
  _QWORD v13[5];
  uint64_t v14;

  v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", a1, a2);
  v6 = swift_allocObject(&unk_100787388, 40, 7);
  *(_QWORD *)(v6 + 16) = v2;
  *(double *)(v6 + 24) = a1;
  *(double *)(v6 + 32) = a2;
  v7 = swift_allocObject(&unk_1007873B0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10011DFC8;
  *(_QWORD *)(v7 + 24) = v6;
  v13[4] = sub_10011DFF4;
  v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100274C8C;
  v13[3] = &unk_1007873C8;
  v8 = _Block_copy(v13);
  v9 = v14;
  v10 = v2;
  swift_retain(v7);
  v11 = objc_msgSend(v5, "imageWithActions:", v8, swift_release(v9).n128_f64[0]);

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 119, 31, 61, 1);
  *(_QWORD *)&v12 = swift_release(v7).n128_u64[0];
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v11, "imageWithRenderingMode:", objc_msgSend(v10, "renderingMode", v12));
    swift_release(v6);

  }
}

uint64_t sub_10011DFA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_10011DFC8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "drawInRect:", 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_10011DFE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011DFF4(uint64_t a1)
{
  uint64_t v1;

  return sub_100274C6C(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_10011E0DC()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  Class isa;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100047110((uint64_t *)&unk_100828340);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100623750;
  v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp33AddToYourRingSectionSeparatorView_div];
  v6 = objc_msgSend(v5, "topAnchor");
  v7 = objc_msgSend(v1, "topAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:", v7);

  *(_QWORD *)(v4 + 32) = v8;
  v9 = objc_msgSend(v5, "leadingAnchor");
  v10 = objc_msgSend(v1, "leadingAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v4 + 40) = v11;
  v12 = objc_msgSend(v5, "trailingAnchor");
  v13 = objc_msgSend(v1, "trailingAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  *(_QWORD *)(v4 + 48) = v14;
  v15 = objc_msgSend(v5, "heightAnchor");
  if (qword_10081DD78 != -1)
    swift_once(&qword_10081DD78, sub_100442F3C);
  v16 = objc_msgSend(v15, "constraintEqualToConstant:", *(double *)&qword_10086AA08);

  *(_QWORD *)(v4 + 56) = v16;
  specialized Array._endMutation()(v17);
  sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

id sub_10011E3DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddToYourRingSectionSeparatorView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AddToYourRingSectionSeparatorView()
{
  return objc_opt_self(_TtC10FitnessApp33AddToYourRingSectionSeparatorView);
}

uint64_t sub_10011E43C(unsigned __int8 a1)
{
  return sub_10011E664(a1, 19, 0x454D414E5FLL, (void *)0xE500000000000000);
}

uint64_t sub_10011E454(uint64_t result)
{
  return result;
}

_UNKNOWN **sub_10011E45C(char a1)
{
  if ((a1 - 1) > 0xFu)
    return (_UNKNOWN **)&_swiftEmptyArrayStorage;
  else
    return off_100787480[(char)(a1 - 1)];
}

uint64_t sub_10011E48C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011E4BC
                                                            + 4 * asc_100625804[a1]))(0x53474E4952, 0xE500000000000000);
}

uint64_t sub_10011E4BC()
{
  return 0x454D5F5350455453;
}

uint64_t sub_10011E4E0()
{
  return 0x4D5F534548535550;
}

uint64_t sub_10011E644(unsigned __int8 a1)
{
  return sub_10011E664(a1, 24, 0x414E5F4D4F4F525FLL, (void *)0xEA0000000000454DLL);
}

uint64_t sub_10011E664(unsigned __int8 a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  void *object;
  Swift::String v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  _QWORD v15[2];

  HIDWORD(v15[1]) = -335544320;
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v15, "CARD_FAMILY_");
  v7._countAndFlagsBits = sub_10011E48C(a1);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  String.append(_:)(v9);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle", v15[0]);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  swift_bridgeObjectRelease(v15[1]);

  return v13;
}

uint64_t sub_10011E794(unsigned __int8 a1)
{
  uint64_t v2;
  Swift::String v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9 = sub_10011E48C(a1);
  v10 = v2;
  v3._object = (void *)0x8000000100689B00;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle", v9);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "localizedStringForKey:value:table:", v5, 0, 0);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  swift_bridgeObjectRelease(v10);

  return v7;
}

uint64_t sub_10011E89C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10011E8D8 + 4 * byte_100625816[a1]))(0xD000000000000013, 0x8000000100689A20);
}

uint64_t sub_10011E8D8()
{
  return 0x722E657275676966;
}

uint64_t sub_10011E8F8()
{
  return 0x6E697270656F6873;
}

uint64_t sub_10011E91C()
{
  return 0x6B636F6C63;
}

uint64_t sub_10011E930()
{
  return 0x622E6E6F73726570;
}

uint64_t sub_10011E954()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_10011EA08()
{
  return 0x682E657275676966;
}

uint64_t sub_10011EA2C()
{
  return 0x772E657275676966;
}

unint64_t sub_10011EA68@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10011F81C(*a1);
  *a2 = result;
  return result;
}

void sub_10011EA90(_QWORD *a1@<X8>)
{
  *a1 = &off_10077F280;
}

void sub_10011EAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for WorkoutDurationMetrics();
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    specialized Array._endMutation()(v17);
    return;
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v7);
  v19 = v27 - v5;
  if (__OFSUB__(v27, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v22 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
}

uint64_t sub_10011ED78(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_10013FD04(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  v15 = sub_100047110(&qword_1008200C0);
  swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)(v14 + 40);
    v20 = (char *)&v5[5 * a2 + 4];
    if ((char *)(v14 + 40) != v20 || v19 >= &v20[40 * v18])
      memmove(v19, v20, 40 * v18);
    v21 = v5[2];
    v17 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v17)
    {
      v5[2] = v22;
LABEL_20:
      sub_1000252E0(a3, v14);
      return sub_10011FE70(a3);
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

void *sub_10011EF18(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10013FABC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[3 * a1 + 4], v7, &type metadata for CardTemplate);
  if (!v7)
    goto LABEL_23;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_29;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[3 * a2 + 4];
    v17 = 24 * v15;
    if (24 * a1 < 24 * a2 || (&v4[3 * a1 + 4] < (_QWORD *)&v16[v17] ? (v18 = a1 == a2) : (v18 = 0), !v18))
      result = memmove(&v4[3 * a1 + 4], v16, v17);
    v19 = v4[2];
    v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  v21 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v21, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10011F0A0(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_10013FD80(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = v4[2];
  v13 = v12 - a2;
  if (__OFSUB__(v12, a2))
    goto LABEL_27;
  if ((v13 & 0x8000000000000000) == 0)
  {
    result = (char *)v4 + a1 + 32;
    v14 = (char *)v4 + a2 + 32;
    if (a1 != a2 || result >= &v14[v13])
      result = (char *)memmove(result, v14, v13);
    v15 = v4[2];
    v16 = __OFADD__(v15, v8);
    v17 = v15 + v8;
    if (!v16)
    {
      v4[2] = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10011F1F4(uint64_t result)
{
  char v1;
  uint64_t v2;
  CHWorkoutDetailHeartRateTableViewCell *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int isa_low;
  BOOL v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];
  CHWorkoutDetailHeartRateTableViewCell *v58;

  v1 = result;
  v2 = 18;
  v3 = &_swiftEmptyArrayStorage;
  v4 = &byte_10077F2A0;
  do
  {
    v8 = *v4++;
    v7 = v8;
    if (v8 != 8 && v7 != 5)
    {
      result = swift_isUniquelyReferenced_nonNull_native(v3);
      v57[0] = v3;
      if ((result & 1) == 0)
      {
        result = sub_1001216A8(0, *(_QWORD *)v3->cellPadding + 1, 1);
        v3 = (CHWorkoutDetailHeartRateTableViewCell *)v57[0];
      }
      v6 = *(_QWORD *)v3->cellPadding;
      v5 = *(_QWORD *)v3->cellInset;
      if (v6 >= v5 >> 1)
      {
        result = sub_1001216A8(v5 > 1, v6 + 1, 1);
        v3 = (CHWorkoutDetailHeartRateTableViewCell *)v57[0];
      }
      *(_QWORD *)v3->cellPadding = v6 + 1;
      *((_BYTE *)&v3[1].super.super.super.super.isa + v6) = v7;
    }
    --v2;
  }
  while (v2);
  v58 = v3;
  if ((v1 & 2) == 0)
  {
    v10 = *(_QWORD *)v3->cellPadding;
    if (v10)
    {
      if (LOBYTE(v3[1].super.super.super.super.isa) == 4)
      {
        v11 = 0;
      }
      else
      {
        if (v10 == 1)
        {
          v11 = 1;
          goto LABEL_40;
        }
        v18 = 33;
        while (1)
        {
          v11 = v18 - 32;
          if (*((_BYTE *)&v3->super.super.super.super.isa + v18) == 4)
            break;
          v19 = v18 - 31;
          if (__OFADD__(v11, 1))
            goto LABEL_154;
          ++v18;
          if (v19 == v10)
          {
            v11 = *(_QWORD *)v3->cellPadding;
            goto LABEL_40;
          }
        }
      }
      v12 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      if (v12 != v10)
      {
        v13 = v11 + 33;
        while ((v12 & 0x8000000000000000) == 0)
        {
          if (v13 - 32 >= v10)
            goto LABEL_146;
          v16 = *((unsigned __int8 *)&v3->super.super.super.super.isa + v13);
          if (v16 != 4)
          {
            if (v13 - 32 != v11)
            {
              if (v11 >= v10)
                goto LABEL_158;
              v17 = *((_BYTE *)&v3[1].super.super.super.super.isa + v11);
              result = swift_isUniquelyReferenced_nonNull_native(v3);
              if ((result & 1) == 0)
              {
                result = (uint64_t)sub_1004DEE6C(v3);
                v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
              }
              *((_BYTE *)&v3[1].super.super.super.super.isa + v11) = v16;
              *((_BYTE *)&v3->super.super.super.super.isa + v13) = v17;
              v58 = v3;
            }
            v14 = __OFADD__(v11++, 1);
            if (v14)
              goto LABEL_151;
            v10 = *(_QWORD *)v3->cellPadding;
          }
          v15 = v13 - 31;
          ++v13;
          if (v15 == v10)
            goto LABEL_18;
        }
        goto LABEL_145;
      }
LABEL_18:
      if ((uint64_t)v10 >= v11)
        goto LABEL_40;
      __break(1u);
    }
    v11 = 0;
LABEL_40:
    result = (uint64_t)sub_10011F0A0(v11, v10);
    v3 = v58;
  }
  if ((v1 & 0x40) != 0)
    goto LABEL_53;
  v20 = *(_QWORD *)v3->cellPadding;
  if (!v20)
    goto LABEL_51;
  isa_low = LOBYTE(v3[1].super.super.super.super.isa);
  v22 = isa_low > 0xB;
  v23 = (1 << isa_low) & 0xC04;
  if (v22 || v23 == 0)
  {
    v25 = 1;
    if (v20 == 1)
      goto LABEL_52;
    v39 = 33;
    while (1)
    {
      v40 = v39 - 32;
      v41 = *((unsigned __int8 *)&v3->super.super.super.super.isa + v39);
      v22 = v41 > 0xB;
      v42 = (1 << v41) & 0xC04;
      if (!v22 && v42 != 0)
        break;
      v14 = __OFADD__(v40, 1);
      v44 = v39 - 31;
      if (v14)
        goto LABEL_162;
      ++v39;
      if (v44 == v20)
      {
        v25 = *(_QWORD *)v3->cellPadding;
        goto LABEL_52;
      }
    }
    v25 = v39 - 32;
    v26 = v39 - 31;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  else
  {
    v25 = 0;
    v26 = 1;
  }
  if (v26 != v20)
  {
    v30 = v25 + 33;
    while ((v26 & 0x8000000000000000) == 0)
    {
      if (v30 - 32 >= v20)
        goto LABEL_144;
      v32 = *((unsigned __int8 *)&v3->super.super.super.super.isa + v30);
      if (v32 > 0xB || ((1 << v32) & 0xC04) == 0)
      {
        if (v30 - 32 != v25)
        {
          if (v25 >= v20)
            goto LABEL_161;
          v34 = *((_BYTE *)&v3[1].super.super.super.super.isa + v25);
          result = swift_isUniquelyReferenced_nonNull_native(v3);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1004DEE6C(v3);
            v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
          }
          *((_BYTE *)&v3[1].super.super.super.super.isa + v25) = v32;
          *((_BYTE *)&v3->super.super.super.super.isa + v30) = v34;
          v58 = v3;
        }
        v14 = __OFADD__(v25++, 1);
        if (v14)
          goto LABEL_157;
        v20 = *(_QWORD *)v3->cellPadding;
      }
      v31 = v30 - 31;
      ++v30;
      if (v31 == v20)
        goto LABEL_49;
    }
    goto LABEL_143;
  }
LABEL_49:
  if ((uint64_t)v20 < v25)
  {
    __break(1u);
LABEL_51:
    v25 = 0;
  }
LABEL_52:
  result = (uint64_t)sub_10011F0A0(v25, v20);
  v3 = v58;
LABEL_53:
  if ((v1 & 0x81) != 0x80)
  {
    v27 = *(_QWORD *)v3->cellPadding;
    if (!v27)
      goto LABEL_61;
    if (LOBYTE(v3[1].super.super.super.super.isa) == 7)
    {
      v28 = 0;
    }
    else
    {
      if (v27 == 1)
      {
        v28 = 1;
        goto LABEL_107;
      }
      v45 = 33;
      while (1)
      {
        v28 = v45 - 32;
        if (*((_BYTE *)&v3->super.super.super.super.isa + v45) == 7)
          break;
        v46 = v45 - 31;
        if (__OFADD__(v28, 1))
          goto LABEL_155;
        ++v45;
        if (v46 == v27)
        {
          v28 = *(_QWORD *)v3->cellPadding;
          goto LABEL_107;
        }
      }
    }
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    if (v29 == v27)
    {
LABEL_59:
      if ((uint64_t)v27 >= v28)
      {
LABEL_107:
        sub_10011F0A0(v28, v27);
        v3 = v58;
        goto LABEL_108;
      }
      __break(1u);
LABEL_61:
      v28 = 0;
      goto LABEL_107;
    }
    v35 = v28 + 33;
    while ((v29 & 0x8000000000000000) == 0)
    {
      if (v35 - 32 >= v27)
        goto LABEL_148;
      v37 = *((unsigned __int8 *)&v3->super.super.super.super.isa + v35);
      if (v37 != 7)
      {
        if (v35 - 32 != v28)
        {
          if (v28 >= v27)
            goto LABEL_159;
          v38 = *((_BYTE *)&v3[1].super.super.super.super.isa + v28);
          result = swift_isUniquelyReferenced_nonNull_native(v3);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1004DEE6C(v3);
            v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
          }
          *((_BYTE *)&v3[1].super.super.super.super.isa + v28) = v37;
          *((_BYTE *)&v3->super.super.super.super.isa + v35) = v38;
          v58 = v3;
        }
        v14 = __OFADD__(v28++, 1);
        if (v14)
          goto LABEL_152;
        v27 = *(_QWORD *)v3->cellPadding;
      }
      v36 = v35 - 31;
      ++v35;
      if (v36 == v27)
        goto LABEL_59;
    }
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
LABEL_108:
  v57[3] = &type metadata for FitnessFeatures;
  v57[4] = sub_10004F7EC();
  LOBYTE(v57[0]) = 4;
  v47 = isFeatureEnabled(_:)(v57);
  result = _s10FitnessApp24HistoryViewActionContextVwxx_0(v57);
  if ((v47 & 1) != 0 && (v1 & 0x88) == 0x80 && (v1 & 1) == 0)
    return (uint64_t)v3;
  v48 = *(_QWORD *)v3->cellPadding;
  if (!v48)
    goto LABEL_118;
  if (LOBYTE(v3[1].super.super.super.super.isa) == 6)
  {
    v49 = 0;
  }
  else
  {
    if (v48 == 1)
    {
      v49 = 1;
      goto LABEL_138;
    }
    v55 = 33;
    while (1)
    {
      v49 = v55 - 32;
      if (*((_BYTE *)&v3->super.super.super.super.isa + v55) == 6)
        break;
      v56 = v55 - 31;
      if (__OFADD__(v49, 1))
        goto LABEL_156;
      ++v55;
      if (v56 == v48)
      {
        v49 = *(_QWORD *)v3->cellPadding;
        goto LABEL_138;
      }
    }
  }
  v50 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
    if (v50 == v48)
    {
LABEL_116:
      if ((uint64_t)v48 >= v49)
      {
LABEL_138:
        sub_10011F0A0(v49, v48);
        return (uint64_t)v58;
      }
      __break(1u);
LABEL_118:
      v49 = 0;
      goto LABEL_138;
    }
    v51 = v49 + 33;
    while ((v50 & 0x8000000000000000) == 0)
    {
      if (v51 - 32 >= v48)
        goto LABEL_150;
      v53 = *((unsigned __int8 *)&v3->super.super.super.super.isa + v51);
      if (v53 != 6)
      {
        if (v51 - 32 != v49)
        {
          if (v49 >= v48)
            goto LABEL_160;
          v54 = *((_BYTE *)&v3[1].super.super.super.super.isa + v49);
          result = swift_isUniquelyReferenced_nonNull_native(v3);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1004DEE6C(v3);
            v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
          }
          *((_BYTE *)&v3[1].super.super.super.super.isa + v49) = v53;
          *((_BYTE *)&v3->super.super.super.super.isa + v51) = v54;
          v58 = v3;
        }
        v14 = __OFADD__(v49++, 1);
        if (v14)
          goto LABEL_153;
        v48 = *(_QWORD *)v3->cellPadding;
      }
      v52 = v51 - 31;
      ++v51;
      if (v52 == v48)
        goto LABEL_116;
    }
    goto LABEL_149;
  }
LABEL_165:
  __break(1u);
  return result;
}

unint64_t sub_10011F81C(unint64_t result)
{
  if (result >= 0x12)
    return 18;
  return result;
}

uint64_t sub_10011F82C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v26 = v5;
  else
    v26 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = type metadata accessor for WorkoutNotification(0);
  v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return specialized Array._endMutation()(v18);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 < 0)
    v29 = *v3;
  else
    v29 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  v18 = (void *)swift_bridgeObjectRelease(v19);
  v21 = v30 - v2;
  if (__OFSUB__(v30, v2))
    goto LABEL_52;
LABEL_21:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21])
      v18 = memmove(v16, v22, 8 * v21);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v23 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v24;
        return specialized Array._endMutation()(v18);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v18 = (void *)swift_bridgeObjectRelease(v2);
    v24 = v32 + v6;
    if (!__OFADD__(v32, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v33, 1046, 0);
  __break(1u);
  return result;
}

void *sub_10011FB24(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100140ED4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[9 * a1 + 4], v7, &type metadata for WorkoutSplitEntity);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (_QWORD *)&v16[72 * v15])
      result = memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10011FC98(uint64_t a1, uint64_t a2)
{
  return sub_10011FCC0(a1, a2, (uint64_t (*)(void))sub_10013FCF0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10011FCAC(uint64_t a1, uint64_t a2)
{
  return sub_10011FCC0(a1, a2, (uint64_t (*)(void))sub_100141844, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_10011FCC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = a4(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  result = swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v20 = *(_QWORD *)(v6 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_28;
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (v17 < v16 * a2 || v18 >= v15 + v16 * a2 + v21 * v16)
    {
      result = swift_arrayInitWithTakeFrontToBack(v18);
    }
    else if (v17 != v16 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v18);
    }
    v23 = *(_QWORD *)(v6 + 16);
    v24 = __OFADD__(v23, v10);
    v25 = v23 - v9;
    if (!v24)
    {
      *(_QWORD *)(v6 + 16) = v25;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10011FE70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_100821310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardTypeFamily(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CardTypeFamily(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10011FF8C + 4 * byte_10062582D[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_10011FFC0 + 4 * byte_100625828[v4]))();
}

uint64_t sub_10011FFC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011FFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011FFD0);
  return result;
}

uint64_t sub_10011FFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011FFE4);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_10011FFE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011FFF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CardTypeFamily()
{
  return &type metadata for CardTypeFamily;
}

unint64_t sub_100120010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821318;
  if (!qword_100821318)
  {
    v1 = sub_100007050(&qword_100821320);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100821318);
  }
  return result;
}

unint64_t sub_100120060()
{
  unint64_t result;

  result = qword_100821328;
  if (!qword_100821328)
  {
    result = swift_getWitnessTable(&unk_1006258BC, &type metadata for CardTypeFamily);
    atomic_store(result, (unint64_t *)&qword_100821328);
  }
  return result;
}

unint64_t sub_1001200A8()
{
  unint64_t result;

  result = qword_100821330;
  if (!qword_100821330)
  {
    result = swift_getWitnessTable(&unk_1006259B4, &type metadata for OpenTrendIntent);
    atomic_store(result, (unint64_t *)&qword_100821330);
  }
  return result;
}

unint64_t sub_1001200F0()
{
  unint64_t result;

  result = qword_100821338;
  if (!qword_100821338)
  {
    result = swift_getWitnessTable(&unk_1006259DC, &type metadata for OpenTrendIntent);
    atomic_store(result, (unint64_t *)&qword_100821338);
  }
  return result;
}

uint64_t sub_100120134(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AC04C, 1);
}

uint64_t sub_100120144(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100120184();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_100120184()
{
  unint64_t result;

  result = qword_100821340;
  if (!qword_100821340)
  {
    result = swift_getWitnessTable(&unk_100625924, &type metadata for OpenTrendIntent);
    atomic_store(result, (unint64_t *)&qword_100821340);
  }
  return result;
}

uint64_t sub_1001201C8()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100008398(v0, qword_100869D90);
  sub_10003CE9C(v0, (uint64_t)qword_100869D90);
  return LocalizedStringResource.init(stringLiteral:)(0x657254206E65704FLL, 0xEA0000000000646ELL);
}

uint64_t sub_100120228()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_10012025C()
{
  unint64_t v0;
  Swift::String v1;
  void *object;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;

  IntentParameter.wrappedValue.getter(&v5);
  v0 = v5;
  if (!v5)
    return URL.init(string:)(0xD000000000000013, 0x8000000100689B40);
  v5 = 0xD000000000000014;
  v6 = 0x8000000100689B60;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3 = v6;
  URL.init(string:)(v5, v6);
  swift_bridgeObjectRelease(v3);
  return swift_release(v0);
}

uint64_t sub_100120334(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100047110(&qword_10081E640);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001203B8, 0, 0);
}

uint64_t sub_1001203B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  sub_10012025C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_10012089C(*(_QWORD *)(v0 + 32));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    if (qword_10081DDA8 != -1)
      swift_once(&qword_10081DDA8, sub_10044A45C);
    v6 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 40);
    sub_10044AD80(v5);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 32);
  static IntentResult.result<>()(v4);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001204A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D570 != -1)
    swift_once(&qword_10081D570, sub_1001201C8);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869D90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100120514()
{
  return 1;
}

uint64_t sub_100120520(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100821374);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000DA0E4;
  return sub_100120334(a1, v4);
}

uint64_t sub_100120578@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100120624();
  *a1 = result;
  return result;
}

uint64_t sub_10012059C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100120184();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenTrendIntent()
{
  return &type metadata for OpenTrendIntent;
}

unint64_t sub_1001205D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821350;
  if (!qword_100821350)
  {
    v1 = sub_100007050(&qword_100821358);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_100821350);
  }
  return result;
}

uint64_t sub_100120624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_1008201C8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047110(&qword_100821360);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100689B20);
  LocalizedStringResource.init(stringLiteral:)(0x6F7420646E657254, 0xED00006E65706F20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v21 = 0;
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100120858();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v21, v9, v7, v3, v19);
}

unint64_t sub_100120858()
{
  unint64_t result;

  result = qword_100821368;
  if (!qword_100821368)
  {
    result = swift_getWitnessTable(&unk_1006460F0, &type metadata for TrendEntity);
    atomic_store(result, &qword_100821368);
  }
  return result;
}

uint64_t sub_10012089C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_10081E640);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for TrendsCoachingDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)((char *)a2 + 57);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v5 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for TrendsCoachingDataInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a1 + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a1 + 58) = *((_BYTE *)a2 + 58);
  a1[8] = a2[8];
  v8 = a2[9];
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  a1[9] = v8;
  v9 = a2[11];
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[11] = v9;
  return a1;
}

__n128 initializeWithTake for TrendsCoachingDataInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TrendsCoachingDataInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendsCoachingDataInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendsCoachingDataInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendsCoachingDataInfo()
{
  return &type metadata for TrendsCoachingDataInfo;
}

uint64_t sub_100120B80(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a8;
  v36 = a12;
  v33 = a7;
  v34 = a11;
  v31 = a6;
  v32 = a10;
  v30 = a9;
  v18 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type;
  *(_OWORD *)v25 = xmmword_1006235A0;
  *(_BYTE *)(v25 + 16) = 3;
  sub_10004D954(a1, (uint64_t)v20);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  if ((_DWORD)v26 == 1)
  {
    UUID.init()(v26);
    sub_10004D914(a1);
    sub_10004D914((uint64_t)v20);
    v27 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  }
  else
  {
    sub_10004D914(a1);
    v27 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v27(v24, v20, v21);
  }
  v27((char *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_uuid), v24, v21);
  *(_BYTE *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size) = a2 & 1;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_editMode) = a3 & 1;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_loadingState) = a4 & 1;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems) = a5;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_awardsDataProvider) = v31;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_workoutFormattingManager) = v33;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_workoutImageProvider) = v35;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_mindfulnessFormattingManager) = v30;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_stackFormattingManager) = v32;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_seymourCatalogItemDataProvider) = v34;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_fitnessAppContext) = v36;
  return v12;
}

uint64_t sub_100120DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000EB41C(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type), *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_workoutImageProvider));
  return v0;
}

uint64_t sub_100120E8C()
{
  uint64_t v0;

  sub_100120DB0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100120EB0()
{
  return type metadata accessor for HistoryItemsCard(0);
}

uint64_t type metadata accessor for HistoryItemsCard(uint64_t a1)
{
  uint64_t result;

  result = qword_1008213A0;
  if (!qword_1008213A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HistoryItemsCard);
  return result;
}

uint64_t sub_100120EF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100625A78;
    v4[2] = &unk_100625A90;
    v4[3] = &unk_100625A90;
    v4[4] = &unk_100625A90;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

Swift::Int sub_100120FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  _OWORD v26[4];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init()(v26);
  v6 = v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(unsigned __int8 *)(v6 + 16);
  sub_1000EB3F4(v7, v8, *(_BYTE *)(v6 + 16));
  sub_10054FFE4(v7, v8, v9);
  v11 = v10;
  String.hash(into:)(v26, v12, v10);
  swift_bridgeObjectRelease(v11);
  if (!v9 || v9 == 2)
  {
    Hasher._combine(_:)(v7);
  }
  else
  {
    if (v9 == 1)
    {
      String.hash(into:)(v26, v7, v8);
      v13 = v7;
      v14 = v8;
      v15 = 1;
    }
    else
    {
      v13 = v7;
      v14 = v8;
      v15 = v9;
    }
    sub_1000EB41C(v13, v14, v15);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size));
  Hasher._combine(_:)(*(_BYTE *)(v1 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_editMode));
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    v25 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v16);
    sub_1001216CC(0, v17, 0);
    v19 = v16 + 32;
    v18 = v25;
    do
    {
      sub_1000252E0(v19, (uint64_t)&v28);
      v20 = *((_QWORD *)&v29 + 1);
      v21 = v30;
      sub_100016804(&v28, *((uint64_t *)&v29 + 1));
      (*(void (**)(uint64_t, uint64_t))(v21 + 48))(v20, v21);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(&v28);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      {
        sub_1001216CC(0, v18[2] + 1, 1);
        v18 = v25;
      }
      v23 = v18[2];
      v22 = v18[3];
      if (v23 >= v22 >> 1)
      {
        sub_1001216CC(v22 > 1, v23 + 1, 1);
        v18 = v25;
      }
      v18[2] = v23 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v23, v5, v2);
      v25 = v18;
      v19 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease(v16);
  }
  sub_10012493C((uint64_t)v26, (uint64_t)v18);
  swift_bridgeObjectRelease(v18);
  v30 = v26[2];
  v31 = v26[3];
  v32 = v27;
  v28 = v26[0];
  v29 = v26[1];
  return Hasher.finalize()();
}

uint64_t sub_100121254()
{
  uint64_t v0;
  char v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  __int128 v12;
  char v13;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type + 16);
  v12 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type);
  v13 = v1;
  _print_unlocked<A, B>(_:_:)(&v12, v14, &type metadata for CardType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  LOBYTE(v12) = *(_BYTE *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size);
  _print_unlocked<A, B>(_:_:)(&v12, v14, &type metadata for CardSize, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 58;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000083D8((unint64_t *)&qword_100821498, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 540945696;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = sub_10003AFF0(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_historyItems));
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  return v14[0];
}

uint64_t sub_1001213AC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_uuid;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001213F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_type;
  v2 = *(_QWORD *)v1;
  sub_1000EB3F4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t sub_100121448()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_size);
}

uint64_t sub_10012145C()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_editMode);
}

uint64_t sub_100121470()
{
  return sub_100121254();
}

Swift::Int sub_100121490()
{
  return sub_100120FA8();
}

uint64_t sub_1001214B0()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC10FitnessApp16HistoryItemsCard_loadingState);
}

uint64_t sub_1001214C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100121D54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001214E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100121EBC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001214FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122018(a1, a2, a3, *v3, &qword_10081F3D8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121528(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122018(a1, a2, a3, *v3, &qword_100821608);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121554(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001221A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121570(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100123F30(a1, a2, a3, (_QWORD *)*v3, &qword_1008214D0, &qword_1008214D8);
  *v3 = result;
  return result;
}

uint64_t sub_10012159C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122DA4(a1, a2, a3, *v3, &qword_1008215E8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001215C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122DA4(a1, a2, a3, *v3, &qword_1008216D0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001215E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122334(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121600(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008214F0, type metadata accessor for WorkoutChartDataElement);
  *v3 = result;
  return result;
}

uint64_t sub_10012162C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008214E0, type metadata accessor for ActivitySharingHighlightViewModel);
  *v3 = result;
  return result;
}

uint64_t sub_100121658(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008214A8, type metadata accessor for TrendListMetric);
  *v3 = result;
  return result;
}

uint64_t sub_100121684(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012439C(a1, a2, a3, *v3, &qword_1008214B0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001216A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012439C(a1, a2, a3, *v3, &qword_1008214F8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001216CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_10082E670, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_1001216F8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821678, (uint64_t (*)(_QWORD))&type metadata accessor for EngagementBadge);
  *v3 = result;
  return result;
}

uint64_t sub_100121724(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001224A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121740(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008216D8, (uint64_t (*)(_QWORD))&type metadata accessor for SleepingSampleDataType);
  *v3 = result;
  return result;
}

uint64_t sub_10012176C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100122794(a1, a2, a3, (_QWORD *)*v3, &qword_1008215C8, (uint64_t *)&unk_10082E5B0);
  *v3 = result;
  return result;
}

uint64_t sub_100121798(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10012260C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001217B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100123F30(a1, a2, a3, (_QWORD *)*v3, &qword_100821588, &qword_100821590);
  *v3 = result;
  return result;
}

uint64_t sub_1001217E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100122794(a1, a2, a3, (_QWORD *)*v3, &qword_100821578, &qword_100821580);
  *v3 = result;
  return result;
}

uint64_t sub_10012180C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008216F0, (uint64_t (*)(_QWORD))&type metadata accessor for BaselineRelativeValue);
  *v3 = result;
  return result;
}

uint64_t sub_100121838(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100044C5C(a1, a2, a3, *v3, &qword_1008216E0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10012185C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122938(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121878(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122A94(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121894(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012439C(a1, a2, a3, *v3, &qword_100821570);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001218B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100123F30(a1, a2, a3, (_QWORD *)*v3, &qword_100821500, &qword_100821508);
  *v3 = result;
  return result;
}

uint64_t sub_1001218E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821638, (uint64_t (*)(_QWORD))&type metadata accessor for AttributedString);
  *v3 = result;
  return result;
}

uint64_t sub_100121910(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100123F30(a1, a2, a3, (_QWORD *)*v3, &qword_1008215D0, &qword_1008215D8);
  *v3 = result;
  return result;
}

uint64_t sub_10012193C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100122C1C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100121958(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122DA4(a1, a2, a3, *v3, &qword_100821630);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10012197C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100044C5C(a1, a2, a3, *v3, &qword_1008216F8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001219A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001240BC(a1, a2, a3, *v3, &qword_100821520);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001219C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100122EF8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001219E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100123044(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001219FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001231C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121A18(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012334C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121A34(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821708, (uint64_t (*)(_QWORD))&type metadata accessor for AppleExertionScale);
  *v3 = result;
  return result;
}

uint64_t sub_100121A60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821618, type metadata accessor for ActivitySharingHighlight);
  *v3 = result;
  return result;
}

uint64_t sub_100121A8C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001234B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121AA8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821610, (uint64_t (*)(_QWORD))&type metadata accessor for RoutePoint);
  *v3 = result;
  return result;
}

uint64_t sub_100121AD4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012439C(a1, a2, a3, *v3, &qword_1008214B8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121AF8(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100123610(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121B14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008216C8, type metadata accessor for WorkoutActivityEntity);
  *v3 = result;
  return result;
}

uint64_t sub_100121B40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008215F0, (uint64_t (*)(_QWORD))&type metadata accessor for Artwork);
  *v3 = result;
  return result;
}

uint64_t sub_100121B6C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001237C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121B88(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100123944(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121BA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_1008215E0, type metadata accessor for FitnessPlusStackViewModel);
  *v3 = result;
  return result;
}

uint64_t sub_100121BD0(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100123AC8(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121BEC(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100123C50(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121C08(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100123DCC(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121C24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100123F30(a1, a2, a3, (_QWORD *)*v3, &qword_100821550, &qword_100821558);
  *v3 = result;
  return result;
}

uint64_t sub_100121C50(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001240BC(a1, a2, a3, *v3, &qword_100821560);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121C74(char a1, int64_t a2, char a3)
{
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t result;

  result = sub_100124214(a1, a2, a3, *v3);
  *v3 = (CHWorkoutDetailHeartRateTableViewCell *)result;
  return result;
}

uint64_t sub_100121C90(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10012439C(a1, a2, a3, *v3, &qword_100821528);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100121CB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001244E4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_100121CD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100045B44(a1, a2, a3, (_QWORD *)*v3, &qword_100821538, &qword_100821540);
  *v3 = result;
  return result;
}

uint64_t sub_100121CFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100820A58, (uint64_t (*)(_QWORD))&type metadata accessor for CatalogLockupPlaceholder);
  *v3 = result;
  return result;
}

uint64_t sub_100121D28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000476D8(a1, a2, a3, (_QWORD *)*v3, &qword_100821548, (uint64_t (*)(_QWORD))&type metadata accessor for PersonalizationCandidate);
  *v3 = result;
  return result;
}

uint64_t sub_100121D54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100820020);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100121EBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821568);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122018(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100047110(a5);
    v12 = (char *)swift_allocObject(v11, 24 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  v16 = 24 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122194(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100122794(a1, a2, a3, a4, &qword_100821010, &qword_1008200C0);
}

uint64_t sub_1001221A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_10082CEC0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122314(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100122DA4(a1, a2, a3, a4, &qword_1008215E8);
}

uint64_t sub_100122320(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000476D8(a1, a2, a3, a4, &qword_1008214F0, type metadata accessor for WorkoutChartDataElement);
}

uint64_t sub_100122334(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821530);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122490(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000476D8(a1, a2, a3, a4, &qword_1008214C0, (uint64_t (*)(_QWORD))&type metadata accessor for DateComponents);
}

uint64_t sub_1001224A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216A0);
    v11 = (char *)swift_allocObject(v10, (v9 << 8) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 223;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[256 * v8])
      memmove(v14, v15, v8 << 8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[256 * v8] || v14 >= &v15[256 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012260C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008215A8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100047110(&qword_1008215B0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122794(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100047110(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100047110(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122938(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821510);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122A94(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216E8);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122C1C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110((uint64_t *)&unk_100839C30);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100047110(&qword_10082B520);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122DA4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100047110(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  v17 = 16 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    memcpy(v15, v16, v17);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122EF8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008214A0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123044(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821628);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001231C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821620);
    v11 = (char *)swift_allocObject(v10, 96 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[96 * v8])
      memmove(v13, v14, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[96 * v8] || v13 >= &v14[96 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012334C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821600);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001234B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821518);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123610(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008215B8);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)&v11[1];
  v14 = (unint64_t)&a4[1];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(&v11[1], &a4[1], 48 * v8);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100047110(&qword_1008215C0);
    swift_arrayInitWithCopy(&v11[1]);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001237B4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000476D8(a1, a2, a3, a4, &qword_1008215F8, (uint64_t (*)(_QWORD))&type metadata accessor for MediaMoment);
}

uint64_t sub_1001237C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821688);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123930(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000476D8(a1, a2, a3, a4, &qword_100821690, (uint64_t (*)(_QWORD))&type metadata accessor for Recommendation);
}

uint64_t sub_100123944(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  size_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821700);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = v11 + 1;
  v14 = (char *)&a4[1];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_28;
  }
  if (v14 >= (char *)v13 + 48 * v8 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123AC8(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  size_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216C0);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = v11 + 1;
  v14 = (char *)&a4[1];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_28;
  }
  if (v14 >= (char *)v13 + 72 * v8 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123C50(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  int64_t v12;
  uint64_t v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216B8);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = v11 + 1;
  v15 = (char *)&a4[1];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= (CHWorkoutDetailHeartRateTableViewCell *)&v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_30;
  }
  if (v15 >= (char *)v14 + 16 * v8 || v14 >= (CHWorkoutDetailHeartRateTableViewCell *)&v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123DB8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100045B44(a1, a2, a3, a4, &qword_100821598, &qword_1008215A0);
}

uint64_t sub_100123DCC(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  int64_t v12;
  uint64_t v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216B0);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = v11 + 1;
  v15 = (char *)&a4[1];
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= (CHWorkoutDetailHeartRateTableViewCell *)&v15[v16])
      memmove(v14, v15, v16);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_30;
  }
  if (v15 >= (char *)v14 + v16 || v14 >= (CHWorkoutDetailHeartRateTableViewCell *)&v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123F30(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100047110(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100047110(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001240BC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100047110(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    memcpy(v15, v16, 16 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100124214(char a1, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  size_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->cellInset;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->cellPadding;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->cellPadding;
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_1008216A8);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = v11 + 1;
  v14 = (char *)&a4[1];
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *(_QWORD *)a4->cellPadding = 0;
    goto LABEL_28;
  }
  if (v14 >= (char *)v13 + 72 * v8 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012439C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100047110(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001244E4(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  size_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100821698);
    v11 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->cellPadding = v8;
    *(_QWORD *)v11->cellInset = 2 * v12 - 64;
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = v11 + 1;
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (CHWorkoutDetailHeartRateTableViewCell *)a4 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[v8])
      memmove(v13, v14, v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_28;
  }
  if (v14 >= (char *)v13 + v8 || v13 >= (CHWorkoutDetailHeartRateTableViewCell *)&v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_100124630(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v5 = *v4;
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v6 = *(v4 - 1);
      else
        v6 = 0;
      Hasher._combine(_:)(v6);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

void sub_100124694(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  uint64_t v16;

  v4 = (int *)type metadata accessor for WorkoutChartDataElement(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10004F8C8(v9, (uint64_t)v7, type metadata accessor for WorkoutChartDataElement);
      v11 = type metadata accessor for Date(0);
      v12 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
      if ((*(_QWORD *)&v7[v4[5]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = *(_QWORD *)&v7[v4[5]];
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      if ((*(_QWORD *)&v7[v4[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v14 = *(_QWORD *)&v7[v4[6]];
      else
        v14 = 0;
      Hasher._combine(_:)(v14);
      if ((*(_QWORD *)&v7[v4[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v15 = *(_QWORD *)&v7[v4[7]];
      else
        v15 = 0;
      Hasher._combine(_:)(v15);
      sub_100011F54((uint64_t)v7, type metadata accessor for WorkoutChartDataElement);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
}

void sub_1001247EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;

  v4 = type metadata accessor for MetricChartData(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10004F8C8(v9, (uint64_t)v7, type metadata accessor for MetricChartData);
      v11 = type metadata accessor for Date(0);
      v12 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
      objc_msgSend(*(id *)((char *)v7 + *(int *)(v4 + 24)), "doubleValueForUnit:", *v7);
      if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v14 = v13;
      else
        v14 = 0;
      Hasher._combine(_:)(v14);
      NSObject.hash(into:)(a1);
      sub_100011F54((uint64_t)v7, type metadata accessor for MetricChartData);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
}

uint64_t sub_10012493C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v19 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      v17 = sub_1000083D8((unint64_t *)&qword_100828330, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v19, v4, v17);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

void sub_100124AE0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (uint64_t *)(a2 + 40);
    do
    {
      v6 = *v5;
      if (*v5)
      {
        v7 = *(v5 - 1);
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v6);
        String.hash(into:)(a1, v7, v6);
        swift_bridgeObjectRelease(v6);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

void sub_100124B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;
  Swift::UInt v11;

  if (!((unint64_t)a2 >> 62))
  {
    Hasher._combine(_:)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return;
    goto LABEL_3;
  }
  if (a2 < 0)
    v10 = a2;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(v11);
  swift_bridgeObjectRetain(a2);
  v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a2);
  if (v4)
  {
LABEL_3:
    if (v4 < 1)
    {
      __break(1u);
    }
    else if ((a2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
        NSObject.hash(into:)(a1);
        swift_unknownObjectRelease(v6);
      }
    }
    else
    {
      v7 = (void **)(a2 + 32);
      do
      {
        v8 = *v7++;
        v9 = v8;
        NSObject.hash(into:)(a1);

        --v4;
      }
      while (v4);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for WorkoutDetailHeartRateView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for WorkoutDetailHeartRateView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for WorkoutDetailHeartRateView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for WorkoutDetailHeartRateView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for WorkoutDetailHeartRateView()
{
  return &type metadata for WorkoutDetailHeartRateView;
}

uint64_t sub_100124D3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AC104, 1);
}

uint64_t sub_100124D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v30 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GeometryProxy(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_100821710);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v17 = static HorizontalAlignment.leading.getter(v15);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v18 = sub_100047110(&qword_100821718);
  sub_100124F50(a3, (uint64_t)&v17[*(int *)(v18 + 44)]);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_1007877D8, v20 + v12, v19 | 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21 + v20, v13, v10);
  swift_retain(a3);
  static TaskPriority.userInitiated.getter(v22);
  v23 = sub_100047110(&qword_100821730);
  v24 = v29;
  v25 = (char *)(v29 + *(int *)(v23 + 36));
  v26 = type metadata accessor for _TaskModifier(0);
  v27 = v30;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v25[*(int *)(v26 + 20)], v9, v30);
  *(_QWORD *)v25 = &unk_100821728;
  *((_QWORD *)v25 + 1) = v21;
  sub_100021CC0((uint64_t)v17, v24, &qword_100821710);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
  return sub_10001BE90((uint64_t)v17, &qword_100821710);
}

uint64_t sub_100124F50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t);
  __n128 v54;
  void (*v55)(char *, char *, uint64_t, __n128);
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  __n128 v79;
  unsigned int (*v80)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  void (*v98)(char *, uint64_t, __n128);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  double v107;
  char v108;
  id v109;
  __int128 v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  unint64_t v115;
  id v116;
  int v117;
  void (**v118)(char *, _QWORD, uint64_t, __n128);
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void (*v144)(uint64_t, char *, uint64_t);
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  void *v153;
  _QWORD *v154;
  void *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(char *, uint64_t);
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  void (**v171)(char *, _QWORD, uint64_t, __n128);
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  void *v199;
  char v200;
  uint64_t v201;
  _QWORD *v202;
  void (**v203)(char *, _QWORD, uint64_t, __n128);
  uint64_t v204;
  char *v205;
  unsigned __int8 v206;
  __int128 v207;
  __int128 v208;
  void *v209;
  uint64_t v210;

  v182 = a1;
  v180 = a2;
  v2 = sub_100047110(&qword_100821740);
  v3 = __chkstk_darwin(v2);
  v195 = (uint64_t)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v190 = (uint64_t)&v165 - v5;
  v172 = type metadata accessor for HeartRateConfiguration.ConfigurationType(0);
  v171 = *(void (***)(char *, _QWORD, uint64_t, __n128))(v172 - 8);
  __chkstk_darwin(v172);
  v170 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for WorkoutDetailChartView(0);
  v175 = *(_QWORD *)(v181 - 8);
  v7 = __chkstk_darwin(v181);
  v168 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v167 = (uint64_t)&v165 - v9;
  v10 = sub_100047110(&qword_1008202F0);
  v11 = __chkstk_darwin(v10);
  v174 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v176 = (uint64_t *)((char *)&v165 - v13);
  v183 = type metadata accessor for WorkoutChartViewModel(0);
  v177 = *(_QWORD *)(v183 - 8);
  v14 = __chkstk_darwin(v183);
  v169 = (uint64_t)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v173 = (uint64_t)&v165 - v16;
  v17 = sub_100047110(&qword_100820D88);
  v18 = __chkstk_darwin(v17);
  v189 = (uint64_t)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v194 = (uint64_t)&v165 - v20;
  v188 = type metadata accessor for Divider(0);
  v186 = *(_QWORD *)(v188 - 8);
  v21 = __chkstk_darwin(v188);
  v166 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v187 = (char *)&v165 - v24;
  __chkstk_darwin(v23);
  v192 = (char *)&v165 - v25;
  v26 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v26);
  v178 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100047110(&qword_100821748);
  v28 = __chkstk_darwin(v179);
  v193 = (uint64_t)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v191 = (uint64_t)&v165 - v30;
  v31 = type metadata accessor for DynamicTypeSize(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100047110(&qword_100820D90);
  v35 = *(_QWORD *)(v196 - 8);
  v36 = __chkstk_darwin(v196);
  v38 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v40 = (char *)&v165 - v39;
  v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v201 = v44;
  v202 = v46;
  v47 = sub_100038CA0();
  v201 = Text.init<A>(_:)(&v201, &type metadata for String, v47);
  v202 = v48;
  LOBYTE(v203) = v49 & 1;
  v204 = v50;
  v51 = enum case for DynamicTypeSize.large(_:);
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 104);
  v52(v34, enum case for DynamicTypeSize.large(_:), v31);
  View.dynamicTypeSize(_:)(v34, &type metadata for Text, &protocol witness table for Text);
  v53 = *(void (**)(char *, uint64_t))(v32 + 8);
  v53(v34, v31);
  sub_1000E4458(v201, (uint64_t)v202, (char)v203);
  v54 = swift_bridgeObjectRelease(v204);
  v55 = *(void (**)(char *, char *, uint64_t, __n128))(v35 + 32);
  v184 = v40;
  v55(v40, v38, v196, v54);
  KeyPath = swift_getKeyPath(&unk_100625BD0);
  v57 = swift_getKeyPath(&unk_100625BF8);
  v58 = v182;
  swift_retain(v182);
  static Published.subscript.getter(&v201, v59, KeyPath, v57);
  swift_release(v58);
  swift_release(KeyPath);
  swift_release(v57);
  v60 = v178;
  AttributedString.init(_:)(v201);
  v201 = Text.init(_:)(v60);
  v202 = v61;
  LOBYTE(v203) = v62 & 1;
  v204 = v63;
  v52(v34, v51, v31);
  View.dynamicTypeSize(_:)(v34, &type metadata for Text, &protocol witness table for Text);
  v53(v34, v31);
  sub_1000E4458(v201, (uint64_t)v202, (char)v203);
  v64 = swift_bridgeObjectRelease(v204);
  v65 = static Color.red.getter(v64);
  v66 = swift_getKeyPath(&unk_100625C18);
  v67 = v35;
  v68 = *(char **)(v35 + 16);
  v69 = v193;
  v70 = v196;
  v178 = v68;
  ((void (*)(uint64_t, char *, uint64_t))v68)(v193, v38, v196);
  v71 = (uint64_t *)(v69 + *(int *)(v179 + 36));
  *v71 = v66;
  v71[1] = v65;
  v72 = *(void (**)(char *, uint64_t))(v67 + 8);
  v185 = v38;
  v179 = (uint64_t)v72;
  v72(v38, v70);
  v73 = v182;
  v74 = sub_100045AD4(v69, v191, &qword_100821748);
  Divider.init()(v74);
  v75 = swift_getKeyPath(&unk_100625C48);
  v76 = swift_getKeyPath(&unk_100625C70);
  swift_retain(v73);
  v77 = v176;
  static Published.subscript.getter(v176, v78, v75, v76);
  swift_release(v73);
  swift_release(v75);
  v79 = swift_release(v76);
  v80 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v177 + 48);
  if (v80(v77, 1, v183, v79) == 1)
  {
    sub_10001BE90((uint64_t)v77, &qword_1008202F0);
  }
  else
  {
    v81 = (uint64_t)v77;
    v82 = v173;
    sub_100116C08(v81, v173);
    v83 = swift_getKeyPath(&unk_100625B40);
    v84 = swift_getKeyPath(&unk_100625B68);
    swift_retain(v73);
    static Published.subscript.getter(&v201, v85, v83, v84);
    swift_release(v73);
    swift_release(v83);
    swift_release(v84);
    v86 = v201;
    if (v201)
    {
      v87 = v167;
      sub_10004F8C8(v82, v167, type metadata accessor for WorkoutChartViewModel);
      *(_QWORD *)(v87 + *(int *)(v181 + 20)) = v86;
      swift_retain(v86);
      v88 = v187;
      Divider.init()(v89);
      v177 = (uint64_t)v80;
      v90 = v168;
      sub_10004F8C8(v87, v168, type metadata accessor for WorkoutDetailChartView);
      v91 = v186;
      v92 = *(void (**)(char *, char *, uint64_t))(v186 + 16);
      v93 = v166;
      v94 = v188;
      v92(v166, v88, v188);
      v95 = v189;
      sub_10004F8C8(v90, v189, type metadata accessor for WorkoutDetailChartView);
      v96 = sub_100047110(&qword_100820DA8);
      v92((char *)(v95 + *(int *)(v96 + 48)), v93, v94);
      v97 = swift_release(v86);
      v98 = *(void (**)(char *, uint64_t, __n128))(v91 + 8);
      v98(v88, v94, v97);
      sub_100011F54(v87, type metadata accessor for WorkoutDetailChartView);
      sub_100011F54(v173, type metadata accessor for WorkoutChartViewModel);
      ((void (*)(char *, uint64_t))v98)(v93, v94);
      v99 = v90;
      v80 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t, __n128))v177;
      sub_100011F54(v99, type metadata accessor for WorkoutDetailChartView);
      v100 = sub_100047110(&qword_100820D98);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v95, 0, 1, v100);
      sub_100045AD4(v95, v194, &qword_100820D88);
      goto LABEL_7;
    }
    sub_100011F54(v82, type metadata accessor for WorkoutChartViewModel);
  }
  v101 = sub_100047110(&qword_100820D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v194, 1, 1, v101);
LABEL_7:
  v102 = swift_getKeyPath(&unk_100625C90);
  v103 = swift_getKeyPath(&unk_100625CB8);
  swift_retain(v73);
  static Published.subscript.getter(&v201, v104, v102, v103);
  swift_release(v73);
  swift_release(v102);
  v105 = swift_release(v103);
  v106 = v201;
  if (!v201)
  {
    v177 = 0;
    v176 = 0;
    v171 = 0;
    v173 = 0;
    v170 = 0;
    v117 = 254;
    goto LABEL_18;
  }
  if (*(_QWORD *)(v201 + 16))
  {
    if (*(_QWORD *)(v201 + OBJC_IVAR____TtC10FitnessApp20WorkoutHeartRateInfo_elapsedTimeInZones))
    {
      v107 = COERCE_DOUBLE(sub_100293410());
      if ((v108 & 1) == 0)
      {
        v105.n128_f64[0] = v107;
        if (v107 > 0.0)
        {
          v109 = objc_msgSend(*(id *)(v73 + 64), "fitnessUIFormattingManager", swift_retain(v106).n128_f64[0]);
          sub_10013AEA4(v106, v109, &v207);
          v110 = v207;
          v111 = (void *)v208;
          v112 = v209;
          v210 = *((_QWORD *)&v208 + 1);
          v197 = v207;
          v198 = v208;
          v199 = v209;
          v200 = 0;
          swift_retain(v207);
          v113 = *((id *)&v110 + 1);
          v114 = v111;
          sub_100126C98(&v210);
          v115 = sub_100126C54();
          v116 = v112;
          _ConditionalContent<>.init(storage:)(&v197, &type metadata for WorkoutTimeInZonesView, &type metadata for EmptyView, v115, &protocol witness table for EmptyView);

          swift_release(v110);
          swift_release(v106);
          sub_1000478F4(&v210);

          v177 = v201;
          v176 = v202;
          v171 = v203;
          v173 = v204;
          v170 = v205;
          v117 = v206;
LABEL_18:
          LODWORD(v172) = v117;
          v126 = v181;
          v124 = v174;
          goto LABEL_21;
        }
      }
    }
  }
  v118 = v171;
  v119 = v170;
  v120 = v172;
  v171[13](v170, enum case for HeartRateConfiguration.ConfigurationType.automatic(_:), v172, v105);
  v121 = sub_100126C0C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v201, v120, v121);
  dispatch thunk of RawRepresentable.rawValue.getter(&v197, v120, v121);
  v122 = v201;
  v123 = v197;
  ((void (*)(char *, uint64_t))v118[1])(v119, v120);
  if (v122 != v123)
  {
    swift_release(v106);
    v177 = 0;
    v176 = 0;
    v171 = 0;
    v173 = 0;
    v170 = 0;
    v117 = 255;
    goto LABEL_18;
  }
  v124 = v174;
  if (*(_QWORD *)(v106 + 16))
  {
    swift_release(v106);
    v177 = 0;
    v176 = 0;
    v171 = 0;
    v173 = 0;
    v170 = 0;
    v125 = 255;
  }
  else
  {
    v199 = 0;
    v197 = 0u;
    v198 = 0u;
    v200 = 1;
    v127 = sub_100126C54();
    _ConditionalContent<>.init(storage:)(&v197, &type metadata for WorkoutTimeInZonesView, &type metadata for EmptyView, v127, &protocol witness table for EmptyView);
    swift_release(v106);
    v177 = v201;
    v176 = v202;
    v171 = v203;
    v173 = v204;
    v170 = v205;
    v125 = v206;
  }
  LODWORD(v172) = v125;
  v126 = v181;
LABEL_21:
  v128 = swift_getKeyPath(&unk_100625CD8);
  v129 = swift_getKeyPath(&unk_100625D00);
  swift_retain(v73);
  static Published.subscript.getter(v124, v130, v128, v129);
  swift_release(v73);
  swift_release(v128);
  v131 = swift_release(v129);
  if (v80(v124, 1, v183, v131) == 1)
  {
    sub_10001BE90((uint64_t)v124, &qword_1008202F0);
LABEL_26:
    v140 = 1;
    goto LABEL_27;
  }
  v132 = (uint64_t)v124;
  v133 = v169;
  sub_100116C08(v132, v169);
  v134 = swift_getKeyPath(&unk_100625B88);
  v135 = swift_getKeyPath(&unk_100625BB0);
  swift_retain(v73);
  static Published.subscript.getter(&v201, v136, v134, v135);
  swift_release(v73);
  swift_release(v134);
  swift_release(v135);
  v137 = v201;
  if (!v201)
  {
    sub_100011F54(v133, type metadata accessor for WorkoutChartViewModel);
    goto LABEL_26;
  }
  v138 = v133;
  v139 = v190;
  sub_100116C08(v138, v190);
  v140 = 0;
  *(_QWORD *)(v139 + *(int *)(v126 + 20)) = v137;
LABEL_27:
  v141 = v190;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 56))(v190, v140, 1, v126);
  v142 = v185;
  v143 = v196;
  v144 = (void (*)(uint64_t, char *, uint64_t))v178;
  ((void (*)(char *, char *, uint64_t))v178)(v185, v184, v196);
  v145 = v193;
  sub_100021CC0(v191, v193, &qword_100821748);
  v146 = *(void (**)(char *, char *, uint64_t))(v186 + 16);
  v147 = v187;
  v148 = v188;
  v146(v187, v192, v188);
  v149 = v189;
  sub_100021CC0(v194, v189, &qword_100820D88);
  sub_100021CC0(v141, v195, &qword_100821740);
  LOBYTE(v201) = 1;
  v150 = v180;
  v144(v180, v142, v143);
  v151 = (int *)sub_100047110(&qword_100821750);
  sub_100021CC0(v145, v150 + v151[12], &qword_100821748);
  v146((char *)(v150 + v151[16]), v147, v148);
  sub_100021CC0(v149, v150 + v151[20], &qword_100820D88);
  v152 = v150 + v151[24];
  v153 = (void *)v177;
  v154 = v176;
  *(_QWORD *)v152 = v177;
  *(_QWORD *)(v152 + 8) = v154;
  v155 = v171;
  v156 = v173;
  *(_QWORD *)(v152 + 16) = v171;
  *(_QWORD *)(v152 + 24) = v156;
  v157 = v170;
  *(_QWORD *)(v152 + 32) = v170;
  LOBYTE(v143) = v172;
  *(_BYTE *)(v152 + 40) = v172;
  sub_100021CC0(v195, v150 + v151[28], &qword_100821740);
  v158 = v150 + v151[32];
  v159 = v201;
  *(_QWORD *)v158 = 0;
  *(_BYTE *)(v158 + 8) = v159;
  sub_100126B04(v153, v154, v155, v156, v157, v143);
  sub_10001BE90(v190, &qword_100821740);
  sub_10001BE90(v194, &qword_100820D88);
  v160 = *(void (**)(char *, uint64_t))(v186 + 8);
  v161 = v188;
  v160(v192, v188);
  sub_10001BE90(v191, &qword_100821748);
  v162 = v196;
  v163 = (uint64_t (*)(char *, uint64_t))v179;
  ((void (*)(char *, uint64_t))v179)(v184, v196);
  sub_10001BE90(v195, &qword_100821740);
  sub_100126B88((uint64_t)v153, v154, v155, v156, v157, v143);
  sub_10001BE90(v189, &qword_100820D88);
  v160(v187, v161);
  sub_10001BE90(v193, &qword_100821748);
  return v163(v185, v162);
}

uint64_t sub_100126094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = a3;
  v4 = type metadata accessor for MainActor(0);
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[7] = v5;
  v3[8] = v6;
  return swift_task_switch(sub_100126100, v5, v6);
}

uint64_t sub_100126100()
{
  uint64_t v0;

  swift_retain(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_10012613C, 0, 0);
}

uint64_t sub_10012613C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1001261B0;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001261B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_100126204, 0, 0);
}

uint64_t sub_100126204()
{
  _QWORD *v0;

  swift_release(v0[4]);
  return swift_task_switch(sub_10012623C, v0[7], v0[8]);
}

uint64_t sub_10012623C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  KeyPath = swift_getKeyPath(&unk_100625B40);
  v3 = swift_getKeyPath(&unk_100625B68);
  v4 = swift_retain(v1);
  static Published.subscript.getter((_QWORD *)(v0 + 16), v4, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v5 = swift_release(v1);
  v6 = *(_QWORD *)(v0 + 16);
  if (v6)
  {
    v7 = GeometryProxy.size.getter(v5);
    v8 = v6 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_viewWidth;
    *(double *)v8 = v7 + -2.0;
    *(_BYTE *)(v8 + 8) = 0;
    swift_release(v6);
  }
  v9 = *(_QWORD *)(v0 + 32);
  v10 = swift_getKeyPath(&unk_100625B88);
  v11 = swift_getKeyPath(&unk_100625BB0);
  v12 = swift_retain(v9);
  static Published.subscript.getter((_QWORD *)(v0 + 24), v12, v10, v11);
  swift_release(v11);
  swift_release(v10);
  v13 = swift_release(v9);
  v14 = *(_QWORD *)(v0 + 24);
  if (v14)
  {
    v15 = GeometryProxy.size.getter(v13);
    v16 = v14 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_viewWidth;
    *(double *)v16 = v15 + -2.0;
    *(_BYTE *)(v16 + 8) = 0;
    swift_release(v14);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100126394@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double result;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject(&unk_1007877B0, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain(v3);
  v7 = static Edge.Set.all.getter(v6);
  *(_QWORD *)a1 = sub_10012642C;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = xmmword_1006251F0;
  *(_OWORD *)(a1 + 40) = xmmword_1006251F0;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_100126408()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012642C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100124D4C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100126434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001264A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = v0 + ((v2 + 32) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_100821724);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000DA0E4;
  return sub_100126094(v3, v4, v5);
}

uint64_t sub_100126520(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10082054C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000EA380;
  return sub_100101CEC(a1, a2, v2);
}

uint64_t sub_100126584@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100126748(a1, (uint64_t)&unk_100625C48, (uint64_t)&unk_100625C70, a2);
}

uint64_t sub_100126598(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001267C0(a1, a2, a3, a4, (uint64_t)&unk_100625C48, (uint64_t)&unk_100625C70);
}

uint64_t sub_1001265AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625B40, (uint64_t)&unk_100625B68, a2);
}

uint64_t sub_1001265C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625B40, (uint64_t)&unk_100625B68, a2);
}

uint64_t sub_1001265E4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625B40, (uint64_t)&unk_100625B68);
}

uint64_t sub_1001265F8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625B40, (uint64_t)&unk_100625B68);
}

uint64_t sub_10012661C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100625BD0);
  v5 = swift_getKeyPath(&unk_100625BF8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100126698(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100625BD0);
  v5 = swift_getKeyPath(&unk_100625BF8);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_10012670C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625C90, (uint64_t)&unk_100625CB8, a2);
}

uint64_t sub_100126720(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625C90, (uint64_t)&unk_100625CB8);
}

uint64_t sub_100126734@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100126748(a1, (uint64_t)&unk_100625CD8, (uint64_t)&unk_100625D00, a2);
}

uint64_t sub_100126748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(KeyPath);
  return swift_release(v8);
}

uint64_t sub_1001267AC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001267C0(a1, a2, a3, a4, (uint64_t)&unk_100625CD8, (uint64_t)&unk_100625D00);
}

uint64_t sub_1001267C0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v20;

  v10 = sub_100047110(&qword_1008202F0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  sub_100021CC0(a1, (uint64_t)&v20 - v14, &qword_1008202F0);
  v16 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v18 = swift_getKeyPath(a6);
  sub_100021CC0((uint64_t)v15, (uint64_t)v13, &qword_1008202F0);
  swift_retain(v16);
  static Published.subscript.setter(v13, v16, KeyPath, v18);
  return sub_10001BE90((uint64_t)v15, &qword_1008202F0);
}

uint64_t sub_1001268C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625B88, (uint64_t)&unk_100625BB0, a2);
}

uint64_t sub_1001268D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10012694C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625B88, (uint64_t)&unk_100625BB0, a2);
}

uint64_t sub_100126970(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625B88, (uint64_t)&unk_100625BB0);
}

uint64_t sub_100126984(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_1001269F8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625B88, (uint64_t)&unk_100625BB0);
}

uint64_t sub_100126A2C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100126748(a1, (uint64_t)&unk_100625C48, (uint64_t)&unk_100625C70, a2);
}

uint64_t sub_100126A50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001267C0(a1, a2, a3, a4, (uint64_t)&unk_100625C48, (uint64_t)&unk_100625C70);
}

uint64_t sub_100126A74@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1001268D4(a1, (uint64_t)&unk_100625C90, (uint64_t)&unk_100625CB8, a2);
}

uint64_t sub_100126A98(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100126984(a1, a2, a3, a4, (uint64_t)&unk_100625C90, (uint64_t)&unk_100625CB8);
}

uint64_t sub_100126ABC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100126748(a1, (uint64_t)&unk_100625CD8, (uint64_t)&unk_100625D00, a2);
}

uint64_t sub_100126AE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001267C0(a1, a2, a3, a4, (uint64_t)&unk_100625CD8, (uint64_t)&unk_100625D00);
}

id sub_100126B04(id result, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 254)
    return sub_100126B18(result, a2, a3, a4, a5, a6);
  return result;
}

id sub_100126B18(id result, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 255)
    return sub_100126B30(result, a2, a3, a4, a5, a6 & 1);
  return result;
}

id sub_100126B30(id result, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  id v9;
  id v10;

  if ((a6 & 1) == 0)
  {
    swift_retain(result);
    v9 = a2;
    v10 = a3;
    swift_bridgeObjectRetain(a4);
    return a5;
  }
  return result;
}

void sub_100126B88(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 254)
    sub_100126B9C(a1, a2, a3, a4, a5, a6);
}

void sub_100126B9C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 255)
    sub_100126BB4(a1, a2, a3, a4, a5, a6 & 1);
}

void sub_100126BB4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    swift_release(a1);

    swift_bridgeObjectRelease(a4);
  }
}

unint64_t sub_100126C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821758;
  if (!qword_100821758)
  {
    v1 = type metadata accessor for HeartRateConfiguration.ConfigurationType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HeartRateConfiguration.ConfigurationType, v1);
    atomic_store(result, (unint64_t *)&qword_100821758);
  }
  return result;
}

unint64_t sub_100126C54()
{
  unint64_t result;

  result = qword_100821760;
  if (!qword_100821760)
  {
    result = swift_getWitnessTable(&unk_1006263D8, &type metadata for WorkoutTimeInZonesView);
    atomic_store(result, (unint64_t *)&qword_100821760);
  }
  return result;
}

_QWORD *sub_100126C98(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

unint64_t sub_100126CC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821768;
  if (!qword_100821768)
  {
    v1 = sub_100007050(&qword_100821770);
    sub_100126D30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100821768);
  }
  return result;
}

unint64_t sub_100126D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821778;
  if (!qword_100821778)
  {
    v1 = sub_100007050(&qword_100821780);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100821778);
  }
  return result;
}

uint64_t sub_100126D80()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100126DA8
                                                            + 4 * byte_100625D20[*(unsigned __int8 *)(v0 + 43)]))(1702260557, 0xE400000000000000);
}

uint64_t sub_100126DA8()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 41) & 1) != 0)
    return 1819045714;
  else
    return 0x646E617453;
}

uint64_t sub_100126DD8()
{
  return 0x65636E6174736944;
}

uint64_t sub_100126DF0()
{
  return 0x50676E696B6C6157;
}

uint64_t sub_100126ECC()
{
  return 0x4373746867696C46;
}

void sub_100126EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  Swift::String v47;
  _QWORD v48[8];
  uint64_t v49;
  void *v50;

  v6 = v5;
  v46 = a4;
  v11 = sub_100047110((uint64_t *)&unk_10082ED90);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a5;
  v14 = *(_QWORD *)(a5 + 8);
  v15 = sub_100128DBC(a1, a2, v14);
  v17 = v16;
  v49 = v15;
  v50 = v16;
  strcpy((char *)v48, "%#@num_days@");
  BYTE5(v48[1]) = 0;
  HIWORD(v48[1]) = -5120;
  v18 = sub_100038CA0();
  v19 = StringProtocol.contains<A>(_:)(v48, &type metadata for String, &type metadata for String, v18, v18);
  v44 = a3;
  if ((v19 & 1) != 0)
  {
    v20 = sub_100047110((uint64_t *)&unk_100827460);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100622F90;
    *(_QWORD *)(v21 + 56) = &type metadata for Int;
    *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v21 + 32) = v14;
    v15 = String.init(format:_:)(v15, v17, v21, (__n128)xmmword_100622F90);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    v17 = v23;
  }
  v24 = (uint64_t)v46;
  v25 = (void *)v46[1];
  if (v25)
  {
    v43 = v6;
    v26 = *v46;
    v49 = v15;
    v50 = v17;
    v48[0] = 0xD000000000000015;
    v48[1] = 0x8000000100689E30;
    swift_bridgeObjectRetain(v25);
    v27 = StringProtocol.contains<A>(_:)(v48, &type metadata for String, &type metadata for String, v18, v18);
    if ((v27 & 1) != 0)
    {
      static Locale.current.getter(v27);
      v28 = type metadata accessor for Locale(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
      v29 = sub_100047110((uint64_t *)&unk_100827460);
      v30 = swift_allocObject(v29, 72, 7);
      *(_OWORD *)(v30 + 16) = xmmword_100622F90;
      *(_QWORD *)(v30 + 56) = &type metadata for String;
      *(_QWORD *)(v30 + 64) = sub_100038CF8();
      *(_QWORD *)(v30 + 32) = v26;
      *(_QWORD *)(v30 + 40) = v25;
      v31 = String.init(format:locale:arguments:)(0xD000000000000010, 0x8000000100689E50, v13, v30);
      v33 = v32;
      swift_bridgeObjectRelease(v30);
      sub_100128D7C((uint64_t)v13);
      v49 = v15;
      v50 = v17;
      v48[0] = 0xD000000000000015;
      v48[1] = 0x8000000100689E30;
      v47._countAndFlagsBits = v31;
      v47._object = v33;
      v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v48, &v47, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
      v35 = v34;
      swift_bridgeObjectRelease(v17);
      v36 = v33;
    }
    else
    {
      v49 = v15;
      v50 = v17;
      strcpy((char *)v48, "{{username}}");
      BYTE5(v48[1]) = 0;
      HIWORD(v48[1]) = -5120;
      v47._countAndFlagsBits = v26;
      v47._object = v25;
      v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v48, &v47, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
      v35 = v37;
      sub_100128D54(v24);
      v36 = v17;
    }
    swift_bridgeObjectRelease(v36);
    v17 = v35;
    v6 = v43;
  }
  v49 = v15;
  v50 = v17;
  strcpy((char *)v48, "{{metric}}");
  BYTE3(v48[1]) = 0;
  HIDWORD(v48[1]) = -369098752;
  v38 = v44;
  sub_1004E3DDC(*(_BYTE *)(v6 + 41) & 1, v44);
  v40 = v39;
  v41 = String.lowercased()();
  swift_bridgeObjectRelease(v40);
  v47 = v41;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v48, &v47, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v41._object);
  __asm { BR              X10 }
}

uint64_t sub_100127378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  double v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v7 = *(double *)(*(_QWORD *)(v6 - 360) + 24);
  if (fabs(v7) >= 2.22044605e-16)
  {
    *(_QWORD *)(v6 - 232) = v0;
    *(_QWORD *)(v6 - 224) = v2;
    *(_QWORD *)(v6 - 296) = v5 + 5;
    *(_QWORD *)(v6 - 288) = 0x8000000100689DB0;
    v8 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
    objc_msgSend(v8, "setAllowedUnits:", 192);
    objc_msgSend(v8, "setUnitsStyle:", 3);
    v9 = objc_msgSend(*(id *)(v3 + 48), "unitManager");
    if (!v9)
    {
      __break(1u);
      JUMPOUT(0x100127CE8);
    }
    v10 = v9;
    v11 = objc_msgSend(v9, "userDistanceUnitForDistanceType:", 1);

    v12 = v7 / 1.60934;
    if (v11 != (id)3)
      v12 = v7;
    v13 = objc_msgSend(v8, "stringFromTimeInterval:", 3600.0 / v12);
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {

      v15 = v5 + 4;
      v17 = 0x8000000100689DD0;
    }
    *(_QWORD *)(v6 - 312) = v15;
    *(_QWORD *)(v6 - 304) = v17;
    v0 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v6 - 296, v6 - 312, 0, 0, 0, 1, v4, v4, v4, v1, v1, v1);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v17);
  }
  return v0;
}

void sub_100127D24(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::String v32;
  _QWORD v33[8];
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v10 = sub_100047110((uint64_t *)&unk_10082ED90);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)a4[1];
  v29 = 0xD000000000000015;
  if (v13)
  {
    v31 = v4;
    v14 = *a4;
    v34 = a1;
    v35 = a2;
    v33[0] = 0xD000000000000015;
    v33[1] = 0x8000000100689E30;
    v15 = sub_100038CA0();
    swift_bridgeObjectRetain(v13);
    v30 = a4;
    v16 = StringProtocol.contains<A>(_:)(v33, &type metadata for String, &type metadata for String, v15, v15);
    if ((v16 & 1) != 0)
    {
      static Locale.current.getter(v16);
      v17 = type metadata accessor for Locale(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 0, 1, v17);
      v18 = sub_100047110((uint64_t *)&unk_100827460);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = xmmword_100622F90;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      *(_QWORD *)(v19 + 64) = sub_100038CF8();
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v13;
      v20 = String.init(format:locale:arguments:)(0xD000000000000010, 0x8000000100689E50, v12, v19);
      v22 = v21;
      swift_bridgeObjectRelease(v19);
      sub_100128D7C((uint64_t)v12);
      v34 = a1;
      v35 = a2;
      v33[0] = 0xD000000000000015;
      v33[1] = 0x8000000100689E30;
      v32._countAndFlagsBits = v20;
      v32._object = v22;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, &v32, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v15, v15, v15);
      a2 = v23;
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      v34 = a1;
      v35 = a2;
      strcpy((char *)v33, "{{username}}");
      BYTE5(v33[1]) = 0;
      HIWORD(v33[1]) = -5120;
      v32._countAndFlagsBits = v14;
      v32._object = v13;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, &v32, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v15, v15, v15);
      a2 = v24;
      sub_100128D54((uint64_t)v30);
    }
    v5 = v31;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  v34 = a1;
  v35 = a2;
  strcpy((char *)v33, "{{metric}}");
  BYTE3(v33[1]) = 0;
  HIDWORD(v33[1]) = -369098752;
  sub_1004E3DDC(*(_BYTE *)(v5 + 41) & 1, a3);
  v26 = v25;
  v27 = String.lowercased()();
  swift_bridgeObjectRelease(v26);
  v32 = v27;
  v28 = sub_100038CA0();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, &v32, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v28, v28, v28);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v27._object);
  __asm { BR              X10 }
}

uint64_t sub_1001280E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (fabs(v6) >= 2.22044605e-16)
  {
    *(_QWORD *)(v5 - 232) = v0;
    *(_QWORD *)(v5 - 224) = v2;
    *(_QWORD *)(v5 - 296) = 0xD00000000000001ALL;
    *(_QWORD *)(v5 - 288) = 0x8000000100689DB0;
    v7 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
    objc_msgSend(v7, "setAllowedUnits:", 192);
    objc_msgSend(v7, "setUnitsStyle:", 3);
    v8 = objc_msgSend(*(id *)(v3 + 48), "unitManager");
    if (!v8)
    {
      __break(1u);
      JUMPOUT(0x100128558);
    }
    v9 = v8;
    v10 = objc_msgSend(v8, "userDistanceUnitForDistanceType:", 1);

    v11 = v6 / 1.60934;
    if (v10 != (id)3)
      v11 = v6;
    v12 = objc_msgSend(v7, "stringFromTimeInterval:", 3600.0 / v11);
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {

      v14 = 0xD000000000000019;
      v16 = 0x8000000100689DD0;
    }
    *(_QWORD *)(v5 - 312) = v14;
    *(_QWORD *)(v5 - 304) = v16;
    v0 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v5 - 296, v5 - 312, 0, 0, 0, 1, v4, v4, v4, v1, v1, v1);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v16);
  }
  return v0;
}

uint64_t sub_100128580()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  id v7;
  unsigned int v8;

  result = (uint64_t)objc_msgSend(*(id *)(v0 + 48), "unitManager");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "userActiveEnergyBurnedUnit");

    v4 = (void *)objc_opt_self(HKUnit);
    v5 = objc_msgSend(v4, "jouleUnitWithMetricPrefix:", 9);
    v6 = objc_msgSend(v3, "isEqual:", v5);

    if (v6)
    {

      return 19019;
    }
    else
    {
      v7 = objc_msgSend(v4, "kilocalorieUnit");
      v8 = objc_msgSend(v3, "isEqual:", v7);

      if (v8)
        return 1279345483;
      else
        return 4997443;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001286A0()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  id v3;
  id v4;
  unsigned int v5;

  result = (uint64_t)objc_msgSend(*(id *)(v0 + 48), "unitManager");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "userDistanceWalkingRunningHKUnit");

    v4 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnitWithMetricPrefix:", 9);
    v5 = objc_msgSend(v3, "isEqual:", v4);

    if (v5)
      return 19787;
    else
      return 18765;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10012875C(void *a1)
{
  uint64_t v1;
  id v3;
  double v4;
  double v5;
  void *v6;
  id result;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  v3 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
  objc_msgSend(a1, "doubleValueForUnit:", v3);
  v5 = v4;

  v6 = *(void **)(v1 + 48);
  result = objc_msgSend(v6, "unitManager");
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, "userDistanceUnitForDistanceType:", 1);

    result = objc_msgSend(v6, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", v9, 2, 2, v5);
    if (result)
    {
      v10 = result;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (id)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100128854(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  Swift::String v7;
  uint64_t countAndFlagsBits;
  void *object;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v33;

  v7._countAndFlagsBits = sub_100126D80();
  countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  v12.value._countAndFlagsBits = 0x6F4373646E657254;
  v12.value._object = (void *)0xEF2D676E69686361;
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  v33._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v33);
  swift_bridgeObjectRelease(0xEF2D676E69686361);

  v15 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
  v16 = (void *)HKLogActivity;
  v17 = sub_100047110((uint64_t *)&unk_100827460);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100622F90;
  v19 = v16;
  v20._countAndFlagsBits = countAndFlagsBits;
  v20._object = object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v21 = sub_100038CF8();
  *(_QWORD *)(v18 + 64) = v21;
  *(_QWORD *)(v18 + 32) = 0x6F4373646E657254;
  *(_QWORD *)(v18 + 40) = 0xEF2D676E69686361;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v19, "[#trends] Resource: %{public}@", 30, 2, v18);

  v22 = swift_bridgeObjectRelease(v18);
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = (void *)HKLogActivity;
  v25 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100622F90;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = v21;
  *(_QWORD *)(v25 + 32) = a1;
  *(_QWORD *)(v25 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v26 = v24;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v26, "[#trends] Coaching lookup key: %{public}@", 41, 2, v25);

  swift_bridgeObjectRelease(v25);
  sub_100126EF0(v14._countAndFlagsBits, (uint64_t)v14._object, a3, a5, a4);
  v28 = v27;
  swift_bridgeObjectRelease(v14._object);
  return v28;
}

uint64_t sub_100128ACC(uint64_t a1, void *a2, char a3, uint64_t *a4)
{
  Swift::String v6;
  uint64_t countAndFlagsBits;
  void *object;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  __n128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v32;

  v6._countAndFlagsBits = sub_100126D80();
  countAndFlagsBits = v6._countAndFlagsBits;
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v32._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  v11.value._countAndFlagsBits = 0x6F4373646E657254;
  v11.value._object = (void *)0xEF2D676E69686361;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  v32._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v32);
  swift_bridgeObjectRelease(0xEF2D676E69686361);

  v15 = static os_log_type_t.debug.getter(v14);
  v16 = (void *)HKLogActivity;
  v17 = sub_100047110((uint64_t *)&unk_100827460);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100622F90;
  v19 = v16;
  v20._countAndFlagsBits = countAndFlagsBits;
  v20._object = object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v21 = sub_100038CF8();
  *(_QWORD *)(v18 + 64) = v21;
  *(_QWORD *)(v18 + 32) = 0x6F4373646E657254;
  *(_QWORD *)(v18 + 40) = 0xEF2D676E69686361;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v19, "[#trends] Resource: %{public}@", 30, 2, v18);

  v22 = swift_bridgeObjectRelease(v18);
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = (void *)HKLogActivity;
  v25 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100622F90;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = v21;
  *(_QWORD *)(v25 + 32) = a1;
  *(_QWORD *)(v25 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v26 = v24;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v26, "[#trends] Coaching lookup key: %{public}@", 41, 2, v25);

  swift_bridgeObjectRelease(v25);
  sub_100127D24(v13._countAndFlagsBits, (uint64_t)v13._object, a3, a4);
  v28 = v27;
  swift_bridgeObjectRelease(v13._object);
  return v28;
}

uint64_t sub_100128D54(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100128D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110((uint64_t *)&unk_10082ED90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100128DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  __n128 v9;
  _WORD v10[8];
  uint64_t v11;
  uint64_t v12;

  v5 = a1;
  v11 = a1;
  v12 = a2;
  strcpy((char *)v10, "%#@num_weeks@");
  v10[7] = -4864;
  v6 = sub_100038CA0();
  if ((StringProtocol.contains<A>(_:)(v10, &type metadata for String, &type metadata for String, v6, v6) & 1) == 0)
  {
    swift_bridgeObjectRetain(a2);
    return v5;
  }
  v7 = sub_100047110((uint64_t *)&unk_100827460);
  result = swift_allocObject(v7, 72, 7);
  v9.n128_u64[1] = 2;
  *(_OWORD *)(result + 16) = xmmword_100622F90;
  v9.n128_f64[0] = ceil((double)a3 / 7.0);
  if ((~v9.n128_u64[0] & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9.n128_f64[0] <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v9.n128_f64[0] < 9.22337204e18)
  {
    *(_QWORD *)(result + 56) = &type metadata for Int;
    *(_QWORD *)(result + 64) = &protocol witness table for Int;
    *(_QWORD *)(result + 32) = (uint64_t)v9.n128_f64[0];
    return String.init(format:_:)(v5, a2, result, v9);
  }
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *sub_100128EFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1001214E0(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v7 = MindfulnessSessionViewModel.duration.getter();

      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_1001214E0(v8 > 1, v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      *(double *)&_swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_100129054(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = _swiftEmptyArrayStorage;
    if (!v7)
      return (uint64_t)v8;
    v25 = _swiftEmptyArrayStorage;
    result = sub_1001214C4(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v10 = 0;
    v8 = v25;
    v20[1] = v2;
    v21 = a1 & 0xC000000000000001;
    v22 = a1;
    while (v7 != v10)
    {
      if (v21)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v13 = MindfulnessSessionViewModel.uuid.getter();
      v14 = UUID.uuidString.getter(v13);
      v2 = v15;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v24);

      v25 = v8;
      v17 = v8[2];
      v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001214C4(v16 > 1, v17 + 1, 1);
        v8 = v25;
      }
      ++v10;
      v8[2] = v17 + 1;
      v18 = &v8[2 * v17];
      v18[4] = v14;
      v18[5] = v2;
      a1 = v22;
      if (v7 == v10)
        return (uint64_t)v8;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

void sub_10012921C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  char *v6;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  objc_class *v23;
  id v24;
  void *v25;
  char *v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t ObjCClassFromMetadata;
  NSString v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  id v59;
  id v62;
  _QWORD aBlock[5];
  uint64_t v64;
  objc_super v65;

  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource] = 0;
  v11 = OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers] = _swiftEmptyArrayStorage;
  v12 = v6;
  swift_bridgeObjectRetain(a1);
  v14 = sub_10012E45C(v13);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain_n(v14, 2);
  v15 = sub_100295E78(v14);
  swift_bridgeObjectRelease(v14);
  aBlock[0] = v15;
  sub_10012C118(aBlock);
  swift_bridgeObjectRelease(v14);
  v16 = aBlock[0];
  swift_bridgeObjectRetain(v14);
  sub_10012E8C8(_swiftEmptyArrayStorage, v16, (uint64_t)v14);
  v18 = v17;
  swift_bridgeObjectRelease(a1);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v14, 2);
  v19 = *(_QWORD *)&v6[v11];
  *(_QWORD *)&v6[v11] = v18;
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataProvider] = a2;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext] = a3;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fiuiFormattingManager] = a4;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_healthStore] = a5;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager] = a6;
  v20 = a2;
  v59 = a3;
  v21 = a4;
  v22 = a5;
  v62 = a6;

  v23 = (objc_class *)type metadata accessor for MindfulnessSessionListViewController();
  v65.receiver = v12;
  v65.super_class = v23;
  v24 = objc_msgSendSuper2(&v65, "initWithNibName:bundle:", 0, 0);
  v25 = (void *)objc_opt_self(NSBundle);
  v26 = (char *)v24;
  v27 = objc_msgSend(v25, "mainBundle");
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "localizedStringForKey:value:table:", v28, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v31 = v30;

  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v26, "setTitle:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

  v33 = objc_msgSend(v26, "tableView");
  if (!v33)
  {
    __break(1u);
    goto LABEL_9;
  }
  v34 = v33;
  objc_msgSend(v33, "setSectionHeaderTopPadding:", 0.0);

  v35 = objc_msgSend(v26, "tableView");
  if (!v35)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v36 = v35;
  objc_msgSend(v35, "setSeparatorStyle:", 0);

  v37 = swift_allocObject(&unk_1007878C0, 24, 7);
  swift_unknownObjectWeakInit(v37 + 16, v26);
  v38 = objc_msgSend(v26, "tableView");
  if (!v38)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v39 = v38;
  v40 = objc_allocWithZone((Class)UITableViewDiffableDataSource);
  aBlock[4] = sub_10012F3B4;
  v64 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002C4250;
  aBlock[3] = &unk_100787AB8;
  v41 = _Block_copy(aBlock);
  v42 = objc_msgSend(v40, "initWithTableView:cellProvider:", v39, v41, swift_retain(v37).n128_f64[0]);

  _Block_release(v41);
  swift_release(v64);
  v43 = *(void **)&v26[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource];
  *(_QWORD *)&v26[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource] = v42;

  v44 = objc_msgSend(v26, "tableView");
  if (!v44)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v45 = v44;
  v46 = sub_10001E724(0, &qword_100821820, off_1007765F8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v46);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "registerClass:forHeaderFooterViewReuseIdentifier:", ObjCClassFromMetadata, v48);

  v49 = objc_msgSend(v26, "tableView");
  if (!v49)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v50 = v49;
  v51 = sub_10001E724(0, &qword_100821828, off_1007765F0);
  v52 = swift_getObjCClassFromMetadata(v51);
  v53 = String._bridgeToObjectiveC()();
  objc_msgSend(v50, "registerClass:forCellReuseIdentifier:", v52, v53);

  v54 = objc_msgSend(v26, "tableView");
  if (v54)
  {
    v55 = v54;
    v56 = type metadata accessor for MindfulnessSessionListTableViewCell();
    v57 = swift_getObjCClassFromMetadata(v56);
    v58 = String._bridgeToObjectiveC()();
    objc_msgSend(v55, "registerClass:forCellReuseIdentifier:", v57, v58);

    sub_100129EB4();
    sub_100129A20();
    swift_release(v37);

    return;
  }
LABEL_13:
  __break(1u);
  swift_release(aBlock[0]);
  __break(1u);
}

id sub_100129854()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  objc_super v10;
  _QWORD v11[3];
  uint64_t v12;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (void *)objc_opt_self(NSNotificationCenter);
    v4 = v1 + 32;
    swift_bridgeObjectRetain_n(v1, 2);
    do
    {
      sub_10003E9BC(v4, (uint64_t)v11);
      v5 = objc_msgSend(v3, "defaultCenter");
      v6 = v12;
      v7 = sub_100016804(v11, v12);
      v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v6);
      objc_msgSend(v5, "removeObserver:", v8);

      swift_unknownObjectRelease(v8);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v11);
      v4 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(v1, 2);
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for MindfulnessSessionListViewController();
  return objc_msgSendSuper2(&v10, "dealloc");
}

void sub_100129A20()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  void (*v21)(uint64_t);
  uint64_t v22;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  v3 = (void *)objc_opt_self(NSOperationQueue);
  v4 = objc_msgSend(v3, "mainQueue");
  v5 = swift_allocObject(&unk_1007878C0, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v21 = sub_10012EB98;
  v22 = v5;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_1000398D4;
  v20 = &unk_100787928;
  v6 = _Block_copy(&v17);
  v7 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", UIApplicationSignificantTimeChangeNotification, 0, v4, v6, swift_release(v22).n128_f64[0]);
  _Block_release(v6);

  v8 = objc_msgSend(v1, "defaultCenter");
  v9 = kFIMindfulnessSessionDataProviderDidUpdateNotification;
  v10 = objc_msgSend(v3, "mainQueue");
  v11 = swift_allocObject(&unk_1007878C0, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v0);
  v21 = sub_10012EBA0;
  v22 = v11;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_1000398D4;
  v20 = &unk_100787950;
  v12 = _Block_copy(&v17);
  v13 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", v9, 0, v10, v12, swift_release(v22).n128_f64[0]);
  _Block_release(v12);

  v14 = sub_100047110(&qword_10082CEC0);
  v15 = swift_allocObject(v14, 96, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v15 + 56) = swift_getObjectType(v7);
  *(_QWORD *)(v15 + 32) = v7;
  *(_QWORD *)(v15 + 88) = swift_getObjectType(v13);
  *(_QWORD *)(v15 + 64) = v13;
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers) = v15;
  swift_bridgeObjectRelease(v16);
}

void sub_100129CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *Strong;
  void *v6;
  id v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter();
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "MindfulnessSessionListViewController did receive significantTimeChangeNotification notification", 95, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v2, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = Strong;
    v7 = objc_msgSend(Strong, "tableView");

    if (v7)
    {
      objc_msgSend(v7, "reloadData");

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100129D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD aBlock[5];
  uint64_t v13;
  char v14[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "MindfulnessSessionListViewController did receive FIMindfulnessSessionDataProviderDidUpdate notification", 103, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v2, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(void **)(Strong + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataProvider);
    v8 = swift_allocObject(&unk_100787988, 24, 7);
    *(_QWORD *)(v8 + 16) = v6;
    aBlock[4] = sub_10012EBCC;
    v13 = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000197D4;
    aBlock[3] = &unk_1007879A0;
    v9 = _Block_copy(aBlock);
    v10 = v13;
    v11 = v6;
    objc_msgSend(v7, "allMindfulnessSessionsWithCompletion:", v9, swift_release(v10).n128_f64[0]);
    _Block_release(v9);

  }
}

void sub_100129EB4()
{
  uint64_t v0;
  uint64_t ObjectType;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  ObjectType = swift_getObjectType(v0);
  v2 = static os_log_type_t.default.getter(ObjectType);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    v5 = v3;
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = _typeName(_:qualified:)(ObjectType, 0);
    v10 = v9;
    v15 = sub_10003E8EC(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v6 + 12) = 2080;
    v15 = sub_10003E8EC(0xD000000000000012, 0x800000010068A130, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 14);
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "%s::%s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  sub_10012A078();
  v12 = v11;
  v13 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v14, "applySnapshot:animatingDifferences:", v12, 1);

  }
}

void sub_10012A078()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  Class isa;
  double v22;
  id v23;
  _QWORD *v24;
  Class v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t inited;
  Swift::String v30;
  void *object;
  Swift::String v32;
  Swift::String v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t);
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __n128 v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  void *v60;
  os_log_type_t v61;
  id v62;
  NSObject *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  unint64_t v93;
  id v94;
  __int128 v95;
  Swift::Int v96;
  uint64_t v97;
  unint64_t v98;
  char v99[16];

  ObjectType = swift_getObjectType(v0);
  v85 = type metadata accessor for Date(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v83 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for Calendar(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v80 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DateComponents(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSDiffableDataSourceSnapshot), "init");
  v91 = v0;
  v92 = v5;
  v6 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels);
  v90 = *(_QWORD *)(v6 + 16);
  if (v90)
  {
    v73 = ObjectType;
    v76 = enum case for Calendar.Component.month(_:);
    v75 = enum case for Calendar.Component.year(_:);
    swift_bridgeObjectRetain(v6);
    v8 = 0;
    v95 = xmmword_100622F90;
    v89 = 0x800000010068A0F0;
    v87 = 0x800000010068A110;
    v86 = (char *)&type metadata for Any + 8;
    v74 = xmmword_100620BC0;
    v88 = v7;
    while (1)
    {
      v26 = *(_QWORD *)(v7 + 8 * v8 + 32);
      swift_bridgeObjectRetain(v26);
      v27 = sub_10012B84C(v8);
      v28 = sub_100047110(&qword_100820020);
      inited = swift_initStackObject(v28, v99);
      *(_OWORD *)(inited + 16) = v95;
      v97 = 0;
      v98 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(v98);
      v97 = 0xD000000000000012;
      v98 = v89;
      v93 = v8;
      v96 = v8;
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(object);
      v32._countAndFlagsBits = 45;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      v94 = v27;
      v96 = sub_100183460();
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v34 = v33._object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(v34);
      v35 = v98;
      *(_QWORD *)(inited + 32) = v97;
      *(_QWORD *)(inited + 40) = v35;
      v36 = sub_100129054(v26);
      v97 = inited;
      sub_10013C294(v36);
      v37 = v97;
      if ((unint64_t)v26 >> 62)
      {
        if (v26 < 0)
          v57 = v26;
        else
          v57 = v26 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v26);
        v58 = _CocoaArrayWrapper.endIndex.getter(v57);
        swift_bridgeObjectRelease(v26);
        if (!v58)
        {
LABEL_3:
          swift_bridgeObjectRelease(v26);
          v9 = 0;
          v10 = (void *)0xE000000000000000;
          goto LABEL_4;
        }
      }
      else if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_3;
      }
      if ((v26 & 0xC000000000000001) != 0)
      {
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
      }
      else
      {
        if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v38 = *(id *)(v26 + 32);
      }
      v39 = v38;
      swift_bridgeObjectRelease(v26);
      v40 = v80;
      static Calendar.current.getter(v41);
      v42 = sub_100047110((uint64_t *)&unk_100828720);
      v43 = type metadata accessor for Calendar.Component(0);
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(_QWORD *)(v44 + 72);
      v46 = *(unsigned __int8 *)(v44 + 80);
      v47 = (v46 + 32) & ~v46;
      v48 = swift_allocObject(v42, v47 + 2 * v45, v46 | 7);
      *(_OWORD *)(v48 + 16) = v74;
      v49 = v48 + v47;
      v50 = *(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104);
      v50(v49, v76, v43);
      v50(v49 + v45, v75, v43);
      v51 = sub_1002302F0(v48);
      swift_setDeallocating(v48);
      swift_arrayDestroy(v49, 2, v43);
      v52 = swift_deallocClassInstance(v48, 32, 7);
      v53 = v83;
      MindfulnessSessionViewModel.endDate.getter(v52);
      v54 = v77;
      Calendar.dateComponents(_:from:)(v51, v53);
      v55 = swift_bridgeObjectRelease(v51);
      (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v53, v85, v55);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v40, v82);

      v9 = DateComponents.description.getter();
      v10 = v56;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v79);
LABEL_4:
      v11 = v93;
      v12 = v93 + 1;
      v13 = sub_100047110(&qword_10082CEC0);
      v14 = swift_allocObject(v13, 64, 7);
      *(_OWORD *)(v14 + 16) = v95;
      v97 = 0;
      v98 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(v98);
      v97 = 0xD000000000000012;
      v98 = v87;
      v96 = v11;
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v16 = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v16);
      v17._countAndFlagsBits = 45;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._countAndFlagsBits = v9;
      v18._object = v10;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v10);
      v19 = v97;
      v20 = v98;
      *(_QWORD *)(v14 + 56) = &type metadata for String;
      *(_QWORD *)(v14 + 32) = v19;
      *(_QWORD *)(v14 + 40) = v20;
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v22 = swift_bridgeObjectRelease(v14).n128_u64[0];
      v23 = v92;
      objc_msgSend(v92, "appendSectionsWithIdentifiers:", isa, v22);

      v24 = sub_10013D7A4(v37);
      swift_bridgeObjectRelease(v37);
      v25 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v23, "appendItemsWithIdentifiers:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

      v8 = v12;
      v7 = v88;
      if (v90 == v12)
      {
        swift_bridgeObjectRelease(v88);
        ObjectType = v73;
        break;
      }
    }
  }
  v59 = static os_log_type_t.default.getter(v6);
  v60 = (void *)HKLogActivity;
  v61 = v59;
  if (os_log_type_enabled(HKLogActivity, v59))
  {
    v62 = v92;
    v63 = v60;
    v64 = swift_slowAlloc(32, -1);
    v65 = (_QWORD *)swift_slowAlloc(8, -1);
    v66 = swift_slowAlloc(64, -1);
    v97 = v66;
    *(_DWORD *)v64 = 136315650;
    v67 = _typeName(_:qualified:)(ObjectType, 0);
    v69 = v68;
    v96 = sub_10003E8EC(v67, v68, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v64 + 4);
    swift_bridgeObjectRelease(v69);
    *(_WORD *)(v64 + 12) = 2080;
    v96 = sub_10003E8EC(0x70616E53656B616DLL, 0xEE002928746F6873, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v64 + 14);
    *(_WORD *)(v64 + 22) = 2112;
    v96 = (Swift::Int)v62;
    v70 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v64 + 24);
    *v65 = v62;

    _os_log_impl((void *)&_mh_execute_header, v63, v61, "%s::%s snapshot %@", (uint8_t *)v64, 0x20u);
    v71 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v65, 1, v71);
    swift_slowDealloc(v65, -1, -1);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v64, -1, -1);

  }
}

id sub_10012A8CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  NSString v8;
  Class isa;
  id v10;
  id v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  id v21;
  NSString v22;
  Class v23;
  id v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  _BYTE v30[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v30, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    if (IndexPath.row.getter(Strong))
    {
      v8 = String._bridgeToObjectiveC()();
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v10 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v8, isa);

      v11 = v10;
      v12 = sub_10012BAB0();
      if (v12)
      {
        v13 = (void *)v12;
        v14 = type metadata accessor for MindfulnessSessionListTableViewCell();
        v15 = swift_dynamicCastClass(v11, v14);
        if (v15)
        {
          v16 = v15;
          v17 = *(void **)&v7[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
          v18 = *(void **)&v7[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
          v19 = swift_allocObject(&unk_100787AF0, 24, 7);
          swift_unknownObjectWeakInit(v19 + 16, v16);
          v20 = v17;
          v21 = v18;
          swift_retain(v19);
          sub_1004474CC(v13, v20, v21, (uint64_t)sub_10012F3BC, v19);

          swift_release_n(v19, 2);
LABEL_12:
          objc_msgSend(v11, "setSelectionStyle:", 0);

          return v11;
        }

      }
    }
    else
    {
      v22 = String._bridgeToObjectiveC()();
      v23 = IndexPath._bridgeToObjectiveC()().super.isa;
      v24 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v22, v23);

      v11 = v24;
      v25 = IndexPath.section.getter(v11);
      v26 = sub_10012B84C(v25);
      v27 = objc_opt_self(CHListSummaryTableViewCell);
      v28 = (void *)swift_dynamicCastObjCClass(v11, v27);
      if (v28)
      {
        objc_msgSend(v28, "setMindfulnessSessionsStatistics:formattingManager:", v26, *(_QWORD *)&v7[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fiuiFormattingManager]);

        goto LABEL_12;
      }

    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_10012ABCC(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, "numberOfRowsInSection:", a2) < 1)
    return 0;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "dequeueReusableHeaderFooterViewWithIdentifier:", v9);

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v2
                  + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels);
  if (*(_QWORD *)(v11 + 16) <= a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = *(_QWORD *)(v11 + 8 * a2 + 32);
  if (!((unint64_t)v2 >> 62))
  {
    v12 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v2);
    if (v12)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_16:
  if (v2 < 0)
    v21 = v2;
  else
    v21 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  result = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!result)
  {
LABEL_20:
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v10;
  }
LABEL_6:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v2 + 32);
LABEL_9:
    v15 = v14;
    swift_bridgeObjectRelease(v2);
    if (v10)
    {
      v16 = objc_opt_self(CHListTableHeaderView);
      v17 = swift_dynamicCastObjCClass(v10, v16);
      if (v17)
      {
        v18 = (void *)v17;
        v19 = v10;
        MindfulnessSessionViewModel.endDate.getter();
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        objc_msgSend(v18, "setDate:", isa);

      }
    }

    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

void sub_10012B040(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  char v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    if (IndexPath.row.getter(Strong) && (v4 = sub_10012BAB0()) != 0)
    {
      v5 = (void *)v4;
      v6 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
      v7 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
      objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController(0));
      v8 = sub_1002C26F0(v5, v6, v7);
      v9 = (char *)objc_msgSend(v3, "navigationController");
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, "pushViewController:animated:", v8, 1);

        v3 = v10;
      }

    }
    else
    {
      v8 = v3;
    }

  }
}

uint64_t sub_10012B2AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  _BYTE v10[24];

  v6 = a5 + 16;
  swift_beginAccess(a5 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_10012BC1C();

  }
  return a3(1);
}

uint64_t sub_10012B3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_1007878C0, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v2);
  v15 = (_QWORD *)swift_allocObject(&unk_1007878E8, 40, 7);
  v15[2] = a1;
  v15[3] = v14;
  v15[4] = ObjectType;
  aBlock[4] = sub_10012E450;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_100787900;
  v16 = _Block_copy(aBlock);
  v17 = v26;
  swift_bridgeObjectRetain(a1);
  swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_10002FAC0();
  v20 = sub_100047110(&qword_100828C80);
  v21 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v5, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_10012B5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[4];
  _BYTE v23[24];

  v3 = a2 + 16;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
    if (v16)
    {
LABEL_3:
      type metadata accessor for MindfulnessSessionViewModel(0);
      v4 = static MindfulnessSessionViewModel.makeMindfulnessSessionViewModels(from:)(a1);
      swift_beginAccess(v3, v23, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v3);
      if (Strong)
      {
        v6 = (char *)Strong;
        swift_bridgeObjectRetain(v4);
        v8 = sub_10012E45C(v7);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRetain_n(v8, 2);
        v9 = sub_100295E78(v8);
        swift_bridgeObjectRelease(v8);
        v22[0] = v9;
        sub_10012C118(v22);
        swift_bridgeObjectRelease(v8);
        v10 = v22[0];
        swift_bridgeObjectRetain(v8);
        sub_10012E8C8(_swiftEmptyArrayStorage, v10, (uint64_t)v8);
        v12 = v11;
        swift_bridgeObjectRelease(v4);
        swift_release(v10);
        swift_bridgeObjectRelease_n(v8, 2);
        v4 = *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels];
        *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels] = v12;

      }
      swift_bridgeObjectRelease(v4);
      swift_beginAccess(v3, v22, 0, 0);
      v13 = swift_unknownObjectWeakLoadStrong(v3);
      if (v13)
      {
        v14 = (id)v13;
        sub_100129EB4();
LABEL_14:

        return;
      }
      return;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v17 = static os_log_type_t.default.getter(a1);
  v18 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "MindfulnessSessionListViewController doesn't have any mindfulness sessions; popping view controller",
    99,
    2,
    _swiftEmptyArrayStorage);

  swift_beginAccess(v3, v23, 0, 0);
  v19 = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, "navigationController");

    if (v21)
    {
      v14 = objc_msgSend(v21, "popViewControllerAnimated:", 1);

      goto LABEL_14;
    }
  }
}

id sub_10012B84C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  objc_class *v14;
  char *v15;
  uint64_t v17;
  objc_super v18;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels);
  if (*(_QWORD *)(v3 + 16) <= a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(v3 + 8 * a1 + 32);
  if (!((unint64_t)v2 >> 62))
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
    goto LABEL_5;
  }
LABEL_17:
  if (v2 < 0)
    v17 = v2;
  else
    v17 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v4 = _CocoaArrayWrapper.endIndex.getter(v17);
LABEL_5:
  v5 = sub_100128EFC(v2);
  swift_bridgeObjectRelease(v2);
  v6 = v5[2];
  if (!v6)
  {
    v8 = 0.0;
    goto LABEL_14;
  }
  if (v6 == 1)
  {
    v7 = 0;
    v8 = 0.0;
LABEL_12:
    v11 = v6 - v7;
    v12 = (double *)&v5[v7 + 4];
    do
    {
      v13 = *v12++;
      v8 = v8 + v13;
      --v11;
    }
    while (v11);
    goto LABEL_14;
  }
  v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
  v9 = (double *)(v5 + 5);
  v8 = 0.0;
  v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v8 = v8 + *(v9 - 1) + *v9;
    v9 += 2;
    v10 -= 2;
  }
  while (v10);
  if (v6 != v7)
    goto LABEL_12;
LABEL_14:
  swift_bridgeObjectRelease(v5);
  v14 = (objc_class *)type metadata accessor for MindfulnessSessionsStatistics();
  v15 = (char *)objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR___CHMindfulnessSessionsStatistics_sessionCount] = v4;
  *(double *)&v15[OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration] = v8;
  v18.receiver = v15;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "init");
}

void sub_10012B9BC(uint64_t a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  char *v9;

  v2 = v1;
  if (IndexPath.row.getter(a1))
  {
    v3 = sub_10012BAB0();
    if (v3)
    {
      v4 = (void *)v3;
      v5 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
      v6 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
      objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController(0));
      v9 = sub_1002C26F0(v4, v5, v6);
      v7 = objc_msgSend(v2, "navigationController");
      if (v7)
      {
        v8 = v7;
        objc_msgSend(v7, "pushViewController:animated:", v9, 1);

      }
    }
  }
}

unint64_t sub_10012BAB0()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t result;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (unint64_t)v0;
  v2 = IndexPath.section.getter();
  result = (unint64_t)objc_msgSend(v0, "tableView");
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = (void *)result;
  v5 = objc_msgSend((id)result, "numberOfSections");

  if (v2 >= (uint64_t)v5)
    return 0;
  v6 = IndexPath.row.getter();
  result = (unint64_t)objc_msgSend(v0, "tableView");
  if (result)
  {
    v7 = (void *)result;
    v8 = objc_msgSend((id)result, "numberOfRowsInSection:", IndexPath.section.getter());

    if (v6 < (uint64_t)v8)
    {
      v9 = IndexPath.row.getter();
      v10 = v9 - 1;
      if (__OFSUB__(v9, 1))
      {
        __break(1u);
      }
      else
      {
        result = IndexPath.section.getter();
        if ((result & 0x8000000000000000) == 0)
        {
          v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels];
          if (result < *(_QWORD *)(v11 + 16))
          {
            v1 = *(_QWORD *)(v11 + 8 * result + 32);
            if ((v1 & 0xC000000000000001) == 0)
            {
              if ((v10 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v10 < *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                return (unint64_t)*(id *)(v1 + 8 * v10 + 32);
              }
              __break(1u);
              goto LABEL_20;
            }
LABEL_17:
            swift_bridgeObjectRetain(v1);
            v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v1);
            swift_bridgeObjectRelease(v1);
            return v12;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
    return 0;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_10012BC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  unint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_10012BAB0();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_healthStore);
    v6 = MindfulnessSessionViewModel.mindfulnessSessions.getter(v3);
    v7 = v6;
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v15 = v6;
      else
        v15 = v6 & 0xFFFFFFFFFFFFFF8;
      v16 = sub_10001E724(0, &qword_100821808, HKObject_ptr);
      v9 = _bridgeCocoaArray<A>(_:)(v15, v16);
    }
    else
    {
      swift_bridgeObjectRetain(v6);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v8);
      sub_10001E724(0, &qword_100821808, HKObject_ptr);
      v9 = v7;
    }
    swift_bridgeObjectRelease(v7);
    sub_10001E724(0, &qword_100821808, HKObject_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v11 = swift_allocObject(&unk_100787870, 24, 7);
    *(_QWORD *)(v11 + 16) = ObjectType;
    v17[4] = sub_10012C110;
    v18 = v11;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_1000064EC;
    v17[3] = &unk_100787888;
    v12 = _Block_copy(v17);
    objc_msgSend(v5, "_deleteObjects:options:completion:", isa, 0, v12, swift_release(v18).n128_f64[0]);

    _Block_release(v12);
    v13 = objc_retain(*(id *)(*(_QWORD *)(v1
                                        + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext)
                            + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider));
    v14 = v4;
    sub_1005051A0(v14, (uint64_t)v13);

  }
}

void sub_10012BE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5;
  void *v6;
  os_log_type_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v5 = static os_log_type_t.error.getter(a1);
    v6 = (void *)HKLogActivity;
    v7 = v5;
    if (os_log_type_enabled(HKLogActivity, v5))
    {
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      v8 = v6;
      v9 = swift_slowAlloc(22, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v9 = 136315394;
      v12 = _typeName(_:qualified:)(a3, 0);
      v14 = v13;
      v17 = sub_10003E8EC(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v9 + 12) = 2112;
      swift_errorRetain(a2);
      v15 = _swift_stdlib_bridgeErrorToNSError(a2);
      v17 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 14);
      *v10 = v15;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v8, v7, "%s failed to delete mindfulness session with error %@", (uint8_t *)v9, 0x16u);
      v16 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v10, 1, v16);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
  }
}

uint64_t type metadata accessor for MindfulnessSessionListViewController()
{
  return objc_opt_self(_TtC10FitnessApp36MindfulnessSessionListViewController);
}

uint64_t sub_10012C100()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10012C110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10012BE0C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_10012C118(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for DateComponents(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001477A4(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10012C210(v5);
  *a1 = v3;
}

uint64_t sub_10012C198(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001477B8(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_10012CDA8(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_10012C210(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  Swift::Int v32;
  unint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _BOOL4 v54;
  Swift::Int v55;
  void (*v56)(char *, uint64_t);
  Swift::Int v57;
  char *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  Swift::Int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  Swift::Int v84;
  char *v85;
  uint64_t v86;
  Swift::Int v87;
  void (*v88)(char *, uint64_t);
  Swift::Int v89;
  uint64_t v90;
  Swift::Int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  void (*v117)(char *, char *, uint64_t);
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  char v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  Swift::Int v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  Swift::Int v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  void (*v193)(char *, char *, uint64_t);
  Swift::Int v194;
  Swift::Int v195;
  _QWORD *v196;
  char *v197;
  uint64_t *v198;
  char *v199;
  uint64_t v200;

  v2 = v1;
  v4 = type metadata accessor for DateComponents(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v186 = (char *)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v197 = (char *)&v177 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v177 - v11;
  v13 = __chkstk_darwin(v10);
  v199 = (char *)&v177 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v177 - v16;
  v18 = __chkstk_darwin(v15);
  v189 = (char *)&v177 - v19;
  v20 = __chkstk_darwin(v18);
  v182 = (char *)&v177 - v21;
  __chkstk_darwin(v20);
  v183 = (char *)&v177 - v22;
  v198 = a1;
  v23 = a1[1];
  v24 = _minimumMergeRunLength(_:)(v23);
  if (v24 >= v23)
  {
    if (v23 < 0)
      goto LABEL_171;
    if (v23)
      sub_10012D5F8(0, v23, 1, v198);
    return;
  }
  if (v23 >= 0)
    v25 = v23;
  else
    v25 = v23 + 1;
  if (v23 < -1)
    goto LABEL_179;
  v196 = v5;
  v200 = v4;
  v191 = v12;
  v179 = v24;
  if (v23 < 2)
  {
    v31 = (char *)_swiftEmptyArrayStorage;
    v30 = (char *)_swiftEmptyArrayStorage
        + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
    v178 = _swiftEmptyArrayStorage;
    if (v23 != 1)
    {
      v33 = _swiftEmptyArrayStorage[2];
LABEL_137:
      if (v33 >= 2)
      {
        v169 = *v198;
        do
        {
          v170 = v33 - 2;
          if (v33 < 2)
            goto LABEL_166;
          if (!v169)
            goto LABEL_178;
          v171 = *(_QWORD *)&v31[16 * v170 + 32];
          v172 = *(_QWORD *)&v31[16 * v33 + 24];
          v173 = v30;
          sub_10012DA44(v169 + v196[9] * v171, v169 + v196[9] * *(_QWORD *)&v31[16 * v33 + 16], v169 + v196[9] * v172, (unint64_t)v30);
          if (v2)
            break;
          if (v172 < v171)
            goto LABEL_167;
          if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
            v31 = sub_100147754((uint64_t)v31);
          if (v170 >= *((_QWORD *)v31 + 2))
            goto LABEL_168;
          v174 = &v31[16 * v170 + 32];
          *(_QWORD *)v174 = v171;
          *((_QWORD *)v174 + 1) = v172;
          v175 = *((_QWORD *)v31 + 2);
          if (v33 > v175)
            goto LABEL_169;
          memmove(&v31[16 * v33 + 16], &v31[16 * v33 + 32], 16 * (v175 - v33));
          *((_QWORD *)v31 + 2) = v175 - 1;
          v33 = v175 - 1;
          v30 = v173;
        }
        while (v175 > 2);
      }
LABEL_148:
      swift_bridgeObjectRelease(v31);
      v176 = v178;
      v178[2] = 0;
      swift_bridgeObjectRelease(v176);
      return;
    }
  }
  else
  {
    v26 = v23;
    v27 = v25 >> 1;
    v28 = static Array._allocateBufferUninitialized(minimumCapacity:)(v25 >> 1, v4);
    *(_QWORD *)(v28 + 16) = v27;
    v23 = v26;
    v29 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    v178 = (_QWORD *)v28;
    v30 = (char *)(v28 + v29);
  }
  v32 = 0;
  v31 = (char *)_swiftEmptyArrayStorage;
  v188 = v30;
  v181 = v17;
  while (1)
  {
    v184 = v31;
    v34 = v32;
    v35 = v32 + 1;
    if (v32 + 1 >= v23)
    {
      v55 = v32 + 1;
      v31 = v184;
      v52 = v200;
      goto LABEL_64;
    }
    v194 = v23;
    v36 = *v198;
    v37 = v5[9];
    v38 = (void (*)(char *, uint64_t, uint64_t))v5[2];
    v39 = v200;
    v38(v183, *v198 + v37 * v35, v200);
    v187 = v34;
    v190 = (char *)v36;
    v195 = v37;
    v192 = (char *)v38;
    v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v38)(v182, v36 + v37 * v34, v39);
    v41 = DateComponents.year.getter(v40);
    if ((v42 & 1) != 0
      || (v43 = v41, v44 = DateComponents.year.getter(v41), (v45 & 1) != 0)
      || (v46 = v44, v47 = DateComponents.month.getter(), (v48 & 1) != 0))
    {
      LODWORD(v193) = 1;
    }
    else
    {
      v49 = v47;
      v50 = DateComponents.month.getter();
      LODWORD(v193) = 1;
      if ((v51 & 1) == 0)
      {
        v52 = v200;
        if (v46 >= v43)
        {
          v54 = v43 >= v46 && v50 < v49;
          LODWORD(v193) = v54;
        }
        goto LABEL_31;
      }
    }
    v52 = v200;
LABEL_31:
    v5 = v196;
    v56 = (void (*)(char *, uint64_t))v196[1];
    v56(v182, v52);
    v56(v183, v52);
    v23 = v194;
    if (v187 + 2 >= v194)
    {
      v55 = v187 + 2;
    }
    else
    {
      v180 = v2;
      v57 = v195 * v35;
      v58 = v190;
      v55 = v187 + 2;
      v59 = v195 * (v187 + 2);
      while (1)
      {
        v60 = (uint64_t (*)(char *, char *, uint64_t))v192;
        ((void (*)(char *, char *, uint64_t))v192)(v189, &v58[v59], v52);
        v61 = v60(v17, &v58[v57], v52);
        v62 = DateComponents.year.getter(v61);
        if ((v63 & 1) != 0
          || (v64 = v62, v65 = DateComponents.year.getter(v62), (v66 & 1) != 0)
          || (v67 = v65, v68 = DateComponents.month.getter(), (v69 & 1) != 0))
        {
          v71 = 1;
        }
        else
        {
          v185 = v68;
          v70 = DateComponents.month.getter();
          v71 = 1;
          if ((v72 & 1) == 0 && v67 >= v64)
            v71 = v64 >= v67 && v70 < v185;
        }
        v74 = v200;
        v56(v17, v200);
        v56(v189, v74);
        if ((_DWORD)v193 != v71)
          break;
        v23 = v194;
        v58 += v195;
        ++v55;
        v52 = v200;
        if (v194 == v55)
        {
          v55 = v194;
          v2 = v180;
          v5 = v196;
          goto LABEL_50;
        }
      }
      v2 = v180;
      v5 = v196;
      v52 = v200;
      v23 = v194;
    }
LABEL_50:
    v31 = v184;
    v34 = v187;
    if ((_DWORD)v193)
    {
      if (v55 < v187)
        goto LABEL_172;
      if (v187 < v55)
      {
        v180 = v2;
        v75 = 0;
        v76 = v195 * (v55 - 1);
        v77 = v55 * v195;
        v78 = v187;
        v79 = v187 * v195;
        do
        {
          if (v78 != v55 + v75 - 1)
          {
            v81 = v190;
            if (!v190)
              goto LABEL_177;
            v82 = &v190[v79];
            v83 = &v190[v76];
            v193 = (void (*)(char *, char *, uint64_t))v196[4];
            v193(v186, &v190[v79], v200);
            if (v79 < v76 || v82 >= &v81[v77])
            {
              v80 = &v81[v79];
              v52 = v200;
              swift_arrayInitWithTakeFrontToBack(v80);
            }
            else
            {
              v52 = v200;
              if (v79 != v76)
                swift_arrayInitWithTakeBackToFront(v82);
            }
            v193(v83, v186, v52);
            v5 = v196;
          }
          ++v78;
          --v75;
          v76 -= v195;
          v77 -= v195;
          v79 += v195;
        }
        while (v78 < v55 + v75);
        v2 = v180;
        v31 = v184;
        v34 = v187;
        v23 = v194;
      }
    }
LABEL_64:
    if (v55 >= v23)
      goto LABEL_88;
    if (__OFSUB__(v55, v34))
      goto LABEL_170;
    if (v55 - v34 >= v179)
      goto LABEL_88;
    if (__OFADD__(v34, v179))
      goto LABEL_173;
    v84 = v34 + v179 >= v23 ? v23 : v34 + v179;
    if (v84 < v34)
      break;
    if (v55 != v84)
    {
      v187 = v34;
      v180 = v2;
      v85 = (char *)v5[9];
      v190 = (char *)v5[2];
      v86 = (_QWORD)v85 * (v55 - 1);
      v192 = v85;
      v87 = v55 * (_QWORD)v85;
      v185 = v84;
      do
      {
        v90 = 0;
        v91 = v187;
        v194 = v86;
        v195 = v55;
        v193 = (void (*)(char *, char *, uint64_t))v87;
        while (1)
        {
          v93 = *v198;
          v94 = v87 + v90 + *v198;
          v95 = (uint64_t (*)(char *, uint64_t, uint64_t))v190;
          ((void (*)(char *, uint64_t, uint64_t))v190)(v199, v94, v52);
          v96 = v86 + v90 + v93;
          v97 = v191;
          v98 = v95(v191, v96, v52);
          v99 = DateComponents.year.getter(v98);
          if ((v100 & 1) == 0)
          {
            v101 = v99;
            v102 = DateComponents.year.getter(v99);
            if ((v103 & 1) == 0)
            {
              v104 = v102;
              v105 = DateComponents.month.getter();
              if ((v106 & 1) == 0)
              {
                v107 = v105;
                v108 = DateComponents.month.getter();
                if ((v109 & 1) == 0 && v104 >= v101 && (v101 < v104 || v108 >= v107))
                  break;
              }
            }
          }
          v110 = v196;
          v111 = (void (*)(char *, uint64_t))v196[1];
          v112 = v200;
          v111(v97, v200);
          v111(v199, v112);
          v113 = *v198;
          if (!*v198)
            goto LABEL_175;
          v87 = (Swift::Int)v193;
          v86 = v194;
          v114 = (char *)v193 + v113 + v90;
          v115 = v112;
          v116 = (char *)(v113 + v194 + v90);
          v117 = (void (*)(char *, char *, uint64_t))v110[4];
          v117(v197, v114, v115);
          swift_arrayInitWithTakeFrontToBack(v114);
          v92 = v116;
          v52 = v200;
          v117(v92, v197, v200);
          v90 -= (uint64_t)v192;
          ++v91;
          v89 = v195;
          if (v195 == v91)
            goto LABEL_75;
        }
        v88 = (void (*)(char *, uint64_t))v196[1];
        v52 = v200;
        v88(v97, v200);
        v88(v199, v52);
        v86 = v194;
        v89 = v195;
        v87 = (Swift::Int)v193;
LABEL_75:
        v55 = v89 + 1;
        v86 += (uint64_t)v192;
        v87 += (Swift::Int)v192;
      }
      while (v55 != v185);
      v55 = v185;
      v2 = v180;
      v5 = v196;
      v31 = v184;
      v34 = v187;
    }
LABEL_88:
    if (v55 < v34)
      goto LABEL_165;
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      v31 = sub_100147150(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
    v119 = *((_QWORD *)v31 + 2);
    v118 = *((_QWORD *)v31 + 3);
    v33 = v119 + 1;
    v30 = v188;
    if (v119 >= v118 >> 1)
    {
      v168 = sub_100147150((char *)(v118 > 1), v119 + 1, 1, v31);
      v30 = v188;
      v31 = v168;
    }
    *((_QWORD *)v31 + 2) = v33;
    v120 = v31 + 32;
    v121 = &v31[16 * v119 + 32];
    *(_QWORD *)v121 = v34;
    *((_QWORD *)v121 + 1) = v55;
    v195 = v55;
    if (v119)
    {
      while (1)
      {
        v122 = v33 - 1;
        if (v33 >= 4)
        {
          v127 = &v120[16 * v33];
          v128 = *((_QWORD *)v127 - 8);
          v129 = *((_QWORD *)v127 - 7);
          v133 = __OFSUB__(v129, v128);
          v130 = v129 - v128;
          if (v133)
            goto LABEL_154;
          v132 = *((_QWORD *)v127 - 6);
          v131 = *((_QWORD *)v127 - 5);
          v133 = __OFSUB__(v131, v132);
          v125 = v131 - v132;
          v126 = v133;
          if (v133)
            goto LABEL_155;
          v134 = v33 - 2;
          v135 = &v120[16 * v33 - 32];
          v137 = *(_QWORD *)v135;
          v136 = *((_QWORD *)v135 + 1);
          v133 = __OFSUB__(v136, v137);
          v138 = v136 - v137;
          if (v133)
            goto LABEL_157;
          v133 = __OFADD__(v125, v138);
          v139 = v125 + v138;
          if (v133)
            goto LABEL_160;
          if (v139 >= v130)
          {
            v157 = &v120[16 * v122];
            v159 = *(_QWORD *)v157;
            v158 = *((_QWORD *)v157 + 1);
            v133 = __OFSUB__(v158, v159);
            v160 = v158 - v159;
            if (v133)
              goto LABEL_164;
            v150 = v125 < v160;
            goto LABEL_125;
          }
        }
        else
        {
          if (v33 != 3)
          {
            v151 = *((_QWORD *)v31 + 4);
            v152 = *((_QWORD *)v31 + 5);
            v133 = __OFSUB__(v152, v151);
            v144 = v152 - v151;
            v145 = v133;
            goto LABEL_119;
          }
          v124 = *((_QWORD *)v31 + 4);
          v123 = *((_QWORD *)v31 + 5);
          v133 = __OFSUB__(v123, v124);
          v125 = v123 - v124;
          v126 = v133;
        }
        if ((v126 & 1) != 0)
          goto LABEL_156;
        v134 = v33 - 2;
        v140 = &v120[16 * v33 - 32];
        v142 = *(_QWORD *)v140;
        v141 = *((_QWORD *)v140 + 1);
        v143 = __OFSUB__(v141, v142);
        v144 = v141 - v142;
        v145 = v143;
        if (v143)
          goto LABEL_159;
        v146 = &v120[16 * v122];
        v148 = *(_QWORD *)v146;
        v147 = *((_QWORD *)v146 + 1);
        v133 = __OFSUB__(v147, v148);
        v149 = v147 - v148;
        if (v133)
          goto LABEL_162;
        if (__OFADD__(v144, v149))
          goto LABEL_163;
        if (v144 + v149 >= v125)
        {
          v150 = v125 < v149;
LABEL_125:
          if (v150)
            v122 = v134;
          goto LABEL_127;
        }
LABEL_119:
        if ((v145 & 1) != 0)
          goto LABEL_158;
        v153 = &v120[16 * v122];
        v155 = *(_QWORD *)v153;
        v154 = *((_QWORD *)v153 + 1);
        v133 = __OFSUB__(v154, v155);
        v156 = v154 - v155;
        if (v133)
          goto LABEL_161;
        if (v156 < v144)
          goto LABEL_14;
LABEL_127:
        v161 = v122 - 1;
        if (v122 - 1 >= v33)
        {
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
          goto LABEL_174;
        }
        if (!*v198)
          goto LABEL_176;
        v162 = v31;
        v163 = &v120[16 * v161];
        v164 = *(_QWORD *)v163;
        v165 = &v120[16 * v122];
        v166 = *((_QWORD *)v165 + 1);
        sub_10012DA44(*v198 + v196[9] * *(_QWORD *)v163, *v198 + v196[9] * *(_QWORD *)v165, *v198 + v196[9] * v166, (unint64_t)v30);
        if (v2)
        {
          v31 = v162;
          goto LABEL_148;
        }
        if (v166 < v164)
          goto LABEL_151;
        if (v122 > *((_QWORD *)v162 + 2))
          goto LABEL_152;
        *(_QWORD *)v163 = v164;
        *(_QWORD *)&v120[16 * v161 + 8] = v166;
        v167 = *((_QWORD *)v162 + 2);
        if (v122 >= v167)
          goto LABEL_153;
        v31 = v162;
        v33 = v167 - 1;
        memmove(&v120[16 * v122], v165 + 16, 16 * (v167 - 1 - v122));
        *((_QWORD *)v162 + 2) = v167 - 1;
        v5 = v196;
        v30 = v188;
        if (v167 <= 2)
          goto LABEL_14;
      }
    }
    v33 = 1;
LABEL_14:
    v23 = v198[1];
    v32 = v195;
    v17 = v181;
    if (v195 >= v23)
      goto LABEL_137;
  }
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_10012CDA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  id *v29;
  Swift::Int v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t *v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  Swift::Int v45;
  void *v46;
  Swift::Int v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  char *v124;
  Swift::Int v125;
  Swift::Int v126;
  Swift::Int v127;
  Swift::Int v128;
  id *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v133 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v133 - 8);
  v3 = __chkstk_darwin(v133);
  v132 = (char *)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v119 - v5;
  v7 = a1[1];
  v8 = _minimumMergeRunLength(_:)(v7);
  if (v8 >= v7)
  {
    if (v7 < 0)
      goto LABEL_136;
    if (v7)
      sub_10012D8B8(0, v7, 1, a1);
    return;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_144;
  v130 = v1;
  v123 = v8;
  v120 = a1;
  if (v7 < 2)
  {
    v13 = (char *)_swiftEmptyArrayStorage;
    v135 = (uint64_t)_swiftEmptyArrayStorage;
    v129 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v7 != 1)
    {
      v17 = _swiftEmptyArrayStorage[2];
LABEL_101:
      v110 = v130;
      if (v17 >= 2)
      {
        v111 = *v120;
        do
        {
          v112 = v17 - 2;
          if (v17 < 2)
            goto LABEL_131;
          if (!v111)
            goto LABEL_143;
          v101 = v13;
          v113 = v13 + 32;
          v114 = *(_QWORD *)&v13[16 * v112 + 32];
          v115 = *(_QWORD *)&v13[16 * v17 + 24];
          sub_10012E014((void **)(v111 + 8 * v114), (id *)(v111 + 8 * *(_QWORD *)&v113[16 * v17 - 16]), (id *)(v111 + 8 * v115), v129);
          if (v110)
            goto LABEL_99;
          if (v115 < v114)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = sub_100147754((uint64_t)v101);
          if (v112 >= *((_QWORD *)v101 + 2))
            goto LABEL_133;
          v116 = &v101[16 * v112 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v101 + 2);
          if (v17 > v117)
            goto LABEL_134;
          v13 = v101;
          memmove(&v101[16 * v17 + 16], &v101[16 * v17 + 32], 16 * (v117 - v17));
          *((_QWORD *)v101 + 2) = v117 - 1;
          v17 = v117 - 1;
        }
        while (v117 > 2);
      }
      v109 = v13;
LABEL_113:
      swift_bridgeObjectRelease(v109);
      *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v118);
      swift_bridgeObjectRelease(v135);
      return;
    }
  }
  else
  {
    v10 = v9 >> 1;
    v11 = type metadata accessor for MindfulnessSessionViewModel(0);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    v129 = (id *)((v12 & 0xFFFFFFFFFFFFFF8) + 32);
    v135 = v12;
  }
  v14 = 0;
  v15 = *a1;
  v16 = *a1 + 16;
  v121 = *a1 - 8;
  v122 = v16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v127 = v7;
  v134 = v15;
  while (1)
  {
    v18 = v14;
    v19 = v14 + 1;
    if (v14 + 1 < v7)
    {
      v124 = v13;
      v20 = *(void **)(v15 + 8 * v19);
      v21 = *(void **)(v15 + 8 * v14);
      v22 = v20;
      v23 = v21;
      v24 = MindfulnessSessionViewModel.endDate.getter(v23);
      v25 = v132;
      MindfulnessSessionViewModel.endDate.getter(v24);
      LODWORD(v128) = static Date.> infix(_:_:)(v6, v25);
      v26 = *(void (**)(char *, uint64_t))(v131 + 8);
      v27 = v25;
      v28 = v133;
      v26(v27, v133);
      v26(v6, v28);

      v7 = v127;
      v19 = v18 + 2;
      if (v18 + 2 >= v127)
      {
        v13 = v124;
      }
      else
      {
        v126 = v18;
        v29 = (id *)(v122 + 8 * v18);
        v13 = v124;
        while (1)
        {
          v30 = v19;
          v31 = *(v29 - 1);
          v32 = *v29;
          v33 = v31;
          v34 = MindfulnessSessionViewModel.endDate.getter(v33);
          v35 = v132;
          MindfulnessSessionViewModel.endDate.getter(v34);
          LODWORD(v31) = static Date.> infix(_:_:)(v6, v35);
          v36 = v35;
          v37 = v133;
          v26(v36, v133);
          v26(v6, v37);

          if (((v128 ^ v31) & 1) != 0)
            break;
          v19 = v30 + 1;
          ++v29;
          v7 = v127;
          if (v127 == v30 + 1)
          {
            v19 = v127;
            goto LABEL_23;
          }
        }
        v7 = v127;
        v19 = v30;
LABEL_23:
        v18 = v126;
      }
      v15 = v134;
      if ((v128 & 1) != 0)
      {
        if (v19 < v18)
          goto LABEL_137;
        if (v18 < v19)
        {
          v38 = (uint64_t *)(v121 + 8 * v19);
          v39 = v19;
          v40 = v18;
          v41 = (uint64_t *)(v134 + 8 * v18);
          do
          {
            if (v40 != --v39)
            {
              if (!v15)
                goto LABEL_142;
              v42 = *v41;
              *v41 = *v38;
              *v38 = v42;
            }
            ++v40;
            --v38;
            ++v41;
          }
          while (v40 < v39);
        }
      }
    }
    if (v19 < v7)
    {
      if (__OFSUB__(v19, v18))
        goto LABEL_135;
      if (v19 - v18 < v123)
        break;
    }
LABEL_51:
    if (v19 < v18)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_100147150(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v58 = *((_QWORD *)v13 + 2);
    v57 = *((_QWORD *)v13 + 3);
    v17 = v58 + 1;
    v15 = v134;
    if (v58 >= v57 >> 1)
    {
      v108 = sub_100147150((char *)(v57 > 1), v58 + 1, 1, v13);
      v15 = v134;
      v13 = v108;
    }
    *((_QWORD *)v13 + 2) = v17;
    v59 = &v13[16 * v58 + 32];
    *(_QWORD *)v59 = v18;
    *((_QWORD *)v59 + 1) = v19;
    v128 = v19;
    if (v58)
    {
      v60 = v13 + 32;
      while (1)
      {
        v61 = v17 - 1;
        if (v17 >= 4)
        {
          v66 = &v60[16 * v17];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_119;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_120;
          v73 = v17 - 2;
          v74 = &v60[16 * v17 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_122;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_125;
          if (v78 >= v69)
          {
            v96 = &v60[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_129;
            v89 = v64 < v99;
            goto LABEL_89;
          }
        }
        else
        {
          if (v17 != 3)
          {
            v90 = *((_QWORD *)v13 + 4);
            v91 = *((_QWORD *)v13 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_83;
          }
          v63 = *((_QWORD *)v13 + 4);
          v62 = *((_QWORD *)v13 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_121;
        v73 = v17 - 2;
        v79 = &v60[16 * v17 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_124;
        v85 = &v60[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_127;
        if (__OFADD__(v83, v88))
          goto LABEL_128;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_89:
          if (v89)
            v61 = v73;
          goto LABEL_91;
        }
LABEL_83:
        if ((v84 & 1) != 0)
          goto LABEL_123;
        v92 = &v60[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_126;
        if (v95 < v83)
          goto LABEL_14;
LABEL_91:
        v100 = v61 - 1;
        if (v61 - 1 >= v17)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v15)
          goto LABEL_141;
        v101 = v13;
        v102 = &v60[16 * v100];
        v103 = *(_QWORD *)v102;
        v104 = &v60[16 * v61];
        v105 = *((_QWORD *)v104 + 1);
        v106 = v130;
        sub_10012E014((void **)(v15 + 8 * *(_QWORD *)v102), (id *)(v15 + 8 * *(_QWORD *)v104), (id *)(v15 + 8 * v105), v129);
        v130 = v106;
        if (v106)
        {
LABEL_99:
          v109 = v101;
          goto LABEL_113;
        }
        if (v105 < v103)
          goto LABEL_116;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_117;
        *(_QWORD *)v102 = v103;
        *(_QWORD *)&v60[16 * v100 + 8] = v105;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_118;
        v13 = v101;
        v17 = v107 - 1;
        memmove(&v60[16 * v61], v104 + 16, 16 * (v107 - 1 - v61));
        *((_QWORD *)v101 + 2) = v107 - 1;
        v15 = v134;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v17 = 1;
LABEL_14:
    v7 = v127;
    v14 = v128;
    if (v128 >= v127)
      goto LABEL_101;
  }
  if (__OFADD__(v18, v123))
    goto LABEL_138;
  if (v18 + v123 >= v7)
    v43 = v7;
  else
    v43 = v18 + v123;
  if (v43 >= v18)
  {
    if (v19 != v43)
    {
      v125 = v43;
      v126 = v18;
      v124 = v13;
      v44 = v121 + 8 * v19;
      do
      {
        v45 = v19;
        v46 = *(void **)(v15 + 8 * v19);
        v47 = v126;
        v128 = v44;
        while (1)
        {
          v48 = *(void **)v44;
          v49 = v46;
          v50 = v48;
          v51 = MindfulnessSessionViewModel.endDate.getter(v50);
          v52 = v132;
          MindfulnessSessionViewModel.endDate.getter(v51);
          LOBYTE(v48) = static Date.> infix(_:_:)(v6, v52);
          v53 = *(void (**)(char *, uint64_t))(v131 + 8);
          v54 = v52;
          v55 = v133;
          v53(v54, v133);
          v53(v6, v55);

          if ((v48 & 1) == 0)
            break;
          v15 = v134;
          if (!v134)
            goto LABEL_140;
          v56 = *(void **)v44;
          v46 = *(void **)(v44 + 8);
          *(_QWORD *)v44 = v46;
          *(_QWORD *)(v44 + 8) = v56;
          v44 -= 8;
          if (v45 == ++v47)
            goto LABEL_44;
        }
        v15 = v134;
LABEL_44:
        v19 = v45 + 1;
        v44 = v128 + 8;
      }
      while (v45 + 1 != v125);
      v19 = v125;
      v13 = v124;
      v18 = v126;
    }
    goto LABEL_51;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10012D5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a4;
  v40 = a1;
  v6 = type metadata accessor for DateComponents(0);
  v45 = *(_QWORD **)(v6 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v48 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v38 - v13;
  v47 = a3;
  v39 = a2;
  if (a3 != a2)
  {
    v15 = v45[9];
    v16 = (uint64_t (*)(char *, uint64_t, uint64_t))v45[2];
    v43 = (char *)&v38 - v13;
    v44 = v16;
    v51 = v15 * (v47 - 1);
    v46 = v15;
    v50 = v15 * v47;
LABEL_6:
    v18 = 0;
    v19 = v40;
    while (1)
    {
      v20 = *v49;
      v21 = v44;
      v44(v14, v50 + v18 + *v49, v6);
      v22 = v21(v11, v51 + v18 + v20, v6);
      v23 = DateComponents.year.getter(v22);
      if ((v24 & 1) == 0)
      {
        v25 = v23;
        v42 = DateComponents.year.getter(v23);
        if ((v26 & 1) == 0)
        {
          v27 = DateComponents.month.getter();
          if ((v28 & 1) == 0)
          {
            v41 = v27;
            v29 = DateComponents.month.getter();
            if ((v30 & 1) == 0 && v42 >= v25 && (v25 < v42 || v29 >= v41))
            {
              v17 = (void (*)(char *, uint64_t))v45[1];
              v17(v11, v6);
              result = ((uint64_t (*)(char *, uint64_t))v17)(v14, v6);
LABEL_5:
              v51 += v46;
              v50 += v46;
              if (++v47 == v39)
                return result;
              goto LABEL_6;
            }
          }
        }
      }
      v31 = v45;
      v32 = (void (*)(char *, uint64_t))v45[1];
      v32(v11, v6);
      result = ((uint64_t (*)(char *, uint64_t))v32)(v14, v6);
      v33 = *v49;
      if (!*v49)
        break;
      v34 = v11;
      v35 = v33 + v50 + v18;
      v36 = v33 + v51 + v18;
      v37 = (void (*)(char *, uint64_t, uint64_t))v31[4];
      v37(v48, v35, v6);
      swift_arrayInitWithTakeFrontToBack(v35);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v37)(v36, v48, v6);
      v18 -= v46;
      ++v19;
      v11 = v34;
      v14 = v43;
      if (v47 == v19)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

void sub_10012D8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a1;
  v7 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v8 = __chkstk_darwin(v7);
  v29 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - v10;
  v26 = a2;
  if (a3 != a2)
  {
    v32 = *a4;
    v12 = v32 + 8 * a3 - 8;
LABEL_5:
    v13 = *(void **)(v32 + 8 * a3);
    v14 = v27;
    v28 = v12;
    while (1)
    {
      v15 = *(void **)v12;
      v16 = v13;
      v17 = v15;
      v18 = ((uint64_t (*)(void))MindfulnessSessionViewModel.endDate.getter)();
      v19 = v29;
      MindfulnessSessionViewModel.endDate.getter(v18);
      v20 = static Date.> infix(_:_:)(v11, v19);
      v21 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22 = v19;
      v23 = v31;
      v21(v22, v31);
      v21(v11, v23);

      if ((v20 & 1) == 0)
      {
LABEL_4:
        ++a3;
        v12 = v28 + 8;
        if (a3 == v26)
          return;
        goto LABEL_5;
      }
      if (!v32)
        break;
      v24 = *(void **)v12;
      v13 = *(void **)(v12 + 8);
      *(_QWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = v24;
      v12 -= 8;
      if (a3 == ++v14)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_10012DA44(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BOOL4 v58;
  char v59;
  unint64_t v61;
  void (*v62)(char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, unint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;

  v8 = type metadata accessor for DateComponents(0);
  v9 = __chkstk_darwin(v8);
  v69 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v71 = (char *)&v66 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v66 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v66 - v16;
  v70 = v18;
  v72 = *(_QWORD *)(v18 + 72);
  if (!v72)
  {
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (a2 - a1 == 0x8000000000000000 && v72 == -1)
    goto LABEL_80;
  v19 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v72 == -1)
    goto LABEL_81;
  v20 = (uint64_t)(a2 - a1) / v72;
  v75 = a1;
  v74 = a4;
  v21 = v19 / v72;
  if (v20 >= v19 / v72)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      v23 = v21 * v72;
      if (a4 < a2 || a2 + v23 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v44 = a4 + v23;
      v73 = a4 + v23;
      v75 = a2;
      if (v23 >= 1 && a1 < a2)
      {
        v46 = -v72;
        v68 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v70 + 16);
        v72 = a1;
        do
        {
          v47 = v68;
          v68(v71, v44 + v46, v8);
          v48 = a2 + v46;
          v49 = v47(v69, a2 + v46, v8);
          v50 = DateComponents.year.getter(v49);
          if ((v51 & 1) != 0
            || (v52 = v50, v53 = DateComponents.year.getter(v50), (v54 & 1) != 0)
            || (v67 = v53, v55 = DateComponents.month.getter(), (v56 & 1) != 0))
          {
            v58 = 1;
          }
          else
          {
            v66 = v55;
            v57 = DateComponents.month.getter();
            v58 = 1;
            if ((v59 & 1) == 0 && v67 >= v52)
              v58 = v52 >= v67 && v57 < v66;
          }
          v61 = a3 + v46;
          v62 = *(void (**)(char *, uint64_t))(v70 + 8);
          v62(v69, v8);
          v62(v71, v8);
          if (v58)
          {
            if (a3 < a2 || v61 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v46);
              v63 = v72;
            }
            else
            {
              v63 = v72;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(a3 + v46);
            }
            v75 += v46;
          }
          else
          {
            v64 = v73;
            v73 += v46;
            if (a3 < v64 || v61 >= v64)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v46);
              v48 = a2;
              v63 = v72;
            }
            else
            {
              v63 = v72;
              if (a3 != v64)
                swift_arrayInitWithTakeBackToFront(a3 + v46);
              v48 = a2;
            }
          }
          v44 = v73;
          if (v73 <= a4)
            break;
          a2 = v48;
          a3 += v46;
        }
        while (v48 > v63);
      }
      goto LABEL_78;
    }
  }
  else if ((v20 & 0x8000000000000000) == 0)
  {
    v22 = v20 * v72;
    if (a4 < a1 || a1 + v22 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v71 = (char *)(a4 + v22);
    v73 = a4 + v22;
    if (v22 >= 1 && a2 < a3)
    {
      v25 = *(char **)(v70 + 16);
      v69 = v25;
      do
      {
        ((void (*)(char *, unint64_t, uint64_t))v25)(v17, a2, v8);
        v26 = ((uint64_t (*)(char *, unint64_t, uint64_t))v25)(v15, a4, v8);
        v27 = DateComponents.year.getter(v26);
        if ((v28 & 1) != 0)
          goto LABEL_30;
        v29 = v27;
        v30 = DateComponents.year.getter(v27);
        if ((v31 & 1) != 0
          || (v32 = v30, v33 = DateComponents.month.getter(), (v34 & 1) != 0)
          || (v35 = v33, v36 = DateComponents.month.getter(), v37 = v35, v25 = v69, (v38 & 1) != 0)
          || v32 < v29
          || v29 >= v32 && v36 < v37)
        {
LABEL_30:
          v39 = *(void (**)(char *, uint64_t))(v70 + 8);
          v39(v15, v8);
          v39(v17, v8);
          v40 = v75;
          v41 = a2 + v72;
          if (v75 < a2 || v75 >= v41)
          {
            swift_arrayInitWithTakeFrontToBack(v75);
          }
          else if (v75 == a2)
          {
            v40 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v75);
          }
        }
        else
        {
          v42 = *(void (**)(char *, uint64_t))(v70 + 8);
          v42(v15, v8);
          v42(v17, v8);
          v40 = v75;
          v43 = v74 + v72;
          if (v75 < v74 || v75 >= v43)
          {
            swift_arrayInitWithTakeFrontToBack(v75);
          }
          else if (v75 != v74)
          {
            swift_arrayInitWithTakeBackToFront(v75);
          }
          v74 = v43;
          v41 = a2;
        }
        v75 = v40 + v72;
        a4 = v74;
        if (v74 >= (unint64_t)v71)
          break;
        a2 = v41;
      }
      while (v41 < a3);
    }
LABEL_78:
    sub_1001472FC(&v75, &v74, (uint64_t *)&v73);
    return 1;
  }
LABEL_82:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012E014(void **a1, id *a2, id *a3, id *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  id *v27;
  id *v28;
  char *v29;
  id *v30;
  id *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  id *v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  void **v48;
  id *v49;
  void **v50;
  void **v51;
  id *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  void **v58;
  id *v59;

  v8 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v9 = __chkstk_darwin(v8);
  v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v52 = a3;
  v53 = (char *)&v47 - v11;
  v12 = (char *)a2 - (char *)a1;
  v13 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v13 = (char *)a2 - (char *)a1;
  v14 = v13 >> 3;
  v15 = (char *)a3 - (char *)a2;
  v16 = v15 / 8;
  v59 = a1;
  v49 = a4;
  v58 = a4;
  if (v13 >> 3 >= v15 / 8)
  {
    if (v15 < -7)
      goto LABEL_43;
    v28 = v49;
    if (v49 != a2 || &a2[v16] <= v49)
      memmove(v49, a2, 8 * v16);
    v29 = (char *)&v28[v16];
    v57 = (void **)v29;
    v59 = a2;
    if (v15 < 8 || a1 >= a2)
      goto LABEL_42;
    v30 = v52 - 1;
    v31 = a2;
    v48 = a1;
    while (1)
    {
      v52 = a2;
      v50 = (void **)v29;
      v51 = v30 + 1;
      v33 = (void *)*((_QWORD *)v29 - 1);
      v29 -= 8;
      v32 = v33;
      v34 = *--v31;
      v35 = v32;
      v36 = v34;
      v37 = v53;
      v38 = MindfulnessSessionViewModel.endDate.getter(v36);
      v39 = v54;
      MindfulnessSessionViewModel.endDate.getter(v38);
      v40 = static Date.> infix(_:_:)(v37, v39);
      v41 = *(void (**)(char *, uint64_t))(v55 + 8);
      v42 = v39;
      v43 = v56;
      v41(v42, v56);
      v41(v37, v43);

      if ((v40 & 1) != 0)
      {
        v29 = (char *)v50;
        if (v51 != v52 || v30 >= v52)
          *v30 = *v31;
        v59 = v31;
      }
      else
      {
        v57 = (void **)v29;
        v31 = v52;
        if (v51 >= v50 && v30 < v50)
        {
          v45 = (unint64_t)v48;
          v44 = v49;
          if (v51 != v50)
            *v30 = *(id *)v29;
          goto LABEL_40;
        }
        *v30 = *(id *)v29;
      }
      v45 = (unint64_t)v48;
      v44 = v49;
LABEL_40:
      if (v29 > (char *)v44)
      {
        --v30;
        a2 = v31;
        if ((unint64_t)v31 > v45)
          continue;
      }
      goto LABEL_42;
    }
  }
  if (v12 >= -7)
  {
    v17 = v49;
    if (v49 != a1 || &a1[v14] <= v49)
      memmove(v49, a1, 8 * v14);
    v51 = &v17[v14];
    v57 = v51;
    if (v12 >= 8 && a2 < v52)
    {
      v18 = v53;
      do
      {
        v19 = *v17;
        v20 = *a2;
        v21 = v19;
        v22 = MindfulnessSessionViewModel.endDate.getter(v21);
        v23 = v54;
        MindfulnessSessionViewModel.endDate.getter(v22);
        LOBYTE(v19) = static Date.> infix(_:_:)(v18, v23);
        v24 = *(void (**)(char *, uint64_t))(v55 + 8);
        v25 = v23;
        v26 = v56;
        v24(v25, v56);
        v24(v18, v26);

        if ((v19 & 1) != 0)
        {
          v27 = a2 + 1;
          if (a1 < a2 || a1 >= v27 || a1 != a2)
            *a1 = *a2;
        }
        else
        {
          if (a1 != v17)
            *a1 = *v17;
          v58 = ++v17;
          v27 = a2;
        }
        v59 = ++a1;
        if (v17 >= v51)
          break;
        a2 = v27;
      }
      while (v27 < v52);
    }
LABEL_42:
    sub_100147308(&v59, &v58, &v57);
    return 1;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012E400()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012E424()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10012E450()
{
  uint64_t v0;

  sub_10012B5F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_10012E45C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  void *v35;
  __n128 v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *result;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;

  v2 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v2 - 8);
  v68 = v2;
  __chkstk_darwin(v2);
  v66 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  __chkstk_darwin(v4);
  v63 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = &_swiftEmptyDictionarySingleton;
  if ((unint64_t)a1 >> 62)
  {
LABEL_22:
    if (a1 < 0)
      v51 = a1;
    else
      v51 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(a1);
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_3:
      v60 = a1 & 0xC000000000000001;
      v59 = enum case for Calendar.Component.month(_:);
      v58 = enum case for Calendar.Component.year(_:);
      v10 = &_swiftEmptyDictionarySingleton;
      v11 = 4;
      v57 = xmmword_100620BC0;
      v54 = xmmword_100623630;
      v55 = v9;
      v56 = a1;
      v12 = v63;
      while (1)
      {
        if (v60)
          v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1);
        else
          v18 = *(id *)(a1 + 8 * v11);
        v19 = v18;
        if (__OFADD__(v11 - 4, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        v69 = v11 - 3;
        static Calendar.current.getter(v18);
        v20 = sub_100047110((uint64_t *)&unk_100828720);
        v21 = type metadata accessor for Calendar.Component(0);
        v70 = v10;
        v22 = *(_QWORD *)(v21 - 8);
        v23 = v19;
        v24 = (uint64_t)v8;
        v25 = *(_QWORD *)(v22 + 72);
        v26 = *(unsigned __int8 *)(v22 + 80);
        v27 = (v26 + 32) & ~v26;
        v28 = swift_allocObject(v20, v27 + 2 * v25, v26 | 7);
        *(_OWORD *)(v28 + 16) = v57;
        v29 = v28 + v27;
        v30 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104);
        v30(v29, v59, v21);
        v31 = v29 + v25;
        v8 = (char *)v24;
        v30(v31, v58, v21);
        v32 = sub_1002302F0(v28);
        swift_setDeallocating(v28);
        swift_arrayDestroy(v29, 2, v21);
        v33 = swift_deallocClassInstance(v28, 32, 7);
        v34 = v66;
        MindfulnessSessionViewModel.endDate.getter(v33);
        Calendar.dateComponents(_:from:)(v32, v34);
        v35 = v32;
        v10 = v70;
        v36 = swift_bridgeObjectRelease(v35);
        (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v34, v68, v36);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v65);
        a1 = (uint64_t)v10;
        v38 = sub_100439544(v24);
        v39 = v10[2];
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          goto LABEL_20;
        v42 = v37;
        if (v10[3] < v41)
        {
          sub_1003F80E4(v41, 1);
          v10 = v72;
          v43 = sub_100439544(v24);
          if ((v42 & 1) != (v44 & 1))
          {
            result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v62);
            __break(1u);
            return result;
          }
          v38 = v43;
        }
        if ((v42 & 1) != 0)
        {
          v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v24, v62);
          v10 = v72;
          v14 = (_QWORD *)(v72[7] + 8 * v38);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v16 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v15 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v16 >= v15 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v23);
          specialized Array._endMutation()(v17);
        }
        else
        {
          v45 = sub_100047110((uint64_t *)&unk_100828340);
          v46 = swift_allocObject(v45, 40, 7);
          *(_OWORD *)(v46 + 16) = v54;
          *(_QWORD *)(v46 + 32) = v23;
          v71 = v46;
          v47 = specialized Array._endMutation()(v46);
          a1 = v71;
          v10[(v38 >> 6) + 8] |= 1 << v38;
          (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(v61 + 32))(v10[6] + *(_QWORD *)(v61 + 72) * v38, v24, v62, v47);
          *(_QWORD *)(v10[7] + 8 * v38) = a1;
          v48 = v10[2];
          v49 = __OFADD__(v48, 1);
          v50 = v48 + 1;
          if (v49)
            goto LABEL_21;
          v10[2] = v50;
        }
        a1 = v56;
        ++v11;
        if (v69 == v55)
          return v10;
      }
    }
  }
  return &_swiftEmptyDictionarySingleton;
}

void sub_10012E8C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD *v18;
  __n128 v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v39;
  uint64_t v40;

  v39 = a1;
  v6 = type metadata accessor for DateComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100821648);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
  {
    v37 = v3;
    v14 = a2;
    v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    v38 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v33 = v14;
    v17 = swift_bridgeObjectRetain(v14);
    v35 = v9;
    v36 = a3;
    v34 = v16;
    while (1)
    {
      v38(v12, v15, v6, v17);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v12, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
      {
        a2 = v33;
        goto LABEL_20;
      }
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      if (*(_QWORD *)(a3 + 16))
      {
        v21 = sub_100439544((uint64_t)v9);
        if ((v22 & 1) != 0)
        {
          v23 = *(_QWORD *)(a3 + 56);
          v24 = *(_QWORD *)(v23 + 8 * v21);
          if (v24 < 0 || (v24 & 0x4000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(*(_QWORD *)(v23 + 8 * v21), 2);
            v25 = (uint64_t)sub_100295E7C(v24);
            swift_bridgeObjectRelease(v24);
          }
          else
          {
            v25 = v24 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(*(_QWORD *)(v23 + 8 * v21), 2);
          }
          v40 = v25;
          v26 = v37;
          sub_10012C198(&v40);
          v37 = v26;
          if (v26)
          {
            swift_release(v40);
            __break(1u);
            return;
          }
          swift_bridgeObjectRelease(v24);
          v27 = v40;
          swift_retain(v40);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
            v39 = sub_10013FD8C(0, v39[2] + 1, 1, v39);
          v29 = v39[2];
          v28 = v39[3];
          if (v29 >= v28 >> 1)
            v39 = sub_10013FD8C((_QWORD *)(v28 > 1), v29 + 1, 1, v39);
          v18 = v39;
          v39[2] = v29 + 1;
          v18[v29 + 4] = v27;
          v19 = swift_release(v27);
          v9 = v35;
          a3 = v36;
          v16 = v34;
        }
      }
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v19);
      v15 += v16;
      if (!--v13)
      {
        a2 = v33;
        v20(v12, 1, 1, v6, v17);
        goto LABEL_20;
      }
    }
  }
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
  v31 = swift_bridgeObjectRetain(a2);
  v30(v12, 1, 1, v6, v31);
LABEL_20:
  swift_bridgeObjectRelease(a2);
}

void sub_10012EB98(uint64_t a1)
{
  uint64_t v1;

  sub_100129CA8(a1, v1);
}

void sub_10012EBA0(uint64_t a1)
{
  uint64_t v1;

  sub_100129D7C(a1, v1);
}

uint64_t sub_10012EBA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012EBCC(uint64_t a1)
{
  return sub_10012B3D8(a1);
}

id sub_10012EBEC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Class isa;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[5];
  uint64_t v17;

  if (!IndexPath.row.getter(a1))
    return 0;
  v2 = sub_10012BAB0();
  if (!v2)
    return 0;
  v3 = (void *)v2;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext);
  v5 = *(void **)(v1
                + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager);
  v6 = objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController(0));
  v7 = sub_1002C26F0(v3, v4, v5);
  v8 = swift_allocObject(&unk_100787A78, 24, 7);
  *(_QWORD *)(v8 + 16) = v7;
  v9 = v7;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v11 = (void *)objc_opt_self(UIContextMenuConfiguration);
  v16[4] = sub_10012F3AC;
  v17 = v8;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1004B91FC;
  v16[3] = &unk_100787A90;
  v12 = _Block_copy(v16);
  v13 = v17;
  swift_retain_n(v8, 2);
  v14 = objc_msgSend(v11, "configurationWithIdentifier:previewProvider:actionProvider:", isa, v12, 0, swift_release(v13).n128_f64[0]);

  swift_release(v8);
  _Block_release(v12);

  swift_release(v8);
  return v14;
}

uint64_t sub_10012ED7C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[5];
  uint64_t v26;

  v5 = sub_100047110(&qword_100832500);
  __chkstk_darwin(v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)aBlock - v13;
  aBlock[0] = objc_msgSend(a1, "identifier");
  v15 = sub_100047110(&qword_100821818);
  v16 = swift_dynamicCast(v7, aBlock, v15, v8, 6);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v16)
  {
    v17(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v18(v14, v7, v8);
      v19 = swift_allocObject(&unk_1007878C0, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16, v2);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
      v20 = *(unsigned __int8 *)(v9 + 80);
      v21 = (v20 + 24) & ~v20;
      v22 = swift_allocObject(&unk_100787A28, v21 + v10, v20 | 7);
      *(_QWORD *)(v22 + 16) = v19;
      v18((char *)(v22 + v21), v12, v8);
      aBlock[4] = sub_10012F37C;
      v26 = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002D0F8;
      aBlock[3] = &unk_100787A40;
      v23 = _Block_copy(aBlock);
      objc_msgSend(a2, "addCompletion:", v23, swift_release(v26).n128_f64[0]);
      _Block_release(v23);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  else
  {
    v17(v7, 1, 1, v8);
  }
  return sub_10012F338((uint64_t)v7);
}

id sub_10012EFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  id v26;
  _QWORD aBlock[5];
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  if (!IndexPath.row.getter(v7))
    return 0;
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v13 = swift_allocObject(&unk_1007878C0, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_1007879D8, v15 + v6, v14 | 7);
  *(_QWORD *)(v16 + 16) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16 + v15, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain(v13);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  aBlock[4] = sub_10012F2D0;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004FFA0C;
  aBlock[3] = &unk_1007879F0;
  v18 = _Block_copy(aBlock);
  v19 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", 1, v17, v18);

  _Block_release(v18);
  v20 = v29;
  swift_release(v13);
  swift_release(v20);
  v21 = sub_100047110((uint64_t *)&unk_100828340);
  v22 = swift_allocObject(v21, 40, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100623630;
  *(_QWORD *)(v22 + 32) = v19;
  aBlock[0] = v22;
  specialized Array._endMutation()(v22);
  v23 = aBlock[0];
  sub_10001E724(0, &qword_100821810, UIContextualAction_ptr);
  v24 = v19;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v26 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

  return v26;
}

uint64_t sub_10012F2D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for IndexPath(0);
  return sub_10012B2AC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_10012F338(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100047110(&qword_100832500);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10012F37C()
{
  uint64_t v0;

  type metadata accessor for IndexPath(0);
  sub_10012B040(*(_QWORD *)(v0 + 16));
}

id sub_10012F3AC()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_10012F3B4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10012A8CC(a1, a2, a3, v3);
}

uint64_t sub_10012F3BC()
{
  uint64_t v0;

  return sub_100447368(v0);
}

uint64_t sub_10012F3F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100625E80);
  v2 = swift_getKeyPath(&unk_100625EA8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

double sub_10012F464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100625E38);
  v6 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(&v17, v1, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v17;
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setInteger:forKey:", v7, v9);

  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = swift_retain(v1);
  v12 = static MainActor.shared.getter(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_100787BA8, 40, 7);
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v1;
  v14 = sub_10020D9C0((uint64_t)v4, (uint64_t)&unk_100821A20, (uint64_t)v13);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_10012F5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[5] = v6;
  v4[6] = v7;
  return swift_task_switch(sub_10012F664, v6, v7);
}

uint64_t sub_10012F664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = v0[3];
  KeyPath = swift_getKeyPath(&unk_100625E38);
  v3 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(v0 + 2, v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v0[7] = v0[2];
  return swift_task_switch(sub_10012F6F4, v1, 0);
}

uint64_t sub_10012F6F4()
{
  uint64_t v0;

  sub_100031568(*(_QWORD **)(v0 + 56));
  return swift_task_switch(sub_100133D5C, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10012F730()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100625E38);
  v2 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10012F7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[3];

  v1 = sub_100047110(&qword_100821AA8);
  __chkstk_darwin(v1);
  v3 = (char *)&v17[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100625E80);
  v5 = swift_getKeyPath(&unk_100625EA8);
  static Published.subscript.getter(v17, v0, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = v17[0];
  if (v17[0])
  {
    v7 = v17[1];
    v8 = v17[2];
    swift_bridgeObjectRelease(v17[0]);
    swift_bridgeObjectRelease(v8);
    v9 = *(_QWORD *)(v7 + 16);
    v10 = type metadata accessor for ActivitySharingFriendListDateItemGroup(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (v9)
    {
      sub_100031E44(v7 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v3);
      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v3, v12, 1, v10);
    v13 = swift_bridgeObjectRelease(v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v3, 1, v10, v13) == 1)
    {
      sub_10001BE90((uint64_t)v3, &qword_100821AA8);
      return 0;
    }
    else
    {
      v14 = *(_QWORD *)&v3[*(int *)(v10 + 20)];
      swift_bridgeObjectRetain(v14);
      sub_100031DC4((uint64_t)v3);
      v15 = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease(v14);
      return v15 > 1;
    }
  }
  return result;
}

uint64_t *sub_10012F91C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  char *v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void **aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void *v57;
  double (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;

  v6 = v5;
  v48 = *v6;
  v12 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v12);
  v47 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110(&qword_100821A28);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v6);
  v18 = (char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__state;
  aBlock = 0;
  v55 = 0;
  v56 = 0;
  Published.init(initialValue:)(&aBlock, &type metadata for ActivitySharingFriendListDataProvider.State);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  v19 = OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_invitationDestinationCoordinator;
  *(uint64_t *)((char *)v6 + v19) = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InvitationDestinationCoordinator(0)), "init");
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_activitySharingClient) = (uint64_t)a1;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_fiuiFormattingManager) = (uint64_t)a2;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager) = (uint64_t)a3;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendManager) = (uint64_t)a4;
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_pauseRingsCoordinator) = (uint64_t)a5;
  v53 = a1;
  v52 = a2;
  v51 = a3;
  v50 = a4;
  v49 = a5;
  v20 = sub_100009B4C();
  swift_beginAccess((char *)v6 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__displayMode, &aBlock, 33, 0);
  v60 = v20;
  type metadata accessor for ASFriendListDisplayMode(0);
  Published.init(initialValue:)(&v60, v21);
  swift_endAccess(&aBlock);
  v22 = type metadata accessor for TaskPriority(0);
  v23 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v47, 1, 1, v22);
  type metadata accessor for MainActor(0);
  swift_retain(v6);
  v25 = static MainActor.shared.getter(v24);
  v26 = (_QWORD *)swift_allocObject(&unk_100787BD0, 40, 7);
  v26[2] = v25;
  v26[3] = &protocol witness table for MainActor;
  v26[4] = v6;
  v27 = sub_10020D9C0(v23, (uint64_t)&unk_100821A38, (uint64_t)v26);
  swift_release(v27);
  v28 = (void *)objc_opt_self(NSNotificationCenter);
  v29 = objc_msgSend(v28, "defaultCenter");
  v30 = (void *)kASFriendListChangedNotificationKey;
  v31 = (void *)objc_opt_self(NSOperationQueue);
  v32 = v30;
  v33 = objc_msgSend(v31, "mainQueue");
  v34 = swift_allocObject(&unk_100787BF8, 24, 7);
  swift_weakInit(v34 + 16, v6);
  v35 = swift_allocObject(&unk_100787C20, 32, 7);
  v36 = v48;
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v36;
  v58 = sub_100132668;
  v59 = v35;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_1000398D4;
  v57 = &unk_100787C38;
  v37 = _Block_copy(&aBlock);
  v38 = objc_msgSend(v29, "addObserverForName:object:queue:usingBlock:", v32, 0, v33, v37, swift_release(v59).n128_f64[0]);
  _Block_release(v37);
  swift_unknownObjectRelease(v38);

  v39 = objc_msgSend(v28, "defaultCenter");
  v40 = objc_msgSend((id)objc_opt_self(FIPauseRingsCoordinator), "didUpdatePauseStateNotification");
  v41 = objc_msgSend(v31, "mainQueue");
  v42 = swift_allocObject(&unk_100787BF8, 24, 7);
  swift_weakInit(v42 + 16, v6);
  v43 = swift_allocObject(&unk_100787C70, 32, 7);
  *(_QWORD *)(v43 + 16) = v42;
  *(_QWORD *)(v43 + 24) = v36;
  v58 = sub_100132670;
  v59 = v43;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_1000398D4;
  v57 = &unk_100787C88;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v39, "addObserverForName:object:queue:usingBlock:", v40, 0, v41, v44, swift_release(v59).n128_f64[0]);

  _Block_release(v44);
  swift_unknownObjectRelease(v45);

  return v6;
}

uint64_t sub_10012FE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[5] = v6;
  v4[6] = v7;
  return swift_task_switch(sub_10012FE88, v6, v7);
}

uint64_t sub_10012FE88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = v0[3];
  KeyPath = swift_getKeyPath(&unk_100625E38);
  v3 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(v0 + 2, v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v0[7] = v0[2];
  return swift_task_switch(sub_10012FF18, v1, 0);
}

uint64_t sub_10012FF18()
{
  uint64_t v0;

  sub_100031568(*(_QWORD **)(v0 + 56));
  return swift_task_switch(sub_10012FF54, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10012FF54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10012FF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t Strong;
  double result;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  v5 = sub_100047110(&qword_10081E650);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  v10 = static os_log_type_t.default.getter(v6);
  v11 = (void *)HKLogActivity;
  v12 = v10;
  if (os_log_type_enabled(HKLogActivity, v10))
  {
    v13 = v11;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v29[0] = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = _typeName(_:qualified:)(a3, 0);
    v18 = v17;
    v28 = sub_10003E8EC(v16, v17, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v14 + 4);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 12) = 2080;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kASFriendListChangedNotificationKey);
    v21 = v20;
    v28 = sub_10003E8EC(v19, v20, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v14 + 14);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "%s received notification %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  swift_beginAccess(v9, v29, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v24 = Strong;
    v25 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 1, 1, v25);
    v26 = (_QWORD *)swift_allocObject(&unk_100787CE8, 40, 7);
    v26[2] = 0;
    v26[3] = 0;
    v26[4] = v24;
    v27 = sub_10020D9C0((uint64_t)v8, (uint64_t)&unk_100821A58, (uint64_t)v26);
    *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001301CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1001301E4, 0, 0);
}

uint64_t sub_1001301E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10013024C, v2, v3);
}

uint64_t sub_10013024C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = v0[3];
  swift_release(v0[4]);
  KeyPath = swift_getKeyPath(&unk_100625E38);
  v3 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(v0 + 2, v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v0[5] = v0[2];
  return swift_task_switch(sub_1001302E0, v1, 0);
}

uint64_t sub_1001302E0()
{
  uint64_t v0;

  sub_100031568(*(_QWORD **)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100130314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_t v22;
  uint64_t Strong;
  double result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v5 = sub_100047110(&qword_10081E650);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  v10 = static os_log_type_t.default.getter(v6);
  v11 = (void *)HKLogActivity;
  v12 = v10;
  if (os_log_type_enabled(HKLogActivity, v10))
  {
    v30 = v11;
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v32[0] = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = _typeName(_:qualified:)(a3, 0);
    v17 = v16;
    v31 = sub_10003E8EC(v15, v16, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v13 + 4);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = objc_msgSend((id)objc_opt_self(FIPauseRingsCoordinator), "didUpdatePauseStateNotification");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v31 = sub_10003E8EC(v19, v21, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v13 + 14);
    swift_bridgeObjectRelease(v21);
    v22 = v30;
    _os_log_impl((void *)&_mh_execute_header, v30, v12, "%s received notification %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  swift_beginAccess(v9, v32, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v25 = Strong;
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
    v27 = (_QWORD *)swift_allocObject(&unk_100787CC0, 40, 7);
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v25;
    v28 = sub_10020D9C0((uint64_t)v8, (uint64_t)&unk_100821A48, (uint64_t)v27);
    *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  }
  return result;
}

uint64_t sub_100130588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1001305A0, 0, 0);
}

uint64_t sub_1001305A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100130608, v2, v3);
}

uint64_t sub_100130608()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = v0[3];
  swift_release(v0[4]);
  KeyPath = swift_getKeyPath(&unk_100625E38);
  v3 = swift_getKeyPath(&unk_100625E60);
  static Published.subscript.getter(v0 + 2, v1, KeyPath, v3);
  swift_release(v3);
  swift_release(KeyPath);
  v0[5] = v0[2];
  return swift_task_switch(sub_100133D64, v1, 0);
}

uint64_t sub_10013069C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[9] = a8;
  v8[10] = v13;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v9 = type metadata accessor for MainActor(0);
  v8[11] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100130718, v10, v11);
}

uint64_t sub_100130718()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  NSObject *log;
  uint64_t v21;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 88));
  v2 = static os_log_type_t.default.getter(v1);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 40);
    v21 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain_n(v6, 2);
    log = v3;
    v7 = swift_slowAlloc(32, -1);
    v8 = swift_slowAlloc(32, -1);
    v22 = v8;
    *(_DWORD *)v7 = 136315650;
    v9 = _typeName(_:qualified:)(v5, 0);
    v11 = v10;
    *(_QWORD *)(v0 + 16) = sub_10003E8EC(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v7 + 12) = 2048;
    v12 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 14);
    swift_bridgeObjectRelease(v6);
    *(_WORD *)(v7 + 22) = 2048;
    *(_QWORD *)(v0 + 16) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 24);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "%s updating with competition item count %ld friend list date item group count %ld", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 40);
  KeyPath = swift_getKeyPath(&unk_100625E80);
  v18 = swift_getKeyPath(&unk_100625EA8);
  *(_QWORD *)(v0 + 16) = v16;
  *(_QWORD *)(v0 + 24) = v14;
  *(_QWORD *)(v0 + 32) = v13;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  swift_retain(v15);
  static Published.subscript.setter(v0 + 16, v15, KeyPath, v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100130944@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void *a4@<X4>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  __n128 v83;
  void *v84;
  uint64_t v85;
  id v86;
  void *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  Swift::String v99;
  void *object;
  Swift::String v101;
  Swift::String v102;
  __n128 v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  int *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  id v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;

  v123 = a4;
  v134 = a3;
  v137 = a1;
  v118 = type metadata accessor for UUID(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v115 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v8);
  v116 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v126 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v125 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0);
  v121 = *(_QWORD *)(v12 - 8);
  v122 = v12;
  __chkstk_darwin(v12);
  v128 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v14);
  v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v17 - 8);
  v132 = v17;
  v18 = __chkstk_darwin(v17);
  v124 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v113 - v21;
  v23 = __chkstk_darwin(v20);
  v127 = (char *)&v113 - v24;
  __chkstk_darwin(v23);
  v135 = (char *)&v113 - v25;
  v26 = sub_100047110((uint64_t *)&unk_10082EDF0);
  v27 = __chkstk_darwin(v26);
  v130 = (uint64_t)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (char *)&v113 - v29;
  v31 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for AttributedString(0);
  v34 = *(_QWORD *)(v133 - 8);
  v35 = __chkstk_darwin(v133);
  v129 = (char *)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v136 = (char *)&v113 - v37;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kASDisplayContextCompanion);
  v39 = v38;
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  v41 = objc_msgSend((id)objc_opt_self(ASDisplayContext), "displayContextWithName:", v40);

  if (!v41)
  {
    v51 = type metadata accessor for ActivitySharingFriendListItem(0);
    return (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(a5, 1, 1, v51);
  }
  v114 = v10;
  v42 = v41;
  v120 = a5;
  v43 = objc_msgSend(v137, "displayName");
  if (!v43)
  {
    __break(1u);
    goto LABEL_36;
  }
  v44 = v43;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v47 = v46;

  AttributeContainer.init()(v48);
  AttributedString.init(_:attributes:)(v45, v47, v33);
  if (objc_msgSend(v137, "isMe"))
  {
    v49 = (uint64_t)v42;
    v50 = objc_msgSend(v42, "keyColorForDisplayMode:", v134);
    if (v50)
    {
      v119 = Color.init(uiColor:)(v50);
      if (!a2)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v119 = 0;
  v49 = (uint64_t)v42;
  if (!a2)
  {
LABEL_10:
    v53 = 0;
    goto LABEL_12;
  }
LABEL_9:
  if ((objc_msgSend(a2, "hasCarriedForwardGoals") & 1) != 0)
    goto LABEL_10;
  v53 = objc_msgSend(a2, "activitySummary");
LABEL_12:
  if (objc_msgSend(v137, "isMe"))
    v54 = objc_msgSend(v123, "isPaused");
  else
    v54 = 0;
  v113 = v53;
  if (v53)
  {
    v55 = v53;
  }
  else
  {
    v53 = objc_msgSend(objc_allocWithZone((Class)HKActivitySummary), "init");
    v55 = 0;
  }
  v56 = v55;
  LODWORD(v123) = (_DWORD)v54;
  objc_msgSend(v53, "setDeprecatedPauseForInternalSwiftClient:", v54);
  v57 = v134;
  sub_100047D1C(a2, v53, v137, v134, v49, (uint64_t)v30);
  v58 = (void *)v49;
  v59 = v133;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v30, 1, v133) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v136, v59);

    swift_release(v119);
    sub_10001BE90((uint64_t)v30, (uint64_t *)&unk_10082EDF0);
    v60 = type metadata accessor for ActivitySharingFriendListItem(0);
    return (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v120, 1, 1, v60);
  }
  v61 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v61(v129, v30, v59);
  sub_100048184(a2, v53, v137, v57, (uint64_t)v58, v130);
  Date.init()(v62);
  v63 = v58;
  if (a2)
  {
    v64 = objc_msgSend(a2, "startDate");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

    v65 = v131;
    v66 = v22;
    v67 = v132;
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v16, v66, v132);
    v68 = 0;
    v69 = v128;
  }
  else
  {
    v68 = 1;
    v69 = v128;
    v65 = v131;
    v67 = v132;
  }
  v70 = v124;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v16, v68, 1, v67);
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v70, v135, v67);
  v71 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v16, 1, v67) == 1)
  {
    v72 = v127;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v127, v70, v67);
    v73 = sub_10001BE90((uint64_t)v16, (uint64_t *)&unk_100828370);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v67);
    v72 = v127;
    v73 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v127, v16, v67);
  }
  v74 = v125;
  static Calendar.current.getter(v73);
  v75 = sub_100047110((uint64_t *)&unk_100828720);
  v76 = type metadata accessor for Calendar.Component(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(unsigned __int8 *)(v77 + 80);
  v79 = (v78 + 32) & ~v78;
  v80 = swift_allocObject(v75, v79 + *(_QWORD *)(v77 + 72), v78 | 7);
  *(_OWORD *)(v80 + 16) = xmmword_100622F90;
  v81 = v80 + v79;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v81, enum case for Calendar.Component.day(_:), v76);
  v82 = sub_1002302F0(v80);
  swift_setDeallocating(v80);
  swift_arrayDestroy(v81, 1, v76);
  swift_deallocClassInstance(v80, 32, 7);
  Calendar.dateComponents(_:from:to:)(v82, v72, v135);
  v83 = swift_bridgeObjectRelease(v82);
  (*(void (**)(char *, uint64_t, __n128))(v126 + 8))(v74, v114, v83);
  if ((objc_msgSend(v137, "isMe") & 1) == 0)
  {
    v86 = objc_msgSend(v137, "UUID");
    if (v86)
    {
      v87 = v86;
      v88 = v115;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v89 = v117;
      v90 = v116;
      v91 = v118;
      (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v116, v88, v118);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v90, 0, 1, v91);
      v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48))(v90, 1, v91);
      if ((_DWORD)v92 != 1)
      {
        v93 = v90;
        v85 = UUID.uuidString.getter(v92);
        v84 = v94;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v93, v91);
        goto LABEL_31;
      }
LABEL_38:
      __break(1u);
      JUMPOUT(0x1001313E0);
    }
LABEL_37:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56))(v116, 1, 1, v118);
    goto LABEL_38;
  }
  v84 = (void *)0xE200000000000000;
  v85 = 25965;
LABEL_31:
  v139 = 0;
  v140 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v140);
  v139 = 0x725F646E65697266;
  v140 = 0xEB000000005F776FLL;
  v96 = DateComponents.day.getter(v95);
  if ((v97 & 1) != 0)
    v98 = 0;
  else
    v98 = v96;
  v138 = v98;
  v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v99._object;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(object);
  v101._countAndFlagsBits = 95;
  v101._object = (void *)0xE100000000000000;
  String.append(_:)(v101);
  v102._countAndFlagsBits = v85;
  v102._object = v84;
  String.append(_:)(v102);

  v103 = swift_bridgeObjectRelease(v84);
  v104 = v139;
  v105 = v140;
  (*(void (**)(char *, uint64_t, __n128))(v121 + 8))(v69, v122, v103);
  v106 = v132;
  v107 = *(void (**)(char *, uint64_t))(v131 + 8);
  v107(v72, v132);
  v107(v135, v106);
  v108 = (int *)type metadata accessor for ActivitySharingFriendListItem(0);
  v109 = v120;
  v110 = v133;
  v71(&v120[v108[6]], v136, v133);
  v71(&v109[v108[7]], v129, v110);
  v111 = v119;
  *(_QWORD *)v109 = v137;
  *((_QWORD *)v109 + 1) = v111;
  sub_100045AD4(v130, (uint64_t)&v109[v108[8]], (uint64_t *)&unk_10082EDF0);
  *(_QWORD *)&v109[v108[9]] = v113;
  v109[v108[10]] = (char)v123;
  v112 = (uint64_t *)&v109[v108[11]];
  *v112 = v104;
  v112[1] = v105;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v108 - 1) + 56))(v109, 0, 1, v108);
  return v137;
}

uint64_t sub_100131410(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[24] = a1;
  v2[25] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[26] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[27] = v4;
  v2[28] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110((uint64_t *)&unk_10082E690);
  v2[29] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v6);
  v2[31] = swift_task_alloc(v6);
  v2[32] = swift_task_alloc(v6);
  v2[33] = swift_task_alloc(v6);
  v2[34] = swift_task_alloc(v6);
  return swift_task_switch(sub_1001314CC, v1, 0);
}

uint64_t sub_1001314CC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  Swift::Int v11;
  unsigned __int8 v12;
  id v13;
  unint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  double v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id, _QWORD, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  CHWorkoutDetailHeartRateTableViewCell *v46;
  void *v47;
  NSString v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 200)+ OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager), "allFriends");
  if (!v1)
  {
    v25 = static os_log_type_t.error.getter(0);
    v26 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Failed to recieve friends list, returning early.", 48, 2, &_swiftEmptyArrayStorage);

LABEL_31:
    v58 = *(_QWORD *)(v0 + 264);
    v60 = *(_QWORD *)(v0 + 248);
    v59 = *(_QWORD *)(v0 + 256);
    v61 = *(_QWORD *)(v0 + 240);
    v62 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v2 = v1;
  v3 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
  v4 = sub_10001E6E4((unint64_t *)&qword_10082E5A0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = (unint64_t *)&_swiftEmptySetSingleton;
    if (v5 < 0)
      v7 = v5;
    else
      v7 = v5 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = __CocoaSet.Iterator.next()(v8);
    if (v9)
    {
      v10 = (id *)(v0 + 184);
      do
      {
        *(_QWORD *)(v0 + 168) = v9;
        swift_dynamicCast(v0 + 184, v0 + 168, (char *)&type metadata for Swift.AnyObject + 8, v3, 7);
        v12 = objc_msgSend(*v10, "hasInviteRequestFromMe");
        v13 = *v10;
        if ((v12 & 1) != 0)
        {
          v14 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
          if (*((_QWORD *)&_swiftEmptySetSingleton + 3) <= v14)
          {
            sub_10014337C(v14 + 1);
            v6 = (unint64_t *)&_swiftEmptySetSingleton;
          }
          v15 = v13;
          v11 = NSObject._rawHashValue(seed:)(*((_QWORD *)&_swiftEmptySetSingleton + 5));
          v16 = (char *)&_swiftEmptySetSingleton + 56;
          v17 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
          v18 = v11 & ~v17;
          v19 = v18 >> 6;
          if (((-1 << v18) & ~*((_QWORD *)&_swiftEmptySetSingleton + (v18 >> 6) + 7)) != 0)
          {
            v20 = __clz(__rbit64((-1 << v18) & ~*((_QWORD *)&_swiftEmptySetSingleton + (v18 >> 6) + 7))) | v18 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v21 = 0;
            v22 = (unint64_t)(63 - v17) >> 6;
            do
            {
              if (++v19 == v22 && (v21 & 1) != 0)
              {
                __break(1u);
                goto LABEL_32;
              }
              v23 = v19 == v22;
              if (v19 == v22)
                v19 = 0;
              v21 |= v23;
              v24 = *(_QWORD *)&v16[8 * v19];
            }
            while (v24 == -1);
            v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          }
          *(_QWORD *)&v16[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
          *(_QWORD *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + 8 * v20) = v13;
          ++*((_QWORD *)&_swiftEmptySetSingleton + 2);
        }
        else
        {

        }
        v9 = __CocoaSet.Iterator.next()(v11);
      }
      while (v9);
    }
    swift_release(v8);
  }
  else
  {
    v6 = sub_1001322BC(v5);
  }
  v27 = *(_QWORD *)(v0 + 192);
  v28 = *(void **)v27;
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v27 + 8);
  *(_OWORD *)(v0 + 136) = *(_OWORD *)(v27 + 24);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v27 + 40);
  v29 = v28;
  sub_100133118(v0 + 120);
  sub_100133118(v0 + 136);
  sub_100126C98((_QWORD *)(v0 + 160));
  sub_100132CE8((uint64_t)v6, v27);
  v31 = v30;
  *(_QWORD *)(v0 + 280) = v30;

  sub_100128D54(v0 + 120);
  sub_100128D54(v0 + 136);
  sub_1000478F4((_QWORD *)(v0 + 160));
  *(_QWORD *)&v32 = swift_release(v6).n128_u64[0];
  if (!v31)
    goto LABEL_31;
  v33 = objc_msgSend(v31, "UUID", v32);
  v15 = *(id *)(v0 + 272);
  if (v33)
  {
    v34 = v33;
    v36 = *(_QWORD *)(v0 + 216);
    v35 = *(_QWORD *)(v0 + 224);
    v37 = *(_QWORD *)(v0 + 208);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    (*(void (**)(id, uint64_t, uint64_t))(v36 + 32))(v15, v35, v37);
    v38 = *(void (**)(id, _QWORD, uint64_t, uint64_t))(v36 + 56);
    *(_QWORD *)(v0 + 288) = v38;
    v38(v15, 0, 1, v37);
    result = (*(uint64_t (**)(id, uint64_t, uint64_t))(v36 + 48))(v15, 1, v37);
    if ((_DWORD)result != 1)
    {
      v40 = v0 + 16;
      v41 = *(_QWORD *)(v0 + 272);
      v42 = *(_QWORD *)(v0 + 208);
      v43 = *(_QWORD *)(v0 + 216);
      v44 = *(_QWORD *)(v0 + 200);
      UUID.uuidString.getter(result);
      v46 = v45;
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
      v47 = *(void **)(v44 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_activitySharingClient);
      v48 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 296) = v48;
      swift_bridgeObjectRelease(v46, v49, v50, v51, v52, v53, v54, v55);
      *(_QWORD *)(v0 + 56) = v0 + 312;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1001319C8;
      v56 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v57 = (_QWORD *)(v0 + 80);
      v57[1] = 0x40000000;
      v57[2] = sub_1003362E4;
      v57[3] = &unk_100787D00;
      v57[4] = v56;
      objc_msgSend(v47, "withdrawFriendInviteToFriendUUID:completion:", v48, v57);
      return swift_continuation_await(v40);
    }
  }
  else
  {
LABEL_32:
    result = (*(uint64_t (**)(id, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(v15, 1, 1, *(_QWORD *)(v0 + 208));
  }
  __break(1u);
  return result;
}

uint64_t sub_1001319C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 304) = v2;
  if (v2)
    v3 = sub_100131C60;
  else
    v3 = sub_100131A28;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_100131A28()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  id v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  uint64_t v33;

  v2 = static os_log_type_t.default.getter(v1);
  v3 = (void *)HKLogActivity;
  v4 = os_log_type_enabled(HKLogActivity, v2);
  v5 = *(void **)(v0 + 280);
  if (v4)
  {
    v6 = v5;
    log = v3;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v33 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = objc_msgSend(v6, "UUID");
    if (v9)
    {
      v10 = v9;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    v12 = *(void **)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 232);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 288))(v14, v11, 1, *(_QWORD *)(v0 + 208));
    sub_100045AD4(v14, v13, (uint64_t *)&unk_10082E690);
    v16 = Optional.description.getter(v15);
    v18 = v17;
    sub_10001BE90(v13, (uint64_t *)&unk_10082E690);
    *(_QWORD *)(v0 + 176) = sub_10003E8EC(v16, (unint64_t)v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);

    _os_log_impl((void *)&_mh_execute_header, log, v2, "Successful withdrew invite from friend with UUID: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v26 = *(_QWORD *)(v0 + 264);
  v28 = *(_QWORD *)(v0 + 248);
  v27 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_100131C60(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  void *v5;
  id v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  CHWorkoutDetailHeartRateTableViewCell *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  NSObject *log;
  uint64_t v36;

  v2 = *(void **)(v1 + 296);
  swift_willThrow(a1);

  v4 = static os_log_type_t.error.getter(v3);
  v5 = (void *)HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    v6 = *(id *)(v1 + 280);
    log = v5;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v36 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = objc_msgSend(v6, "UUID");
    if (v9)
    {
      v10 = v9;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    v34 = *(_QWORD *)(v1 + 304);
    v14 = *(void **)(v1 + 280);
    v16 = *(_QWORD *)(v1 + 240);
    v15 = *(_QWORD *)(v1 + 248);
    v17 = *(_QWORD *)(v1 + 232);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v1 + 288))(v16, v11, 1, *(_QWORD *)(v1 + 208));
    sub_100045AD4(v16, v15, (uint64_t *)&unk_10082E690);
    v18 = Optional.description.getter(v17);
    v20 = v19;
    sub_10001BE90(v15, (uint64_t *)&unk_10082E690);
    *(_QWORD *)(v1 + 152) = sub_10003E8EC(v18, (unint64_t)v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v7 + 4);
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);

    v13 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v4, "Failed to withdraw invite from friend with UUID: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v12 = v34;
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 304);
    v13 = *(NSObject **)(v1 + 280);
  }
  swift_errorRelease(v12);

  v28 = *(_QWORD *)(v1 + 264);
  v30 = *(_QWORD *)(v1 + 248);
  v29 = *(_QWORD *)(v1 + 256);
  v31 = *(_QWORD *)(v1 + 240);
  v32 = *(_QWORD *)(v1 + 224);
  swift_task_dealloc(*(_QWORD *)(v1 + 272));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_100131EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__state;
  v2 = sub_100047110(&qword_100821A28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__displayMode;
  v4 = sub_100047110(&qword_100821AB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_invitationDestinationCoordinator));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100131F8C()
{
  uint64_t v0;

  sub_100131EB0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100131FA4()
{
  return type metadata accessor for ActivitySharingFriendListDataProvider(0);
}

unint64_t *assignWithCopy for ActivitySharingFriendListDataProvider.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      v10 = a2[1];
      a1[1] = v10;
      v11 = a2[2];
      a1[2] = v11;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      return a1;
    }
LABEL_7:
    v12 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v12;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ActivitySharingFriendListDataProvider.State(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[1]);
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingFriendListDataProvider.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ActivitySharingFriendListDataProvider.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1001321D0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1001321E8(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t sub_100132208@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ActivitySharingFriendListDataProvider(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100132250(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100821A1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA380;
  return sub_10012F5F8(a1, v4, v5, v6);
}

unint64_t *sub_1001322BC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100132418((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_100132418((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

unint64_t *sub_100132418(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    result = (unint64_t *)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 8 * v13), "hasInviteRequestFromMe");
    if ((_DWORD)result)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_100434F30(v4, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    goto LABEL_24;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001325B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100821A34);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA380;
  return sub_10012FE1C(a1, v4, v5, v6);
}

uint64_t sub_100132620()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100132644()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100132668(uint64_t a1)
{
  uint64_t v1;

  return sub_10012FF84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100132670(uint64_t a1)
{
  uint64_t v1;

  return sub_100130314(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10013267C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100821A44);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000EA380;
  v3[3] = v2;
  return swift_task_switch(sub_1001305A0, 0, 0);
}

uint64_t sub_1001326E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013270C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100821A54);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000EA380;
  v3[3] = v2;
  return swift_task_switch(sub_1001301E4, 0, 0);
}

_QWORD *sub_10013276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __n128 v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;

  v4 = v3;
  v52 = a2;
  v53 = a3;
  v6 = sub_100047110((uint64_t *)&unk_100828370);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v44 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - v13;
  v15 = type metadata accessor for ActivitySharingFriendListDateItemGroup(0);
  v50 = *(_QWORD *)(v15 - 8);
  v51 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  result = _swiftEmptyArrayStorage;
  if (v18)
  {
    v45 = v17;
    v56 = _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_100031D50(0, v18 & ~(v18 >> 63), 0);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v20 = 0;
      v54 = v56;
      v55 = v4;
      v46 = a1 & 0xC000000000000001;
      v47 = v18;
      v48 = v8;
      v49 = a1;
      v17 = v45;
      while (1)
      {
        if (v18 == v20)
        {
          __break(1u);
LABEL_21:
          if (a1 < 0)
            v43 = a1;
          else
            v43 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v18 = _CocoaArrayWrapper.endIndex.getter(v43);
          swift_bridgeObjectRelease(a1);
          goto LABEL_3;
        }
        v21 = v46
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a1)
            : *(id *)(a1 + 8 * v20 + 32);
        v22 = v21;
        v23 = objc_msgSend(v21, "startDate");
        if (!v23)
          break;
        v24 = v23;
        v25 = v9;
        v26 = v14;
        v27 = v10;
        v28 = v44;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

        v29 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
        v30 = v28;
        v10 = v27;
        v14 = v26;
        v9 = v25;
        v17 = v45;
        v29(v8, v30, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
        v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
        if ((_DWORD)v31 == 1)
          goto LABEL_14;
        v29(v14, v8, v9);
LABEL_15:
        v32 = objc_msgSend(v22, "rows");
        v33 = sub_10001E724(0, &qword_100821A80, ASFriendListRow_ptr);
        v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

        v35 = v52;
        swift_retain(v52);
        v36 = v55;
        v37 = sub_100047968(v34, v35, v53);
        v55 = v36;
        swift_bridgeObjectRelease(v34);
        v38 = swift_release(v35);
        (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))(v17, v14, v9, v38);

        *(_QWORD *)&v17[*(int *)(v51 + 20)] = v37;
        v39 = v54;
        v56 = v54;
        v41 = v54[2];
        v40 = v54[3];
        v4 = v41 + 1;
        if (v41 >= v40 >> 1)
        {
          sub_100031D50(v40 > 1, v41 + 1, 1);
          v17 = v45;
          v39 = v56;
        }
        ++v20;
        v39[2] = v4;
        v42 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
        v54 = v39;
        sub_100047C88((uint64_t)v17, (uint64_t)v39 + v42 + *(_QWORD *)(v50 + 72) * v41, type metadata accessor for ActivitySharingFriendListDateItemGroup);
        v18 = v47;
        v8 = v48;
        a1 = v49;
        if (v47 == v20)
          return v54;
      }
      v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_14:
      Date.init()(v31);
      sub_10001BE90((uint64_t)v8, (uint64_t *)&unk_100828370);
      goto LABEL_15;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100132B44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = result;
  v6 = 0;
  v7 = result + 56;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_22;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v14 >= v11)
      return 0;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return 0;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return 0;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 3;
          if (v14 + 3 >= v11)
            return 0;
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_22:
    v17 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    if (*v17 == a2 && v19 == a3)
    {
      v18 = a2;
      v19 = a3;
LABEL_29:
      swift_bridgeObjectRetain(v19);
      return v18;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, *v17, v17[1], 0);
    if ((result & 1) != 0)
      goto LABEL_29;
  }
  v16 = v14 + 4;
  if (v16 >= v11)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return 0;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_100132CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  CHWorkoutDetailHeartRateTableViewCell *v28;
  void *v29;
  __int128 v30;
  id v31;
  CHWorkoutDetailHeartRateTableViewCell *v32;
  CHWorkoutDetailHeartRateTableViewCell *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  const char *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v52;
  void *v53;
  _QWORD v54[5];
  __int128 v55;
  _OWORD v56[2];
  uint64_t v57;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
    v6 = sub_10001E6E4((unint64_t *)&qword_10082E5A0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
    v7 = Set.Iterator.init(_cocoa:)(v54, v4, v5, v6);
    v2 = v54[0];
    v50 = v54[1];
    v8 = v54[2];
    v9 = v54[3];
    v10 = v54[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v50 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v49 = (unint64_t)(v8 + 64) >> 6;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v15 = __CocoaSet.Iterator.next()(v7);
  if (!v15)
    goto LABEL_40;
  v16 = v15;
  v52 = v15;
  v17 = sub_10001E724(0, (unint64_t *)&qword_100821A60, ASFriend_ptr);
  swift_unknownObjectRetain(v16);
  swift_dynamicCast(&v53, &v52, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
  v18 = v53;
  swift_unknownObjectRelease(v16);
  v19 = v9;
  v20 = v10;
  if (!v18)
    goto LABEL_40;
  while (1)
  {
    v24 = objc_msgSend(v18, "contact");
    if (!v24)
      goto LABEL_42;
    v25 = v24;
    v26 = objc_msgSend(v24, "relationship");

    v27 = objc_msgSend(v26, "addresses");
    if (!v27)
      goto LABEL_43;
    v28 = (CHWorkoutDetailHeartRateTableViewCell *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for String, &protocol witness table for String);

    v29 = *(void **)a2;
    v56[0] = *(_OWORD *)(a2 + 8);
    v30 = v56[0];
    v55 = *(_OWORD *)(a2 + 24);
    v57 = *(_QWORD *)(a2 + 40);
    v31 = v29;
    sub_100133118((uint64_t)v56);
    sub_100133118((uint64_t)&v55);
    sub_100126C98(&v57);
    sub_100132B44((uint64_t)v28, v30, *((uint64_t *)&v30 + 1));
    v33 = v32;

    sub_100128D54((uint64_t)v56);
    sub_100128D54((uint64_t)&v55);
    sub_1000478F4(&v57);
    swift_bridgeObjectRelease(v28, v34, v35, v36, v37, v38, v39, v40);
    if (v33)
    {
      swift_bridgeObjectRelease(v33, v41, v42, v43, v44, v45, v46, v47);
      goto LABEL_40;
    }

    v9 = v19;
    v10 = v20;
    if (v2 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v10)
      break;
    v20 = (v10 - 1) & v10;
    v21 = __clz(__rbit64(v10)) | (v9 << 6);
    v19 = v9;
LABEL_27:
    v18 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v21);
    if (!v18)
      goto LABEL_40;
  }
  v19 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  if (v19 >= v49)
    goto LABEL_40;
  v22 = *(_QWORD *)(v50 + 8 * v19);
  if (v22)
  {
LABEL_26:
    v20 = (v22 - 1) & v22;
    v21 = __clz(__rbit64(v22)) + (v19 << 6);
    goto LABEL_27;
  }
  v23 = v9 + 2;
  if (v9 + 2 >= v49)
    goto LABEL_40;
  v22 = *(_QWORD *)(v50 + 8 * v23);
  if (v22)
    goto LABEL_25;
  v23 = v9 + 3;
  if (v9 + 3 >= v49)
    goto LABEL_40;
  v22 = *(_QWORD *)(v50 + 8 * v23);
  if (v22)
    goto LABEL_25;
  v23 = v9 + 4;
  if (v9 + 4 >= v49)
    goto LABEL_40;
  v22 = *(_QWORD *)(v50 + 8 * v23);
  if (v22)
  {
LABEL_25:
    v19 = v23;
    goto LABEL_26;
  }
  v19 = v9 + 5;
  if (v9 + 5 >= v49)
    goto LABEL_40;
  v22 = *(_QWORD *)(v50 + 8 * v19);
  if (v22)
    goto LABEL_26;
  v48 = v9 + 6;
  while (v49 != v48)
  {
    v22 = *(_QWORD *)(v50 + 8 * v48++);
    if (v22)
    {
      v19 = v48 - 1;
      goto LABEL_26;
    }
  }
LABEL_40:
  sub_100133140(v2);
}

uint64_t sub_100133118(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100133140(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100133148()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10013318C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100821A94);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000DA0E4;
  return sub_10013069C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100133234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  return swift_task_switch(sub_100133254, v4, 0);
}

uint64_t sub_100133254()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;
  void *v18;
  NSString v19;
  NSString v20;
  NSString v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = sub_10001E724(0, &qword_100821AC0, IMServiceImpl_ptr);
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "iMessageService");
  v3 = (id)IMPreferredAccountForService();
  v0[27] = v3;

  if (v3 && (v4 = objc_msgSend(v3, "displayName")) != 0)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  v0[28] = v8;
  swift_bridgeObjectRetain(v0[23]);
  if (ASManateeContainerEnabled(v9))
  {
    v11 = v0[22];
    v10 = v0[23];
    v12 = sub_100047110(&qword_100820020);
    v13 = swift_allocObject(v12, 48, 7);
    v0[29] = v13;
    *(_OWORD *)(v13 + 16) = xmmword_100622F90;
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = v10;
    v14 = dword_10083838C;
    swift_bridgeObjectRetain(v10);
    v15 = (_QWORD *)swift_task_alloc(v14);
    v0[30] = v15;
    *v15 = v0;
    v15[1] = sub_100133494;
    return sub_1004FB02C(v13, v6, v8);
  }
  else
  {
    v17 = v0 + 2;
    v18 = *(void **)(v0[26] + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_activitySharingClient);
    v19 = String._bridgeToObjectiveC()();
    v0[32] = v19;
    v20 = String._bridgeToObjectiveC()();
    v0[33] = v20;
    swift_bridgeObjectRelease(v8);
    v21 = String._bridgeToObjectiveC()();
    v0[34] = v21;
    v0[7] = (char *)v0 + 292;
    v0[2] = v0;
    v0[3] = sub_1001336C4;
    v22 = swift_continuation_init(v0 + 2, 1);
    v0[10] = _NSConcreteStackBlock;
    v23 = v0 + 10;
    v23[1] = 0x40000000;
    v23[2] = sub_1003362E4;
    v23[3] = &unk_100787D40;
    v23[4] = v22;
    objc_msgSend(v18, "sendFriendInviteToDestination:callerID:serviceIdentifier:completion:", v19, v20, v21, v23);
    return swift_continuation_await(v17);
  }
}

uint64_t sub_100133494()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  v5 = v2[28];
  v4 = v2[29];
  v6 = v2[26];
  if (v0)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    v7 = sub_1001338E0;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    v7 = sub_100133528;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100133528(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v14;

  v2 = static os_log_type_t.default.getter(a1);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    v5 = *(void **)(v1 + 216);
    v7 = *(_QWORD *)(v1 + 176);
    v6 = *(_QWORD *)(v1 + 184);
    swift_bridgeObjectRetain(v6);
    v8 = v3;
    v9 = swift_slowAlloc(18, -1);
    v10 = swift_slowAlloc(32, -1);
    v14 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 152) = sub_10003E8EC(v7, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v9 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v9 + 12) = 1024;
    *(_DWORD *)(v1 + 288) = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 288, v1 + 292, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v8, v4, "Sending friend request invite to destination=[%s] success=%{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v12 = *(_QWORD *)(v1 + 184);

    v11 = swift_bridgeObjectRelease(v12);
  }
  return (*(uint64_t (**)(uint64_t, __n128))(v1 + 8))(1, v11);
}

uint64_t sub_1001336C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 280) = v2;
  if (v2)
    v3 = sub_100133B10;
  else
    v3 = sub_100133724;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 208), 0);
}

uint64_t sub_100133724()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  void *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 264);
  v2 = *(void **)(v0 + 256);
  v3 = *(unsigned __int8 *)(v0 + 292);

  v5 = static os_log_type_t.default.getter(v4);
  v6 = (void *)HKLogActivity;
  v7 = v5;
  if (os_log_type_enabled(HKLogActivity, v5))
  {
    v16 = *(void **)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRetain(v8);
    v10 = v6;
    v11 = swift_slowAlloc(18, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 152) = sub_10003E8EC(v9, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v11 + 4);
    swift_bridgeObjectRelease_n(v8, 3);
    *(_WORD *)(v11 + 12) = 1024;
    *(_DWORD *)(v0 + 288) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 292, v11 + 14);
    _os_log_impl((void *)&_mh_execute_header, v10, v7, "Sending friend request invite to destination=[%s] success=%{BOOL}d", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v14 = *(_QWORD *)(v0 + 184);

    v13 = swift_bridgeObjectRelease(v14);
  }
  return (*(uint64_t (**)(uint64_t, __n128))(v0 + 8))(v3, v13);
}

uint64_t sub_1001338E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *log;
  void *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + 248);
  v3 = static os_log_type_t.error.getter(a1);
  v4 = (void *)HKLogActivity;
  v5 = v3;
  v6 = os_log_type_enabled(HKLogActivity, v3);
  swift_errorRetain(v2);
  if (v6)
  {
    v17 = *(void **)(v1 + 216);
    v7 = *(_QWORD *)(v1 + 184);
    v8 = *(_QWORD *)(v1 + 176);
    swift_bridgeObjectRetain(v7);
    swift_errorRetain(v2);
    log = v4;
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v18 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 144) = sub_10003E8EC(v8, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue(v2, v1 + 160, v1 + 120);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
    v13 = v12;
    *(_QWORD *)(v1 + 168) = sub_10003E8EC(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v1 + 176, v9 + 14);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Failed sending friend request invite to destination=[%s] error=%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 184);

    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_100133B10()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  void *v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *log;
  void *v19;
  uint64_t v20[2];

  v1 = *(void **)(v0 + 272);
  v3 = *(void **)(v0 + 256);
  v2 = *(void **)(v0 + 264);
  swift_willThrow();

  v4 = *(_QWORD *)(v0 + 280);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = (void *)HKLogActivity;
  v8 = v6;
  LOBYTE(v1) = os_log_type_enabled(HKLogActivity, v6);
  swift_errorRetain(v4);
  if ((v1 & 1) != 0)
  {
    v19 = *(void **)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRetain(v9);
    swift_errorRetain(v4);
    log = v7;
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v20[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 144) = sub_10003E8EC(v10, v9, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v11 + 4);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue(v4, v0 + 160, v0 + 120);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v15 = v14;
    *(_QWORD *)(v0 + 168) = sub_10003E8EC(v13, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 14);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed sending friend request invite to destination=[%s] error=%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 184);

    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_100133D68()
{
  id v0;
  void *v1;
  NSString *v2;
  id v3;
  id v4;

  v0 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  v1 = (void *)objc_opt_self(UITraitCollection);
  v2 = UIContentSizeCategoryLarge;
  v3 = objc_msgSend(v1, "traitCollectionWithPreferredContentSizeCategory:", v2);

  v4 = objc_msgSend(v0, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", v3);
  if (v4)
    qword_100869E10 = (uint64_t)v4;
  else
    __break(1u);
}

id sub_100133E38()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v0, "setRoundingMode:", 2);
  objc_msgSend(v0, "setNumberStyle:", 1);
  objc_msgSend(v0, "setMaximumFractionDigits:", 0);
  v1 = objc_msgSend(objc_allocWithZone((Class)NSLengthFormatter), "init");
  objc_msgSend(v1, "setNumberFormatter:", v0);
  objc_msgSend(v1, "setUnitStyle:", 2);

  return v1;
}

void sub_100133EE8(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  CHWorkoutDetailHeartRateTableViewCell *v12;
  const char *v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  CHWorkoutDetailHeartRateTableViewCell *v25;
  CHWorkoutDetailHeartRateTableViewCell *v26;
  id v27;
  id v28;
  uint64_t v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  uint64_t v32;
  const char *v33;
  CHWorkoutDetailHeartRateTableViewCell *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  unint64_t v62;

  v5 = *(void **)(v2 + 32);
  if (v5)
  {
    v6 = objc_msgSend(v5, "workoutConfiguration");
    v7 = objc_msgSend(v6, "activityType");

  }
  else
  {
    v7 = objc_msgSend(*(id *)(v2 + 24), "workoutActivityType");
  }
  v8 = (void *)objc_opt_self(FIUIFormattingManager);
  v9 = objc_msgSend(v8, "localizedShortCadenceUnitStringForActivityType:", v7);
  if (v9)
  {
    v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v62 = sub_100038CA0();
    StringProtocol.localizedUppercase.getter(&type metadata for String, v62);
    v14 = (CHWorkoutDetailHeartRateTableViewCell *)v13;
    swift_bridgeObjectRelease(v12, v13, v15, v16, v17, v18, v19, v20);
    v21 = type metadata accessor for WorkoutChartDataElement(0);
    v22 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + *(int *)(v21 + 24)));
    v23 = objc_msgSend(v8, "stringWithNumber:decimalPrecision:", v22, 1);

    if (v23)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v27 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + *(int *)(v21 + 28)));
      v28 = objc_msgSend(v8, "stringWithNumber:decimalPrecision:", v27, 1);

      if (v28)
      {
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v31 = v30;

        v32 = StringProtocol.localizedUppercase.getter(&type metadata for String, v62);
        v34 = (CHWorkoutDetailHeartRateTableViewCell *)v33;
        swift_bridgeObjectRelease(v14, v33, v35, v36, v37, v38, v39, v40);
        sub_10013538C(v24, (uint64_t)v26, v29, (uint64_t)v31, v32, (uint64_t)v34, a2);
        swift_bridgeObjectRelease(v26, v41, v42, v43, v44, v45, v46, v47);
        swift_bridgeObjectRelease(v31, v48, v49, v50, v51, v52, v53, v54);
        swift_bridgeObjectRelease(v34, v55, v56, v57, v58, v59, v60, v61);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    sub_100135570(a2);
  }
}

id sub_100134160(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  id result;
  void *v7;
  id v8;
  id v9;
  void *v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  CHWorkoutDetailHeartRateTableViewCell *v12;
  uint64_t v13;
  id v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  CHWorkoutDetailHeartRateTableViewCell *v24;
  id v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  CHWorkoutDetailHeartRateTableViewCell *v35;
  CHWorkoutDetailHeartRateTableViewCell *v36;
  unint64_t v37;
  uint64_t v38;
  const char *v39;
  CHWorkoutDetailHeartRateTableViewCell *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;

  v5 = *(void **)(v2 + 16);
  result = objc_msgSend(v5, "unitManager");
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend(result, "userDistanceElevationUnit");

    v9 = objc_msgSend(v5, "localizedShortUnitStringForDistanceUnit:", v8);
    if (v9)
    {
      v10 = v9;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = type metadata accessor for WorkoutChartDataElement(0);
      v14 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", v8, 0, 1, *(double *)(a1 + *(int *)(v13 + 24)));
      if (v14)
      {
        v22 = v14;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v24 = v23;

        v25 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", v8, 0, 1, *(double *)(a1 + *(int *)(v13 + 28)));
        if (v25)
        {
          v33 = v25;
          v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v36 = v35;

          v37 = sub_100038CA0();
          v38 = StringProtocol.localizedUppercase.getter(&type metadata for String, v37);
          v40 = (CHWorkoutDetailHeartRateTableViewCell *)v39;
          swift_bridgeObjectRelease(v12, v39, v41, v42, v43, v44, v45, v46);
          v47 = sub_10013538C(v69, (uint64_t)v24, v34, (uint64_t)v36, v38, (uint64_t)v40, a2);
          swift_bridgeObjectRelease(v24, v48, v49, v50, v51, v52, v53, v54);
          swift_bridgeObjectRelease(v36, v55, v56, v57, v58, v59, v60, v61);
          swift_bridgeObjectRelease(v40, v62, v63, v64, v65, v66, v67, v68);
          return v47;
        }
        swift_bridgeObjectRelease(v12, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        v24 = v12;
      }
      swift_bridgeObjectRelease(v24, v15, v16, v17, v18, v19, v20, v21);
    }
    return sub_100135570(a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100134350(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  id v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  CHWorkoutDetailHeartRateTableViewCell *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  uint64_t v24;
  id result;
  void *v26;
  NSString v27;
  id v28;
  CHWorkoutDetailHeartRateTableViewCell *v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  unint64_t v31;
  const char *v32;
  CHWorkoutDetailHeartRateTableViewCell *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  const char *v41;
  CHWorkoutDetailHeartRateTableViewCell *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;

  v5 = *(void **)(v2 + 16);
  v6 = type metadata accessor for WorkoutChartDataElement(0);
  v7 = objc_msgSend(v5, "localizedStringWithBeatsPerMinute:", *(double *)(a1 + *(int *)(v6 + 24)));
  if (!v7)
    return sub_100135570(a2);
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v11 = v10;

  v12 = objc_msgSend(v5, "localizedStringWithBeatsPerMinute:", *(double *)(a1 + *(int *)(v6 + 28)));
  if (!v12)
  {
    swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
    return sub_100135570(a2);
  }
  v20 = v12;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v23 = v22;

  result = (id)FIUIBundle(v24);
  if (result)
  {
    v26 = result;
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v30 = v29;

    v31 = sub_100038CA0();
    StringProtocol.localizedUppercase.getter(&type metadata for String, v31);
    v33 = (CHWorkoutDetailHeartRateTableViewCell *)v32;
    swift_bridgeObjectRelease(v30, v32, v34, v35, v36, v37, v38, v39);
    v40 = StringProtocol.localizedUppercase.getter(&type metadata for String, v31);
    v42 = (CHWorkoutDetailHeartRateTableViewCell *)v41;
    swift_bridgeObjectRelease(v33, v41, v43, v44, v45, v46, v47, v48);
    v49 = sub_10013538C(v9, (uint64_t)v11, v21, (uint64_t)v23, v40, (uint64_t)v42, a2);
    swift_bridgeObjectRelease(v11, v50, v51, v52, v53, v54, v55, v56);
    swift_bridgeObjectRelease(v23, v57, v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease(v42, v64, v65, v66, v67, v68, v69, v70);
    return v49;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100134554(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id result;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  CHWorkoutDetailHeartRateTableViewCell *v20;
  CHWorkoutDetailHeartRateTableViewCell *v21;
  id v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  uint64_t v24;
  id v25;
  NSString v26;
  CHWorkoutDetailHeartRateTableViewCell *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  CHWorkoutDetailHeartRateTableViewCell *v31;
  CHWorkoutDetailHeartRateTableViewCell *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  __n128 v36;
  uint64_t v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  uint64_t v39;
  id v40;
  NSString v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  CHWorkoutDetailHeartRateTableViewCell *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  CHWorkoutDetailHeartRateTableViewCell *v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  const char *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  double v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  const char *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  CHWorkoutDetailHeartRateTableViewCell *v84;
  CHWorkoutDetailHeartRateTableViewCell *v85;
  id v86;
  id v87;
  id v88;
  const char *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  CHWorkoutDetailHeartRateTableViewCell *v97;
  CHWorkoutDetailHeartRateTableViewCell *v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  CHWorkoutDetailHeartRateTableViewCell *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;

  v5 = *(void **)(v2 + 32);
  if (v5)
  {
    v6 = objc_msgSend(v5, "fiui_activityType");
  }
  else
  {
    v6 = objc_msgSend(*(id *)(v2 + 24), "fiui_activityType");
    if (!v6)
      return sub_100135570(a2);
  }
  v7 = FIUIDistanceTypeForActivityType(v6);
  v8 = *(void **)(v2 + 16);
  result = objc_msgSend(v8, "unitManager");
  if (result)
  {
    v10 = result;
    v11 = objc_msgSend(result, "paceDistanceUnitForDistanceType:", v7);

    v12 = FIUIPaceFormatForDistanceType(v7);
    if (v12 == 4)
    {
      v13 = objc_msgSend(v8, "localizedSpeedUnitStringForActivityType:", v6);
      if (v13)
      {
        v14 = v13;
        v122 = 4;
        v123 = v6;
        v124 = a2;
        v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v121 = v15;

        goto LABEL_23;
      }
LABEL_21:
      v67 = sub_100135570(a2);

      return v67;
    }
    if (objc_msgSend(v6, "identifier") != (id)46)
    {
      v22 = objc_msgSend(v8, "localizedShortUnitStringForDistanceUnit:", v11);
      if (!v22)
        goto LABEL_21;
      v17 = v22;
      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v21 = v23;
LABEL_14:

      v123 = v6;
      v124 = a2;
      v122 = v12;
      if ((unint64_t)(v12 - 2) >= 2)
      {
        if (v12 != 1)
        {
          v121 = v21;
LABEL_23:
          v68 = (void *)objc_opt_self(HKUnit);
          v69 = objc_msgSend(v68, "meterUnit");
          v70 = type metadata accessor for WorkoutChartDataElement(0);
          v71 = *(double *)(a1 + *(int *)(v70 + 24));
          v72 = (void *)objc_opt_self(HKQuantity);
          v73 = a1;
          v74 = objc_msgSend(v72, "quantityWithUnit:doubleValue:", v69, v71);

          v75 = v7;
          v76 = objc_msgSend(v8, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v74, v122, v7, 1.0);

          if (v76)
          {
            v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
            v85 = v84;

            v86 = objc_msgSend(v68, "meterUnit");
            v87 = objc_msgSend(v72, "quantityWithUnit:doubleValue:", v86, *(double *)(v73 + *(int *)(v70 + 28)));

            v88 = objc_msgSend(v8, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v87, v122, v75, 1.0);
            if (v88)
            {
              v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
              v98 = v97;

              v67 = sub_10013538C(v120, (uint64_t)v85, v96, (uint64_t)v98, v125, (uint64_t)v121, v124);
              swift_bridgeObjectRelease(v85, v99, v100, v101, v102, v103, v104, v105);
              swift_bridgeObjectRelease(v98, v106, v107, v108, v109, v110, v111, v112);
              swift_bridgeObjectRelease(v121, v113, v114, v115, v116, v117, v118, v119);
LABEL_28:

              return v67;
            }
            swift_bridgeObjectRelease(v85, v89, v90, v91, v92, v93, v94, v95);
          }
          swift_bridgeObjectRelease(v121, v77, v78, v79, v80, v81, v82, v83);
          v67 = sub_100135570(v124);
          goto LABEL_28;
        }
        v40 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v41 = String._bridgeToObjectiveC()();
        v42 = v7;
        v43 = objc_msgSend(v40, "localizedStringForKey:value:table:", v41, 0, 0);

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v32 = v45;

        v46 = sub_100047110((uint64_t *)&unk_100827460);
        v47 = swift_allocObject(v46, 72, 7);
        *(_OWORD *)(v47 + 16) = xmmword_100622F90;
        v48 = sub_100038CA0();
        v49 = StringProtocol.localizedUppercase.getter(&type metadata for String, v48);
        v50 = v21;
        v51 = a1;
        v53 = v52;
        swift_bridgeObjectRelease(v50, v52, v54, v55, v56, v57, v58, v59);
        *(_QWORD *)(v47 + 56) = &type metadata for String;
        *(_QWORD *)(v47 + 64) = sub_100038CF8();
        *(_QWORD *)(v47 + 32) = v49;
        *(_QWORD *)(v47 + 40) = v53;
        a1 = v51;
        v37 = v44;
        v38 = v32;
        v39 = v47;
        v7 = v42;
      }
      else
      {
        v24 = FIUINumberOfUnitsInPaceForPaceFormat(v12);
        v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v26 = String._bridgeToObjectiveC()();
        v27 = v21;
        v28 = v7;
        v29 = objc_msgSend(v25, "localizedStringForKey:value:table:", v26, 0, 0);

        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v32 = v31;

        v33 = sub_100047110((uint64_t *)&unk_100827460);
        v34 = swift_allocObject(v33, 112, 7);
        *(_OWORD *)(v34 + 16) = xmmword_100620BC0;
        v35 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", v24);
        v7 = v28;
        *(_QWORD *)(v34 + 56) = sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
        *(_QWORD *)(v34 + 64) = sub_100135BA0();
        *(_QWORD *)(v34 + 32) = v35;
        *(_QWORD *)(v34 + 96) = &type metadata for String;
        *(_QWORD *)(v34 + 104) = sub_100038CF8();
        *(_QWORD *)(v34 + 72) = v125;
        *(_QWORD *)(v34 + 80) = v27;
        v37 = v30;
        v38 = v32;
        v39 = v34;
      }
      v125 = String.init(format:_:)(v37, v38, v39, v36);
      v121 = (CHWorkoutDetailHeartRateTableViewCell *)v60;
      swift_bridgeObjectRelease(v32, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_23;
    }
    result = objc_msgSend(v8, "unitManager");
    if (result)
    {
      v16 = result;
      v17 = objc_msgSend(result, "userLapLengthHKUnit");

      v18 = objc_msgSend(v8, "localizedShortUnitStringForDistanceUnit:", FIUIDistanceUnitForHKUnit(v17));
      if (!v18)
      {

        goto LABEL_21;
      }
      v19 = v18;
      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100134BCC(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  void *v7;
  CHWorkoutDetailHeartRateTableViewCell *v8;
  CHWorkoutDetailHeartRateTableViewCell *v9;
  uint64_t v10;
  id v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  CHWorkoutDetailHeartRateTableViewCell *v21;
  CHWorkoutDetailHeartRateTableViewCell *v22;
  id v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  CHWorkoutDetailHeartRateTableViewCell *v33;
  CHWorkoutDetailHeartRateTableViewCell *v34;
  unint64_t v35;
  uint64_t v36;
  const char *v37;
  CHWorkoutDetailHeartRateTableViewCell *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;

  v5 = *(void **)(v2 + 16);
  v6 = objc_msgSend(v5, "localizedShortUnitStringForDistanceUnit:", 1);
  if (v6)
  {
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10 = type metadata accessor for WorkoutChartDataElement(0);
    v11 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", 1, 0, 2, *(double *)(a1 + *(int *)(v10 + 24)) / 100.0);
    if (v11)
    {
      v19 = v11;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v22 = v21;

      v23 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", 1, 0, 2, *(double *)(a1 + *(int *)(v10 + 28)) / 100.0);
      if (v23)
      {
        v31 = v23;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v34 = v33;

        v35 = sub_100038CA0();
        v36 = StringProtocol.localizedUppercase.getter(&type metadata for String, v35);
        v38 = (CHWorkoutDetailHeartRateTableViewCell *)v37;
        swift_bridgeObjectRelease(v9, v37, v39, v40, v41, v42, v43, v44);
        v45 = sub_10013538C(v20, (uint64_t)v22, v32, (uint64_t)v34, v36, (uint64_t)v38, a2);
        swift_bridgeObjectRelease(v22, v46, v47, v48, v49, v50, v51, v52);
        swift_bridgeObjectRelease(v34, v53, v54, v55, v56, v57, v58, v59);
        swift_bridgeObjectRelease(v38, v60, v61, v62, v63, v64, v65, v66);
        return v45;
      }
      swift_bridgeObjectRelease(v9, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      v22 = v9;
    }
    swift_bridgeObjectRelease(v22, v12, v13, v14, v15, v16, v17, v18);
  }
  return sub_100135570(a2);
}

id sub_100134D9C(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  id v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  CHWorkoutDetailHeartRateTableViewCell *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  id v24;
  CHWorkoutDetailHeartRateTableViewCell *v25;
  CHWorkoutDetailHeartRateTableViewCell *v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  CHWorkoutDetailHeartRateTableViewCell *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;

  v5 = *(void **)(v2 + 16);
  v6 = type metadata accessor for WorkoutChartDataElement(0);
  v7 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", 1, 0, 2, *(double *)(a1 + *(int *)(v6 + 24)) / 100.0);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = objc_msgSend(v5, "localizedStringWithDistanceInMeters:distanceUnit:unitStyle:decimalPrecision:", 1, 0, 2, *(double *)(a1 + *(int *)(v6 + 28)) / 100.0);
    if (v12)
    {
      v20 = v12;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v23 = v22;

      v24 = objc_msgSend(*(id *)(v2 + 40), "unitStringFromValue:unit:", 9, 100.0);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v26 = v25;

      v27 = sub_100038CA0();
      v28 = StringProtocol.localizedUppercase.getter(&type metadata for String, v27);
      v30 = (CHWorkoutDetailHeartRateTableViewCell *)v29;
      swift_bridgeObjectRelease(v26, v29, v31, v32, v33, v34, v35, v36);
      v37 = sub_10013538C(v9, (uint64_t)v11, v21, (uint64_t)v23, v28, (uint64_t)v30, a2);
      swift_bridgeObjectRelease(v11, v38, v39, v40, v41, v42, v43, v44);
      swift_bridgeObjectRelease(v23, v45, v46, v47, v48, v49, v50, v51);
      swift_bridgeObjectRelease(v30, v52, v53, v54, v55, v56, v57, v58);
      return v37;
    }
    swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
  }
  return sub_100135570(a2);
}

id sub_100134F60(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  int *v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = (int *)type metadata accessor for WorkoutChartDataElement(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) == 0)
  {
    static Date.now.getter(v9);
    *(_QWORD *)&v11[v8[5]] = a3;
    *(_QWORD *)&v11[v8[6]] = a3;
    *(_QWORD *)&v11[v8[7]] = a3;
    if (qword_10081D578 != -1)
      swift_once(&qword_10081D578, sub_100133D68);
    __asm { BR              X10 }
  }
  if (qword_10081D578 != -1)
    swift_once(&qword_10081D578, sub_100133D68);
  return sub_100135570((void *)qword_100869E10);
}

uint64_t sub_100135330()
{
  id *v0;

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for WorkoutChartDataElementFormattingManager()
{
  return objc_opt_self(_TtC10FitnessApp40WorkoutChartDataElementFormattingManager);
}

id sub_10013538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v15;
  NSString v16;
  id v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  const char *v25;
  CHWorkoutDetailHeartRateTableViewCell *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;

  if (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1) != 0)
    return sub_1000387C4(a1, a2, a5, a6, a7);
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, 0, 0);

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = sub_100047110((uint64_t *)&unk_100827460);
  v21 = swift_allocObject(v20, 112, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  v22 = sub_100038CF8();
  *(_QWORD *)(v21 + 32) = a1;
  *(_QWORD *)(v21 + 40) = a2;
  *(_QWORD *)(v21 + 96) = &type metadata for String;
  *(_QWORD *)(v21 + 104) = v22;
  *(_QWORD *)(v21 + 64) = v22;
  *(_QWORD *)(v21 + 72) = a3;
  *(_QWORD *)(v21 + 80) = a4;
  swift_bridgeObjectRetain(a2);
  v23 = swift_bridgeObjectRetain(a4);
  v24 = String.init(format:_:)(v41, v19, v21, v23);
  v26 = (CHWorkoutDetailHeartRateTableViewCell *)v25;
  swift_bridgeObjectRelease(v19, v25, v27, v28, v29, v30, v31, v32);
  v33 = sub_1000387C4(v24, (uint64_t)v26, a5, a6, a7);
  swift_bridgeObjectRelease(v26, v34, v35, v36, v37, v38, v39, v40);
  return v33;
}

id sub_100135570(void *a1)
{
  id v2;
  NSString v3;
  id v4;
  CHWorkoutDetailHeartRateTableViewCell *v5;
  CHWorkoutDetailHeartRateTableViewCell *v6;
  uint64_t v7;
  uint64_t inited;
  NSString *v9;
  id v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;
  id v12;
  NSString v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  Class isa;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _BYTE v31[72];

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = sub_100047110((uint64_t *)&unk_10082EDA0);
  inited = swift_initStackObject(v7, v31);
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 64) = sub_10001E724(0, (unint64_t *)&qword_10082B530, UIFont_ptr);
  *(_QWORD *)(inited + 40) = a1;
  v9 = NSFontAttributeName;
  v10 = a1;
  v11 = (CHWorkoutDetailHeartRateTableViewCell *)sub_100038C84(inited);
  v12 = objc_allocWithZone((Class)NSAttributedString);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6, v14, v15, v16, v17, v18, v19, v20);
  type metadata accessor for Key(0);
  sub_100135B1C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11, v22, v23, v24, v25, v26, v27, v28);
  v29 = objc_msgSend(v12, "initWithString:attributes:", v13, isa);

  return v29;
}

void sub_10013571C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  CHWorkoutDetailHeartRateTableViewCell *v5;
  CHWorkoutDetailHeartRateTableViewCell *v6;
  uint64_t v7;
  double v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  id v15;
  id v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;

  v3 = objc_msgSend((id)objc_opt_self(HKUnit), "secondUnitWithMetricPrefix:", 4);
  v4 = objc_msgSend(v3, "unitString");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = type metadata accessor for WorkoutChartDataElement(0);
  v8 = *(double *)(a1 + *(int *)(v7 + 24));
  v9 = (void *)objc_opt_self(FIUIFormattingManager);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v8);
  v11 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:", v10, 1);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + *(int *)(v7 + 28)));
    v16 = objc_msgSend(v9, "stringWithNumber:decimalPrecision:", v15, 1);

    if (v16)
    {
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20 = sub_100038CA0();
      v21 = StringProtocol.localizedUppercase.getter(&type metadata for String, v20);
      v23 = (CHWorkoutDetailHeartRateTableViewCell *)v22;
      swift_bridgeObjectRelease(v6, v22, v24, v25, v26, v27, v28, v29);
      sub_10013538C(v12, (uint64_t)v14, v17, (uint64_t)v19, v21, (uint64_t)v23, a2);
      swift_bridgeObjectRelease(v14, v30, v31, v32, v33, v34, v35, v36);
      swift_bridgeObjectRelease(v19, v37, v38, v39, v40, v41, v42, v43);
      swift_bridgeObjectRelease(v23, v44, v45, v46, v47, v48, v49, v50);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10013591C(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  CHWorkoutDetailHeartRateTableViewCell *v7;
  CHWorkoutDetailHeartRateTableViewCell *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  CHWorkoutDetailHeartRateTableViewCell *v13;
  CHWorkoutDetailHeartRateTableViewCell *v14;
  id v15;
  id v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;

  v4 = (void *)objc_opt_self(FIUIFormattingManager);
  v5 = objc_msgSend(v4, "localizedShortPowerUnitString");
  if (v5)
  {
    v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = type metadata accessor for WorkoutChartDataElement(0);
    v10 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + *(int *)(v9 + 24)));
    v11 = objc_msgSend(v4, "stringWithNumber:decimalPrecision:", v10, 1);

    if (v11)
    {
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + *(int *)(v9 + 28)));
      v16 = objc_msgSend(v4, "stringWithNumber:decimalPrecision:", v15, 1);

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        v20 = sub_100038CA0();
        v21 = StringProtocol.localizedUppercase.getter(&type metadata for String, v20);
        v23 = (CHWorkoutDetailHeartRateTableViewCell *)v22;
        swift_bridgeObjectRelease(v8, v22, v24, v25, v26, v27, v28, v29);
        sub_10013538C(v12, (uint64_t)v14, v17, (uint64_t)v19, v21, (uint64_t)v23, a2);
        swift_bridgeObjectRelease(v14, v30, v31, v32, v33, v34, v35, v36);
        swift_bridgeObjectRelease(v19, v37, v38, v39, v40, v41, v42, v43);
        swift_bridgeObjectRelease(v23, v44, v45, v46, v47, v48, v49, v50);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    sub_100135570(a2);
  }
}

unint64_t sub_100135B1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081E850;
  if (!qword_10081E850)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1006226C0, v1);
    atomic_store(result, (unint64_t *)&qword_10081E850);
  }
  return result;
}

uint64_t sub_100135B64(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WorkoutChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100135BA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821BE8;
  if (!qword_100821BE8)
  {
    v1 = sub_10001E724(255, (unint64_t *)&qword_100828930, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100821BE8);
  }
  return result;
}

uint64_t sub_100135BF8()
{
  return sub_1000083D8(&qword_100821BF0, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625FC0);
}

uint64_t type metadata accessor for WorkoutActivityEntity(uint64_t a1)
{
  return sub_100024334(a1, qword_100821D78, (uint64_t)&nominal type descriptor for WorkoutActivityEntity);
}

uint64_t sub_100135C38()
{
  return sub_1000083D8(&qword_100821BF8, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625FF8);
}

uint64_t sub_100135C64()
{
  return sub_1000083D8(&qword_100821C00, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626028);
}

unint64_t sub_100135C94()
{
  unint64_t result;

  result = qword_100821C08;
  if (!qword_100821C08)
  {
    result = swift_getWitnessTable(&unk_1006390E0, &type metadata for WorkoutActivityEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100821C08);
  }
  return result;
}

void *sub_100135CD8()
{
  return &protocol witness table for String;
}

uint64_t sub_100135CE4()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = sub_10038B950();
  qword_100869E18 = result;
  unk_100869E20 = v1;
  qword_100869E28 = v2;
  unk_100869E30 = v3;
  return result;
}

uint64_t sub_100135D08()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100008398(v0, qword_100869E38);
  sub_10003CE9C(v0, (uint64_t)qword_100869E38);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD000000000000010, 0x800000010068A750);
}

uint64_t sub_100135D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100047110(&qword_100821EE8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100821EF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100821EE0);
  sub_100008398(v7, qword_100869E50);
  sub_10003CE9C(v7, (uint64_t)qword_100869E50);
  v8 = type metadata accessor for WorkoutActivityEntity(0);
  v9 = sub_1000083D8(&qword_100821C10, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625F30);
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)(30, 1, v8, v9);
  v10._object = (void *)0x800000010068A770;
  v10._countAndFlagsBits = 0xD00000000000001ELL;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v11);
  return EntityURLRepresentation.init(stringInterpolation:)(v6, v8, v9);
}

uint64_t sub_100135F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  Swift::String v10;
  void *object;
  __n128 v12;
  _QWORD v14[2];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000083D8((unint64_t *)&qword_100821498, v5, (uint64_t)&protocol conformance descriptor for UUID);
  v14[0] = dispatch thunk of CustomStringConvertible.description.getter(v1, v6);
  v14[1] = v7;
  v8._countAndFlagsBits = 47;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + *(int *)(type metadata accessor for WorkoutActivityEntity(0)
                                                                      + 20)), "UUID"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v6);
  object = v10._object;
  String.append(_:)(v10);
  v12 = swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v12);
  return v14[0];
}

_QWORD *sub_10013601C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *result;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for WorkoutActivityEntity(0);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)) == 1)
  {
    v2 = objc_msgSend(*(id *)(v0 + *(int *)(v1 + 20)), "fiui_activityType");
    result = (id)FILocalizedNameForActivityType(objc_msgSend(v2, "effectiveTypeIdentifier"), objc_msgSend(v2, "swimmingLocationType"), objc_msgSend(v2, "isIndoor"));
    if (result)
    {
      v4 = result;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (_QWORD *)v5;
    }
  }
  else
  {
    v9 = 0x6C61767265746E49;
    v10 = 0xE900000000000020;
    result = EntityProperty.wrappedValue.getter(&v8);
    if (!__OFADD__(v8, 1))
    {
      ++v8;
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v6._object;
      String.append(_:)(v6);
      swift_bridgeObjectRelease(object);
      return (_QWORD *)v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100136164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  void *v16;
  id v17;
  Class isa;
  id v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  _QWORD *result;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  double v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  double v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  double v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  __n128 v78;
  uint64_t v79;
  void *v80;
  void (*v81)(_QWORD *, uint64_t);
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  unint64_t v90;

  v1 = v0;
  v2 = sub_100047110(&qword_100821E38);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100047110(&qword_100821E10);
  v87 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v86 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100821E40);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for WorkoutActivityEntity(0);
  if (*(_BYTE *)(v1 + v15[6]) != 1)
  {
    v85 = v5;
    v33 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "localizedStringForKey:value:table:", v34, 0, 0);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v84 = *(_QWORD *)(v1 + v15[26]);
    AppDependency.wrappedValue.getter(&v89);
    v39 = v89;
    v82 = *(_QWORD *)(v1 + v15[11]);
    EntityProperty.wrappedValue.getter(v10);
    v40 = Measurement.value.getter(v7);
    v81 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
    v81(v10, v7);
    v41 = objc_msgSend(v39, "stringWithDuration:durationFormat:", 3, v40);

    v83 = v38;
    if (v41)
    {
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

    }
    else
    {
      swift_bridgeObjectRetain(v38);
      v42 = v36;
      v44 = v38;
    }
    EntityProperty.wrappedValue.getter(v4);
    v45 = v87;
    v46 = v85;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v87 + 48))(v4, 1, v85) == 1)
    {
      swift_bridgeObjectRelease(v83);
      sub_10001BE90((uint64_t)v4, &qword_100821E38);
    }
    else
    {
      v80 = (void *)v36;
      (*(void (**)(char *, _QWORD *, uint64_t))(v45 + 32))(v86, v4, v46);
      v47 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
      v48 = Measurement.value.getter(v46);
      v49 = objc_msgSend((id)objc_opt_self(HKQuantity), "quantityWithUnit:doubleValue:", v47, v48);

      v50 = objc_msgSend(*(id *)(v1 + v15[5]), "fiui_activityType");
      v51 = FIUIDistanceTypeForActivityType(v50);

      v52 = FIUIPaceFormatForDistanceType(v51);
      AppDependency.wrappedValue.getter(&v89);
      v53 = v89;
      v54 = v49;
      EntityProperty.wrappedValue.getter(v10);
      v55 = Measurement.value.getter(v7);
      v81(v10, v7);
      v56 = v52;
      v57 = v54;
      v58 = objc_msgSend(v53, "localizedPaceStringWithDistance:overDuration:paceFormat:distanceType:", v54, v56, v51, v55);

      if (v58)
      {
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v61 = v60;

        v62 = v83;
      }
      else
      {
        v62 = v83;
        swift_bridgeObjectRetain(v83);
        v59 = (uint64_t)v80;
        v61 = v62;
      }
      AppDependency.wrappedValue.getter(&v89);
      v69 = v89;
      v70 = objc_msgSend(v89, "localizedStringWithDistanceInMeters:distanceType:unitStyle:", v51, 1, Measurement.value.getter(v85));

      if (v70)
      {
        v71 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        v73 = v72;
        swift_bridgeObjectRelease(v62);

        v62 = v73;
      }
      else
      {
        v71 = v80;
      }
      v89 = v71;
      v90 = (unint64_t)v62;
      v74._countAndFlagsBits = 548913696;
      v74._object = (void *)0xA400000000000000;
      String.append(_:)(v74);
      v75._countAndFlagsBits = v42;
      v75._object = v44;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v44);
      v76._countAndFlagsBits = 548913696;
      v76._object = (void *)0xA400000000000000;
      String.append(_:)(v76);
      v77._countAndFlagsBits = v59;
      v77._object = v61;
      String.append(_:)(v77);

      v78 = swift_bridgeObjectRelease(v61);
      v42 = (uint64_t)v89;
      (*(void (**)(char *, uint64_t, __n128))(v87 + 8))(v86, v85, v78);
    }
    return (_QWORD *)v42;
  }
  v16 = (void *)objc_opt_self(CHListAndDetailViewDateFormatter);
  v17 = objc_msgSend(*(id *)(v1 + v15[5]), "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v19 = objc_msgSend((id)objc_opt_self(UIFont), "fu_bodyShortFont");
  v20 = objc_msgSend(v16, "formattedListStringForDate:font:", isa, v19);

  v21 = objc_msgSend(v20, "string");
  v22 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v89 = 0;
  v90 = 0xE000000000000000;
  if (qword_10081D598 != -1)
    swift_once(&qword_10081D598, sub_100136880);
  v25 = (void *)qword_100869E68;
  result = EntityProperty.wrappedValue.getter(&v88);
  if (!__OFADD__(v88, 1))
  {
    v27 = v88 + 1;
    v28 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", (double)v27);
    v29 = objc_msgSend(v25, "stringFromNumber:", v28);

    if (v29)
    {
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

    }
    else
    {
      v30 = 0;
      v32 = (void *)0xE000000000000000;
    }
    v63._countAndFlagsBits = v30;
    v63._object = v32;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v32);
    v64._countAndFlagsBits = 0x7469766974636120;
    v64._object = (void *)0xE900000000000079;
    String.append(_:)(v64);
    v65 = (uint64_t)v89;
    v66 = (void *)v90;
    v89 = v22;
    v90 = v24;
    v67._countAndFlagsBits = 548913696;
    v67._object = (void *)0xA400000000000000;
    String.append(_:)(v67);
    v68._countAndFlagsBits = v65;
    v68._object = v66;
    String.append(_:)(v68);
    swift_bridgeObjectRelease(v66);
    return v89;
  }
  __break(1u);
  return result;
}

id sub_100136880()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  result = objc_msgSend(v0, "setNumberStyle:", 6);
  qword_100869E68 = (uint64_t)v0;
  return result;
}

uint64_t sub_1001368CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  _QWORD v31[2];

  v31[1] = a1;
  v2 = sub_100047110(&qword_100820D18);
  __chkstk_darwin(v2);
  v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v31 - v16;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  v19._countAndFlagsBits = (uint64_t)sub_10013601C();
  object = v19._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  LocalizedStringResource.init(stringInterpolation:)(v17);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  v23._countAndFlagsBits = (uint64_t)sub_100136164();
  v24 = v23._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
  LocalizedStringResource.init(stringInterpolation:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v26 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WorkoutActivityEntity(0) + 28));
  v27 = *v26;
  v28 = v26[1];
  v29 = swift_bridgeObjectRetain(v28);
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(v27, v28, 0, 0, v29);
  return DisplayRepresentation.init(title:subtitle:image:)(v11, v7, v4);
}

void sub_100136B14(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int *v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  int v88;
  char v89;
  id v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  double v95;
  double v96;
  double v97;
  void *v98;
  id v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  double v107;
  double v108;
  _QWORD *v109;
  id v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  void *v117;
  id v118;
  int v119;
  id v120;
  uint64_t v121;
  char **v122;
  void *v123;
  id v124;
  id v125;
  double v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Class isa;
  id v133;
  id v134;
  Class v135;
  id v136;
  void *v137;
  id v138;
  double v139;
  double v140;
  void *v141;
  void *v142;
  id v143;
  uint64_t v144;
  char *v145;
  id v146;
  uint64_t v147;
  id v148;
  double v149;
  id v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  id v161;
  void *v162;
  id v163;
  double v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  Class v174;
  id v175;
  uint64_t v176;
  id v177;
  double v178;
  Class v179;
  id v180;
  id v181;
  double v182;
  Class v183;
  id v184;
  id v185;
  void *v186;
  NSString v187;
  id v188;
  double v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  char *v199;
  double v200;
  _QWORD *v201;
  uint64_t v202;
  double v203;
  _QWORD *v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  Class v211;
  id v212;
  id v213;
  double v214;
  void *v215;
  uint64_t v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  uint64_t v222;
  uint64_t i;
  uint64_t v224;
  uint64_t v225;
  id v226;
  void *v227;
  unint64_t v228;
  id v229;
  double v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD v237[4];
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  _QWORD *v259;
  id v260;
  id v261;
  char *v262;
  _QWORD *v263;
  id v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  id v272;
  uint64_t v273;
  id v274;
  uint64_t v275;
  void *v276;
  char v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;

  v272 = a4;
  v264 = a3;
  v276 = a1;
  v7 = sub_100047110(&qword_100821E08);
  v8 = __chkstk_darwin(v7);
  v239 = (uint64_t)v237 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v238 = (char *)v237 - v10;
  v267 = sub_100047110(&qword_100821E10);
  v273 = *(_QWORD *)(v267 - 8);
  __chkstk_darwin(v267);
  v249 = (char *)v237 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100821E18);
  v13 = __chkstk_darwin(v12);
  v258 = (uint64_t)v237 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v257 = (char *)v237 - v15;
  v16 = sub_100047110(&qword_100821E20);
  v17 = __chkstk_darwin(v16);
  v252 = (uint64_t)v237 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v251 = (char *)v237 - v19;
  v20 = sub_100047110(&qword_100821E28);
  v21 = __chkstk_darwin(v20);
  v245 = (uint64_t)v237 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v244 = (char *)v237 - v23;
  v247 = sub_100047110(&qword_100821E30);
  v246 = *(_QWORD *)(v247 - 8);
  v24 = __chkstk_darwin(v247);
  v243 = (char *)v237 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v256 = (char *)v237 - v26;
  v27 = sub_100047110(&qword_100821E38);
  v28 = __chkstk_darwin(v27);
  v259 = (_QWORD *)((char *)v237 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = __chkstk_darwin(v28);
  v266 = (uint64_t)v237 - v31;
  __chkstk_darwin(v30);
  v265 = (char *)v237 - v32;
  v271 = sub_100047110(&qword_100821E40);
  v263 = *(_QWORD **)(v271 - 8);
  v33 = __chkstk_darwin(v271);
  v262 = (char *)v237 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v270 = (_QWORD *)((char *)v237 - v35);
  v36 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v36);
  v38 = (char *)v237 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = (int *)type metadata accessor for WorkoutActivityEntity(0);
  v40 = (uint64_t *)&a5[v39[7]];
  *v40 = 0;
  v40[1] = 0xE000000000000000;
  v41 = (void *)v39[10];
  sub_100047110(&qword_100821E48);
  LocalizedStringResource.init(stringLiteral:)(0x7865646E49, 0xE500000000000000);
  v42 = EntityProperty<>.init(title:)(v38);
  v260 = v41;
  *(_QWORD *)((char *)v41 + (_QWORD)a5) = v42;
  v43 = v39[11];
  sub_100047110(&qword_100821E50);
  LocalizedStringResource.init(stringLiteral:)(0x6E6F697461727544, 0xE800000000000000);
  v44 = EntityProperty<>.init(title:)(v38);
  v269 = v43;
  *(_QWORD *)&a5[v43] = v44;
  v45 = (void *)v39[12];
  LocalizedStringResource.init(stringLiteral:)(0x2064657370616C45, 0xEC000000656D6954);
  v46 = EntityProperty<>.init(title:)(v38);
  v261 = v45;
  *(_QWORD *)((char *)v45 + (_QWORD)a5) = v46;
  v47 = v39[13];
  sub_100047110(&qword_100821E58);
  LocalizedStringResource.init(stringLiteral:)(0x65636E6174736944, 0xE800000000000000);
  v48 = EntityProperty<>.init(title:)(v38);
  v268 = v47;
  *(_QWORD *)&a5[v47] = v48;
  v49 = v39[14];
  sub_100047110(&qword_100821E60);
  LocalizedStringResource.init(stringLiteral:)(0x4520657669746341, 0xED0000796772656ELL);
  v50 = EntityProperty<>.init(title:)(v38);
  v242 = v49;
  *(_QWORD *)&a5[v49] = v50;
  v51 = v39[15];
  LocalizedStringResource.init(stringLiteral:)(0x6E45206C61736142, 0xEC00000079677265);
  v52 = EntityProperty<>.init(title:)(v38);
  v240 = v51;
  *(_QWORD *)&a5[v51] = v52;
  v53 = v39[16];
  LocalizedStringResource.init(stringLiteral:)(0x6E45206C61746F54, 0xEC00000079677265);
  v54 = EntityProperty<>.init(title:)(v38);
  v241 = v53;
  *(_QWORD *)&a5[v53] = v54;
  v55 = v39[17];
  LocalizedStringResource.init(stringLiteral:)(0x6F69746176656C45, 0xEE006E696147206ELL);
  v56 = EntityProperty<>.init(title:)(v38);
  v255 = v55;
  *(_QWORD *)&a5[v55] = v56;
  v57 = v39[18];
  sub_100047110(&qword_100821E68);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xED00007265776F50);
  v58 = EntityProperty<>.init(title:)(v38);
  v250 = v57;
  *(_QWORD *)&a5[v57] = v58;
  v59 = v39[19];
  sub_100047110(&qword_100821E70);
  LocalizedStringResource.init(stringLiteral:)(0x756F432070657453, 0xEA0000000000746ELL);
  v60 = EntityProperty<>.init(title:)(v38);
  v237[1] = v59;
  *(_QWORD *)&a5[v59] = v60;
  v61 = v39[20];
  LocalizedStringResource.init(stringLiteral:)(0x2073746867696C46, 0xEF6465626D696C43);
  v62 = EntityProperty<>.init(title:)(v38);
  v254 = v61;
  *(_QWORD *)&a5[v61] = v62;
  v63 = v39[21];
  sub_100047110(&qword_100821E78);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xEF65636E65646143);
  *(_QWORD *)&a5[v63] = EntityProperty<>.init(title:)(v38);
  v64 = v39[22];
  sub_100047110(&qword_100821E80);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xED00006465657053);
  v65 = EntityProperty<>.init(title:)(v38);
  v248 = v64;
  *(_QWORD *)&a5[v64] = v65;
  v66 = v39[23];
  LocalizedStringResource.init(stringLiteral:)(0x6152207472616548, 0xEA00000000006574);
  v67 = EntityProperty<>.init(title:)(v38);
  v237[3] = v66;
  *(_QWORD *)&a5[v66] = v67;
  v68 = v39[24];
  LocalizedStringResource.init(stringLiteral:)(0x6E756F432070614CLL, 0xE900000000000074);
  v69 = EntityProperty<>.init(title:)(v38);
  v253 = v68;
  *(_QWORD *)&a5[v68] = v69;
  v70 = v39[25];
  LocalizedStringResource.init(stringLiteral:)(0x656570532078614DLL, 0xE900000000000064);
  v71 = EntityProperty<>.init(title:)(v38);
  v237[2] = v70;
  *(_QWORD *)&a5[v70] = v71;
  v72 = v39[26];
  sub_100047110(&qword_1008201E8);
  v73 = type metadata accessor for AppDependencyManager(0);
  v278 = 0u;
  v279 = 0u;
  v280 = 0;
  v74 = static AppDependencyManager.shared.getter(v73);
  *(_QWORD *)&a5[v72] = AppDependency.__allocating_init(key:manager:)(&v278, v74);
  v75 = v272;
  v76 = objc_msgSend(v272, "UUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v77 = v276;
  *(_QWORD *)&a5[v39[5]] = v276;
  v78 = v77;
  a5[v39[6]] = objc_msgSend(v75, "isMultiSportWorkout");
  v79 = v39[8];
  v275 = a2;
  v276 = a5;
  *(_QWORD *)&a5[v79] = a2;
  v80 = objc_msgSend(v78, "metadata", swift_retain(a2).n128_f64[0]);
  if (!v80)
  {
    v278 = 0u;
    v279 = 0u;
LABEL_10:
    sub_10001BE90((uint64_t)&v278, (uint64_t *)&unk_100828420);
    v89 = 2;
    goto LABEL_11;
  }
  v81 = v80;
  v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v80, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  type metadata accessor for IntervalWorkoutConfiguration(0);
  v83 = static IntervalWorkoutConfiguration.StepSuccessMetadataKey.getter();
  v85 = v84;
  if (*(_QWORD *)(v82 + 16) && (v86 = sub_100438F74(v83, v84), (v87 & 1) != 0))
  {
    sub_10003E9BC(*(_QWORD *)(v82 + 56) + 32 * v86, (uint64_t)&v278);
  }
  else
  {
    v278 = 0u;
    v279 = 0u;
  }
  swift_bridgeObjectRelease(v85);
  swift_bridgeObjectRelease(v82);
  if (!*((_QWORD *)&v279 + 1))
    goto LABEL_10;
  v88 = swift_dynamicCast(&v277, &v278, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  v89 = v277;
  if (!v88)
    v89 = 2;
LABEL_11:
  v260 = (id)v39[9];
  *((_BYTE *)v260 + (_QWORD)v276) = v89;
  *(_QWORD *)&v278 = v264;
  EntityProperty.wrappedValue.setter(&v278);
  v264 = objc_msgSend(v78, "fiui_activityType");
  v90 = objc_msgSend(v264, "symbolName");
  if (v90)
  {
    v91 = v90;
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    v94 = v93;

  }
  else
  {
    v94 = 0x800000010068A730;
    v92 = 0xD000000000000011;
  }
  *(_QWORD *)&v95 = swift_bridgeObjectRelease(v40[1]).n128_u64[0];
  *v40 = v92;
  v40[1] = v94;
  objc_msgSend(v78, "duration", v95);
  v97 = v96;
  v98 = (void *)objc_opt_self(NSUnitDuration);
  v99 = objc_msgSend(v98, "seconds");
  v100 = sub_10001E724(0, &qword_100821E88, NSUnitDuration_ptr);
  v274 = v78;
  v101 = v270;
  Measurement.init(value:unit:)(v99, v100, v97);
  v102 = v263;
  v103 = v263[2];
  v104 = v262;
  v105 = v271;
  ((void (*)(char *, _QWORD *, uint64_t))v103)(v262, v101, v271);
  EntityProperty.wrappedValue.setter(v104);
  v106 = (_QWORD *)v102[1];
  ((void (*)(_QWORD *, uint64_t))v106)(v101, v105);
  objc_msgSend(v274, "elapsedTime");
  v108 = v107;
  Measurement.init(value:unit:)(objc_msgSend(v98, "seconds"), v100, v107);
  ((void (*)(char *, _QWORD *, uint64_t))v103)(v104, v101, v105);
  EntityProperty.wrappedValue.setter(v104);
  v109 = v101;
  v110 = v274;
  v263 = v106;
  ((void (*)(_QWORD *, uint64_t))v106)(v109, v105);
  v112 = v267;
  if (v275)
  {
    swift_retain(v275);
    v114 = (void *)WorkoutStep.goal.getter(v113);
    v115 = objc_msgSend(v114, "goalTypeIdentifier");

    if (v115 == (id)1
      && (v117 = (void *)WorkoutStep.goal.getter(v116),
          v118 = objc_msgSend(v117, "value"),
          v117,
          v118))
    {
      v119 = *((unsigned __int8 *)v260 + (_QWORD)v276);
      if (v119 != 2 && (v119 & 1) != 0)
      {
        v229 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
        objc_msgSend(v118, "doubleValueForUnit:", v229);
        v108 = v230;

        v231 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
        v232 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
        v233 = (uint64_t)v265;
        Measurement.init(value:unit:)(v231, v232, v108);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v273 + 56))(v233, 0, 1, v112);
        v103 = v266;
        sub_100021CC0(v233, v266, &qword_100821E38);
        EntityProperty.wrappedValue.setter(v103);
        sub_10001BE90(v233, &qword_100821E38);

        swift_release(v275);
        v122 = &selRef_setIncludeUpcomingEventMembers_;
        goto LABEL_24;
      }
      swift_release(v275);

    }
    else
    {
      *(_QWORD *)&v111 = swift_release(v275).n128_u64[0];
    }
  }
  v120 = objc_msgSend(v110, "distanceType", v111);
  v121 = v273;
  v122 = &selRef_setIncludeUpcomingEventMembers_;
  if (v120)
  {
    v123 = v120;
    v103 = (uint64_t)objc_msgSend(v110, "statisticsForType:", v120);
    v124 = objc_msgSend((id)v103, "sumQuantity");

    if (v124)
    {
      v125 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
      objc_msgSend(v124, "doubleValueForUnit:", v125);
      v108 = v126;

      v127 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
      v128 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
      v129 = (uint64_t)v265;
      Measurement.init(value:unit:)(v127, v128, v108);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v129, 0, 1, v112);
      v103 = (uint64_t)&qword_100821E38;
      v130 = v266;
      sub_100021CC0(v129, v266, &qword_100821E38);
      EntityProperty.wrappedValue.setter(v130);
      sub_10001BE90(v129, &qword_100821E38);

    }
  }
LABEL_24:
  v131 = sub_10001E724(0, &qword_100821E90, HKQuantityType_ptr);
  isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierActiveEnergyBurned).super.super.super.isa;
  v133 = objc_msgSend(v110, "statisticsForType:", isa);

  v134 = objc_msgSend(v133, v122[480]);
  if (v134)
  {
    v135 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierBasalEnergyBurned).super.super.super.isa;
    v136 = objc_msgSend(v110, "statisticsForType:", v135);

    v103 = (uint64_t)objc_msgSend(v136, v122[480]);
    if (v103)
    {
      v137 = (void *)objc_opt_self(HKUnit);
      v138 = objc_msgSend(v137, "largeCalorieUnit");
      objc_msgSend((id)v103, "doubleValueForUnit:", v138);
      v140 = v139;

      v141 = (void *)objc_opt_self(NSUnitEnergy);
      v261 = (id)v103;
      v142 = v141;
      v262 = (char *)v131;
      v143 = objc_msgSend(v141, "kilocalories");
      v144 = sub_10001E724(0, &qword_100821ED0, NSUnitEnergy_ptr);
      v145 = v256;
      v146 = v143;
      v147 = v144;
      v237[0] = v144;
      Measurement.init(value:unit:)(v146, v144, v140);
      v148 = objc_msgSend(v137, "largeCalorieUnit");
      objc_msgSend(v134, "doubleValueForUnit:", v148);
      v108 = v149;

      v150 = objc_msgSend(v142, "kilocalories");
      v151 = v243;
      Measurement.init(value:unit:)(v150, v147, v108);
      v152 = v246;
      v153 = *(void (**)(char *, char *, uint64_t))(v246 + 16);
      v260 = v134;
      v154 = (uint64_t)v244;
      v155 = v247;
      v153(v244, v145, v247);
      v103 = *(_QWORD *)(v152 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v154, 0, 1, v155);
      v156 = v245;
      sub_100021CC0(v154, v245, &qword_100821E28);
      EntityProperty.wrappedValue.setter(v156);
      sub_10001BE90(v154, &qword_100821E28);
      v153((char *)v154, v151, v155);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v154, 0, 1, v155);
      sub_100021CC0(v154, v156, &qword_100821E28);
      EntityProperty.wrappedValue.setter(v156);
      sub_10001BE90(v154, &qword_100821E28);
      v157 = v256;
      static Measurement<>.+ infix(_:_:)(v256, v151, v237[0]);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v154, 0, 1, v155);
      sub_100021CC0(v154, v156, &qword_100821E28);
      v158 = v156;
      v122 = &selRef_setIncludeUpcomingEventMembers_;
      EntityProperty.wrappedValue.setter(v158);
      sub_10001BE90(v154, &qword_100821E28);

      v159 = *(void (**)(char *, uint64_t))(v152 + 8);
      v110 = v274;
      v159(v151, v155);
      v160 = v155;
      v112 = v267;
      v159(v157, v160);
    }
    else
    {

    }
  }
  v161 = objc_msgSend(v110, "fiui_elevationGain");
  if (v161)
  {
    v162 = v161;
    v163 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    objc_msgSend(v162, "doubleValueForUnit:", v163);
    v108 = v164;

    v165 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
    v166 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
    v167 = (uint64_t)v265;
    Measurement.init(value:unit:)(v165, v166, v108);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v273 + 56))(v167, 0, 1, v112);
    v103 = (uint64_t)&qword_100821E38;
    v168 = v266;
    sub_100021CC0(v167, v266, &qword_100821E38);
    EntityProperty.wrappedValue.setter(v168);
    sub_10001BE90(v167, &qword_100821E38);

  }
  v169 = sub_1005AA490();
  if (v169 > 0.0)
  {
    v108 = v169;
    v170 = objc_msgSend((id)objc_opt_self(NSUnitPower), "watts");
    v171 = sub_10001E724(0, &qword_100821EB8, NSUnitPower_ptr);
    v172 = (uint64_t)v251;
    Measurement.init(value:unit:)(v170, v171, v108);
    v173 = sub_100047110(&qword_100821EC0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 56))(v172, 0, 1, v173);
    v103 = v252;
    sub_100021CC0(v172, v252, &qword_100821E20);
    EntityProperty.wrappedValue.setter(v103);
    sub_10001BE90(v172, &qword_100821E20);
  }
  v174 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierFlightsClimbed).super.super.super.isa;
  v175 = objc_msgSend(v110, "statisticsForType:", v174);

  v176 = (uint64_t)objc_msgSend(v175, v122[480]);
  if (!v176)
    goto LABEL_37;
  v177 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
  objc_msgSend((id)v176, "doubleValueForUnit:", v177);
  v108 = v178;

  if ((~*(_QWORD *)&v108 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  if (v108 <= -9.22337204e18)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v108 >= 9.22337204e18)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  *(_QWORD *)&v278 = (uint64_t)v108;
  BYTE8(v278) = 0;
  EntityProperty.wrappedValue.setter(&v278);

LABEL_37:
  v179 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierStepCount).super.super.super.isa;
  v176 = (uint64_t)objc_msgSend(v110, "statisticsForType:", v179);

  if (v176)
  {
    v180 = objc_msgSend((id)v176, v122[480]);
    if (v180)
    {
      v103 = (uint64_t)v180;
      v181 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
      objc_msgSend((id)v103, "doubleValueForUnit:", v181);
      v108 = v182;

      if ((~*(_QWORD *)&v108 & 0x7FF0000000000000) == 0)
        goto LABEL_85;
      if (v108 <= -9.22337204e18)
        goto LABEL_86;
      if (v108 >= 9.22337204e18)
        goto LABEL_87;
      *(_QWORD *)&v278 = (uint64_t)v108;
      BYTE8(v278) = 0;
      EntityProperty.wrappedValue.setter(&v278);

    }
    else
    {

    }
  }
  v183 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
  v184 = objc_msgSend(v110, "statisticsForType:", v183);

  if (v184)
  {
    v185 = objc_msgSend(v184, "maximumQuantity");
    if (v185)
    {
      v186 = v185;
      v187 = String._bridgeToObjectiveC()();
      v188 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v187);

      objc_msgSend(v186, "doubleValueForUnit:", v188);
      v108 = v189;

      v190 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "metersPerSecond");
      v191 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
      v192 = v112;
      v193 = (uint64_t)v257;
      Measurement.init(value:unit:)(v190, v191, v108);
      v194 = sub_100047110(&qword_100821EB0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 56))(v193, 0, 1, v194);
      v195 = v258;
      sub_100021CC0(v193, v258, &qword_100821E18);
      EntityProperty.wrappedValue.setter(v195);
      v196 = v193;
      v112 = v192;
      sub_10001BE90(v196, &qword_100821E18);

    }
  }
  v197 = v259;
  EntityProperty.wrappedValue.getter(v259);
  v198 = v273;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v273 + 48))(v197, 1, v112) == 1)
  {
    sub_10001BE90((uint64_t)v197, &qword_100821E38);
  }
  else
  {
    v199 = v249;
    (*(void (**)(char *, _QWORD *, uint64_t))(v198 + 32))(v249, v197, v112);
    v200 = Measurement.value.getter(v112);
    v201 = v270;
    EntityProperty.wrappedValue.getter(v270);
    v202 = v271;
    v203 = Measurement.value.getter(v271);
    v204 = v201;
    v110 = v274;
    ((void (*)(_QWORD *, uint64_t))v263)(v204, v202);
    v108 = v200 / v203;
    v205 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "metersPerSecond");
    v206 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
    v207 = (uint64_t)v257;
    Measurement.init(value:unit:)(v205, v206, v108);
    v208 = sub_100047110(&qword_100821EB0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v208 - 8) + 56))(v207, 0, 1, v208);
    v209 = v198;
    v210 = v258;
    sub_100021CC0(v207, v258, &qword_100821E18);
    EntityProperty.wrappedValue.setter(v210);
    sub_10001BE90(v207, &qword_100821E18);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v199, v112);
  }
  v211 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierHeartRate).super.super.super.isa;
  v176 = (uint64_t)objc_msgSend(v110, "statisticsForType:", v211);

  if (!v176)
    goto LABEL_56;
  v212 = objc_msgSend((id)v176, "averageQuantity");
  if (!v212)
    goto LABEL_55;
  v103 = (uint64_t)v212;
  v213 = objc_msgSend((id)objc_opt_self(HKUnit), "_countPerMinuteUnit");
  objc_msgSend((id)v103, "doubleValueForUnit:", v213);
  v108 = v214;

  if (qword_10081D5D8 != -1)
    goto LABEL_88;
  while (1)
  {
    v215 = (void *)qword_100869EF8;
    v216 = sub_10001E724(0, &qword_100821E98, NSUnitFrequency_ptr);
    v217 = v215;
    v218 = (uint64_t)v238;
    Measurement.init(value:unit:)(v217, v216, v108);
    v219 = sub_100047110(&qword_100821EA0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56))(v218, 0, 1, v219);
    v220 = v239;
    sub_100021CC0(v218, v239, &qword_100821E08);
    EntityProperty.wrappedValue.setter(v220);
    sub_10001BE90(v218, &qword_100821E08);

LABEL_55:
LABEL_56:
    v221 = objc_msgSend(v110, "workoutEvents");
    v222 = sub_10001E724(0, (unint64_t *)&qword_10081ED88, HKWorkoutEvent_ptr);
    v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v221, v222);

    *(_QWORD *)&v278 = _swiftEmptyArrayStorage;
    if ((unint64_t)v176 >> 62)
    {
      if (v176 < 0)
        v234 = v176;
      else
        v234 = v176 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v176);
      v103 = _CocoaArrayWrapper.endIndex.getter(v234);
      swift_bridgeObjectRelease(v176);
      if (!v103)
      {
LABEL_74:
        swift_bridgeObjectRelease(v176);
        v228 = (unint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
          goto LABEL_80;
        goto LABEL_75;
      }
    }
    else
    {
      v103 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v103)
        goto LABEL_74;
    }
    if (v103 >= 1)
      break;
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once(&qword_10081D5D8, sub_100163084);
  }
  for (i = 0; i != v103; ++i)
  {
    if ((v176 & 0xC000000000000001) != 0)
      v226 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v176);
    else
      v226 = *(id *)(v176 + 8 * i + 32);
    v227 = v226;
    if (objc_msgSend(v226, "type") == (id)3)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(3);
      v224 = *(_QWORD *)(v278 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v224);
      v225 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v224, v227);
      specialized ContiguousArray._endMutation()(v225);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v176);
  v228 = v278;
  if ((v278 & 0x8000000000000000) != 0)
    goto LABEL_80;
LABEL_75:
  if ((v228 & 0x4000000000000000) == 0)
  {
    v235 = *(_QWORD *)(v228 + 16);
    goto LABEL_77;
  }
LABEL_80:
  swift_bridgeObjectRetain(v228);
  v235 = _CocoaArrayWrapper.endIndex.getter(v236);
  swift_release(v228);
LABEL_77:
  swift_release(v228);
  if (v235 > 0)
  {
    *(_QWORD *)&v278 = v235;
    BYTE8(v278) = 0;
    EntityProperty.wrappedValue.setter(&v278);
  }

  swift_release(v275);
}

double sub_100138784@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (qword_10081D580 != -1)
    swift_once(&qword_10081D580, sub_100135CE4);
  v2 = qword_100869E18;
  v3 = unk_100869E20;
  v4 = qword_100869E28;
  v5 = unk_100869E30;
  *a1 = qword_100869E18;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  *(_QWORD *)&result = swift_retain(v5).n128_u64[0];
  return result;
}

uint64_t sub_100138800()
{
  return sub_1000083D8(&qword_100821C10, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625F30);
}

uint64_t sub_10013882C()
{
  return sub_1000083D8(&qword_100821C18, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626060);
}

uint64_t sub_100138858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D590 != -1)
    swift_once(&qword_10081D590, sub_100135D68);
  v2 = sub_100047110(&qword_100821EE0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869E50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001388CC()
{
  return sub_1000083D8(&qword_100821C20, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626088);
}

uint64_t sub_1001388F8()
{
  return sub_1000083D8(&qword_100821C28, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_1006260B0);
}

uint64_t sub_100138924()
{
  return sub_1000083D8(&qword_100821C30, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_1006260D8);
}

uint64_t sub_100138950()
{
  return sub_1000083D8((unint64_t *)&unk_100821C38, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626130);
}

uint64_t sub_10013897C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100135F04();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001389A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000083D8(&qword_100821ED8, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625F88);
  v4 = URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100114BE8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100138A00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D588 != -1)
    swift_once(&qword_10081D588, sub_100135D08);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869E38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_100138A74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100821C48;
  if (!qword_100821C48)
  {
    v1 = sub_100007050(&qword_100821C50);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100821C48);
  }
  return result;
}

uint64_t sub_100138AC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000083D8(&qword_100821C10, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100625F30);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100138B10()
{
  return sub_1000083D8(&qword_100821C58, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626160);
}

uint64_t sub_100138B40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000083D8((unint64_t *)&unk_100821C38, type metadata accessor for WorkoutActivityEntity, (uint64_t)&unk_100626130);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100138B90()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10FitnessApp25WorkoutActivityIdentifier_activityId;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100138BE8()
{
  return type metadata accessor for WorkoutActivityIdentifier(0);
}

uint64_t type metadata accessor for WorkoutActivityIdentifier(uint64_t a1)
{
  return sub_100024334(a1, qword_100821C88, (uint64_t)&nominal type descriptor for WorkoutActivityIdentifier);
}

uint64_t sub_100138C04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1006261C0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_100138C7C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)v4 + v8) = v10;
    *((_BYTE *)v4 + v9) = *((_BYTE *)a2 + v9);
    v11 = a3[7];
    v12 = a3[8];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (_QWORD *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = *(_QWORD *)((char *)a2 + v12);
    *(_QWORD *)((char *)v4 + v12) = v16;
    v17 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v18 = *(_QWORD *)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v18;
    v19 = a3[11];
    v20 = a3[12];
    v21 = *(_QWORD *)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v21;
    v22 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)v4 + v20) = v22;
    v23 = a3[13];
    v24 = a3[14];
    v25 = *(_QWORD *)((char *)a2 + v23);
    *(_QWORD *)((char *)v4 + v23) = v25;
    v43 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)v4 + v24) = v43;
    v26 = a3[15];
    v27 = a3[16];
    v28 = *(_QWORD *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + v26) = v28;
    v45 = *(_QWORD *)((char *)a2 + v27);
    *(_QWORD *)((char *)v4 + v27) = v45;
    v29 = a3[17];
    v30 = a3[18];
    v44 = *(_QWORD *)((char *)a2 + v29);
    *(_QWORD *)((char *)v4 + v29) = v44;
    v47 = *(_QWORD *)((char *)a2 + v30);
    *(_QWORD *)((char *)v4 + v30) = v47;
    v31 = a3[19];
    v32 = a3[20];
    v46 = *(_QWORD *)((char *)a2 + v31);
    *(_QWORD *)((char *)v4 + v31) = v46;
    v49 = *(_QWORD *)((char *)a2 + v32);
    *(_QWORD *)((char *)v4 + v32) = v49;
    v33 = a3[21];
    v34 = a3[22];
    v48 = *(_QWORD *)((char *)a2 + v33);
    *(_QWORD *)((char *)v4 + v33) = v48;
    v51 = *(_QWORD *)((char *)a2 + v34);
    *(_QWORD *)((char *)v4 + v34) = v51;
    v35 = a3[23];
    v36 = a3[24];
    v50 = *(_QWORD *)((char *)a2 + v35);
    *(_QWORD *)((char *)v4 + v35) = v50;
    v52 = *(_QWORD *)((char *)a2 + v36);
    *(_QWORD *)((char *)v4 + v36) = v52;
    v37 = a3[25];
    v38 = a3[26];
    v39 = *(_QWORD *)((char *)a2 + v37);
    *(_QWORD *)((char *)v4 + v37) = v39;
    v40 = *(_QWORD *)((char *)a2 + v38);
    *(_QWORD *)((char *)v4 + v38) = v40;
    v41 = v10;
    swift_bridgeObjectRetain(v15);
    swift_retain(v16);
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v25);
    swift_retain(v43);
    swift_retain(v28);
    swift_retain(v45);
    swift_retain(v44);
    swift_retain(v47);
    swift_retain(v46);
    swift_retain(v49);
    swift_retain(v48);
    swift_retain(v51);
    swift_retain(v50);
    swift_retain(v52);
    swift_retain(v39);
  }
  swift_retain(v40);
  return v4;
}

uint64_t sub_100138EBC(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_release(*(_QWORD *)(a1 + a2[8]));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_release(*(_QWORD *)(a1 + a2[12]));
  swift_release(*(_QWORD *)(a1 + a2[13]));
  swift_release(*(_QWORD *)(a1 + a2[14]));
  swift_release(*(_QWORD *)(a1 + a2[15]));
  swift_release(*(_QWORD *)(a1 + a2[16]));
  swift_release(*(_QWORD *)(a1 + a2[17]));
  swift_release(*(_QWORD *)(a1 + a2[18]));
  swift_release(*(_QWORD *)(a1 + a2[19]));
  swift_release(*(_QWORD *)(a1 + a2[20]));
  swift_release(*(_QWORD *)(a1 + a2[21]));
  swift_release(*(_QWORD *)(a1 + a2[22]));
  swift_release(*(_QWORD *)(a1 + a2[23]));
  swift_release(*(_QWORD *)(a1 + a2[24]));
  swift_release(*(_QWORD *)(a1 + a2[25]));
  return swift_release(*(_QWORD *)(a1 + a2[26]));
}

uint64_t sub_100138FE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (_QWORD *)(a1 + v10);
  v13 = (_QWORD *)(a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v15;
  v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  v18 = a3[11];
  v19 = a3[12];
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = a3[13];
  v23 = a3[14];
  v24 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v24;
  v42 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v42;
  v25 = a3[15];
  v26 = a3[16];
  v27 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  v44 = *(_QWORD *)(a2 + v26);
  *(_QWORD *)(a1 + v26) = v44;
  v28 = a3[17];
  v29 = a3[18];
  v43 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v43;
  v46 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)(a1 + v29) = v46;
  v30 = a3[19];
  v31 = a3[20];
  v45 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v45;
  v48 = *(_QWORD *)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v48;
  v32 = a3[21];
  v33 = a3[22];
  v47 = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + v32) = v47;
  v50 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v50;
  v34 = a3[23];
  v35 = a3[24];
  v49 = *(_QWORD *)(a2 + v34);
  *(_QWORD *)(a1 + v34) = v49;
  v51 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v51;
  v36 = a3[25];
  v37 = a3[26];
  v38 = *(_QWORD *)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  v39 = *(_QWORD *)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v39;
  v40 = v9;
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  swift_retain(v17);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v24);
  swift_retain(v42);
  swift_retain(v27);
  swift_retain(v44);
  swift_retain(v43);
  swift_retain(v46);
  swift_retain(v45);
  swift_retain(v48);
  swift_retain(v47);
  swift_retain(v50);
  swift_retain(v49);
  swift_retain(v51);
  swift_retain(v38);
  swift_retain(v39);
  return a1;
}

uint64_t sub_100139200(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  swift_retain(v18);
  swift_release(v17);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v19 = a3[10];
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a3[11];
  v23 = *(_QWORD *)(a2 + v22);
  v24 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[12];
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = a3[13];
  v29 = *(_QWORD *)(a2 + v28);
  v30 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = v29;
  swift_retain(v29);
  swift_release(v30);
  v31 = a3[14];
  v32 = *(_QWORD *)(a2 + v31);
  v33 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a3[15];
  v35 = *(_QWORD *)(a2 + v34);
  v36 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = v35;
  swift_retain(v35);
  swift_release(v36);
  v37 = a3[16];
  v38 = *(_QWORD *)(a2 + v37);
  v39 = *(_QWORD *)(a1 + v37);
  *(_QWORD *)(a1 + v37) = v38;
  swift_retain(v38);
  swift_release(v39);
  v40 = a3[17];
  v41 = *(_QWORD *)(a2 + v40);
  v42 = *(_QWORD *)(a1 + v40);
  *(_QWORD *)(a1 + v40) = v41;
  swift_retain(v41);
  swift_release(v42);
  v43 = a3[18];
  v44 = *(_QWORD *)(a2 + v43);
  v45 = *(_QWORD *)(a1 + v43);
  *(_QWORD *)(a1 + v43) = v44;
  swift_retain(v44);
  swift_release(v45);
  v46 = a3[19];
  v47 = *(_QWORD *)(a2 + v46);
  v48 = *(_QWORD *)(a1 + v46);
  *(_QWORD *)(a1 + v46) = v47;
  swift_retain(v47);
  swift_release(v48);
  v49 = a3[20];
  v50 = *(_QWORD *)(a2 + v49);
  v51 = *(_QWORD *)(a1 + v49);
  *(_QWORD *)(a1 + v49) = v50;
  swift_retain(v50);
  swift_release(v51);
  v52 = a3[21];
  v53 = *(_QWORD *)(a2 + v52);
  v54 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a1 + v52) = v53;
  swift_retain(v53);
  swift_release(v54);
  v55 = a3[22];
  v56 = *(_QWORD *)(a2 + v55);
  v57 = *(_QWORD *)(a1 + v55);
  *(_QWORD *)(a1 + v55) = v56;
  swift_retain(v56);
  swift_release(v57);
  v58 = a3[23];
  v59 = *(_QWORD *)(a2 + v58);
  v60 = *(_QWORD *)(a1 + v58);
  *(_QWORD *)(a1 + v58) = v59;
  swift_retain(v59);
  swift_release(v60);
  v61 = a3[24];
  v62 = *(_QWORD *)(a2 + v61);
  v63 = *(_QWORD *)(a1 + v61);
  *(_QWORD *)(a1 + v61) = v62;
  swift_retain(v62);
  swift_release(v63);
  v64 = a3[25];
  v65 = *(_QWORD *)(a2 + v64);
  v66 = *(_QWORD *)(a1 + v64);
  *(_QWORD *)(a1 + v64) = v65;
  swift_retain(v65);
  swift_release(v66);
  v67 = a3[26];
  v68 = *(_QWORD *)(a2 + v67);
  v69 = *(_QWORD *)(a1 + v67);
  *(_QWORD *)(a1 + v67) = v68;
  swift_retain(v68);
  swift_release(v69);
  return a1;
}

uint64_t sub_1001394A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_1001395D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v16);
  v17 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_release(v18);
  v19 = a3[11];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  v21 = a3[12];
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_release(v22);
  v23 = a3[13];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_release(v24);
  v25 = a3[14];
  v26 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_release(v26);
  v27 = a3[15];
  v28 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_release(v28);
  v29 = a3[16];
  v30 = *(_QWORD *)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  swift_release(v30);
  v31 = a3[17];
  v32 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_release(v32);
  v33 = a3[18];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_release(v34);
  v35 = a3[19];
  v36 = *(_QWORD *)(a1 + v35);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  swift_release(v36);
  v37 = a3[20];
  v38 = *(_QWORD *)(a1 + v37);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  swift_release(v38);
  v39 = a3[21];
  v40 = *(_QWORD *)(a1 + v39);
  *(_QWORD *)(a1 + v39) = *(_QWORD *)(a2 + v39);
  swift_release(v40);
  v41 = a3[22];
  v42 = *(_QWORD *)(a1 + v41);
  *(_QWORD *)(a1 + v41) = *(_QWORD *)(a2 + v41);
  swift_release(v42);
  v43 = a3[23];
  v44 = *(_QWORD *)(a1 + v43);
  *(_QWORD *)(a1 + v43) = *(_QWORD *)(a2 + v43);
  swift_release(v44);
  v45 = a3[24];
  v46 = *(_QWORD *)(a1 + v45);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  swift_release(v46);
  v47 = a3[25];
  v48 = *(_QWORD *)(a1 + v47);
  *(_QWORD *)(a1 + v47) = *(_QWORD *)(a2 + v47);
  swift_release(v48);
  v49 = a3[26];
  v50 = *(_QWORD *)(a1 + v49);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  swift_release(v50);
  return a1;
}

uint64_t sub_1001397C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001397D4);
}

uint64_t sub_1001397D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100139850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013985C);
}

uint64_t sub_10013985C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1001398D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[23];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_1006261F8;
    v4[3] = &unk_1006261C0;
    v4[4] = &unk_100626210;
    v4[5] = &unk_100626228;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[15] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[20] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[22] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 23, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001399A0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  uint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  v1._countAndFlagsBits = 47;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_1000083D8((unint64_t *)&qword_100821498, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  return v7;
}

Swift::Int sub_100139A38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  v1 = type metadata accessor for MetricChartData(0);
  v2 = type metadata accessor for Date(0);
  v3 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v2, v3);
  objc_msgSend(*(id *)((char *)v0 + *(int *)(v1 + 24)), "doubleValueForUnit:", *v0);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v4;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  NSObject.hash(into:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_100139B04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v5 = type metadata accessor for Date(0);
  v6 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  objc_msgSend(*(id *)((char *)v2 + *(int *)(a2 + 24)), "doubleValueForUnit:", *v2);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v7;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  return NSObject.hash(into:)(a1);
}

Swift::Int sub_100139BB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, a1);
  v4 = type metadata accessor for Date(0);
  v5 = sub_1000083D8((unint64_t *)&qword_1008214E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  objc_msgSend(*(id *)((char *)v2 + *(int *)(a2 + 24)), "doubleValueForUnit:", *v2);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v6;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  NSObject.hash(into:)(v9);
  return Hasher._finalize()();
}

uint64_t sub_100139C70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  sub_100139CE8();
  if ((static NSObject.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (static Date.== infix(_:_:)((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    return static NSObject.== infix(_:_:)(*(_QWORD *)((char *)a1 + *(int *)(a3 + 24)), *(_QWORD *)((char *)a2 + *(int *)(a3 + 24))) & 1;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_100139CE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081E630;
  if (!qword_10081E630)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10081E630);
  }
  return result;
}

void **sub_100139D24(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    v15 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v15;
    v16 = v15;
  }
  return v7;
}

void sub_100139DD8(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

void **sub_100139E34(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  void *v14;
  id v15;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v14;
  v15 = v14;
  return a1;
}

void **sub_100139EC0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(void **)((char *)a1 + v13);
  *(void **)((char *)a1 + v13) = v14;
  v16 = v14;

  return a1;
}

_QWORD *sub_100139F50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_100139FC8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *(void **)((char *)a2 + v11);

  return a1;
}

uint64_t sub_10013A050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A05C);
}

uint64_t sub_10013A05C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10013A0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A0E4);
}

char *sub_10013A0E4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MetricChartData(uint64_t a1)
{
  uint64_t result;

  result = qword_100821F50;
  if (!qword_100821F50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricChartData);
  return result;
}

uint64_t sub_10013A194(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013A20C()
{
  return sub_1000083D8(&qword_100821F90, type metadata accessor for MetricChartData, (uint64_t)&unk_100626284);
}

double sub_10013A238()
{
  double result;

  if (qword_10081DD78 != -1)
    swift_once(&qword_10081DD78, sub_100442F3C);
  result = *(double *)&qword_10086AA08 + *(double *)&qword_10086AA08;
  *(double *)&qword_100821F98 = *(double *)&qword_10086AA08 + *(double *)&qword_10086AA08;
  return result;
}

char *sub_10013A284()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  double v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  objc_super v22;

  v1 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeLightColor;
  sub_10013AD0C();
  v2 = v0;
  *(UIColor *)&v0[v1] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  v3 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor;
  *(UIColor *)&v2[v3] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 0.39836);
  v4 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineDashPattern;
  v5 = sub_100047110(&qword_100821510);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100620BC0;
  if (qword_10081D5A0 != -1)
    swift_once(&qword_10081D5A0, sub_10013A238);
  v7 = qword_100821F98;
  v8 = *(double *)&qword_100821F98 * 4.0;
  *(_QWORD *)(v6 + 32) = qword_100821F98;
  *(double *)(v6 + 40) = v8;
  *(_QWORD *)&v2[v4] = v6;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth] = v7;
  v9 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer;
  *(_QWORD *)&v2[v9] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v10 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  *(_QWORD *)&v2[v10] = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");

  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  v11 = (char *)objc_msgSendSuper2(&v22, "init");
  v12 = *(void **)&v11[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer];
  v13 = *(double *)&v11[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth];
  v14 = v11;
  v15 = v12;
  objc_msgSend(v15, "setLineWidth:", v13);
  v16 = *(id *)&v14[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor];
  v17 = objc_msgSend(v16, "CGColor");
  objc_msgSend(v15, "setStrokeColor:", v17);

  v18 = *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineDashPattern];
  v19 = swift_bridgeObjectRetain(v18);
  v20 = (void *)CAShapeLayer.withLineDashPattern(_:)(v19);

  objc_msgSend(v14, "addSublayer:", v20, swift_bridgeObjectRelease(v18).n128_f64[0]);
  return v14;
}

uint64_t sub_10013A4E4(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeLightColor;
  sub_10013AD0C();
  v5 = v1;
  *(UIColor *)&v1[v4] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  v6 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor;
  *(UIColor *)&v5[v6] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 0.39836);
  v7 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineDashPattern;
  v8 = sub_100047110(&qword_100821510);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100620BC0;
  if (qword_10081D5A0 != -1)
    swift_once(&qword_10081D5A0, sub_10013A238);
  v10 = qword_100821F98;
  v11 = *(double *)&qword_100821F98 * 4.0;
  *(_QWORD *)(v9 + 32) = qword_100821F98;
  *(double *)(v9 + 40) = v11;
  *(_QWORD *)&v5[v7] = v9;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth] = v10;
  v12 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer;
  *(_QWORD *)&v5[v12] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v13 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  v14 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");

  *(_QWORD *)&v5[v13] = v14;
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v7]);

  v15 = *(void **)&v5[v13];
  v16 = type metadata accessor for YearlyChartAxisLayer();
  swift_deallocPartialClassInstance(v5, v16, 56, 7);
  return 0;
}

id sub_10013A724()
{
  void *v0;
  double Width;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  objc_msgSend(v0, "bounds");
  Width = CGRectGetWidth(v18);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  if (qword_10081DD70 != -1)
    swift_once(&qword_10081DD70, sub_1000071BC);
  v3 = Width / 11.0;
  v4 = *(double *)&qword_10086AA00;
  v5 = UIRoundToScale(v3 * 0.0, *(double *)&qword_10086AA00);
  objc_msgSend(v2, "moveToPoint:", v5, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v5, CGRectGetMaxY(v19));
  v6 = UIRoundToScale(v3, v4);
  objc_msgSend(v2, "moveToPoint:", v6, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v6, CGRectGetMaxY(v20));
  v7 = UIRoundToScale(v3 + v3, v4);
  objc_msgSend(v2, "moveToPoint:", v7, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v7, CGRectGetMaxY(v21));
  v8 = UIRoundToScale(v3 * 3.0, v4);
  objc_msgSend(v2, "moveToPoint:", v8, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v8, CGRectGetMaxY(v22));
  v9 = UIRoundToScale(v3 * 4.0, v4);
  objc_msgSend(v2, "moveToPoint:", v9, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v9, CGRectGetMaxY(v23));
  v10 = UIRoundToScale(v3 * 5.0, v4);
  objc_msgSend(v2, "moveToPoint:", v10, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v10, CGRectGetMaxY(v24));
  v11 = UIRoundToScale(v3 * 6.0, v4);
  objc_msgSend(v2, "moveToPoint:", v11, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v11, CGRectGetMaxY(v25));
  v12 = UIRoundToScale(v3 * 7.0, v4);
  objc_msgSend(v2, "moveToPoint:", v12, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v12, CGRectGetMaxY(v26));
  v13 = UIRoundToScale(v3 * 8.0, v4);
  objc_msgSend(v2, "moveToPoint:", v13, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v13, CGRectGetMaxY(v27));
  v14 = UIRoundToScale(v3 * 9.0, v4);
  objc_msgSend(v2, "moveToPoint:", v14, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v14, CGRectGetMaxY(v28));
  v15 = UIRoundToScale(v3 * 10.0, v4);
  objc_msgSend(v2, "moveToPoint:", v15, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v15, CGRectGetMaxY(v29));
  v16 = UIRoundToScale(v3 * 11.0, v4);
  objc_msgSend(v2, "moveToPoint:", v16, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "addLineToPoint:", v16, CGRectGetMaxY(v30));
  return v2;
}

id sub_10013AB28()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  objc_msgSendSuper2(&v8, "layoutSublayers");
  v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer];
  objc_msgSend(v0, "bounds");
  objc_msgSend(v1, "setFrame:");
  v2 = sub_10013A724();
  v3 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath] = v2;

  v5 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v5, "begin");
  objc_msgSend(v5, "setDisableActions:", 1);
  v6 = objc_msgSend(*(id *)&v0[v3], "CGPath");
  objc_msgSend(v1, "setPath:", v6);

  return objc_msgSend(v5, "commit");
}

id sub_10013AC54()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for YearlyChartAxisLayer()
{
  return objc_opt_self(_TtC10FitnessApp20YearlyChartAxisLayer);
}

unint64_t sub_10013AD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10082EDB0;
  if (!qword_10082EDB0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10082EDB0);
  }
  return result;
}

id sub_10013AD48()
{
  return (id)sub_10013B728();
}

uint64_t sub_10013AD94(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v6;

  return sub_10013BE0C(a1, a2 & 1, a3, a4 & 1, a6, *(id *)(v6 + 16), *(_QWORD *)(v6 + 24), *(void **)(v6 + 32));
}

uint64_t sub_10013ADE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10013B6E4();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10013AE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10013B6E4();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10013AE80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013B6E4();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

void sub_10013AEA4(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  char v28;
  double v29;
  char v30;
  double v31;
  double v32;
  id v33;
  id v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    goto LABEL_30;
  v7 = objc_allocWithZone((Class)UIView);
  swift_retain(a1);
  v55 = a2;
  v8 = objc_msgSend(v7, "init", swift_bridgeObjectRetain(v3).n128_f64[0]);
  v9 = v8;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v51 = v3 & 0xFFFFFFFFFFFFFF8;
    else
      v51 = v3;
    swift_bridgeObjectRetain(v3);
    v10 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v54 = v3;
  v56 = a1;
  v11 = (id)FIUIBundle(v8);
  if (!v11)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, 0x800000010068A840, "FitnessApp/WorkoutTimeInZonesView.swift", 39, 2, 82, 0);
    __break(1u);
    return;
  }
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "localizedStringForKey:value:table:", v13, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

  v17 = sub_100038CA0();
  v18 = StringProtocol.localizedUppercase.getter(&type metadata for String, v17);
  v20 = v19;
  swift_bridgeObjectRelease(v16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v52 = v9;
  v53 = a3;
  v21 = v54;
  if (v10)
  {
    v22 = 0;
    v23 = OBJC_IVAR____TtC10FitnessApp20WorkoutHeartRateInfo_elapsedTimeInZones;
    do
    {
      if ((v54 & 0xC000000000000001) != 0)
      {
        v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v21);
      }
      else
      {
        v24 = *(_QWORD *)(v21 + 8 * v22 + 32);
        swift_retain(v24);
      }
      v25 = *(_QWORD *)(v56 + v23);
      v26 = 0.0;
      if (v25)
      {
        if (*(_QWORD *)(v25 + 16))
        {
          v27 = sub_100030DDC(v22);
          if ((v28 & 1) != 0)
            v26 = *(double *)(*(_QWORD *)(v25 + 56) + 8 * v27);
        }
      }
      v29 = COERCE_DOUBLE(sub_100293410());
      v31 = v26 / v29;
      if (v29 <= 0.0)
        v31 = 0.0;
      if ((v30 & 1) != 0)
        v32 = 0.0;
      else
        v32 = v31;
      v33 = objc_allocWithZone((Class)type metadata accessor for WorkoutTimeInZoneView());
      v34 = v55;
      swift_retain(v24);
      swift_bridgeObjectRetain(v20);
      v35 = sub_1002F19E4(v24, v34, v18, v20, v26, v32);
      objc_msgSend(v35, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v36 = v35;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v38 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v37 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v38 >= v37 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      ++v22;
      v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized Array._endMutation()(v39);

      swift_release(v24);
      v21 = v54;
    }
    while (v10 != v22);
  }
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  v40 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v45 = v44;

  v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v40, "setText:", v46, swift_bridgeObjectRelease(v45).n128_f64[0]);

  v47 = objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
  objc_msgSend(v40, "setTextColor:", v47);

  v48 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleFootnote);
  v49 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
  v50 = objc_msgSend(v48, "_fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:", v49);

  objc_msgSend(v40, "setFont:", v50);
  objc_msgSend(v40, "setNumberOfLines:", 0);

  swift_release(v56);
  *v53 = v56;
  v53[1] = v55;
  v53[2] = v52;
  v53[3] = _swiftEmptyArrayStorage;
  v53[4] = v40;
}

void destroy for WorkoutTimeInZonesView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for WorkoutTimeInZonesView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  v6 = (void *)a2[2];
  v5 = a2[3];
  a1[2] = (uint64_t)v6;
  a1[3] = v5;
  v7 = (void *)a2[4];
  a1[4] = (uint64_t)v7;
  swift_retain(v3);
  v8 = v4;
  v9 = v6;
  swift_bridgeObjectRetain(v5);
  v10 = v7;
  return a1;
}

uint64_t *assignWithCopy for WorkoutTimeInZonesView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  v9 = (void *)a2[2];
  v10 = (void *)a1[2];
  a1[2] = (uint64_t)v9;
  v11 = v9;

  v12 = a2[3];
  v13 = a1[3];
  a1[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (void *)a2[4];
  v15 = (void *)a1[4];
  a1[4] = (uint64_t)v14;
  v16 = v14;

  return a1;
}

uint64_t assignWithTake for WorkoutTimeInZonesView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutTimeInZonesView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutTimeInZonesView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutTimeInZonesView()
{
  return &type metadata for WorkoutTimeInZonesView;
}

void *sub_10013B6D8()
{
  return &protocol witness table for Never;
}

unint64_t sub_10013B6E4()
{
  unint64_t result;

  result = qword_100821FF8;
  if (!qword_100821FF8)
  {
    result = swift_getWitnessTable(&unk_100626348, &type metadata for WorkoutTimeInZonesView);
    atomic_store(result, (unint64_t *)&qword_100821FF8);
  }
  return result;
}

uint64_t sub_10013B728()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char **v29;
  id v30;
  id v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  char *v39;
  uint64_t v40;
  double v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  Class isa;
  uint64_t result;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v2 = (char *)v0[2];
  v3 = *(_QWORD *)(*v0 + 16);
  if (!v3)
    goto LABEL_39;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v6 = (char *)(v3 & 0xFFFFFFFFFFFFFF8);
    else
      v6 = *(char **)(*v0 + 16);
    v39 = v2;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
    if (v4 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v2;
  }
  v6 = v2;
  if (!v4)
  {
LABEL_18:
    v1 = v58;
    v4 = *(_QWORD *)(v58 + 24);
    v63 = v4;
    v34 = v4 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)v4 >> 62))
    {
      v35 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v4);
      if (v35)
      {
LABEL_20:
        if (v35 >= 1)
        {
          v36 = 0;
          do
          {
            if ((v4 & 0xC000000000000001) != 0)
              v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v4);
            else
              v37 = *(id *)(v4 + 8 * v36 + 32);
            v38 = v37;
            ++v36;
            swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
            swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
            sub_1002F1330((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 10.0);

            swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          }
          while (v35 != v36);
          goto LABEL_36;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_36:
      sub_1000478F4(&v63);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      *(_QWORD *)&v41 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage).n128_u64[0];
      v42 = *(void **)(v1 + 32);
      objc_msgSend(v2, "addSubview:", v42, v41);
      v43 = (void *)objc_opt_self(NSLayoutConstraint);
      v44 = sub_100047110((uint64_t *)&unk_100828340);
      v45 = swift_allocObject(v44, 56, 7);
      *(_OWORD *)(v45 + 16) = xmmword_100624C90;
      v46 = objc_msgSend(v42, "leadingAnchor");
      v47 = objc_msgSend(v2, "leadingAnchor");
      v48 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

      *(_QWORD *)(v45 + 32) = v48;
      v49 = objc_msgSend(v42, "trailingAnchor");
      v50 = objc_msgSend(v2, "trailingAnchor");
      v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

      *(_QWORD *)(v45 + 40) = v51;
      v52 = objc_msgSend(v42, "topAnchor");
      v53 = objc_msgSend(v6, "bottomAnchor");
      v54 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v53, 5.0);

      *(_QWORD *)(v45 + 48) = v54;
      specialized Array._endMutation()(v55);
      sub_100039898();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v43, "activateConstraints:", isa, swift_bridgeObjectRelease(v45).n128_f64[0]);

      return (uint64_t)v2;
    }
LABEL_32:
    if (v4 >= 0)
      v40 = v34;
    else
      v40 = v4;
    swift_bridgeObjectRetain(v4);
    v35 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (v35)
      goto LABEL_20;
    goto LABEL_36;
  }
  v7 = *(_QWORD *)(v58 + 24);
  v62 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0 || (unint64_t)(v4 - 1) < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v59 = (id)objc_opt_self(NSLayoutConstraint);
    v8 = 0;
    v9 = v2;
    v60 = v7;
    v61 = v4;
    do
    {
      if (v62)
        v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v7);
      else
        v10 = (char *)*(id *)(v7 + 8 * v8 + 32);
      v6 = v10;
      v11 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC10FitnessApp21WorkoutTimeInZoneView_zoneNameLabel], "trailingAnchor");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      v15 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10FitnessApp21WorkoutTimeInZoneView_rangeLabel], "leadingAnchor", specialized Array._endMutation()(v14).n128_f64[0]);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      v18 = v8 + 1;
      v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      objc_msgSend(v2, "addSubview:", v6, specialized Array._endMutation()(v19).n128_f64[0]);
      v20 = sub_100047110((uint64_t *)&unk_100828340);
      v21 = swift_allocObject(v20, 56, 7);
      *(_OWORD *)(v21 + 16) = xmmword_100624C90;
      v22 = objc_msgSend(v6, "leadingAnchor");
      v23 = objc_msgSend(v2, "leadingAnchor");
      v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

      *(_QWORD *)(v21 + 32) = v24;
      v25 = objc_msgSend(v6, "trailingAnchor");
      v26 = objc_msgSend(v2, "trailingAnchor");
      v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

      *(_QWORD *)(v21 + 40) = v27;
      v28 = objc_msgSend(v6, "topAnchor");
      v29 = &selRef_bottomAnchor;
      if (!v8)
        v29 = &selRef_topAnchor;
      v30 = objc_msgSend(v9, *v29);
      v31 = objc_msgSend(v28, "constraintEqualToAnchor:", v30);

      *(_QWORD *)(v21 + 48) = v31;
      v63 = v21;
      specialized Array._endMutation()(v32);
      sub_100039898();
      v33 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v59, "activateConstraints:", v33, swift_bridgeObjectRelease(v21).n128_f64[0]);

      v9 = v6;
      ++v8;
      v7 = v60;
    }
    while (v61 != v18);
    goto LABEL_18;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, 0x800000010068A840, "FitnessApp/WorkoutTimeInZonesView.swift", 39, 2, 23, 0);
  __break(1u);
  return result;
}

uint64_t sub_10013BE0C(uint64_t a1, char a2, uint64_t a3, char a4, int a5, id a6, uint64_t a7, void *a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  double v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;

  objc_msgSend(a6, "frame");
  v15 = v14;
  v17 = v16;
  if ((unint64_t)a7 >> 62)
  {
    if (a7 < 0)
      v26 = a7;
    else
      v26 = a7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a7);
    result = _CocoaArrayWrapper.endIndex.getter(v26);
    v18 = result;
    if (!result)
      goto LABEL_14;
  }
  else
  {
    v18 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a7);
    if (!v18)
      goto LABEL_14;
  }
  if (v18 < 1)
  {
    __break(1u);
    return result;
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    if ((a7 & 0xC000000000000001) != 0)
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a7);
    else
      v22 = *(id *)(a7 + 8 * v20 + 32);
    v23 = v22;
    ++v20;
    objc_msgSend(v22, "intrinsicContentSize");
    v25 = v24;

    v21 = v21 + v25;
  }
  while (v18 != v20);
LABEL_14:
  swift_bridgeObjectRelease(a7);
  if ((a4 & 1) != 0)
    v27 = v17;
  else
    v27 = *(double *)&a3;
  if ((a2 & 1) == 0)
    v15 = *(double *)&a1;
  objc_msgSend(a8, "sizeThatFits:", v15, v27);
  return *(_QWORD *)&v15;
}

uint64_t sub_10013BFBC(uint64_t a1)
{
  return sub_100032C28(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100296BDC);
}

void sub_10013BFC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10013FAD0(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_100821608);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_10013C130(uint64_t a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10013FBFC(isUniquelyReferenced_nonNull_native, v15, 1, v3, &qword_1008214B0);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (char *)v3 + v9 + 32;
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

void sub_10013C280(uint64_t a1)
{
  sub_10013C68C(a1, &qword_100821010, &qword_1008200C0);
}

void sub_10013C294(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10013F75C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_10013C3E4(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100140370(isUniquelyReferenced_nonNull_native, v15, 1, v3, &qword_1008215E8);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

void sub_10013C534(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10003D454(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_10013C678(uint64_t a1)
{
  sub_10013D228(a1, &qword_1008214A8, type metadata accessor for TrendListMetric);
}

void sub_10013C68C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  char v19;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v7 <= v5[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v18 = v6 + v4;
  else
    v18 = v6;
  v5 = sub_10013FEE0(isUniquelyReferenced_nonNull_native, v18, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = v5[2];
  if ((v5[3] >> 1) - v12 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = (unint64_t)&v5[5 * v12 + 4];
  if (a1 + 32 < v13 + 40 * v4 && v13 < a1 + 32 + 40 * v4)
    goto LABEL_24;
  sub_100047110(a3);
  swift_arrayInitWithCopy(v13);
  if (!v4)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return;
  }
  v15 = v5[2];
  v16 = __OFADD__(v15, v4);
  v17 = v15 + v4;
  if (!v16)
  {
    v5[2] = v17;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v19 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v19, 1092, 0);
  __break(1u);
}

void sub_10013C808(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100140240(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[12 * v8 + 4];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_10013C960(uint64_t a1)
{
  return sub_100032C28(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100296FF4);
}

void sub_10013C96C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100140370(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_100821630);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_10013CAB8(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10013FBFC(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_1008214B8);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_10013CC04(uint64_t a1)
{
  sub_10013D228(a1, &qword_100821618, type metadata accessor for ActivitySharingHighlight);
}

void sub_10013CC18(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell **v2;
  uint64_t v3;
  CHWorkoutDetailHeartRateTableViewCell **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  unint64_t v81;

  v4 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    a1 = __CocoaSet.count.getter(a1);
    v6 = a1;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
  }
  v7 = (uint64_t)*v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 < 0)
    v30 = (uint64_t)*v4;
  else
    v30 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v7, v32, v33, v34, v35, v36, v37, v38);
  v9 = v31 + v6;
  if (__OFADD__(v31, v6))
    goto LABEL_30;
LABEL_8:
  v10 = (uint64_t)*v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = (CHWorkoutDetailHeartRateTableViewCell *)v10;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v43 = v10;
    else
      v43 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v14 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v10, v44, v45, v46, v47, v48, v49, v50);
  }
  else
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9)
    v14 = v9;
  swift_bridgeObjectRetain(v10);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v14, 1, v10);
  swift_bridgeObjectRelease(*v4, v16, v17, v18, v19, v20, v21, v22);
  *v4 = (CHWorkoutDetailHeartRateTableViewCell *)v15;
  v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v23 = *(_QWORD *)(v13 + 16);
  v24 = (*(_QWORD *)(v13 + 24) >> 1) - v23;
  a1 = (uint64_t)sub_100298198(&v77, (uint64_t **)(v13 + 8 * v23 + 32), v24, v5);
  if (a1 < v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a1 >= 1)
  {
    v25 = *(_QWORD *)(((unint64_t)*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v26 = __OFADD__(v25, a1);
    v27 = v25 + a1;
    if (v26)
    {
      __break(1u);
LABEL_42:
      v51 = __CocoaSet.Iterator.next()(a1);
      if (!v51)
        goto LABEL_86;
      v52 = v51;
      v75 = v51;
      v53 = sub_10001E724(0, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
      swift_unknownObjectRetain(v52);
      swift_dynamicCast(&v76, &v75, (char *)&type metadata for Swift.AnyObject + 8, v53, 7);
      v42 = v76;
      a1 = swift_unknownObjectRelease(v52);
      while (2)
      {
        if (!v42)
        {
          v6 = v77;
LABEL_86:
          v28 = v6;
          goto LABEL_24;
        }
        while (1)
        {
          v54 = (unint64_t)*v4 & 0xFFFFFFFFFFFFFF8;
          v55 = *(_QWORD *)(v54 + 0x18);
          if (v3 + 1 > (uint64_t)(v55 >> 1))
          {
            a1 = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v3 + 1, 1);
            v54 = (unint64_t)*v4 & 0xFFFFFFFFFFFFFF8;
          }
          v56 = *(_QWORD *)(v54 + 24) >> 1;
          if (v3 < v56)
            break;
LABEL_46:
          *(_QWORD *)(v54 + 16) = v3;
        }
        v57 = v54 + 32;
        while (1)
        {
          *(_QWORD *)(v57 + 8 * v3++) = v42;
          v58 = v77;
          v59 = v80;
          if ((v77 & 0x8000000000000000) == 0)
            break;
          v62 = __CocoaSet.Iterator.next()(a1);
          if (!v62)
            goto LABEL_84;
          v63 = v62;
          v75 = v62;
          v64 = sub_10001E724(0, &qword_100821A68, _HKFitnessFriendWorkout_ptr);
          swift_unknownObjectRetain(v63);
          swift_dynamicCast(&v76, &v75, (char *)&type metadata for Swift.AnyObject + 8, v64, 7);
          v42 = v76;
          a1 = swift_unknownObjectRelease(v63);
LABEL_58:
          if (!v42)
          {
            v58 = v77;
LABEL_84:
            *(_QWORD *)(((unint64_t)*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            v28 = v58;
            goto LABEL_24;
          }
          if (v3 >= v56)
          {
            v54 = (unint64_t)*v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_46;
          }
        }
        if (v81)
        {
          v60 = (v81 - 1) & v81;
          v61 = __clz(__rbit64(v81)) | (v80 << 6);
LABEL_54:
          v42 = *(void **)(*(_QWORD *)(v77 + 48) + 8 * v61);
          a1 = v42;
LABEL_55:
          v80 = v59;
          v81 = v60;
          goto LABEL_58;
        }
        v65 = v80 + 1;
        if (__OFADD__(v80, 1))
        {
          __break(1u);
LABEL_109:
          v42 = 0;
          v40 = 0;
          v39 = v1;
LABEL_36:
          v80 = v39;
          v81 = v40;
          continue;
        }
        break;
      }
      v66 = (unint64_t)(v79 + 64) >> 6;
      if (v65 >= v66)
      {
        v42 = 0;
        v60 = 0;
        goto LABEL_55;
      }
      v67 = *(_QWORD *)(v78 + 8 * v65);
      if (v67)
      {
LABEL_64:
        v60 = (v67 - 1) & v67;
        v61 = __clz(__rbit64(v67)) + (v65 << 6);
        v59 = v65;
        goto LABEL_54;
      }
      v68 = v80 + 2;
      if (v80 + 2 < v66)
      {
        v67 = *(_QWORD *)(v78 + 8 * v68);
        if (v67)
        {
LABEL_68:
          v65 = v68;
          goto LABEL_64;
        }
        v1 = v80 + 3;
        if (v80 + 3 >= v66)
          goto LABEL_81;
        v67 = *(_QWORD *)(v78 + 8 * v1);
        if (v67)
        {
          v65 = v80 + 3;
          goto LABEL_64;
        }
        v68 = v80 + 4;
        if (v80 + 4 >= v66)
        {
          v42 = 0;
          v60 = 0;
          v59 = v80 + 3;
          goto LABEL_55;
        }
        v67 = *(_QWORD *)(v78 + 8 * v68);
        if (v67)
          goto LABEL_68;
        v65 = v80 + 5;
        if (v80 + 5 >= v66)
        {
LABEL_81:
          v42 = 0;
          v60 = 0;
          v59 = v68;
          goto LABEL_55;
        }
        v67 = *(_QWORD *)(v78 + 8 * v65);
        if (v67)
          goto LABEL_64;
        v65 = v66 - 1;
        v69 = v80 + 6;
        while (v66 != v69)
        {
          v67 = *(_QWORD *)(v78 + 8 * v69++);
          if (v67)
          {
            v65 = v69 - 1;
            goto LABEL_64;
          }
        }
      }
      v42 = 0;
      v60 = 0;
      v59 = v65;
      goto LABEL_55;
    }
    *(_QWORD *)(((unint64_t)*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v27;
  }
  if (a1 != v24)
  {
    v28 = v77;
LABEL_24:
    v29 = sub_100133140(v28);
    specialized Array._endMutation()(v29);
    return;
  }
LABEL_32:
  v3 = *(_QWORD *)(((unint64_t)*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v77;
  v39 = v80;
  if (v77 < 0)
    goto LABEL_42;
  if (v81)
  {
    v40 = (v81 - 1) & v81;
    v41 = __clz(__rbit64(v81)) | (v80 << 6);
LABEL_35:
    v42 = *(void **)(*(_QWORD *)(v77 + 48) + 8 * v41);
    a1 = v42;
    goto LABEL_36;
  }
  v70 = v80 + 1;
  if (!__OFADD__(v80, 1))
  {
    v71 = (unint64_t)(v79 + 64) >> 6;
    if (v70 >= v71)
    {
      v42 = 0;
      v40 = 0;
      goto LABEL_36;
    }
    v72 = *(_QWORD *)(v78 + 8 * v70);
    if (v72)
      goto LABEL_90;
    v73 = v80 + 2;
    if (v80 + 2 >= v71)
    {
LABEL_106:
      v42 = 0;
      v40 = 0;
      v39 = v70;
      goto LABEL_36;
    }
    v72 = *(_QWORD *)(v78 + 8 * v73);
    if (v72)
      goto LABEL_94;
    v1 = v80 + 3;
    if (v80 + 3 < v71)
    {
      v72 = *(_QWORD *)(v78 + 8 * v1);
      if (v72)
      {
        v70 = v80 + 3;
        goto LABEL_90;
      }
      v73 = v80 + 4;
      if (v80 + 4 >= v71)
        goto LABEL_109;
      v72 = *(_QWORD *)(v78 + 8 * v73);
      if (v72)
      {
LABEL_94:
        v70 = v73;
LABEL_90:
        v40 = (v72 - 1) & v72;
        v41 = __clz(__rbit64(v72)) + (v70 << 6);
        v39 = v70;
        goto LABEL_35;
      }
      v70 = v80 + 5;
      if (v80 + 5 < v71)
      {
        v72 = *(_QWORD *)(v78 + 8 * v70);
        if (!v72)
        {
          v70 = v71 - 1;
          v74 = v80 + 6;
          do
          {
            if (v71 == v74)
              goto LABEL_106;
            v72 = *(_QWORD *)(v78 + 8 * v74++);
          }
          while (!v72);
          v70 = v74 - 1;
        }
        goto LABEL_90;
      }
    }
    v42 = 0;
    v40 = 0;
    v39 = v73;
    goto LABEL_36;
  }
  __break(1u);
}

void sub_10013D214(uint64_t a1)
{
  sub_10013D228(a1, &qword_1008216C8, type metadata accessor for WorkoutActivityEntity);
}

void sub_10013D228(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  char v28;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (isUniquelyReferenced_nonNull_native && v7 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v27 = v6 + v4;
  else
    v27 = v6;
  v5 = sub_10013F890(isUniquelyReferenced_nonNull_native, v27, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = *(_QWORD *)(v5 + 16);
  v13 = (*(_QWORD *)(v5 + 24) >> 1) - v12;
  v14 = a3(0);
  if (v13 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * v12;
  v19 = a1 + v16;
  v20 = v17 * v4;
  v21 = v18 + v20;
  v22 = v19 + v20;
  if (v19 < v21 && v18 < v22)
    goto LABEL_24;
  swift_arrayInitWithCopy(v18);
  if (!v4)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return;
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v4);
  v26 = v24 + v4;
  if (!v25)
  {
    *(_QWORD *)(v5 + 16) = v26;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v28 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v28, 1092, 0);
  __break(1u);
}

void sub_10013D3A8(CHWorkoutDetailHeartRateTableViewCell *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)a1->cellPadding;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)a1->cellPadding)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_100140FFC(isUniquelyReferenced_nonNull_native, v21, 1, v3);
  if (!*(_QWORD *)a1->cellPadding)
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = v3[2];
  if ((v3[3] >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (unint64_t)&v3[9 * v15 + 4];
  if ((unint64_t)&a1[1] < v16 + 72 * v2 && v16 < (unint64_t)&a1[1] + 72 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v16);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = v3[2];
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    v3[2] = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

void sub_10013D500(CHWorkoutDetailHeartRateTableViewCell *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)a1->cellPadding;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)a1->cellPadding)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_10014082C(isUniquelyReferenced_nonNull_native, v21, 1, v3, &qword_100821560);
  if (!*(_QWORD *)a1->cellPadding)
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = v3[2];
  if ((v3[3] >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (char *)&v3[2 * v15 + 4];
  if (&a1[1] < (CHWorkoutDetailHeartRateTableViewCell *)&v16[16 * v2] && v16 < (char *)&a1[1] + 16 * v2)
    goto LABEL_24;
  memcpy(v16, &a1[1], 16 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = v3[2];
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    v3[2] = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

void sub_10013D64C(CHWorkoutDetailHeartRateTableViewCell *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)a1->cellPadding;
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)a1->cellPadding)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_100140ED4(isUniquelyReferenced_nonNull_native, v21, 1, v3);
  if (!*(_QWORD *)a1->cellPadding)
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = v3[2];
  if ((v3[3] >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (unint64_t)&v3[9 * v15 + 4];
  if ((unint64_t)&a1[1] < v16 + 72 * v2 && v16 < (unint64_t)&a1[1] + 72 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v16);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = v3[2];
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    v3[2] = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

_QWORD *sub_10013D7A4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_100121554(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121554(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100121554(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_100038FD4(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10013D8C8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  id v15[2];
  _QWORD v16[2];
  _QWORD *v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_100121798(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (void **)(a1 + 40);
    do
    {
      v5 = *v4;
      v15[0] = *(v4 - 1);
      v15[1] = v5;
      v6 = v15[0];
      v7 = sub_100047110(&qword_100822118);
      v8 = sub_100047110(&qword_1008215B0);
      swift_dynamicCast(v16, v15, v7, v8, 7);
      v9 = v16[0];
      v10 = v16[1];

      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121798(0, v2[2] + 1, 1);
        v2 = v17;
      }
      v12 = v2[2];
      v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_100121798(v11 > 1, v12 + 1, 1);
        v2 = v17;
      }
      v4 += 2;
      v2[2] = v12 + 1;
      v13 = &v2[2 * v12];
      v13[4] = v9;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10013DA0C(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell *v2;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  ValueMetadata *v22;
  _UNKNOWN **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CHWorkoutDetailHeartRateTableViewCell *v36;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v36 = &_swiftEmptyArrayStorage;
    sub_1001217E0(0, v1, 0);
    v2 = &_swiftEmptyArrayStorage;
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = v4[9];
      v32 = v4[8];
      v33 = v5;
      v6 = v4[11];
      v34 = v4[10];
      v35 = v6;
      v7 = v4[5];
      v28 = v4[4];
      v29 = v7;
      v8 = v4[7];
      v30 = v4[6];
      v31 = v8;
      v9 = v4[1];
      v24 = *v4;
      v25 = v9;
      v10 = v4[3];
      v26 = v4[2];
      v27 = v10;
      sub_100149B04((uint64_t)&v24);
      v36 = v2;
      v12 = *(_QWORD *)v2->cellPadding;
      v11 = *(_QWORD *)v2->cellInset;
      if (v12 >= v11 >> 1)
      {
        sub_1001217E0(v11 > 1, v12 + 1, 1);
        v2 = v36;
      }
      v22 = &type metadata for AppStoreAppRecommendation;
      v23 = &protocol witness table for AppStoreAppRecommendation;
      v13 = (_OWORD *)swift_allocObject(&unk_1007880A0, 208, 7);
      *(_QWORD *)&v21 = v13;
      v14 = v33;
      v13[9] = v32;
      v13[10] = v14;
      v15 = v35;
      v13[11] = v34;
      v13[12] = v15;
      v16 = v29;
      v13[5] = v28;
      v13[6] = v16;
      v17 = v31;
      v13[7] = v30;
      v13[8] = v17;
      v18 = v25;
      v13[1] = v24;
      v13[2] = v18;
      v19 = v27;
      v13[3] = v26;
      v13[4] = v19;
      *(_QWORD *)v2->cellPadding = v12 + 1;
      sub_10002411C(&v21, (uint64_t)&v2[1] + 40 * v12);
      v4 += 12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10013DB7C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_100121958(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v12 = *v4;
      v5 = sub_100047110(&qword_1008221A0);
      swift_dynamicCast(&v13, &v12, &type metadata for Double, v5, 7);
      v6 = v13;
      v7 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121958(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_100121958(v8 > 1, v9 + 1, 1);
        v2 = v15;
      }
      v2[2] = v9 + 1;
      v10 = &v2[2 * v9];
      v10[4] = v6;
      *((_BYTE *)v10 + 40) = v7;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10013DCAC(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _OWORD v9[2];
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v10 = _swiftEmptyArrayStorage;
    sub_100121554(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *v4;
      swift_dynamicCast(v9, &v8, &type metadata for Double, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121554(0, v2[2] + 1, 1);
        v2 = v10;
      }
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100121554(v5 > 1, v6 + 1, 1);
        v2 = v10;
      }
      v2[2] = v6 + 1;
      sub_100038FD4(v9, &v2[4 * v6 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10013DDCC(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[48];
  _OWORD v14[3];
  CHWorkoutDetailHeartRateTableViewCell *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = &_swiftEmptyArrayStorage;
    sub_100121AF8(0, v1, 0);
    v4 = a1 + 32;
    v2 = &_swiftEmptyArrayStorage;
    do
    {
      sub_100149CB8(v4, (uint64_t)v13);
      v5 = sub_100047110(&qword_100822138);
      v6 = sub_100047110(&qword_1008215C0);
      swift_dynamicCast(v14, v13, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121AF8(0, *(_QWORD *)v2->cellPadding + 1, 1);
        v2 = v15;
      }
      v8 = *(_QWORD *)v2->cellPadding;
      v7 = *(_QWORD *)v2->cellInset;
      if (v8 >= v7 >> 1)
      {
        sub_100121AF8(v7 > 1, v8 + 1, 1);
        v2 = v15;
      }
      *(_QWORD *)v2->cellPadding = v8 + 1;
      v9 = (_OWORD *)v2 + 3 * v8;
      v10 = v14[0];
      v11 = v14[2];
      v9[3] = v14[1];
      v9[4] = v11;
      v9[2] = v10;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10013DF0C(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell *v2;
  char *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _OWORD v10[2];
  CHWorkoutDetailHeartRateTableViewCell *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = &_swiftEmptyArrayStorage;
    sub_100121554(0, v1, 0);
    v4 = (char *)(a1 + 32);
    v2 = &_swiftEmptyArrayStorage;
    do
    {
      v5 = *v4++;
      v9 = v5;
      swift_dynamicCast(v10, &v9, &type metadata for ChartableMetric, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121554(0, *(_QWORD *)v2->cellPadding + 1, 1);
        v2 = v11;
      }
      v7 = *(_QWORD *)v2->cellPadding;
      v6 = *(_QWORD *)v2->cellInset;
      if (v7 >= v6 >> 1)
      {
        sub_100121554(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      *(_QWORD *)v2->cellPadding = v7 + 1;
      sub_100038FD4(v10, &v2[v7 + 1]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10013E028(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell *v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[39];
  char v10;
  CHWorkoutDetailHeartRateTableViewCell *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = &_swiftEmptyArrayStorage;
    sub_100121C90(0, v1, 0);
    v4 = a1 + 32;
    v2 = &_swiftEmptyArrayStorage;
    do
    {
      sub_10003E9BC(v4, (uint64_t)v9);
      swift_dynamicCast(&v10, v9, (char *)&type metadata for Any + 8, &type metadata for ChartableMetric, 7);
      v5 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100121C90(0, *(_QWORD *)v2->cellPadding + 1, 1);
        v2 = v11;
      }
      v7 = *(_QWORD *)v2->cellPadding;
      v6 = *(_QWORD *)v2->cellInset;
      if (v7 >= v6 >> 1)
      {
        sub_100121C90(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      *(_QWORD *)v2->cellPadding = v7 + 1;
      *((_BYTE *)&v2[1].super.super.super.super.isa + v7) = v5;
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10013E148(uint64_t a1)
{
  int64_t v1;
  CHWorkoutDetailHeartRateTableViewCell *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;
  CHWorkoutDetailHeartRateTableViewCell *v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v20 = &_swiftEmptyArrayStorage;
    sub_1001217E0(0, v1, 0);
    v2 = &_swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v6 = *(v4 - 2);
      v5 = *(v4 - 1);
      v7 = v4[1];
      v8 = v4[3];
      v15 = v4[2];
      v16 = *v4;
      v14 = v4[4];
      v13 = *((_BYTE *)v4 + 40);
      v9 = *(_QWORD *)v2->cellPadding;
      v10 = *(_QWORD *)v2->cellInset;
      v20 = v2;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      if (v9 >= v10 >> 1)
      {
        sub_1001217E0(v10 > 1, v9 + 1, 1);
        v2 = v20;
      }
      v18 = &type metadata for RecentWorkoutAppRecommendation;
      v19 = &off_1007AB6E8;
      v11 = swift_allocObject(&unk_100788078, 73, 7);
      *(_QWORD *)&v17 = v11;
      *(_QWORD *)(v11 + 16) = v6;
      *(_QWORD *)(v11 + 24) = v5;
      *(_QWORD *)(v11 + 32) = v16;
      *(_QWORD *)(v11 + 40) = v7;
      *(_QWORD *)(v11 + 48) = v15;
      *(_QWORD *)(v11 + 56) = v8;
      *(_QWORD *)(v11 + 64) = v14;
      *(_BYTE *)(v11 + 72) = v13;
      *(_QWORD *)v2->cellPadding = v9 + 1;
      sub_10002411C(&v17, (uint64_t)&v2[1] + 40 * v9);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Int sub_10013E2A8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10013E2E8()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10013E30C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10013E348(uint64_t a1, void *a2)
{
  __int128 *v2;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  uint64_t v25;
  id v26;
  _BYTE v27[24];
  __int128 v28;
  _OWORD v29[5];
  uint64_t v30;

  v5 = a2;
  if (!a2)
  {
    v6 = sub_10013E57C();
    if (!v7)
    {
      v25 = static os_log_type_t.error.getter(v6);
      v26 = HKLogActivity;
      os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "[#trends] Unable to obtain the lookup key.", 42, 2, _swiftEmptyArrayStorage);

      return 0x5F544F4E5F59454BLL;
    }
    a1 = v6;
    v5 = v7;
  }
  v8 = *((unsigned __int8 *)v2 + 104);
  v9 = *((unsigned __int8 *)v2 + 106);
  swift_bridgeObjectRetain(a2);
  sub_10048792C((uint64_t)v27);
  v10 = v2[11];
  v29[2] = v2[10];
  v29[3] = v10;
  v29[4] = v2[12];
  v30 = *((_QWORD *)v2 + 26);
  if (v8 > 1)
  {
    v14 = v2[1];
    v28 = *v2;
    v29[0] = v14;
    *(_OWORD *)((char *)v29 + 11) = *(__int128 *)((char *)v2 + 27);
    v12 = sub_100128854(a1, v5, v9, (uint64_t)v27, (uint64_t *)&v28);
  }
  else
  {
    v11 = v2[1];
    v28 = *v2;
    v29[0] = v11;
    *(_OWORD *)((char *)v29 + 11) = *(__int128 *)((char *)v2 + 27);
    v12 = sub_100128ACC(a1, v5, v9, (uint64_t *)&v28);
  }
  v15 = v12;
  v16 = v13;
  v17 = swift_bridgeObjectRelease(v5);
  v18 = static os_log_type_t.debug.getter(v17);
  v19 = (void *)HKLogActivity;
  v20 = sub_100047110((uint64_t *)&unk_100827460);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100622F90;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_100038CF8();
  *(_QWORD *)(v21 + 32) = v15;
  *(_QWORD *)(v21 + 40) = v16;
  v22 = v19;
  *(_QWORD *)&v23 = swift_bridgeObjectRetain(v16).n128_u64[0];
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v22, "[#trends] Coaching string: %{public}@", 37, 2, v21, v23);

  swift_bridgeObjectRelease(v21);
  return v15;
}

uint64_t sub_10013E57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  v1 = sub_10013EA9C();
  v2 = v1;
  if (*(_QWORD *)(v1 + 16))
  {
    v7 = *(unsigned __int8 *)(v0 + 203);
    objc_opt_self(NSBundle);
    if (*(_QWORD *)(v2 + 16))
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x10013EA70);
  }
  swift_bridgeObjectRelease(v1);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "[#trends] Unable to retrieve the lookup key.", 44, 2, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_10013EA9C()
{
  __int128 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  _BYTE v35[27];
  _BYTE v36[16];
  char v37[8];
  uint64_t v38;

  v1 = sub_10013EDC8(*((_BYTE *)v0 + 104), *((unsigned __int8 *)v0 + 105), *((_BYTE *)v0 + 106));
  v3 = v2;
  v5 = v4;
  v6 = sub_1005705FC(v1);
  if (v6 == 0x5F44494C41564E49 && v7 == 0xEB0000000059454BLL)
  {
    swift_bridgeObjectRelease(0xEB0000000059454BLL);
    goto LABEL_11;
  }
  v9 = v7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0x5F44494C41564E49, 0xEB0000000059454BLL, 0);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v5);
    v16 = sub_100047110(&qword_100820020);
    v17 = swift_allocObject(v16, 48, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100622F90;
    *(_QWORD *)(v17 + 32) = sub_1005705FC(v1);
    *(_QWORD *)(v17 + 40) = v18;
    return v17;
  }
  if (v5)
  {
    v11 = sub_10013F75C(0, 1, 1, _swiftEmptyArrayStorage);
    v13 = v11[2];
    v12 = v11[3];
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      v32 = sub_10013F75C((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
      v14 = v13 + 1;
      v11 = v32;
    }
    v11[2] = v14;
    v15 = &v11[2 * v13];
    v15[4] = v3;
    v15[5] = v5;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v19 = v0[1];
  v34 = *v0;
  *(_OWORD *)v35 = v19;
  *(_OWORD *)&v35[11] = *(__int128 *)((char *)v0 + 27);
  sub_100045AD4((uint64_t)&v34, (uint64_t)v36, &qword_10082B520);
  sub_100045AD4((uint64_t)v36, (uint64_t)v37, &qword_10082B520);
  if (v38)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10013F75C(0, v11[2] + 1, 1, v11);
    v21 = v11[2];
    v20 = v11[3];
    if (v21 >= v20 >> 1)
      v11 = sub_10013F75C((_QWORD *)(v20 > 1), v21 + 1, 1, v11);
    v11[2] = v21 + 1;
    v22 = &v11[2 * v21];
    v22[4] = 1162690894;
    v22[5] = 0xE400000000000000;
  }
  if ((v35[25] & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10013F75C(0, v11[2] + 1, 1, v11);
    v24 = v11[2];
    v23 = v11[3];
    if (v24 >= v23 >> 1)
      v11 = sub_10013F75C((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
    v11[2] = v24 + 1;
    v25 = &v11[2 * v24];
    v25[4] = 0x4148434C45454857;
    v25[5] = 0xEA00000000005249;
  }
  v26 = sub_1005705FC(v1);
  v28 = v27;
  swift_bridgeObjectRetain(v11);
  v30 = sub_10013EE98(v29, v26, v28);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v28);
  v33 = v30;
  swift_bridgeObjectRetain(v30);
  sub_10014653C((uint64_t *)&v33);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v30);
  return (uint64_t)v33;
}

uint64_t sub_10013EDC8(unsigned __int8 a1, int a2, char a3)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[48];

  if (a1 < 2u)
    return (a2 + 1);
  v4 = sub_10013F4CC(a3);
  if (v5 == 1)
    return 11;
  if ((v4 & 1) != 0)
  {
    sub_10048792C((uint64_t)v6);
    __asm { BR              X10 }
  }
  return v4 >> 8;
}

void sub_10013EE70()
{
  JUMPOUT(0x10013EE28);
}

void sub_10013EE78()
{
  JUMPOUT(0x10013EE28);
}

void sub_10013EE80()
{
  JUMPOUT(0x10013EE28);
}

void sub_10013EE88()
{
  JUMPOUT(0x10013EE28);
}

void sub_10013EE90()
{
  JUMPOUT(0x10013EE28);
}

_QWORD *sub_10013EE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  _BYTE v18[48];
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(a1 + 16);
  v21 = _swiftEmptyArrayStorage;
  v20 = _swiftEmptyArrayStorage;
  sub_10013EFE4(a1, &v21, v5, v5, &v20);
  v6 = sub_100047110(&qword_100820020);
  inited = swift_initStackObject(v6, v18);
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v19 = inited;
  v8 = v20;
  v9 = v20[2];
  if (v9)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    v10 = 0;
    do
    {
      v11 = v8[v10++ + 4];
      v17 = v11;
      swift_bridgeObjectRetain(v11);
      sub_10013F1D0(&v17, a2, a3, &v19);
      swift_bridgeObjectRelease(v11);
    }
    while (v9 != v10);
    swift_bridgeObjectRelease_n(v8, 2);
    v12 = v19;
  }
  else
  {
    v12 = inited;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v8);
  }
  swift_bridgeObjectRetain(v12);
  v14 = sub_10004CEFC(v13);
  swift_bridgeObjectRelease(v12);
  v15 = sub_100295F88(v14);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  return v15;
}

void sub_10013EFE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;

  v6 = a5;
  if (a4)
  {
    v7 = (_QWORD *)a3;
    if (a3 < 1)
      return;
    v19 = a4 - 1;
    if (!__OFSUB__(a4, 1))
    {
      v8 = 0;
      v9 = (_QWORD *)*a2;
      v20 = *(_QWORD **)(a1 + 16);
      v10 = (uint64_t *)(a1 + 40);
      while (v20 != v8)
      {
        v5 = v6;
        v11 = *(v10 - 1);
        v12 = *v10;
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v12);
        v13 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v13 = sub_10013F75C(0, v9[2] + 1, 1, v9);
        v15 = v13[2];
        v14 = v13[3];
        if (v15 >= v14 >> 1)
          v13 = sub_10013F75C((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
        v13[2] = v15 + 1;
        v16 = &v13[2 * v15];
        v16[4] = v11;
        v16[5] = v12;
        v22 = v13;
        v6 = v5;
        sub_10013EFE4(a1, &v22, v7, v19, v5);
        swift_bridgeObjectRelease(v13);
        v8 = (_QWORD *)((char *)v8 + 1);
        v10 += 2;
        if (v7 == v8)
          return;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v7 = (_QWORD *)*a2;
  v5 = *a5;
  swift_bridgeObjectRetain(*a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
LABEL_19:
    v5 = sub_10013FDA0(0, v5[2] + 1, 1, v5, &qword_100822010, (uint64_t *)&unk_10081E160);
  v18 = v5[2];
  v17 = v5[3];
  if (v18 >= v17 >> 1)
    v5 = sub_10013FDA0((_QWORD *)(v17 > 1), v18 + 1, 1, v5, &qword_100822010, (uint64_t *)&unk_10081E160);
  v5[2] = v18 + 1;
  v5[v18 + 4] = v7;
  *v6 = v5;
}

void sub_10013F1D0(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[32];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;

  v7 = *a1;
  v8 = sub_100047110(&qword_100820020);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100622F90;
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  v41 = v9;
  swift_bridgeObjectRetain(a3);
  v10 = sub_10013D7A4(v7);
  v11 = objc_allocWithZone((Class)NSMutableOrderedSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, "initWithArray:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  v36 = v13;
  v14 = objc_msgSend(v13, "array");
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, (char *)&type metadata for Any + 8);

  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = v15 + 32;
    v35 = v15;
    swift_bridgeObjectRetain(v15);
    v18 = _swiftEmptyArrayStorage;
    do
    {
      sub_10003E9BC(v17, (uint64_t)v40);
      sub_10003E9BC((uint64_t)v40, (uint64_t)v37);
      if ((swift_dynamicCast(&v38, v37, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
      {
        v38 = 0;
        v39 = 0;
      }
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v40);
      v20 = v39;
      if (v39)
      {
        v21 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          v18 = sub_10013F75C(0, v18[2] + 1, 1, v18);
        v23 = v18[2];
        v22 = v18[3];
        if (v23 >= v22 >> 1)
          v18 = sub_10013F75C((_QWORD *)(v22 > 1), v23 + 1, 1, v18);
        v18[2] = v23 + 1;
        v19 = &v18[2 * v23];
        v19[4] = v21;
        v19[5] = v20;
      }
      v17 += 32;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease_n(v35, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v18 = _swiftEmptyArrayStorage;
  }
  sub_10013C294((uint64_t)v18);
  v24 = v41;
  v40[0] = v41;
  v25 = sub_100047110((uint64_t *)&unk_10081E160);
  v26 = sub_10004791C();
  v27 = BidirectionalCollection<>.joined(separator:)(95, 0xE100000000000000, v25, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v24);
  v30 = (_QWORD *)*a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  *a4 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = sub_10013F75C(0, v30[2] + 1, 1, v30);
    *a4 = v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    v30 = sub_10013F75C((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    *a4 = v30;
  }
  v30[2] = v33 + 1;
  v34 = &v30[2 * v33];
  v34[4] = v27;
  v34[5] = v29;

}

uint64_t sub_10013F4CC(char a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  double v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  _QWORD *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  double v22;
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  _BYTE v26[27];
  _BYTE v27[16];
  _BYTE v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;

  v2 = v1[11];
  v29 = v1[10];
  v30 = v2;
  v31 = v1[12];
  v32 = *((_QWORD *)v1 + 26);
  v3 = v1;
  v5 = 0;
  if (((1 << a1) & 0x171) == 0)
  {
    if (((1 << a1) & 0x8C) == 0)
    {
      sub_100128580();
      return 3329;
    }
    sub_1001286A0();
    v5 = v6;
  }
  result = 3329;
  v8 = 13.0;
  switch(a1)
  {
    case 0:
      goto LABEL_12;
    case 3:
      v8 = 671.08;
      goto LABEL_12;
    case 4:
      v9 = v3[1];
      v25 = *v3;
      *(_OWORD *)v26 = v9;
      *(_OWORD *)&v26[11] = *(__int128 *)((char *)v3 + 27);
      sub_100045AD4((uint64_t)v26, (uint64_t)v28, &qword_100821788);
      sub_100045AD4((uint64_t)v28, (uint64_t)&v33, &qword_100821788);
      if ((v34 & 1) != 0)
        return 3329;
      v10 = v33;
      sub_100045AD4((uint64_t)&v26[16], (uint64_t)v27, &qword_100821790);
      sub_100045AD4((uint64_t)v27, (uint64_t)&v35, &qword_100821790);
      if ((v36 & 1) != 0)
        return 3329;
      sub_100392E78(v35, v10);
      if (!v11)
        return 3329;
      v12 = v11;
      sub_100392AEC(4, v11);
      swift_bridgeObjectRelease(v12);
      v8 = v22;
      goto LABEL_12;
    case 6:
      v8 = 45.0;
      goto LABEL_12;
    case 7:
      v8 = 316.9;
LABEL_12:
      v13 = *((unsigned __int8 *)v3 + 106);
      v14 = v3[4];
      v23[0] = v3[3];
      v23[1] = v14;
      v23[2] = v3[5];
      v24 = *((_QWORD *)v3 + 12);
      v15 = sub_1004888B0((uint64_t *)v23);
      v16 = sub_100488AB4(v15, v13, *(_QWORD *)(*((_QWORD *)v3 + 19) + 168));
      v18 = v17;
      swift_bridgeObjectRelease(v15);
      if ((v13 | 4) == 7)
      {
        if (3600.0 / v18 <= v8)
        {
          result = 0;
        }
        else
        {
          if (v18 >= v16)
            return 3329;
          v19 = 100.0 - v18 * 100.0 / v16;
          if (v19 < 0.0 || v19 > 10.0)
          {
            result = 2560;
          }
          else
          {
            swift_bridgeObjectRelease(v5);
            result = 2304;
          }
        }
      }
      else
      {
        v21 = 3328;
        if (v18 >= v8)
          v21 = 0;
        result = v21 | (v18 < v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10013F75C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_100820020);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100147858(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013F868(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822078, (uint64_t (*)(_QWORD))&type metadata accessor for DateInterval);
}

uint64_t sub_10013F87C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822240, type metadata accessor for SleepingSampleSingleMetricChartPoint);
}

uint64_t sub_10013F890(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100047110(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001497D0(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_10013FA9C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FBFC(a1, a2, a3, a4, &qword_1008214B8);
}

_QWORD *sub_10013FAA8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FAD0(a1, a2, a3, a4, &qword_100821608);
}

_QWORD *sub_10013FABC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FAD0(a1, a2, a3, a4, &qword_10081F3D8);
}

_QWORD *sub_10013FAD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100047110(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 24 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v9 + 4])
          memmove(v14, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001482E0(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10013FBFC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100047110(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100149020(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013FCF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, (uint64_t *)&unk_10082E670, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_10013FD04(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FEE0(a1, a2, a3, a4, &qword_100821010, &qword_1008200C0);
}

_QWORD *sub_10013FD18(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014082C(a1, a2, a3, a4, &qword_100822018);
}

uint64_t sub_10013FD24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008214F0, type metadata accessor for WorkoutChartDataElement);
}

_QWORD *sub_10013FD38(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FBFC(a1, a2, a3, a4, &qword_100822208);
}

uint64_t sub_10013FD44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008214A8, type metadata accessor for TrendListMetric);
}

uint64_t sub_10013FD58(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822028, type metadata accessor for MetricChartData);
}

_QWORD *sub_10013FD6C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FDA0(a1, a2, a3, a4, &qword_100822128, &qword_100822130);
}

_QWORD *sub_10013FD80(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FBFC(a1, a2, a3, a4, &qword_1008214F8);
}

_QWORD *sub_10013FD8C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FDA0(a1, a2, a3, a4, &qword_1008221C0, &qword_1008221C8);
}

_QWORD *sub_10013FDA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100047110(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100148CF4(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013FEB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008216D8, (uint64_t (*)(_QWORD))&type metadata accessor for SleepingSampleDataType);
}

uint64_t sub_10013FECC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100140020(a1, a2, a3, a4, &qword_1008221A8, &qword_1008221B0);
}

_QWORD *sub_10013FEE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100047110(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001484C4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014000C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100140020(a1, a2, a3, a4, &qword_100822218, &qword_100822220);
}

uint64_t sub_100140020(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100047110(a5);
  v14 = *(_QWORD *)(sub_100047110(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_100047110(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001492FC(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10014022C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100821708, (uint64_t (*)(_QWORD))&type metadata accessor for AppleExertionScale);
}

_QWORD *sub_100140240(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_100821620);
      v11 = (_QWORD *)swift_allocObject(v10, 96 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 96);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[12 * v8 + 4])
          memmove(v13, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001483D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140364(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100140370(a1, a2, a3, a4, &qword_100822238);
}

_QWORD *sub_100140370(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100047110(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001486C0(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_100140478(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  size_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008220E8);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, (192 * v13) | 0x20, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * ((uint64_t)(v16 - 32) / 192);
      v17 = v15 + 1;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 1;
        if (v15 != a4 || v17 >= &a4[6 * v12 + 1])
          memmove(v17, v18, 192 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100148DF8(0, v12, (unint64_t)v17, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, v17, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_10014059C(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  size_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008220F0);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 208 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * ((uint64_t)(v16 - 32) / 208);
      v17 = v15 + 1;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 1;
        if (v15 != a4 || v17 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 208 * v12))
          memmove(v17, v18, 208 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100148C04(0, v12, (unint64_t)v17, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, v17, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001406C4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FDA0(a1, a2, a3, a4, &qword_1008220D8, &qword_1008220E0);
}

uint64_t sub_1001406D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822210, type metadata accessor for SleepingSampleBaselineBand.Configuration);
}

_QWORD *sub_1001406EC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100141180(a1, a2, a3, a4, &qword_100822230);
}

_QWORD *sub_1001406F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008216E8);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100148EEC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140820(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014082C(a1, a2, a3, a4, &qword_100822090);
}

_QWORD *sub_10014082C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100047110(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001486C0(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140934(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008216F8);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003D560(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140A40(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100140370(a1, a2, a3, a4, &qword_100822068);
}

_QWORD *sub_100140A4C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FBFC(a1, a2, a3, a4, &qword_1008221E0);
}

CHWorkoutDetailHeartRateTableViewCell *sub_100140A58(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100821510);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 8 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 25;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 3);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
      v18 = (CHWorkoutDetailHeartRateTableViewCell *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 8 * v12))
          memmove(v18, v19, 8 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_10003D560(0, v12, (char *)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_100140B64(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100822188);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 4);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
      v18 = (CHWorkoutDetailHeartRateTableViewCell *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 16 * v12))
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_10014920C(0, v12, (unint64_t)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_100140C70(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100822190);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 4);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage;
      v18 = (CHWorkoutDetailHeartRateTableViewCell *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 16 * v12))
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_100149104(0, v12, (unint64_t)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140D7C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100140370(a1, a2, a3, a4, &qword_1008216D0);
}

uint64_t sub_100140D88(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100821618, type metadata accessor for ActivitySharingHighlight);
}

uint64_t sub_100140D9C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008215E0, type metadata accessor for FitnessPlusStackViewModel);
}

_QWORD *sub_100140DB0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008215B8);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100147948(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140ED4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008216A8);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001487A8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100140FFC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_1008216C0);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001485CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100141124(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008216C8, type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_100141138(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822060, (uint64_t (*)(_QWORD))&type metadata accessor for CatalogWorkout);
}

uint64_t sub_10014114C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100140020(a1, a2, a3, a4, &qword_100822160, &qword_100822168);
}

_QWORD *sub_100141160(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10013FDA0(a1, a2, a3, a4, &qword_1008215D0, &qword_1008215D8);
}

_QWORD *sub_100141174(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100141180(a1, a2, a3, a4, &qword_1008221E8);
}

_QWORD *sub_100141180(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100047110(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4])
          memmove(v15, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003D560(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100141288(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100141180(a1, a2, a3, a4, &qword_100822140);
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141294(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008216B8);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 4);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 16 * v12))
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_10014814C(0, v12, (unint64_t)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001413A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100140020(a1, a2, a3, a4, &qword_100821598, &qword_1008215A0);
}

uint64_t sub_1001413B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100140020(a1, a2, a3, a4, &qword_100822108, &qword_100822110);
}

CHWorkoutDetailHeartRateTableViewCell *sub_1001413C8(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008216B0);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 4);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 16 * v12))
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_100149414(0, v12, (unint64_t)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_1001414D4(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008220C8);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 4 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 29;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 2);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 4 * v12))
          memmove(v18, v19, 4 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_100149504(0, v12, (char *)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001415E0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014082C(a1, a2, a3, a4, &qword_100821560);
}

uint64_t sub_1001415EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008221F8, (uint64_t (*)(_QWORD))&type metadata accessor for SleepingSampleViewModel);
}

uint64_t sub_100141600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822200, type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141614(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  size_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008220F8);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 72 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * ((uint64_t)(v16 - 32) / 72);
      v17 = v15 + 1;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 1;
        if (v15 != a4 || v17 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 72 * v12))
          memmove(v17, v18, 72 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001495EC(0, v12, (unint64_t)v17, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, v17, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141738(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_1008220D0);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, (v13 << 6) | 0x20, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 + 31;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 6);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= &a4[2 * v12 + 1])
          memmove(v18, v19, v12 << 6);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_1001496E0(0, v12, (unint64_t)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100141844(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008396C0, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141858(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  size_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100821698);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * v16 - 64;
      v17 = v15 + 1;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 1;
        if (v15 != a4 || v17 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + v12))
          memmove(v17, v18, v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100149020(0, v12, (char *)v17, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, v17, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141950(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  int64_t v16;
  uint64_t v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;
  CHWorkoutDetailHeartRateTableViewCell *v19;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100821518);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 16 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      v17 = v16 - 32;
      if (v16 < 32)
        v17 = v16 - 17;
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * (v17 >> 4);
      v18 = v15 + 1;
      if ((v9 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v18 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
      {
LABEL_15:
        v19 = a4 + 1;
        if (v15 != a4 || v18 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 16 * v12))
          memmove(v18, v19, 16 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_24;
      }
    }
    sub_1001486C0(0, v12, (char *)v18, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, v18, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100141A5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008220C0, (uint64_t (*)(_QWORD))&type metadata accessor for PlaylistItem);
}

uint64_t sub_100141A70(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008220A0, (uint64_t (*)(_QWORD))&type metadata accessor for CatalogLockup);
}

uint64_t sub_100141A84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_1008221D8, type metadata accessor for ActivityRingEntity);
}

uint64_t sub_100141A98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013F890(a1, a2, a3, a4, &qword_100822098, type metadata accessor for DivingDataCalculator.SampleBucket);
}

CHWorkoutDetailHeartRateTableViewCell *sub_100141AAC(CHWorkoutDetailHeartRateTableViewCell *result, int64_t a2, char a3, CHWorkoutDetailHeartRateTableViewCell *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CHWorkoutDetailHeartRateTableViewCell *v15;
  size_t v16;
  CHWorkoutDetailHeartRateTableViewCell *v17;
  CHWorkoutDetailHeartRateTableViewCell *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->cellInset;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->cellPadding;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->cellPadding;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100047110(&qword_100822228);
      v15 = (CHWorkoutDetailHeartRateTableViewCell *)swift_allocObject(v14, 24 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->cellPadding = v12;
      *(_QWORD *)v15->cellInset = 2 * ((uint64_t)(v16 - 32) / 24);
      v17 = v15 + 1;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4 + 1;
        if (v15 != a4 || v17 >= (CHWorkoutDetailHeartRateTableViewCell *)((char *)&a4[1] + 24 * v12))
          memmove(v17, v18, 24 * v12);
        *(_QWORD *)a4->cellPadding = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = &_swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage + 1;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001498E8(0, v12, (unint64_t)v17, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, v17, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100141BD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100047110(&qword_100821700);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001499DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100141CF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD v18[9];

  v8 = *v4;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v8);
  sub_10054FFE4(a2, a3, a4);
  v10 = v9;
  String.hash(into:)(v18, v11, v9);
  swift_bridgeObjectRelease(v10);
  if (!a4 || a4 == 2)
  {
    Hasher._combine(_:)(a2);
  }
  else if (a4 == 1)
  {
    String.hash(into:)(v18, a2, a3);
  }
  v12 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v8 + 32));
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v18[0] = *v16;
  *v16 = 0x8000000000000000;
  sub_1000EB3F4(a2, a3, a4);
  sub_100143F84(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
  v14 = *v16;
  *v16 = v18[0];
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 1;
  *(_BYTE *)(a1 + 16) = a4;
  return result;
}

uint64_t sub_10014212C(uint64_t a1, char *a2)
{
  CHWorkoutDetailHeartRateTableViewCell **v2;
  CHWorkoutDetailHeartRateTableViewCell **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CHWorkoutDetailHeartRateTableViewCell *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  CHWorkoutDetailHeartRateTableViewCell *v24;
  unsigned __int8 *cellInset;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  CHWorkoutDetailHeartRateTableViewCell *v28;
  void (*v29)(_QWORD, _QWORD, _QWORD);
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  CHWorkoutDetailHeartRateTableViewCell *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  CHWorkoutDetailHeartRateTableViewCell **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  CHWorkoutDetailHeartRateTableViewCell *v57;

  v3 = v2;
  v6 = type metadata accessor for DateComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3)[1].heartRateController;
  v13 = sub_1000083D8(&qword_100822030, v12, (uint64_t)&protocol conformance descriptor for DateComponents);
  swift_bridgeObjectRetain(v10);
  v56 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v22 = -1 << LOBYTE(v10[1].super.super.super.super.isa);
  v23 = v14 & ~v22;
  v24 = v10;
  cellInset = v10[1].cellInset;
  if (((*(_QWORD *)&v10[1].cellInset[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
  {
    v52 = v3;
    v53 = a1;
    v54 = ~v22;
    v55 = v7;
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v28 = v24;
      v29 = v27;
      v27(v9, *(_QWORD *)v24[1].cellPadding + v26 * v23, v6);
      v30 = sub_1000083D8(&qword_100822038, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v56, v6, v30);
      v32 = *(void (**)(char *, uint64_t))(v55 + 8);
      v32(v9, v6);
      if ((v31 & 1) != 0)
        break;
      v23 = (v23 + 1) & v54;
      v24 = v28;
      v27 = v29;
      if (((*(_QWORD *)&cellInset[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
      {
        swift_bridgeObjectRelease(v28, v33, v34, v35, v36, v37, v38, v39);
        v3 = v52;
        a1 = v53;
        v40 = v55;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v28, v33, v34, v35, v36, v37, v38, v39);
    v32(v56, v6);
    v29(v53, *(_QWORD *)(*v52)[1].cellPadding + v26 * v23, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10, v15, v16, v17, v18, v19, v20, v21);
    v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v40 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v42 = v56;
    v27(v9, v56, v6);
    v57 = *v3;
    *v3 = (CHWorkoutDetailHeartRateTableViewCell *)0x8000000000000000;
    sub_100144328((uint64_t)v9, v23, isUniquelyReferenced_nonNull_native);
    v43 = *v3;
    *v3 = v57;
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(a1, v42, v6);
    return 1;
  }
}

uint64_t sub_100142388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10014457C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100142534(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1000083D8((unint64_t *)&qword_100828330, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_1000083D8((unint64_t *)&unk_10082E6B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_100144714((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_100142790(Swift::Int *a1, void *a2)
{
  return sub_100142B5C(a1, a2, (unint64_t *)&unk_100828960, _HKFitnessFriendAchievement_ptr, &qword_100822048);
}

uint64_t sub_1001427AC(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100144968(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1001428C8(Swift::Int *a1, void *a2)
{
  return sub_100142B5C(a1, a2, (unint64_t *)&qword_100828390, HKWorkout_ptr, &qword_100822170);
}

uint64_t sub_1001428E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for PlaylistItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1000083D8(&qword_1008220A8, v12, (uint64_t)&protocol conformance descriptor for PlaylistItem);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_1000083D8(&qword_1008220B0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaylistItem, (uint64_t)&protocol conformance descriptor for PlaylistItem);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_100144C44((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_100142B40(Swift::Int *a1, void *a2)
{
  return sub_100142B5C(a1, a2, (unint64_t *)&qword_100828970, CNContact_ptr, &qword_100822088);
}

uint64_t sub_100142B5C(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v42;
  Swift::Int v43;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      v42 = v15;
      v16 = sub_10001E724(0, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      *a1 = v43;
      swift_unknownObjectRelease(v15);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_100142E24(v13, result + 1, a5, a3, a4);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v36 = v30 + 1;
      v37 = v14;
      sub_100143C6C(v36, a5);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v14;
    }
    sub_100143F04((uint64_t)v14, v31);
    v38 = *v9;
    *v9 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v18 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v19 = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v12 + 32);
    v21 = v19 & ~v20;
    v39 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_10001E724(0, a3, a4);
      v22 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)(v22, a2);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v27 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)(v25, a2);

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v43 = *v9;
    *v9 = 0x8000000000000000;
    v34 = a2;
    sub_100144AB4((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v39);
    v35 = *v9;
    *v9 = v43;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }
  return 1;
}

Swift::Int sub_100142E24(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_100047110(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()();
    if (v12)
    {
      v13 = v12;
      v14 = sub_10001E724(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_100143C6C(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()();
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

void sub_100143024(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  _QWORD v38[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822120);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v37 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v35 = v2;
    v36 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          return;
        }
        if (v16 >= v36)
          goto LABEL_41;
        v17 = v37[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v36)
            goto LABEL_41;
          v17 = v37[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v36)
              goto LABEL_41;
            v17 = v37[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v36)
              {
LABEL_41:
                swift_release(v3);
                v2 = v35;
                v34 = 1 << *(_BYTE *)(v3 + 32);
                if (v34 > 63)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v37[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_47;
                  if (v11 >= v36)
                    goto LABEL_41;
                  v17 = v37[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = *(_QWORD *)(v3 + 48) + 24 * v15;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(unsigned __int8 *)(v19 + 16);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v6 + 40));
      sub_10054FFE4(v20, v21, v22);
      v24 = v23;
      String.hash(into:)(v38, v25, v23);
      swift_bridgeObjectRelease(v24);
      if (!v22 || v22 == 2)
      {
        Hasher._combine(_:)(v20);
      }
      else if (v22 == 1)
      {
        String.hash(into:)(v38, v20, v21);
      }
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v6 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v10 + 8 * v29);
        }
        while (v33 == -1);
        v12 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 24 * v12;
      *(_QWORD *)v13 = v20;
      *(_QWORD *)(v13 + 8) = v21;
      *(_BYTE *)(v13 + 16) = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

Swift::Int sub_10014337C(uint64_t a1)
{
  return sub_100143C6C(a1, &qword_100822070);
}

Swift::Int sub_100143388(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822008);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100143664(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10014390C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v49 = a4;
  v50 = a5;
  v7 = v5;
  v48 = a2;
  v9 = a2(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100047110(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v46 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v7;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  v20 = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      goto LABEL_35;
    v26 = v46[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_35;
      v26 = v46[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v47 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 32);
    v31(v11, v29 + v30 * v24, v9, v20);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_1000083D8(v49, v48, v50);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    ((void (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v44;
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 > 63)
    bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v46 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  swift_release(v12);
  *v7 = v14;
}

Swift::Int sub_100143C6C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100047110(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

unint64_t sub_100143F04(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_100143F84(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v6 = v5;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    v13 = v11 + 1;
    if ((a5 & 1) != 0)
    {
      sub_100143024(v13);
    }
    else
    {
      if (v12 > v11)
      {
        sub_100144E98();
        goto LABEL_15;
      }
      sub_100145758(v13);
    }
    v14 = *v5;
    Hasher.init(_seed:)(v23, *(_QWORD *)(*v5 + 40));
    sub_10054FFE4(a1, a2, a3);
    v16 = v15;
    String.hash(into:)(v23, v17, v15);
    swift_bridgeObjectRelease(v16);
    if (!a3 || a3 == 2)
    {
      Hasher._combine(_:)(a1);
    }
    else if (a3 == 1)
    {
      String.hash(into:)(v23, a1, a2);
    }
    a4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v14 + 32));
    if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_15:
  v18 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v19 = *(_QWORD *)(v18 + 48) + 24 * a4;
  *(_QWORD *)v19 = a1;
  *(_QWORD *)(v19 + 8) = a2;
  *(_BYTE *)(v19 + 16) = a3;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
    JUMPOUT(0x1001442F8);
  }
  *(_QWORD *)(v18 + 16) = v22;
}

uint64_t sub_100144328(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for DateComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014390C(v13, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, &qword_100822040, &qword_100822030, (uint64_t)&protocol conformance descriptor for DateComponents);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100145394((uint64_t (*)(_QWORD))&type metadata accessor for DateComponents, &qword_100822040);
      goto LABEL_12;
    }
    sub_100145FAC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, &qword_100822040, &qword_100822030, (uint64_t)&protocol conformance descriptor for DateComponents);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_1000083D8(&qword_100822030, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_1000083D8(&qword_100822038, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10014457C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100143388(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100145054();
      goto LABEL_22;
    }
    sub_100145A88(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_100144714(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014390C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100822100, (unint64_t *)&qword_100828330, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100145394((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_100822100);
      goto LABEL_12;
    }
    sub_100145FAC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100822100, (unint64_t *)&qword_100828330, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_1000083D8((unint64_t *)&qword_100828330, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_1000083D8((unint64_t *)&unk_10082E6B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100144968(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100143664(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100145204();
      goto LABEL_14;
    }
    sub_100145D34(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ActivityDashboardMetric);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void sub_100144AB4(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100143C6C(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1001455B8(a4);
      goto LABEL_14;
    }
    sub_1001462C8(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_10001E724(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

uint64_t sub_100144C44(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for PlaylistItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014390C(v13, (uint64_t (*)(uint64_t))&type metadata accessor for PlaylistItem, &qword_1008220B8, &qword_1008220A8, (uint64_t)&protocol conformance descriptor for PlaylistItem);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100145394((uint64_t (*)(_QWORD))&type metadata accessor for PlaylistItem, &qword_1008220B8);
      goto LABEL_12;
    }
    sub_100145FAC(v13, (uint64_t (*)(uint64_t))&type metadata accessor for PlaylistItem, &qword_1008220B8, &qword_1008220A8, (uint64_t)&protocol conformance descriptor for PlaylistItem);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_1000083D8(&qword_1008220A8, (uint64_t (*)(uint64_t))&type metadata accessor for PlaylistItem, (uint64_t)&protocol conformance descriptor for PlaylistItem);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_1000083D8(&qword_1008220B0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaylistItem, (uint64_t)&protocol conformance descriptor for PlaylistItem);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100144E98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100047110(&qword_100822120);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v21 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    sub_1000EB3F4(v18, v19, v21);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100145054()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100047110(&qword_100822008);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100145204()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100047110(&qword_100822180);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100145394(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_100047110(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release(v9);
LABEL_30:
    *v4 = v11;
    return;
  }
  v28 = v4;
  v12 = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)v12 >= v9 + 56 + 8 * v14)
    memmove(v12, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

id sub_1001455B8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100047110(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100145758(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822120);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_43:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v11 << 6);
LABEL_27:
    v19 = *(_QWORD *)(v3 + 48) + 24 * v15;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(unsigned __int8 *)(v19 + 16);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
    sub_1000EB3F4(v20, v21, v22);
    sub_10054FFE4(v20, v21, v22);
    v24 = v23;
    String.hash(into:)(v36, v25, v23);
    swift_bridgeObjectRelease(v24);
    if (!v22 || v22 == 2)
    {
      Hasher._combine(_:)(v20);
    }
    else if (v22 == 1)
    {
      String.hash(into:)(v36, v20, v21);
    }
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v6 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v10 + 8 * v29);
      }
      while (v33 == -1);
      v12 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = *(_QWORD *)(v6 + 48) + 24 * v12;
    *(_QWORD *)v13 = v20;
    *(_QWORD *)(v13 + 8) = v21;
    *(_BYTE *)(v13 + 16) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v16 >= v35)
    goto LABEL_41;
  v17 = *(_QWORD *)(v34 + 8 * v16);
  ++v11;
  if (v17)
    goto LABEL_26;
  v11 = v16 + 1;
  if (v16 + 1 >= v35)
    goto LABEL_41;
  v17 = *(_QWORD *)(v34 + 8 * v11);
  if (v17)
    goto LABEL_26;
  v11 = v16 + 2;
  if (v16 + 2 >= v35)
    goto LABEL_41;
  v17 = *(_QWORD *)(v34 + 8 * v11);
  if (v17)
  {
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_27;
  }
  v18 = v16 + 3;
  if (v18 >= v35)
  {
LABEL_41:
    swift_release_n(v3, 2);
    goto LABEL_43;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v35)
      goto LABEL_41;
    v17 = *(_QWORD *)(v34 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_45:
  __break(1u);
}

Swift::Int sub_100145A88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822008);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100145D34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100047110(&qword_100822180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100145FAC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t *v44;
  uint64_t v45;

  v44 = a4;
  v45 = a5;
  v7 = v5;
  v43 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100047110(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release(v13);
LABEL_37:
    *v7 = v15;
    return;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v40 = v7;
  v41 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  v21 = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v42)
        goto LABEL_35;
      v27 = *(_QWORD *)(v41 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v42)
          goto LABEL_35;
        v27 = *(_QWORD *)(v41 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9, v21);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_1000083D8(v44, v43, v45);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v33 = -1 << *(_BYTE *)(v15 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v42)
  {
LABEL_35:
    swift_release_n(v13, 2);
    v7 = v40;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

Swift::Int sub_1001462C8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100047110(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_10014653C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001477CC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1001465A4(v4);
  *a1 = v2;
}

void sub_1001465A4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  Swift::Int v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  _QWORD *v112;
  Swift::Int v113;
  Swift::Int v114;
  Swift::Int v115;
  Swift::Int v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100146D48(0, v3, 1, a1);
      return;
    }
    goto LABEL_136;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_144:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v116 = v3;
  v113 = v4;
  v118 = v1;
  v109 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v117 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_101;
    }
    v112 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v116;
    v112 = (_QWORD *)v7;
    v117 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v110 = *a1 + 24;
  v11 = (char *)_swiftEmptyArrayStorage;
  v119 = *a1;
  while (1)
  {
    v13 = v9++;
    v115 = v13;
    if (v9 < v3)
    {
      v14 = (uint64_t *)(v10 + 16 * v9);
      v16 = *v14;
      v15 = v14[1];
      v17 = (uint64_t *)(v10 + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v18);
      v20 = String.count.getter(v16, v15);
      v21 = String.count.getter(v19, v18);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v18);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v22 = (_QWORD *)(v110 + 16 * v13);
        v23 = v22;
        while (1)
        {
          v24 = v23[2];
          v23 += 2;
          v25 = *(v22 - 1);
          v26 = *v22;
          v27 = v22[1];
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v26);
          v28 = String.count.getter(v27, v24);
          v29 = String.count.getter(v25, v26);
          swift_bridgeObjectRelease(v24);
          swift_bridgeObjectRelease(v26);
          if (v21 < v20 == v29 >= v28)
            break;
          ++v9;
          v22 = v23;
          v3 = v116;
          if (v116 == v9)
          {
            v9 = v116;
            goto LABEL_23;
          }
        }
        v3 = v116;
LABEL_23:
        v13 = v115;
      }
      v10 = v119;
      if (v21 < v20)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v30 = 16 * v9;
          v31 = 16 * v13;
          v32 = v9;
          v33 = v13;
          do
          {
            if (v33 != --v32)
            {
              if (!v119)
                goto LABEL_142;
              v34 = v119 + v30;
              v35 = *(_QWORD *)(v119 + v31);
              v36 = *(_QWORD *)(v119 + v31 + 8);
              *(_OWORD *)(v119 + v31) = *(_OWORD *)(v119 + v30 - 16);
              *(_QWORD *)(v34 - 16) = v35;
              *(_QWORD *)(v34 - 8) = v36;
            }
            ++v33;
            v30 -= 16;
            v31 += 16;
          }
          while (v33 < v32);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_135;
      if (v9 - v13 < v113)
      {
        v37 = v13 + v113;
        if (__OFADD__(v13, v113))
          goto LABEL_138;
        if (v37 >= v3)
          v37 = v3;
        if (v37 < v13)
          goto LABEL_139;
        if (v9 != v37)
        {
          v111 = v11;
          v38 = (_QWORD *)(v10 + 16 * v9);
          v114 = v37;
          do
          {
            v39 = (uint64_t *)(v10 + 16 * v9);
            v40 = *v39;
            v41 = v39[1];
            v42 = v38;
            while (1)
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              swift_bridgeObjectRetain(v41);
              swift_bridgeObjectRetain(v44);
              v45 = String.count.getter(v40, v41);
              v46 = String.count.getter(v43, v44);
              swift_bridgeObjectRelease(v41);
              swift_bridgeObjectRelease(v44);
              if (v46 >= v45)
                break;
              v10 = v119;
              if (!v119)
                goto LABEL_140;
              v40 = *v42;
              v41 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v41;
              *(v42 - 2) = v40;
              v42 -= 2;
              if (v9 == ++v13)
                goto LABEL_43;
            }
            v10 = v119;
LABEL_43:
            ++v9;
            v38 += 2;
            v13 = v115;
          }
          while (v9 != v114);
          v9 = v114;
          v11 = v111;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100147150(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v48 = *((_QWORD *)v11 + 2);
    v47 = *((_QWORD *)v11 + 3);
    v12 = v48 + 1;
    v10 = v119;
    if (v48 >= v47 >> 1)
    {
      v102 = sub_100147150((char *)(v47 > 1), v48 + 1, 1, v11);
      v10 = v119;
      v11 = v102;
    }
    *((_QWORD *)v11 + 2) = v12;
    v49 = v11 + 32;
    v50 = &v11[16 * v48 + 32];
    *(_QWORD *)v50 = v13;
    *((_QWORD *)v50 + 1) = v9;
    if (v48)
      break;
    v12 = 1;
LABEL_15:
    v3 = v116;
    if (v9 >= v116)
    {
      v8 = v112;
LABEL_101:
      v112 = v8;
      if (v12 < 2)
      {
LABEL_112:
        swift_bridgeObjectRelease(v11);
        v112[2] = 0;
        swift_bridgeObjectRelease(v112);
        return;
      }
      v103 = *v109;
      while (1)
      {
        v104 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v103)
          goto LABEL_143;
        v105 = *(_QWORD *)&v11[16 * v104 + 32];
        v106 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_100146E4C((char *)(v103 + 16 * v105), (char *)(v103 + 16 * *(_QWORD *)&v11[16 * v12 + 16]), v103 + 16 * v106, v117);
        if (v118)
          goto LABEL_98;
        if (v106 < v105)
          goto LABEL_132;
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
          v11 = sub_100147754((uint64_t)v11);
        if (v104 >= *((_QWORD *)v11 + 2))
          goto LABEL_133;
        v107 = &v11[16 * v104 + 32];
        *(_QWORD *)v107 = v105;
        *((_QWORD *)v107 + 1) = v106;
        v108 = *((_QWORD *)v11 + 2);
        if (v12 > v108)
          goto LABEL_134;
        memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v108 - v12));
        *((_QWORD *)v11 + 2) = v108 - 1;
        v12 = v108 - 1;
        if (v108 <= 2)
          goto LABEL_112;
      }
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
  }
  while (1)
  {
    v51 = v12 - 1;
    if (v12 >= 4)
    {
      v56 = &v49[16 * v12];
      v57 = *((_QWORD *)v56 - 8);
      v58 = *((_QWORD *)v56 - 7);
      v62 = __OFSUB__(v58, v57);
      v59 = v58 - v57;
      if (v62)
        goto LABEL_119;
      v61 = *((_QWORD *)v56 - 6);
      v60 = *((_QWORD *)v56 - 5);
      v62 = __OFSUB__(v60, v61);
      v54 = v60 - v61;
      v55 = v62;
      if (v62)
        goto LABEL_120;
      v63 = v12 - 2;
      v64 = &v49[16 * v12 - 32];
      v66 = *(_QWORD *)v64;
      v65 = *((_QWORD *)v64 + 1);
      v62 = __OFSUB__(v65, v66);
      v67 = v65 - v66;
      if (v62)
        goto LABEL_122;
      v62 = __OFADD__(v54, v67);
      v68 = v54 + v67;
      if (v62)
        goto LABEL_125;
      if (v68 >= v59)
      {
        v86 = &v49[16 * v51];
        v88 = *(_QWORD *)v86;
        v87 = *((_QWORD *)v86 + 1);
        v62 = __OFSUB__(v87, v88);
        v89 = v87 - v88;
        if (v62)
          goto LABEL_129;
        v79 = v54 < v89;
        goto LABEL_87;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v80 = *((_QWORD *)v11 + 4);
        v81 = *((_QWORD *)v11 + 5);
        v62 = __OFSUB__(v81, v80);
        v73 = v81 - v80;
        v74 = v62;
        goto LABEL_81;
      }
      v53 = *((_QWORD *)v11 + 4);
      v52 = *((_QWORD *)v11 + 5);
      v62 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      v55 = v62;
    }
    if ((v55 & 1) != 0)
      goto LABEL_121;
    v63 = v12 - 2;
    v69 = &v49[16 * v12 - 32];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v72 = __OFSUB__(v70, v71);
    v73 = v70 - v71;
    v74 = v72;
    if (v72)
      goto LABEL_124;
    v75 = &v49[16 * v51];
    v77 = *(_QWORD *)v75;
    v76 = *((_QWORD *)v75 + 1);
    v62 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v62)
      goto LABEL_127;
    if (__OFADD__(v73, v78))
      goto LABEL_128;
    if (v73 + v78 >= v54)
    {
      v79 = v54 < v78;
LABEL_87:
      if (v79)
        v51 = v63;
      goto LABEL_89;
    }
LABEL_81:
    if ((v74 & 1) != 0)
      goto LABEL_123;
    v82 = &v49[16 * v51];
    v84 = *(_QWORD *)v82;
    v83 = *((_QWORD *)v82 + 1);
    v62 = __OFSUB__(v83, v84);
    v85 = v83 - v84;
    if (v62)
      goto LABEL_126;
    if (v85 < v73)
      goto LABEL_15;
LABEL_89:
    v90 = v51 - 1;
    if (v51 - 1 >= v12)
    {
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    if (!v10)
      goto LABEL_141;
    v91 = v9;
    v92 = v11;
    v93 = v49;
    v94 = &v49[16 * v90];
    v95 = *(_QWORD *)v94;
    v96 = v93;
    v97 = v51;
    v98 = &v93[16 * v51];
    v99 = *((_QWORD *)v98 + 1);
    sub_100146E4C((char *)(v10 + 16 * *(_QWORD *)v94), (char *)(v10 + 16 * *(_QWORD *)v98), v10 + 16 * v99, v117);
    if (v118)
      break;
    if (v99 < v95)
      goto LABEL_116;
    if (v97 > *((_QWORD *)v92 + 2))
      goto LABEL_117;
    v100 = v97;
    *(_QWORD *)v94 = v95;
    *(_QWORD *)&v96[16 * v90 + 8] = v99;
    v101 = *((_QWORD *)v92 + 2);
    if (v97 >= v101)
      goto LABEL_118;
    v49 = v96;
    v11 = v92;
    v118 = 0;
    v12 = v101 - 1;
    memmove(v98, v98 + 16, 16 * (v101 - 1 - v100));
    *((_QWORD *)v92 + 2) = v101 - 1;
    v10 = v119;
    v9 = v91;
    if (v101 <= 2)
      goto LABEL_15;
  }
  v11 = v92;
LABEL_98:
  swift_bridgeObjectRelease(v11);
  v112[2] = 0;
  swift_bridgeObjectRelease(v112);
}

uint64_t sub_100146D48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 16 * a3);
LABEL_5:
    v7 = (uint64_t *)(v5 + 16 * v4);
    v8 = *v7;
    v9 = v7[1];
    v10 = v16;
    v17 = v6;
    while (1)
    {
      v11 = *(v6 - 2);
      v12 = *(v6 - 1);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      v13 = String.count.getter(v8, v9);
      v14 = String.count.getter(v11, v12);
      swift_bridgeObjectRelease(v9);
      result = swift_bridgeObjectRelease(v12);
      if (v14 >= v13)
      {
LABEL_4:
        ++v4;
        v6 = v17 + 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v8 = *v6;
      v9 = v6[1];
      *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v9;
      *(v6 - 2) = v8;
      v6 -= 2;
      if (v4 == ++v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100146E4C(char *a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char *v35;
  char *v36;
  char *v37;
  char *v38;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 4;
  v38 = a1;
  v37 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != __src || &__src[16 * v11] <= a4)
        memmove(a4, __src, 16 * v11);
      v22 = &a4[16 * v11];
      v36 = v22;
      v38 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        v23 = (char *)(a3 - 16);
        v24 = v5;
        do
        {
          v35 = v5;
          v25 = v23 + 16;
          v26 = *((_QWORD *)v22 - 2);
          v27 = *((_QWORD *)v22 - 1);
          v28 = *((_QWORD *)v24 - 2);
          v29 = *((_QWORD *)v24 - 1);
          v24 -= 16;
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v29);
          v30 = String.count.getter(v26, v27);
          v31 = String.count.getter(v28, v29);
          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(v29);
          if (v31 >= v30)
          {
            v36 = v22 - 16;
            if (v25 < v22 || v23 >= v22 || v25 != v22)
              *(_OWORD *)v23 = *((_OWORD *)v22 - 1);
            v24 = v35;
            v22 -= 16;
          }
          else
          {
            if (v25 != v35 || v23 >= v35)
              *(_OWORD *)v23 = *(_OWORD *)v24;
            v38 = v24;
          }
          if (v24 <= a1)
            break;
          v23 -= 16;
          v5 = v24;
        }
        while (v22 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -15)
  {
    if (a4 != a1 || &a1[16 * v8] <= a4)
      memmove(a4, a1, 16 * v8);
    v12 = &a4[16 * v8];
    v36 = v12;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      v13 = a4;
      v14 = a1;
      do
      {
        v15 = *(_QWORD *)v5;
        v16 = *((_QWORD *)v5 + 1);
        v17 = *(_QWORD *)v13;
        v18 = *((_QWORD *)v13 + 1);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v18);
        v19 = String.count.getter(v15, v16);
        v20 = String.count.getter(v17, v18);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v18);
        if (v20 >= v19)
        {
          if (v14 != v13)
            *(_OWORD *)v14 = *(_OWORD *)v13;
          v13 += 16;
          v37 = v13;
          v21 = v5;
        }
        else
        {
          v21 = v5 + 16;
          if (v14 < v5 || v14 >= v21 || v14 != v5)
            *(_OWORD *)v14 = *(_OWORD *)v5;
        }
        v14 += 16;
        if (v13 >= v12)
          break;
        v5 = v21;
      }
      while ((unint64_t)v21 < a3);
      v38 = v14;
    }
LABEL_43:
    sub_10014730C((void **)&v38, (const void **)&v37, &v36);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100147150(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100047110(&qword_100822000);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10014724C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

uint64_t sub_1001472F0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100147538(a1, a2, a3, type metadata accessor for WorkoutChartDataElement);
}

uint64_t sub_1001472FC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100147538(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for DateComponents);
}

char *sub_10014730C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1001473B4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_10014746C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_100147514(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100147538(a1, a2, a3, type metadata accessor for ActivitySharingHighlight);
}

uint64_t sub_100147520(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100147538(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for MediaMoment);
}

uint64_t sub_10014752C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100147538(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Recommendation);
}

uint64_t sub_100147538(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4);
  return result;
}

uint64_t sub_100147644(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_100047110(&qword_1008215A0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_100147754(uint64_t a1)
{
  return sub_100147150(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100147768(_QWORD *a1)
{
  return sub_100122194(0, a1[2], 0, a1);
}

uint64_t sub_10014777C(uint64_t a1)
{
  return sub_100122314(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100147790(_QWORD *a1)
{
  return sub_100122320(0, a1[2], 0, a1);
}

uint64_t sub_1001477A4(_QWORD *a1)
{
  return sub_100122490(0, a1[2], 0, a1);
}

uint64_t sub_1001477B8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001477CC(uint64_t a1)
{
  return sub_100121D54(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001477E0(uint64_t a1)
{
  return sub_100121EBC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001477F4(_QWORD *a1)
{
  return sub_10012260C(0, a1[2], 0, a1);
}

uint64_t sub_100147808(_QWORD *a1)
{
  return sub_1001237B4(0, a1[2], 0, a1);
}

uint64_t sub_10014781C(_QWORD *a1)
{
  return sub_100123930(0, a1[2], 0, a1);
}

uint64_t sub_100147830(uint64_t a1)
{
  return sub_100123C50(0, *(_QWORD *)(a1 + 16), 0, (CHWorkoutDetailHeartRateTableViewCell *)a1);
}

uint64_t sub_100147844(_QWORD *a1)
{
  return sub_100123DB8(0, a1[2], 0, a1);
}

uint64_t sub_100147858(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100147948(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100047110(&qword_1008215C0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100147A54(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD *v26;
  id v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  void *object;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  void *v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  _OWORD v89[3];
  uint64_t v90;
  uint64_t v91;

  v5 = v4;
  v72 = a2[1];
  v73 = *a2;
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  v69 = *((unsigned __int8 *)a2 + 56);
  v70 = *((_BYTE *)a2 + 58);
  v15 = a2[8];
  v61 = a2[9];
  v64 = a2[11];
  v62 = *((_BYTE *)a2 + 57);
  v63 = *((_BYTE *)a2 + 96);
  v74 = *(_QWORD *)(a1 + 8);
  v67 = *(_QWORD *)(a1 + 16);
  v68 = *(_QWORD *)a1;
  v58 = *(_BYTE *)(a1 + 24);
  v66 = *(_QWORD *)(a1 + 32);
  v59 = *(_BYTE *)(a1 + 40);
  v60 = *((_BYTE *)a2 + 80);
  v16 = *(_BYTE *)(a1 + 41);
  v65 = *(_BYTE *)(a1 + 42);
  v17 = *((_OWORD *)a2 + 1);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v17;
  v89[2] = *((_OWORD *)a2 + 2);
  v90 = a2[6];
  sub_10003EE38(a2);
  sub_10003EE38(a2);
  sub_100133118(a1);
  v18 = objc_msgSend(a3, "unitManager");
  if (!v18)
  {
    __break(1u);
    goto LABEL_16;
  }
  v19 = v18;
  v20 = type metadata accessor for TrendsCoachingStatisticsManager();
  swift_allocObject(v20, 224, 7);
  sub_10003EE38(a2);
  sub_100133118(a1);
  v21 = sub_10048737C(a1, (__int128 *)a2, v19);
  v71 = v21;
  if (v4)
  {

    sub_10003EDC4(a2);
    sub_100128D54(a1);
    sub_10003EDC4(a2);
    v22 = v74;
    goto LABEL_8;
  }
  v23 = v21;
  sub_100133118(a1);
  swift_bridgeObjectRetain(v74);
  v24 = a3;
  swift_retain(v23);
  v25 = v24;
  v26 = sub_1004888B0((uint64_t *)v89);
  v57 = v25;
  v27 = objc_msgSend(v25, "unitManager");
  if (!v27)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v28 = v27;
  v29 = sub_100488AB4(v26, v70, (uint64_t)v27);
  v31 = v30;

  swift_bridgeObjectRelease(v26);
  if (v29 < v31 && v69 == 2)
  {
    sub_10003EDC4(a2);
    swift_release(v71);

    v22 = v74;
    swift_bridgeObjectRelease(v74);
    sub_10003EDC4(a2);
    v32 = sub_100128D54(a1);
    v33 = static os_log_type_t.error.getter(v32);
    v34 = HKLogActivity;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "[#trends] Unexpected condition found: 90-day avg > 365-day avg && arrow == down", 79, 2, _swiftEmptyArrayStorage);

    v35 = sub_100148108();
    v36 = swift_allocError(&type metadata for TrendsCoachingError, v35, 0, 0);
    swift_willThrow(v36);

LABEL_8:
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v22);
    if (!v5)
    {

      swift_bridgeObjectRelease(v22);
      swift_release(v71);
    }
    return;
  }
  v37 = v16 & 1;
  v38 = *(_QWORD *)(*(_QWORD *)&v89[0] + 16);
  if (v38 == 365)
  {
    v39 = v57;

    sub_10003EDC4(a2);
  }
  else
  {
    *((_QWORD *)&v75 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v40._object = (void *)0x800000010068A9B0;
    v40._countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v40);
    sub_10003EDC4(a2);
    v91 = v38;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v41._object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(object);
    v43._countAndFlagsBits = 46;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    v56 = v16 & 1;
    v45 = static os_log_type_t.error.getter(v44);
    v46 = (void *)HKLogActivity;
    v47 = sub_100047110((uint64_t *)&unk_100827460);
    v48 = swift_allocObject(v47, 72, 7);
    *(_OWORD *)(v48 + 16) = xmmword_100622F90;
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    *(_QWORD *)(v48 + 64) = sub_100038CF8();
    *(_QWORD *)(v48 + 32) = 0;
    *(_QWORD *)(v48 + 40) = 0xE000000000000000;
    v49 = v46;
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v49, "%{public}@", 10, 2, v48);

    v37 = v56;
    swift_bridgeObjectRelease(v48);
    v39 = v57;

  }
  *(_QWORD *)&v75 = v68;
  *((_QWORD *)&v75 + 1) = v74;
  *(_QWORD *)&v76 = v67;
  BYTE8(v76) = v58 & 1;
  *(_QWORD *)&v77 = v66;
  BYTE8(v77) = v59 & 1;
  BYTE9(v77) = v37;
  BYTE10(v77) = v65;
  *(_QWORD *)&v78 = v73;
  *((_QWORD *)&v78 + 1) = v72;
  *(_QWORD *)&v79 = v10;
  *((_QWORD *)&v79 + 1) = v11;
  *(_QWORD *)&v80 = v12;
  *((_QWORD *)&v80 + 1) = v13;
  *(_QWORD *)&v81 = v14;
  BYTE8(v81) = v69;
  BYTE9(v81) = v62;
  BYTE10(v81) = v70;
  *(_QWORD *)&v82 = v15;
  *((_QWORD *)&v82 + 1) = v61;
  LOBYTE(v83) = v60 & 1;
  *((_QWORD *)&v83 + 1) = v64;
  LOBYTE(v84) = v63 & 1;
  *((_QWORD *)&v84 + 1) = v71;
  *(_QWORD *)&v85 = v68;
  *((_QWORD *)&v85 + 1) = v74;
  *(_QWORD *)&v86 = v67;
  BYTE8(v86) = v58 & 1;
  *(_QWORD *)&v87 = v66;
  BYTE8(v87) = v59 & 1;
  BYTE9(v87) = v37;
  BYTE10(v87) = v65;
  BYTE11(v87) = v70;
  v88 = v39;
  sub_10014802C(&v75);
  swift_release(v71);

  swift_bridgeObjectRelease(v74);
  sub_10003EDC4(a2);
  sub_100128D54(a1);
  sub_100148098((uint64_t)&v75);
  v50 = v86;
  *(_OWORD *)(a4 + 160) = v85;
  *(_OWORD *)(a4 + 176) = v50;
  *(_OWORD *)(a4 + 192) = v87;
  *(_QWORD *)(a4 + 208) = v88;
  v51 = v82;
  *(_OWORD *)(a4 + 96) = v81;
  *(_OWORD *)(a4 + 112) = v51;
  v52 = v84;
  *(_OWORD *)(a4 + 128) = v83;
  *(_OWORD *)(a4 + 144) = v52;
  v53 = v78;
  *(_OWORD *)(a4 + 32) = v77;
  *(_OWORD *)(a4 + 48) = v53;
  v54 = v80;
  *(_OWORD *)(a4 + 64) = v79;
  *(_OWORD *)(a4 + 80) = v54;
  v55 = v76;
  *(_OWORD *)a4 = v75;
  *(_OWORD *)(a4 + 16) = v55;
}

_QWORD *sub_10014802C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = a1[1];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[19];
  v6 = (void *)a1[26];
  swift_bridgeObjectRetain(a1[21]);
  v7 = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100148098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 168);

  swift_release(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_100148108()
{
  unint64_t result;

  result = qword_100822020;
  if (!qword_100822020)
  {
    result = swift_getWitnessTable(&unk_1006264DC, &type metadata for TrendsCoachingError);
    atomic_store(result, (unint64_t *)&qword_100822020);
  }
  return result;
}

uint64_t sub_10014814C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10014823C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9[2];
  char v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100149DC4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for CardType, v3);
  v11 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v5 += 24;
      sub_1000EB3F4(v6, v7, v8);
      sub_100141CF4((uint64_t)v9, v6, v7, v8);
      sub_1000EB41C(v9[0], v9[1], v10);
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_1001482E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001483D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 96 * a1 + 32;
  v6 = a3 + 96 * v4;
  if (v5 >= v6 || v5 + 96 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001484C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100047110(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001485CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1001486C0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001487A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10014889C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100047110((uint64_t *)&unk_10082E690);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_1000083D8((unint64_t *)&qword_100828330, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100142534((uint64_t)v8, (uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_100148A6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100149D80();
  result = Set.init(minimumCapacity:)(v2, &type metadata for ActivityDashboardMetric, v3);
  v8 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1001427AC(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100148ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for PlaylistItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_1000083D8(&qword_1008220A8, v10, (uint64_t)&protocol conformance descriptor for PlaylistItem);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v5, v13, v2);
      sub_1001428E4((uint64_t)v8, (uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100148C04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 208 * a1 + 32;
  v6 = a3 + 208 * v4;
  if (v5 >= v6 || v5 + 208 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100148CF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_100047110(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100148DF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 192 * a1 + 32;
  v6 = a3 + 192 * v4;
  if (v5 >= v6 || v5 + 192 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100148EEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100148FE0(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001E724(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100149020(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100149104(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100047110(&qword_100822198);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10014920C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001492FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_100047110(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100149414(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100149504(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001495EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001496E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001497D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001498E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001499DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100149AD0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100149B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120);
  v13 = *(_OWORD *)(a1 + 144);
  v14 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100149BD8(v17, v16, v4, v5, v6, v7, v8, v15, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_100149BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a6 != 1)
  {
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    return swift_bridgeObjectRetain(a14);
  }
  return result;
}

uint64_t sub_100149C4C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  v1 = v0[15];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[17]);
    swift_bridgeObjectRelease(v0[19]);
    swift_bridgeObjectRelease(v0[21]);
    swift_bridgeObjectRelease(v0[23]);
    swift_bridgeObjectRelease(v0[25]);
  }
  return swift_deallocObject(v0, 208, 7);
}

uint64_t sub_100149CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100822138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100149D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FitnessPlusStackViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100149D44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FitnessPlusStackViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100149D80()
{
  unint64_t result;

  result = qword_100822178;
  if (!qword_100822178)
  {
    result = swift_getWitnessTable(&unk_100649FB0, &type metadata for ActivityDashboardMetric);
    atomic_store(result, (unint64_t *)&qword_100822178);
  }
  return result;
}

unint64_t sub_100149DC4()
{
  unint64_t result;

  result = qword_1008221D0;
  if (!qword_1008221D0)
  {
    result = swift_getWitnessTable(&unk_100645170, &type metadata for CardType);
    atomic_store(result, (unint64_t *)&qword_1008221D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrendsCoachingError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TrendsCoachingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100149E9C + 4 * asc_10062644A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100149EBC + 4 * byte_10062644F[v4]))();
}

_BYTE *sub_100149E9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100149EBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100149EC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100149ECC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100149ED4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100149EDC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100149EE8()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrendsCoachingError()
{
  return &type metadata for TrendsCoachingError;
}

unint64_t sub_100149F04()
{
  unint64_t result;

  result = qword_1008221F0;
  if (!qword_1008221F0)
  {
    result = swift_getWitnessTable(&unk_1006264B4, &type metadata for TrendsCoachingError);
    atomic_store(result, (unint64_t *)&qword_1008221F0);
  }
  return result;
}

uint64_t destroy for ReachableContact(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for ReachableContact(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  a1[4] = v7;
  a1[5] = v8;
  v9 = v3;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for ReachableContact(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t assignWithTake for ReachableContact(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReachableContact(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReachableContact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_10014A170(uint64_t a1)
{
  id *v1;
  id *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  Swift::UInt v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = v1;
  v4 = *v1;
  NSObject.hash(into:)(a1);

  v5 = v2[1];
  v6 = v2[2];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = v2[3];
  v8 = v2[4];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  v9 = v2[5];
  v14 = v9;
  v10 = v9[2];
  Hasher._combine(_:)(v10);
  if (v10)
  {
    swift_bridgeObjectRetain(v9);
    v11 = v9 + 5;
    do
    {
      v12 = *(v11 - 1);
      v13 = *v11;
      swift_bridgeObjectRetain(*v11);
      String.hash(into:)(a1, v12, v13);
      swift_bridgeObjectRelease(v13);
      v11 += 2;
      --v10;
    }
    while (v10);
    sub_1000478F4(&v14);
  }
}

Swift::Int sub_10014A268()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10014A170((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10014A2A8(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10014A170((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_10014A2E0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_10014A36C((uint64_t)v7, (uint64_t)v8) & 1;
}

unint64_t sub_10014A328()
{
  unint64_t result;

  result = qword_100822248;
  if (!qword_100822248)
  {
    result = swift_getWitnessTable(&unk_100626554, &type metadata for ReachableContact);
    atomic_store(result, (unint64_t *)&qword_100822248);
  }
  return result;
}

uint64_t sub_10014A36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  sub_100139CE8();
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v4 == v6 && v5 == v7;
  if ((v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0) & 1) != 0)
    && ((v9 = *(_QWORD *)(a1 + 24),
         v10 = *(_QWORD *)(a1 + 32),
         v11 = *(_QWORD *)(a2 + 24),
         v12 = *(_QWORD *)(a2 + 32),
         v9 == v11)
      ? (v13 = v10 == v12)
      : (v13 = 0),
        v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0) & 1) != 0))
  {
    return sub_1002A0A98(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40));
  }
  else
  {
    return 0;
  }
}

id sub_10014A520()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSupplementaryView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BackgroundSupplementaryView()
{
  return objc_opt_self(_TtC10FitnessApp27BackgroundSupplementaryView);
}

uint64_t sub_10014A574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_10014A57C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_100626658;
    v4 = type metadata accessor for AttributedString(319);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      v11 = &unk_100626670;
      v12 = (char *)&value witness table for Builtin.Int64 + 64;
      v6 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v13 = *(_QWORD *)(v6 - 8) + 64;
        v14 = &unk_100626688;
        swift_initStructMetadata(a1, 0, 8, v8, a1 + 32);
      }
    }
  }
}

_QWORD *sub_10014A648(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  _OWORD *v43;
  __int128 v44;
  _OWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = v12 + v11;
  v14 = v12 + 7;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = ((*(_QWORD *)(v15 + 64)
        + 7
        + ((v16
          + 8
          + ((((v12 + 7 + ((v12 + v11 + ((v8 + v11 + 2) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  v18 = v16 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (v18 > 7 || ((*(_DWORD *)(v15 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v17 > 0x18)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
    swift_retain(v21);
  }
  else
  {
    v22 = *((unsigned __int8 *)a2 + v8);
    if (v22 >= 2)
    {
      if (v8 <= 3)
        v23 = v8;
      else
        v23 = 4;
      __asm { BR              X13 }
    }
    v24 = v6;
    v48 = v14;
    v49 = v16 + 8;
    v50 = v9;
    v51 = *(_QWORD *)(v15 + 64) + 7;
    v52 = *(_QWORD *)(a3 + 16);
    v25 = v8 + 1;
    v26 = ~v11;
    v47 = ~v16;
    if (v22 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v24);
      v27 = 1;
    }
    else
    {
      v28 = *a2;
      *a1 = *a2;
      swift_retain(v28);
      v27 = 0;
    }
    *((_BYTE *)a1 + v8) = v27;
    *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
    v29 = (char *)a2 + v25 + v11;
    v30 = ((unint64_t)a1 + v25 + v11 + 1) & v26;
    v31 = (unint64_t)(v29 + 1) & v26;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v32(v30, v31, v50);
    v33 = (v13 + v30) & v26;
    v34 = (v13 + v31) & v26;
    v32(v33, v34, v50);
    v35 = (_QWORD *)((v48 + v33) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_QWORD *)((v48 + v34) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v36;
    v37 = v36[1];
    v35[1] = v37;
    v38 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
    v39 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v39;
    v40 = ((unint64_t)v38 + v49) & v47;
    v41 = ((unint64_t)v39 + v49) & v47;
    v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16);
    swift_bridgeObjectRetain(v37);
    v42(v40, v41, v52);
    v43 = (_OWORD *)((v51 + v41) & 0xFFFFFFFFFFFFFFF8);
    v44 = v43[1];
    v45 = (_OWORD *)((v51 + v40) & 0xFFFFFFFFFFFFFFF8);
    *v45 = *v43;
    v45[1] = v44;
  }
  return a1;
}

uint64_t sub_10014A938(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)a1 + v6 + v11 + 2) & ~v11;
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v12, v9);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = (v14 + v11 + v12) & ~v11;
  v13(v15, v9);
  v16 = (v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_10014AAA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v13 = v8 + 1;
  v14 = (char *)a1 + v8 + 1;
  v15 = (char *)a2 + v13;
  *v14 = *((_BYTE *)a2 + v13);
  v16 = type metadata accessor for AttributedString(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (unint64_t)&v14[v18 + 1] & ~v18;
  v20 = (unint64_t)&v15[v18 + 1] & ~v18;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v21(v19, v20, v16);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (v22 + v18 + v19) & ~v18;
  v24 = (v22 + v18 + v20) & ~v18;
  v21(v23, v24, v16);
  v25 = (_QWORD *)((v22 + 7 + v23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v22 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = v26[1];
  v25[1] = v27;
  v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = ((unint64_t)v28 + v32 + 8) & ~v32;
  v34 = ((unint64_t)v29 + v32 + 8) & ~v32;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  swift_bridgeObjectRetain(v27);
  v35(v33, v34, v30);
  v36 = *(_QWORD *)(v31 + 64) + 7;
  v37 = (_OWORD *)((v36 + v33) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_OWORD *)((v36 + v34) & 0xFFFFFFFFFFFFFFF8);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  return a1;
}

_QWORD *sub_10014ACCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain(v13);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 1;
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v18 = type metadata accessor for AttributedString(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)&v16[v20 + 1] & ~v20;
  v22 = (unint64_t)&v17[v20 + 1] & ~v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24);
  v23(v21, v22, v18);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = (v24 + v20 + v21) & ~v20;
  v26 = (v24 + v20 + v22) & ~v20;
  v23(v25, v26, v18);
  v27 = (_QWORD *)((v24 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v24 + 7 + v26) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = ((unint64_t)v31 + v34 + 8) & ~v34;
  v36 = ((unint64_t)v32 + v34 + 8) & ~v34;
  (*(void (**)(uint64_t, uint64_t))(v33 + 24))(v35, v36);
  v37 = *(_QWORD *)(v33 + 64) + 7;
  v38 = (_QWORD *)((v37 + v35) & 0xFFFFFFFFFFFFFFF8);
  v39 = (_QWORD *)((v37 + v36) & 0xFFFFFFFFFFFFFFF8);
  *v38 = *v39;
  v38[1] = v39[1];
  v38[2] = v39[2];
  v38[3] = v39[3];
  return a1;
}

_QWORD *sub_10014AFF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = v8 + 1;
  v13 = (char *)a1 + v8 + 1;
  v14 = (char *)a2 + v12;
  *v13 = *((_BYTE *)a2 + v12);
  v15 = type metadata accessor for AttributedString(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)&v13[v17 + 1] & ~v17;
  v19 = (unint64_t)&v14[v17 + 1] & ~v17;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v20(v18, v19, v15);
  v21 = *(_QWORD *)(v16 + 64);
  v22 = (v21 + v17 + v18) & ~v17;
  v23 = (v21 + v17 + v19) & ~v17;
  v20(v22, v23, v15);
  v24 = (_OWORD *)((v21 + 7 + v22) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)((v21 + 7 + v23) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = ((unint64_t)v26 + v29 + 8) & ~v29;
  v31 = ((unint64_t)v27 + v29 + 8) & ~v29;
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v30, v31);
  v32 = *(_QWORD *)(v28 + 64) + 7;
  v33 = (_OWORD *)((v32 + v30) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_OWORD *)((v32 + v31) & 0xFFFFFFFFFFFFFFF8);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  return a1;
}

_QWORD *sub_10014B200(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8) + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = v14 + 1;
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v18 = type metadata accessor for AttributedString(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)&v16[v20 + 1] & ~v20;
  v22 = (unint64_t)&v17[v20 + 1] & ~v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
  v23(v21, v22, v18);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = (v24 + v20 + v21) & ~v20;
  v26 = (v24 + v20 + v22) & ~v20;
  v23(v25, v26, v18);
  v27 = (_QWORD *)((v24 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v24 + 7 + v26) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = v27[1];
  v27[1] = v28[1];
  swift_bridgeObjectRelease(v29);
  v30 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = ((unint64_t)v30 + v33 + 8) & ~v33;
  v35 = ((unint64_t)v31 + v33 + 8) & ~v33;
  (*(void (**)(uint64_t, uint64_t))(v32 + 40))(v34, v35);
  v36 = *(_QWORD *)(v32 + 64) + 7;
  v37 = (_QWORD *)((v36 + v34) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)((v36 + v35) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v37[1] = v38[1];
  v37[2] = v38[2];
  v37[3] = v38[3];
  return a1;
}

uint64_t sub_10014B518(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v8 = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  if (v10 <= v13)
    v14 = *(_DWORD *)(v12 + 84);
  else
    v14 = *(_DWORD *)(v9 + 84);
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v14;
  if (!a2)
    return 0;
  v16 = v8;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = *(_QWORD *)(v9 + 64);
  v19 = v18 + v17;
  v20 = v18 + 7;
  v21 = *(unsigned __int8 *)(v12 + 80);
  v22 = v21 + 8;
  if (v15 < a2)
  {
    if (((((*(_QWORD *)(v12 + 64)
           + ((v22
             + ((((v20 + ((v19 + ((v7 + v17 + 2) & ~v17)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v21)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 32) & 0xFFFFFFF8) != 0)
      v23 = 2;
    else
      v23 = a2 - v15 + 1;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v25 = v24;
    else
      v25 = 0;
    __asm { BR              X7 }
  }
  v27 = ~v17;
  v28 = (a1 + v7 + v17 + 2) & ~v17;
  if (v10 == v15)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(v28, *(unsigned int *)(v9 + 84), v16);
  v29 = (v20 + ((v19 + v28) & v27)) & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 0x80000000) != 0)
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((v22 + ((v29 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v21, v13, v11);
  v30 = *(_QWORD *)(v29 + 8);
  if (v30 >= 0xFFFFFFFF)
    LODWORD(v30) = -1;
  return (v30 + 1);
}

void sub_10014B70C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v8 = type metadata accessor for DynamicTypeSize(0);
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v10 = *(_QWORD *)(type metadata accessor for AttributedString(0) - 8);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= *(_DWORD *)(v11 + 84))
    v12 = *(_DWORD *)(v11 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v13 >= a3)
  {
    v16 = 0;
    if (a2 <= v13)
      goto LABEL_23;
  }
  else
  {
    if (((*(_DWORD *)(v11 + 64)
         + ((*(unsigned __int8 *)(v11 + 80)
           + 8
           + ((((*(_DWORD *)(v10 + 64)
               + 7
               + ((*(_DWORD *)(v10 + 64)
                 + *(unsigned __int8 *)(v10 + 80)
                 + (((_DWORD)v9 + *(unsigned __int8 *)(v10 + 80) + 2) & ~*(unsigned __int8 *)(v10 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v11 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v14 = a3 - v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v13)
LABEL_23:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v11 + 64)
       + ((*(unsigned __int8 *)(v11 + 80)
         + 8
         + ((((*(_DWORD *)(v10 + 64)
             + 7
             + ((*(_DWORD *)(v10 + 64)
               + *(unsigned __int8 *)(v10 + 80)
               + (((_DWORD)v9 + *(unsigned __int8 *)(v10 + 80) + 2) & ~*(unsigned __int8 *)(v10 + 80))) & ~*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v11 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v17 = ~v13 + a2;
    bzero(a1, ((*(_QWORD *)(v11 + 64)+ ((*(unsigned __int8 *)(v11 + 80)+ 8+ ((((*(_QWORD *)(v10 + 64)+ 7+ ((*(_QWORD *)(v10 + 64)+ *(unsigned __int8 *)(v10 + 80)+ ((v9 + *(unsigned __int8 *)(v10 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_10014B890()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10014B940);
}

void sub_10014B898()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x10014B8A0);
  JUMPOUT(0x10014B940);
}

void sub_10014B8F0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10014B940);
}

void sub_10014B8F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10014B940);
}

void sub_10014B900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v12 + v13) = 0;
  if (v11)
  {
    if (v5 == v7)
      JUMPOUT(0x10014B924);
    if (v6 < 0)
      JUMPOUT(0x10014B90CLL);
    if (v11 < 0)
      JUMPOUT(0x10014B938);
    *(_QWORD *)(((v10 + ((v8 + ((v12 + v14 + v9 + 2) & a5)) & a5)) & 0xFFFFFFFFFFFFFFF8) + 8) = (v11 - 1);
  }
  JUMPOUT(0x10014B940);
}

uint64_t type metadata accessor for HistoryListItemStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014E7CC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HistoryListItemStack);
}

uint64_t sub_10014B964(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1006AC560, 1);
}

uint64_t sub_10014B998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_10014BA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_10014BB20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t TupleTypeMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t WitnessTable;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v113 = a1;
  v109 = a2;
  v108 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent(255, v108, &type metadata for _PaddingLayout);
  v123 = v2;
  v124 = sub_100007050(&qword_10081F2D0);
  v125 = v124;
  v126 = sub_100007050(&qword_1008222F8);
  v127 = sub_100007050(&qword_100822300);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v102 = (char *)type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v102);
  v112 = type metadata accessor for VStack(0, v102);
  v103 = *(char **)(v112 - 8);
  v4 = __chkstk_darwin(v112);
  v105 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v104 = (uint64_t)&v93 - v6;
  v7 = sub_100007050(&qword_100822308);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v96 = v9;
  v95 = v10;
  v11 = type metadata accessor for HStack(0, v9);
  v97 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v99 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v98 = (uint64_t)&v93 - v14;
  v123 = v2;
  v124 = sub_100007050(&qword_10081F2D0);
  v125 = v124;
  v126 = sub_100007050(&qword_100822310);
  v15 = swift_getTupleTypeMetadata(255, 4);
  v16 = type metadata accessor for TupleView(255, v15);
  v93 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v17 = type metadata accessor for VStack(0, v16);
  v94 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v93 - v21;
  v23 = type metadata accessor for DynamicTypeSize(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v93 - v28;
  v106 = v17;
  v107 = v11;
  v30 = type metadata accessor for _ConditionalContent(0, v17, v11);
  v100 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v93 - v34;
  v36 = type metadata accessor for _ConditionalContent(0, v30, v112);
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v93 - v38;
  LODWORD(v38) = *(unsigned __int8 *)(v114 + *(int *)(v113 + 36));
  v110 = v40;
  v111 = v37;
  if ((_DWORD)v38 == 1)
  {
    WitnessTable = v16;
    v102 = v22;
    v103 = v20;
    v105 = v35;
    v41 = v112;
    v42 = (uint64_t)v39;
    sub_1003F6E18((uint64_t)v29);
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v27, enum case for DynamicTypeSize.xxLarge(_:), v23);
    sub_10014E224();
    v43 = dispatch thunk of static Comparable.< infix(_:_:)(v27, v29, v23);
    v44 = *(void (**)(char *, uint64_t))(v24 + 8);
    v44(v27, v23);
    v45 = ((uint64_t (*)(char *, uint64_t))v44)(v29, v23);
    v46 = v107;
    v47 = v106;
    v104 = v42;
    v48 = v30;
    v49 = v113;
    v50 = v108;
    v51 = (uint64_t)v33;
    if ((v43 & 1) != 0)
    {
      v52 = static HorizontalAlignment.leading.getter(v45);
      v53 = __chkstk_darwin(v52);
      v54 = *(_QWORD *)(v49 + 24);
      *(&v93 - 4) = v50;
      *(&v93 - 3) = v54;
      *(&v93 - 2) = v114;
      v55 = (uint64_t)v103;
      VStack.init(alignment:spacing:content:)(v53, 0, 0, sub_10014E278);
      v56 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
      v57 = (uint64_t)v102;
      sub_10029340C(v55, v47, (uint64_t)v102);
      v58 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v58(v55, v47);
      sub_100291778(v57, v47, v55);
      v59 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v46);
      v60 = (uint64_t)v105;
      sub_10014B998(v55, v47, v46, v56, v59);
      v58(v55, v47);
      v61 = v57;
      v62 = v47;
    }
    else
    {
      v75 = __chkstk_darwin(v45);
      v76 = *(_QWORD *)(v49 + 24);
      *(&v93 - 4) = v50;
      *(&v93 - 3) = v76;
      *(&v93 - 2) = v114;
      v77 = static VerticalAlignment.center.getter(v75);
      v78 = (uint64_t)v99;
      HStack.init(alignment:spacing:content:)(v77, 0, 0, sub_10014E26C, &v93 - 6, v96, v95);
      v79 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v46);
      v80 = v98;
      sub_10029340C(v78, v46, v98);
      v58 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
      v58(v78, v46);
      sub_100291778(v80, v46, v78);
      v81 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
      v60 = (uint64_t)v105;
      sub_10014BA5C(v78, v47, v46, v81, v79);
      v58(v78, v46);
      v61 = v80;
      v62 = v46;
    }
    v58(v61, v62);
    v82 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
    v83 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v46);
    v115 = v82;
    v116 = v83;
    v84 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
    sub_100291778(v60, v48, v51);
    v85 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v41);
    v63 = v104;
    sub_10014B998(v51, v48, v41, v84, v85);
    v86 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
    v86(v51, v48);
    v86(v60, v48);
    v74 = v109;
  }
  else
  {
    v63 = (uint64_t)v39;
    v64 = static HorizontalAlignment.leading.getter(v37);
    v65 = __chkstk_darwin(v64);
    v66 = *(_QWORD *)(v113 + 24);
    *(&v93 - 4) = v108;
    *(&v93 - 3) = v66;
    *(&v93 - 2) = v114;
    v67 = (uint64_t)v105;
    VStack.init(alignment:spacing:content:)(v65, 0, 0, sub_10014E218);
    v41 = v112;
    v68 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v112);
    v69 = v104;
    sub_10029340C(v67, v41, v104);
    v70 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v103 + 1);
    v70(v67, v41);
    sub_100291778(v69, v41, v67);
    v47 = v106;
    v71 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v106);
    v46 = v107;
    v72 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v107);
    v121 = v71;
    v122 = v72;
    v73 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v30);
    sub_10014BA5C(v67, v30, v41, v73, v68);
    v70(v67, v41);
    v70(v69, v41);
    v74 = v109;
    v48 = v30;
  }
  v87 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
  v88 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v46);
  v119 = v87;
  v120 = v88;
  v89 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
  v90 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v41);
  v117 = v89;
  v118 = v90;
  v91 = v111;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v111);
  sub_100291778(v63, v91, v74);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 8))(v63, v91);
}

uint64_t sub_10014C48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t WitnessTable;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _BYTE v66[178];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85[8];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[9];
  _OWORD v105[2];
  _BYTE v106[177];
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int16 v132;
  _OWORD v133[9];
  _OWORD v134[10];

  v55 = a4;
  v7 = type metadata accessor for AttributedString(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v45 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _PaddingLayout);
  v56 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v44 - v13;
  v52 = (char *)&v44 - v13;
  v48 = a3;
  v49 = a2;
  v16 = type metadata accessor for HistoryListItemStack(0, a2, a3, v15);
  v44 = v16;
  View.padding(_:)(a2, a3, 0.0);
  v85[6] = a3;
  v85[7] = (uint64_t)&protocol witness table for _PaddingLayout;
  v51 = v9;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v50 = v12;
  sub_10029340C((uint64_t)v12, v9, (uint64_t)v14);
  v54 = *(void (**)(char *, uint64_t))(v56 + 8);
  v54(v12, v9);
  v17 = a1;
  v18 = a1 + *(int *)(v16 + 40);
  v19 = v45;
  v46 = *(_QWORD *)(v46 + 16);
  v20 = v47;
  ((void (*)(char *, uint64_t, uint64_t))v46)(v45, v18, v47);
  v21 = Text.init(_:)(v19);
  v23 = v22;
  v25 = v24;
  LOBYTE(v12) = v26 & 1;
  v27 = static Alignment.leading.getter();
  sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v120, 0.0, 1, 0.0, 1, v27, v28, v21, v23, (char)v12, v25);
  sub_1000E4458(v21, v23, (char)v12);
  swift_bridgeObjectRelease(v25);
  v92 = v126;
  v93 = v127;
  v94 = v128;
  v88 = v122;
  v89 = v123;
  v90 = v124;
  v91 = v125;
  v86 = v120;
  v87 = v121;
  ((void (*)(char *, uint64_t, uint64_t))v46)(v19, v17 + *(int *)(v44 + 44), v20);
  v29 = Text.init(_:)(v19);
  v31 = v30;
  v33 = v32;
  LOBYTE(v20) = v34 & 1;
  v35 = static Alignment.leading.getter();
  sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v120, 0.0, 1, 0.0, 1, v35, v36, v29, v31, v20, v33);
  sub_1000E4458(v29, v31, v20);
  swift_bridgeObjectRelease(v33);
  v101 = v126;
  v102 = v127;
  v103 = v128;
  v97 = v122;
  v98 = v123;
  v99 = v124;
  v100 = v125;
  v95 = v120;
  v96 = v121;
  v38 = static VerticalAlignment.center.getter(v37);
  sub_10014CAE0(v17, v49, v48, (uint64_t)v104);
  v107 = 1;
  *(_OWORD *)&v106[71] = v104[4];
  *(_OWORD *)&v106[55] = v104[3];
  *(_OWORD *)&v106[119] = v104[7];
  *(_OWORD *)&v106[135] = v104[8];
  *(_OWORD *)&v106[151] = v105[0];
  *(_OWORD *)&v106[161] = *(_OWORD *)((char *)v105 + 10);
  *(_OWORD *)&v106[87] = v104[5];
  *(_OWORD *)&v106[103] = v104[6];
  *(_OWORD *)&v106[7] = v104[0];
  *(_OWORD *)&v106[23] = v104[1];
  *(_OWORD *)&v106[39] = v104[2];
  v116 = *(_OWORD *)&v106[128];
  v117 = *(_OWORD *)&v106[144];
  v118 = *(_OWORD *)&v106[160];
  v119 = BYTE9(v105[1]);
  v112 = *(_OWORD *)&v106[64];
  v113 = *(_OWORD *)&v106[80];
  v114 = *(_OWORD *)&v106[96];
  v115 = *(_OWORD *)&v106[112];
  v108 = *(_OWORD *)v106;
  v109 = *(_OWORD *)&v106[16];
  v110 = *(_OWORD *)&v106[32];
  v111 = *(_OWORD *)&v106[48];
  v40 = (uint64_t)v50;
  v39 = v51;
  v41 = v52;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v50, v52, v51);
  v81 = v91;
  v82 = v92;
  v83 = v93;
  v84 = v94;
  v77 = v87;
  v78 = v88;
  v79 = v89;
  v80 = v90;
  v73 = v101;
  v74 = v102;
  v75 = v103;
  v76 = v86;
  v69 = v97;
  v70 = v98;
  v71 = v99;
  v72 = v100;
  v67 = v95;
  v68 = v96;
  *(_OWORD *)&v66[129] = v116;
  *(_OWORD *)&v66[145] = v117;
  *(_OWORD *)&v66[161] = v118;
  *(_OWORD *)&v66[65] = v112;
  *(_OWORD *)&v66[81] = v113;
  *(_OWORD *)&v66[97] = v114;
  *(_OWORD *)&v66[113] = v115;
  *(_OWORD *)&v66[1] = v108;
  *(_OWORD *)&v66[17] = v109;
  *(_OWORD *)&v66[33] = v110;
  v85[0] = v40;
  v85[1] = (uint64_t)&v76;
  v65 = (unint64_t)v38;
  v66[0] = 1;
  v66[177] = v119;
  *(_OWORD *)&v66[49] = v111;
  v85[2] = (uint64_t)&v67;
  v85[3] = (uint64_t)&v65;
  sub_10014E284((uint64_t)&v86);
  sub_10014E284((uint64_t)&v95);
  sub_10014E668((uint64_t)v104);
  v61 = v39;
  v62 = sub_100047110(&qword_10081F2D0);
  v63 = v62;
  v64 = sub_100047110(&qword_100822310);
  v57 = WitnessTable;
  v58 = sub_1000EA094();
  v59 = v58;
  v60 = sub_100028384(&qword_100822318, &qword_100822310, (uint64_t)&protocol conformance descriptor for HStack<A>);
  sub_100522738(v85, 4uLL, (uint64_t)&v61);
  sub_10014E71C((uint64_t)v104);
  sub_10014E2C0((uint64_t)&v95);
  sub_10014E2C0((uint64_t)&v86);
  v42 = (uint64_t (*)(uint64_t, uint64_t))v54;
  v54(v41, v39);
  v130 = *(_OWORD *)&v66[144];
  v131 = *(_OWORD *)&v66[160];
  v132 = *(_WORD *)&v66[176];
  v126 = *(_OWORD *)&v66[80];
  v127 = *(_OWORD *)&v66[96];
  v128 = *(_OWORD *)&v66[112];
  v129 = *(_OWORD *)&v66[128];
  v122 = *(_OWORD *)&v66[16];
  v123 = *(_OWORD *)&v66[32];
  v124 = *(_OWORD *)&v66[48];
  v125 = *(_OWORD *)&v66[64];
  v120 = v65;
  v121 = *(_OWORD *)v66;
  sub_10014E774((uint64_t)&v120);
  v133[6] = v73;
  v133[7] = v74;
  v133[8] = v75;
  v133[2] = v69;
  v133[3] = v70;
  v133[4] = v71;
  v133[5] = v72;
  v133[0] = v67;
  v133[1] = v68;
  sub_10014E2C0((uint64_t)v133);
  v134[6] = v82;
  v134[7] = v83;
  v134[8] = v84;
  v134[2] = v78;
  v134[3] = v79;
  v134[4] = v80;
  v134[5] = v81;
  v134[0] = v76;
  v134[1] = v77;
  sub_10014E2C0((uint64_t)v134);
  return v42(v40, v39);
}

void sub_10014CAE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t KeyPath;
  __n128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  unsigned __int8 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  char v56;
  _QWORD v57[2];

  v8 = type metadata accessor for Font.Leading(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for HistoryListItemStack(0, a2, a3, v12);
  v14 = (_QWORD *)(a1 + v13[12]);
  v15 = v14[1];
  v57[0] = *v14;
  v57[1] = v15;
  v16 = sub_100038CA0();
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(v57, &type metadata for String, v16);
  v19 = v18;
  v52 = v20;
  v53 = v21;
  v22 = sub_10014CD54();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v51 = static Edge.Set.all.getter(v29);
  v30 = static Font.footnote.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Font.Leading.tight(_:), v8);
  v31 = Font.leading(_:)(v11, v30);
  v32 = swift_release(v30);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v32);
  KeyPath = swift_getKeyPath(&unk_100626700);
  v35 = static HierarchicalShapeStyle.secondary.getter(v34);
  v36 = v35;
  v37 = *(_QWORD *)(a1 + v13[13]);
  if (v37 < 1)
  {
    v44 = 0;
    v43 = 0;
    v41 = 0uLL;
    v42 = 0uLL;
  }
  else
  {
    v38 = (__int128 *)(a1 + v13[15]);
    v39 = *v38;
    v49 = v38[1];
    v50 = v39;
    v40 = static Edge.Set.all.getter(v35);
    v42 = v49;
    v41 = v50;
    v43 = v40;
    v44 = v37;
  }
  v45 = v51;
  v46 = v52 & 1;
  LOBYTE(v57[0]) = v52 & 1;
  v47 = v37 < 1;
  v56 = 0;
  v55 = 1;
  v54 = v37 < 1;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v19;
  *(_BYTE *)(a4 + 16) = v46;
  v48 = v53;
  *(_QWORD *)(a4 + 24) = v53;
  *(_BYTE *)(a4 + 32) = v45;
  *(double *)(a4 + 40) = v22;
  *(_QWORD *)(a4 + 48) = v24;
  *(_QWORD *)(a4 + 56) = v26;
  *(_QWORD *)(a4 + 64) = v28;
  *(_BYTE *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = KeyPath;
  *(_QWORD *)(a4 + 88) = v31;
  *(_DWORD *)(a4 + 96) = v36;
  *(_QWORD *)(a4 + 104) = 0;
  *(_BYTE *)(a4 + 112) = 1;
  *(_QWORD *)(a4 + 120) = v44;
  *(_QWORD *)(a4 + 128) = v43;
  *(_OWORD *)(a4 + 136) = v41;
  *(_OWORD *)(a4 + 152) = v42;
  *(_BYTE *)(a4 + 168) = 0;
  *(_BYTE *)(a4 + 169) = v47;
  sub_1000E439C(v17, v19, v46);
  swift_bridgeObjectRetain(v48);
  swift_retain(KeyPath);
  swift_retain(v31);
  sub_1000E4458(v17, v19, v46);
  swift_release(v31);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v48);
}

double sub_10014CD54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  double result;
  uint64_t v10;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v10 - v5;
  sub_1003F6E18((uint64_t)&v10 - v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DynamicTypeSize.xxLarge(_:), v0);
  sub_10014E224();
  v7 = dispatch thunk of static Comparable.< infix(_:_:)(v4, v6, v0);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  result = 10.0;
  if ((v7 & 1) == 0)
    return 0.0;
  return result;
}

uint64_t sub_10014CE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[50];
  uint64_t v31[4];
  _BYTE v32[376];
  _BYTE v33[392];
  _BYTE v34[379];
  _BYTE v35[408];

  v26 = a4;
  v7 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _PaddingLayout);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  type metadata accessor for HistoryListItemStack(0, a2, a3, v14);
  View.padding(_:)(a2, a3, 0.0);
  v31[2] = a3;
  v31[3] = (uint64_t)&protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  sub_10029340C((uint64_t)v11, v7, (uint64_t)v13);
  v25 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v16 = v25(v11, v7);
  v21 = static HorizontalAlignment.center.getter(v16, v17, v18, v19, v20);
  sub_10014D0A4(a1, a2, a3, (uint64_t)v32);
  v33[384] = 0;
  memcpy(&v33[7], v32, 0x174uLL);
  memcpy(v34, v33, sizeof(v34));
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v31[0] = (uint64_t)v11;
  v30[0] = v21;
  v30[1] = 0;
  LOBYTE(v30[2]) = 0;
  memcpy((char *)&v30[2] + 1, v34, 0x17BuLL);
  v31[1] = (uint64_t)v30;
  sub_10014E304((uint64_t)v32);
  v29[0] = v7;
  v29[1] = sub_100047110(&qword_100822308);
  v27 = WitnessTable;
  v28 = sub_100028384(&qword_100822320, &qword_100822308, (uint64_t)&protocol conformance descriptor for VStack<A>);
  sub_100522738(v31, 2uLL, (uint64_t)v29);
  sub_10014E3C8((uint64_t)v32);
  v22 = v25;
  v25(v13, v7);
  memcpy(v35, v30, 0x18CuLL);
  sub_10014E48C((uint64_t)v35);
  return v22(v11, v7);
}

double sub_10014D0A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __src[264];
  _BYTE v21[280];
  _QWORD v22[36];
  _QWORD v23[37];
  char v24;
  char v25;
  char v26;
  char v27;
  _QWORD v28[2];
  char v29;
  _BYTE v30[267];

  v19 = static VerticalAlignment.top.getter(a1);
  sub_10014D264(a1, a2, a3, (uint64_t)v23);
  v8 = v23[0];
  v9 = v23[1];
  v10 = v23[2];
  v18 = v23[4];
  v11 = v23[5];
  v16 = v23[3];
  v17 = v23[6];
  v12 = v23[7];
  v14 = static VerticalAlignment.bottom.getter(v13);
  sub_10014D37C(a1, a2, a3, (uint64_t)__src);
  v21[272] = 0;
  memcpy(&v21[7], __src, 0x104uLL);
  v22[0] = v14;
  v22[1] = 0;
  LOBYTE(v22[2]) = 0;
  memcpy((char *)&v22[2] + 1, v21, 0x10BuLL);
  v27 = 0;
  v26 = v10;
  v25 = v11;
  v24 = v12;
  memcpy((char *)v23 + 7, v22, 0x11CuLL);
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = v9;
  *(_BYTE *)(a4 + 40) = v10;
  *(_QWORD *)(a4 + 48) = v16;
  *(_QWORD *)(a4 + 56) = v18;
  *(_BYTE *)(a4 + 64) = v11;
  *(_QWORD *)(a4 + 72) = v17;
  *(_BYTE *)(a4 + 80) = v12;
  memcpy((void *)(a4 + 81), v23, 0x123uLL);
  v28[0] = v14;
  v28[1] = 0;
  v29 = 0;
  memcpy(v30, v21, sizeof(v30));
  sub_1000E439C(v8, v9, v10);
  swift_bridgeObjectRetain(v16);
  sub_10014E550((uint64_t)v22);
  sub_10014E5DC((uint64_t)v28);
  sub_1000E4458(v8, v9, v10);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
  return result;
}

double sub_10014D264@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double result;
  uint64_t v22;

  v8 = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HistoryListItemStack(0, a2, a3, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1 + *(int *)(v13 + 40), v8);
  v14 = Text.init(_:)(v11);
  v16 = v15;
  v18 = v17;
  v19 = *(_QWORD *)(a1 + *(int *)(v13 + 52));
  LOBYTE(v13) = v20 & 1;
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v20 & 1;
  *(_QWORD *)(a4 + 24) = v17;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = v19 & ~(v19 >> 63);
  *(_BYTE *)(a4 + 56) = v19 < 1;
  sub_1000E439C(v14, v15, v20 & 1);
  swift_bridgeObjectRetain(v18);
  sub_1000E4458(v14, v16, v13);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v18).n128_u64[0];
  return result;
}

uint64_t sub_10014D37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t KeyPath;
  __n128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  _BYTE v59[4];
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[9];
  _BYTE v83[7];
  char v84;
  _BYTE v85[7];
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v8 = type metadata accessor for Font.Leading(0);
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  __chkstk_darwin(v8);
  v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v59[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for HistoryListItemStack(0, a2, a3, v15);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a1 + *(int *)(v16 + 44), v11);
  v17 = Text.init(_:)(v14);
  v19 = v18;
  v21 = v20;
  LOBYTE(v14) = v22 & 1;
  v23 = static Alignment.leading.getter();
  sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v90, 0.0, 1, 0.0, 1, v23, v24, v17, v19, (char)v14, v21);
  sub_1000E4458(v17, v19, (char)v14);
  swift_bridgeObjectRelease(v21);
  v79 = v96;
  v80 = v97;
  v81 = v98;
  v75 = v92;
  v76 = v93;
  v77 = v94;
  v78 = v95;
  v73 = v90;
  v74 = v91;
  v25 = (_QWORD *)(a1 + *(int *)(v16 + 48));
  v26 = v25[1];
  *(_QWORD *)&v90 = *v25;
  *((_QWORD *)&v90 + 1) = v26;
  v27 = sub_100038CA0();
  swift_bridgeObjectRetain(v26);
  v28 = Text.init<A>(_:)(&v90, &type metadata for String, v27);
  v30 = v29;
  v61 = v31;
  LOBYTE(v14) = v32 & 1;
  v33 = sub_10014CD54();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v60 = static Edge.Set.all.getter(v40);
  v41 = static Font.footnote.getter();
  v42 = v62;
  v43 = v63;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v62 + 104))(v10, enum case for Font.Leading.tight(_:), v63);
  v44 = Font.leading(_:)(v10, v41);
  v45 = swift_release(v41);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v42 + 8))(v10, v43, v45);
  KeyPath = swift_getKeyPath(&unk_100626700);
  v48 = static HierarchicalShapeStyle.secondary.getter(v47);
  v70 = v79;
  v71 = v80;
  v72 = v81;
  v66 = v75;
  v67 = v76;
  v68 = v77;
  v69 = v78;
  v64 = v73;
  v65 = v74;
  v49 = v80;
  v82[6] = v79;
  v82[7] = v80;
  v82[8] = v81;
  v50 = v75;
  v51 = v76;
  v82[2] = v75;
  v82[3] = v76;
  v52 = v77;
  v53 = v78;
  v82[4] = v77;
  v82[5] = v78;
  v55 = v73;
  v54 = v74;
  v82[0] = v73;
  v82[1] = v74;
  *(_OWORD *)(a4 + 96) = v79;
  *(_OWORD *)(a4 + 112) = v49;
  *(_OWORD *)(a4 + 128) = v81;
  *(_OWORD *)(a4 + 32) = v50;
  *(_OWORD *)(a4 + 48) = v51;
  *(_OWORD *)(a4 + 64) = v52;
  *(_OWORD *)(a4 + 80) = v53;
  *(_OWORD *)a4 = v55;
  *(_OWORD *)(a4 + 16) = v54;
  v89 = 1;
  v87 = (char)v14;
  v84 = 0;
  *(_DWORD *)(a4 + 153) = *(_DWORD *)v88;
  *(_DWORD *)(a4 + 156) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a4 + 177) = *(_DWORD *)v86;
  *(_DWORD *)(a4 + 180) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a4 + 193) = *(_DWORD *)v85;
  *(_DWORD *)(a4 + 196) = *(_DWORD *)&v85[3];
  v56 = *(_DWORD *)v83;
  *(_DWORD *)(a4 + 236) = *(_DWORD *)&v83[3];
  *(_DWORD *)(a4 + 233) = v56;
  *(_QWORD *)(a4 + 144) = 0;
  *(_BYTE *)(a4 + 152) = 1;
  *(_QWORD *)(a4 + 160) = v28;
  *(_QWORD *)(a4 + 168) = v30;
  *(_BYTE *)(a4 + 176) = (_BYTE)v14;
  v57 = v61;
  *(_QWORD *)(a4 + 184) = v61;
  *(_BYTE *)(a4 + 192) = v60;
  *(double *)(a4 + 200) = v33;
  *(_QWORD *)(a4 + 208) = v35;
  *(_QWORD *)(a4 + 216) = v37;
  *(_QWORD *)(a4 + 224) = v39;
  *(_BYTE *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 240) = KeyPath;
  *(_QWORD *)(a4 + 248) = v44;
  *(_DWORD *)(a4 + 256) = v48;
  sub_10014E284((uint64_t)v82);
  sub_1000E439C(v28, v30, (char)v14);
  swift_bridgeObjectRetain(v57);
  swift_retain(KeyPath);
  swift_retain(v44);
  sub_1000E4458(v28, v30, (char)v14);
  swift_release(v44);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v57);
  v96 = v70;
  v97 = v71;
  v98 = v72;
  v92 = v66;
  v93 = v67;
  v94 = v68;
  v95 = v69;
  v90 = v64;
  v91 = v65;
  return sub_10014E2C0((uint64_t)&v90);
}

uint64_t sub_10014D788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t WitnessTable;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _OWORD v77[9];
  uint64_t v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99[5];
  _OWORD v100[8];
  char v101;
  _BYTE v102[136];
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  _OWORD v122[9];
  _OWORD v123[10];
  uint64_t v124;
  void *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;

  v64 = a4;
  v7 = type metadata accessor for DynamicTypeSize(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  v59 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString(0);
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  __chkstk_darwin(v9);
  v51 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _PaddingLayout);
  v65 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v50 - v15;
  v54 = (char *)&v50 - v15;
  v55 = a3;
  v56 = a2;
  v18 = type metadata accessor for HistoryListItemStack(0, a2, a3, v17);
  v19 = sub_10014DE90();
  View.padding(_:)(a2, a3, v19);
  v124 = a3;
  v125 = &protocol witness table for _PaddingLayout;
  v58 = v11;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v57 = v14;
  sub_10029340C((uint64_t)v14, v11, (uint64_t)v16);
  v63 = *(void (**)(char *, uint64_t))(v65 + 8);
  v63(v14, v11);
  v20 = a1;
  v21 = v51;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v23 = v53;
  v22(v51, a1 + *(int *)(v18 + 40), v53);
  v24 = Text.init(_:)(v21);
  v26 = v25;
  v28 = v27;
  LOBYTE(a1) = v29 & 1;
  v30 = static Alignment.leading.getter();
  sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v113, 0.0, 1, 0.0, 1, v30, v31, v24, v26, a1, v28);
  sub_1000E4458(v24, v26, a1);
  swift_bridgeObjectRelease(v28);
  v132 = v119;
  v133 = v120;
  v134 = v121[0];
  v128 = v115;
  v129 = v116;
  v131 = v118;
  v130 = v117;
  v127 = v114;
  v126 = v113;
  v32 = v20 + *(int *)(v18 + 44);
  v33 = v20;
  v22(v21, v32, v23);
  v34 = Text.init(_:)(v21);
  v36 = v35;
  v38 = v37;
  LOBYTE(v22) = v39 & 1;
  v40 = static Alignment.leading.getter();
  sub_1003EAC04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v113, 0.0, 1, 0.0, 1, v40, v41, v34, v36, (char)v22, v38);
  sub_1000E4458(v34, v36, (char)v22);
  swift_bridgeObjectRelease(v38);
  v141 = v119;
  v142 = v120;
  v143 = v121[0];
  v137 = v115;
  v138 = v116;
  v139 = v117;
  v140 = v118;
  v135 = v113;
  v136 = v114;
  v42 = v59;
  sub_1003F6E18(v59);
  LODWORD(v34) = sub_10054FD90(v42, 2uLL, 0, 3u);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v42, v61);
  LOBYTE(v42) = (_DWORD)v34 == 2;
  v44 = static VerticalAlignment.bottom.getter(v43);
  sub_10014DF40(v33, v56, v55, (uint64_t)v100);
  *(_OWORD *)&v102[103] = v100[6];
  *(_OWORD *)&v102[87] = v100[5];
  *(_OWORD *)&v102[39] = v100[2];
  *(_OWORD *)&v102[23] = v100[1];
  *(_OWORD *)&v102[119] = v100[7];
  *(_OWORD *)&v102[55] = v100[3];
  v103 = 1;
  v102[135] = v101;
  *(_OWORD *)&v102[71] = v100[4];
  *(_OWORD *)&v102[7] = v100[0];
  v110 = *(_OWORD *)&v102[96];
  v111 = *(_OWORD *)&v102[112];
  v112 = *(_QWORD *)&v102[128];
  v107 = *(_OWORD *)&v102[48];
  v109 = *(_OWORD *)&v102[80];
  v108 = *(_OWORD *)&v102[64];
  v105 = *(_OWORD *)&v102[16];
  v106 = *(_OWORD *)&v102[32];
  v104 = *(_OWORD *)v102;
  v46 = (uint64_t)v57;
  v45 = v58;
  v47 = v54;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v57, v54, v58);
  v96 = v132;
  v97 = v133;
  v98 = v134;
  v92 = v128;
  v93 = v129;
  v94 = v130;
  v95 = v131;
  v90 = v126;
  v91 = v127;
  v87 = v141;
  v88 = v142;
  v89 = v143;
  v83 = v137;
  v84 = v138;
  v85 = v139;
  v86 = v140;
  v81 = v135;
  v82 = v136;
  *(_OWORD *)((char *)&v77[5] + 1) = v109;
  *(_OWORD *)((char *)&v77[6] + 1) = v110;
  *(_OWORD *)((char *)&v77[7] + 1) = v111;
  *(_OWORD *)((char *)&v77[1] + 1) = v105;
  *(_OWORD *)((char *)&v77[2] + 1) = v106;
  *(_OWORD *)((char *)&v77[3] + 1) = v107;
  *(_OWORD *)((char *)&v77[4] + 1) = v108;
  v99[0] = v46;
  v99[1] = (uint64_t)&v90;
  v78 = 0;
  v79 = 0;
  v80 = v42;
  v99[2] = (uint64_t)&v81;
  v99[3] = (uint64_t)&v78;
  v76 = (unint64_t)v44;
  LOBYTE(v77[0]) = 1;
  *(_QWORD *)((char *)&v77[8] + 1) = v112;
  *(_OWORD *)((char *)v77 + 1) = v104;
  v99[4] = (uint64_t)&v76;
  sub_10014E284((uint64_t)&v126);
  sub_10014E284((uint64_t)&v135);
  sub_10014E668((uint64_t)v100);
  v71 = v45;
  v72 = sub_100047110(&qword_10081F2D0);
  v73 = v72;
  v74 = sub_100047110(&qword_1008222F8);
  v75 = sub_100047110(&qword_100822300);
  v66 = WitnessTable;
  v67 = sub_1000EA094();
  v68 = v67;
  v69 = sub_10014E6C0();
  v70 = sub_100028384((unint64_t *)&unk_100822330, &qword_100822300, (uint64_t)&protocol conformance descriptor for HStack<A>);
  sub_100522738(v99, 5uLL, (uint64_t)&v71);
  sub_10014E71C((uint64_t)v100);
  sub_10014E2C0((uint64_t)&v135);
  sub_10014E2C0((uint64_t)&v126);
  v48 = (uint64_t (*)(uint64_t, uint64_t))v63;
  v63(v47, v45);
  v119 = v77[5];
  v120 = v77[6];
  v121[0] = v77[7];
  *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)((char *)&v77[7] + 9);
  v115 = v77[1];
  v116 = v77[2];
  v117 = v77[3];
  v118 = v77[4];
  v113 = v76;
  v114 = v77[0];
  sub_10014E774((uint64_t)&v113);
  v122[6] = v87;
  v122[7] = v88;
  v122[8] = v89;
  v122[2] = v83;
  v122[3] = v84;
  v122[5] = v86;
  v122[4] = v85;
  v122[1] = v82;
  v122[0] = v81;
  sub_10014E2C0((uint64_t)v122);
  v123[6] = v96;
  v123[7] = v97;
  v123[8] = v98;
  v123[2] = v92;
  v123[3] = v93;
  v123[5] = v95;
  v123[4] = v94;
  v123[1] = v91;
  v123[0] = v90;
  sub_10014E2C0((uint64_t)v123);
  return v48(v46, v45);
}

double sub_10014DE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  double result;
  uint64_t v6;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F6E18((uint64_t)v3);
  v4 = sub_10054FD90((uint64_t)v3, 2uLL, 0, 3u);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  result = -2.0;
  if (!v4)
    return 0.0;
  return result;
}

void sub_10014DF40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t KeyPath;
  __n128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  char v45;
  _QWORD v46[2];

  v8 = type metadata accessor for Font.Leading(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HistoryListItemStack(0, a2, a3, v12);
  v14 = (_QWORD *)(a1 + *(int *)(v13 + 48));
  v15 = v14[1];
  v46[0] = *v14;
  v46[1] = v15;
  v16 = sub_100038CA0();
  swift_bridgeObjectRetain(v15);
  v17 = Text.init<A>(_:)(v46, &type metadata for String, v16);
  v41 = v18;
  v42 = v19;
  v21 = v20 & 1;
  v22 = sub_10014E16C();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  HIDWORD(v40) = static Edge.Set.all.getter(v29);
  v30 = static Font.footnote.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Font.Leading.tight(_:), v8);
  v31 = Font.leading(_:)(v11, v30);
  v32 = swift_release(v30);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v32);
  KeyPath = swift_getKeyPath(&unk_100626700);
  v35 = static HierarchicalShapeStyle.secondary.getter(v34);
  v36 = *(_QWORD *)(a1 + *(int *)(v13 + 52));
  LOBYTE(v46[0]) = v21;
  v45 = 0;
  v44 = 0;
  v43 = v36 < 1;
  v37 = v41;
  v38 = v42;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 24) = v38;
  *(_BYTE *)(a4 + 32) = BYTE4(v40);
  *(double *)(a4 + 40) = v22;
  *(_QWORD *)(a4 + 48) = v24;
  *(_QWORD *)(a4 + 56) = v26;
  *(_QWORD *)(a4 + 64) = v28;
  *(_BYTE *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = KeyPath;
  *(_QWORD *)(a4 + 88) = v31;
  *(_DWORD *)(a4 + 96) = v35;
  *(_QWORD *)(a4 + 104) = 0x4020000000000000;
  *(_BYTE *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = v36 & ~(v36 >> 63);
  *(_BYTE *)(a4 + 128) = v36 < 1;
  v39 = v37;
  sub_1000E439C(v17, v37, v21);
  swift_bridgeObjectRetain(v38);
  swift_retain(KeyPath);
  swift_retain(v31);
  sub_1000E4458(v17, v39, v21);
  swift_release(v31);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v38);
}

double sub_10014E16C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  double result;
  uint64_t v6;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F6E18((uint64_t)v3);
  v4 = sub_10054FD90((uint64_t)v3, 2uLL, 0, 3u);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  result = 0.0;
  if (v4 == 2)
    return 10.0;
  return result;
}

uint64_t sub_10014E218@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10014D788(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10014E224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10081F588;
  if (!qword_10081F588)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_10081F588);
  }
  return result;
}

uint64_t sub_10014E26C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10014CE5C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10014E278@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10014C48C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10014E284(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_1000E439C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10014E2C0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_1000E4458(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10014E304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_BYTE *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 272);
  v8 = *(_QWORD *)(a1 + 280);
  v9 = *(_BYTE *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 360);
  v12 = *(_QWORD *)(a1 + 296);
  v13 = *(_QWORD *)(a1 + 352);
  sub_1000E439C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_1000E439C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_1000E439C(v7, v8, v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_10014E3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_BYTE *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 272);
  v8 = *(_QWORD *)(a1 + 280);
  v9 = *(_BYTE *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 352);
  v12 = *(_QWORD *)(a1 + 296);
  v13 = *(_QWORD *)(a1 + 360);
  sub_1000E4458(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_1000E4458(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_1000E4458(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_10014E48C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 144);
  v5 = *(_BYTE *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 296);
  v8 = *(_QWORD *)(a1 + 304);
  v9 = *(_BYTE *)(a1 + 312);
  v10 = *(_QWORD *)(a1 + 376);
  v12 = *(_QWORD *)(a1 + 320);
  v13 = *(_QWORD *)(a1 + 384);
  sub_1000E4458(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRelease(v2);
  sub_1000E4458(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_1000E4458(v7, v8, v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_10014E550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_BYTE *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 264);
  v8 = *(_QWORD *)(a1 + 272);
  sub_1000E439C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_1000E439C(v3, v4, v5);
  swift_retain(v8);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_10014E5DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_BYTE *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 264);
  v8 = *(_QWORD *)(a1 + 272);
  sub_1000E4458(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_1000E4458(v3, v4, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_10014E668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  sub_1000E439C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v4);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

unint64_t sub_10014E6C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100822328;
  if (!qword_100822328)
  {
    v1 = sub_100007050(&qword_1008222F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100822328);
  }
  return result;
}

uint64_t sub_10014E71C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  sub_1000E4458(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_10014E774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  sub_1000E4458(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_10014E7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10014E7F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t TupleTypeMetadata;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _PaddingLayout);
  sub_100007050(&qword_10081F2D0);
  sub_100007050(&qword_100822310);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v3 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v3);
  v4 = type metadata accessor for VStack(255, v3);
  v5 = sub_100007050(&qword_100822308);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  v8 = type metadata accessor for HStack(255, v7);
  v9 = type metadata accessor for _ConditionalContent(255, v4, v8);
  sub_100007050(&qword_10081F2D0);
  sub_100007050(&qword_1008222F8);
  sub_100007050(&qword_100822300);
  v10 = swift_getTupleTypeMetadata(255, 5);
  v11 = type metadata accessor for TupleView(255, v10);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for VStack(255, v11);
  v13 = type metadata accessor for _ConditionalContent(255, v9, v12);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v4);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v9);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v13);
}

id sub_10014EA98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator()
{
  return objc_opt_self(_TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator);
}

uint64_t sub_10014EB24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v11;

  v3 = v2;
  v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = sub_100047110((uint64_t *)&unk_100822490);
  UIViewControllerRepresentableContext.coordinator.getter(&v11, v7);
  v8 = v11;
  v9 = sub_10051D004(v3, v5, v6, v11);

  return v9;
}

id sub_10014EBA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id result;
  objc_super v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (uint64_t *)(v2 + *(int *)(a1 + 24));
  v5 = v4[1];
  v14 = *v4;
  v15 = v5;
  v16 = *((_OWORD *)v4 + 1);
  v6 = sub_100047110((uint64_t *)&unk_1008223D0);
  Binding.projectedValue.getter(v6);
  v7 = v18;
  v8 = v19;
  v9 = (objc_class *)type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply];
  *(_OWORD *)v11 = v17;
  *((_QWORD *)v11 + 2) = v7;
  *((_QWORD *)v11 + 3) = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  result = objc_msgSendSuper2(&v13, "init");
  *a2 = result;
  return result;
}

uint64_t sub_10014EC44(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_10014EC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10014F838(&qword_100822488, (uint64_t)&unk_1006267A8);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10014ECDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10014F838(&qword_100822488, (uint64_t)&unk_1006267A8);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10014ED3C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10014F838(&qword_100822488, (uint64_t)&unk_1006267A8);
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10014ED70(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  os_log_type_t v4;
  void *v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  __int128 v25;

  ObjectType = swift_getObjectType(v1);
  v4 = static os_log_type_t.default.getter(ObjectType);
  v5 = (void *)HKLogActivity;
  v6 = v4;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    v7 = v5;
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v24[0] = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = _typeName(_:qualified:)(ObjectType, 0);
    v12 = v11;
    v22 = sub_10003E8EC(v10, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v8 + 4);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    v13 = 0xE600000000000000;
    v14 = 0x64656C696166;
    v15 = 0xE700000000000000;
    v16 = 0x6E776F6E6B6E75;
    if (a1 == 1)
    {
      v16 = 1953391987;
      v15 = 0xE400000000000000;
    }
    if (a1 != 2)
    {
      v14 = v16;
      v13 = v15;
    }
    if (a1)
      v17 = v14;
    else
      v17 = 0x656C6C65636E6163;
    if (a1)
      v18 = v13;
    else
      v18 = 0xE900000000000064;
    v22 = sub_10003E8EC(v17, v18, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v8 + 14);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "%s Activity sharing reply message sent with result: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  v19 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply
                  + 8);
  v24[0] = *(_QWORD *)(v1
                     + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply);
  v24[1] = v19;
  v25 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply
                  + 16);
  v22 = 0;
  v23 = 0;
  v20 = sub_100047110((uint64_t *)&unk_1008223D0);
  return Binding.wrappedValue.setter(&v22, v20);
}

uint64_t *sub_10014EFA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100047110(&qword_10081E640);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v20 = v17[3];
    v16[2] = v17[2];
    v16[3] = v20;
    swift_bridgeObjectRetain(v15);
    swift_retain(v18);
    swift_retain(v19);
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_10014F0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  swift_release(*v6);
  swift_release(v6[1]);
  return swift_bridgeObjectRelease(v6[3]);
}

char *sub_10014F150(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100047110(&qword_10081E640);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v17;
  v18 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 3) = v18;
  swift_bridgeObjectRetain(v13);
  swift_retain(v16);
  swift_retain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

char *sub_10014F248(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100047110(&qword_10081E640);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(int *)(a3 + 24);
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)&a1[v17];
  v21 = *(_QWORD *)v19;
  *(_QWORD *)&a1[v17] = *(_QWORD *)v19;
  swift_retain(v21);
  swift_release(v20);
  v22 = *((_QWORD *)v19 + 1);
  v23 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = v22;
  swift_retain(v22);
  swift_release(v23);
  *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
  v24 = *((_QWORD *)v19 + 3);
  v25 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v18 + 3) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

char *sub_10014F3CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100047110(&qword_10081E640);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  return a1;
}

char *sub_10014F498(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100047110(&qword_10081E640);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)v20;
  swift_release(v21);
  v22 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_release(v22);
  v23 = *((_QWORD *)v20 + 3);
  v24 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  *((_QWORD *)v19 + 3) = v23;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_10014F5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014F5F8);
}

uint64_t sub_10014F5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100047110(&qword_10081E640);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10014F67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014F688);
}

uint64_t sub_10014F688(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100047110(&qword_10081E640);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ActivitySharingReplyMessageComposerView(uint64_t a1)
{
  uint64_t result;

  result = qword_100822438;
  if (!qword_100822438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivitySharingReplyMessageComposerView);
  return result;
}

void sub_10014F744(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10014F7C0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100626778;
    v4[2] = &unk_100626790;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_10014F7C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100822448)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100822448);
  }
}

uint64_t sub_10014F814()
{
  return sub_10014F838(&qword_100822480, (uint64_t)&unk_100626820);
}

uint64_t sub_10014F838(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ActivitySharingReplyMessageComposerView(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10014F884()
{
  return sub_100111F3C(type metadata accessor for WorkoutStartLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutStartLocationAnnotation()
{
  return objc_opt_self(_TtC10FitnessApp30WorkoutStartLocationAnnotation);
}

id sub_10014F8BC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_10014F8F8()
{
  return sub_100111F3C(type metadata accessor for WorkoutEndLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutEndLocationAnnotation()
{
  return objc_opt_self(_TtC10FitnessApp28WorkoutEndLocationAnnotation);
}

id sub_10014F978()
{
  return sub_100111F3C(type metadata accessor for WorkoutScrubbedLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutScrubbedLocationAnnotation()
{
  return objc_opt_self(_TtC10FitnessApp33WorkoutScrubbedLocationAnnotation);
}

id sub_10014F9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  objc_super v13;

  if (a3)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for WorkoutLocationAnnotationView();
  v7 = objc_msgSendSuper2(&v13, "initWithAnnotation:reuseIdentifier:", a1, v6);

  v8 = v7;
  objc_msgSend(v8, "setFrame:", 0.0, 0.0, 15.0, 15.0);
  v9 = (void *)objc_opt_self(UIColor);
  v10 = v8;
  v11 = objc_msgSend(v9, "clearColor");
  objc_msgSend(v10, "setBackgroundColor:", v11);

  objc_msgSend(v10, "setCanShowCallout:", 0);
  sub_10014FB54(a1);

  swift_unknownObjectRelease(a1);
  return v10;
}

void sub_10014FB54(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t started;
  uint64_t v6;
  id v7;

  if (!a1)
    goto LABEL_8;
  v3 = type metadata accessor for WorkoutScrubbedLocationAnnotation();
  if (!swift_dynamicCastClass(a1, v3))
  {
    started = type metadata accessor for WorkoutStartLocationAnnotation();
    if (swift_dynamicCastClass(a1, started))
    {
      v4 = (id)HKUIStandardMapGreenColor();
      goto LABEL_9;
    }
    v6 = type metadata accessor for WorkoutEndLocationAnnotation();
    if (swift_dynamicCastClass(a1, v6))
    {
      v4 = (id)HKUIStandardMapRedColor();
      goto LABEL_9;
    }
LABEL_8:
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    goto LABEL_9;
  }
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
LABEL_9:
  v7 = v4;
  objc_msgSend(v1, "setTintColor:", v7);

}

void sub_10014FC1C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  CGContext *v9;
  id v10;
  void *v11;
  CGColor *v12;
  id v13;
  CGColor *v14;
  CGContext *c;
  CGRect v16;
  CGRect v17;

  v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    c = v9;
    CGContextSetLineWidth(v9, 2.0);
    v10 = objc_msgSend(v4, "tintColor");
    if (v10)
    {
      v11 = v10;
      v12 = (CGColor *)objc_msgSend(v10, "CGColor");

      CGContextSetFillColorWithColor(c, v12);
      v13 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v14 = (CGColor *)objc_msgSend(v13, "CGColor");

      CGContextSetStrokeColorWithColor(c, v14);
      v16.origin.x = a1;
      v16.origin.y = a2;
      v16.size.width = a3;
      v16.size.height = a4;
      v17 = CGRectInset(v16, 2.0, 2.0);
      CGContextAddEllipseInRect(c, v17);
      CGContextDrawPath(c, kCGPathFillStroke);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_10014FDD0()
{
  return sub_100111F3C(type metadata accessor for WorkoutLocationAnnotationView);
}

uint64_t type metadata accessor for WorkoutLocationAnnotationView()
{
  return objc_opt_self(_TtC10FitnessApp29WorkoutLocationAnnotationView);
}

uint64_t sub_10014FDFC(uint64_t a1)
{
  return sub_100150624(0.95, a1, qword_100869E78);
}

_QWORD *sub_10014FE14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _OWORD *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = (void *)a2[2];
    v8 = a2[3];
    a1[2] = v9;
    a1[3] = v8;
    v10 = a2[4];
    v11 = (void *)a2[5];
    a1[4] = v10;
    a1[5] = v11;
    v13 = a2 + 6;
    v12 = a2[6];
    swift_retain(v7);
    v14 = v9;
    swift_retain(v8);
    swift_retain(v10);
    v15 = v11;
    if (v12)
    {
      v16 = a2[7];
      a1[6] = v12;
      a1[7] = v16;
      swift_retain(v16);
    }
    else
    {
      *((_OWORD *)a1 + 3) = *v13;
    }
    v18 = *(int *)(a3 + 40);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for PresentationDetent(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = *(int *)(sub_100047110(&qword_1008225B0) + 28);
    v17 = *(_QWORD *)&v20[v22];
    *(_QWORD *)&v19[v22] = v17;
  }
  swift_retain(v17);
  return a1;
}

double sub_10014FF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 8));

  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));

  if (*(_QWORD *)(a1 + 48))
    swift_release(*(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = *(_QWORD *)(v4 + *(int *)(sub_100047110(&qword_1008225B0) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

_QWORD *sub_10014FFB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = (void *)a2[2];
  v7 = a2[3];
  a1[2] = v8;
  a1[3] = v7;
  v9 = a2[4];
  v10 = (void *)a2[5];
  a1[4] = v9;
  a1[5] = v10;
  v12 = a2 + 6;
  v11 = a2[6];
  swift_retain(v6);
  v13 = v8;
  swift_retain(v7);
  swift_retain(v9);
  v14 = v10;
  if (v11)
  {
    v15 = a2[7];
    a1[6] = v11;
    a1[7] = v15;
    swift_retain(v15);
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v12;
  }
  v16 = *(int *)(a3 + 40);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = *(int *)(sub_100047110(&qword_1008225B0) + 28);
  v21 = *(_QWORD *)&v18[v20];
  *(_QWORD *)&v17[v20] = v21;
  swift_retain(v21);
  return a1;
}

_QWORD *sub_1001500A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = (void *)a2[2];
  v9 = (void *)a1[2];
  a1[2] = v8;
  v10 = v8;

  v11 = a2[3];
  v12 = a1[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a2[4];
  v14 = a1[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = (void *)a2[5];
  v16 = (void *)a1[5];
  a1[5] = v15;
  v17 = v15;

  v18 = a2[6];
  if (!a1[6])
  {
    if (v18)
    {
      v21 = a2[7];
      a1[6] = v18;
      a1[7] = v21;
      swift_retain(v21);
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v18)
  {
    swift_release(a1[7]);
    goto LABEL_7;
  }
  v19 = a2[7];
  v20 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  swift_retain(v19);
  swift_release(v20);
LABEL_8:
  v22 = *(int *)(a3 + 40);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = *(int *)(sub_100047110(&qword_1008225B0) + 28);
  v27 = *(_QWORD *)&v23[v26];
  v28 = *(_QWORD *)&v24[v26];
  *(_QWORD *)&v23[v26] = v28;
  swift_retain(v28);
  swift_release(v27);
  return a1;
}

uint64_t sub_100150200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v6;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = sub_100047110(&qword_1008225B0);
  *(_QWORD *)(v8 + *(int *)(v11 + 28)) = *(_QWORD *)(v9 + *(int *)(v11 + 28));
  return a1;
}

_QWORD *sub_1001502A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  v8 = (void *)a1[2];
  a1[2] = a2[2];

  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_release(v10);
  v11 = (void *)a1[5];
  a1[5] = a2[5];

  v12 = a2[6];
  if (!a1[6])
  {
    if (v12)
    {
      v15 = a2[7];
      a1[6] = v12;
      a1[7] = v15;
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v12)
  {
    swift_release(a1[7]);
    goto LABEL_7;
  }
  v13 = a2[7];
  v14 = a1[7];
  a1[6] = v12;
  a1[7] = v13;
  swift_release(v14);
LABEL_8:
  v16 = *(int *)(a3 + 40);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = *(int *)(sub_100047110(&qword_1008225B0) + 28);
  v21 = *(_QWORD *)&v17[v20];
  *(_QWORD *)&v17[v20] = *(_QWORD *)&v18[v20];
  swift_release(v21);
  return a1;
}

uint64_t sub_1001503C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001503CC);
}

uint64_t sub_1001503CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100047110(&qword_1008225B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_10015044C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100150458);
}

uint64_t sub_100150458(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100047110(&qword_1008225B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MapHostingMirrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100822610;
  if (!qword_100822610)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapHostingMirrorView);
  return result;
}

void sub_10015050C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100626938;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_100626950;
  sub_1001505A8(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_1001505A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100822620)
  {
    v2 = type metadata accessor for PresentationDetent(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100822620);
  }
}

uint64_t sub_1001505FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AC718, 1);
}

uint64_t sub_10015060C(uint64_t a1)
{
  return sub_100150624(0.15, a1, qword_100869E90);
}

uint64_t sub_100150624(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = type metadata accessor for PresentationDetent(0);
  sub_100008398(v5, a3);
  sub_10003CE9C(v5, (uint64_t)a3);
  return static PresentationDetent.fraction(_:)(a1);
}

uint64_t sub_100150678@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  unsigned __int8 v50;

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for MapHostingMirrorView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v42 = type metadata accessor for BreadcrumbMapView(0);
  v44 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100047110(&qword_100822668);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR___WODataLinkMonitor_publisher);
  v11 = swift_retain(v10);
  v12 = MetricsPublisher.locationPositionPublisher.getter(v11);
  v13 = swift_release(v10);
  BreadcrumbMapView.init(locationPositionPublisher:)(v12, v13);
  LOBYTE(v47) = 1;
  static Binding.constant(_:)(v49, &v47, &type metadata for Bool);
  v14 = v49[1];
  v40 = v49[0];
  v41 = v50;
  sub_10004F8C8(v2, (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MapHostingMirrorView);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_1007883A8, v16 + v5, v15 | 7);
  sub_10015164C((uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  v18 = sub_100047110(&qword_100822670);
  v19 = sub_1000083D8(&qword_100822678, (uint64_t (*)(uint64_t))&type metadata accessor for BreadcrumbMapView, (uint64_t)&protocol conformance descriptor for BreadcrumbMapView);
  v20 = sub_100007050(&qword_100822680);
  v21 = sub_100007050(&qword_100822688);
  v22 = sub_100007050(&qword_100822690);
  v23 = sub_100007050(&qword_100822698);
  v24 = sub_1001516CC();
  v47 = v23;
  v48 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:selection:)>>, 1);
  v47 = v22;
  v48 = OpaqueTypeConformance2;
  v26 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.presentationBackgroundInteraction(_:)>>, 1);
  v47 = v21;
  v48 = v26;
  v27 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.presentationContentInteraction(_:)>>, 1);
  v47 = v20;
  v48 = v27;
  v28 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.interactiveDismissDisabled(_:)>>, 1);
  v39 = v18;
  v29 = v40;
  v30 = v42;
  View.sheet<A>(isPresented:onDismiss:content:)(v40, v14, v41, 0, 0, sub_100151690, v17, v42, v39, v19, v28);
  swift_release(v14);
  swift_release(v17);
  v31 = swift_release(v29);
  v32 = (*(uint64_t (**)(char *, uint64_t, __n128))(v44 + 8))(v7, v30, v31);
  v33 = static SafeAreaRegions.all.getter(v32);
  LOBYTE(v20) = static Edge.Set.all.getter(v33);
  v34 = v43;
  v36 = v45;
  v35 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v46, v9, v45);
  v37 = v35 + *(int *)(sub_100047110(&qword_1008226A8) + 36);
  *(_QWORD *)v37 = v33;
  *(_BYTE *)(v37 + 8) = v20;
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v9, v36);
}

uint64_t sub_1001509BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t OpaqueTypeConformance2;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78[16];
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;

  v75 = a2;
  v3 = type metadata accessor for PresentationContentInteraction(0);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  __chkstk_darwin(v3);
  v72 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PresentationDetent(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v61 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PresentationBackgroundInteraction(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008226B0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_100047110(&qword_100822698);
  v54 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100047110(&qword_100822690);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v77 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100047110(&qword_100822688);
  v63 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v60 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100047110(&qword_100822680);
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  __chkstk_darwin(v17);
  v65 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100047110(&qword_100822670);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v58 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a1;
  v79 = a1;
  v20 = sub_100047110(&qword_1008226B8);
  v21 = sub_100151720();
  NavigationView.init(content:)(sub_100151718, v78, v20, v21);
  v22 = sub_100047110(&qword_1008226F0);
  v23 = *(_QWORD *)(v6 + 72);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject(v22, v25 + 2 * v23, v24 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_100620BC0;
  v27 = v26 + v25;
  if (qword_10081D5A8 != -1)
    swift_once(&qword_10081D5A8, sub_10014FDFC);
  v28 = sub_10003CE9C(v5, (uint64_t)qword_100869E78);
  v55 = v6;
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v29(v27, v28, v5);
  v30 = v27 + v23;
  if (qword_10081D5B0 != -1)
    swift_once(&qword_10081D5B0, sub_10015060C);
  v31 = sub_10003CE9C(v5, (uint64_t)qword_100869E90);
  v29(v30, v31, v5);
  v32 = *(_QWORD *)(v26 + 16);
  if (v32)
    v33 = sub_100230928(v26);
  else
    v33 = &_swiftEmptySetSingleton;
  swift_setDeallocating(v26);
  swift_arrayDestroy(v27, v32, v5);
  swift_deallocClassInstance(v26, 32, 7);
  type metadata accessor for MapHostingMirrorView(0);
  v34 = sub_100047110(&qword_1008225B0);
  State.projectedValue.getter(v12);
  v35 = sub_1001516CC();
  v36 = v76;
  View.presentationDetents(_:selection:)(v33, v12, v76, v35);
  swift_bridgeObjectRelease(v33);
  sub_10001BE90((uint64_t)v12, &qword_1008226B0);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v36);
  v37 = v61;
  State.wrappedValue.getter(v61, v34);
  v38 = static PresentationDetent.== infix(_:_:)(v37, v31);
  v39 = (*(uint64_t (**)(_QWORD *, uint64_t))(v55 + 8))(v37, v5);
  v40 = v69;
  if ((v38 & 1) != 0)
    static PresentationBackgroundInteraction.enabled.getter(v39);
  else
    static PresentationBackgroundInteraction.disabled.getter(v39);
  v80 = v76;
  v81 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:selection:)>>, 1);
  v42 = v60;
  v43 = v59;
  v44 = v77;
  View.presentationBackgroundInteraction(_:)(v40, v59, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v71);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v44, v43);
  v46 = v72;
  static PresentationContentInteraction.scrolls.getter(v45);
  v80 = v43;
  v81 = OpaqueTypeConformance2;
  v47 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.presentationBackgroundInteraction(_:)>>, 1);
  v49 = v65;
  v48 = v66;
  View.presentationContentInteraction(_:)(v46, v66, v47);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v74);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v48);
  v80 = v48;
  v81 = v47;
  v50 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.presentationContentInteraction(_:)>>, 1);
  v51 = v58;
  v52 = v68;
  View.interactiveDismissDisabled(_:)(1, v68, v50);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v52);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v75, v51, v64);
}

uint64_t sub_100150FE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(_QWORD *, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = a2;
  v3 = type metadata accessor for MirrorStatusView(0);
  __chkstk_darwin(v3);
  v61 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100047110(&qword_1008226E0);
  v5 = __chkstk_darwin(v65);
  v60 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (uint64_t)&v59 - v7;
  v63 = sub_100047110(&qword_1008226F8);
  __chkstk_darwin(v63);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_1008226B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for MirrorView(0);
  __chkstk_darwin(v64);
  v14 = (uint64_t *)((char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for PresentationDetent(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for MapHostingMirrorView(0);
  v19 = sub_100047110(&qword_1008225B0);
  State.wrappedValue.getter(v18, v19);
  if (qword_10081D5A8 != -1)
    swift_once(&qword_10081D5A8, sub_10014FDFC);
  v20 = sub_10003CE9C(v15, (uint64_t)qword_100869E78);
  v21 = static PresentationDetent.== infix(_:_:)(v18, v20);
  v22 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v22(v18, v15);
  if ((v21 & 1) != 0)
  {
    v23 = a1[1];
    v24 = (void *)a1[2];
    v25 = a1[3];
    v26 = a1[4];
    v28 = (void *)a1[5];
    v27 = a1[6];
    v29 = a1[7];
    swift_retain(v23);
    v30 = v24;
    swift_retain(v25);
    swift_retain(v26);
    v31 = v28;
    sub_10003AFE0(v27, v29);
    sub_1004E8E74(v23, (uint64_t)v30, v25, v26, (uint64_t)v31, v27, v29, v14);
    sub_10004F8C8((uint64_t)v14, (uint64_t)v9, type metadata accessor for MirrorView);
    swift_storeEnumTagMultiPayload(v9, v63, 0);
    v32 = sub_1000083D8(&qword_100831F40, type metadata accessor for MirrorView, (uint64_t)&unk_100641EF0);
    v33 = sub_100151808();
    _ConditionalContent<>.init(storage:)(v9, v64, v65, v32, v33);
    sub_100011F54((uint64_t)v14, type metadata accessor for MirrorView);
LABEL_15:
    v56 = sub_100047110(&qword_1008226D0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v12, 0, 1, v56);
    return sub_100045AD4((uint64_t)v12, v66, &qword_1008226B8);
  }
  State.wrappedValue.getter(v18, v19);
  if (qword_10081D5B0 != -1)
    swift_once(&qword_10081D5B0, sub_10015060C);
  v34 = sub_10003CE9C(v15, (uint64_t)qword_100869E90);
  v35 = static PresentationDetent.== infix(_:_:)(v18, v34);
  v22(v18, v15);
  if ((v35 & 1) != 0)
  {
    swift_retain(*(_QWORD *)(a1[2] + OBJC_IVAR___WODataLinkMonitor_publisher));
    v36 = v61;
    sub_1003A8408(v37, v61);
    v38 = static Edge.Set.leading.getter();
    v39 = static Edge.Set.trailing.getter();
    v40 = Edge.Set.init(rawValue:)(0);
    v41 = Edge.Set.init(rawValue:)(v40);
    if (Edge.Set.init(rawValue:)(v41 & v38) != v38)
      v40 = Edge.Set.init(rawValue:)(v40 | v38);
    v42 = Edge.Set.init(rawValue:)(v40);
    if (Edge.Set.init(rawValue:)(v42 & v39) != v39)
      LOBYTE(v40) = Edge.Set.init(rawValue:)(v40 | v39);
    if (qword_10081DF40 != -1)
      swift_once(&qword_10081DF40, sub_1004E9C18);
    v43 = EdgeInsets.init(_all:)(*(double *)&qword_10086AD28);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v50 = v60;
    sub_10004F8C8(v36, v60, type metadata accessor for MirrorStatusView);
    v51 = v65;
    v52 = v50 + *(int *)(v65 + 36);
    *(_BYTE *)v52 = v40;
    *(double *)(v52 + 8) = v43;
    *(_QWORD *)(v52 + 16) = v45;
    *(_QWORD *)(v52 + 24) = v47;
    *(_QWORD *)(v52 + 32) = v49;
    *(_BYTE *)(v52 + 40) = 0;
    sub_100011F54(v36, type metadata accessor for MirrorStatusView);
    v53 = v62;
    sub_100045AD4(v50, v62, &qword_1008226E0);
    sub_10015188C(v53, (uint64_t)v9);
    swift_storeEnumTagMultiPayload(v9, v63, 1);
    v54 = sub_1000083D8(&qword_100831F40, type metadata accessor for MirrorView, (uint64_t)&unk_100641EF0);
    v55 = sub_100151808();
    _ConditionalContent<>.init(storage:)(v9, v64, v51, v54, v55);
    sub_10001BE90(v53, &qword_1008226E0);
    goto LABEL_15;
  }
  v58 = sub_100047110(&qword_1008226D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v66, 1, 1, v58);
}

uint64_t sub_100151578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for MapHostingMirrorView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));

  if (*(_QWORD *)(v0 + v4 + 48))
    swift_release(*(_QWORD *)(v6 + 56));
  v7 = v6 + *(int *)(v1 + 40);
  v8 = type metadata accessor for PresentationDetent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = sub_100047110(&qword_1008225B0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10015164C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapHostingMirrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MapHostingMirrorView(0) - 8) + 80);
  return sub_1001509BC(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_1001516CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008226A0;
  if (!qword_1008226A0)
  {
    v1 = sub_100007050(&qword_100822698);
    result = swift_getWitnessTable(&protocol conformance descriptor for NavigationView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1008226A0);
  }
  return result;
}

uint64_t sub_100151718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100150FE0(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_100151720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008226C0;
  if (!qword_1008226C0)
  {
    v1 = sub_100007050(&qword_1008226B8);
    sub_100151784();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1008226C0);
  }
  return result;
}

unint64_t sub_100151784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008226C8;
  if (!qword_1008226C8)
  {
    v1 = sub_100007050(&qword_1008226D0);
    sub_1000083D8(&qword_100831F40, type metadata accessor for MirrorView, (uint64_t)&unk_100641EF0);
    sub_100151808();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008226C8);
  }
  return result;
}

unint64_t sub_100151808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008226D8;
  if (!qword_1008226D8)
  {
    v1 = sub_100007050(&qword_1008226E0);
    sub_1000083D8(&qword_1008226E8, type metadata accessor for MirrorStatusView, (uint64_t)&unk_100639710);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008226D8);
  }
  return result;
}

uint64_t sub_10015188C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_1008226E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001518D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = qword_100822700;
  if (!qword_100822700)
  {
    v1 = sub_100007050(&qword_1008226A8);
    v2 = type metadata accessor for BreadcrumbMapView(255);
    v3 = sub_100007050(&qword_100822670);
    v4 = sub_1000083D8(&qword_100822678, (uint64_t (*)(uint64_t))&type metadata accessor for BreadcrumbMapView, (uint64_t)&protocol conformance descriptor for BreadcrumbMapView);
    v5 = sub_100007050(&qword_100822680);
    v6 = sub_100007050(&qword_100822688);
    v7 = sub_100007050(&qword_100822690);
    v12 = sub_100007050(&qword_100822698);
    v13 = sub_1001516CC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:selection:)>>, 1);
    v12 = v7;
    v13 = OpaqueTypeConformance2;
    v9 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.presentationBackgroundInteraction(_:)>>, 1);
    v12 = v6;
    v13 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.presentationContentInteraction(_:)>>, 1);
    v12 = v5;
    v13 = v10;
    v11 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.interactiveDismissDisabled(_:)>>, 1);
    v12 = v2;
    v13 = v3;
    v14 = v4;
    v15 = v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100822700);
  }
  return result;
}

uint64_t sub_100151A58(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v28 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  sub_10002FB54();
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  static DispatchTime.now()(v19);
  + infix(_:_:)(v15, a3);
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, v11);
  aBlock[4] = v28;
  v33 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002D0F8;
  aBlock[3] = &unk_1007883F8;
  v21 = _Block_copy(aBlock);
  v22 = v33;
  swift_retain(a2);
  v23 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10002FAC0();
  v25 = sub_100047110(&qword_100828C80);
  v26 = sub_10002FB08();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v5, v24);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v10, v7, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v11);
}

uint64_t sub_100151CA8(char a1, __n128 a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  if ((a1 & 1) != 0)
  {
    v3 = sub_10013F75C(0, 1, 1, _swiftEmptyArrayStorage);
    v5 = v3[2];
    v4 = v3[3];
    if (v5 >= v4 >> 1)
      v3 = sub_10013F75C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
    v3[2] = v5 + 1;
    v6 = &v3[2 * v5];
    v6[4] = 0x7373656E7469662ELL;
    v6[5] = 0xEA0000000000724ALL;
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  if ((a1 & 2) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
    v8 = v3[2];
    v7 = v3[3];
    if (v8 >= v7 >> 1)
      v3 = sub_10013F75C((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
    v3[2] = v8 + 1;
    v9 = &v3[2 * v8];
    v9[4] = 0xD000000000000015;
    v9[5] = 0x800000010068AF50;
    if ((a1 & 4) == 0)
    {
LABEL_8:
      if ((a1 & 8) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_8;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
  v11 = v3[2];
  v10 = v3[3];
  if (v11 >= v10 >> 1)
    v3 = sub_10013F75C((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
  v3[2] = v11 + 1;
  v12 = &v3[2 * v11];
  v12[4] = 0xD000000000000016;
  v12[5] = 0x800000010068AF30;
  if ((a1 & 8) == 0)
  {
LABEL_9:
    if ((a1 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_24:
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
  v14 = v3[2];
  v13 = v3[3];
  if (v14 >= v13 >> 1)
    v3 = sub_10013F75C((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
  v3[2] = v14 + 1;
  v15 = &v3[2 * v14];
  v15[4] = 0x6C61646E6174732ELL;
  v15[5] = 0xEB00000000656E6FLL;
  if ((a1 & 0x10) == 0)
  {
LABEL_10:
    if ((a1 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
  v17 = v3[2];
  v16 = v3[3];
  if (v17 >= v16 >> 1)
    v3 = sub_10013F75C((_QWORD *)(v16 > 1), v17 + 1, 1, v3);
  v3[2] = v17 + 1;
  v18 = &v3[2 * v17];
  v18[4] = 0xD000000000000010;
  v18[5] = 0x800000010068AF10;
  if ((a1 & 0x20) == 0)
  {
LABEL_11:
    if ((a1 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_34:
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
  v20 = v3[2];
  v19 = v3[3];
  if (v20 >= v19 >> 1)
    v3 = sub_10013F75C((_QWORD *)(v19 > 1), v20 + 1, 1, v3);
  v3[2] = v20 + 1;
  v21 = &v3[2 * v20];
  v21[4] = 0xD000000000000010;
  v21[5] = 0x800000010068AEF0;
  if ((a1 & 0x40) == 0)
  {
LABEL_12:
    if ((a1 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_44;
  }
LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
  v23 = v3[2];
  v22 = v3[3];
  if (v23 >= v22 >> 1)
    v3 = sub_10013F75C((_QWORD *)(v22 > 1), v23 + 1, 1, v3);
  v3[2] = v23 + 1;
  v24 = &v3[2 * v23];
  v24[4] = 0x68636C656568772ELL;
  v24[5] = 0xEB00000000726961;
  if (a1 < 0)
  {
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_10013F75C(0, v3[2] + 1, 1, v3);
    v26 = v3[2];
    v25 = v3[3];
    if (v26 >= v25 >> 1)
      v3 = sub_10013F75C((_QWORD *)(v25 > 1), v26 + 1, 1, v3);
    v3[2] = v26 + 1;
    v27 = &v3[2 * v26];
    v27[4] = 0xD000000000000018;
    v27[5] = 0x800000010068AED0;
  }
LABEL_49:
  v28 = Array.description.getter(a2);
  swift_bridgeObjectRelease(v3);
  return v28;
}

uint64_t sub_100152128(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)result == 0x4A7373656E746966 && v4 == 0xE900000000000072;
  if (v5
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)result, v4, 0x4A7373656E746966, 0xE900000000000072, 0), (result & 1) != 0))
  {
    if ((*a2 & 1) == 0)
      *a2 |= 1uLL;
  }
  if (v3 == 0xD000000000000014 && v4 == 0x8000000100688E30
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0xD000000000000014, 0x8000000100688E30, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 2) == 0)
      *a2 |= 2uLL;
  }
  if (v3 == 0xD000000000000015 && v4 == 0x800000010068AFB0
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0xD000000000000015, 0x800000010068AFB0, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 4) == 0)
      *a2 |= 4uLL;
  }
  if (v3 == 0x6F6C61646E617473 && v4 == 0xEA0000000000656ELL
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0x6F6C61646E617473, 0xEA0000000000656ELL, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 8) == 0)
      *a2 |= 8uLL;
  }
  if (v3 == 0x764173646E657274 && v4 == 0xEF656C62616C6961
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0x764173646E657274, 0xEF656C62616C6961, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 0x10) == 0)
      *a2 |= 0x10uLL;
  }
  if (v3 == 0x6E4F73646E657274 && v4 == 0xEF64656472616F62
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0x6E4F73646E657274, 0xEF64656472616F62, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 0x20) == 0)
      *a2 |= 0x20uLL;
  }
  if (v3 == 0x6168636C65656877 && v4 == 0xEA00000000007269
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0x6168636C65656877, 0xEA00000000007269, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 0x40) == 0)
      *a2 |= 0x40uLL;
  }
  if (v3 == 0xD000000000000017 && v4 == 0x800000010068AFD0
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0xD000000000000017, 0x800000010068AFD0, 0),
        (result & 1) != 0))
  {
    if ((*a2 & 0x80) == 0)
      *a2 |= 0x80uLL;
  }
  return result;
}

uint64_t sub_100152460(__n128 a1)
{
  _QWORD *v1;

  return sub_100151CA8(*v1, a1);
}

void sub_100152468(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_100153DC0(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

uint64_t sub_1001524A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

id sub_1001524B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v17;

  v13 = &v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_delegate];
  *((_QWORD *)v13 + 1) = 0;
  swift_unknownObjectWeakInit(v13, 0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_notificationCenterObservers] = _swiftEmptyArrayStorage;
  *(_DWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken] = -1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_fetchRequests] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_activityDataProvider] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_fitnessPlusSubscriptionProvider] = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_healthStore] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_seymourAvailabilityManager] = a4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_trendsAvailabilityManager] = a5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_wheelchairCache] = a6;
  v14 = sub_100047110(&qword_1008227A8);
  v15 = swift_allocObject(v14, 32, 7);
  *(_DWORD *)(v15 + 28) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_BYTE *)(v15 + 24) = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState] = v15;
  v17.receiver = v6;
  v17.super_class = (Class)type metadata accessor for SummaryUserProfileProvider();
  return objc_msgSendSuper2(&v17, "init");
}

id sub_1001525E4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  int *v12;
  objc_super v14;
  _QWORD v15[3];
  uint64_t v16;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_notificationCenterObservers];
  v2 = (void *)objc_opt_self(NSNotificationCenter);
  v3 = objc_msgSend(v2, "defaultCenter", swift_bridgeObjectRetain(v1).n128_f64[0]);
  v4 = v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    v6 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    v7 = v4;
    do
    {
      sub_10003E9BC(v6, (uint64_t)v15);
      v8 = v16;
      v9 = sub_100016804(v15, v16);
      v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v8);
      objc_msgSend(v7, "removeObserver:", v10);
      swift_unknownObjectRelease(v10);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v15);
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n(v1, 2);

  }
  else
  {

    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v1).n128_u64[0];
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_activityDataProvider]+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener)+ OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers), "removeObject:", v0, v11);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_wheelchairCache], "removeObserver:", v0);
  v12 = (int *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken];
  swift_beginAccess(&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken], v15, 0, 0);
  notify_cancel(*v12);
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for SummaryUserProfileProvider();
  return objc_msgSendSuper2(&v14, "dealloc");
}

void sub_100152860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  CHWorkoutDetailHeartRateTableViewCell *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __n128 v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  int *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  os_log_type_t v40;
  void *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  CHWorkoutDetailHeartRateTableViewCell *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  NSString v59;
  id v60;
  NSString v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *log;
  id v67;
  uint64_t v68;
  _OWORD v69[2];
  __int128 aBlock;
  __int128 v71;
  void (*v72)(uint64_t);
  uint64_t v73;

  v1 = v0;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_activityDataProvider)+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener)+ OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers), "addObject:", v0);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_wheelchairCache), "registerObserver:", v0);
  if (qword_10081D5F0 != -1)
    swift_once(&qword_10081D5F0, sub_10004E29C);
  v2 = qword_100869F10;
  v3 = (void *)objc_opt_self(NSNotificationCenter);
  v4 = objc_msgSend(v3, "defaultCenter");
  v5 = (void *)objc_opt_self(NSOperationQueue);
  v6 = objc_msgSend(v5, "mainQueue");
  v7 = swift_allocObject(&unk_1007884F8, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16, v1);
  v72 = sub_1001540B8;
  v73 = v7;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v71 = sub_1000398D4;
  *((_QWORD *)&v71 + 1) = &unk_100788510;
  v8 = _Block_copy(&aBlock);
  v9 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", v2, 0, v6, v8, swift_release(v73).n128_f64[0]);
  _Block_release(v8);

  if (qword_10081D658 != -1)
    swift_once(&qword_10081D658, sub_10019B430);
  v10 = qword_100869F98;
  v11 = objc_msgSend(v3, "defaultCenter");
  v12 = objc_msgSend(v5, "mainQueue");
  v13 = swift_allocObject(&unk_1007884F8, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  v72 = sub_1001540DC;
  v73 = v13;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v71 = sub_1000398D4;
  *((_QWORD *)&v71 + 1) = &unk_100788538;
  v14 = _Block_copy(&aBlock);
  v15 = objc_msgSend(v11, "addObserverForName:object:queue:usingBlock:", v10, 0, v12, v14, swift_release(v73).n128_f64[0]);
  _Block_release(v14);

  if (qword_10081DE28 != -1)
    swift_once(&qword_10081DE28, sub_10004E610);
  v16 = qword_10086AC40;
  v17 = objc_msgSend(v3, "defaultCenter");
  v18 = objc_msgSend(v5, "mainQueue");
  v19 = swift_allocObject(&unk_1007884F8, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v1);
  v72 = sub_100154100;
  v73 = v19;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v71 = sub_1000398D4;
  *((_QWORD *)&v71 + 1) = &unk_100788560;
  v20 = _Block_copy(&aBlock);
  v21 = objc_msgSend(v17, "addObserverForName:object:queue:usingBlock:", v16, 0, v18, v20, swift_release(v73).n128_f64[0]);
  _Block_release(v20);

  v22 = sub_100047110(&qword_10082CEC0);
  v23 = swift_allocObject(v22, 128, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100624A40;
  *(_QWORD *)(v23 + 56) = swift_getObjectType(v9);
  *(_QWORD *)(v23 + 32) = v9;
  *(_QWORD *)(v23 + 88) = swift_getObjectType(v15);
  *(_QWORD *)(v23 + 64) = v15;
  *(_QWORD *)(v23 + 120) = swift_getObjectType(v21);
  *(_QWORD *)(v23 + 96) = v21;
  v24 = *(CHWorkoutDetailHeartRateTableViewCell **)(v1
                                                  + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_notificationCenterObservers);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_notificationCenterObservers) = v23;
  swift_unknownObjectRetain(v9);
  swift_unknownObjectRetain(v15);
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  sub_10002FB54();
  v33 = static OS_dispatch_queue.main.getter(v32);
  v34 = swift_allocObject(&unk_1007884F8, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v1);
  v72 = sub_100154124;
  v73 = v34;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v71 = sub_1003B91BC;
  *((_QWORD *)&v71 + 1) = &unk_100788588;
  v35 = _Block_copy(&aBlock);
  swift_release(v73);
  v36 = (int *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken, &aBlock, 33, 0);
  notify_register_dispatch("com.apple.Fitness.ForceSummaryUserProfileUpdate", v36, v33, v35);
  swift_endAccess(&aBlock);
  _Block_release(v35);

  v37 = sub_100153DF8();
  if ((v38 & 1) != 0)
  {
    v57 = v9;
    v58 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v59 = String._bridgeToObjectiveC()();
    v60 = objc_msgSend(v58, "objectForKey:", v59);

    if (v60)
    {
      _bridgeAnyObjectToAny(_:)(&aBlock, v60);
      swift_unknownObjectRelease(v60);
      sub_1000F996C((uint64_t)&aBlock);
      v61 = String._bridgeToObjectiveC()();
      v62 = objc_msgSend(v58, "valueForKey:", v61);

      if (v62)
      {
        _bridgeAnyObjectToAny(_:)(v69, v62);
        swift_unknownObjectRelease(v62);
      }
      else
      {
        memset(v69, 0, sizeof(v69));
      }
      sub_100025D58((uint64_t)v69, (uint64_t)&aBlock);
      if (*((_QWORD *)&v71 + 1))
      {
        if ((swift_dynamicCast(&v68, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        {
          v63 = v68;
          v64 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState);
          os_unfair_lock_lock((os_unfair_lock_t)(v64 + 28));
          *(_QWORD *)(v64 + 16) = v63;
          *(_BYTE *)(v64 + 24) = 0;
          os_unfair_lock_unlock((os_unfair_lock_t)(v64 + 28));
          swift_unknownObjectRelease(v57);
          swift_unknownObjectRelease(v15);
          swift_unknownObjectRelease(v21);

          return;
        }
        goto LABEL_20;
      }
    }
    else
    {
      aBlock = 0u;
      v71 = 0u;
    }
    sub_1000F996C((uint64_t)&aBlock);
LABEL_20:
    v65 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState);
    os_unfair_lock_lock((os_unfair_lock_t)(v65 + 28));
    *(_QWORD *)(v65 + 16) = 1;
    *(_BYTE *)(v65 + 24) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 28));
    sub_1001533E8();
    swift_unknownObjectRelease(v57);
    swift_unknownObjectRelease(v15);
    swift_unknownObjectRelease(v21);

    return;
  }
  v39 = v37;
  v67 = v9;
  v40 = static os_log_type_t.default.getter(v37);
  v41 = (void *)HKLogActivity;
  v42 = v40;
  if (os_log_type_enabled(HKLogActivity, v40))
  {
    log = v41;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v44;
    v45.n128_u64[0] = 136315138;
    *(_DWORD *)v43 = 136315138;
    v46 = sub_100151CA8(v39, v45);
    v48 = (CHWorkoutDetailHeartRateTableViewCell *)v47;
    *(_QWORD *)&v69[0] = sub_10003E8EC(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, (char *)v69 + 8, v43 + 4);
    swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
    _os_log_impl((void *)&_mh_execute_header, log, v42, "[SummaryUserProfileProvider] using forced profile %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  v56 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState);
  os_unfair_lock_lock((os_unfair_lock_t)(v56 + 28));
  *(_QWORD *)(v56 + 16) = v39;
  *(_BYTE *)(v56 + 24) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v56 + 28));
  swift_unknownObjectRelease(v67);
  swift_unknownObjectRelease(v15);
  swift_unknownObjectRelease(v21);
}

void sub_1001530C4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t Strong;
  void *v10;
  _BYTE v11[24];

  v6 = a2 + 16;
  v7 = static os_log_type_t.default.getter(a1);
  v8 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, a3, a4, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v6, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v10 = (void *)Strong;
    sub_1001533E8();

  }
}

void sub_100153174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "[SummaryUserProfileProvider] did receive forceSummaryUserProfileRefreshNotification notification", 96, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v2, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_1001533E8();

  }
}

uint64_t sub_100153218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v11;
  _BYTE v13[24];

  v1 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_seymourAvailabilityManager)
     + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess(v4, v13, 0, 0);
  sub_10002AD54(v4, (uint64_t)v3);
  v5 = type metadata accessor for ContentAvailability(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  v6 = sub_100154058((uint64_t)v3);
  if ((_DWORD)v4 == 1)
  {
    v7 = static os_log_type_t.default.getter(v6);
    v8 = HKLogActivity;
    v9 = "[SummaryUserProfileProvider] profile not loaded, waiting on fitness plus availability";
LABEL_5:
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, v9, 85, 2, _swiftEmptyArrayStorage);
    goto LABEL_6;
  }
  if (*(_BYTE *)(*(_QWORD *)(v0
                            + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_fitnessPlusSubscriptionProvider)
                + 80) == 2)
  {
    v7 = static os_log_type_t.default.getter(v6);
    v8 = HKLogActivity;
    v9 = "[SummaryUserProfileProvider] profile not loaded, waiting on fitness plus subscription";
    goto LABEL_5;
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_trendsAvailabilityManager)
                 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability))
    return 1;
  v11 = static os_log_type_t.default.getter(v6);
  v8 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v8, "[SummaryUserProfileProvider] profile not loaded, waiting on trends availability", 79, 2, _swiftEmptyArrayStorage);
LABEL_6:

  return 0;
}

uint64_t sub_1001533E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  unsigned __int8 v45;
  id v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  char v50;
  NSObject *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Class isa;
  NSString v65;
  uint64_t Strong;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72[3];
  uint64_t v73;
  uint64_t v74;

  v1 = v0;
  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v68 - v11;
  v13 = sub_100153DF8();
  if ((v14 & 1) == 0)
  {
    v15 = v13;
    v16 = static os_log_type_t.default.getter(v13);
    v17 = (void *)HKLogActivity;
    v18 = v16;
    if (os_log_type_enabled(HKLogActivity, v16))
    {
      v19 = v17;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v72[0] = v21;
      v22.n128_u64[0] = 136315138;
      *(_DWORD *)v20 = 136315138;
      v23 = sub_100151CA8(v15, v22);
      v25 = v24;
      v73 = sub_10003E8EC(v23, v24, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v20 + 4);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v19, v18, "[SummaryUserProfileProvider] updated forced user profile %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState);
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 28));
    *(_QWORD *)(v26 + 16) = v15;
    *(_BYTE *)(v26 + 24) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 28));
    result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_delegate);
    if (result)
    {
      v28 = result;
      sub_1004DE00C(v15);
      return swift_unknownObjectRelease(v28);
    }
    return result;
  }
  result = sub_100153218();
  if ((result & 1) == 0)
    return result;
  v73 = 0;
  v29 = static Calendar.current.getter(result);
  Date.init()(v29);
  Calendar.startOfDay(for:)(v10);
  v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v10, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v31 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_activityDataProvider)+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache), "activitySummaryForCacheIndex:", sub_1000237E8());
  if (v31)
  {
    v32 = v31;
    v33 = v73;
    if ((v73 & 0x80) == 0)
    {
      v33 = v73 | 0x80;
      v73 |= 0x80uLL;
    }
    v34 = objc_msgSend(v31, "activityMoveMode");
    if ((v33 & 1) == 0 && v34 == (id)2)
    {
      v33 |= 1uLL;
      v73 = v33;
    }
    v35 = objc_msgSend(v32, "_isStandalonePhoneSummary");

    if ((v33 & 8) != 0 || !v35)
      goto LABEL_33;
    v36 = v33 | 8;
  }
  else
  {
    v37 = FIExperienceTypeWithHealthStore(*(_QWORD *)(v0
                                                    + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_healthStore));
    if (v37)
    {
      v38 = (v73 & 1) != 0 || v37 == 1;
      v39 = !v38;
      if ((v73 & 0x80) == 0 || v39)
      {
        v38 = !v39;
        v40 = 128;
        if (!v38)
          v40 = 129;
        v73 |= v40;
      }
    }
    result = (uint64_t)objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v41 = (void *)result;
    v42 = objc_msgSend((id)result, "fitnessMode");

    if (v42 != (id)2 || (v73 & 8) != 0)
      goto LABEL_33;
    v36 = v73 | 8;
  }
  v73 = v36;
LABEL_33:
  if ((sub_10002AAFC() & 1) != 0 && (v73 & 2) == 0)
    v73 |= 2uLL;
  if ((*(_BYTE *)(*(_QWORD *)(v1
                             + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_fitnessPlusSubscriptionProvider)
                 + 80) & 1) != 0
    && (v73 & 4) == 0)
  {
    v73 |= 4uLL;
  }
  v43 = (void *)objc_opt_self(NSUserDefaults);
  v44 = objc_msgSend(v43, "standardUserDefaults");
  v45 = objc_msgSend(v44, "BOOLForKey:", CFSTR("ActivityDidDisplayTrendsOnboarding"));

  if ((v45 & 1) != 0)
    goto LABEL_43;
  if (qword_10081E0B0 != -1)
    swift_once(&qword_10081E0B0, sub_10004F61C);
  if (byte_10083D1A0 == 1)
  {
LABEL_43:
    if ((v73 & 0x20) == 0)
      v73 |= 0x20uLL;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_trendsAvailabilityManager)
                 + OBJC_IVAR____TtC10FitnessApp25TrendsAvailabilityManager_trendsAvailability) >= 2uLL
    && (v73 & 0x10) == 0)
  {
    v73 |= 0x10uLL;
  }
  v46 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_wheelchairCache), "isWheelchairUser");
  if ((_DWORD)v46 && (v73 & 0x40) == 0)
    v73 |= 0x40uLL;
  v47 = static os_log_type_t.default.getter(v46);
  v48 = (void *)HKLogActivity;
  v49 = v47;
  if (os_log_type_enabled(HKLogActivity, v47))
  {
    v69 = v43;
    v50 = v73;
    v51 = v48;
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v70 = v30;
    v54 = v53;
    v72[0] = v53;
    v55.n128_u64[0] = 136315138;
    *(_DWORD *)v52 = 136315138;
    v56 = sub_100151CA8(v50, v55);
    v58 = v57;
    v71 = sub_10003E8EC(v56, v57, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v52 + 4);
    v59 = v58;
    v43 = v69;
    swift_bridgeObjectRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v51, v49, "[SummaryUserProfileProvider] Updated user profile %s", v52, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    v60 = v54;
    v30 = v70;
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v52, -1, -1);

  }
  swift_beginAccess(&v73, v72, 0, 0);
  v61 = v73;
  v62 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_protectedState);
  os_unfair_lock_lock((os_unfair_lock_t)(v62 + 28));
  *(_QWORD *)(v62 + 16) = v61;
  *(_BYTE *)(v62 + 24) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v62 + 28));
  v63 = objc_msgSend(v43, "standardUserDefaults");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v65 = String._bridgeToObjectiveC()();
  objc_msgSend(v63, "setValue:forKey:", isa, v65);

  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_delegate);
  if (Strong)
  {
    v67 = Strong;
    sub_1004DE00C(v61);
    swift_unknownObjectRelease(v67);
  }
  return ((uint64_t (*)(char *, uint64_t))v30)(v12, v6);
}

uint64_t type metadata accessor for SummaryUserProfileProvider()
{
  return objc_opt_self(_TtC10FitnessApp26SummaryUserProfileProvider);
}

uint64_t sub_100153B2C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = static os_log_type_t.default.getter(a1);
  v2 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v2, "[SummaryUserProfileProvider] summaries changed", 46, 2, _swiftEmptyArrayStorage);

  return sub_1001533E8();
}

uint64_t getEnumTagSinglePayload for MetricDataProviderTimeScale(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricDataProviderTimeScale(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100153C40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100153C5C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SummaryUserProfileProvider.State()
{
  return &type metadata for SummaryUserProfileProvider.State;
}

ValueMetadata *type metadata accessor for SummaryUserProfile()
{
  return &type metadata for SummaryUserProfile;
}

unint64_t sub_100153CA0()
{
  unint64_t result;

  result = qword_100822788;
  if (!qword_100822788)
  {
    result = swift_getWitnessTable(&unk_100626A64, &type metadata for SummaryUserProfile);
    atomic_store(result, (unint64_t *)&qword_100822788);
  }
  return result;
}

unint64_t sub_100153CE8()
{
  unint64_t result;

  result = qword_100822790;
  if (!qword_100822790)
  {
    result = swift_getWitnessTable(&unk_100626A34, &type metadata for SummaryUserProfile);
    atomic_store(result, (unint64_t *)&qword_100822790);
  }
  return result;
}

unint64_t sub_100153D30()
{
  unint64_t result;

  result = qword_100822798;
  if (!qword_100822798)
  {
    result = swift_getWitnessTable(&unk_100626A8C, &type metadata for SummaryUserProfile);
    atomic_store(result, (unint64_t *)&qword_100822798);
  }
  return result;
}

unint64_t sub_100153D78()
{
  unint64_t result;

  result = qword_1008227A0;
  if (!qword_1008227A0)
  {
    result = swift_getWitnessTable(&unk_100626AC4, &type metadata for SummaryUserProfile);
    atomic_store(result, (unint64_t *)&qword_1008227A0);
  }
  return result;
}

uint64_t sub_100153DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100153DF8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD v11[4];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v10, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100025D58((uint64_t)v10, (uint64_t)v11);
  if (!v11[3])
  {

    sub_1000F996C((uint64_t)v11);
    return 0;
  }
  v3 = sub_100047110((uint64_t *)&unk_10081E160);
  if ((swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
  {

    return 0;
  }
  v4 = v9;
  *(_QWORD *)&v10[0] = 0;
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v9 + 40);
    do
    {
      v7 = *v6;
      v11[0] = *(v6 - 1);
      v11[1] = v7;
      sub_100152128((uint64_t)v11, v10);
      v6 += 2;
      --v5;
    }
    while (v5);

    swift_bridgeObjectRelease(v4);
    return *(_QWORD *)&v10[0];
  }
  else
  {

    swift_bridgeObjectRelease(v4);
    return 0;
  }
}

uint64_t sub_100153F7C(uint64_t a1)
{
  char v1;
  os_log_type_t v2;
  void *v3;
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;
  int v8;
  uint64_t v9;

  v1 = a1;
  v2 = static os_log_type_t.default.getter(a1);
  v3 = (void *)HKLogActivity;
  v4 = v2;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    v5 = v3;
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v8 = v1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "[SummaryUserProfileProvider] wheelchair state changed: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);

  }
  return sub_1001533E8();
}

uint64_t sub_100154058(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeymourAvailabilityManager.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100154094()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001540B8(uint64_t a1)
{
  uint64_t v1;

  sub_1001530C4(a1, v1, "[SummaryUserProfileProvider] did receive seymourAvailabilityDidChangeNotification notification", 94);
}

void sub_1001540DC(uint64_t a1)
{
  uint64_t v1;

  sub_1001530C4(a1, v1, "[SummaryUserProfileProvider] did receive fitnessPlusSubscriptionDidChangeNotification notification", 98);
}

void sub_100154100(uint64_t a1)
{
  uint64_t v1;

  sub_1001530C4(a1, v1, "[SummaryUserProfileProvider] did receive trendsAvailabilityDidChangeNotification notification", 93);
}

void sub_100154124(uint64_t a1)
{
  uint64_t v1;

  sub_100153174(a1, v1);
}

uint64_t sub_100154144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;

  v1 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v1, 88, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100626C00;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  v6 = objc_msgSend(v5, "bottomAnchor");
  v7 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v6, 17.0);

  *(_QWORD *)(v2 + 32) = v7;
  v8 = objc_msgSend(v3, "leadingAnchor");
  v9 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v10 = objc_msgSend(v9, "leadingAnchor");
  v11 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v10, *(double *)&qword_1008227C0);

  *(_QWORD *)(v2 + 40) = v11;
  v12 = objc_msgSend(v3, "bottomAnchor");
  v13 = objc_msgSend(v9, "bottomAnchor");
  v14 = objc_msgSend(v12, "constraintLessThanOrEqualToAnchor:constant:", v13, -*(double *)&qword_1008227C8);

  *(_QWORD *)(v2 + 48) = v14;
  v15 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
  v16 = objc_msgSend(v15, "topAnchor");
  v17 = objc_msgSend(v5, "bottomAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, 17.0);

  *(_QWORD *)(v2 + 56) = v18;
  v19 = objc_msgSend(v15, "leadingAnchor");
  v20 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "leadingAnchor"));
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  *(_QWORD *)(v2 + 64) = v21;
  v22 = objc_msgSend(v15, "bottomAnchor");
  v23 = objc_msgSend(v9, "bottomAnchor");
  v24 = objc_msgSend(v22, "constraintLessThanOrEqualToAnchor:constant:", v23, -*(double *)&qword_1008227C8);

  *(_QWORD *)(v2 + 72) = v24;
  v25 = objc_msgSend(v15, "trailingAnchor");
  v26 = objc_msgSend(v9, "trailingAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, -*(double *)&qword_1008227C0);

  *(_QWORD *)(v2 + 80) = v27;
  specialized Array._endMutation()(v28);
  return v2;
}

uint64_t sub_1001544BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;

  v1 = sub_100154144();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  v3 = objc_msgSend(v2, "topAnchor");
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView), "bottomAnchor"));
  v5 = objc_msgSend(v3, "constraintGreaterThanOrEqualToAnchor:constant:", v4, 9.0);

  v6 = objc_msgSend(v2, "topAnchor");
  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "bottomAnchor"));
  v8 = objc_msgSend(v6, "constraintGreaterThanOrEqualToAnchor:constant:", v7, 9.0);

  v9 = objc_msgSend(v2, "leadingAnchor");
  v10 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v11 = objc_msgSend(v10, "leadingAnchor");
  v12 = objc_msgSend(v9, "constraintEqualToAnchor:", v11);

  v13 = objc_msgSend(v2, "heightAnchor");
  v14 = objc_msgSend(v13, "constraintEqualToConstant:", 2.0);

  v15 = (char *)objc_msgSend(v2, "trailingAnchor");
  v16 = objc_msgSend(v10, "trailingAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v40 = v1;
    else
      v40 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    v42 = __OFADD__(v41, 5);
    v20 = v41 + 5;
    if (!v42)
    {
LABEL_3:
      v21 = sub_10003561C(v20, 1);
      specialized Array._endMutation()(v21);
      v5 = v5;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v15 = *(char **)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v15 < v19 >> 1)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v18 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    v20 = v18 + 5;
    if (!__OFADD__(v18, 5))
      goto LABEL_3;
  }
  __break(1u);
LABEL_19:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v15 + 1, 1);
LABEL_4:
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v5);
  specialized Array._endMutation()(v22);
  v23 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v25 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v24 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
  specialized Array._endMutation()(v26);
  v27 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
  v29 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v28 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v29 >= v28 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
  v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
  specialized Array._endMutation()(v30);
  v31 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v33 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v32 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v33 >= v32 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
  specialized Array._endMutation()(v34);
  v35 = v17;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v36 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
  specialized Array._endMutation()(v38);
  swift_bridgeObjectRelease(v1);

  return v1;
}

uint64_t sub_100154918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v55;
  _BYTE v56[168];

  v55 = sub_100154144();
  v1 = sub_100047110((uint64_t *)&unk_100828340);
  inited = swift_initStackObject(v1, v56);
  *(_OWORD *)(inited + 16) = xmmword_100626C10;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView);
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair), "bottomAnchor"));
  v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -3.0);

  *(_QWORD *)(inited + 32) = v6;
  v7 = objc_msgSend(v3, "leadingAnchor");
  v8 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v9 = objc_msgSend(v8, "leadingAnchor");
  v10 = objc_msgSend(v7, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(inited + 40) = v10;
  v11 = objc_msgSend(v3, "heightAnchor");
  v12 = objc_msgSend(v11, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(inited + 48) = v12;
  v13 = objc_msgSend(v3, "trailingAnchor");
  v14 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  v15 = objc_msgSend(v14, "leadingAnchor");
  v16 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v15, -20.0);

  *(_QWORD *)(inited + 56) = v16;
  v17 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView);
  v18 = objc_msgSend(v17, "topAnchor");
  v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair), "bottomAnchor"));
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, -3.0);

  *(_QWORD *)(inited + 64) = v20;
  v21 = objc_msgSend(v17, "leadingAnchor");
  v22 = objc_msgSend(v8, "leadingAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(inited + 72) = v23;
  v24 = objc_msgSend(v17, "heightAnchor");
  v25 = objc_msgSend(v24, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(inited + 80) = v25;
  v26 = objc_msgSend(v17, "trailingAnchor");
  v27 = objc_msgSend(v14, "leadingAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v27, -20.0);

  *(_QWORD *)(inited + 88) = v28;
  v29 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  v30 = objc_msgSend(v29, "topAnchor");
  v31 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair), "bottomAnchor"));
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v31, -3.0);

  *(_QWORD *)(inited + 96) = v32;
  v33 = objc_msgSend(v29, "leadingAnchor");
  v34 = objc_msgSend(v8, "leadingAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(inited + 104) = v35;
  v36 = objc_msgSend(v29, "heightAnchor");
  v37 = objc_msgSend(v36, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(inited + 112) = v37;
  v38 = objc_msgSend(v29, "trailingAnchor");
  v39 = objc_msgSend(v14, "leadingAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:constant:", v39, -20.0);

  *(_QWORD *)(inited + 120) = v40;
  v41 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView);
  v42 = objc_msgSend(v41, "topAnchor");
  v43 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair), "bottomAnchor"));
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, -3.0);

  *(_QWORD *)(inited + 128) = v44;
  v45 = objc_msgSend(v41, "leadingAnchor");
  v46 = objc_msgSend(v8, "leadingAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:", v46);

  *(_QWORD *)(inited + 136) = v47;
  v48 = objc_msgSend(v41, "heightAnchor");
  v49 = objc_msgSend(v48, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(inited + 144) = v49;
  v50 = objc_msgSend(v41, "trailingAnchor");
  v51 = objc_msgSend(v8, "trailingAnchor");
  v52 = objc_msgSend(v50, "constraintEqualToAnchor:", v51);

  *(_QWORD *)(inited + 152) = v52;
  specialized Array._endMutation()(v53);
  sub_100032DE4(inited);
  return v55;
}

uint64_t sub_100154F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;

  v1 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v1, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100624C80;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView);
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair), "bottomAnchor"));
  v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -3.0);

  *(_QWORD *)(v2 + 32) = v6;
  v7 = objc_msgSend(v3, "leadingAnchor");
  v8 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v9 = objc_msgSend(v8, "leadingAnchor");
  v10 = objc_msgSend(v7, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v2 + 40) = v10;
  v11 = objc_msgSend(v3, "heightAnchor");
  v12 = objc_msgSend(v11, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(v2 + 48) = v12;
  v13 = objc_msgSend(v3, "trailingAnchor");
  v14 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  v15 = objc_msgSend(v14, "leadingAnchor");
  v16 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v15, -20.0);

  *(_QWORD *)(v2 + 56) = v16;
  v17 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView);
  v18 = objc_msgSend(v17, "topAnchor");
  v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair), "bottomAnchor"));
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, -3.0);

  *(_QWORD *)(v2 + 64) = v20;
  v21 = objc_msgSend(v17, "leadingAnchor");
  v22 = objc_msgSend(v8, "leadingAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(v2 + 72) = v23;
  v24 = objc_msgSend(v17, "heightAnchor");
  v25 = objc_msgSend(v24, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(v2 + 80) = v25;
  v26 = objc_msgSend(v17, "trailingAnchor");
  v27 = objc_msgSend(v14, "leadingAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v27, -20.0);

  *(_QWORD *)(v2 + 88) = v28;
  specialized Array._endMutation()(v29);
  return v2;
}

void sub_100155318(void *a1, int a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  uint64_t v5;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  void *v64;
  char **v65;
  id v66;
  char *v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  double v76;
  void *v77;
  double v78;
  uint64_t v79;
  NSString v80;
  unsigned int v81;
  double v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  id v96;
  unsigned __int8 v97;
  void *v98;

  v8 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  if (a5 == 2)
    v9 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "hk_configureWithActivitySummary:animated:", a1, 1);
  else
    v9 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "hk_configureWithActivitySummary:isStandaloneFallback:animated:completion:", a1, a5 & 1, 1, 0);
  v10 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager);
  if (!v10)
  {
    v12 = static os_log_type_t.error.getter(v9);
    v13 = (void *)HKLogActivity;
    v14 = sub_100047110((uint64_t *)&unk_100827460);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100622F90;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_100038CF8();
    *(_QWORD *)(v15 + 32) = 0xD000000000000059;
    *(_QWORD *)(v15 + 40) = 0x800000010068B4E0;
    v16 = v13;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v16, "%@ failed to load formatting manager", 36, 2, v15);

    swift_bridgeObjectRelease(v15);
    return;
  }
  v11 = v10;
  if (a1)
  {
    objc_msgSend(a1, "_isStandalonePhoneSummary");
    sub_10003AA88();
    a4 = objc_msgSend(a1, "paused");
  }
  else
  {
    sub_10003AA88();
  }
  v17 = objc_msgSend(v8, "ringGroup");
  objc_msgSend(v17, "setIsPaused:", a4 & 1);

  v97 = a4;
  v94 = v11;
  if (!a1)
    goto LABEL_14;
  v18 = a1;
  if (objc_msgSend(v18, "activityMoveMode") == (id)2)
  {
    if ((a4 & 1) != 0)
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v20 = objc_msgSend(v18, "appleMoveTime");
      v19 = objc_msgSend(v18, "appleMoveTimeGoal");
    }
    v22 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
    v23 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    v24 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v22
                                                                + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
    if (!v24)
      goto LABEL_46;
    v25 = v24;
    v26 = sub_1001B6454(v20, v19, v24);

    v27 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
    v28 = *(void **)(v22 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
    *(_QWORD *)(v22 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v26;
    v29 = v26;
    v30 = v20;
    v31 = v29;

    v32 = *(void **)(v22 + v23);
    objc_msgSend(v32, "setText:", 0);
    objc_msgSend(v32, "setAttributedText:", *(_QWORD *)(v22 + v27));

    goto LABEL_21;
  }

  if ((a4 & 1) == 0)
  {
    v21 = objc_msgSend(v18, "activeEnergyBurned");
    v19 = objc_msgSend(v18, "activeEnergyBurnedGoal");
  }
  else
  {
LABEL_14:
    v19 = 0;
    v21 = 0;
  }
  v33 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
  v34 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  v35 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v33
                                                              + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
  if (!v35)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v36 = v35;
  v37 = sub_1001B66F8(v21, v19, v11, v35);

  v38 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v39 = *(void **)(v33 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v37;
  v40 = v37;
  v30 = v21;
  v31 = v40;

  v41 = *(void **)(v33 + v34);
  objc_msgSend(v41, "setText:", 0);
  objc_msgSend(v41, "setAttributedText:", *(_QWORD *)(v33 + v38));
LABEL_21:

  if ((a1 == 0) | v97 & 1)
  {
    v42 = 0;
    v96 = 0;
  }
  else
  {
    v96 = objc_msgSend(a1, "appleExerciseTime");
    v42 = objc_msgSend(a1, "appleExerciseTimeGoal");
  }
  v43 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
  v44 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  v45 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v43
                                                              + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
  if (!v45)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v46 = v45;
  v93 = v42;
  v47 = sub_1001B6454(v96, v42, v45);

  v48 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v49 = *(void **)(v43 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v43 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v47;
  v50 = v47;

  v51 = *(void **)(v43 + v44);
  objc_msgSend(v51, "setText:", 0);
  objc_msgSend(v51, "setAttributedText:", *(_QWORD *)(v43 + v48));

  v52 = 0;
  v53 = 0;
  if (!((a1 == 0) | v97 & 1))
  {
    v53 = objc_msgSend(a1, "appleStandHours");
    v52 = objc_msgSend(a1, "appleStandHoursGoal");
  }
  v54 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  v55 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  v56 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v54
                                                              + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
  if (!v56)
    goto LABEL_42;
  v57 = v56;
  v58 = sub_1001B69BC(v53, v52, v56);

  v59 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v60 = *(void **)(v54 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v54 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v58;
  v61 = v58;

  v62 = *(void **)(v54 + v55);
  objc_msgSend(v62, "setText:", 0);
  objc_msgSend(v62, "setAttributedText:", *(_QWORD *)(v54 + v59));

  sub_100155B78(a1, v97 & 1);
  if (!a1)
  {

LABEL_40:
    return;
  }
  v63 = a1;
  v64 = v63;
  v65 = &selRef__pushCount;
  if ((a2 & 1) == 0)
    v65 = &selRef_stepCount;
  v66 = objc_msgSend(v63, *v65);
  v67 = *(char **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  v68 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  v69 = objc_msgSend(*(id *)&v67[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "font");
  if (v69)
  {
    v70 = v69;
    v98 = v66;
    v71 = sub_10003A994(v66);
    v73 = v72;

    v74 = (uint64_t *)&v67[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText];
    v75 = *(_QWORD *)&v67[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText + 8];
    *v74 = v71;
    v74[1] = v73;
    *(_QWORD *)&v76 = swift_bridgeObjectRelease(v75).n128_u64[0];
    v77 = *(void **)&v67[v68];
    objc_msgSend(v77, "setAttributedText:", 0, v76);
    v79 = v74[1];
    if (v79)
    {
      swift_bridgeObjectRetain(v74[1]);
      v80 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v78 = swift_bridgeObjectRelease(v79).n128_u64[0];
    }
    else
    {
      v80 = 0;
    }
    objc_msgSend(v77, "setText:", v80, v78);

    v81 = objc_msgSend(v64, "_isStandalonePhoneSummary");
    v82 = 1.0;
    if ((v81 & a2) != 0)
      v82 = 0.0;
    objc_msgSend(v67, "setAlpha:", v82);
    v83 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
    v84 = objc_msgSend(v64, "distanceWalkingRunning");
    v85 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    v86 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v83
                                                                + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
    if (v86)
    {
      v87 = v86;
      v88 = sub_10003A7D8(v84, v94, v86);

      v89 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
      v90 = *(void **)(v83 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
      *(_QWORD *)(v83 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v88;
      v91 = v88;

      v92 = *(void **)(v83 + v85);
      objc_msgSend(v92, "setText:", 0);
      objc_msgSend(v92, "setAttributedText:", *(_QWORD *)(v83 + v89));

      goto LABEL_40;
    }
    goto LABEL_45;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
}

void sub_100155B78(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Class isa;
  Class v27;
  objc_class *v28;
  char *v29;
  id v30;
  Class v31;
  objc_class *v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  Class v40;
  Class v41;
  char *v42;
  id v43;
  Class v44;
  char *v45;
  char *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  Class v52;
  Class v53;
  char *v54;
  id v55;
  Class v56;
  char *v57;
  char *v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  objc_super v64;
  objc_super v65;
  objc_super v66;
  objc_super v67;
  objc_super v68;
  objc_super v69;

  v3 = v2;
  if (a1)
  {
    if ((objc_msgSend(a1, "paused") & 1) != 0)
      goto LABEL_3;
LABEL_11:
    v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
    sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
    isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.0, 0.28631, 1.0).super.isa;
    v27 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.19608, 0.52941, 1.0).super.isa;
    v28 = (objc_class *)type metadata accessor for GradientColors();
    v29 = (char *)objc_allocWithZone(v28);
    *(_QWORD *)&v29[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
    *(_QWORD *)&v29[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v27;
    v69.receiver = v29;
    v69.super_class = v28;
    v30 = objc_msgSendSuper2(&v69, "init");
    v31 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.98039, 0.066667, 0.3098, 1.0).super.isa;
    v32 = (objc_class *)type metadata accessor for MetricColors();
    v33 = (char *)objc_allocWithZone(v32);
    *(_QWORD *)&v33[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v30;
    *(_QWORD *)&v33[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v31;
    v68.receiver = v33;
    v68.super_class = v32;
    v34 = (char *)objc_msgSendSuper2(&v68, "init");
    v35 = *(id *)&v34[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    v36 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    v37 = *(void **)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(_QWORD *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v35;
    v38 = v35;

    objc_msgSend(*(id *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v25 + v36));
    v39 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
    v40 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.6, 1.0, 0.0, 1.0).super.isa;
    v41 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.84706, 1.0, 0.0, 1.0).super.isa;
    v42 = (char *)objc_allocWithZone(v28);
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v40;
    *(_QWORD *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v41;
    v67.receiver = v42;
    v67.super_class = v28;
    v43 = objc_msgSendSuper2(&v67, "init");
    v44 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.65068, 1.0, 0.0, 1.0).super.isa;
    v45 = (char *)objc_allocWithZone(v32);
    *(_QWORD *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v43;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v44;
    v66.receiver = v45;
    v66.super_class = v32;
    v46 = (char *)objc_msgSendSuper2(&v66, "init");
    v47 = *(id *)&v46[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    v48 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    v49 = *(void **)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(_QWORD *)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v47;
    v50 = v47;

    objc_msgSend(*(id *)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v39 + v48));
    v51 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
    v52 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
    v53 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
    v54 = (char *)objc_allocWithZone(v28);
    *(_QWORD *)&v54[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v52;
    *(_QWORD *)&v54[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v53;
    v65.receiver = v54;
    v65.super_class = v28;
    v55 = objc_msgSendSuper2(&v65, "init");
    v56 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
    v57 = (char *)objc_allocWithZone(v32);
    *(_QWORD *)&v57[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v55;
    *(_QWORD *)&v57[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v56;
    v64.receiver = v57;
    v64.super_class = v32;
    v58 = (char *)objc_msgSendSuper2(&v64, "init");
    v59 = *(id *)&v58[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    v60 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    v61 = *(void **)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(_QWORD *)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v59;
    v62 = v59;

    objc_msgSend(*(id *)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v51 + v60));
    return;
  }
  if ((a2 & 1) == 0)
    goto LABEL_11;
LABEL_3:
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
  v5 = (void *)objc_opt_self(ARUIMetricColors);
  v6 = objc_msgSend(v5, "grayColors");
  if (!v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "nonGradientTextColor");

  if (!v8)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v10 = *(void **)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v8;
  v11 = v8;

  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v4 + v9));
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
  v13 = objc_msgSend(v5, "grayColors");
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "nonGradientTextColor");

  if (!v15)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v17 = *(void **)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v15;
  v18 = v15;

  objc_msgSend(*(id *)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v12 + v16));
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  v20 = objc_msgSend(v5, "grayColors");
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, "nonGradientTextColor");

    if (v22)
    {
      v23 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
      v24 = *(void **)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
      *(_QWORD *)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v22;
      v63 = v22;

      objc_msgSend(*(id *)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "setTextColor:", *(_QWORD *)(v19 + v23));
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_100156198(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView), "setHidden:", 1);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView), "setHidden:", 1);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView), "setHidden:", 1);
  v2 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  v4 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v5 = sub_100032478();
  objc_msgSend(v4, "setBackgroundColor:", v5);

  qword_1008227B8 = 0x4034000000000000;
  qword_1008227C0 = 0x4030000000000000;
  qword_1008227C8 = 0x4022000000000000;
}

void sub_1001562B4(uint64_t a1)
{
  void *v2;
  Class isa;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView), "setHidden:", 0);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView), "setHidden:", 0);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView), "setHidden:", 0);
  v2 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v2, "setBackgroundColor:", isa);

  v4 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  qword_1008227B8 = 0;
  qword_1008227C0 = 0x4010000000000000;
  qword_1008227C8 = 0;
}

id sub_1001563EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;

  v1 = v0;

  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
  v3 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  v5 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  objc_msgSend(v5, "setText:", 0);
  objc_msgSend(v5, "setAttributedText:", *(_QWORD *)(v2 + v3));
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
  v7 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v8 = *(void **)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  v9 = *(void **)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  objc_msgSend(v9, "setText:", 0);
  objc_msgSend(v9, "setAttributedText:", *(_QWORD *)(v6 + v7));
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  v11 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v12 = *(void **)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  v13 = *(void **)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  objc_msgSend(v13, "setText:", 0);
  objc_msgSend(v13, "setAttributedText:", *(_QWORD *)(v10 + v11));
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  v15 = (_QWORD *)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText);
  v16 = *(_QWORD *)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText + 8);
  *v15 = 0;
  v15[1] = 0;
  swift_bridgeObjectRelease(v16);
  v17 = *(void **)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  objc_msgSend(v17, "setAttributedText:", 0);
  v18 = v15[1];
  if (v18)
  {
    swift_bridgeObjectRetain(v18);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v17, "setText:", v19);

  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
  v21 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  v22 = *(void **)(v20 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  v23 = *(void **)(v20 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  objc_msgSend(v23, "setText:", 0);
  return objc_msgSend(v23, "setAttributedText:", *(_QWORD *)(v20 + v21));
}

id sub_100156604()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TodayActivityTile();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t getEnumTagSinglePayload for TrendsPairedWatchesAltimeterSupport(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TodayActivityTile.DisplayStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100156808 + 4 * byte_100626C49[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10015683C + 4 * byte_100626C44[v4]))();
}

uint64_t sub_10015683C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100156844(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015684CLL);
  return result;
}

uint64_t sub_100156858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100156860);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100156864(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015686C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TodayActivityTile.DisplayStyle()
{
  return &type metadata for TodayActivityTile.DisplayStyle;
}

unint64_t sub_10015688C()
{
  unint64_t result;

  result = qword_100822870;
  if (!qword_100822870)
  {
    result = swift_getWitnessTable(&unk_100626CC0, &type metadata for TodayActivityTile.DisplayStyle);
    atomic_store(result, (unint64_t *)&qword_100822870);
  }
  return result;
}

void sub_1001568D0()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  id v3;
  objc_class *v4;
  char *v5;
  void *v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSString v19;
  id v20;
  id v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  char *v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSString v39;
  id v40;
  id v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  char *v46;
  id v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSString v59;
  id v60;
  id v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  char *v66;
  id v67;
  NSString v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  NSString v79;
  id v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  id v86;
  id v87;
  double v88;
  uint64_t v89;
  double v90;
  double v91;
  char *v92;
  id v93;
  NSString v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSString v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  int v113;
  double v114;
  uint64_t v115;
  double v116;
  double v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  void *v124;
  void *v125;
  __n128 v126;
  void *v127;
  id v128;
  void *v129;
  uint64_t v130;
  id v131;
  Class isa;
  uint64_t v133;
  id v134;
  Class v135;
  uint64_t v136;
  id v137;
  id v138;
  uint64_t v139;
  id v140;
  Class v141;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager] = 0;
  v2 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  v3 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v2] = v3;
  v4 = (objc_class *)type metadata accessor for DayViewTitleAndValueLabelPair();
  v5 = (char *)objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = objc_msgSend(v6, "mainBundle");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = (uint64_t *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v14 = *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v13 = v10;
  v13[1] = v12;
  swift_bridgeObjectRetain(v12);
  v15 = swift_bridgeObjectRelease(v14).n128_u64[0];
  v16 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v17 = *(void **)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v18 = v13[1];
  if (v18)
  {
    swift_bridgeObjectRetain(v18);
    v19 = String._bridgeToObjectiveC()();
    v15 = swift_bridgeObjectRelease(v18).n128_u64[0];
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v17, "setText:", v19, *(double *)&v15);
  swift_bridgeObjectRelease(v12);

  if (qword_10081D5B8 != -1)
    swift_once(&qword_10081D5B8, sub_1000062E0);
  objc_msgSend(*(id *)&v5[v16], "setFont:", qword_1008227B0);
  v20 = sub_100037F70();
  objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v20);

  v21 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v22 = 23.0;
  else
    v22 = 20.0;
  v23 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair;
  objc_msgSend(v21, "_scaledValueForValue:", v22);
  v25 = v24;

  sub_100039478(v25);
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v5, "setNeedsLayout");
  objc_msgSend(v5, "invalidateIntrinsicContentSize");
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v23] = v5;
  v26 = (char *)objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v27 = objc_msgSend(v6, "mainBundle");
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "localizedStringForKey:value:table:", v28, 0, 0);

  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = (uint64_t *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v34 = *(_QWORD *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v33 = v30;
  v33[1] = v32;
  swift_bridgeObjectRetain(v32);
  v35 = swift_bridgeObjectRelease(v34).n128_u64[0];
  v36 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v37 = *(void **)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v38 = v33[1];
  if (v38)
  {
    swift_bridgeObjectRetain(v38);
    v39 = String._bridgeToObjectiveC()();
    v35 = swift_bridgeObjectRelease(v38).n128_u64[0];
  }
  else
  {
    v39 = 0;
  }
  objc_msgSend(v37, "setText:", v39, *(double *)&v35);
  swift_bridgeObjectRelease(v32);

  objc_msgSend(*(id *)&v26[v36], "setFont:", qword_1008227B0);
  v40 = sub_100037F70();
  objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v40);

  v41 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v42 = 23.0;
  else
    v42 = 20.0;
  v43 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair;
  objc_msgSend(v41, "_scaledValueForValue:", v42);
  v45 = v44;

  sub_100039478(v45);
  *(_QWORD *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v26, "setNeedsLayout");
  objc_msgSend(v26, "invalidateIntrinsicContentSize");
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v43] = v26;
  v46 = (char *)objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v47 = objc_msgSend(v6, "mainBundle");
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v47, "localizedStringForKey:value:table:", v48, 0, 0);

  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v51;

  v53 = (uint64_t *)&v46[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v54 = *(_QWORD *)&v46[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v53 = v50;
  v53[1] = v52;
  swift_bridgeObjectRetain(v52);
  v55 = swift_bridgeObjectRelease(v54).n128_u64[0];
  v56 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v57 = *(void **)&v46[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v58 = v53[1];
  if (v58)
  {
    swift_bridgeObjectRetain(v58);
    v59 = String._bridgeToObjectiveC()();
    v55 = swift_bridgeObjectRelease(v58).n128_u64[0];
  }
  else
  {
    v59 = 0;
  }
  objc_msgSend(v57, "setText:", v59, *(double *)&v55);
  swift_bridgeObjectRelease(v52);

  objc_msgSend(*(id *)&v46[v56], "setFont:", qword_1008227B0);
  v60 = sub_100037F70();
  objc_msgSend(*(id *)&v46[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v60);

  v61 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v62 = 23.0;
  else
    v62 = 20.0;
  v63 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair;
  objc_msgSend(v61, "_scaledValueForValue:", v62);
  v65 = v64;

  sub_100039478(v65);
  *(_QWORD *)&v46[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v46, "setNeedsLayout");
  objc_msgSend(v46, "invalidateIntrinsicContentSize");
  objc_msgSend(v46, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v63] = v46;
  v66 = (char *)objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v67 = objc_msgSend(v6, "mainBundle");
  v68 = String._bridgeToObjectiveC()();
  v69 = objc_msgSend(v67, "localizedStringForKey:value:table:", v68, 0, 0);

  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  v73 = (uint64_t *)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v74 = *(_QWORD *)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v73 = v70;
  v73[1] = v72;
  swift_bridgeObjectRetain(v72);
  v75 = swift_bridgeObjectRelease(v74).n128_u64[0];
  v76 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v77 = *(void **)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v78 = v73[1];
  if (v78)
  {
    swift_bridgeObjectRetain(v78);
    v79 = String._bridgeToObjectiveC()();
    v75 = swift_bridgeObjectRelease(v78).n128_u64[0];
  }
  else
  {
    v79 = 0;
  }
  objc_msgSend(v77, "setText:", v79, *(double *)&v75);
  swift_bridgeObjectRelease(v72);

  objc_msgSend(*(id *)&v66[v76], "setFont:", qword_1008227B0);
  v80 = sub_100037F70();
  v81 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  objc_msgSend(*(id *)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v80);

  v82 = (void *)objc_opt_self(UIColor);
  v83 = objc_msgSend(v82, "systemGrayColor");
  v84 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v85 = *(void **)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v83;
  v86 = v83;

  objc_msgSend(*(id *)&v66[v81], "setTextColor:", *(_QWORD *)&v66[v84]);
  v87 = sub_100037F70();
  if (FIUICurrentLanguageRequiresTallScript())
    v88 = 23.0;
  else
    v88 = 20.0;
  v89 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair;
  objc_msgSend(v87, "_scaledValueForValue:", v88);
  v91 = v90;

  sub_100039478(v91);
  *(_QWORD *)&v66[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v66, "setNeedsLayout");
  objc_msgSend(v66, "invalidateIntrinsicContentSize");
  objc_msgSend(v66, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v89] = v66;
  v92 = (char *)objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v93 = objc_msgSend(v6, "mainBundle");
  v94 = String._bridgeToObjectiveC()();
  v95 = objc_msgSend(v93, "localizedStringForKey:value:table:", v94, 0, 0);

  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
  v98 = v97;

  v99 = (uint64_t *)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  v100 = *(_QWORD *)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText + 8];
  *v99 = v96;
  v99[1] = v98;
  swift_bridgeObjectRetain(v98);
  v101 = swift_bridgeObjectRelease(v100).n128_u64[0];
  v102 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  v103 = *(void **)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  v104 = v99[1];
  if (v104)
  {
    swift_bridgeObjectRetain(v104);
    v105 = String._bridgeToObjectiveC()();
    v101 = swift_bridgeObjectRelease(v104).n128_u64[0];
  }
  else
  {
    v105 = 0;
  }
  objc_msgSend(v103, "setText:", v105, *(double *)&v101);
  swift_bridgeObjectRelease(v98);

  objc_msgSend(*(id *)&v92[v102], "setFont:", qword_1008227B0);
  v106 = sub_100037F70();
  v107 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  objc_msgSend(*(id *)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel], "setFont:", v106);

  v108 = objc_msgSend(v82, "systemGrayColor");
  v109 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  v110 = *(void **)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(_QWORD *)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v108;
  v111 = v108;

  objc_msgSend(*(id *)&v92[v107], "setTextColor:", *(_QWORD *)&v92[v109]);
  v112 = sub_100037F70();
  v113 = FIUICurrentLanguageRequiresTallScript();
  v114 = 20.0;
  if (v113)
    v114 = 23.0;
  v115 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair;
  objc_msgSend(v112, "_scaledValueForValue:", v114);
  v117 = v116;

  sub_100039478(v117);
  *(_QWORD *)&v92[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  objc_msgSend(v92, "setNeedsLayout");
  objc_msgSend(v92, "invalidateIntrinsicContentSize");
  objc_msgSend(v92, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v115] = v92;
  v118 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView;
  v119 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v119, "setAxis:", 1);
  objc_msgSend(v119, "setDistribution:", 3);
  objc_msgSend(v119, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v118] = v119;
  v120 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView;
  v121 = objc_msgSend((id)objc_opt_self(ARUIRingGroup), "activityRingGroupForRingType:", 3);
  v122 = objc_msgSend(v121, "forCompanion");

  v123 = objc_msgSend(objc_allocWithZone((Class)ARUIRingsView), "initWithRingGroup:", v122);
  v124 = (void *)ARUIRingsView.withRingGroupDiameter(_:)(137.0);

  v125 = (void *)ARUIRingsView.withRingGroupThickness(_:)(15.0);
  v127 = (void *)ARUIRingsView.withRingGroupInterspacing(_:)(2.0, v126);

  v128 = objc_msgSend(v82, "clearColor");
  objc_msgSend(v127, "setBackgroundColor:", v128);

  v129 = (void *)ARUIRingsView.nilRings(animated:)(0);
  objc_msgSend(v129, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v120] = v129;
  v130 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView;
  v131 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001E724(0, (unint64_t *)&qword_10082EDB0, UIColor_ptr);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v131, "setBackgroundColor:", isa);

  objc_msgSend(v131, "setHidden:", 1);
  objc_msgSend(v131, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v130] = v131;
  v133 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView;
  v134 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v135 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v134, "setBackgroundColor:", v135);

  objc_msgSend(v134, "setHidden:", 1);
  objc_msgSend(v134, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v133] = v134;
  v136 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView;
  v137 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v138 = objc_msgSend(v82, "blackColor");
  objc_msgSend(v137, "setBackgroundColor:", v138);

  objc_msgSend(v137, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v136] = v137;
  v139 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView;
  v140 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v141 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  objc_msgSend(v140, "setBackgroundColor:", v141);

  objc_msgSend(v140, "setHidden:", 1);
  objc_msgSend(v140, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v139] = v140;
  v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100689100, "FitnessApp/TodayActivityTile.swift", 34, 2, 489, 0);
  __break(1u);
}

Swift::Int sub_100157828(uint64_t a1, uint64_t a2)
{
  return sub_100158EDC(a1, a2, 1635017060, 0xE400000000000000);
}

uint64_t sub_100157838(uint64_t a1)
{
  return String.hash(into:)(a1, 1635017060, 0xE400000000000000);
}

Swift::Int sub_100157848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100158F48(a1, a2, a3, 1635017060, 0xE400000000000000);
}

uint64_t sub_100157858@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F2B8;
  return sub_100158F9C(v2, a1, a2);
}

uint64_t sub_100157864()
{
  return 1635017060;
}

uint64_t sub_100157874@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F2F0;
  return sub_100159018(a1, v2, a2);
}

void sub_100157880(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10015788C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100157A00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001578B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100157A00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EditorialItemsList.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100047110(&qword_100822890);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_100157A00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EditorialItemsList.CodingKeys, &type metadata for EditorialItemsList.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100047110(&qword_1008228A0);
  sub_1000F0610(&qword_1008228A8, &qword_1008228A0, (void (*)(void))sub_100157A44, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100157A00()
{
  unint64_t result;

  result = qword_100822898;
  if (!qword_100822898)
  {
    result = swift_getWitnessTable(&unk_100627B68, &type metadata for EditorialItemsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822898);
  }
  return result;
}

unint64_t sub_100157A44()
{
  unint64_t result;

  result = qword_1008228B0;
  if (!qword_1008228B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditorialItem, &type metadata for EditorialItem);
    atomic_store(result, (unint64_t *)&qword_1008228B0);
  }
  return result;
}

_QWORD *EditorialItemsList.init(from:)(_QWORD *a1)
{
  return sub_100159AD0(a1);
}

_QWORD *sub_100157A9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100159AD0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100157AC4(_QWORD *a1)
{
  uint64_t *v1;

  return EditorialItemsList.encode(to:)(a1, *v1);
}

uint64_t EditorialItem.id.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t EditorialItem.relationship.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100159C1C(a3);
  return a3;
}

uint64_t sub_100157B34(char *a1, char *a2)
{
  return sub_100390AA8(*a1, *a2);
}

Swift::Int sub_100157B40()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6E6F6974616C6572;
  else
    v2 = 25705;
  if (v1)
    v3 = 0xED00007370696873;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100157BC0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E6F6974616C6572;
  else
    v2 = 25705;
  if (*v1)
    v3 = 0xED00007370696873;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100157C1C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6E6F6974616C6572;
  else
    v3 = 25705;
  if (v2)
    v4 = 0xED00007370696873;
  else
    v4 = 0xE200000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100157C98@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F328;
  return sub_100158558(v2, a1, a2);
}

void sub_100157CA4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 25705;
  if (*v1)
    v2 = 0x6E6F6974616C6572;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xED00007370696873;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100157CE4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F6974616C6572;
  else
    return 25705;
}

uint64_t sub_100157D20@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F328;
  return sub_100158628(a1, v2, a2);
}

uint64_t sub_100157D2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100159C3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100157D54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100159C3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EditorialItem.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v16 = a4;
  v8 = sub_100047110(&qword_1008228B8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100016804(a1, v12);
  v14 = sub_100159C3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EditorialItem.CodingKeys, &type metadata for EditorialItem.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v19, v8);
  if (!v4)
  {
    v17 = v16;
    v18 = 1;
    sub_100159C80();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t EditorialItem.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_100159CC4(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_100157EE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100159CC4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100157F0C(_QWORD *a1)
{
  uint64_t *v1;

  return EditorialItem.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t Relationship.cardContent.getter(uint64_t a1)
{
  sub_100159C2C(a1);
  return a1;
}

Swift::Int sub_100157F4C(uint64_t a1, uint64_t a2)
{
  return sub_100158EDC(a1, a2, 0x6E6F632D64726163, 0xED000073746E6574);
}

uint64_t sub_100157F70(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E6F632D64726163, 0xED000073746E6574);
}

Swift::Int sub_100157F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100158F48(a1, a2, a3, 0x6E6F632D64726163, 0xED000073746E6574);
}

uint64_t sub_100157FB8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F378;
  return sub_100158F9C(v2, a1, a2);
}

void sub_100157FC4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "card-contents");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100157FEC()
{
  return 0x6E6F632D64726163;
}

uint64_t sub_100158010@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F3B0;
  return sub_100159018(a1, v2, a2);
}

uint64_t sub_10015801C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100159E70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100158044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100159E70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Relationship.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100047110(&qword_1008228D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_100159E70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Relationship.CodingKeys, &type metadata for Relationship.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100159EB4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *Relationship.init(from:)(_QWORD *a1)
{
  return sub_100159EF8(a1);
}

_QWORD *sub_100158178@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100159EF8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001581A0(_QWORD *a1)
{
  uint64_t *v1;

  return Relationship.encode(to:)(a1, *v1);
}

uint64_t sub_1001581BC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F3E8;
  return sub_100158F9C(v2, a1, a2);
}

void sub_1001581C8(_QWORD *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1001581DC@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F420;
  return sub_100159018(a1, v2, a2);
}

uint64_t sub_1001581E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A018();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100158210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A018();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CardContent.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100047110(&qword_1008228E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015A018();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CardContent.CodingKeys, &type metadata for CardContent.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100047110(&qword_1008220E0);
  sub_1000F0610(&qword_1008228F8, &qword_1008220E0, (void (*)(void))sub_10015A05C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *CardContent.init(from:)(_QWORD *a1)
{
  return sub_10015A0A0(a1);
}

_QWORD *sub_100158370@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10015A0A0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100158398(_QWORD *a1)
{
  uint64_t *v1;

  return CardContent.encode(to:)(a1, *v1);
}

uint64_t CardItem.storeIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t CardItem.attributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100021CC0(v1 + 16, a1, &qword_100822908);
}

uint64_t sub_100158400(char *a1, char *a2)
{
  return sub_10038F7B4(*a1, *a2);
}

Swift::Int sub_10015840C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7475626972747461;
  else
    v2 = 25705;
  if (v1)
    v3 = 0xEA00000000007365;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100158484(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7475626972747461;
  else
    v2 = 25705;
  if (*v1)
    v3 = 0xEA00000000007365;
  else
    v3 = 0xE200000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001584D8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7475626972747461;
  else
    v3 = 25705;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xE200000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10015854C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F458;
  return sub_100158558(v2, a1, a2);
}

uint64_t sub_100158558@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_1001585B0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 25705;
  if (*v1)
    v2 = 0x7475626972747461;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xEA00000000007365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001585E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 25705;
}

uint64_t sub_10015861C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F458;
  return sub_100158628(a1, v2, a2);
}

uint64_t sub_100158628@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_100158684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A1EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001586AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A1EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CardItem.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[192];
  _BYTE v17[216];

  v3 = v1;
  v5 = sub_100047110(&qword_100822910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100016804(a1, v9);
  v11 = sub_10015A1EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CardItem.CodingKeys, &type metadata for CardItem.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v16[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v16, v5);
  if (!v2)
  {
    sub_100045AD4((uint64_t)(v3 + 2), (uint64_t)v17, &qword_100822908);
    sub_100045AD4((uint64_t)v17, (uint64_t)v16, &qword_100822908);
    v17[215] = 1;
    sub_10015A230();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 CardItem.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[13];

  sub_10015A274(a1, v10);
  if (!v2)
  {
    v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100158894(_QWORD *a1)
{
  return CardItem.encode(to:)(a1);
}

uint64_t Attributes.platform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100021CC0(v1 + 16, a1, &qword_100822928);
}

uint64_t Attributes.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 184));
  return v1;
}

uint64_t sub_100158944(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100390E40(*a1, *a2);
}

Swift::Int sub_100158950()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x8000000100687540;
  v3 = 0xD000000000000012;
  if (v1 != 1)
  {
    v3 = 1701667182;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x614E747369747261;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA0000000000656DLL;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001589F0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x8000000100687540;
  v3 = 0xD000000000000012;
  if (*v1 != 1)
  {
    v3 = 1701667182;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x614E747369747261;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA0000000000656DLL;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100158A6C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x8000000100687540;
  v4 = 0xD000000000000012;
  if (v2 != 1)
  {
    v4 = 1701667182;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x614E747369747261;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEA0000000000656DLL;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100158B08@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015A5C8(*a1);
  *a2 = result;
  return result;
}

void sub_100158B34(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA0000000000656DLL;
  v4 = 0x8000000100687540;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 1701667182;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x614E747369747261;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100158B94()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 1701667182;
  if (*v0)
    return v1;
  else
    return 0x614E747369747261;
}

unint64_t sub_100158BF0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015A5C8(a1);
  *a2 = result;
  return result;
}

void sub_100158C14(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100158C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A540();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100158C48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A540();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Attributes.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[160];
  _BYTE v19[184];

  v3 = v1;
  v5 = sub_100047110(&qword_100822930);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100016804(a1, v9);
  v11 = sub_10015A540();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Attributes.CodingKeys, &type metadata for Attributes.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v18[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v18, v5);
  if (!v2)
  {
    sub_100045AD4((uint64_t)(v3 + 2), (uint64_t)v19, &qword_100822928);
    sub_100045AD4((uint64_t)v19, (uint64_t)v18, &qword_100822928);
    v19[183] = 1;
    sub_10015A584();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18);
    v14 = v3[22];
    v15 = v3[23];
    v18[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v18, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

double Attributes.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_10015A610(a1, v11);
  if (!v2)
  {
    v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    result = *(double *)&v12;
    v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_100158E50(_QWORD *a1)
{
  return Attributes.encode(to:)(a1);
}

uint64_t AppPlatform.iOS.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100021CC0(v1, a1, &qword_100822948);
}

Swift::Int sub_100158ECC(uint64_t a1, uint64_t a2)
{
  return sub_100158EDC(a1, a2, 7565161, 0xE300000000000000);
}

Swift::Int sub_100158EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_100158F28(uint64_t a1)
{
  return String.hash(into:)(a1, 7565161, 0xE300000000000000);
}

Swift::Int sub_100158F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100158F48(a1, a2, a3, 7565161, 0xE300000000000000);
}

Swift::Int sub_100158F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_100158F90@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F510;
  return sub_100158F9C(v2, a1, a2);
}

uint64_t sub_100158F9C@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_100158FE8(_QWORD *a1@<X8>)
{
  *a1 = 7565161;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_100158FFC()
{
  return 7565161;
}

uint64_t sub_10015900C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10077F548;
  return sub_100159018(a1, v2, a2);
}

uint64_t sub_100159018@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_100159068(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A98C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100159090(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A98C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppPlatform.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v13[160];
  _BYTE v14[168];

  v2 = v1;
  v4 = sub_100047110(&qword_100822950);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015A98C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppPlatform.CodingKeys, &type metadata for AppPlatform.CodingKeys, v10, v8, v9);
  sub_100045AD4(v2, (uint64_t)v14, &qword_100822948);
  sub_100045AD4((uint64_t)v14, (uint64_t)v13, &qword_100822948);
  sub_10015A9D0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

double AppPlatform.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_10015AA14(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100159238(_QWORD *a1)
{
  return AppPlatform.encode(to:)(a1);
}

uint64_t AppStoreAppRecommendation.author.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AppAttributes.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100021CC0(v1 + 32, a1, &qword_100822968);
}

uint64_t sub_1001592D8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6449656C646E7562;
  if (*v0 != 1)
    v1 = 0x6B726F77747261;
  if (*v0)
    return v1;
  else
    return 0x656C746974627573;
}

uint64_t sub_100159334@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015AC4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100159358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015ABC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100159380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015ABC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppAttributes.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[128];
  _BYTE v19[152];

  v3 = v1;
  v5 = sub_100047110(&qword_100822970);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100016804(a1, v9);
  v11 = sub_10015ABC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppAttributes.CodingKeys, &type metadata for AppAttributes.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v18[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v18, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v18[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v18, v5);
    sub_100045AD4((uint64_t)(v3 + 4), (uint64_t)v19, &qword_100822968);
    sub_100045AD4((uint64_t)v19, (uint64_t)v18, &qword_100822968);
    v19[151] = 2;
    sub_10015AC08();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

double AppAttributes.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_10015ADA0(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100159580(_QWORD *a1)
{
  return AppAttributes.encode(to:)(a1);
}

void sub_1001595D0(char *a1)
{
  sub_100390FF0(*a1);
}

void sub_1001595DC()
{
  char *v0;

  sub_100391D70(0, *v0);
}

void sub_1001595E8(uint64_t a1)
{
  char *v1;

  sub_100391B5C(a1, *v1);
}

void sub_1001595F0(uint64_t a1)
{
  char *v1;

  sub_100391D70(a1, *v1);
}

unint64_t sub_1001595F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015B0E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100159624()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100159650 + 4 * byte_100626D10[*v0]))();
}

void sub_100159650(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696568;
  a1[1] = 0xE600000000000000;
}

void sub_100159668(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

void sub_10015967C(_QWORD *a1@<X8>)
{
  *a1 = 0x726F6C6F436762;
  a1[1] = 0xE700000000000000;
}

void sub_100159698(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C6F4374786574;
  a1[1] = 0xEA00000000003172;
}

void sub_1001596B8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C6F4374786574;
  a1[1] = 0xEA00000000003272;
}

uint64_t sub_1001596FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100159728 + 4 * byte_100626D18[*v0]))(0x6874646977, 0xE500000000000000);
}

uint64_t sub_100159728()
{
  return 0x746867696568;
}

uint64_t sub_10015973C()
{
  return 7107189;
}

uint64_t sub_10015974C()
{
  return 0x726F6C6F436762;
}

uint64_t sub_100159764()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_100159780()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001597A0()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001597C0()
{
  return 0x6F6C6F4374786574;
}

unint64_t sub_1001597E0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015B0E4(a1);
  *a2 = result;
  return result;
}

void sub_100159804(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100159810(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015B0A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100159838(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015B0A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppArtwork.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v3 = v1;
  v5 = sub_100047110(&qword_100822988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100016804(a1, v9);
  v11 = sub_10015B0A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppArtwork.CodingKeys, &type metadata for AppArtwork.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v37 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v37, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v36 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v36, v5);
    v16 = v3[4];
    v17 = v3[5];
    v35 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v35, v5);
    v18 = v3[6];
    v19 = v3[7];
    v34 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v34, v5);
    v20 = v3[8];
    v21 = v3[9];
    v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v33, v5);
    v22 = v3[10];
    v23 = v3[11];
    v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v32, v5);
    v24 = v3[12];
    v25 = v3[13];
    v31 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    v26 = v3[14];
    v27 = v3[15];
    v30 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v30, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double AppArtwork.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_10015B12C(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_100159ABC(_QWORD *a1)
{
  return AppArtwork.encode(to:)(a1);
}

_QWORD *sub_100159AD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = sub_100047110(&qword_100822AF0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100016804(a1, v7);
  v10 = sub_100157A00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EditorialItemsList.CodingKeys, &type metadata for EditorialItemsList.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = sub_100047110(&qword_1008228A0);
    sub_1000F0610(&qword_100822AF8, &qword_1008228A0, (void (*)(void))sub_10015FC40, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_100159C1C(uint64_t result)
{
  if (result != 2)
    return sub_100159C2C(result);
  return result;
}

uint64_t sub_100159C2C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_100159C3C()
{
  unint64_t result;

  result = qword_1008228C0;
  if (!qword_1008228C0)
  {
    result = swift_getWitnessTable(&unk_100627B18, &type metadata for EditorialItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008228C0);
  }
  return result;
}

unint64_t sub_100159C80()
{
  unint64_t result;

  result = qword_1008228C8;
  if (!qword_1008228C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Relationship, &type metadata for Relationship);
    atomic_store(result, (unint64_t *)&qword_1008228C8);
  }
  return result;
}

uint64_t sub_100159CC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  char v16;

  v3 = sub_100047110(&qword_100822AE0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  v8 = a1[4];
  sub_100016804(a1, v7);
  v9 = sub_100159C3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EditorialItem.CodingKeys, &type metadata for EditorialItem.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v16 = 0;
    v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    v12 = v11;
    v14[15] = 1;
    sub_10015FBDC();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v15, &type metadata for Relationship);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    v13 = v15;
    sub_100159C1C(v15);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
    swift_bridgeObjectRelease(v12);
    sub_10015FC20(v13);
  }
  return v8;
}

unint64_t sub_100159E70()
{
  unint64_t result;

  result = qword_1008228D8;
  if (!qword_1008228D8)
  {
    result = swift_getWitnessTable(&unk_100627AC8, &type metadata for Relationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008228D8);
  }
  return result;
}

unint64_t sub_100159EB4()
{
  unint64_t result;

  result = qword_1008228E0;
  if (!qword_1008228E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CardContent, &type metadata for CardContent);
    atomic_store(result, (unint64_t *)&qword_1008228E0);
  }
  return result;
}

_QWORD *sub_100159EF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v3 = sub_100047110(&qword_100822AD0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100016804(a1, v7);
  v10 = sub_100159E70();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Relationship.CodingKeys, &type metadata for Relationship.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    sub_10015FB98();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v13, &type metadata for CardContent);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v13;
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_10015A018()
{
  unint64_t result;

  result = qword_1008228F0;
  if (!qword_1008228F0)
  {
    result = swift_getWitnessTable(&unk_100627A78, &type metadata for CardContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008228F0);
  }
  return result;
}

unint64_t sub_10015A05C()
{
  unint64_t result;

  result = qword_100822900;
  if (!qword_100822900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CardItem, &type metadata for CardItem);
    atomic_store(result, (unint64_t *)&qword_100822900);
  }
  return result;
}

_QWORD *sub_10015A0A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = sub_100047110(&qword_100822AB8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100016804(a1, v7);
  v10 = sub_10015A018();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CardContent.CodingKeys, &type metadata for CardContent.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = sub_100047110(&qword_1008220E0);
    sub_1000F0610(&qword_100822AC0, &qword_1008220E0, (void (*)(void))sub_10015FB54, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_10015A1EC()
{
  unint64_t result;

  result = qword_100822918;
  if (!qword_100822918)
  {
    result = swift_getWitnessTable(&unk_100627A28, &type metadata for CardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822918);
  }
  return result;
}

unint64_t sub_10015A230()
{
  unint64_t result;

  result = qword_100822920;
  if (!qword_100822920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Attributes, &type metadata for Attributes);
    atomic_store(result, (unint64_t *)&qword_100822920);
  }
  return result;
}

void sub_10015A274(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _BYTE v24[192];
  __int128 v25;
  _OWORD v26[12];
  _OWORD v27[13];
  _QWORD v28[24];
  __int128 v29;
  _OWORD v30[12];
  char v31;

  v23 = a2;
  v4 = sub_100047110(&qword_100822AA8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015A1EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CardItem.CodingKeys, &type metadata for CardItem.CodingKeys, v10, v8, v9);
  if (v2)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = v5;
    LOBYTE(v27[0]) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v27, v4);
    v14 = v13;
    *(_QWORD *)&v29 = v12;
    *((_QWORD *)&v29 + 1) = v13;
    v31 = 1;
    sub_10015F6F0();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &type metadata for Attributes);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v4);
    sub_100045AD4((uint64_t)v28, (uint64_t)v24, &qword_100822908);
    sub_100045AD4((uint64_t)v24, (uint64_t)v30, &qword_100822908);
    *(_QWORD *)&v25 = v12;
    *((_QWORD *)&v25 + 1) = v14;
    sub_100045AD4((uint64_t)v24, (uint64_t)v26, &qword_100822908);
    sub_10015F734((uint64_t)&v25);
    swift_bridgeObjectRelease(v14);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
    v27[10] = v30[9];
    v27[11] = v30[10];
    v27[12] = v30[11];
    v27[6] = v30[5];
    v27[7] = v30[6];
    v27[8] = v30[7];
    v27[9] = v30[8];
    v27[2] = v30[1];
    v27[3] = v30[2];
    v27[4] = v30[3];
    v27[5] = v30[4];
    v27[0] = v29;
    v27[1] = v30[0];
    sub_10015F944((uint64_t)v27);
    v15 = v26[10];
    v16 = v23;
    v23[10] = v26[9];
    v16[11] = v15;
    v16[12] = v26[11];
    v17 = v26[6];
    v16[6] = v26[5];
    v16[7] = v17;
    v18 = v26[8];
    v16[8] = v26[7];
    v16[9] = v18;
    v19 = v26[2];
    v16[2] = v26[1];
    v16[3] = v19;
    v20 = v26[4];
    v16[4] = v26[3];
    v16[5] = v20;
    v21 = v26[0];
    *v16 = v25;
    v16[1] = v21;
  }
}

unint64_t sub_10015A540()
{
  unint64_t result;

  result = qword_100822938;
  if (!qword_100822938)
  {
    result = swift_getWitnessTable(&unk_1006279D8, &type metadata for Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822938);
  }
  return result;
}

unint64_t sub_10015A584()
{
  unint64_t result;

  result = qword_100822940;
  if (!qword_100822940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppPlatform, &type metadata for AppPlatform);
    atomic_store(result, (unint64_t *)&qword_100822940);
  }
  return result;
}

unint64_t sub_10015A5C8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10077F4A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void sub_10015A610(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  _OWORD v31[10];
  __int128 v32;
  _OWORD v33[12];
  _QWORD v34[20];
  _QWORD v35[20];
  __int128 v36;
  _OWORD v37[10];
  __int128 v38;
  _BYTE v39[2];

  v29 = sub_100047110(&qword_100822A98);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015A540();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Attributes.CodingKeys, &type metadata for Attributes.CodingKeys, v10, v8, v9);
  if (v2)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = v5;
    v28 = a2;
    LOBYTE(v33[0]) = 0;
    v12 = v29;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v33, v29);
    v15 = v14;
    *(_QWORD *)&v36 = v13;
    *((_QWORD *)&v36 + 1) = v14;
    v39[1] = 1;
    v27 = v13;
    sub_10015F210();
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &type metadata for AppPlatform);
    sub_100045AD4((uint64_t)v35, (uint64_t)v34, &qword_100822928);
    sub_100045AD4((uint64_t)v34, (uint64_t)v37, &qword_100822928);
    v39[0] = 2;
    sub_10015F394(v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10015F3F8);
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v39, v12);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    *(_QWORD *)&v38 = v16;
    *((_QWORD *)&v38 + 1) = v18;
    *(_QWORD *)&v30 = v27;
    *((_QWORD *)&v30 + 1) = v15;
    sub_100045AD4((uint64_t)v34, (uint64_t)v31, &qword_100822928);
    *(_QWORD *)&v32 = v16;
    *((_QWORD *)&v32 + 1) = v18;
    sub_10015F538((uint64_t)&v30);
    sub_10015F394(v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10015F254);
    swift_bridgeObjectRelease(v15);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
    v33[8] = v37[7];
    v33[9] = v37[8];
    v33[10] = v37[9];
    v33[11] = v38;
    v33[4] = v37[3];
    v33[5] = v37[4];
    v33[6] = v37[5];
    v33[7] = v37[6];
    v33[0] = v36;
    v33[1] = v37[0];
    v33[2] = v37[1];
    v33[3] = v37[2];
    sub_10015F614((uint64_t)v33);
    v19 = v31[8];
    v20 = v28;
    v28[8] = v31[7];
    v20[9] = v19;
    v21 = v32;
    v20[10] = v31[9];
    v20[11] = v21;
    v22 = v31[4];
    v20[4] = v31[3];
    v20[5] = v22;
    v23 = v31[6];
    v20[6] = v31[5];
    v20[7] = v23;
    v24 = v31[0];
    *v20 = v30;
    v20[1] = v24;
    v25 = v31[2];
    v20[2] = v31[1];
    v20[3] = v25;
  }
}

unint64_t sub_10015A98C()
{
  unint64_t result;

  result = qword_100822958;
  if (!qword_100822958)
  {
    result = swift_getWitnessTable(&unk_100627988, &type metadata for AppPlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822958);
  }
  return result;
}

unint64_t sub_10015A9D0()
{
  unint64_t result;

  result = qword_100822960;
  if (!qword_100822960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppAttributes, &type metadata for AppAttributes);
    atomic_store(result, (unint64_t *)&qword_100822960);
  }
  return result;
}

uint64_t sub_10015AA14@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v19[160];
  _OWORD v20[10];
  _QWORD v21[21];
  _OWORD *v22;

  v22 = a2;
  v4 = sub_100047110(&qword_100822A88);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015A98C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppPlatform.CodingKeys, &type metadata for AppPlatform.CodingKeys, v10, v8, v9);
  if (v2)
    return _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  v11 = v22;
  sub_10015F1CC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &type metadata for AppAttributes);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  sub_100045AD4((uint64_t)v21, (uint64_t)v19, &qword_100822948);
  sub_100045AD4((uint64_t)v19, (uint64_t)v20, &qword_100822948);
  result = _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  v13 = v20[7];
  v11[6] = v20[6];
  v11[7] = v13;
  v14 = v20[9];
  v11[8] = v20[8];
  v11[9] = v14;
  v15 = v20[3];
  v11[2] = v20[2];
  v11[3] = v15;
  v16 = v20[5];
  v11[4] = v20[4];
  v11[5] = v16;
  v17 = v20[1];
  *v11 = v20[0];
  v11[1] = v17;
  return result;
}

unint64_t sub_10015ABC4()
{
  unint64_t result;

  result = qword_100822978;
  if (!qword_100822978)
  {
    result = swift_getWitnessTable(&unk_100627938, &type metadata for AppAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822978);
  }
  return result;
}

unint64_t sub_10015AC08()
{
  unint64_t result;

  result = qword_100822980;
  if (!qword_100822980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppArtwork, &type metadata for AppArtwork);
    atomic_store(result, (unint64_t *)&qword_100822980);
  }
  return result;
}

uint64_t sub_10015AC4C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C646E7562, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10015ADA0(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  _BYTE v31[128];
  __int128 v32;
  __int128 v33;
  _OWORD v34[8];
  _OWORD v35[10];
  _QWORD v36[16];
  __int128 v37;
  __int128 v38;
  _OWORD v39[8];
  char v40;

  v30 = sub_100047110(&qword_100822A78);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015ABC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppAttributes.CodingKeys, &type metadata for AppAttributes.CodingKeys, v10, v8, v9);
  if (v2)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = v5;
    v29 = a2;
    LOBYTE(v35[0]) = 0;
    v12 = v30;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v35, v30);
    v15 = v14;
    *(_QWORD *)&v37 = v13;
    *((_QWORD *)&v37 + 1) = v14;
    LOBYTE(v35[0]) = 1;
    v28 = v13;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v35, v12);
    v18 = v17;
    *(_QWORD *)&v27 = v16;
    *(_QWORD *)&v38 = v16;
    *((_QWORD *)&v38 + 1) = v17;
    v40 = 2;
    sub_10015EF90();
    swift_bridgeObjectRetain(v18);
    *((_QWORD *)&v27 + 1) = v18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &type metadata for AppArtwork);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    sub_100045AD4((uint64_t)v36, (uint64_t)v31, &qword_100822968);
    sub_100045AD4((uint64_t)v31, (uint64_t)v39, &qword_100822968);
    v19 = *((_QWORD *)&v27 + 1);
    *(_QWORD *)&v32 = v28;
    *((_QWORD *)&v32 + 1) = v15;
    v33 = v27;
    sub_100045AD4((uint64_t)v31, (uint64_t)v34, &qword_100822968);
    sub_10015EFD4((uint64_t)&v32);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
    v35[6] = v39[4];
    v35[7] = v39[5];
    v35[8] = v39[6];
    v35[9] = v39[7];
    v35[2] = v39[0];
    v35[3] = v39[1];
    v35[4] = v39[2];
    v35[5] = v39[3];
    v35[0] = v37;
    v35[1] = v38;
    sub_10015F098((uint64_t)v35);
    v20 = v34[5];
    v21 = v29;
    v29[6] = v34[4];
    v21[7] = v20;
    v22 = v34[7];
    v21[8] = v34[6];
    v21[9] = v22;
    v23 = v34[1];
    v21[2] = v34[0];
    v21[3] = v23;
    v24 = v34[3];
    v21[4] = v34[2];
    v21[5] = v24;
    v25 = v33;
    *v21 = v32;
    v21[1] = v25;
  }
}

unint64_t sub_10015B0A0()
{
  unint64_t result;

  result = qword_100822990;
  if (!qword_100822990)
  {
    result = swift_getWitnessTable(&unk_1006278E8, &type metadata for AppArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822990);
  }
  return result;
}

unint64_t sub_10015B0E4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10077F580, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

void sub_10015B12C(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;

  v60 = sub_100047110(&qword_100822A70);
  v5 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100016804(a1, v8);
  v10 = sub_10015B0A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppArtwork.CodingKeys, &type metadata for AppArtwork.CodingKeys, v10, v8, v9);
  if (v2)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  }
  else
  {
    v11 = v5;
    v57 = a2;
    LOBYTE(v69) = 0;
    v12 = v60;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    v15 = v14;
    v56 = v13;
    v86 = v14 & 1;
    LOBYTE(v69) = 1;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v12);
    v17 = a1;
    v55 = v16;
    v85 = v18 & 1;
    LOBYTE(v69) = 2;
    v19 = v18;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    v53 = v19;
    v54 = v20;
    LOBYTE(v69) = 3;
    v22 = v21;
    swift_bridgeObjectRetain(v21);
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    v59 = v22;
    v52 = v23;
    LOBYTE(v69) = 4;
    v25 = v24;
    swift_bridgeObjectRetain(v24);
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    v58 = v25;
    LOBYTE(v69) = 5;
    v27 = v26;
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)&v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    *((_QWORD *)&v50 + 1) = v28;
    v29 = v27;
    LOBYTE(v69) = 6;
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)&v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v69, v60);
    *((_QWORD *)&v49 + 1) = v30;
    v87 = 7;
    swift_bridgeObjectRetain(v30);
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v87, v60);
    v32 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33 = v31;
    v35 = v34;
    v48 = v34;
    v32(v7, v60);
    *(_QWORD *)&v61 = v56;
    BYTE8(v61) = v15 & 1;
    *(_QWORD *)&v62 = v55;
    BYTE8(v62) = v53 & 1;
    v37 = v58;
    v36 = v59;
    *(_QWORD *)&v63 = v54;
    *((_QWORD *)&v63 + 1) = v59;
    *(_QWORD *)&v64 = v52;
    *((_QWORD *)&v64 + 1) = v58;
    v38 = *((_QWORD *)&v50 + 1);
    *(_QWORD *)&v65 = v51;
    *((_QWORD *)&v65 + 1) = v29;
    v47 = v29;
    v39 = *((_QWORD *)&v49 + 1);
    v66 = v50;
    v67 = v49;
    *(_QWORD *)&v68 = v33;
    *((_QWORD *)&v68 + 1) = v35;
    sub_10015EEA8(&v61);
    v40 = v36;
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v37);
    v41 = v47;
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v39);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v17);
    v69 = v56;
    v70 = v86;
    v71 = v55;
    v72 = v85;
    v73 = v54;
    v74 = v40;
    v75 = v52;
    v76 = v37;
    v77 = v51;
    v78 = v41;
    v79 = v50;
    v80 = v38;
    v81 = v49;
    v82 = v39;
    v83 = v33;
    v84 = v48;
    sub_10015EF1C(&v69);
    v42 = v66;
    v43 = v57;
    v57[4] = v65;
    v43[5] = v42;
    v44 = v68;
    v43[6] = v67;
    v43[7] = v44;
    v45 = v62;
    *v43 = v61;
    v43[1] = v45;
    v46 = v64;
    v43[2] = v63;
    v43[3] = v46;
  }
}

ValueMetadata *type metadata accessor for EditorialItemsList()
{
  return &type metadata for EditorialItemsList;
}

uint64_t destroy for EditorialItem(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  result = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s10FitnessApp13EditorialItemVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  swift_bridgeObjectRetain(v3);
  if (v4 == 1)
  {
    v5 = 1;
  }
  else
  {
    if (v4 != 2)
    {
      a1[2] = v4;
      swift_bridgeObjectRetain(v4);
      return a1;
    }
    v5 = 2;
  }
  a1[2] = v5;
  return a1;
}

_QWORD *assignWithCopy for EditorialItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1 + 2;
  v7 = a1[2];
  v8 = a2[2];
  if (v7 != 2)
  {
    if (v8 == 2)
    {
      sub_10015B840(a1 + 2);
    }
    else
    {
      if (v7 == 1)
      {
        if (v8 != 1)
          goto LABEL_10;
LABEL_9:
        v9 = 1;
        goto LABEL_14;
      }
      if (v8 != 1)
      {
        *v6 = v8;
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRelease(v7);
        return a1;
      }
      sub_1000478F4(a1 + 2);
    }
    v9 = a2[2];
    goto LABEL_14;
  }
  if (v8 == 1)
    goto LABEL_9;
  if (v8 == 2)
  {
    v9 = 2;
LABEL_14:
    *v6 = v9;
    return a1;
  }
LABEL_10:
  *v6 = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *sub_10015B840(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *assignWithTake for EditorialItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v7 = a1 + 2;
  v6 = a1[2];
  v8 = a2[2];
  if (v6 != 2)
  {
    if (v8 == 2)
    {
      sub_10015B840(a1 + 2);
      v8 = 2;
    }
    else if (v6 != 1)
    {
      if (v8 != 1)
      {
        *v7 = v8;
        swift_bridgeObjectRelease(v6);
        return a1;
      }
      sub_1000478F4(a1 + 2);
      v8 = 1;
    }
  }
  *v7 = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EditorialItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialItem()
{
  return &type metadata for EditorialItem;
}

uint64_t *initializeBufferWithCopyOfBuffer for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 != 1)
    v3 = swift_bridgeObjectRetain(v3);
  *a1 = v3;
  return a1;
}

uint64_t destroy for Relationship(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *assignWithCopy for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 == 1)
  {
    if (v4 != 1)
    {
      *a1 = v4;
      swift_bridgeObjectRetain(v4);
      return a1;
    }
    v5 = 1;
  }
  else
  {
    if (v4 != 1)
    {
      *a1 = v4;
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRelease(v3);
      return a1;
    }
    sub_1000478F4(a1);
    v5 = *a2;
  }
  *a1 = v5;
  return a1;
}

uint64_t *assignWithTake for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != 1)
  {
    if (v4 != 1)
    {
      *a1 = v4;
      swift_bridgeObjectRelease(v3);
      return a1;
    }
    sub_1000478F4(a1);
    v4 = 1;
  }
  *a1 = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for Relationship(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for Relationship(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Relationship()
{
  return &type metadata for Relationship;
}

uint64_t *assignWithCopy for CardContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *assignWithTake for CardContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t _s10FitnessApp11CardContentVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s10FitnessApp11CardContentVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardContent()
{
  return &type metadata for CardContent;
}

uint64_t destroy for CardItem(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(a1[1]);
  result = a1[3];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    v3 = a1[5];
    if ((unint64_t)(v3 - 1) >= 2)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(a1[7]);
      v4 = a1[13];
      if (v4 != 1)
      {
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(a1[15]);
        swift_bridgeObjectRelease(a1[17]);
        swift_bridgeObjectRelease(a1[19]);
        swift_bridgeObjectRelease(a1[21]);
        swift_bridgeObjectRelease(a1[23]);
      }
    }
    return swift_bridgeObjectRelease(a1[25]);
  }
  return result;
}

uint64_t initializeWithCopy for CardItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v5 == 1)
  {
    v6 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v6;
    v7 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v7;
    v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    v10 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v10;
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v12 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v5);
    if (v12 == 1 || v12 == 2)
    {
      v13 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v13;
      v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      v15 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v15;
      v16 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v16;
      v17 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v17;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v12;
      v18 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v18;
      v19 = (_OWORD *)(a1 + 64);
      v20 = (_OWORD *)(a2 + 64);
      v21 = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v18);
      if (v21 == 1)
      {
        v22 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v22;
        v23 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v23;
        v24 = *(_OWORD *)(a2 + 80);
        *v19 = *v20;
        *(_OWORD *)(a1 + 80) = v24;
        v25 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v25;
      }
      else
      {
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = v21;
        v26 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 120) = v26;
        v27 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = v27;
        v28 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 152) = v28;
        v29 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = v29;
        v30 = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = v30;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v30);
      }
    }
    v31 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v31;
    swift_bridgeObjectRetain(v31);
  }
  return a1;
}

uint64_t assignWithCopy for CardItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (_OWORD *)(a1 + 16);
  v7 = (__int128 *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 != 1)
  {
    if (v9 == 1)
    {
      sub_10015C5E8((_QWORD *)(a1 + 16));
      v19 = *(_OWORD *)(a2 + 64);
      v21 = *v7;
      v20 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v19;
      *v6 = v21;
      *(_OWORD *)(a1 + 32) = v20;
      v22 = *(_OWORD *)(a2 + 128);
      v24 = *(_OWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v22;
      *(_OWORD *)(a1 + 80) = v24;
      *(_OWORD *)(a1 + 96) = v23;
      v25 = *(_OWORD *)(a2 + 192);
      v27 = *(_OWORD *)(a2 + 144);
      v26 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v25;
      *(_OWORD *)(a1 + 144) = v27;
      *(_OWORD *)(a1 + 160) = v26;
      return a1;
    }
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v38 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v38;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRelease(v8);
    v39 = (_OWORD *)(a1 + 32);
    v40 = (_OWORD *)(a2 + 32);
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a2 + 40);
    if (v41 == 2)
    {
      if (v42 == 1 || v42 == 2)
        goto LABEL_13;
LABEL_20:
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v61 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v61;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v62 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v62;
      v63 = (_OWORD *)(a1 + 64);
      v64 = (__int128 *)(a2 + 64);
      v65 = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v62);
      if (v65 == 1)
      {
        v66 = *v64;
        v67 = *(_OWORD *)(a2 + 80);
        v68 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v68;
        *v63 = v66;
        *(_OWORD *)(a1 + 80) = v67;
        v69 = *(_OWORD *)(a2 + 128);
        v70 = *(_OWORD *)(a2 + 144);
        v71 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v71;
        *(_OWORD *)(a1 + 128) = v69;
        *(_OWORD *)(a1 + 144) = v70;
        goto LABEL_28;
      }
      v87 = *(_QWORD *)v64;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v63 = v87;
LABEL_27:
      v88 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v88;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v89 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v89;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v90 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v90;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v91 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v91;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v92 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v92;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v93 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 168) = v93;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v94 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v94;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRetain(v94);
      goto LABEL_28;
    }
    if (v42 == 2)
    {
      sub_10015C5BC((_QWORD *)(a1 + 32));
    }
    else
    {
      if (v41 == 1)
      {
        if (v42 == 1)
        {
LABEL_13:
          v43 = *(_OWORD *)(a2 + 48);
          *v39 = *v40;
          *(_OWORD *)(a1 + 48) = v43;
          v44 = *(_OWORD *)(a2 + 64);
          v45 = *(_OWORD *)(a2 + 80);
          v46 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v46;
          *(_OWORD *)(a1 + 64) = v44;
          *(_OWORD *)(a1 + 80) = v45;
          v47 = *(_OWORD *)(a2 + 128);
          v48 = *(_OWORD *)(a2 + 144);
          v49 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v49;
          *(_OWORD *)(a1 + 128) = v47;
          *(_OWORD *)(a1 + 144) = v48;
LABEL_28:
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
          v95 = *(_QWORD *)(a2 + 200);
          v96 = *(_QWORD *)(a1 + 200);
          *(_QWORD *)(a1 + 200) = v95;
          swift_bridgeObjectRetain(v95);
          swift_bridgeObjectRelease(v96);
          return a1;
        }
        goto LABEL_20;
      }
      if (v42 != 1)
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v98 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 40) = v98;
        swift_bridgeObjectRetain(v98);
        swift_bridgeObjectRelease(v41);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v99 = *(_QWORD *)(a2 + 56);
        v100 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v99;
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease(v100);
        v101 = (_OWORD *)(a1 + 64);
        v102 = (__int128 *)(a2 + 64);
        v103 = *(_QWORD *)(a1 + 104);
        v104 = *(_QWORD *)(a2 + 104);
        if (v103 != 1)
        {
          if (v104 == 1)
          {
            sub_10015C564((_QWORD *)(a1 + 64));
            v111 = *(_OWORD *)(a2 + 112);
            v113 = *v102;
            v112 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 112) = v111;
            *v101 = v113;
            *(_OWORD *)(a1 + 80) = v112;
            v114 = *(_OWORD *)(a2 + 176);
            v116 = *(_OWORD *)(a2 + 128);
            v115 = *(_OWORD *)(a2 + 144);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
            *(_OWORD *)(a1 + 176) = v114;
            *(_OWORD *)(a1 + 128) = v116;
            *(_OWORD *)(a1 + 144) = v115;
          }
          else
          {
            v118 = *(_QWORD *)v102;
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
            *(_QWORD *)v101 = v118;
            v119 = *(_QWORD *)(a2 + 80);
            *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
            *(_QWORD *)(a1 + 80) = v119;
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
            v120 = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 104) = v120;
            swift_bridgeObjectRetain(v120);
            swift_bridgeObjectRelease(v103);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
            v121 = *(_QWORD *)(a2 + 120);
            v122 = *(_QWORD *)(a1 + 120);
            *(_QWORD *)(a1 + 120) = v121;
            swift_bridgeObjectRetain(v121);
            swift_bridgeObjectRelease(v122);
            *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
            v123 = *(_QWORD *)(a2 + 136);
            v124 = *(_QWORD *)(a1 + 136);
            *(_QWORD *)(a1 + 136) = v123;
            swift_bridgeObjectRetain(v123);
            swift_bridgeObjectRelease(v124);
            *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
            v125 = *(_QWORD *)(a2 + 152);
            v126 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v125;
            swift_bridgeObjectRetain(v125);
            swift_bridgeObjectRelease(v126);
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
            v127 = *(_QWORD *)(a2 + 168);
            v128 = *(_QWORD *)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v127;
            swift_bridgeObjectRetain(v127);
            swift_bridgeObjectRelease(v128);
            *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
            v129 = *(_QWORD *)(a2 + 184);
            v130 = *(_QWORD *)(a1 + 184);
            *(_QWORD *)(a1 + 184) = v129;
            swift_bridgeObjectRetain(v129);
            swift_bridgeObjectRelease(v130);
          }
          goto LABEL_28;
        }
        if (v104 == 1)
        {
          v105 = *v102;
          v106 = *(_OWORD *)(a2 + 80);
          v107 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v107;
          *v101 = v105;
          *(_OWORD *)(a1 + 80) = v106;
          v108 = *(_OWORD *)(a2 + 128);
          v109 = *(_OWORD *)(a2 + 144);
          v110 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v110;
          *(_OWORD *)(a1 + 128) = v108;
          *(_OWORD *)(a1 + 144) = v109;
          goto LABEL_28;
        }
        v117 = *(_QWORD *)v102;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v101 = v117;
        goto LABEL_27;
      }
      sub_10015C590((_QWORD *)(a1 + 32));
    }
    v80 = *(_OWORD *)(a2 + 48);
    *v39 = *v40;
    *(_OWORD *)(a1 + 48) = v80;
    v81 = *(_OWORD *)(a2 + 112);
    v83 = *(_OWORD *)(a2 + 64);
    v82 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v81;
    *(_OWORD *)(a1 + 64) = v83;
    *(_OWORD *)(a1 + 80) = v82;
    v84 = *(_OWORD *)(a2 + 176);
    v86 = *(_OWORD *)(a2 + 128);
    v85 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v84;
    *(_OWORD *)(a1 + 128) = v86;
    *(_OWORD *)(a1 + 144) = v85;
    goto LABEL_28;
  }
  if (v9 == 1)
  {
    v10 = *v7;
    v11 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v12;
    *v6 = v10;
    *(_OWORD *)(a1 + 32) = v11;
    v13 = *(_OWORD *)(a2 + 80);
    v14 = *(_OWORD *)(a2 + 96);
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 96) = v14;
    v16 = *(_OWORD *)(a2 + 144);
    v17 = *(_OWORD *)(a2 + 160);
    v18 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v18;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 160) = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v28;
    v29 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v28);
    if (v29 == 1 || v29 == 2)
    {
      v30 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v30;
      v31 = *(_OWORD *)(a2 + 64);
      v32 = *(_OWORD *)(a2 + 80);
      v33 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v33;
      *(_OWORD *)(a1 + 64) = v31;
      *(_OWORD *)(a1 + 80) = v32;
      v34 = *(_OWORD *)(a2 + 128);
      v35 = *(_OWORD *)(a2 + 144);
      v36 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v36;
      *(_OWORD *)(a1 + 128) = v34;
      *(_OWORD *)(a1 + 144) = v35;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v50 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v50;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v51 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v51;
      v52 = (_OWORD *)(a1 + 64);
      v53 = (__int128 *)(a2 + 64);
      v54 = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      if (v54 == 1)
      {
        v55 = *v53;
        v56 = *(_OWORD *)(a2 + 80);
        v57 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v57;
        *v52 = v55;
        *(_OWORD *)(a1 + 80) = v56;
        v58 = *(_OWORD *)(a2 + 128);
        v59 = *(_OWORD *)(a2 + 144);
        v60 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v60;
        *(_OWORD *)(a1 + 128) = v58;
        *(_OWORD *)(a1 + 144) = v59;
      }
      else
      {
        v72 = *(_QWORD *)v53;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v52 = v72;
        v73 = *(_QWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        *(_QWORD *)(a1 + 80) = v73;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        v74 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v74;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        v75 = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 120) = v75;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        v76 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 136) = v76;
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        v77 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 152) = v77;
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        v78 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 168) = v78;
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        v79 = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 184) = v79;
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
      }
    }
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v37 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v37;
    swift_bridgeObjectRetain(v37);
  }
  return a1;
}

_QWORD *sub_10015C564(_QWORD *a1)
{
  destroy for AppArtwork(a1);
  return a1;
}

_QWORD *sub_10015C590(_QWORD *a1)
{
  destroy for AppAttributes(a1);
  return a1;
}

_QWORD *sub_10015C5BC(_QWORD *a1)
{
  destroy for AppPlatform(a1);
  return a1;
}

_QWORD *sub_10015C5E8(_QWORD *a1)
{
  destroy for Attributes(a1);
  return a1;
}

__n128 initializeWithTake for CardItem(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for CardItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 != 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRelease(v6);
    v14 = *(_QWORD *)(a1 + 40);
    if (v14 != 2)
    {
      v15 = *(_QWORD *)(a2 + 40);
      if (v15 == 2)
      {
        sub_10015C5BC((_QWORD *)(a1 + 32));
      }
      else if (v14 != 1)
      {
        if (v15 != 1)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 40) = v15;
          swift_bridgeObjectRelease(v14);
          v24 = *(_QWORD *)(a2 + 56);
          v25 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          *(_QWORD *)(a1 + 56) = v24;
          swift_bridgeObjectRelease(v25);
          v26 = (_QWORD *)(a1 + 64);
          v27 = (_QWORD *)(a2 + 64);
          v28 = *(_QWORD *)(a1 + 104);
          if (v28 != 1)
          {
            v29 = *(_QWORD *)(a2 + 104);
            if (v29 != 1)
            {
              *v26 = *v27;
              *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
              *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
              *(_QWORD *)(a1 + 104) = v29;
              swift_bridgeObjectRelease(v28);
              v34 = *(_QWORD *)(a2 + 120);
              v35 = *(_QWORD *)(a1 + 120);
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
              *(_QWORD *)(a1 + 120) = v34;
              swift_bridgeObjectRelease(v35);
              v36 = *(_QWORD *)(a2 + 136);
              v37 = *(_QWORD *)(a1 + 136);
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
              *(_QWORD *)(a1 + 136) = v36;
              swift_bridgeObjectRelease(v37);
              v38 = *(_QWORD *)(a2 + 152);
              v39 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
              *(_QWORD *)(a1 + 152) = v38;
              swift_bridgeObjectRelease(v39);
              v40 = *(_QWORD *)(a2 + 168);
              v41 = *(_QWORD *)(a1 + 168);
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
              *(_QWORD *)(a1 + 168) = v40;
              swift_bridgeObjectRelease(v41);
              v42 = *(_QWORD *)(a2 + 184);
              v43 = *(_QWORD *)(a1 + 184);
              *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
              *(_QWORD *)(a1 + 184) = v42;
              swift_bridgeObjectRelease(v43);
              goto LABEL_12;
            }
            sub_10015C564((_QWORD *)(a1 + 64));
          }
          v30 = *(_OWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 144) = v30;
          v31 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v31;
          v32 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)v26 = *(_OWORD *)v27;
          *(_OWORD *)(a1 + 80) = v32;
          v33 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v33;
LABEL_12:
          v21 = *(_QWORD *)(a2 + 200);
          v22 = *(_QWORD *)(a1 + 200);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
          *(_QWORD *)(a1 + 200) = v21;
          swift_bridgeObjectRelease(v22);
          return a1;
        }
        sub_10015C590((_QWORD *)(a1 + 32));
      }
    }
    v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    v17 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v17;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    v19 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    v20 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v20;
    goto LABEL_12;
  }
  sub_10015C5E8((_QWORD *)(a1 + 16));
LABEL_4:
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v11;
  v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for CardItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CardItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardItem()
{
  return &type metadata for CardItem;
}

uint64_t destroy for Attributes(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  v2 = a1[3];
  if ((unint64_t)(v2 - 1) >= 2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[5]);
    v3 = a1[11];
    if (v3 != 1)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(a1[13]);
      swift_bridgeObjectRelease(a1[15]);
      swift_bridgeObjectRelease(a1[17]);
      swift_bridgeObjectRelease(a1[19]);
      swift_bridgeObjectRelease(a1[21]);
    }
  }
  return swift_bridgeObjectRelease(a1[23]);
}

uint64_t initializeWithCopy for Attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v6 == 1 || v6 == 2)
  {
    v7 = v5[7];
    *(_OWORD *)(a1 + 112) = v5[6];
    *(_OWORD *)(a1 + 128) = v7;
    v8 = v5[9];
    *(_OWORD *)(a1 + 144) = v5[8];
    *(_OWORD *)(a1 + 160) = v8;
    v9 = v5[3];
    *(_OWORD *)(a1 + 48) = v5[2];
    *(_OWORD *)(a1 + 64) = v9;
    v10 = v5[5];
    *(_OWORD *)(a1 + 80) = v5[4];
    *(_OWORD *)(a1 + 96) = v10;
    v11 = v5[1];
    *(_OWORD *)(a1 + 16) = *v5;
    *(_OWORD *)(a1 + 32) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v12;
    v13 = (_OWORD *)(a1 + 48);
    v14 = (_OWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v12);
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v16;
      v17 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v17;
      v18 = *(_OWORD *)(a2 + 64);
      *v13 = *v14;
      *(_OWORD *)(a1 + 64) = v18;
      v19 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v19;
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v15;
      v20 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v20;
      v21 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v21;
      v22 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v22;
      v23 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v23;
      v24 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v24;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
    }
  }
  v25 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t assignWithCopy for Attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 == 2)
  {
    if (v9 == 1 || v9 == 2)
      goto LABEL_4;
LABEL_9:
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v18;
    v19 = (_OWORD *)(a1 + 48);
    v20 = (__int128 *)(a2 + 48);
    v21 = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    if (v21 == 1)
    {
      v22 = *v20;
      v23 = *(_OWORD *)(a2 + 64);
      v24 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v24;
      *v19 = v22;
      *(_OWORD *)(a1 + 64) = v23;
      v25 = *(_OWORD *)(a2 + 112);
      v26 = *(_OWORD *)(a2 + 128);
      v27 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v27;
      *(_OWORD *)(a1 + 112) = v25;
      *(_OWORD *)(a1 + 128) = v26;
      goto LABEL_16;
    }
    v35 = *(_QWORD *)v20;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v19 = v35;
LABEL_15:
    v36 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v36;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v37 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v37;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v38 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v38;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v39 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v39;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v40 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v40;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v41 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v41;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v42 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 168) = v42;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    sub_10015C5BC((_QWORD *)(a1 + 16));
LABEL_13:
    v28 = *(_OWORD *)(a2 + 32);
    *v6 = *v7;
    *(_OWORD *)(a1 + 32) = v28;
    v29 = *(_OWORD *)(a2 + 96);
    v31 = *(_OWORD *)(a2 + 48);
    v30 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v29;
    *(_OWORD *)(a1 + 48) = v31;
    *(_OWORD *)(a1 + 64) = v30;
    v32 = *(_OWORD *)(a2 + 160);
    v34 = *(_OWORD *)(a2 + 112);
    v33 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v32;
    *(_OWORD *)(a1 + 112) = v34;
    *(_OWORD *)(a1 + 128) = v33;
    goto LABEL_16;
  }
  if (v8 == 1)
  {
    if (v9 == 1)
    {
LABEL_4:
      v10 = *(_OWORD *)(a2 + 32);
      *v6 = *v7;
      *(_OWORD *)(a1 + 32) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      v12 = *(_OWORD *)(a2 + 64);
      v13 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v12;
      v14 = *(_OWORD *)(a2 + 112);
      v15 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v16;
      *(_OWORD *)(a1 + 112) = v14;
      *(_OWORD *)(a1 + 128) = v15;
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  if (v9 == 1)
  {
    sub_10015C590((_QWORD *)(a1 + 16));
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v47 = *(_QWORD *)(a2 + 40);
  v48 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = (_OWORD *)(a1 + 48);
  v50 = (__int128 *)(a2 + 48);
  v51 = *(_QWORD *)(a1 + 88);
  v52 = *(_QWORD *)(a2 + 88);
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v53 = *v50;
      v54 = *(_OWORD *)(a2 + 64);
      v55 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v55;
      *v49 = v53;
      *(_OWORD *)(a1 + 64) = v54;
      v56 = *(_OWORD *)(a2 + 112);
      v57 = *(_OWORD *)(a2 + 128);
      v58 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v58;
      *(_OWORD *)(a1 + 112) = v56;
      *(_OWORD *)(a1 + 128) = v57;
      goto LABEL_16;
    }
    v65 = *(_QWORD *)v50;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v49 = v65;
    goto LABEL_15;
  }
  if (v52 == 1)
  {
    sub_10015C564((_QWORD *)(a1 + 48));
    v59 = *(_OWORD *)(a2 + 96);
    v61 = *v50;
    v60 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v59;
    *v49 = v61;
    *(_OWORD *)(a1 + 64) = v60;
    v62 = *(_OWORD *)(a2 + 160);
    v64 = *(_OWORD *)(a2 + 112);
    v63 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v62;
    *(_OWORD *)(a1 + 112) = v64;
    *(_OWORD *)(a1 + 128) = v63;
  }
  else
  {
    v66 = *(_QWORD *)v50;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v49 = v66;
    v67 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v67;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v68 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v68;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRelease(v51);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v69 = *(_QWORD *)(a2 + 104);
    v70 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v69;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRelease(v70);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v71 = *(_QWORD *)(a2 + 120);
    v72 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v71;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v72);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v73 = *(_QWORD *)(a2 + 136);
    v74 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v73;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRelease(v74);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v75 = *(_QWORD *)(a2 + 152);
    v76 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v75;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRelease(v76);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v77 = *(_QWORD *)(a2 + 168);
    v78 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRelease(v78);
  }
LABEL_16:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v43 = *(_QWORD *)(a2 + 184);
  v44 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  return a1;
}

__n128 initializeWithTake for Attributes(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for Attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 == 2)
    goto LABEL_7;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 == 2)
  {
    sub_10015C5BC((_QWORD *)(a1 + 16));
LABEL_7:
    v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    v9 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v9;
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    v11 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    goto LABEL_8;
  }
  if (v6 == 1)
    goto LABEL_7;
  if (v7 == 1)
  {
    sub_10015C590((_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease(v6);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = (_QWORD *)(a1 + 48);
  v19 = (_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a1 + 88);
  if (v20 != 1)
  {
    v21 = *(_QWORD *)(a2 + 88);
    if (v21 != 1)
    {
      *v18 = *v19;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v21;
      swift_bridgeObjectRelease(v20);
      v26 = *(_QWORD *)(a2 + 104);
      v27 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v26;
      swift_bridgeObjectRelease(v27);
      v28 = *(_QWORD *)(a2 + 120);
      v29 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v28;
      swift_bridgeObjectRelease(v29);
      v30 = *(_QWORD *)(a2 + 136);
      v31 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v30;
      swift_bridgeObjectRelease(v31);
      v32 = *(_QWORD *)(a2 + 152);
      v33 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v32;
      swift_bridgeObjectRelease(v33);
      v34 = *(_QWORD *)(a2 + 168);
      v35 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v34;
      swift_bridgeObjectRelease(v35);
      goto LABEL_8;
    }
    sub_10015C564((_QWORD *)(a1 + 48));
  }
  v22 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v22;
  v23 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v23;
  v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(a1 + 64) = v24;
  v25 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v25;
LABEL_8:
  v13 = *(_QWORD *)(a2 + 184);
  v14 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Attributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 192) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Attributes()
{
  return &type metadata for Attributes;
}

uint64_t destroy for AppPlatform(_QWORD *a1)
{
  uint64_t result;

  result = a1[1];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[3]);
    result = a1[9];
    if (result != 1)
    {
      swift_bridgeObjectRelease(result);
      swift_bridgeObjectRelease(a1[11]);
      swift_bridgeObjectRelease(a1[13]);
      swift_bridgeObjectRelease(a1[15]);
      swift_bridgeObjectRelease(a1[17]);
      return swift_bridgeObjectRelease(a1[19]);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AppPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    v6 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v10;
    v11 = (_OWORD *)(a1 + 32);
    v12 = (_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v10);
    if (v13 == 1)
    {
      v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v14;
      v15 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v15;
      v16 = *(_OWORD *)(a2 + 48);
      *v11 = *v12;
      *(_OWORD *)(a1 + 48) = v16;
      v17 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v17;
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v13;
      v18 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v18;
      v19 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v19;
      v20 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v20;
      v21 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v21;
      v22 = *(_QWORD *)(a2 + 144);
      v23 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v22;
      *(_QWORD *)(a1 + 152) = v23;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v23);
    }
  }
  return a1;
}

uint64_t assignWithCopy for AppPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      v10 = *(_OWORD *)(a2 + 96);
      v11 = *(_OWORD *)(a2 + 112);
      v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 112) = v11;
      return a1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v20 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v21 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v21;
    v22 = (_OWORD *)(a1 + 32);
    v23 = (__int128 *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    if (v24 == 1)
    {
      v25 = *v23;
      v26 = *(_OWORD *)(a2 + 48);
      v27 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v27;
      *v22 = v25;
      *(_OWORD *)(a1 + 48) = v26;
      v28 = *(_OWORD *)(a2 + 96);
      v29 = *(_OWORD *)(a2 + 112);
      v30 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v30;
      *(_OWORD *)(a1 + 96) = v28;
      *(_OWORD *)(a1 + 112) = v29;
      return a1;
    }
    v44 = *(_QWORD *)v23;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)v22 = v44;
LABEL_15:
    v52 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v52;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v53 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v53;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v54 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v54;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v55 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v55;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v56 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v56;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v57 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v57;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v58 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v58;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v58);
    return a1;
  }
  if (v5 == 1)
  {
    sub_10015C590((_QWORD *)a1);
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    v16 = *(_OWORD *)(a2 + 32);
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 32) = v16;
    *(_OWORD *)(a1 + 48) = v15;
    v17 = *(_OWORD *)(a2 + 144);
    v19 = *(_OWORD *)(a2 + 96);
    v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    *(_OWORD *)(a1 + 96) = v19;
    *(_OWORD *)(a1 + 112) = v18;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v31 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a2 + 24);
  v33 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = (_OWORD *)(a1 + 32);
  v35 = (__int128 *)(a2 + 32);
  v36 = *(_QWORD *)(a1 + 72);
  v37 = *(_QWORD *)(a2 + 72);
  if (v36 == 1)
  {
    if (v37 == 1)
    {
      v38 = *v35;
      v39 = *(_OWORD *)(a2 + 48);
      v40 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v40;
      *v34 = v38;
      *(_OWORD *)(a1 + 48) = v39;
      v41 = *(_OWORD *)(a2 + 96);
      v42 = *(_OWORD *)(a2 + 112);
      v43 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v43;
      *(_OWORD *)(a1 + 96) = v41;
      *(_OWORD *)(a1 + 112) = v42;
      return a1;
    }
    v51 = *(_QWORD *)v35;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)v34 = v51;
    goto LABEL_15;
  }
  if (v37 == 1)
  {
    sub_10015C564((_QWORD *)(a1 + 32));
    v45 = *(_OWORD *)(a2 + 80);
    v47 = *v35;
    v46 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v45;
    *v34 = v47;
    *(_OWORD *)(a1 + 48) = v46;
    v48 = *(_OWORD *)(a2 + 144);
    v50 = *(_OWORD *)(a2 + 96);
    v49 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v48;
    *(_OWORD *)(a1 + 96) = v50;
    *(_OWORD *)(a1 + 112) = v49;
  }
  else
  {
    v59 = *(_QWORD *)v35;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)v34 = v59;
    v60 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v60;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v61 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v61;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRelease(v36);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v62 = *(_QWORD *)(a2 + 88);
    v63 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease(v63);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v64 = *(_QWORD *)(a2 + 104);
    v65 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v64;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v66 = *(_QWORD *)(a2 + 120);
    v67 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease(v67);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v68 = *(_QWORD *)(a2 + 136);
    v69 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v68;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRelease(v69);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v70 = *(_QWORD *)(a2 + 152);
    v71 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v70;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRelease(v71);
  }
  return a1;
}

__n128 initializeWithTake for AppAttributes(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for AppPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 1)
  {
    sub_10015C590((_QWORD *)a1);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v6;
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = (_QWORD *)(a1 + 32);
  v14 = (_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15 != 1)
  {
    v16 = *(_QWORD *)(a2 + 72);
    if (v16 != 1)
    {
      *v13 = *v14;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v16;
      swift_bridgeObjectRelease(v15);
      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v21;
      swift_bridgeObjectRelease(v22);
      v23 = *(_QWORD *)(a2 + 104);
      v24 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v23;
      swift_bridgeObjectRelease(v24);
      v25 = *(_QWORD *)(a2 + 120);
      v26 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v25;
      swift_bridgeObjectRelease(v26);
      v27 = *(_QWORD *)(a2 + 136);
      v28 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v27;
      swift_bridgeObjectRelease(v28);
      v29 = *(_QWORD *)(a2 + 152);
      v30 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v29;
      swift_bridgeObjectRelease(v30);
      return a1;
    }
    sub_10015C564((_QWORD *)(a1 + 32));
  }
  v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
  v18 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for AppPlatform(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AppPlatform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPlatform()
{
  return &type metadata for AppPlatform;
}

uint64_t destroy for AppAttributes(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = a1[9];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[11]);
    swift_bridgeObjectRelease(a1[13]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    return swift_bridgeObjectRelease(a1[19]);
  }
  return result;
}

uint64_t initializeWithCopy for AppAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_OWORD *)(a1 + 32);
  v7 = a2 + 32;
  v8 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(a1 + 112) = v9;
    v10 = *(_OWORD *)(v7 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v7 + 96);
    *(_OWORD *)(a1 + 144) = v10;
    v11 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 48) = v11;
    v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(a1 + 80) = v12;
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)v7;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 + 8);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    v13 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v13;
    v14 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v14;
    v15 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v15;
    v16 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v16;
    v17 = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v17;
    *(_QWORD *)(a1 + 152) = v18;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

uint64_t assignWithCopy for AppAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_OWORD *)(a1 + 32);
  v9 = (__int128 *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a2 + 72);
  if (v10 == 1)
  {
    if (v11 == 1)
    {
      v12 = *v9;
      v13 = *(_OWORD *)(a2 + 48);
      v14 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v14;
      *v8 = v12;
      *(_OWORD *)(a1 + 48) = v13;
      v15 = *(_OWORD *)(a2 + 96);
      v16 = *(_OWORD *)(a2 + 112);
      v17 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v17;
      *(_OWORD *)(a1 + 96) = v15;
      *(_OWORD *)(a1 + 112) = v16;
    }
    else
    {
      v24 = *(_QWORD *)v9;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v8 = v24;
      v25 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v26 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v26;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v27 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v27;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v28 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v28;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v29 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v29;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v30 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 136) = v30;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v31 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v31;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
    }
  }
  else if (v11 == 1)
  {
    sub_10015C564((_QWORD *)(a1 + 32));
    v18 = *(_OWORD *)(a2 + 80);
    v20 = *v9;
    v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v18;
    *v8 = v20;
    *(_OWORD *)(a1 + 48) = v19;
    v21 = *(_OWORD *)(a2 + 144);
    v23 = *(_OWORD *)(a2 + 96);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v21;
    *(_OWORD *)(a1 + 96) = v23;
    *(_OWORD *)(a1 + 112) = v22;
  }
  else
  {
    v32 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)v8 = v32;
    v33 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v33;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v34 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v35 = *(_QWORD *)(a2 + 88);
    v36 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v35;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRelease(v36);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v37 = *(_QWORD *)(a2 + 104);
    v38 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v38);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v39 = *(_QWORD *)(a2 + 120);
    v40 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v40);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v41 = *(_QWORD *)(a2 + 136);
    v42 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v42);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v43 = *(_QWORD *)(a2 + 152);
    v44 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v43;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRelease(v44);
  }
  return a1;
}

uint64_t assignWithTake for AppAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(a1 + 32);
  v9 = (_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10 != 1)
  {
    v11 = *(_QWORD *)(a2 + 72);
    if (v11 != 1)
    {
      *v8 = *v9;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v11;
      swift_bridgeObjectRelease(v10);
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v16;
      swift_bridgeObjectRelease(v17);
      v18 = *(_QWORD *)(a2 + 104);
      v19 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v18;
      swift_bridgeObjectRelease(v19);
      v20 = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v20;
      swift_bridgeObjectRelease(v21);
      v22 = *(_QWORD *)(a2 + 136);
      v23 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v22;
      swift_bridgeObjectRelease(v23);
      v24 = *(_QWORD *)(a2 + 152);
      v25 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v24;
      swift_bridgeObjectRelease(v25);
      return a1;
    }
    sub_10015C564((_QWORD *)(a1 + 32));
  }
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 48) = v14;
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAttributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppAttributes()
{
  return &type metadata for AppAttributes;
}

uint64_t destroy for AppArtwork(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for AppArtwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for AppArtwork(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = a2[4];
  v6 = a2[5];
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = a2[6];
  v8 = a2[7];
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = a2[8];
  v10 = a2[9];
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 80) = a2[10];
  v12 = a2[11];
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = a2[12];
  v14 = a2[13];
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 112) = a2[14];
  v16 = a2[15];
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for AppArtwork(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for AppArtwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppArtwork(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppArtwork(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppArtwork()
{
  return &type metadata for AppArtwork;
}

uint64_t getEnumTagSinglePayload for ActivityStatisticsUnit(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppArtwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10015E3F8 + 4 * byte_100626D25[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10015E42C + 4 * byte_100626D20[v4]))();
}

uint64_t sub_10015E42C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015E43CLL);
  return result;
}

uint64_t sub_10015E448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015E450);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10015E454(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E45C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppArtwork.CodingKeys()
{
  return &type metadata for AppArtwork.CodingKeys;
}

ValueMetadata *type metadata accessor for AppAttributes.CodingKeys()
{
  return &type metadata for AppAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for AppPlatform.CodingKeys()
{
  return &type metadata for AppPlatform.CodingKeys;
}

uint64_t _s10FitnessApp13AppAttributesV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10015E4F4 + 4 * byte_100626D2F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10015E528 + 4 * byte_100626D2A[v4]))();
}

uint64_t sub_10015E528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015E538);
  return result;
}

uint64_t sub_10015E544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015E54CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10015E550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Attributes.CodingKeys()
{
  return &type metadata for Attributes.CodingKeys;
}

ValueMetadata *type metadata accessor for CardItem.CodingKeys()
{
  return &type metadata for CardItem.CodingKeys;
}

ValueMetadata *type metadata accessor for CardContent.CodingKeys()
{
  return &type metadata for CardContent.CodingKeys;
}

ValueMetadata *type metadata accessor for Relationship.CodingKeys()
{
  return &type metadata for Relationship.CodingKeys;
}

uint64_t _s10FitnessApp8CardItemV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10015E5F4 + 4 * byte_100626D39[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015E628 + 4 * byte_100626D34[v4]))();
}

uint64_t sub_10015E628(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015E638);
  return result;
}

uint64_t sub_10015E644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015E64CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10015E650(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015E658(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditorialItem.CodingKeys()
{
  return &type metadata for EditorialItem.CodingKeys;
}

uint64_t _s10FitnessApp11AppPlatformV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10015E6B4 + 4 * byte_100626D3E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10015E6D4 + 4 * byte_100626D43[v4]))();
}

_BYTE *sub_10015E6B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10015E6D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015E6DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015E6E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015E6EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015E6F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EditorialItemsList.CodingKeys()
{
  return &type metadata for EditorialItemsList.CodingKeys;
}

unint64_t sub_10015E714()
{
  unint64_t result;

  result = qword_100822998;
  if (!qword_100822998)
  {
    result = swift_getWitnessTable(&unk_100627178, &type metadata for EditorialItemsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822998);
  }
  return result;
}

unint64_t sub_10015E75C()
{
  unint64_t result;

  result = qword_1008229A0;
  if (!qword_1008229A0)
  {
    result = swift_getWitnessTable(&unk_100627268, &type metadata for EditorialItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229A0);
  }
  return result;
}

unint64_t sub_10015E7A4()
{
  unint64_t result;

  result = qword_1008229A8;
  if (!qword_1008229A8)
  {
    result = swift_getWitnessTable(&unk_100627358, &type metadata for Relationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229A8);
  }
  return result;
}

unint64_t sub_10015E7EC()
{
  unint64_t result;

  result = qword_1008229B0;
  if (!qword_1008229B0)
  {
    result = swift_getWitnessTable(&unk_100627448, &type metadata for CardContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229B0);
  }
  return result;
}

unint64_t sub_10015E834()
{
  unint64_t result;

  result = qword_1008229B8;
  if (!qword_1008229B8)
  {
    result = swift_getWitnessTable(&unk_100627538, &type metadata for CardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229B8);
  }
  return result;
}

unint64_t sub_10015E87C()
{
  unint64_t result;

  result = qword_1008229C0;
  if (!qword_1008229C0)
  {
    result = swift_getWitnessTable(&unk_100627628, &type metadata for Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229C0);
  }
  return result;
}

unint64_t sub_10015E8C4()
{
  unint64_t result;

  result = qword_1008229C8;
  if (!qword_1008229C8)
  {
    result = swift_getWitnessTable(&unk_100627718, &type metadata for AppPlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229C8);
  }
  return result;
}

unint64_t sub_10015E90C()
{
  unint64_t result;

  result = qword_1008229D0;
  if (!qword_1008229D0)
  {
    result = swift_getWitnessTable(&unk_1006277D0, &type metadata for AppAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229D0);
  }
  return result;
}

unint64_t sub_10015E954()
{
  unint64_t result;

  result = qword_1008229D8;
  if (!qword_1008229D8)
  {
    result = swift_getWitnessTable(&unk_1006278C0, &type metadata for AppArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229D8);
  }
  return result;
}

unint64_t sub_10015E99C()
{
  unint64_t result;

  result = qword_1008229E0;
  if (!qword_1008229E0)
  {
    result = swift_getWitnessTable(&unk_1006277F8, &type metadata for AppArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229E0);
  }
  return result;
}

unint64_t sub_10015E9E4()
{
  unint64_t result;

  result = qword_1008229E8;
  if (!qword_1008229E8)
  {
    result = swift_getWitnessTable(&unk_100627820, &type metadata for AppArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229E8);
  }
  return result;
}

unint64_t sub_10015EA2C()
{
  unint64_t result;

  result = qword_1008229F0;
  if (!qword_1008229F0)
  {
    result = swift_getWitnessTable(&unk_100627740, &type metadata for AppAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229F0);
  }
  return result;
}

unint64_t sub_10015EA74()
{
  unint64_t result;

  result = qword_1008229F8;
  if (!qword_1008229F8)
  {
    result = swift_getWitnessTable(&unk_100627768, &type metadata for AppAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1008229F8);
  }
  return result;
}

unint64_t sub_10015EABC()
{
  unint64_t result;

  result = qword_100822A00;
  if (!qword_100822A00)
  {
    result = swift_getWitnessTable(&unk_100627650, &type metadata for AppPlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A00);
  }
  return result;
}

unint64_t sub_10015EB04()
{
  unint64_t result;

  result = qword_100822A08;
  if (!qword_100822A08)
  {
    result = swift_getWitnessTable(&unk_100627678, &type metadata for AppPlatform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A08);
  }
  return result;
}

unint64_t sub_10015EB4C()
{
  unint64_t result;

  result = qword_100822A10;
  if (!qword_100822A10)
  {
    result = swift_getWitnessTable(&unk_100627560, &type metadata for Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A10);
  }
  return result;
}

unint64_t sub_10015EB94()
{
  unint64_t result;

  result = qword_100822A18;
  if (!qword_100822A18)
  {
    result = swift_getWitnessTable(&unk_100627588, &type metadata for Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A18);
  }
  return result;
}

unint64_t sub_10015EBDC()
{
  unint64_t result;

  result = qword_100822A20;
  if (!qword_100822A20)
  {
    result = swift_getWitnessTable(&unk_100627470, &type metadata for CardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A20);
  }
  return result;
}

unint64_t sub_10015EC24()
{
  unint64_t result;

  result = qword_100822A28;
  if (!qword_100822A28)
  {
    result = swift_getWitnessTable(&unk_100627498, &type metadata for CardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A28);
  }
  return result;
}

unint64_t sub_10015EC6C()
{
  unint64_t result;

  result = qword_100822A30;
  if (!qword_100822A30)
  {
    result = swift_getWitnessTable(&unk_100627380, &type metadata for CardContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A30);
  }
  return result;
}

unint64_t sub_10015ECB4()
{
  unint64_t result;

  result = qword_100822A38;
  if (!qword_100822A38)
  {
    result = swift_getWitnessTable(&unk_1006273A8, &type metadata for CardContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A38);
  }
  return result;
}

unint64_t sub_10015ECFC()
{
  unint64_t result;

  result = qword_100822A40;
  if (!qword_100822A40)
  {
    result = swift_getWitnessTable(&unk_100627290, &type metadata for Relationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A40);
  }
  return result;
}

unint64_t sub_10015ED44()
{
  unint64_t result;

  result = qword_100822A48;
  if (!qword_100822A48)
  {
    result = swift_getWitnessTable(&unk_1006272B8, &type metadata for Relationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A48);
  }
  return result;
}

unint64_t sub_10015ED8C()
{
  unint64_t result;

  result = qword_100822A50;
  if (!qword_100822A50)
  {
    result = swift_getWitnessTable(&unk_1006271A0, &type metadata for EditorialItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A50);
  }
  return result;
}

unint64_t sub_10015EDD4()
{
  unint64_t result;

  result = qword_100822A58;
  if (!qword_100822A58)
  {
    result = swift_getWitnessTable(&unk_1006271C8, &type metadata for EditorialItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A58);
  }
  return result;
}

unint64_t sub_10015EE1C()
{
  unint64_t result;

  result = qword_100822A60;
  if (!qword_100822A60)
  {
    result = swift_getWitnessTable(&unk_1006270B0, &type metadata for EditorialItemsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A60);
  }
  return result;
}

unint64_t sub_10015EE64()
{
  unint64_t result;

  result = qword_100822A68;
  if (!qword_100822A68)
  {
    result = swift_getWitnessTable(&unk_1006270D8, &type metadata for EditorialItemsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100822A68);
  }
  return result;
}

_QWORD *sub_10015EEA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  swift_bridgeObjectRetain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_10015EF1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[11];
  v5 = a1[13];
  v6 = a1[15];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_10015EF90()
{
  unint64_t result;

  result = qword_100822A80;
  if (!qword_100822A80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppArtwork, &type metadata for AppArtwork);
    atomic_store(result, (unint64_t *)&qword_100822A80);
  }
  return result;
}

uint64_t sub_10015EFD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 112);
  v14 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRetain(v2);
  sub_100149BD8(v16, v15, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_10015F098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v13 = *(_OWORD *)(a1 + 112);
  v14 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  sub_10015F158(v16, v15, v3, v4, v5, v6, v7, v8, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_10015F158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a6 != 1)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    return swift_bridgeObjectRelease(a16);
  }
  return result;
}

unint64_t sub_10015F1CC()
{
  unint64_t result;

  result = qword_100822A90;
  if (!qword_100822A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppAttributes, &type metadata for AppAttributes);
    atomic_store(result, (unint64_t *)&qword_100822A90);
  }
  return result;
}

unint64_t sub_10015F210()
{
  unint64_t result;

  result = qword_100822AA0;
  if (!qword_100822AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppPlatform, &type metadata for AppPlatform);
    atomic_store(result, (unint64_t *)&qword_100822AA0);
  }
  return result;
}

uint64_t sub_10015F254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2 != 2)
    return sub_10015F29C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  return a1;
}

uint64_t sub_10015F29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return sub_10015F158(a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  return result;
}

_QWORD *sub_10015F394(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_10015F3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2 != 2)
    return sub_10015F440(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  return a1;
}

uint64_t sub_10015F440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a2);
    return sub_100149BD8(a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  return result;
}

uint64_t sub_10015F538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  sub_10015F3F8(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v8,
    v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10015F614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_10015F254(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v8,
    v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

unint64_t sub_10015F6F0()
{
  unint64_t result;

  result = qword_100822AB0;
  if (!qword_100822AB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Attributes, &type metadata for Attributes);
    atomic_store(result, (unint64_t *)&qword_100822AB0);
  }
  return result;
}

uint64_t sub_10015F734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 112);
  v13 = *(_OWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 200);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  sub_10015F824(v19, v2, v3, v4, v5, v6, v7, v8, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v10,
    v9);
  return a1;
}

double sub_10015F824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  double result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a2);
    sub_10015F3F8(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a24).n128_u64[0];
  }
  return result;
}

uint64_t sub_10015F944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 112);
  v13 = *(_OWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 200);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  sub_10015FA34(v19, v2, v3, v4, v5, v6, v7, v8, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v10,
    v9);
  return a1;
}

double sub_10015FA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  double result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    sub_10015F254(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a24).n128_u64[0];
  }
  return result;
}

unint64_t sub_10015FB54()
{
  unint64_t result;

  result = qword_100822AC8;
  if (!qword_100822AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CardItem, &type metadata for CardItem);
    atomic_store(result, (unint64_t *)&qword_100822AC8);
  }
  return result;
}

unint64_t sub_10015FB98()
{
  unint64_t result;

  result = qword_100822AD8;
  if (!qword_100822AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CardContent, &type metadata for CardContent);
    atomic_store(result, (unint64_t *)&qword_100822AD8);
  }
  return result;
}

unint64_t sub_10015FBDC()
{
  unint64_t result;

  result = qword_100822AE8;
  if (!qword_100822AE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Relationship, &type metadata for Relationship);
    atomic_store(result, (unint64_t *)&qword_100822AE8);
  }
  return result;
}

uint64_t sub_10015FC20(uint64_t result)
{
  if (result != 2)
    return sub_10015FC30(result);
  return result;
}

uint64_t sub_10015FC30(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_10015FC40()
{
  unint64_t result;

  result = qword_100822B00;
  if (!qword_100822B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EditorialItem, &type metadata for EditorialItem);
    atomic_store(result, (unint64_t *)&qword_100822B00);
  }
  return result;
}

id sub_10015FD34()
{
  return sub_1000F62A0(0, (uint64_t (*)(void))type metadata accessor for TrendsSplashVideoView);
}

uint64_t sub_10015FDA4()
{
  return type metadata accessor for TrendsSplashVideoView(0);
}

uint64_t sub_10015FDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[11] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[12] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[13] = v6;
  v4[14] = v7;
  return swift_task_switch(sub_10015FE18, v6, v7);
}

uint64_t sub_10015FE18()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v6;

  v1 = objc_msgSend(*(id *)(v0 + 88), "currentItem");
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 120) = objc_msgSend(v1, "asset");

    sub_100047110(&qword_100822BA8);
    v3 = static AVPartialAsyncProperty<A>.duration.getter();
    *(_QWORD *)(v0 + 128) = v3;
    v4 = (_QWORD *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
    *(_QWORD *)(v0 + 136) = v4;
    *v4 = v0;
    v4[1] = sub_10015FEFC;
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 64, v3);
  }
  else
  {
    v6 = swift_release(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v6);
  }
}

uint64_t sub_10015FEFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[13];
    v5 = v2[14];
    v6 = sub_100160010;
  }
  else
  {
    v7 = (void *)v2[15];
    swift_release(v2[16]);

    v4 = v2[13];
    v5 = v2[14];
    v6 = sub_10015FF6C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10015FF6C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  CMTimeEpoch epoch;

  v1 = *(void **)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = objc_msgSend(v1, "currentItem");
  if (v5)
  {
    v6 = v5;
    epoch = kCMTimeZero.epoch;
    *(_QWORD *)(v0 + 16) = kCMTimeZero.value;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)&kCMTimeZero.timescale;
    *(_QWORD *)(v0 + 32) = epoch;
    *(_QWORD *)(v0 + 40) = v2;
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v0 + 56) = v4;
    objc_msgSend(v5, "setLoopTimeRange:");

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100160010()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100160054()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player);
  if (v2)
    objc_msgSend(v2, "replaceCurrentItemWithPlayerItem:", 0);
  v3 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer);
  if (v4)
  {
    objc_msgSend(v4, "setPlayer:", 0);
    v5 = *(void **)(v0 + v3);
    if (v5)
      objc_msgSend(v5, "removeFromSuperlayer");
  }
  v6 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v7 = *(void **)(v0 + v3);
  *(_QWORD *)(v0 + v3) = 0;

}

id sub_100160110(void *a1)
{
  char *v1;
  void *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  id v20;
  id v21;
  id v22;
  id v23;
  objc_super v25;
  Swift::String v26;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_listViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_observers] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_availabilityManager] = a1;
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = a1;
  v5 = objc_msgSend(v3, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000022;
  v26._countAndFlagsBits = 0xD000000000000039;
  v26._object = (void *)0x800000010068B720;
  v6._object = (void *)0x800000010068B6F0;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v26);

  v9 = sub_100047110((uint64_t *)&unk_100827460);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v10 + 56) = &type metadata for Int;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v10 + 32) = 90;
  *(_QWORD *)(v10 + 96) = &type metadata for Int;
  *(_QWORD *)(v10 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v10 + 72) = 365;
  static String.localizedStringWithFormat(_:_:)(v8._countAndFlagsBits, v8._object, v10);
  v12 = v11;
  swift_bridgeObjectRelease(v8._object);
  v13 = objc_msgSend(v3, "mainBundle", swift_bridgeObjectRelease(v10).n128_f64[0]);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v17 = v16;

  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v25.receiver = v1;
  v25.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  v20 = objc_msgSendSuper2(&v25, "initWithTitle:detailText:icon:contentLayout:", v18, v19, 0, 1);

  v21 = v20;
  v22 = objc_msgSend(v21, "contentView");
  v23 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v22, "setBackgroundColor:", v23);

  return v21;
}

void sub_10016043C()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  NSString v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;
  Swift::String v46;

  v1 = v0;
  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  objc_msgSendSuper2(&v45, "viewDidLoad");
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;

  v8 = objc_msgSend(v2, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000022;
  v46._countAndFlagsBits = 0xD000000000000039;
  v46._object = (void *)0x800000010068B720;
  v9._object = (void *)0x800000010068B6F0;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v46);

  v12 = sub_100047110((uint64_t *)&unk_100827460);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = 90;
  *(_QWORD *)(v13 + 96) = &type metadata for Int;
  *(_QWORD *)(v13 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 72) = 365;
  v14 = static String.localizedStringWithFormat(_:_:)(v11._countAndFlagsBits, v11._object, v13);
  v16 = v15;
  swift_bridgeObjectRelease(v11._object);
  swift_bridgeObjectRelease(v13);
  v17._countAndFlagsBits = 10;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v14;
  v18._object = v16;
  String.append(_:)(v18);
  v19 = objc_msgSend(v1, "headerView", swift_bridgeObjectRelease(v16).n128_f64[0]);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setDetailText:", v20, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v21 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  v22 = (void *)objc_opt_self(UIColor);
  v23 = v21;
  v24 = objc_msgSend(v22, "quaternarySystemFillColor");
  objc_msgSend(v23, "setTintColor:", v24);

  v25 = objc_msgSend(v2, "mainBundle");
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "localizedStringForKey:value:table:", v26, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v29 = v28;

  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setTitle:forState:", v30, 0, swift_bridgeObjectRelease(v29).n128_f64[0]);

  v31 = objc_msgSend(v1, "buttonTray");
  objc_msgSend(v31, "addButton:", v23);

  objc_msgSend(v23, "addTarget:action:forControlEvents:", v1, "buttonTappedWithSender:", 64);
  v32 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v32, "setBackBarButtonItem:", 0);

  v33 = objc_msgSend(v1, "navigationController");
  if (v33)
  {
    v34 = v33;
    objc_msgSend(v33, "setNavigationBarHidden:animated:", 1, 0);

  }
  sub_100161048();
  v35 = objc_msgSend(v1, "view");
  if (!v35)
    goto LABEL_18;
  v36 = v35;
  v37 = objc_msgSend(v35, "subviews");

  v38 = sub_10001E724(0, (unint64_t *)&qword_100821308, UIView_ptr);
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0)
      v43 = v39;
    else
      v43 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v39);
    v44 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v39);
    if (v44)
      goto LABEL_6;
LABEL_14:
    swift_bridgeObjectRelease(v39);
    goto LABEL_15;
  }
  if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_6:
  if ((v39 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v40 = *(id *)(v39 + 32);
LABEL_9:
    v41 = v40;
    v42 = objc_msgSend(v22, "systemBackgroundColor", swift_bridgeObjectRelease(v39).n128_f64[0]);
    objc_msgSend(v41, "setBackgroundColor:", v42);

LABEL_15:
    sub_100160BCC();

    return;
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

void sub_1001609D4(char a1)
{
  char *v1;
  void *v3;
  char *v4;
  id v5;
  void *v6;
  char **v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  objc_msgSendSuper2(&v8, "viewWillAppear:", a1 & 1);
  sub_100161048();
  v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView];
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v4, "window");

    v6 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
    if (v6)
    {
      v7 = &selRef_pause;
      if (v5)
        v7 = &selRef_play;
      objc_msgSend(v6, *v7);
    }

  }
}

void sub_100160AC0(char a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  objc_super v6;

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  objc_msgSendSuper2(&v6, "viewWillDisappear:", a1 & 1);
  v3 = OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView], "teardownPlayer");
  v4 = *(void **)&v1[v3];
  if (v4)
  {
    objc_msgSend(v4, "removeFromSuperview");
    v5 = *(void **)&v1[v3];
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v1[v3] = 0;

}

void sub_100160BCC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  void (*v20)(uint64_t);
  uint64_t v21;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  v3 = (void *)objc_opt_self(NSOperationQueue);
  v4 = objc_msgSend(v3, "mainQueue");
  v5 = swift_allocObject(&unk_100789278, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v20 = sub_1001614E4;
  v21 = v5;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000398D4;
  v19 = &unk_100789290;
  v6 = _Block_copy(&v16);
  v7 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", UIApplicationWillEnterForegroundNotification, 0, v4, v6, swift_release(v21).n128_f64[0]);
  _Block_release(v6);

  v8 = objc_msgSend(v1, "defaultCenter");
  v9 = objc_msgSend(v3, "mainQueue");
  v10 = swift_allocObject(&unk_100789278, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v0);
  v20 = sub_1001614EC;
  v21 = v10;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000398D4;
  v19 = &unk_1007892B8;
  v11 = _Block_copy(&v16);
  v12 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", UIApplicationDidEnterBackgroundNotification, 0, v9, v11, swift_release(v21).n128_f64[0]);
  _Block_release(v11);

  v13 = sub_100047110(&qword_10082CEC0);
  v14 = swift_allocObject(v13, 96, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100620BC0;
  *(_QWORD *)(v14 + 56) = swift_getObjectType(v7);
  *(_QWORD *)(v14 + 32) = v7;
  *(_QWORD *)(v14 + 88) = swift_getObjectType(v12);
  *(_QWORD *)(v14 + 64) = v12;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_observers);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_observers) = v14;
  swift_bridgeObjectRelease(v15);
}

void sub_100160E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _BYTE v14[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.info.getter();
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "TrendsSplashViewController is visible, resuming video playback", 62, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v2, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_100161048();

  }
  swift_beginAccess(v2, &v13, 0, 0);
  v7 = swift_unknownObjectWeakLoadStrong(v2);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(void **)(v7 + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView);
    v10 = v9;

    if (v9)
    {
      v11 = *(void **)&v10[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
      v12 = v11;

      if (v11)
      {
        objc_msgSend(v12, "play");

      }
    }
  }
}

void sub_100160F68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t Strong;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  v3 = static os_log_type_t.info.getter();
  v4 = HKLogActivity;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "TrendsSplashViewController entering background, pausing videos", 62, 2, &_swiftEmptyArrayStorage);

  swift_beginAccess(v2, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v6 = (char *)Strong;
    v7 = OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView;
    objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView), "teardownPlayer");
    v8 = *(void **)&v6[v7];
    if (v8)
    {
      objc_msgSend(v8, "removeFromSuperview");
      v9 = *(void **)&v6[v7];
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)&v6[v7] = 0;

  }
}

void sub_100161048()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  Class isa;
  id v32;
  uint64_t v33;

  v1 = v0;
  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "bounds");

    v4 = objc_allocWithZone((Class)type metadata accessor for TrendsSplashVideoView(0));
    v5 = sub_100033D34();
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v7 = objc_msgSend(v1, "contentView");
      objc_msgSend(v7, "addSubview:", v6);

      v8 = objc_msgSend(v6, "leadingAnchor");
      v9 = objc_msgSend(v1, "contentView");
      v10 = objc_msgSend(v9, "leadingAnchor");

      v11 = objc_msgSend(v8, "constraintEqualToAnchor:", v10);
      v12 = objc_msgSend(v6, "trailingAnchor");
      v13 = objc_msgSend(v1, "contentView");
      v14 = objc_msgSend(v13, "trailingAnchor");

      v15 = objc_msgSend(v12, "constraintEqualToAnchor:", v14);
      v16 = objc_msgSend(v6, "topAnchor");
      v17 = objc_msgSend(v1, "contentView");
      v18 = objc_msgSend(v17, "topAnchor");

      v19 = objc_msgSend(v16, "constraintEqualToAnchor:", v18);
      v20 = objc_msgSend(v6, "bottomAnchor");
      v21 = objc_msgSend(v1, "contentView");
      v22 = objc_msgSend(v21, "bottomAnchor");

      v23 = objc_msgSend(v20, "constraintEqualToAnchor:", v22);
      v24 = (void *)objc_opt_self(NSLayoutConstraint);
      v25 = sub_100047110((uint64_t *)&unk_100828340);
      v26 = swift_allocObject(v25, 64, 7);
      *(_OWORD *)(v26 + 16) = xmmword_100623750;
      *(_QWORD *)(v26 + 32) = v11;
      *(_QWORD *)(v26 + 40) = v15;
      *(_QWORD *)(v26 + 48) = v19;
      *(_QWORD *)(v26 + 56) = v23;
      v33 = v26;
      specialized Array._endMutation()(v26);
      sub_10001E724(0, (unint64_t *)&qword_10081F6C0, NSLayoutConstraint_ptr);
      v27 = v11;
      v28 = v15;
      v29 = v19;
      v30 = v23;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v33).n128_f64[0]);

      v32 = *(id *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView];
      *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView] = v6;

    }
  }
  else
  {
    __break(1u);
  }
}

id sub_10016143C(uint64_t a1)
{
  return sub_1000F62A0(a1, type metadata accessor for TrendsSplashViewController);
}

uint64_t type metadata accessor for TrendsSplashViewController()
{
  return objc_opt_self(_TtC10FitnessApp26TrendsSplashViewController);
}

uint64_t sub_1001614C0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001614E4(uint64_t a1)
{
  uint64_t v1;

  sub_100160E54(a1, v1);
}

void sub_1001614EC(uint64_t a1)
{
  uint64_t v1;

  sub_100160F68(a1, v1);
}

id sub_1001614F4()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setBool:forKey:", 1, v2);

  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10081DE28 != -1)
    swift_once(&qword_10081DE28, sub_10004E610);
  objc_msgSend(v3, "postNotificationName:object:", qword_10086AC40, v0);

  return objc_msgSend(v0, "dismissViewControllerAnimated:completion:", 1, 0);
}

uint64_t sub_1001615F8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100161624(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100822B9C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000DA0E4;
  return sub_10015FDAC(a1, v4, v5, v6);
}

id sub_100161760()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingHeaderSwiftUITableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivitySharingHeaderSwiftUITableViewCell()
{
  return objc_opt_self(_TtC10FitnessApp41ActivitySharingHeaderSwiftUITableViewCell);
}

unint64_t sub_1001617B4()
{
  return 0xD000000000000029;
}

uint64_t storeEnumTagSinglePayload for Health(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100161810 + 4 * byte_100627C6C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100161830 + 4 * byte_100627C71[v4]))();
}

_BYTE *sub_100161810(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100161830(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100161838(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100161840(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100161848(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100161850(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Health()
{
  return &type metadata for Health;
}

uint64_t getEnumTagSinglePayload for FitnessFeatures(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FitnessFeatures(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100161948 + 4 * byte_100627C7B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10016197C + 4 * byte_100627C76[v4]))();
}

uint64_t sub_10016197C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100161984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016198CLL);
  return result;
}

uint64_t sub_100161998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001619A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001619A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001619AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FitnessFeatures()
{
  return &type metadata for FitnessFeatures;
}

unint64_t sub_1001619CC()
{
  unint64_t result;

  result = qword_100822BD8;
  if (!qword_100822BD8)
  {
    result = swift_getWitnessTable(&unk_100627CE8, &type metadata for FitnessFeatures);
    atomic_store(result, (unint64_t *)&qword_100822BD8);
  }
  return result;
}

unint64_t sub_100161A14()
{
  unint64_t result;

  result = qword_100822BE0;
  if (!qword_100822BE0)
  {
    result = swift_getWitnessTable(&unk_100627D50, &type metadata for Health);
    atomic_store(result, (unint64_t *)&qword_100822BE0);
  }
  return result;
}

const char *sub_100161A58()
{
  return "Health";
}

const char *sub_100161A6C()
{
  return "chamomile";
}

unint64_t sub_100161A84()
{
  unint64_t result;

  result = qword_100822BE8;
  if (!qword_100822BE8)
  {
    result = swift_getWitnessTable(&unk_100627E68, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822BE8);
  }
  return result;
}

unint64_t sub_100161ACC()
{
  unint64_t result;

  result = qword_100822BF0;
  if (!qword_100822BF0)
  {
    result = swift_getWitnessTable(&unk_100627EA0, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822BF0);
  }
  return result;
}

unint64_t sub_100161B14()
{
  unint64_t result;

  result = qword_100822BF8;
  if (!qword_100822BF8)
  {
    result = swift_getWitnessTable(&unk_100627ED0, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822BF8);
  }
  return result;
}

unint64_t sub_100161B5C()
{
  unint64_t result;

  result = qword_100822C00;
  if (!qword_100822C00)
  {
    result = swift_getWitnessTable(&unk_100629F70, &type metadata for WorkoutEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100822C00);
  }
  return result;
}

uint64_t sub_100161BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  sub_100047110(&qword_1008201E0);
  v0 = type metadata accessor for AppDependencyManager(0);
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(&v9, v1);
  v3 = sub_100047110(&qword_1008201E8);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  v5 = AppDependency.__allocating_init(key:manager:)(&v9, v4);
  v6 = sub_100047110(&qword_100822D10);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v7 = static AppDependencyManager.shared.getter(v6);
  result = AppDependency.__allocating_init(key:manager:)(&v9, v7);
  qword_100869EB0 = v2;
  *(_QWORD *)algn_100869EB8 = v5;
  qword_100869EC0 = result;
  return result;
}

uint64_t sub_100161C90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100008398(v7, qword_100869EC8);
  sub_10003CE9C(v7, (uint64_t)qword_100869EC8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x800000010068BA30);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

uint64_t sub_100161DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_100047110(&qword_100822D38);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100047110(&qword_100822D40);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100047110(&qword_100822D30);
  sub_100008398(v7, qword_100869EE0);
  sub_10003CE9C(v7, (uint64_t)qword_100869EE0);
  v8 = sub_100112214();
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)(30, 1, &type metadata for WorkoutEntity, v8);
  v9._object = (void *)0x800000010068A770;
  v9._countAndFlagsBits = 0xD00000000000001ELL;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v10);
  return EntityURLRepresentation.init(stringInterpolation:)(v6, &type metadata for WorkoutEntity, v8);
}

id sub_100161F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  id v36;
  unint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)objc_opt_self(CHListAndDetailViewDateFormatter);
  v7 = *(void **)(v1 + 224);
  v8 = objc_msgSend(v7, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = objc_msgSend((id)objc_opt_self(UIFont), "fu_bodyShortFont");
  v11 = objc_msgSend(v6, "formattedListStringForDate:font:", isa, v10);

  v12 = objc_msgSend(v11, "string");
  v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  AppDependency.wrappedValue.getter(&v36);
  v16 = v36;
  v36 = 0;
  v17 = objc_msgSend(v16, "localizedGoalDescriptionForWorkout:withValue:appendActivityType:", v7, &v36, 0);

  v18 = v36;
  if (v17)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;
    v22 = v18;

  }
  else
  {
    v23 = v36;
    v19 = 0;
    v21 = 0;
  }
  AppDependency.wrappedValue.getter(&v36);
  v24 = v36;
  v25 = objc_msgSend(v7, "displayDetail:", v36);

  if (v25)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    swift_bridgeObjectRelease(v21);
  }
  else
  {
    if (v21)
      v29 = (void *)v19;
    else
      v29 = 0;
    v30 = 0xE000000000000000;
    if (v21)
      v30 = v21;
    v36 = v29;
    v37 = v30;
    v26 = String.init<A>(_:)(&v36, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v28 = v31;
  }
  v36 = v13;
  v37 = v15;
  v32._countAndFlagsBits = 548913696;
  v32._object = (void *)0xA400000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v26;
  v33._object = v28;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v28);
  return v36;
}

uint64_t sub_1001621C8()
{
  Swift::String *v0;
  Swift::String *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t countAndFlagsBits;
  void *v25;
  __n128 v26;
  uint64_t v28;

  v1 = v0;
  v2 = sub_100047110(&qword_100820D18);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v1[1]);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  LocalizedStringResource.init(stringInterpolation:)(v17);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  v21._countAndFlagsBits = (uint64_t)sub_100161F20();
  object = v21._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
  LocalizedStringResource.init(stringInterpolation:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  countAndFlagsBits = v1[2]._countAndFlagsBits;
  v25 = v1[2]._object;
  v26 = swift_bridgeObjectRetain(v25);
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(countAndFlagsBits, v25, 0, 0, v26);
  return DisplayRepresentation.init(title:subtitle:image:)(v11, v7, v4);
}

double sub_1001623E4@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  if (qword_10081D5C0 != -1)
    swift_once(&qword_10081D5C0, sub_100161BA0);
  v2 = qword_100869EB0;
  v3 = *(_QWORD *)algn_100869EB8;
  v4 = qword_100869EC0;
  *a1 = qword_100869EB0;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain(v2);
  swift_retain(v3);
  *(_QWORD *)&result = swift_retain(v4).n128_u64[0];
  return result;
}

unint64_t sub_100162460()
{
  unint64_t result;

  result = qword_100822C08;
  if (!qword_100822C08)
  {
    result = swift_getWitnessTable(&unk_100627F08, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C08);
  }
  return result;
}

uint64_t sub_1001624A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D5D0 != -1)
    swift_once(&qword_10081D5D0, sub_100161DA0);
  v2 = sub_100047110(&qword_100822D30);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869EE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_10016251C()
{
  unint64_t result;

  result = qword_100822C10;
  if (!qword_100822C10)
  {
    result = swift_getWitnessTable(&unk_100627F30, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C10);
  }
  return result;
}

unint64_t sub_100162564()
{
  unint64_t result;

  result = qword_100822C18;
  if (!qword_100822C18)
  {
    result = swift_getWitnessTable(&unk_100627F58, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C18);
  }
  return result;
}

unint64_t sub_1001625AC()
{
  unint64_t result;

  result = qword_100822C20;
  if (!qword_100822C20)
  {
    result = swift_getWitnessTable(&unk_100627F80, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C20);
  }
  return result;
}

unint64_t sub_1001625F4()
{
  unint64_t result;

  result = qword_100822C28;
  if (!qword_100822C28)
  {
    result = swift_getWitnessTable(&unk_100627FD8, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C28);
  }
  return result;
}

uint64_t sub_100162638@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100162644(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100166890();
  v4 = URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100114BE8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10016268C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D5C8 != -1)
    swift_once(&qword_10081D5C8, sub_100161C90);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869EC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001626FC()
{
  return sub_100028384(&qword_100822C38, &qword_100822C40, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100162728(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100112214();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100162764()
{
  unint64_t result;

  result = qword_100822C48;
  if (!qword_100822C48)
  {
    result = swift_getWitnessTable(&unk_100628008, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822C48);
  }
  return result;
}

uint64_t sub_1001627AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001625F4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t destroy for WorkoutEntity(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(*(_QWORD *)(a1 + 88));
  swift_release(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 104));
  swift_release(*(_QWORD *)(a1 + 112));
  swift_release(*(_QWORD *)(a1 + 120));
  swift_release(*(_QWORD *)(a1 + 128));
  swift_release(*(_QWORD *)(a1 + 136));
  swift_release(*(_QWORD *)(a1 + 144));
  swift_release(*(_QWORD *)(a1 + 152));
  swift_release(*(_QWORD *)(a1 + 160));
  swift_release(*(_QWORD *)(a1 + 168));
  swift_release(*(_QWORD *)(a1 + 176));
  swift_release(*(_QWORD *)(a1 + 184));
  swift_release(*(_QWORD *)(a1 + 192));
  swift_release(*(_QWORD *)(a1 + 200));
  swift_release(*(_QWORD *)(a1 + 208));
  swift_release(*(_QWORD *)(a1 + 216));

  swift_release(*(_QWORD *)(a1 + 232));
  swift_release(*(_QWORD *)(a1 + 240));
  return swift_release(*(_QWORD *)(a1 + 248));
}

_QWORD *initializeWithCopy for WorkoutEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v7 = a2[6];
  v6 = a2[7];
  a1[6] = v7;
  a1[7] = v6;
  v9 = a2[8];
  v8 = a2[9];
  a1[8] = v9;
  a1[9] = v8;
  v11 = a2[10];
  v10 = a2[11];
  a1[10] = v11;
  a1[11] = v10;
  v13 = a2[12];
  v12 = a2[13];
  a1[12] = v13;
  a1[13] = v12;
  v24 = v12;
  v25 = a2[14];
  v14 = a2[15];
  a1[14] = v25;
  a1[15] = v14;
  v26 = v14;
  v27 = a2[16];
  v15 = a2[17];
  a1[16] = v27;
  a1[17] = v15;
  v28 = v15;
  v29 = a2[18];
  v16 = a2[19];
  a1[18] = v29;
  a1[19] = v16;
  v30 = v16;
  v31 = a2[20];
  v17 = a2[21];
  a1[20] = v31;
  a1[21] = v17;
  v32 = v17;
  v33 = a2[22];
  v18 = a2[23];
  a1[22] = v33;
  a1[23] = v18;
  v34 = v18;
  v35 = a2[24];
  v19 = a2[25];
  a1[24] = v35;
  a1[25] = v19;
  v36 = v19;
  v37 = a2[26];
  v20 = a2[27];
  a1[26] = v37;
  a1[27] = v20;
  v38 = v20;
  v39 = (void *)a2[28];
  v21 = a2[29];
  a1[28] = v39;
  a1[29] = v21;
  v40 = v21;
  v41 = a2[30];
  v42 = a2[31];
  a1[30] = v41;
  a1[31] = v42;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  swift_retain(v6);
  swift_retain(v9);
  swift_retain(v8);
  swift_retain(v11);
  swift_retain(v10);
  swift_retain(v13);
  swift_retain(v24);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  swift_retain(v30);
  swift_retain(v31);
  swift_retain(v32);
  swift_retain(v33);
  swift_retain(v34);
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v38);
  v22 = v39;
  swift_retain(v40);
  swift_retain(v41);
  swift_retain(v42);
  return a1;
}

_QWORD *assignWithCopy for WorkoutEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[9];
  v17 = a1[9];
  a1[9] = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a2[10];
  v19 = a1[10];
  a1[10] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a2[11];
  v21 = a1[11];
  a1[11] = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a2[12];
  v23 = a1[12];
  a1[12] = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = a2[13];
  v25 = a1[13];
  a1[13] = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = a2[14];
  v27 = a1[14];
  a1[14] = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = a2[15];
  v29 = a1[15];
  a1[15] = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = a2[16];
  v31 = a1[16];
  a1[16] = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = a2[17];
  v33 = a1[17];
  a1[17] = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a2[18];
  v35 = a1[18];
  a1[18] = v34;
  swift_retain(v34);
  swift_release(v35);
  v36 = a2[19];
  v37 = a1[19];
  a1[19] = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = a2[20];
  v39 = a1[20];
  a1[20] = v38;
  swift_retain(v38);
  swift_release(v39);
  v40 = a2[21];
  v41 = a1[21];
  a1[21] = v40;
  swift_retain(v40);
  swift_release(v41);
  v42 = a2[22];
  v43 = a1[22];
  a1[22] = v42;
  swift_retain(v42);
  swift_release(v43);
  v44 = a2[23];
  v45 = a1[23];
  a1[23] = v44;
  swift_retain(v44);
  swift_release(v45);
  v46 = a2[24];
  v47 = a1[24];
  a1[24] = v46;
  swift_retain(v46);
  swift_release(v47);
  v48 = a2[25];
  v49 = a1[25];
  a1[25] = v48;
  swift_retain(v48);
  swift_release(v49);
  v50 = a2[26];
  v51 = a1[26];
  a1[26] = v50;
  swift_retain(v50);
  swift_release(v51);
  v52 = a2[27];
  v53 = a1[27];
  a1[27] = v52;
  swift_retain(v52);
  swift_release(v53);
  v54 = (void *)a2[28];
  v55 = (void *)a1[28];
  a1[28] = v54;
  v56 = v54;

  v57 = a2[29];
  v58 = a1[29];
  a1[29] = v57;
  swift_retain(v57);
  swift_release(v58);
  v59 = a2[30];
  v60 = a1[30];
  a1[30] = v59;
  swift_retain(v59);
  swift_release(v60);
  v61 = a2[31];
  v62 = a1[31];
  a1[31] = v61;
  swift_retain(v61);
  swift_release(v62);
  return a1;
}

__n128 initializeWithTake for WorkoutEntity(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

_QWORD *assignWithTake for WorkoutEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_release(v8);
  swift_release(a1[7]);
  v9 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_release(v9);
  swift_release(a1[9]);
  v10 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  swift_release(v10);
  swift_release(a1[11]);
  v11 = a1[12];
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 88);
  swift_release(v11);
  swift_release(a1[13]);
  v12 = a1[14];
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 104);
  swift_release(v12);
  swift_release(a1[15]);
  v13 = a1[16];
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  swift_release(v13);
  swift_release(a1[17]);
  v14 = a1[18];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  swift_release(v14);
  swift_release(a1[19]);
  v15 = a1[20];
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 152);
  swift_release(v15);
  swift_release(a1[21]);
  v16 = a1[22];
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  swift_release(v16);
  swift_release(a1[23]);
  v17 = a1[24];
  *(_OWORD *)(a1 + 23) = *(_OWORD *)(a2 + 184);
  swift_release(v17);
  swift_release(a1[25]);
  v18 = a1[26];
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 200);
  swift_release(v18);
  swift_release(a1[27]);
  v19 = (void *)a1[28];
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 216);

  swift_release(a1[29]);
  v20 = a1[30];
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 232);
  swift_release(v20);
  v21 = a1[31];
  a1[31] = *(_QWORD *)(a2 + 248);
  swift_release(v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 256))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 256) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 256) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutEntity()
{
  return &type metadata for WorkoutEntity;
}

void sub_100163084(uint64_t a1)
{
  sub_1001630C0(a1, 7172194, &qword_100869EF8);
}

void sub_100163098(uint64_t a1)
{
  sub_1001630C0(a1, 7172210, &qword_100869F00);
}

void sub_1001630AC(uint64_t a1)
{
  sub_1001630C0(a1, 7172211, &qword_100869F08);
}

void sub_1001630C0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  id v5;
  NSString v6;
  id v7;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSUnitConverterLinear), "initWithCoefficient:", 0.0166666667);
  v5 = objc_allocWithZone((Class)NSUnitFrequency);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithSymbol:converter:", v6, v4);

  *a3 = v7;
}

uint64_t sub_100163158(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v2 + 272) = a1;
  v4 = sub_100047110(&qword_100821E18);
  *(_QWORD *)(v2 + 280) = v4;
  *(_QWORD *)(v2 + 288) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a2[13];
  *(_OWORD *)(v2 + 208) = a2[12];
  *(_OWORD *)(v2 + 224) = v5;
  v6 = a2[15];
  *(_OWORD *)(v2 + 240) = a2[14];
  *(_OWORD *)(v2 + 256) = v6;
  v7 = a2[9];
  *(_OWORD *)(v2 + 144) = a2[8];
  *(_OWORD *)(v2 + 160) = v7;
  v8 = a2[11];
  *(_OWORD *)(v2 + 176) = a2[10];
  *(_OWORD *)(v2 + 192) = v8;
  v9 = a2[5];
  *(_OWORD *)(v2 + 80) = a2[4];
  *(_OWORD *)(v2 + 96) = v9;
  v10 = a2[7];
  *(_OWORD *)(v2 + 112) = a2[6];
  *(_OWORD *)(v2 + 128) = v10;
  v11 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v11;
  v12 = a2[3];
  *(_OWORD *)(v2 + 48) = a2[2];
  *(_OWORD *)(v2 + 64) = v12;
  return swift_task_switch(sub_1001631FC, 0, 0);
}

id sub_1001631FC()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  Class isa;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSString v12;
  id v13;
  double v14;
  double v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 240);
  result = objc_msgSend(v1, "fiui_activityType");
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "isDownhillSnowSport");

    if (v4)
    {
      v5 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 296) = v5;
      *(_QWORD *)(v5 + 16) = v0 + 16;
      v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 304) = v6;
      *v6 = v0;
      v6[1] = sub_100163498;
      return (id)withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 288), 0, 0, 0x4574756F6B726F57, 0xED0000797469746ELL, sub_100166788, v5, *(_QWORD *)(v0 + 280));
    }
    sub_10001E724(0, &qword_100821E90, HKQuantityType_ptr);
    isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
    v8 = objc_msgSend(v1, "statisticsForType:", isa);

    if (v8)
    {
      v9 = objc_msgSend(v8, "maximumQuantity");
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)(v0 + 272);
        v12 = String._bridgeToObjectiveC()();
        v13 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v12);

        objc_msgSend(v10, "doubleValueForUnit:", v13);
        v15 = v14;

        v16 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "metersPerSecond");
        v17 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
        Measurement.init(value:unit:)(v16, v17, v15);

        v18 = sub_100047110(&qword_100821EB0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 0, 1, v18);
LABEL_9:
        swift_task_dealloc(*(_QWORD *)(v0 + 288));
        return (id)(*(uint64_t (**)(void))(v0 + 8))();
      }

    }
    v19 = *(_QWORD *)(v0 + 272);
    v20 = sub_100047110(&qword_100821EB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100163498()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001634F4, 0, 0);
}

uint64_t sub_1001634F4()
{
  uint64_t v0;

  sub_100166790(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100163534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = sub_100047110(&qword_100822D20);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  AppDependency.wrappedValue.getter(&v10);
  v5 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1007895B8, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  HKWorkout.makeDownhillRuns(healthStore:completion:)(v5, sub_100166840, v8);
  swift_release(v8);

}

void sub_100163630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  double v16;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_100047110(&qword_100821EB0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100821E18);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = type metadata accessor for DownhillRunsStats(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = swift_bridgeObjectRetain(a1);
    v11 = DownhillRunsStats.init(downhillRuns:)(v10);
    v12 = DownhillRunsStats.maximumSpeed.getter();
    if (v12)
    {
      v13 = (void *)v12;
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v14);

      objc_msgSend(v13, "doubleValueForUnit:", v15);
      v17 = v16;

      v18 = objc_msgSend((id)objc_opt_self(NSUnitSpeed), "metersPerSecond");
      v19 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
      Measurement.init(value:unit:)(v18, v19, v17);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
      v20 = sub_100047110(&qword_100822D20);
      CheckedContinuation.resume(returning:)(v8, v20);

      v21 = swift_release(v11);
      (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v21);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
      v23 = sub_100047110(&qword_100822D20);
      CheckedContinuation.resume(returning:)(v8, v23);
      swift_release(v11);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    v22 = sub_100047110(&qword_100822D20);
    CheckedContinuation.resume(returning:)(v8, v22);
  }
}

uint64_t sub_1001638B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1001638D4, 0, 0);
}

uint64_t sub_1001638D4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  sub_100047110(&qword_1008201E0);
  v3 = type metadata accessor for AppDependencyManager(0);
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v4 = static AppDependencyManager.shared.getter(v3);
  v5 = AppDependency.__allocating_init(key:manager:)(&v13, v4);
  v6 = sub_100047110(&qword_1008201E8);
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v7 = static AppDependencyManager.shared.getter(v6);
  v8 = AppDependency.__allocating_init(key:manager:)(&v13, v7);
  sub_1004891F4(v1, 1);
  v10 = v9;
  swift_release(v5);
  v11 = swift_release(v8);
  *v2 = v10;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v11);
}

uint64_t sub_1001639C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1001639DC, 0, 0);
}

uint64_t sub_1001639DC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  sub_100047110(&qword_1008201E0);
  v3 = type metadata accessor for AppDependencyManager(0);
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v4 = static AppDependencyManager.shared.getter(v3);
  v5 = AppDependency.__allocating_init(key:manager:)(&v13, v4);
  v6 = sub_100047110(&qword_1008201E8);
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v7 = static AppDependencyManager.shared.getter(v6);
  v8 = AppDependency.__allocating_init(key:manager:)(&v13, v7);
  sub_1004891F4(v1, 0);
  v10 = v9;
  swift_release(v5);
  v11 = swift_release(v8);
  *v2 = v10;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v11);
}

uint64_t sub_100163AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100163AE4, 0, 0);
}

uint64_t sub_100163AE4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  v3 = sub_10038B950();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_10038BA64(v1);
  v11 = v10;
  swift_release(v3);
  swift_release(v5);
  swift_release(v7);
  v12 = swift_release(v9);
  *v2 = v11;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v12);
}

uint64_t sub_100163B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100163B84, 0, 0);
}

uint64_t sub_100163B84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  sub_100047110(&qword_1008201E0);
  v1 = type metadata accessor for AppDependencyManager(0);
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v2 = static AppDependencyManager.shared.getter(v1);
  v0[4] = AppDependency.__allocating_init(key:manager:)(&v11, v2);
  v3 = sub_100047110(&qword_1008201E8);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v4 = static AppDependencyManager.shared.getter(v3);
  v0[5] = AppDependency.__allocating_init(key:manager:)(&v11, v4);
  v5 = sub_100047110(&qword_100822D10);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v6 = static AppDependencyManager.shared.getter(v5);
  v7 = AppDependency.__allocating_init(key:manager:)(&v11, v6);
  v0[6] = v7;
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1008322B0 + dword_1008322B0);
  v8 = (_QWORD *)swift_task_alloc(unk_1008322B4);
  v0[7] = v8;
  *v8 = v0;
  v8[1] = sub_100163CA8;
  return v10(v0[3], v7);
}

uint64_t sub_100163CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc(v2);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  return swift_task_switch(sub_100163D28, 0, 0);
}

uint64_t sub_100163D28()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100163D40(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(v2 + 280) = a1;
  v3 = a2[13];
  *(_OWORD *)(v2 + 208) = a2[12];
  *(_OWORD *)(v2 + 224) = v3;
  v4 = a2[15];
  *(_OWORD *)(v2 + 240) = a2[14];
  *(_OWORD *)(v2 + 256) = v4;
  v5 = a2[9];
  *(_OWORD *)(v2 + 144) = a2[8];
  *(_OWORD *)(v2 + 160) = v5;
  v6 = a2[11];
  *(_OWORD *)(v2 + 176) = a2[10];
  *(_OWORD *)(v2 + 192) = v6;
  v7 = a2[5];
  *(_OWORD *)(v2 + 80) = a2[4];
  *(_OWORD *)(v2 + 96) = v7;
  v8 = a2[7];
  *(_OWORD *)(v2 + 112) = a2[6];
  *(_OWORD *)(v2 + 128) = v8;
  v9 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v9;
  v10 = a2[3];
  *(_OWORD *)(v2 + 48) = a2[2];
  *(_OWORD *)(v2 + 64) = v10;
  return swift_task_switch(sub_100163D98, 0, 0);
}

uint64_t sub_100163D98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 288) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 296) = v2;
  *v2 = v0;
  v2[1] = sub_100163E48;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 272, 0, 0, 0x4574756F6B726F57, 0xED0000797469746ELL, sub_100166734, v1, &type metadata for Int);
}

uint64_t sub_100163E48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 288);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100163EA4, 0, 0);
}

uint64_t sub_100163EA4()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 280) = *(_QWORD *)(v0 + 272);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100163EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = sub_100047110(&qword_100822D18);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  type metadata accessor for EffortUtilities(0, v7);
  v8 = *(_QWORD *)(a2 + 224);
  AppDependency.wrappedValue.getter(&v14);
  v9 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100789590, v11 + v6, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  static EffortUtilities.fetchExertion(forWorkout:healthStore:completion:)(v8, v9, sub_100166748, v12);
  swift_release(v12);

}

void sub_100163FCC(void *a1)
{
  id v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    goto LABEL_6;
  v2 = objc_msgSend((id)objc_opt_self(HKUnit), "appleEffortScoreUnit");
  objc_msgSend(a1, "doubleValueForUnit:", v2);
  v4 = v3;

  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18)
      {
LABEL_7:
        v6 = (uint64_t)v4;
        v5 = sub_100047110(&qword_100822D18);
        CheckedContinuation.resume(returning:)(&v6, v5);
        return;
      }
      __break(1u);
LABEL_6:
      v4 = 0.0;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001640AC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v15;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "isMultiSportWorkout");
  v7 = 77;
  if (!v6)
    v7 = 0;
  v8 = 0xE000000000000000;
  if (v6)
    v8 = 0xE100000000000000;
  v9 = objc_msgSend(a1, "UUID", v7, v8);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = UUID.uuidString.getter();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  return v15;
}

_QWORD *sub_1001641A8@<X0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  id v89;
  double v90;
  double v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v99;
  double v100;
  double v101;
  id v102;
  id v103;
  void *v104;
  id v105;
  double v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Class isa;
  char **v114;
  id v115;
  char **v116;
  void *v117;
  id v118;
  void *v119;
  id v120;
  double v121;
  char *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  Class v129;
  id v130;
  id v131;
  void *v132;
  id v133;
  double v134;
  double v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  void *v140;
  id v141;
  double v142;
  void *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  Class v156;
  id v157;
  id v158;
  void *v159;
  id v160;
  double v161;
  Class v162;
  id v163;
  id v164;
  double v165;
  double v166;
  int v167;
  uint64_t *v168;
  void *v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  Class v175;
  id v176;
  id v177;
  void *v178;
  NSString v179;
  id v180;
  double v181;
  void *v182;
  id v183;
  uint64_t v184;
  char **v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  Class v190;
  id v191;
  id v192;
  void *v193;
  NSString v194;
  id v195;
  double v196;
  void *v197;
  id v198;
  uint64_t v199;
  char **v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  Class v205;
  id v206;
  id v207;
  void *v208;
  NSString v209;
  id v210;
  double v211;
  void *v212;
  id v213;
  uint64_t v214;
  char **v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  Class v220;
  id v221;
  id v222;
  double v223;
  void *v224;
  uint64_t v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  id v229;
  void *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t i;
  uint64_t v236;
  uint64_t v237;
  id v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  id v244;
  id v245;
  double v246;
  double v247;
  void *v248;
  id v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  _QWORD *result;
  __int128 v264;
  _OWORD *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  char **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  _OWORD *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  id v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  id v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;

  v308 = a2;
  v305 = a1;
  v284 = a3;
  v3 = sub_100047110(&qword_100821E18);
  v4 = __chkstk_darwin(v3);
  v292 = (uint64_t)&v274 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v291 = (char *)&v274 - v6;
  v7 = sub_100047110(&qword_100821E08);
  v8 = __chkstk_darwin(v7);
  v280 = (uint64_t)&v274 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v279 = (char **)((char *)&v274 - v10);
  v11 = sub_100047110(&qword_100821E20);
  v12 = __chkstk_darwin(v11);
  v276 = (uint64_t)&v274 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v275 = (char *)&v274 - v14;
  v15 = sub_100047110(&qword_100821E28);
  v16 = __chkstk_darwin(v15);
  v278 = (uint64_t)&v274 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v277 = (char *)&v274 - v18;
  v19 = sub_100047110(&qword_100821E38);
  v20 = __chkstk_darwin(v19);
  v294 = (uint64_t)&v274 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v293 = (char *)&v274 - v22;
  v23 = sub_100047110(&qword_100822C50);
  v24 = __chkstk_darwin(v23);
  v290 = (char *)&v274 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v289 = (char *)&v274 - v26;
  v288 = type metadata accessor for Date(0);
  v285 = *(_QWORD *)(v288 - 8);
  v27 = __chkstk_darwin(v288);
  v287 = (char *)&v274 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v286 = (char *)&v274 - v29;
  v30 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v30);
  v32 = (char *)&v274 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047110(&qword_100822C58);
  LocalizedStringResource.init(stringLiteral:)(0x6E6F697461727544, 0xE800000000000000);
  v324 = EntityProperty<>.init(title:)(v32);
  swift_retain(v324);
  LocalizedStringResource.init(stringLiteral:)(0x2064657370616C45, 0xEC000000656D6954);
  v33 = EntityProperty<>.init(title:)(v32);
  v323 = v33;
  sub_100047110(&qword_100821E58);
  swift_retain(v33);
  LocalizedStringResource.init(stringLiteral:)(0x65636E6174736944, 0xE800000000000000);
  v34 = EntityProperty<>.init(title:)(v32);
  v321 = v34;
  sub_100047110(&qword_100821E60);
  swift_retain(v34);
  LocalizedStringResource.init(stringLiteral:)(0x4520657669746341, 0xED0000796772656ELL);
  v318 = EntityProperty<>.init(title:)(v32);
  swift_retain(v318);
  LocalizedStringResource.init(stringLiteral:)(0x6E45206C61746F54, 0xEC00000079677265);
  v313 = EntityProperty<>.init(title:)(v32);
  swift_retain(v313);
  LocalizedStringResource.init(stringLiteral:)(0x6F69746176656C45, 0xEE006E696147206ELL);
  v35 = EntityProperty<>.init(title:)(v32);
  v322 = v35;
  sub_100047110(&qword_100821E68);
  swift_retain(v35);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xED00007265776F50);
  v36 = EntityProperty<>.init(title:)(v32);
  v320 = v36;
  sub_100047110(&qword_100821E70);
  swift_retain(v36);
  LocalizedStringResource.init(stringLiteral:)(0x756F432070657453, 0xEA0000000000746ELL);
  v315 = EntityProperty<>.init(title:)(v32);
  swift_retain(v315);
  LocalizedStringResource.init(stringLiteral:)(0x2073746867696C46, 0xEF6465626D696C43);
  v37 = EntityProperty<>.init(title:)(v32);
  v314 = v37;
  sub_100047110(&qword_100821E78);
  swift_retain(v37);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xEF65636E65646143);
  v38 = EntityProperty<>.init(title:)(v32);
  v319 = v38;
  sub_100047110(&qword_100821E80);
  swift_retain(v38);
  LocalizedStringResource.init(stringLiteral:)(0x2065676172657641, 0xED00006465657053);
  v325 = EntityProperty<>.init(title:)(v32);
  swift_retain(v325);
  LocalizedStringResource.init(stringLiteral:)(0x6152207472616548, 0xEA00000000006574);
  v317 = EntityProperty<>.init(title:)(v32);
  swift_retain(v317);
  LocalizedStringResource.init(stringLiteral:)(0x6E756F432070614CLL, 0xE900000000000074);
  v316 = EntityProperty<>.init(title:)(v32);
  swift_retain(v316);
  LocalizedStringResource.init(stringLiteral:)(0x676E654C2070614CLL, 0xEA00000000006874);
  v39 = EntityProperty<>.init(title:)(v32);
  v307 = v39;
  sub_100047110(&qword_100822C60);
  swift_retain(v39);
  LocalizedStringResource.init(stringLiteral:)(0x656570532078614DLL, 0xE900000000000064);
  v40 = sub_100028384(&qword_100822C70, &qword_100822C78, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v41 = EntityProperty<>.init(title:_get:)(v32, &unk_100822C68, 0, v40);
  v312 = v41;
  sub_100047110(&qword_100822C80);
  swift_retain(v41);
  LocalizedStringResource.init(stringLiteral:)(0x53206D6F74737543, 0xED00007374696C70);
  v42 = sub_100028384(&qword_100822C90, &qword_100822C98, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v311 = EntityProperty<>.init(title:_get:)(v32, &unk_100822C88, 0, v42);
  swift_retain(v311);
  LocalizedStringResource.init(stringLiteral:)(0x647261646E617453, 0xEF7374696C705320);
  v43 = EntityProperty<>.init(title:_get:)(v32, &unk_100822CA0, 0, v42);
  v310 = v43;
  sub_100047110(&qword_100822CA8);
  swift_retain(v43);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x800000010068B9A0);
  v44 = sub_100028384(&qword_100822CB8, &qword_100822CC0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v45 = EntityProperty<>.init(title:_get:)(v32, &unk_100822CB0, 0, v44);
  v309 = v45;
  sub_100047110(&qword_100822CC8);
  swift_retain(v45);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x800000010068B9C0);
  v46 = sub_100028384(&qword_100822CD8, &qword_100822CE0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v47 = EntityProperty<>.init(title:_get:)(v32, &unk_100822CD0, 0, v46);
  sub_100047110(&qword_100822CE8);
  swift_retain(v47);
  LocalizedStringResource.init(stringLiteral:)(0x6144207472617453, 0xEA00000000006574);
  v48 = EntityProperty<>.init(title:)(v32);
  swift_retain(v48);
  LocalizedStringResource.init(stringLiteral:)(0x6574614420646E45, 0xE800000000000000);
  v49 = EntityProperty<>.init(title:)(v32);
  sub_100047110(&qword_100822CF0);
  swift_retain(v49);
  LocalizedStringResource.init(stringLiteral:)(0x2074756F6B726F57, 0xEE0074726F666645);
  v50 = sub_100028384(&qword_100822D00, &qword_100822D08, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v51 = EntityProperty<>.init(title:_get:)(v32, &unk_100822CF8, 0, v50);
  sub_100047110(&qword_1008201E0);
  type metadata accessor for AppDependencyManager(0);
  v374 = 0u;
  v375 = 0u;
  v376 = 0;
  swift_retain(v51);
  v53 = static AppDependencyManager.shared.getter(v52);
  v54 = AppDependency.__allocating_init(key:manager:)(&v374, v53);
  sub_100047110(&qword_1008201E8);
  v376 = 0;
  v374 = 0u;
  v375 = 0u;
  swift_retain(v54);
  v56 = static AppDependencyManager.shared.getter(v55);
  v57 = AppDependency.__allocating_init(key:manager:)(&v374, v56);
  sub_100047110(&qword_100822D10);
  v376 = 0;
  v374 = 0u;
  v375 = 0u;
  swift_retain(v57);
  v59 = static AppDependencyManager.shared.getter(v58);
  v60 = AppDependency.__allocating_init(key:manager:)(&v374, v59);
  swift_retain(v60);
  v61 = v305;
  v62 = sub_1001640AC(v305);
  v64 = v63;
  v297 = v62;
  *(_QWORD *)&v374 = v62;
  *((_QWORD *)&v374 + 1) = v63;
  *(_QWORD *)&v375 = 0;
  *((_QWORD *)&v375 + 1) = 0xE000000000000000;
  v376 = 0;
  v377 = 0xE000000000000000;
  v378 = v324;
  v379 = v323;
  v380 = v321;
  v381 = v318;
  v382 = v313;
  v383 = v322;
  v384 = v320;
  v385 = v315;
  v386 = v314;
  v387 = v319;
  v388 = v325;
  v389 = v317;
  v390 = v316;
  v391 = v307;
  v392 = v312;
  v393 = v311;
  v394 = v310;
  v395 = v309;
  v303 = v48;
  v304 = v47;
  v396 = v47;
  v397 = v48;
  v301 = v51;
  v302 = v49;
  v398 = v49;
  v399 = v51;
  v400 = v61;
  v300 = v54;
  v401 = v54;
  v402 = v57;
  v403 = v60;
  v65 = v308;
  *(_QWORD *)&v358 = v308;
  swift_retain(v60);
  v66 = v65;
  v306 = v64;
  swift_bridgeObjectRetain(v64);
  v67 = v61;
  sub_100112010(&v374);
  AppDependency.wrappedValue.setter(&v358);
  sub_100112258(&v374);
  v298 = v60;
  swift_release(v60);
  swift_retain(v57);
  sub_100112010(&v374);
  *(_QWORD *)&v358 = objc_msgSend(v66, "fitnessUIFormattingManager");
  v68 = (id)v358;
  AppDependency.wrappedValue.setter(&v358);
  sub_100112258(&v374);

  v299 = v57;
  v69 = objc_msgSend(v67, "fiui_activityType", swift_release(v57).n128_f64[0]);
  if (!v69)
    goto LABEL_100;
  v70 = v69;
  v71 = (id)FILocalizedNameForActivityType(objc_msgSend(v69, "effectiveTypeIdentifier"), objc_msgSend(v70, "swimmingLocationType"), objc_msgSend(v70, "isIndoor"));
  if (!v71)
  {
    __break(1u);
LABEL_100:
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, 0x800000010068BA00, "FitnessApp/WorkoutEntity.swift", 30, 2, 185, 0);
    __break(1u);
    return result;
  }
  v72 = v71;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
  v75 = v74;

  v76 = objc_msgSend(v70, "symbolName", swift_bridgeObjectRetain(v75).n128_f64[0]);
  v305 = v70;
  v283 = v66;
  if (v76)
  {
    v77 = v76;
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v80 = v79;

    v81 = v80;
  }
  else
  {
    v78 = 0xD000000000000011;
    v81 = 0x800000010068A730;
  }
  *(_QWORD *)&v358 = v297;
  *((_QWORD *)&v358 + 1) = v306;
  v281 = v78;
  v282 = v73;
  *(_QWORD *)&v359 = v73;
  v296 = v75;
  *((_QWORD *)&v359 + 1) = v75;
  *(_QWORD *)&v360 = v78;
  *((_QWORD *)&v360 + 1) = v81;
  *(_QWORD *)&v361 = v324;
  *((_QWORD *)&v361 + 1) = v323;
  *(_QWORD *)&v362 = v321;
  *((_QWORD *)&v362 + 1) = v318;
  *(_QWORD *)&v363 = v313;
  *((_QWORD *)&v363 + 1) = v322;
  *(_QWORD *)&v364 = v320;
  *((_QWORD *)&v364 + 1) = v315;
  *(_QWORD *)&v365 = v314;
  *((_QWORD *)&v365 + 1) = v319;
  *(_QWORD *)&v366 = v325;
  *((_QWORD *)&v366 + 1) = v317;
  *(_QWORD *)&v367 = v316;
  *((_QWORD *)&v367 + 1) = v307;
  *(_QWORD *)&v368 = v312;
  *((_QWORD *)&v368 + 1) = v311;
  *(_QWORD *)&v369 = v310;
  *((_QWORD *)&v369 + 1) = v309;
  *(_QWORD *)&v370 = v304;
  *((_QWORD *)&v370 + 1) = v303;
  *(_QWORD *)&v371 = v302;
  *((_QWORD *)&v371 + 1) = v301;
  *(_QWORD *)&v372 = v67;
  *((_QWORD *)&v372 + 1) = v300;
  *(_QWORD *)&v373 = v299;
  *((_QWORD *)&v373 + 1) = v298;
  v295 = v81;
  swift_bridgeObjectRetain(v81);
  sub_100112010(&v358);
  v82 = objc_msgSend(v67, "startDate");
  v83 = v286;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

  v84 = v285;
  v85 = *(void (**)(char *, char *, uint64_t))(v285 + 16);
  v87 = v287;
  v86 = v288;
  v85(v287, v83, v288);
  EntityProperty.wrappedValue.setter(v87);
  v88 = *(void (**)(char *, uint64_t))(v84 + 8);
  v88(v83, v86);
  sub_100112258(&v358);
  sub_100112010(&v358);
  v89 = objc_msgSend(v67, "endDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v89);

  v85(v87, v83, v86);
  EntityProperty.wrappedValue.setter(v87);
  v88(v83, v86);
  sub_100112258(&v358);
  objc_msgSend(v67, "fiui_duration");
  v91 = v90;
  v92 = (void *)objc_opt_self(NSUnitDuration);
  sub_100112010(&v358);
  v93 = objc_msgSend(v92, "seconds");
  v94 = sub_10001E724(0, &qword_100821E88, NSUnitDuration_ptr);
  v95 = (uint64_t)v289;
  Measurement.init(value:unit:)(v93, v94, v91);
  v96 = sub_100047110(&qword_100821E40);
  v97 = *(_QWORD *)(v96 - 8);
  v308 = v67;
  v98 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v97 + 56);
  v98(v95, 0, 1, v96);
  v99 = (uint64_t)v290;
  sub_100021CC0(v95, (uint64_t)v290, &qword_100822C50);
  EntityProperty.wrappedValue.setter(v99);
  sub_10001BE90(v95, &qword_100822C50);
  sub_100112258(&v358);
  sub_100112010(&v358);
  objc_msgSend(v308, "elapsedTime");
  v101 = v100;
  Measurement.init(value:unit:)(objc_msgSend(v92, "seconds"), v94, v100);
  v98(v95, 0, 1, v96);
  v102 = v308;
  sub_100021CC0(v95, v99, &qword_100822C50);
  EntityProperty.wrappedValue.setter(v99);
  sub_10001BE90(v95, &qword_100822C50);
  sub_100112258(&v358);
  v103 = objc_msgSend(v102, "fiui_totalDistance");
  if (v103)
  {
    v104 = v103;
    v105 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    objc_msgSend(v104, "doubleValueForUnit:", v105);
    v101 = v106;

    v107 = (void *)objc_opt_self(NSUnitLength);
    sub_100112010(&v358);
    v108 = objc_msgSend(v107, "meters");
    v109 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
    v110 = (uint64_t)v293;
    Measurement.init(value:unit:)(v108, v109, v101);
    v111 = sub_100047110(&qword_100821E10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v110, 0, 1, v111);
    v112 = v294;
    sub_100021CC0(v110, v294, &qword_100821E38);
    EntityProperty.wrappedValue.setter(v112);
    sub_10001BE90(v110, &qword_100821E38);
    sub_100112258(&v358);

  }
  sub_10001E724(0, &qword_100821E90, HKQuantityType_ptr);
  isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierActiveEnergyBurned).super.super.super.isa;
  v114 = &selRef_setIncludeUpcomingEventMembers_;
  v115 = objc_msgSend(v102, "statisticsForType:", isa);

  v116 = &selRef_setIncludeUpcomingEventMembers_;
  v117 = v305;
  if (v115)
  {
    v118 = objc_msgSend(v115, "sumQuantity");
    if (v118)
    {
      v119 = v118;
      v290 = (char *)objc_opt_self(HKUnit);
      v120 = objc_msgSend(v290, "largeCalorieUnit");
      objc_msgSend(v119, "doubleValueForUnit:", v120);
      v101 = v121;

      v122 = (char *)objc_opt_self(NSUnitEnergy);
      sub_100112010(&v358);
      v289 = v122;
      v123 = objc_msgSend(v122, "kilocalories");
      v124 = sub_10001E724(0, &qword_100821ED0, NSUnitEnergy_ptr);
      v125 = (uint64_t)v277;
      v288 = v124;
      Measurement.init(value:unit:)(v123, v124, v101);
      v126 = v102;
      v127 = sub_100047110(&qword_100821E30);
      v287 = *(char **)(*(_QWORD *)(v127 - 8) + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v287)(v125, 0, 1, v127);
      v128 = v278;
      sub_100021CC0(v125, v278, &qword_100821E28);
      EntityProperty.wrappedValue.setter(v128);
      sub_10001BE90(v125, &qword_100821E28);
      sub_100112258(&v358);
      v129 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierBasalEnergyBurned).super.super.super.isa;
      v130 = objc_msgSend(v126, "statisticsForType:", v129);

      if (v130)
      {
        v116 = &selRef_setIncludeUpcomingEventMembers_;
        v131 = objc_msgSend(v130, "sumQuantity");
        if (v131)
        {
          v132 = v131;
          v133 = objc_msgSend(v290, "largeCalorieUnit");
          objc_msgSend(v132, "doubleValueForUnit:", v133);
          v135 = v134;

          v101 = v101 + v135;
          sub_100112010(&v358);
          v136 = objc_msgSend(v289, "kilocalories");
          v137 = (uint64_t)v277;
          Measurement.init(value:unit:)(v136, v288, v101);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v287)(v137, 0, 1, v127);
          v138 = v278;
          sub_100021CC0(v137, v278, &qword_100821E28);
          EntityProperty.wrappedValue.setter(v138);
          v114 = &selRef_setIncludeUpcomingEventMembers_;
          v116 = &selRef_setIncludeUpcomingEventMembers_;
          sub_10001BE90(v137, &qword_100821E28);

          sub_100112258(&v358);
          v115 = v132;
        }
        else
        {

        }
        v102 = v308;
        v117 = v305;
      }
      else
      {
        v102 = v308;
        v117 = v305;
        v116 = &selRef_setIncludeUpcomingEventMembers_;
      }

    }
  }
  v139 = objc_msgSend(v102, "fiui_elevationGain");
  if (v139)
  {
    v140 = v139;
    v141 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    objc_msgSend(v140, "doubleValueForUnit:", v141);
    v101 = v142;

    v143 = (void *)objc_opt_self(NSUnitLength);
    sub_100112010(&v358);
    v144 = objc_msgSend(v143, "meters");
    v145 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
    v146 = (uint64_t)v293;
    Measurement.init(value:unit:)(v144, v145, v101);
    v147 = sub_100047110(&qword_100821E10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 56))(v146, 0, 1, v147);
    v148 = v294;
    sub_100021CC0(v146, v294, &qword_100821E38);
    EntityProperty.wrappedValue.setter(v148);
    sub_10001BE90(v146, &qword_100821E38);
    sub_100112258(&v358);

  }
  objc_msgSend(v102, "fiui_averagePower");
  if (v149 > 0.0)
  {
    v101 = v149;
    v150 = (void *)objc_opt_self(NSUnitPower);
    sub_100112010(&v358);
    v151 = objc_msgSend(v150, "watts");
    v152 = sub_10001E724(0, &qword_100821EB8, NSUnitPower_ptr);
    v153 = (uint64_t)v275;
    Measurement.init(value:unit:)(v151, v152, v101);
    v154 = sub_100047110(&qword_100821EC0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v153, 0, 1, v154);
    v155 = v276;
    sub_100021CC0(v153, v276, &qword_100821E20);
    EntityProperty.wrappedValue.setter(v155);
    sub_10001BE90(v153, &qword_100821E20);
    sub_100112258(&v358);
  }
  v156 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierStepCount).super.super.super.isa;
  v157 = objc_msgSend(v102, v114[443], v156);

  if (!v157)
    goto LABEL_29;
  v158 = objc_msgSend(v157, v116[480]);
  if (!v158)
  {

    goto LABEL_29;
  }
  v159 = v158;
  v160 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
  objc_msgSend(v159, "doubleValueForUnit:", v160);
  v101 = v161;

  if ((~*(_QWORD *)&v101 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v101 <= -9.22337204e18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (v101 >= 9.22337204e18)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v326 = (uint64_t)v101;
  LOBYTE(v327) = 0;
  sub_100112010(&v358);
  EntityProperty.wrappedValue.setter(&v326);
  sub_100112258(&v358);

LABEL_29:
  v162 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierFlightsClimbed).super.super.super.isa;
  v157 = objc_msgSend(v102, v114[443], v162);

  if (!v157)
    goto LABEL_36;
  v163 = objc_msgSend(v157, v116[480]);
  if (!v163)
  {

    goto LABEL_36;
  }
  v159 = v163;
  v164 = objc_msgSend((id)objc_opt_self(HKUnit), "countUnit");
  objc_msgSend(v159, "doubleValueForUnit:", v164);
  v101 = v165;

  if ((~*(_QWORD *)&v101 & 0x7FF0000000000000) == 0)
    goto LABEL_92;
  if (v101 <= -9.22337204e18)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v101 >= 9.22337204e18)
    goto LABEL_97;
  v326 = (uint64_t)v101;
  LOBYTE(v327) = 0;
  sub_100112010(&v358);
  EntityProperty.wrappedValue.setter(&v326);
  sub_100112258(&v358);

LABEL_36:
  objc_msgSend(v102, "fiui_averageCadence");
  if (v166 <= 0.0)
    goto LABEL_44;
  v101 = v166;
  v167 = FIUIIsWorkoutTypePedestrianActivity(objc_msgSend(v117, "effectiveTypeIdentifier"));
  sub_100112010(&v358);
  if (!v167)
  {
    if (qword_10081D5E0 != -1)
      swift_once(&qword_10081D5E0, sub_100163098);
    v168 = &qword_100869F00;
    goto LABEL_43;
  }
  if (qword_10081D5E8 != -1)
    goto LABEL_98;
  while (1)
  {
    v168 = &qword_100869F08;
LABEL_43:
    v169 = (void *)*v168;
    v170 = sub_10001E724(0, &qword_100821E98, NSUnitFrequency_ptr);
    v171 = v169;
    v172 = (uint64_t)v279;
    Measurement.init(value:unit:)(v171, v170, v101);
    v173 = sub_100047110(&qword_100821EA0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 56))(v172, 0, 1, v173);
    v174 = v280;
    sub_100021CC0(v172, v280, &qword_100821E08);
    EntityProperty.wrappedValue.setter(v174);
    sub_10001BE90(v172, &qword_100821E08);
    sub_100112258(&v358);
LABEL_44:
    v175 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierWalkingSpeed).super.super.super.isa;
    v176 = objc_msgSend(v102, v114[443], v175);

    if (v176)
    {
      v177 = objc_msgSend(v176, "averageQuantity");
      if (v177)
      {
        v178 = v177;
        v179 = String._bridgeToObjectiveC()();
        v180 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v179);

        objc_msgSend(v178, "doubleValueForUnit:", v180);
        v101 = v181;

        v182 = (void *)objc_opt_self(NSUnitSpeed);
        sub_100112010(&v358);
        v183 = objc_msgSend(v182, "metersPerSecond");
        v184 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
        v185 = v114;
        v186 = (uint64_t)v291;
        Measurement.init(value:unit:)(v183, v184, v101);
        v187 = sub_100047110(&qword_100821EB0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 56))(v186, 0, 1, v187);
        v188 = v292;
        sub_100021CC0(v186, v292, &qword_100821E18);
        EntityProperty.wrappedValue.setter(v188);
        v189 = v186;
        v114 = v185;
        sub_10001BE90(v189, &qword_100821E18);

        sub_100112258(&v358);
        v176 = v178;
      }

    }
    v190 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierRunningSpeed).super.super.super.isa;
    v191 = objc_msgSend(v102, v114[443], v190);

    if (v191)
    {
      v192 = objc_msgSend(v191, "averageQuantity");
      if (v192)
      {
        v193 = v192;
        v194 = String._bridgeToObjectiveC()();
        v195 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v194);

        objc_msgSend(v193, "doubleValueForUnit:", v195);
        v101 = v196;

        v197 = (void *)objc_opt_self(NSUnitSpeed);
        sub_100112010(&v358);
        v198 = objc_msgSend(v197, "metersPerSecond");
        v199 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
        v200 = v114;
        v201 = (uint64_t)v291;
        Measurement.init(value:unit:)(v198, v199, v101);
        v202 = sub_100047110(&qword_100821EB0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v202 - 8) + 56))(v201, 0, 1, v202);
        v203 = v292;
        sub_100021CC0(v201, v292, &qword_100821E18);
        EntityProperty.wrappedValue.setter(v203);
        v204 = v201;
        v114 = v200;
        sub_10001BE90(v204, &qword_100821E18);

        sub_100112258(&v358);
        v191 = v193;
      }

    }
    v205 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
    v206 = objc_msgSend(v102, v114[443], v205);

    if (v206)
    {
      v207 = objc_msgSend(v206, "averageQuantity");
      if (v207)
      {
        v208 = v207;
        v209 = String._bridgeToObjectiveC()();
        v210 = objc_msgSend((id)objc_opt_self(HKUnit), "unitFromString:", v209);

        objc_msgSend(v208, "doubleValueForUnit:", v210);
        v101 = v211;

        v212 = (void *)objc_opt_self(NSUnitSpeed);
        sub_100112010(&v358);
        v213 = objc_msgSend(v212, "metersPerSecond");
        v214 = sub_10001E724(0, &qword_100821EA8, NSUnitSpeed_ptr);
        v215 = v114;
        v216 = (uint64_t)v291;
        Measurement.init(value:unit:)(v213, v214, v101);
        v217 = sub_100047110(&qword_100821EB0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v217 - 8) + 56))(v216, 0, 1, v217);
        v218 = v292;
        sub_100021CC0(v216, v292, &qword_100821E18);
        EntityProperty.wrappedValue.setter(v218);
        v219 = v216;
        v114 = v215;
        sub_10001BE90(v219, &qword_100821E18);

        sub_100112258(&v358);
        v206 = v208;
      }

    }
    v220 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierHeartRate).super.super.super.isa;
    v157 = objc_msgSend(v102, v114[443], v220);

    if (v157)
    {
      v221 = objc_msgSend(v157, "averageQuantity");
      if (v221)
      {
        v159 = v221;
        v222 = objc_msgSend((id)objc_opt_self(HKUnit), "_countPerMinuteUnit");
        objc_msgSend(v159, "doubleValueForUnit:", v222);
        v101 = v223;

        sub_100112010(&v358);
        if (qword_10081D5D8 != -1)
LABEL_95:
          swift_once(&qword_10081D5D8, sub_100163084);
        v224 = (void *)qword_100869EF8;
        v225 = sub_10001E724(0, &qword_100821E98, NSUnitFrequency_ptr);
        v226 = v224;
        v114 = v279;
        Measurement.init(value:unit:)(v226, v225, v101);
        v227 = sub_100047110(&qword_100821EA0);
        (*(void (**)(char **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v227 - 8) + 56))(v114, 0, 1, v227);
        v228 = v280;
        sub_100021CC0((uint64_t)v114, v280, &qword_100821E08);
        EntityProperty.wrappedValue.setter(v228);
        sub_10001BE90((uint64_t)v114, &qword_100821E08);

        sub_100112258(&v358);
      }
      else
      {
        v159 = v157;
      }

    }
    v229 = objc_msgSend(v102, "workoutEvents");
    v230 = v305;
    if (!v229)
      break;
    v231 = v229;
    v232 = sub_10001E724(0, (unint64_t *)&qword_10081ED88, HKWorkoutEvent_ptr);
    v233 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v231, v232);

    v326 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v233 >> 62)
    {
      if (v233 < 0)
        v241 = v233;
      else
        v241 = v233 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v233);
      v234 = _CocoaArrayWrapper.endIndex.getter(v241);
      swift_bridgeObjectRelease(v233);
      if (!v234)
      {
LABEL_80:
        swift_bridgeObjectRelease(v233);
        v240 = (uint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
          goto LABEL_81;
LABEL_89:
        swift_bridgeObjectRetain(v240);
        v242 = _CocoaArrayWrapper.endIndex.getter(v273);
        swift_release(v240);
LABEL_83:
        swift_release(v240);
        if (v242 > 0)
        {
          v326 = v242;
          LOBYTE(v327) = 0;
          sub_100112010(&v358);
          EntityProperty.wrappedValue.setter(&v326);
          sub_100112258(&v358);
        }
        break;
      }
    }
    else
    {
      v234 = *(_QWORD *)((v233 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v234)
        goto LABEL_80;
    }
    if (v234 >= 1)
    {
      for (i = 0; i != v234; ++i)
      {
        if ((v233 & 0xC000000000000001) != 0)
          v238 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v233);
        else
          v238 = *(id *)(v233 + 8 * i + 32);
        v239 = v238;
        if (objc_msgSend(v238, "type") == (id)3)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(3);
          v236 = *(_QWORD *)(v326 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v236);
          v237 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v236, v239);
          specialized ContiguousArray._endMutation()(v237);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease(v233);
      v240 = v326;
      v102 = v308;
      v230 = v305;
      if (v326 < 0)
        goto LABEL_89;
LABEL_81:
      if ((v240 & 0x4000000000000000) != 0)
        goto LABEL_89;
      v242 = *(_QWORD *)(v240 + 16);
      goto LABEL_83;
    }
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    swift_once(&qword_10081D5E8, sub_1001630AC);
  }
  v243 = objc_msgSend(v102, "fiui_lapLength");
  if (v243)
  {
    v244 = v243;
    v245 = objc_msgSend((id)objc_opt_self(HKUnit), "meterUnit");
    objc_msgSend(v244, "doubleValueForUnit:", v245);
    v247 = v246;

    v248 = (void *)objc_opt_self(NSUnitLength);
    sub_100112010(&v358);
    v249 = objc_msgSend(v248, "meters");
    v250 = sub_10001E724(0, &qword_100821EC8, NSUnitLength_ptr);
    v251 = (uint64_t)v293;
    Measurement.init(value:unit:)(v249, v250, v247);
    v252 = sub_100047110(&qword_100821E10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v252 - 8) + 56))(v251, 0, 1, v252);
    v253 = v294;
    sub_100021CC0(v251, v294, &qword_100821E38);
    v254 = v307;
    EntityProperty.wrappedValue.setter(v253);
    sub_10001BE90(v251, &qword_100821E38);

    sub_100112258(&v358);
  }
  else
  {
    v254 = v307;
    v244 = v283;
  }

  sub_100112010(&v358);
  swift_bridgeObjectRelease(v306);
  swift_bridgeObjectRelease(v296);
  swift_bridgeObjectRelease(v295);
  swift_release(v324);
  swift_release(v323);
  swift_release(v321);
  swift_release(v318);
  swift_release(v313);
  swift_release(v322);
  swift_release(v320);
  swift_release(v315);
  swift_release(v314);
  swift_release(v319);
  swift_release(v325);
  swift_release(v317);
  swift_release(v316);
  swift_release(v254);
  swift_release(v312);
  swift_release(v311);
  swift_release(v310);
  swift_release(v309);
  v255 = v304;
  swift_release(v304);
  v256 = v303;
  swift_release(v303);
  v257 = v302;
  swift_release(v302);
  v258 = v301;
  swift_release(v301);
  v259 = v300;
  swift_release(v300);
  v260 = v299;
  swift_release(v299);
  v261 = v298;
  swift_release(v298);
  v262 = v308;

  v326 = v297;
  v327 = v306;
  v328 = v282;
  v329 = v296;
  v330 = v281;
  v331 = v295;
  v332 = v324;
  v333 = v323;
  v334 = v321;
  v335 = v318;
  v336 = v313;
  v337 = v322;
  v338 = v320;
  v339 = v315;
  v340 = v314;
  v341 = v319;
  v342 = v325;
  v343 = v317;
  v344 = v316;
  v345 = v254;
  v346 = v312;
  v347 = v311;
  v348 = v310;
  v349 = v309;
  v350 = v255;
  v351 = v256;
  v352 = v257;
  v353 = v258;
  v354 = v262;
  v355 = v259;
  v356 = v260;
  v357 = v261;
  result = sub_100112258(&v326);
  v264 = v371;
  v265 = v284;
  v284[12] = v370;
  v265[13] = v264;
  v266 = v373;
  v265[14] = v372;
  v265[15] = v266;
  v267 = v367;
  v265[8] = v366;
  v265[9] = v267;
  v268 = v369;
  v265[10] = v368;
  v265[11] = v268;
  v269 = v363;
  v265[4] = v362;
  v265[5] = v269;
  v270 = v365;
  v265[6] = v364;
  v265[7] = v270;
  v271 = v359;
  *v265 = v358;
  v265[1] = v271;
  v272 = v361;
  v265[2] = v360;
  v265[3] = v272;
  return result;
}

void sub_100166734(uint64_t a1)
{
  uint64_t v1;

  sub_100163EB8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10016673C()
{
  return sub_1001667E4(&qword_100822D18);
}

void sub_100166748(void *a1)
{
  sub_100047110(&qword_100822D18);
  sub_100163FCC(a1);
}

void sub_100166788(uint64_t a1)
{
  sub_100163534(a1);
}

uint64_t sub_100166790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100047110(&qword_100821E18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001667D8()
{
  return sub_1001667E4(&qword_100822D20);
}

uint64_t sub_1001667E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100047110(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

void sub_100166840(uint64_t a1)
{
  sub_100047110(&qword_100822D20);
  sub_100163630(a1);
}

unint64_t sub_100166890()
{
  unint64_t result;

  result = qword_100822D28;
  if (!qword_100822D28)
  {
    result = swift_getWitnessTable(&unk_100627E30, &type metadata for WorkoutEntity);
    atomic_store(result, (unint64_t *)&qword_100822D28);
  }
  return result;
}

id sub_100166900()
{
  return sub_100111F3C(type metadata accessor for GradientColors);
}

id sub_100166938()
{
  return sub_100111F3C(type metadata accessor for MetricColors);
}

BOOL sub_100166974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  _BYTE v17[24];

  v1 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for ContentAvailability(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v17[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess(v11, v17, 0, 0);
  sub_10002AD54(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100154058((uint64_t)v3);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ContentAvailability.available(_:), v4);
  v12 = sub_10002AD14(&qword_100822E98, (uint64_t)&protocol conformance descriptor for ContentAvailability);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v12);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  return (v13 & 1) == 0;
}

uint64_t sub_100166BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _BYTE v18[24];
  _BYTE v19[24];

  v3 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v18[-v11];
  a2 += 16;
  swift_beginAccess(a2, v19, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v14 = (char *)result;
    ContentAvailabilityUpdated.availability.getter();
    v15 = (uint64_t)&v14[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state];
    swift_beginAccess(&v14[OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state], v18, 0, 0);
    sub_10002AD54(v15, (uint64_t)v5);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_100154058((uint64_t)v5);
      sub_1001674C0((uint64_t)v12);

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v5, v6);
      v16 = sub_10002AD14(&qword_100822E98, (uint64_t)&protocol conformance descriptor for ContentAvailability);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v16) & 1) == 0)
        sub_1001674C0((uint64_t)v12);
      v17 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
      v17(v10, v6);

      return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v12, v6);
    }
  }
  return result;
}

uint64_t sub_100166D94(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t *, uint64_t);
  id v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  int v53;
  void (*v54)(char *, uint64_t, __n128);
  uint64_t v55;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  char *v61;
  void (*v62)(char *, _QWORD, uint64_t);
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t Strong;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  void (*v75)(uint64_t, char *, uint64_t);
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[16];
  uint64_t v87[3];
  _QWORD v88[3];
  char v89[16];

  v82 = a2;
  v3 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v3);
  v79 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v72 - v9;
  v11 = type metadata accessor for ContentAvailability(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v80 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v78 = (char *)&v72 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v72 - v18;
  v20 = __chkstk_darwin(v17);
  v81 = (char *)&v72 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v72 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v72 - v25;
  v27 = sub_100047110(&qword_100822E90);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002ADAC(a1, (uint64_t)v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v27);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v31 = *v29;
    static Log.default.getter(EnumCaseMultiPayload);
    swift_errorRetain(v31);
    v32 = swift_errorRetain(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v87[0] = v36;
      *(_DWORD *)v35 = 136315138;
      swift_getErrorValue(v31, v89, v88);
      v37 = Error.logOutput.getter(v88[1], v88[2]);
      v39 = v38;
      v85 = sub_10003E8EC(v37, v38, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v35 + 4);
      swift_bridgeObjectRelease(v39);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to query content availability: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      swift_errorRelease(v31);
    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      swift_errorRelease(v31);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v8, v84);
  }
  v76 = v82 + 16;
  v40 = (void (*)(char *, uint64_t *, uint64_t))v12[4];
  v40(v26, v29, v11);
  v41 = objc_msgSend((id)objc_opt_self(UIApplication), "isRunningInStoreDemoMode");
  static Log.default.getter(v41);
  v42 = (void (*)(uint64_t, char *, uint64_t))v12[2];
  v82 = v26;
  v75 = v42;
  v43 = ((uint64_t (*)(char *, char *, uint64_t))v42)(v24, v26, v11);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  v46 = os_log_type_enabled(v44, v45);
  v77 = v12;
  v74 = (void (*)(char *, uint64_t, uint64_t))v40;
  if (v46)
  {
    v47 = swift_slowAlloc(18, -1);
    v73 = swift_slowAlloc(32, -1);
    v87[0] = v73;
    *(_DWORD *)v47 = 136315394;
    v72 = v47 + 4;
    v48 = sub_10002AD14(&qword_100822EA0, (uint64_t)&protocol conformance descriptor for ContentAvailability);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v11, v48);
    v51 = v50;
    v85 = sub_10003E8EC(v49, v50, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v72);
    v52 = swift_bridgeObjectRelease(v51);
    v53 = (int)v41;
    v54 = (void (*)(char *, uint64_t, __n128))v12[1];
    v54(v24, v11, v52);
    *(_WORD *)(v47 + 12) = 1024;
    LODWORD(v85) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, (char *)&v85 + 4, v47 + 14);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Received content availability: %s isDemoMode: %{BOOL}d", (uint8_t *)v47, 0x12u);
    v55 = v73;
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    v53 = (int)v41;
    v54 = (void (*)(char *, uint64_t, __n128))v12[1];
    ((void (*)(char *, uint64_t))v54)(v24, v11);
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v10, v84);
  v58 = v80;
  v57 = (uint64_t)v81;
  v59 = v82;
  v60 = v75;
  v75((uint64_t)v19, v82, v11);
  if (!v53)
  {
    ((void (*)(char *, uint64_t))v54)(v19, v11);
    goto LABEL_13;
  }
  v61 = v78;
  v62 = (void (*)(char *, _QWORD, uint64_t))v77[13];
  v62(v78, enum case for ContentAvailability.unavailableStoreFront(_:), v11);
  v63 = sub_10002AD14(&qword_100822E98, (uint64_t)&protocol conformance descriptor for ContentAvailability);
  v64 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v61, v11, v63);
  ((void (*)(char *, uint64_t))v54)(v61, v11);
  ((void (*)(char *, uint64_t))v54)(v19, v11);
  if ((v64 & 1) != 0)
  {
LABEL_13:
    v60(v57, v59, v11);
    goto LABEL_14;
  }
  v62((char *)v57, enum case for ContentAvailability.available(_:), v11);
LABEL_14:
  v65 = v76;
  swift_beginAccess(v76, v87, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v65);
  if (Strong)
  {
    v67 = (void *)Strong;
    v68 = Strong + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
    swift_beginAccess(Strong + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state, &v85, 0, 0);
    v69 = v68;
    v70 = v79;
    sub_10002AD54(v69, v79);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v77[6])(v70, 1, v11) == 1)
    {
      sub_100154058(v70);
      sub_1001674C0(v57);
    }
    else
    {
      v74(v58, v70, v11);
      v71 = sub_10002AD14(&qword_100822E98, (uint64_t)&protocol conformance descriptor for ContentAvailability);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v11, v71) & 1) == 0)
        sub_1001674C0(v57);
      ((void (*)(char *, uint64_t))v54)(v58, v11);
    }

  }
  ((void (*)(uint64_t, uint64_t))v54)(v57, v11);
  return ((uint64_t (*)(char *, uint64_t))v54)(v59, v11);
}

void sub_1001674C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  _BYTE v13[24];

  v3 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state, v13, 33, 0);
  sub_10004E258((uint64_t)v5, v8);
  swift_endAccess(v13);
  LOBYTE(v8) = sub_10002AAFC();
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setBool:forKey:", v8 & 1, v10);

  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10081D5F0 != -1)
    swift_once(&qword_10081D5F0, sub_10004E29C);
  objc_msgSend(v11, "postNotificationName:object:", qword_100869F10, v1);

}

id sub_100167670()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SeymourAvailabilityManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t *sub_1001676FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for ContentAvailability(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001677C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for ContentAvailability(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_10016782C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1001678D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_1001679C0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100167A64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for ContentAvailability(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100167B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100167B60);
}

uint64_t sub_100167B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for ContentAvailability(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100167BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100167BB8);
}

uint64_t sub_100167BB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = type metadata accessor for ContentAvailability(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100167C08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentAvailability(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_100167C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentAvailability(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_100167C80()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100167CA4(uint64_t a1)
{
  char *v1;

  return sub_100166D94(a1, v1);
}

uint64_t sub_100167CAC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100167CD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A43F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100167CE0(uint64_t a1)
{
  uint64_t v1;

  return sub_100166BC4(a1, v1);
}

char *sub_100167CE8(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  id v18;
  Class isa;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  Class v27;
  objc_super v29;

  v9 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  v10 = objc_allocWithZone((Class)UIView);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  *(_QWORD *)&v11[v13] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX] = 0;

  v29.receiver = v11;
  v29.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  v14 = (char *)objc_msgSendSuper2(&v29, "initWithFrame:", a1, a2, a3, a4);
  v15 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  v16 = *(void **)&v14[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView];
  sub_10013AD0C();
  v17 = v14;
  v18 = v16;
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.0, 0.0, 0.30137).super.isa;
  objc_msgSend(v18, "setBackgroundColor:", isa);

  v20 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  v21 = *(void **)&v17[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView];
  v22 = (void *)objc_opt_self(UIColor);
  v23 = v21;
  v24 = objc_msgSend(v22, "blackColor");
  objc_msgSend(v23, "setBackgroundColor:", v24);

  v25 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  v26 = *(id *)&v17[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView];
  v27 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.0, 0.0, 0.30137).super.isa;
  objc_msgSend(v26, "setBackgroundColor:", v27);

  objc_msgSend(v17, "addSubview:", *(_QWORD *)&v14[v15]);
  objc_msgSend(v17, "addSubview:", *(_QWORD *)&v17[v20]);
  objc_msgSend(v17, "addSubview:", *(_QWORD *)&v17[v25]);

  return v17;
}

uint64_t sub_100167F7C(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;

  v3 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  v4 = objc_allocWithZone((Class)UIView);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v6 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v7 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  v8 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  *(_QWORD *)&v5[v7] = v8;
  v9 = *(void **)&v5[v7];

  v10 = type metadata accessor for TrendChartMaskingView();
  swift_deallocPartialClassInstance(v5, v10, 48, 7);
  return 0;
}

id sub_1001680BC()
{
  char *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  CGFloat v9;
  objc_super v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  objc_msgSendSuper2(&v11, "layoutSubviews");
  v1 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth;
  v2 = *(double *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth];
  v3 = *(double *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX] + v2 * -0.5;
  v4 = v2 + v3;
  v5 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView];
  objc_msgSend(v0, "frame");
  objc_msgSend(v5, "setFrame:", 0.0, 0.0, v3, CGRectGetHeight(v12));
  v6 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView];
  v7 = *(double *)&v0[v1];
  objc_msgSend(v0, "frame");
  objc_msgSend(v6, "setFrame:", v3, 0.0, v7, CGRectGetHeight(v13));
  v8 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView];
  objc_msgSend(v0, "frame");
  v9 = CGRectGetWidth(v14) - v4;
  objc_msgSend(v0, "frame");
  return objc_msgSend(v8, "setFrame:", v4, 0.0, v9, CGRectGetHeight(v15));
}

id sub_100168238()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TrendChartMaskingView()
{
  return objc_opt_self(_TtC10FitnessApp21TrendChartMaskingView);
}

void sub_10016839C()
{
  char *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  objc_super v24;

  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  objc_msgSendSuper2(&v24, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v1;
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "systemBackgroundColor");
  objc_msgSend(v2, "setBackgroundColor:", v4);

  v5 = objc_msgSend(v0, "navigationItem");
  v6 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 24, v0, "close");
  objc_msgSend(v5, "setRightBarButtonItem:", v6);

  v7 = objc_msgSend(v0, "navigationItem");
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setTitle:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v14 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController];
  v15 = objc_msgSend(v14, "view");
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = v15;
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v17 = objc_msgSend(v14, "view");
  if (!v17)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v18 = v17;
  v19 = objc_msgSend(v3, "clearColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  v20 = objc_msgSend(v0, "view");
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21 = v20;
  v22 = objc_msgSend(v14, "view");
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v21, "addSubview:", v22);

    objc_msgSend(v0, "addChildViewController:", v14);
    objc_msgSend(v14, "didMoveToParentViewController:", v0);
    sub_1001688CC();
    return;
  }
LABEL_11:
  __break(1u);
}

void sub_1001686E8(char a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  objc_super v14;

  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  objc_msgSendSuper2(&v14, "viewWillAppear:", a1 & 1);
  v3 = objc_msgSend(objc_allocWithZone((Class)UINavigationBarAppearance), "init");
  objc_msgSend(v3, "configureWithOpaqueBackground");
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v3;
  v6 = objc_msgSend(v4, "systemBackgroundColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = v5;
  v8 = objc_msgSend(v4, "systemBackgroundColor");
  objc_msgSend(v7, "setShadowColor:", v8);

  v9 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v9, "setScrollEdgeAppearance:", v7);

  v10 = objc_msgSend(v1, "tabBarController");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, "tabBar");

    v13 = objc_msgSend(objc_allocWithZone((Class)UITabBarAppearance), "init");
    objc_msgSend(v12, "setScrollEdgeAppearance:", v13);

  }
}

void sub_1001688CC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  Class isa;

  v1 = sub_100047110((uint64_t *)&unk_100828340);
  v2 = swift_allocObject(v1, 64, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100623750;
  v3 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController];
  v4 = objc_msgSend(v3, "view");
  if (!v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v4;
  v6 = objc_msgSend(v4, "topAnchor");

  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "safeAreaLayoutGuide");

  v10 = objc_msgSend(v9, "topAnchor");
  v11 = objc_msgSend(v6, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v2 + 32) = v11;
  v12 = objc_msgSend(v3, "view");
  if (!v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "leadingAnchor");

  v15 = objc_msgSend(v0, "view");
  if (!v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "safeAreaLayoutGuide");

  v18 = objc_msgSend(v17, "leadingAnchor");
  v19 = objc_msgSend(v14, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v2 + 40) = v19;
  v20 = objc_msgSend(v3, "view");
  if (!v20)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "trailingAnchor");

  v23 = objc_msgSend(v0, "view");
  if (!v23)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "safeAreaLayoutGuide");

  v26 = objc_msgSend(v25, "trailingAnchor");
  v27 = objc_msgSend(v22, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v2 + 48) = v27;
  v28 = objc_msgSend(v3, "view");
  if (!v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "bottomAnchor");

  v31 = objc_msgSend(v0, "view");
  if (v31)
  {
    v32 = v31;
    v33 = (void *)objc_opt_self(NSLayoutConstraint);
    v34 = objc_msgSend(v32, "safeAreaLayoutGuide");

    v35 = objc_msgSend(v34, "bottomAnchor");
    v36 = objc_msgSend(v30, "constraintEqualToAnchor:", v35);

    *(_QWORD *)(v2 + 56) = v36;
    specialized Array._endMutation()(v37);
    sub_100039898();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "activateConstraints:", isa, swift_bridgeObjectRelease(v2).n128_f64[0]);

    return;
  }
LABEL_17:
  __break(1u);
}

id sub_100168CCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WorkoutDetailedHeartRateViewController()
{
  return objc_opt_self(CHWorkoutDetailedHeartRateViewController);
}

id sub_100168D88(void *a1, void *a2, void *a3)
{
  char *v3;
  id v7;
  id v8;
  id v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  objc_super v23;
  _QWORD v24[2];

  *(_QWORD *)&v3[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_workout] = a1;
  *(_QWORD *)&v3[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_workoutActivity] = a2;
  v7 = a2;
  v8 = a1;
  v9 = v7;
  v10 = v3;
  v11 = v8;
  v12 = objc_msgSend(a3, "dataCalculator");
  v13 = type metadata accessor for WorkoutDetailHeartRateDataStore(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = a3;
  v15 = sub_100104610(v11, a2, v12, v14);

  *(_QWORD *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_dataStore] = v15;
  v16 = sub_100168F04();
  swift_retain(v15);
  v18 = ObservedObject.init(wrappedValue:)(v17, v13, v16);
  v20 = v19;
  v21 = (uint64_t *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateView];
  *v21 = v18;
  v21[1] = v19;
  v24[0] = v18;
  v24[1] = v19;
  objc_allocWithZone((Class)sub_100047110(&qword_100822F50));
  swift_retain(v20);
  *(_QWORD *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController] = UIHostingController.init(rootView:)(v24);

  v23.receiver = v10;
  v23.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  return objc_msgSendSuper2(&v23, "initWithNibName:bundle:", 0, 0);
}

unint64_t sub_100168F04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100822F48;
  if (!qword_100822F48)
  {
    v1 = type metadata accessor for WorkoutDetailHeartRateDataStore(255);
    result = swift_getWitnessTable(&unk_100624210, v1);
    atomic_store(result, (unint64_t *)&qword_100822F48);
  }
  return result;
}

id sub_100168F4C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel), "heightAnchor");
    v5 = objc_msgSend(v4, "constraintEqualToConstant:", 0.0);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

char *sub_100168FF0(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;

  v9 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel;
  v10 = objc_allocWithZone((Class)UILabel);
  v11 = v4;
  v12 = objc_msgSend(v10, "init");
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v4[v9] = v12;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint] = 0;

  v17.receiver = v11;
  v17.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", a1, a2, a3, a4);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel];
  v15 = v13;
  objc_msgSend(v15, "addSubview:", v14);
  sub_1001691E4();

  return v15;
}

id sub_10016910C(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  objc_super v9;

  v3 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel;
  v4 = objc_allocWithZone((Class)UILabel);
  v5 = v1;
  v6 = objc_msgSend(v4, "init");
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v1[v3] = v6;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint] = 0;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

void sub_1001691E4()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  Class isa;

  v1 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = sub_100047110((uint64_t *)&unk_100828340);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100623750;
  *(_QWORD *)(v3 + 32) = sub_100168F4C();
  v4 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel];
  v5 = objc_msgSend(v4, "bottomAnchor");
  v6 = objc_msgSend(v0, "bottomAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v3 + 40) = v7;
  v8 = objc_msgSend(v4, "trailingAnchor");
  v9 = objc_msgSend(v0, "trailingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v3 + 48) = v10;
  v11 = objc_msgSend(v4, "leadingAnchor");
  v12 = objc_msgSend(v0, "leadingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v3 + 56) = v13;
  specialized Array._endMutation()(v14);
  sub_100039898();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "activateConstraints:", isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

}

id sub_1001693C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AddToYourRingSectionHeaderView()
{
  return objc_opt_self(_TtC10FitnessApp30AddToYourRingSectionHeaderView);
}

uint64_t sub_100169520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t j;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t (*v36)(char *, char *, uint64_t);
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  Swift::String v52[2];
  char *v53;

  v2 = type metadata accessor for EngagementBadge(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v47 = (char *)&v40 - v7;
  result = __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  i = 0;
  v53 = (char *)_swiftEmptyArrayStorage;
  v48 = a1;
  v12 = *(_QWORD *)(a1 + 56);
  v41 = a1 + 56;
  v42 = v3;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v43 = result;
  if ((v14 & v12) != 0)
    goto LABEL_6;
LABEL_7:
  v19 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v19 < v45)
    {
      v20 = *(_QWORD *)(v41 + 8 * v19);
      ++i;
      if (v20)
        goto LABEL_21;
      i = v19 + 1;
      if (v19 + 1 < v45)
      {
        v20 = *(_QWORD *)(v41 + 8 * i);
        if (v20)
          goto LABEL_21;
        i = v19 + 2;
        if (v19 + 2 < v45)
        {
          v20 = *(_QWORD *)(v41 + 8 * i);
          if (v20)
            goto LABEL_21;
          i = v19 + 3;
          if (v19 + 3 < v45)
          {
            v20 = *(_QWORD *)(v41 + 8 * i);
            if (v20)
              goto LABEL_21;
            v21 = v19 + 4;
            if (v21 < v45)
            {
              v20 = *(_QWORD *)(v41 + 8 * v21);
              for (i = v21; !v20; ++v21)
              {
                i = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_35;
                if (i >= v45)
                  goto LABEL_33;
                v20 = *(_QWORD *)(v41 + 8 * i);
              }
LABEL_21:
              v15 = (v20 - 1) & v20;
              for (j = __clz(__rbit64(v20)) + (i << 6); ; j = v17 | (i << 6))
              {
                v22 = v47;
                v23 = *(_QWORD *)(v3 + 72);
                (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v47, *(_QWORD *)(v48 + 48) + v23 * j, v2);
                v51 = *(uint64_t (**)(char *, char *, uint64_t))(v3 + 32);
                v24 = v51(v10, v22, v2);
                v25 = static EngagementConstants.appBadgingAllowedBadgeIdentifiers.getter(v24);
                v26 = v25;
                v27 = *(_QWORD *)(v25 + 16);
                if (v27)
                {
                  v46 = v23;
                  v49 = v15;
                  v50 = i;
                  swift_bridgeObjectRetain(v25);
                  v28 = (_QWORD *)(v26 + 40);
                  while (1)
                  {
                    v29 = *v28;
                    v30 = swift_bridgeObjectRetain(*v28);
                    EngagementBadge.identifier.getter(v30);
                    v32 = v31;
                    v33 = String.lowercased()();
                    swift_bridgeObjectRelease(v32);
                    v52[1] = v33;
                    v34 = String.lowercased()();
                    v52[0] = v34;
                    v35 = sub_100038CA0();
                    LOBYTE(v32) = StringProtocol.contains<A>(_:)(v52, &type metadata for String, &type metadata for String, v35, v35);
                    swift_bridgeObjectRelease(v29);
                    swift_bridgeObjectRelease(v33._object);
                    swift_bridgeObjectRelease(v34._object);
                    if ((v32 & 1) != 0)
                      break;
                    v28 += 2;
                    if (!--v27)
                    {
                      swift_bridgeObjectRelease(v26);
                      v3 = v42;
                      v2 = v43;
                      v15 = v49;
                      i = v50;
                      goto LABEL_5;
                    }
                  }
                  swift_bridgeObjectRelease_n(v26, 2);
                  v2 = v43;
                  v36 = v51;
                  v51(v44, v10, v43);
                  v37 = v53;
                  if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
                  {
                    sub_1001216F8(0, *((_QWORD *)v37 + 2) + 1, 1);
                    v37 = v53;
                  }
                  v3 = v42;
                  v15 = v49;
                  i = v50;
                  v39 = *((_QWORD *)v37 + 2);
                  v38 = *((_QWORD *)v37 + 3);
                  if (v39 >= v38 >> 1)
                  {
                    sub_1001216F8(v38 > 1, v39 + 1, 1);
                    v37 = v53;
                  }
                  *((_QWORD *)v37 + 2) = v39 + 1;
                  result = v36(&v37[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v39 * v46], v44, v2);
                  v53 = v37;
                  if (!v15)
                    goto LABEL_7;
                }
                else
                {
LABEL_5:
                  v16 = swift_bridgeObjectRelease(v26);
                  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v10, v2, v16);
                  if (!v15)
                    goto LABEL_7;
                }
LABEL_6:
                v17 = __clz(__rbit64(v15));
                v15 &= v15 - 1;
              }
            }
          }
        }
      }
    }
LABEL_33:
    swift_release(v48);
    return (uint64_t)v53;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void sub_10016990C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10000A934(v2);

  }
  sub_10000DBD0();
}

void sub_100169984(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = static os_log_type_t.error.getter(a1);
  v3 = (void *)HKLogActivity;
  v4 = sub_100047110((uint64_t *)&unk_100827460);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100622F90;
  v10 = 0;
  v11 = 0xE000000000000000;
  v12 = a1;
  v6 = v3;
  v7 = sub_100047110(&qword_10082EEA0);
  _print_unlocked<A, B>(_:_:)(&v12, &v10, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = v10;
  v9 = v11;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_100038CF8();
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v6, "Error fetching seymour app badge count %@", 41, 2, v5);

  swift_bridgeObjectRelease(v5);
  sub_10000DBD0();
}

uint64_t sub_100169A9C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentAvailability(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ContentAvailability.available(_:), v7);
  v11 = sub_1000083D8(&qword_100839C20, (uint64_t (*)(uint64_t))&type metadata accessor for ContentAvailability, (uint64_t)&protocol conformance descriptor for ContentAvailability);
  dispatch thunk of RawRepresentable.rawValue.getter(&v34, v7, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v31, v7, v11);
  v12 = v35;
  v13 = v32;
  v29 = v4;
  if (v34 == v31 && v35 == v32)
  {
    v14 = 1;
    v13 = v35;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v31, v32, 0);
  }
  swift_bridgeObjectRelease(v12);
  v15 = swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v15);
  v16 = swift_beginAccess(a1 + 16, &v34, 1, 0);
  *(_BYTE *)(a1 + 16) = v14 & 1;
  static Log.default.getter(v16);
  v17 = swift_retain_n(a1, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v33 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_beginAccess(a1 + 16, &v31, 0, 0);
    LOBYTE(v30) = *(_BYTE *)(a1 + 16);
    v22 = sub_100047110(&qword_10083B4F0);
    v23 = Optional.description.getter(v22);
    v25 = v24;
    v30 = sub_10003E8EC(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "FitnessAppBadgeAggregator: isContentAvailable %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v26 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v6, v3);
  return static Promise<>.success.getter(v26);
}

uint64_t sub_100169DA8(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002000010002;
  return sub_10016A05C(a1, "FitnessAppBadgeAggregator: Failed to query content availability: %s", a2);
}

uint64_t sub_100169DCC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  char v34;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = NoticePrivacyPreference.state.getter(v6);
  v34 = v9 & 1;
  v31[0] = 1;
  v10 = sub_100020568();
  v11 = sub_100020524();
  v12 = static PortableEnum<>.== infix(_:_:)(&v33, v31, &type metadata for NoticePrivacyPreference.State, v10, v11) & 1;
  v13 = swift_beginAccess(a1 + 16, &v33, 1, 0);
  *(_BYTE *)(a1 + 16) = v12;
  static Log.default.getter(v13);
  v14 = swift_retain_n(a1, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v28 = v5;
    v19 = v18;
    v32 = v18;
    v27 = v4;
    *(_DWORD *)v17 = 136315138;
    v29 = a2;
    swift_beginAccess(a1 + 16, v31, 0, 0);
    LOBYTE(v30) = *(_BYTE *)(a1 + 16);
    v20 = sub_100047110(&qword_10083B4F0);
    v21 = Optional.description.getter(v20);
    v23 = v22;
    v30 = sub_10003E8EC(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v17 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "FitnessAppBadgeAggregator: isPrivacyAcknowledged %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v24 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v8, v27);
  }
  else
  {

    swift_release_n(a1, 2);
    v24 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return static Promise<>.success.getter(v24);
}

uint64_t sub_10016A038(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002200010002;
  return sub_10016A05C(a1, "FitnessAppBadgeAggregator: Unable to fetch notice privacy preference: %{public}s.", a2);
}

uint64_t sub_10016A05C(uint64_t a1, const char *a2, int16x8_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int16x8_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;

  v26 = a3;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter(v8);
  swift_errorRetain(a1);
  v11 = swift_errorRetain(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v24 = v7;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v25 = v3;
    v17 = v16;
    v30 = v16;
    v23 = a2;
    *(_DWORD *)v15 = vmovn_s16(v26).u32[0];
    v26.i64[0] = v6;
    swift_getErrorValue(a1, v29, v28);
    v18 = Error.logOutput.getter(v28[1], v28[2]);
    v20 = v19;
    v27 = sub_10003E8EC(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v15 + 4);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v23, v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v26.i64[0]);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void sub_10016A264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v12[5];
  _QWORD *v13;

  v6 = swift_allocObject(&unk_100789BD8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (void *)objc_opt_self(UNUserNotificationCenter);
  swift_retain(a2);
  v8 = objc_msgSend(v7, "currentNotificationCenter");
  v9 = (_QWORD *)swift_allocObject(&unk_100789C00, 40, 7);
  v9[2] = a3;
  v9[3] = sub_10016AF34;
  v9[4] = v6;
  v12[4] = sub_10016AF98;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000277E8;
  v12[3] = &unk_100789C18;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain(a3);
  objc_msgSend(v8, "getNotificationSettingsWithCompletionHandler:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);

}

uint64_t sub_10016A384(void *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD, _QWORD);
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;
  unsigned __int8 v36;
  _BYTE v37[24];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = objc_msgSend(a1, "authorizationStatus") == (id)2;
  v12 = swift_beginAccess(a2 + 16, v37, 1, 0);
  *(_BYTE *)(a2 + 16) = (_BYTE)a1;
  static Log.default.getter(v12);
  v13 = swift_retain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v30 = v8;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v29 = v9;
    v19 = v18;
    v35 = v18;
    v31 = a4;
    v32 = a3;
    *(_DWORD *)v17 = 136315138;
    swift_beginAccess(a2 + 16, v34, 0, 0);
    LOBYTE(v33) = *(_BYTE *)(a2 + 16);
    v20 = sub_100047110(&qword_10083B4F0);
    v21 = Optional.description.getter(v20);
    v23 = v22;
    v33 = sub_10003E8EC(v21, v22, &v35);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v17 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "FitnessAppBadgeAggregator: isNotificationAuthorized %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  }
  else
  {

    swift_release_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v24 = sub_100047110(&qword_10082EEA0);
  static Result<>.success.getter(&v35, v24, &protocol self-conformance witness table for Error);
  v25 = v35;
  v26 = v36;
  a3(v35, v36);
  return sub_100016864(v25, v26);
}

void sub_10016A600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSString v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(void);
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  int v29;
  void (*v30)(void);
  unsigned __int8 *v31;
  int v32;
  uint64_t Strong;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  unsigned int v42;
  int v43;

  v36 = a3;
  v37 = a2;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "BOOLForKey:", v15);

  v18 = static Log.default.getter(v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    v35 = a1;
    v22 = a5;
    v23 = v21;
    *(_DWORD *)v21 = 67109120;
    v42 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v21 + 4);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "FitnessAppBadgeAggregator: forceRequiringPrivacyAcknowledgement %{BOOL}d", v23, 8u);
    v24 = v23;
    a5 = v22;
    a1 = v35;
    swift_slowDealloc(v24, -1, -1);
  }
  v25 = a4 + 16;
  v26 = (_BYTE *)(a1 + 16);
  v27 = (_BYTE *)(v37 + 16);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    swift_beginAccess(v26, v38, 1, 0);
    *v26 = 0;
  }
  swift_beginAccess(v27, &v42, 0, 0);
  if ((*v27 & 1) != 0)
  {
    swift_beginAccess(v26, v40, 0, 0);
    v28 = 0;
    v29 = *v26;
    if (v29 != 2 && (v29 & 1) == 0)
    {
      v30 = a5;
      v31 = (unsigned __int8 *)(v36 + 16);
      swift_beginAccess(v36 + 16, v39, 0, 0);
      v32 = *v31;
      if (v32 == 2)
        v28 = 0;
      else
        v28 = v32 & 1;
      a5 = v30;
    }
  }
  else
  {
    v28 = 0;
  }
  swift_beginAccess(v25, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25);
  if (Strong)
  {
    v34 = (void *)Strong;
    sub_10000A9F0(v28, a5, a6);

  }
}

uint64_t sub_10016A89C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(v7);
  static Log.default.getter(v10);
  swift_errorRetain(a1);
  v11 = swift_errorRetain(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v23 = v2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v27 = v16;
    v21 = v6;
    v22 = v5;
    *(_DWORD *)v15 = 136446210;
    swift_getErrorValue(a1, v26, v25);
    v17 = Error.logOutput.getter(v25[1], v25[2]);
    v19 = v18;
    v24 = sub_10003E8EC(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v15 + 4);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "FitnessAppBadgeAggregator: Unable to fetch amelia badge: %{public}s.", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

id sub_10016AACC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FitnessAppBadgeAggregator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10016ABC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)swift_allocObject(&unk_100789D90, 40, 7);
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = v5;
  swift_bridgeObjectRetain(v5);
  swift_retain(a3);
  return Promise.init(asyncOperation:)(sub_10016B0AC, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_10016AC4C(void (*a1)(uint64_t *), uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v8 = *a5;
  a3(&v9, &v8);
  v6 = v9;
  v10 = 0;
  a1(&v9);
  return sub_100016864(v6, 0);
}

uint64_t sub_10016ACCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016ACDC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016AD00()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10016AD3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10016AD78()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10016ADB4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10016ADF0()
{
  uint64_t v0;

  sub_100265970(v0);
}

uint64_t sub_10016ADF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10016AE08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100169A9C(v1, a1);
}

uint64_t sub_10016AE10()
{
  return sub_10004BE58(&qword_100822E88);
}

uint64_t sub_10016AE1C(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, &qword_100822E88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B2A0);
}

uint64_t sub_10016AE30()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_10016AE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100169DCC(v1, a1);
}

uint64_t sub_10016AE44()
{
  return sub_10004BE58(&qword_100823018);
}

uint64_t sub_10016AE50(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, &qword_100823018, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B284);
}

uint64_t sub_10016AE64()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

void sub_10016AE70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10016A264(a1, a2, v2);
}

uint64_t sub_10016AE78()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_10016AEBC()
{
  uint64_t v0;

  sub_10016A600(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_10016AECC(uint64_t a1)
{
  uint64_t v1;

  return sub_10058CDF4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10016AEE4(uint64_t a1)
{
  uint64_t v1;

  return sub_10058E4C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10016AEEC()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_10016AEF8(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, (uint64_t *)&unk_100836170, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B268);
}

uint64_t sub_10016AF0C(uint64_t a1)
{
  uint64_t v1;

  return sub_10016A89C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10016AF24()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_10016AF34(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10016AF6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016AF98(void *a1)
{
  uint64_t v1;

  return sub_10016A384(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10016AFA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10016AFD0(uint64_t *a1)
{
  uint64_t v1;

  sub_10016990C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10016AFE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016B00C(uint64_t *a1)
{
  uint64_t v1;

  return sub_10016ABC8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10016B014()
{
  return sub_10004BE58(&qword_100823048);
}

uint64_t sub_10016B020(uint64_t a1, uint64_t a2)
{
  return sub_1001103E8(a1, a2, &qword_100823048, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10039B24C);
}

uint64_t sub_10016B034()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10016B058(uint64_t a1)
{
  sub_100169984(a1);
}

uint64_t sub_10016B070()
{
  return sub_10004BE58((uint64_t *)&unk_100836170);
}

uint64_t sub_10016B080()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016B0AC(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return sub_10016AC4C(a1, a2, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t *)(v2 + 32));
}

uint64_t sub_10016B0B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016B0E4()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 44, 7);
}

_QWORD *sub_10016B17C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  _QWORD v52[2];
  char v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v45 = a7;
  v46 = a8;
  v51 = a17;
  v50 = a16;
  v49 = a15;
  v47 = a13;
  v48 = a14;
  v43 = a6;
  v44 = a11;
  v24 = sub_100047110(&qword_10081F430);
  __chkstk_darwin(v24);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a9 = swift_getKeyPath(&unk_100628220);
  v27 = sub_100047110(&qword_1008325D0);
  swift_storeEnumTagMultiPayload(a9, v27, 0);
  v28 = (int *)type metadata accessor for SmallAwardsCardView(0);
  sub_10002411C(a1, (uint64_t)a9 + v28[5]);
  *(double *)((char *)a9 + v28[6]) = a10;
  *(_QWORD *)((char *)a9 + v28[7]) = a2;
  v29 = (_QWORD *)((char *)a9 + v28[8]);
  *v29 = a3;
  v29[1] = a4;
  v30 = (_QWORD *)((char *)a9 + v28[9]);
  v31 = v43;
  *v30 = a5;
  v30[1] = v31;
  v32 = v46;
  *(_QWORD *)((char *)a9 + v28[10]) = v45;
  sub_100045AD4(v32, (uint64_t)a9 + v28[11], &qword_10081F600);
  sub_100045AD4(v44, (uint64_t)a9 + v28[12], &qword_10081F550);
  v33 = (_QWORD *)((char *)a9 + v28[13]);
  sub_100021CC0(a12, (uint64_t)v26, &qword_10081F430);
  State.init(wrappedValue:)(v33, v26, v24);
  sub_10001BE90(a12, &qword_10081F430);
  v34 = (char *)a9 + v28[14];
  v52[0] = v47;
  v52[1] = v48;
  v53 = v49 & 1;
  v35 = sub_100047110(&qword_100823070);
  State.init(wrappedValue:)(&v54, v52, v35);
  v36 = v55;
  v37 = v56;
  *(_OWORD *)v34 = v54;
  v34[16] = v36;
  *((_QWORD *)v34 + 3) = v37;
  v38 = v28[15];
  v52[0] = v50;
  v39 = sub_100047110(&qword_100823078);
  State.init(wrappedValue:)(&v54, v52, v39);
  *(_OWORD *)((char *)a9 + v38) = v54;
  v40 = (char *)a9 + v28[16];
  LOBYTE(v52[0]) = v51;
  result = State.init(wrappedValue:)(&v54, v52, &type metadata for Bool);
  v42 = *((_QWORD *)&v54 + 1);
  *v40 = v54;
  *((_QWORD *)v40 + 1) = v42;
  return result;
}

double sub_10016B3EC()
{
  double result;

  result = 12.0;
  xmmword_100823050 = xmmword_1006281F0;
  *(_OWORD *)&qword_100823060 = xmmword_100628200;
  return result;
}

uint64_t sub_10016B40C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v42 = a1;
  v43 = type metadata accessor for TaskPriority(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SmallAwardsCardView(0);
  v40 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v40 + 64);
  __chkstk_darwin(v5);
  v7 = sub_100047110(&qword_100823148);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100823150);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_100823158);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10016B70C(v2, (uint64_t)v9);
  v17 = static Edge.Set.bottom.getter(v16);
  v18 = EdgeInsets.init(_all:)(12.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_100021CC0((uint64_t)v9, (uint64_t)v12, &qword_100823148);
  v25 = &v12[*(int *)(v10 + 36)];
  *v25 = v17;
  *((double *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  v26 = sub_10001BE90((uint64_t)v9, &qword_100823148);
  v27 = static Alignment.center.getter(v26);
  sub_1003EB018(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v27, v28);
  sub_10001BE90((uint64_t)v12, &qword_100823150);
  sub_10016EF70(v2, (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *(unsigned __int8 *)(v40 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_100789E80, v30 + v6, v29 | 7);
  v32 = sub_10016EFB8((uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v31 + v30);
  static TaskPriority.userInitiated.getter(v32);
  v33 = sub_100047110(&qword_100823170);
  v34 = v42;
  v35 = (char *)(v42 + *(int *)(v33 + 36));
  v36 = type metadata accessor for _TaskModifier(0);
  v37 = v41;
  v38 = v43;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(&v35[*(int *)(v36 + 20)], v4, v43);
  *(_QWORD *)v35 = &unk_100823168;
  *((_QWORD *)v35 + 1) = v31;
  sub_100021CC0((uint64_t)v15, v34, &qword_100823158);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v38);
  return sub_10001BE90((uint64_t)v15, &qword_100823158);
}

uint64_t sub_10016B70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a2;
  v35 = sub_100047110(&qword_100823190);
  __chkstk_darwin(v35);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100047110(&qword_100823198);
  __chkstk_darwin(v32);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100047110(&qword_1008231A0);
  __chkstk_darwin(v33);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  sub_1003F6E18((uint64_t)&v32 - v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DynamicTypeSize.xxLarge(_:), v9);
  sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v16 = dispatch thunk of static Comparable.< infix(_:_:)(v13, v15, v9);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  v18 = ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)v8 = static VerticalAlignment.top.getter(v18);
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 0;
    v23 = sub_100047110(&qword_1008231C0);
    sub_10016BA34(a1, (uint64_t)&v8[*(int *)(v23 + 44)]);
    v24 = &qword_1008231A0;
    sub_100021CC0((uint64_t)v8, (uint64_t)v6, &qword_1008231A0);
    swift_storeEnumTagMultiPayload(v6, v32, 0);
    v25 = sub_100028384(&qword_1008231B0, &qword_1008231A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v26 = sub_100028384(&qword_1008231B8, &qword_100823190, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v33, v35, v25, v26);
    v27 = (uint64_t)v8;
  }
  else
  {
    *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v18, v19, v20, v21, v22);
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 0;
    v28 = sub_100047110(&qword_1008231A8);
    sub_10016C8A8(a1, (uint64_t)&v4[*(int *)(v28 + 44)]);
    v24 = &qword_100823190;
    sub_100021CC0((uint64_t)v4, (uint64_t)v6, &qword_100823190);
    swift_storeEnumTagMultiPayload(v6, v32, 1);
    v29 = sub_100028384(&qword_1008231B0, &qword_1008231A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v30 = sub_100028384(&qword_1008231B8, &qword_100823190, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v33, v35, v29, v30);
    v27 = (uint64_t)v4;
  }
  return sub_10001BE90(v27, v24);
}

uint64_t sub_10016BA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  __n128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD v90[10];
  _OWORD v91[2];
  _OWORD v92[12];
  char v93;
  char v94;
  _QWORD v95[33];
  __int128 v96;
  _BYTE v97[33];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;

  v88 = a2;
  v3 = type metadata accessor for SmallAwardsCardView(0);
  v83 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v83 + 64);
  __chkstk_darwin(v3);
  v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100047110(&qword_1008231C8);
  v85 = *(_QWORD *)(v87 - 8);
  v6 = __chkstk_darwin(v87);
  v84 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v78 - v8;
  v10 = sub_100047110(&qword_1008231D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100047110(&qword_1008231D8);
  v14 = __chkstk_darwin(v13);
  v86 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v78 - v16;
  v18 = *(int *)(v3 + 60);
  v89 = a1;
  v96 = *(_OWORD *)(a1 + v18);
  v19 = sub_100047110(&qword_100823188);
  v20 = State.wrappedValue.getter(v95, v19);
  v21 = v95[0];
  if (v95[0])
  {
    v80 = v10;
    v81 = v9;
    v82 = v17;
    if (qword_10081D5F8 != -1)
      v20 = (_QWORD *)swift_once(&qword_10081D5F8, sub_10016B3EC);
    v78 = xmmword_100823050;
    v23 = qword_100823060;
    v22 = unk_100823068;
    v24 = static Edge.Set.all.getter(v20);
    v25 = v89;
    v26 = v89 + *(int *)(v3 + 64);
    v27 = *(_BYTE *)v26;
    v28 = *(_QWORD *)(v26 + 8);
    LOBYTE(v96) = v27;
    *((_QWORD *)&v96 + 1) = v28;
    swift_retain(v21);
    v29 = sub_100047110(&qword_100820D80);
    v79 = v21;
    State.wrappedValue.getter(v95, v29);
    v30 = 0.0;
    *(_QWORD *)&v96 = v21;
    if (LOBYTE(v95[0]))
      v30 = 1.0;
    BYTE8(v96) = v24;
    *(_OWORD *)v97 = v78;
    *(_QWORD *)&v97[16] = v23;
    *(_QWORD *)&v97[24] = v22;
    v97[32] = 0;
    *(double *)((char *)&v98 + 7) = v30;
    sub_10016EF70(v25, (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v31 = *(unsigned __int8 *)(v83 + 80);
    v32 = (v31 + 16) & ~v31;
    v33 = swift_allocObject(&unk_100789EC0, v32 + v4, v31 | 7);
    sub_10016EFB8((uint64_t)v5, v33 + v32);
    v34 = sub_100047110(&qword_1008231E8);
    v35 = sub_10016F060();
    v36 = v84;
    View.onTapGesture(count:perform:)(1, sub_10016F260, v33, v34, v35);
    swift_release(v33);
    v37 = swift_release(v96);
    v38 = v85;
    v39 = v81;
    v40 = v87;
    (*(void (**)(char *, char *, uint64_t, __n128))(v85 + 32))(v81, v36, v87, v37);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v12, v39, v40);
    swift_storeEnumTagMultiPayload(v12, v80, 0);
    v41 = sub_100047110(&qword_1008231E0);
    *(_QWORD *)&v96 = v34;
    *((_QWORD *)&v96 + 1) = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    v43 = sub_10016F0EC((unint64_t *)&qword_100823208, &qword_1008231E0);
    v17 = v82;
    _ConditionalContent<>.init(storage:)(v12, v40, v41, OpaqueTypeConformance2, v43);
    v44 = swift_release(v79);
    v45 = v39;
    v46 = v89;
    v47 = (*(uint64_t (**)(char *, uint64_t, __n128))(v38 + 8))(v45, v40, v44);
    v48 = v88;
  }
  else
  {
    v49 = static Alignment.center.getter(v20);
    _FrameLayout.init(width:height:alignment:)(&v114, 0, 1, 0x4054000000000000, 0, v49, v50);
    v51 = v114;
    v52 = v115;
    v53 = v116;
    v54 = v117;
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    *((_QWORD *)v12 + 2) = v51;
    v12[24] = v52;
    *((_QWORD *)v12 + 4) = v53;
    v12[40] = v54;
    *((_OWORD *)v12 + 3) = v118;
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v55 = sub_100047110(&qword_1008231E0);
    v56 = sub_100007050(&qword_1008231E8);
    v57 = sub_10016F060();
    *(_QWORD *)&v96 = v56;
    *((_QWORD *)&v96 + 1) = v57;
    v58 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    v59 = sub_10016F0EC((unint64_t *)&qword_100823208, &qword_1008231E0);
    v47 = _ConditionalContent<>.init(storage:)(v12, v87, v55, v58, v59);
    v48 = v88;
    v46 = v89;
  }
  v60 = static HorizontalAlignment.leading.getter(v47);
  sub_10016C46C(v46, (uint64_t)v90);
  *(_OWORD *)((char *)&v92[8] + 7) = v90[8];
  *(_OWORD *)((char *)&v92[9] + 7) = v90[9];
  *(_OWORD *)((char *)&v92[10] + 7) = v91[0];
  v92[11] = *(_OWORD *)((char *)v91 + 9);
  *(_OWORD *)((char *)&v92[4] + 7) = v90[4];
  *(_OWORD *)((char *)&v92[5] + 7) = v90[5];
  *(_OWORD *)((char *)&v92[6] + 7) = v90[6];
  *(_OWORD *)((char *)&v92[7] + 7) = v90[7];
  *(_OWORD *)((char *)v92 + 7) = v90[0];
  *(_OWORD *)((char *)&v92[1] + 7) = v90[1];
  *(_OWORD *)((char *)&v92[2] + 7) = v90[2];
  v93 = 0;
  *(_OWORD *)((char *)&v92[3] + 7) = v90[3];
  v62 = static Edge.Set.top.getter(v61);
  v63 = EdgeInsets.init(_all:)(10.0);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  v94 = 0;
  v70 = v86;
  sub_100021CC0((uint64_t)v17, v86, &qword_1008231D8);
  v71 = (uint64_t)v17;
  v72 = v94;
  sub_100021CC0(v70, v48, &qword_1008231D8);
  v73 = v48;
  v74 = sub_100047110(&qword_100823210);
  v75 = *(int *)(v74 + 48);
  *(_OWORD *)((char *)&v95[18] + 1) = v92[8];
  *(_OWORD *)((char *)&v95[20] + 1) = v92[9];
  *(_OWORD *)((char *)&v95[22] + 1) = v92[10];
  *(_OWORD *)((char *)&v95[24] + 1) = v92[11];
  *(_OWORD *)((char *)&v95[10] + 1) = v92[4];
  *(_OWORD *)((char *)&v95[12] + 1) = v92[5];
  *(_OWORD *)((char *)&v95[14] + 1) = v92[6];
  *(_OWORD *)((char *)&v95[16] + 1) = v92[7];
  *(_OWORD *)((char *)&v95[4] + 1) = v92[1];
  *(_OWORD *)((char *)&v95[6] + 1) = v92[2];
  *(_OWORD *)((char *)&v95[8] + 1) = v92[3];
  v95[0] = v60;
  v95[1] = 0;
  LOBYTE(v95[2]) = 0;
  *(_OWORD *)((char *)&v95[2] + 1) = v92[0];
  LOBYTE(v95[27]) = v62;
  *(double *)&v95[28] = v63;
  v95[29] = v65;
  v95[30] = v67;
  v95[31] = v69;
  LOBYTE(v95[32]) = v72;
  memcpy((void *)(v73 + v75), v95, 0x101uLL);
  v76 = v73 + *(int *)(v74 + 64);
  *(_QWORD *)v76 = 0;
  *(_BYTE *)(v76 + 8) = 0;
  sub_10016F14C((uint64_t)v95);
  sub_10001BE90(v71, &qword_1008231D8);
  v104 = v92[8];
  v105 = v92[9];
  v106 = v92[10];
  v107 = v92[11];
  v100 = v92[4];
  v101 = v92[5];
  v102 = v92[6];
  v103 = v92[7];
  *(_OWORD *)&v97[1] = v92[0];
  *(_OWORD *)&v97[17] = v92[1];
  v98 = v92[2];
  v96 = (unint64_t)v60;
  v97[0] = 0;
  v99 = v92[3];
  v108 = v62;
  v109 = v63;
  v110 = v65;
  v111 = v67;
  v112 = v69;
  v113 = v72;
  sub_10016F1D4((uint64_t)&v96);
  return sub_10001BE90(v70, &qword_1008231D8);
}

_QWORD *sub_10016C1D8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  int64x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  _QWORD v32[2];
  char v33;
  ValueMetadata *v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  v1 = v0;
  v2 = (int *)type metadata accessor for SmallAwardsCardView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + *(int *)(__chkstk_darwin(v2) + 56);
  v7 = *(_BYTE *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  v35 = *(_OWORD *)v6;
  v36 = v7;
  v37 = v8;
  v9 = sub_100047110(&qword_100823180);
  result = State.wrappedValue.getter(v32, v9);
  if ((v33 & 1) == 0)
  {
    v11 = *(void **)(v0 + v2[7]);
    if (v11)
    {
      v12 = v11;
      sub_10016D3FC();
      v14 = v13;
      v16 = v15;
      sub_10016EF70(v0, (uint64_t)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
      v17 = *(unsigned __int8 *)(v3 + 80);
      v18 = (v17 + 16) & ~v17;
      v19 = v18 + v4;
      v20 = v17 | 7;
      v21 = swift_allocObject(&unk_100789EE8, v19, v17 | 7);
      sub_10016EFB8((uint64_t)v5, v21 + v18);
      sub_10016EF70(v1, (uint64_t)v5);
      v22 = swift_allocObject(&unk_100789F10, v19, v20);
      sub_10016EFB8((uint64_t)v5, v22 + v18);
      sub_100021CC0(v1 + v2[11], (uint64_t)&v35, &qword_10081F600);
      if (v37)
      {
        v23 = sub_100016804(&v35, v37);
        v24 = (_QWORD *)(v1 + v2[5]);
        v34 = &type metadata for AwardViewActionContext;
        v25 = (int64x2_t *)swift_allocObject(&unk_100789F38, 88, 7);
        v32[0] = v25;
        v25[1].i64[0] = v14;
        v25[1].i64[1] = v16;
        v25[2] = vdupq_n_s64(0x4051800000000000uLL);
        v25[3].i64[0] = (uint64_t)v12;
        v25[3].i64[1] = (uint64_t)sub_10016F268;
        v25[4].i64[0] = v21;
        v25[4].i64[1] = (uint64_t)sub_10016F278;
        v25[5].i64[0] = v22;
        v26 = *v23;
        v27 = v24[3];
        v28 = v24[4];
        v29 = sub_100016804(v24, v27);
        v30 = v12;
        swift_retain_n(v21, 2);
        swift_retain_n(v22, 2);
        v31 = v30;
        sub_100561D50((uint64_t)v29, (uint64_t)v32, v26, v27, v28);
        swift_release_n(v22, 2);
        swift_release_n(v21, 2);

        sub_10001BE90((uint64_t)v32, (uint64_t *)&unk_100828420);
        return (_QWORD *)_s10FitnessApp24HistoryViewActionContextVwxx_0(&v35);
      }
      else
      {
        swift_release(v22);
        swift_release(v21);

        return (_QWORD *)sub_10001BE90((uint64_t)&v35, &qword_10081F600);
      }
    }
  }
  return result;
}

void sub_10016C46C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  double (*v21)(char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  double v56;
  char v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *);
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t KeyPath;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _BYTE v86[7];
  __int16 v87;
  char v88;
  _BYTE v89[7];
  char v90;
  _BYTE v91[7];
  char v92;
  _BYTE v93[7];
  _BYTE v94[7];
  char v95;

  v75 = a1;
  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for SmallAwardsCardView(0);
  v8 = (uint64_t *)(a1 + *(int *)(v74 + 32));
  v9 = v8[1];
  v83 = *v8;
  v84 = v9;
  v10 = sub_100038CA0();
  v73 = v10;
  swift_bridgeObjectRetain(v9);
  v11 = Text.init<A>(_:)(&v83, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.caption2.getter(v11);
  v72 = enum case for Font.Leading.tight(_:);
  v71 = *(void (**)(char *))(v5 + 104);
  v71(v7);
  v19 = Font.leading(_:)(v7, v18);
  v20 = swift_release(v18);
  v21 = *(double (**)(char *, uint64_t, __n128))(v5 + 8);
  v22.n128_f64[0] = v21(v7, v4, v20);
  v23 = Text.font(_:)(v19, v11, v13, v17, v15, v22);
  v79 = v24;
  v80 = v23;
  LOBYTE(v18) = v25;
  v81 = v26;
  swift_release(v19);
  v76 = v18 & 1;
  sub_1000E4458(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  KeyPath = swift_getKeyPath(&unk_100628358);
  v77 = static Edge.Set.all.getter(KeyPath);
  v27 = EdgeInsets.init(_all:)(0.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = (uint64_t *)(v75 + *(int *)(v74 + 36));
  v35 = v34[1];
  v83 = *v34;
  v84 = v35;
  swift_bridgeObjectRetain(v35);
  v36 = Text.init<A>(_:)(&v83, &type metadata for String, v73);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v43 = static Font.caption2.getter(v36);
  ((void (*)(char *, _QWORD, uint64_t))v71)(v7, v72, v4);
  v44 = Font.leading(_:)(v7, v43);
  v45 = swift_release(v43);
  v46.n128_f64[0] = v21(v7, v4, v45);
  v47 = Text.font(_:)(v44, v36, v38, v42, v40, v46);
  v49 = v48;
  LOBYTE(v43) = v50;
  v52 = v51;
  swift_release(v44);
  LOBYTE(v43) = v43 & 1;
  sub_1000E4458(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  v53 = swift_getKeyPath(&unk_100628358);
  v55 = static HierarchicalShapeStyle.secondary.getter(v54);
  LODWORD(v44) = v55;
  LOBYTE(v38) = static Edge.Set.all.getter(v55);
  v56 = EdgeInsets.init(_all:)(0.0);
  v57 = v76;
  v82 = v76;
  v95 = v76;
  v92 = 0;
  v90 = v43;
  v85 = 0;
  *(_DWORD *)(a2 + 17) = v83;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v83 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v94;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v94[3];
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v93;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v93[3];
  v58 = *(_DWORD *)v91;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v91[3];
  *(_DWORD *)(a2 + 89) = v58;
  v59 = *(_DWORD *)v89;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v89[3];
  *(_DWORD *)(a2 + 113) = v59;
  LOWORD(v59) = v87;
  *(_BYTE *)(a2 + 139) = v88;
  *(_WORD *)(a2 + 137) = v59;
  v60 = *(_DWORD *)v86;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a2 + 145) = v60;
  LOBYTE(v60) = v85;
  v62 = v79;
  v61 = v80;
  *(_QWORD *)a2 = v80;
  *(_QWORD *)(a2 + 8) = v62;
  *(_BYTE *)(a2 + 16) = v57;
  v63 = v81;
  v64 = KeyPath;
  *(_QWORD *)(a2 + 24) = v81;
  *(_QWORD *)(a2 + 32) = v64;
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = v77;
  *(double *)(a2 + 56) = v27;
  *(_QWORD *)(a2 + 64) = v29;
  *(_QWORD *)(a2 + 72) = v31;
  *(_QWORD *)(a2 + 80) = v33;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v47;
  *(_QWORD *)(a2 + 104) = v49;
  *(_BYTE *)(a2 + 112) = v43;
  *(_QWORD *)(a2 + 120) = v52;
  *(_QWORD *)(a2 + 128) = v53;
  *(_BYTE *)(a2 + 136) = 1;
  *(_DWORD *)(a2 + 140) = v44;
  *(_BYTE *)(a2 + 144) = v38;
  *(double *)(a2 + 152) = v56;
  *(_QWORD *)(a2 + 160) = v65;
  *(_QWORD *)(a2 + 168) = v66;
  *(_QWORD *)(a2 + 176) = v67;
  *(_BYTE *)(a2 + 184) = v60;
  v68 = v61;
  v69 = v62;
  sub_1000E439C(v61, v62, v57);
  swift_bridgeObjectRetain(v63);
  swift_retain(v64);
  sub_1000E439C(v47, v49, v43);
  swift_bridgeObjectRetain(v52);
  swift_retain(v53);
  sub_1000E4458(v47, v49, v43);
  swift_release(v53);
  swift_bridgeObjectRelease(v52);
  sub_1000E4458(v68, v69, v82);
  swift_release(v64);
  swift_bridgeObjectRelease(v63);
}

uint64_t sub_10016C8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  __n128 v76;
  int *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, __n128);
  __n128 v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v115;
  double (*v116)(char *, uint64_t, __n128);
  void (*v117)(char *, uint64_t, uint64_t);
  unint64_t v118;
  uint64_t v119;
  int *v120;
  int v121;
  int v122;
  uint64_t KeyPath;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  _QWORD v137[2];

  v127 = a2;
  v131 = type metadata accessor for Font.Leading(0);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v126 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for SmallAwardsCardView(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100047110(&qword_100823218);
  v130 = *(_QWORD *)(v135 - 8);
  v8 = __chkstk_darwin(v135);
  v134 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v115 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v115 - v13;
  v125 = (char *)&v115 - v13;
  v15 = sub_100047110(&qword_100823220);
  v16 = __chkstk_darwin(v15);
  v133 = (uint64_t)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v115 - v18);
  v132 = (uint64_t)&v115 - v18;
  sub_100047110(&qword_10081F438);
  State.projectedValue.getter(v19);
  v20 = (char *)v19 + *(int *)(v15 + 36);
  *(_QWORD *)v20 = 0;
  v20[8] = 0;
  v136 = *(_OWORD *)(a1 + v4[15]);
  v21 = sub_100047110(&qword_100823188);
  State.wrappedValue.getter(v137, v21);
  v22 = v137[0];
  v23 = v4[16];
  v120 = v4;
  v24 = (char *)(a1 + v23);
  v25 = *v24;
  v26 = *((_QWORD *)v24 + 1);
  LOBYTE(v136) = v25;
  *((_QWORD *)&v136 + 1) = v26;
  v27 = sub_100047110(&qword_100820D80);
  State.wrappedValue.getter(v137, v27);
  v28 = 0.0;
  if (LOBYTE(v137[0]))
    v28 = 1.0;
  *(_QWORD *)&v136 = v22;
  *((double *)&v136 + 1) = v28;
  v119 = a1;
  sub_10016EF70(a1, (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *(unsigned __int8 *)(v5 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_100789F60, v30 + v6, v29 | 7);
  sub_10016EFB8((uint64_t)v7, v31 + v30);
  v32 = sub_100047110(&qword_100823228);
  v33 = sub_1000E0A18(&qword_100823230, &qword_100823228, (void (*)(void))sub_10016F528);
  View.onTapGesture(count:perform:)(1, sub_10016F260, v31, v32, v33);
  swift_release(v31);
  v34 = swift_release(v136);
  (*(void (**)(char *, char *, uint64_t, __n128))(v130 + 32))(v14, v12, v135, v34);
  v35 = (_QWORD *)(a1 + v4[8]);
  v36 = v35[1];
  *(_QWORD *)&v136 = *v35;
  *((_QWORD *)&v136 + 1) = v36;
  v37 = sub_100038CA0();
  v118 = v37;
  swift_bridgeObjectRetain(v36);
  v38 = Text.init<A>(_:)(&v136, &type metadata for String, v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.caption2.getter(v38);
  v46 = enum case for Font.Leading.tight(_:);
  v47 = v129;
  v117 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 104);
  v48 = v126;
  v49 = v131;
  v117(v126, enum case for Font.Leading.tight(_:), v131);
  v50 = Font.leading(_:)(v48, v45);
  v51 = swift_release(v45);
  v116 = *(double (**)(char *, uint64_t, __n128))(v47 + 8);
  v52.n128_f64[0] = v116(v48, v49, v51);
  v129 = Text.font(_:)(v50, v38, v40, v44, v42, v52);
  v124 = v53;
  LOBYTE(v45) = v54;
  v128 = v55;
  swift_release(v50);
  v121 = v45 & 1;
  sub_1000E4458(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  KeyPath = swift_getKeyPath(&unk_100628358);
  v122 = static Edge.Set.all.getter(KeyPath);
  v56 = EdgeInsets.init(_all:)(0.0);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = (_QWORD *)(v119 + v120[9]);
  v64 = v63[1];
  *(_QWORD *)&v136 = *v63;
  *((_QWORD *)&v136 + 1) = v64;
  swift_bridgeObjectRetain(v64);
  v65 = Text.init<A>(_:)(&v136, &type metadata for String, v118);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  v72 = static Font.caption2.getter(v65);
  v73 = v131;
  v117(v48, v46, v131);
  v74 = Font.leading(_:)(v48, v72);
  v75 = swift_release(v72);
  v76.n128_f64[0] = v116(v48, v73, v75);
  v126 = (char *)Text.font(_:)(v74, v65, v67, v71, v69, v76);
  v120 = v77;
  LOBYTE(v48) = v78;
  v131 = v79;
  swift_release(v74);
  LODWORD(v119) = v48 & 1;
  sub_1000E4458(v65, v67, v71);
  swift_bridgeObjectRelease(v69);
  v80 = swift_getKeyPath(&unk_100628358);
  v82 = static HierarchicalShapeStyle.secondary.getter(v81);
  LODWORD(v118) = v82;
  LODWORD(v117) = static Edge.Set.all.getter(v82);
  v83 = EdgeInsets.init(_all:)(0.0);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v90 = v133;
  sub_100021CC0(v132, v133, &qword_100823220);
  v91 = v130;
  v92 = *(void (**)(char *, char *, uint64_t))(v130 + 16);
  v93 = v134;
  v94 = v135;
  v95 = v125;
  v92(v134, v125, v135);
  LOBYTE(v72) = v121;
  LOBYTE(v136) = v121;
  v96 = v90;
  v97 = v127;
  sub_100021CC0(v96, v127, &qword_100823220);
  v98 = (int *)sub_100047110(&qword_100823240);
  v92((char *)(v97 + v98[12]), v93, v94);
  v99 = v97 + v98[16];
  *(_QWORD *)v99 = 0;
  *(_BYTE *)(v99 + 8) = 0;
  v100 = v97 + v98[20];
  v102 = v128;
  v101 = v129;
  v103 = v124;
  *(_QWORD *)v100 = v129;
  *(_QWORD *)(v100 + 8) = v103;
  v104 = v72;
  *(_BYTE *)(v100 + 16) = v72;
  v105 = KeyPath;
  *(_QWORD *)(v100 + 24) = v102;
  *(_QWORD *)(v100 + 32) = v105;
  *(_BYTE *)(v100 + 40) = 1;
  *(_BYTE *)(v100 + 48) = v122;
  *(double *)(v100 + 56) = v56;
  *(_QWORD *)(v100 + 64) = v58;
  *(_QWORD *)(v100 + 72) = v60;
  *(_QWORD *)(v100 + 80) = v62;
  *(_BYTE *)(v100 + 88) = 0;
  v106 = v97 + v98[24];
  v107 = (uint64_t)v126;
  v108 = (uint64_t)v120;
  *(_QWORD *)v106 = v126;
  *(_QWORD *)(v106 + 8) = v108;
  LOBYTE(v98) = v119;
  *(_BYTE *)(v106 + 16) = v119;
  v109 = v131;
  *(_QWORD *)(v106 + 24) = v131;
  *(_QWORD *)(v106 + 32) = v80;
  *(_BYTE *)(v106 + 40) = 1;
  *(_DWORD *)(v106 + 44) = v118;
  *(_BYTE *)(v106 + 48) = (_BYTE)v117;
  *(double *)(v106 + 56) = v83;
  *(_QWORD *)(v106 + 64) = v85;
  *(_QWORD *)(v106 + 72) = v87;
  *(_QWORD *)(v106 + 80) = v89;
  *(_BYTE *)(v106 + 88) = 0;
  sub_1000E439C(v101, v103, v104);
  swift_bridgeObjectRetain(v102);
  swift_retain(v105);
  sub_1000E439C(v107, v108, (char)v98);
  v110 = *(void (**)(char *, uint64_t, __n128))(v91 + 8);
  swift_bridgeObjectRetain(v109);
  v111 = swift_retain(v80);
  v112 = v135;
  v110(v95, v135, v111);
  sub_10001BE90(v132, &qword_100823220);
  sub_1000E4458(v107, v108, (char)v98);
  swift_release(v80);
  swift_bridgeObjectRelease(v109);
  sub_1000E4458(v129, v103, v136);
  swift_release(v105);
  v113 = swift_bridgeObjectRelease(v128);
  v110(v134, v112, v113);
  return sub_10001BE90(v133, &qword_100823220);
}

uint64_t sub_10016D050()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10082317C);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_10016D0B4;
  return sub_10016D154();
}

uint64_t sub_10016D0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10016D124, v2, v3);
}

uint64_t sub_10016D124()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016D154()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[18] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[19] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[20] = v3;
  v1[21] = v4;
  return swift_task_switch(sub_10016D1C0, v3, v4);
}

uint64_t sub_10016D1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = type metadata accessor for SmallAwardsCardView(0);
  *(_QWORD *)(v0 + 176) = v2;
  v3 = *(void **)(v1 + *(int *)(v2 + 28));
  *(_QWORD *)(v0 + 184) = v3;
  if (v3 && (v4 = *(void **)(v1 + *(int *)(v2 + 40))) != 0)
  {
    v5 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10016D2C0;
    v6 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_100257D78;
    v7[3] = &unk_100789E98;
    v7[4] = v6;
    objc_msgSend(v4, "thumbnailImageForAchievement:size:completion:", v3, v7, 90.0, 90.0);
    return swift_continuation_await(v5);
  }
  else
  {
    v9 = swift_release(*(_QWORD *)(v0 + 152));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v9);
  }
}

uint64_t sub_10016D2C0()
{
  uint64_t v0;

  return swift_task_switch(sub_10016D304, *(_QWORD *)(*(_QWORD *)v0 + 160), *(_QWORD *)(*(_QWORD *)v0 + 168));
}

uint64_t sub_10016D304()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 152));
  v2 = *(void **)(v0 + 120);

  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 176);
    v3 = *(void **)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 144);
    objc_msgSend(v2, "size");
    v6 = v5 + *(int *)(v4 + 56);
    v7 = *(_BYTE *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)v6;
    *(_BYTE *)(v0 + 96) = v7;
    *(_QWORD *)(v0 + 104) = v8;
    *(_QWORD *)(v0 + 120) = v9;
    *(_QWORD *)(v0 + 128) = v10;
    *(_BYTE *)(v0 + 136) = 0;
    v11 = sub_100047110(&qword_100823180);
    State.wrappedValue.setter(v0 + 120, v11);
    v12 = v2;
    v13 = Image.init(uiImage:)(v12);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v5 + *(int *)(v4 + 60));
    *(_QWORD *)(v0 + 120) = v13;
    v14 = sub_100047110(&qword_100823188);
    State.wrappedValue.setter(v0 + 120, v14);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016D3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  CGRect v54;
  CGRect v55;

  v48 = type metadata accessor for DynamicTypeSize(0);
  v52 = *(_QWORD *)(v48 - 8);
  v1 = __chkstk_darwin(v48);
  v51 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v50 = (uint64_t)&v46 - v3;
  v4 = type metadata accessor for LocalCoordinateSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GeometryProxy(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_10081F430);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v46 - v16;
  v53 = type metadata accessor for SmallAwardsCardView(0);
  v49 = v0;
  v18 = sub_100047110(&qword_10081F550);
  Binding.wrappedValue.getter(v18);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v20 = v19(v17, 1, v8);
  v46 = v5;
  v47 = v4;
  if (v20)
  {
    sub_10001BE90((uint64_t)v17, &qword_10081F430);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v17, v8);
    v21 = sub_10001BE90((uint64_t)v17, &qword_10081F430);
    static CoordinateSpaceProtocol<>.local.getter(v21);
    v22 = GeometryProxy.frame<A>(in:)(v7, v4, &protocol witness table for LocalCoordinateSpace);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v54.origin.x = v22;
    v54.origin.y = v24;
    v54.size.width = v26;
    v54.size.height = v28;
    CGRectGetHeight(v54);
  }
  v29 = sub_100047110(&qword_10081F438);
  State.wrappedValue.getter(v15, v29);
  if (v19(v15, 1, v8))
  {
    sub_10001BE90((uint64_t)v15, &qword_10081F430);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
    v30 = sub_10001BE90((uint64_t)v15, &qword_10081F430);
    static CoordinateSpaceProtocol<>.local.getter(v30);
    v31 = v47;
    v32 = GeometryProxy.frame<A>(in:)(v7, v47, &protocol witness table for LocalCoordinateSpace);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v31);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v55.origin.x = v32;
    v55.origin.y = v34;
    v55.size.width = v36;
    v55.size.height = v38;
    CGRectGetHeight(v55);
  }
  v39 = v50;
  sub_1003F6E18(v50);
  v41 = v51;
  v40 = v52;
  v42 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, enum case for DynamicTypeSize.xxLarge(_:), v48);
  sub_1000083D8((unint64_t *)&qword_10081F588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v43 = dispatch thunk of static Comparable.< infix(_:_:)(v41, v39, v42);
  v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v41, v42);
  result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v39, v42);
  if ((v43 & 1) != 0 && qword_10081D5F8 != -1)
    return swift_once(&qword_10081D5F8, sub_10016B3EC);
  return result;
}

uint64_t sub_10016D854(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for SmallAwardsCardView(0) + 64));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 0;
  v4 = sub_100047110(&qword_100820D80);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10016D8B8(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for SmallAwardsCardView(0) + 64));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100047110(&qword_100820D80);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t type metadata accessor for SmallAwardsCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_1008230D8;
  if (!qword_1008230D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmallAwardsCardView);
  return result;
}

uint64_t *sub_10016D964(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)v4 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    v16 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v17 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)v4 + v16) = (uint64_t)v17;
    v18 = a3[8];
    v19 = a3[9];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (uint64_t *)((char *)v4 + v19);
    v24 = (uint64_t *)((char *)a2 + v19);
    v25 = *v24;
    v26 = v24[1];
    v27 = a3[10];
    v28 = a3[11];
    v29 = *(void **)((char *)a2 + v27);
    *v23 = v25;
    v23[1] = v26;
    *(uint64_t *)((char *)v4 + v27) = (uint64_t)v29;
    v30 = (char *)v4 + v28;
    v31 = (char *)a2 + v28;
    v32 = *(uint64_t *)((char *)a2 + v28 + 24);
    v33 = v17;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v34 = v29;
    if (v32)
    {
      v35 = *((_QWORD *)v31 + 4);
      *((_QWORD *)v30 + 3) = v32;
      *((_QWORD *)v30 + 4) = v35;
      (**(void (***)(char *, char *, uint64_t))(v32 - 8))(v30, v31, v32);
    }
    else
    {
      v36 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v36;
      *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
    }
    v37 = a3[12];
    v38 = (uint64_t *)((char *)v4 + v37);
    v39 = (char *)a2 + v37;
    v40 = *(uint64_t *)((char *)a2 + v37);
    v41 = *(uint64_t *)((char *)a2 + v37 + 8);
    *v38 = v40;
    v38[1] = v41;
    swift_retain(v40);
    swift_retain(v41);
    v42 = *(int *)(sub_100047110(&qword_10081F550) + 32);
    v43 = (char *)v38 + v42;
    v44 = &v39[v42];
    v45 = type metadata accessor for GeometryProxy(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
    if (v47(v44, 1, v45))
    {
      v48 = sub_100047110(&qword_10081F430);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v49 = a3[13];
    v50 = (char *)v4 + v49;
    v51 = (char *)a2 + v49;
    if (v47((char *)a2 + v49, 1, v45))
    {
      v52 = sub_100047110(&qword_10081F430);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v50, v51, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v50, 0, 1, v45);
    }
    v53 = *(int *)(sub_100047110(&qword_10081F438) + 28);
    v54 = *(_QWORD *)&v51[v53];
    *(_QWORD *)&v50[v53] = v54;
    v55 = a3[14];
    v56 = a3[15];
    v57 = (char *)v4 + v55;
    v58 = (char *)a2 + v55;
    *(_OWORD *)v57 = *(_OWORD *)v58;
    v57[16] = v58[16];
    v59 = *((_QWORD *)v58 + 3);
    *((_QWORD *)v57 + 3) = v59;
    v60 = (uint64_t *)((char *)v4 + v56);
    v61 = (uint64_t *)((char *)a2 + v56);
    v62 = *v61;
    v63 = v61[1];
    *v60 = *v61;
    v60[1] = v63;
    v64 = a3[16];
    v65 = (char *)v4 + v64;
    v66 = (char *)a2 + v64;
    *v65 = *v66;
    v12 = *((_QWORD *)v66 + 1);
    *((_QWORD *)v65 + 1) = v12;
    swift_retain(v54);
    swift_retain(v59);
    swift_retain(v62);
    swift_retain(v63);
  }
  swift_retain(v12);
  return v4;
}

double sub_10016DCB4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  double result;

  v4 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)a1 + a2[5]));

  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));

  v6 = (_QWORD *)((char *)a1 + a2[11]);
  if (v6[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v6);
  v7 = (_QWORD *)((char *)a1 + a2[12]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (char *)v7 + *(int *)(sub_100047110(&qword_10081F550) + 32);
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v12 = (char *)a1 + a2[13];
  if (!v11(v12, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v13 = sub_100047110(&qword_10081F438);
  swift_release(*(_QWORD *)&v12[*(int *)(v13 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[14] + 24));
  v14 = (_QWORD *)((char *)a1 + a2[15]);
  swift_release(*v14);
  swift_release(v14[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[16] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_10016DE60(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = *(_OWORD *)((char *)a2 + v12 + 24);
  *(_OWORD *)((char *)a1 + v12 + 24) = v13;
  (**(void (***)(void))(v13 - 8))();
  v14 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v15 = *(void **)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = (uint64_t *)((char *)a1 + v16);
  v19 = (uint64_t *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (uint64_t *)((char *)a1 + v17);
  v22 = (uint64_t *)((char *)a2 + v17);
  v23 = *v22;
  v24 = v22[1];
  v25 = a3[10];
  v26 = a3[11];
  v27 = *(void **)((char *)a2 + v25);
  *v21 = v23;
  v21[1] = v24;
  *(uint64_t *)((char *)a1 + v25) = (uint64_t)v27;
  v28 = (char *)a1 + v26;
  v29 = (char *)a2 + v26;
  v30 = *(uint64_t *)((char *)a2 + v26 + 24);
  v31 = v15;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  v32 = v27;
  if (v30)
  {
    v33 = *((_QWORD *)v29 + 4);
    *((_QWORD *)v28 + 3) = v30;
    *((_QWORD *)v28 + 4) = v33;
    (**(void (***)(char *, char *, uint64_t))(v30 - 8))(v28, v29, v30);
  }
  else
  {
    v34 = *((_OWORD *)v29 + 1);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v34;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  }
  v35 = a3[12];
  v36 = (uint64_t *)((char *)a1 + v35);
  v37 = (char *)a2 + v35;
  v38 = *(uint64_t *)((char *)a2 + v35);
  v39 = *(uint64_t *)((char *)a2 + v35 + 8);
  *v36 = v38;
  v36[1] = v39;
  swift_retain(v38);
  swift_retain(v39);
  v40 = *(int *)(sub_100047110(&qword_10081F550) + 32);
  v41 = (char *)v36 + v40;
  v42 = &v37[v40];
  v43 = type metadata accessor for GeometryProxy(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v45(v42, 1, v43))
  {
    v46 = sub_100047110(&qword_10081F430);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v47 = a3[13];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  if (v45((char *)a2 + v47, 1, v43))
  {
    v50 = sub_100047110(&qword_10081F430);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v48, v49, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v48, 0, 1, v43);
  }
  v51 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v52 = *(_QWORD *)&v49[v51];
  *(_QWORD *)&v48[v51] = v52;
  v53 = a3[14];
  v54 = a3[15];
  v55 = (char *)a1 + v53;
  v56 = (char *)a2 + v53;
  *(_OWORD *)v55 = *(_OWORD *)v56;
  v55[16] = v56[16];
  v57 = *((_QWORD *)v56 + 3);
  *((_QWORD *)v55 + 3) = v57;
  v58 = (uint64_t *)((char *)a1 + v54);
  v59 = (uint64_t *)((char *)a2 + v54);
  v60 = *v59;
  v61 = v59[1];
  *v58 = *v59;
  v58[1] = v61;
  v62 = a3[16];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  *v63 = *v64;
  v65 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v63 + 1) = v65;
  swift_retain(v52);
  swift_retain(v57);
  swift_retain(v60);
  swift_retain(v61);
  swift_retain(v65);
  return a1;
}

uint64_t *sub_10016E188(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  sub_1000F1A58((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]));
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v12 = a3[7];
  v13 = *(void **)((char *)a1 + v12);
  v14 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
  v15 = v14;

  v16 = a3[8];
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[9];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[10];
  v27 = *(void **)((char *)a1 + v26);
  v28 = *(void **)((char *)a2 + v26);
  *(uint64_t *)((char *)a1 + v26) = (uint64_t)v28;
  v29 = v28;

  v30 = a3[11];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(uint64_t *)((char *)a2 + v30 + 24);
  if (*(uint64_t *)((char *)a1 + v30 + 24))
  {
    if (v33)
    {
      sub_1000F1A58(v31, v32);
      goto LABEL_13;
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v31);
  }
  else if (v33)
  {
    *((_QWORD *)v31 + 3) = v33;
    *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
    (**(void (***)(char *, char *))(v33 - 8))(v31, v32);
    goto LABEL_13;
  }
  v34 = *(_OWORD *)v32;
  v35 = *((_OWORD *)v32 + 1);
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  *(_OWORD *)v31 = v34;
  *((_OWORD *)v31 + 1) = v35;
LABEL_13:
  v36 = a3[12];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(uint64_t *)((char *)a1 + v36);
  v40 = *(uint64_t *)((char *)a2 + v36);
  *(uint64_t *)((char *)a1 + v36) = v40;
  swift_retain(v40);
  swift_release(v39);
  v41 = *((_QWORD *)v38 + 1);
  v42 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v41;
  swift_retain(v41);
  swift_release(v42);
  v43 = *(int *)(sub_100047110(&qword_10081F550) + 32);
  v44 = &v37[v43];
  v45 = &v38[v43];
  v46 = type metadata accessor for GeometryProxy(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
LABEL_18:
    v51 = sub_100047110(&qword_10081F430);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v44, v45, v46);
LABEL_19:
  v52 = a3[13];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = v48((char *)a1 + v52, 1, v46);
  v56 = v48(v54, 1, v46);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v53, v54, v46);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v46);
    goto LABEL_24;
  }
  if (v56)
  {
LABEL_24:
    v57 = sub_100047110(&qword_10081F430);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v53, v54, v46);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v53, 0, 1, v46);
LABEL_25:
  v58 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v59 = *(_QWORD *)&v53[v58];
  v60 = *(_QWORD *)&v54[v58];
  *(_QWORD *)&v53[v58] = v60;
  swift_retain(v60);
  swift_release(v59);
  v61 = a3[14];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = *(_OWORD *)v63;
  v62[16] = v63[16];
  *(_OWORD *)v62 = v64;
  v65 = *((_QWORD *)v62 + 3);
  v66 = *((_QWORD *)v63 + 3);
  *((_QWORD *)v62 + 3) = v66;
  swift_retain(v66);
  swift_release(v65);
  v67 = a3[15];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = *(uint64_t *)((char *)a1 + v67);
  v71 = *(uint64_t *)((char *)a2 + v67);
  *(uint64_t *)((char *)a1 + v67) = v71;
  swift_retain(v71);
  swift_release(v70);
  v72 = *((_QWORD *)v68 + 1);
  v73 = *((_QWORD *)v69 + 1);
  *((_QWORD *)v68 + 1) = v73;
  swift_retain(v73);
  swift_release(v72);
  v74 = a3[16];
  v75 = (char *)a1 + v74;
  v76 = (char *)a2 + v74;
  *v75 = *v76;
  v77 = *((_QWORD *)v75 + 1);
  v78 = *((_QWORD *)v76 + 1);
  *((_QWORD *)v75 + 1) = v78;
  swift_retain(v78);
  swift_release(v77);
  return a1;
}

char *sub_10016E5F0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;

  v6 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v14 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[11];
  v16 = a3[12];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v20 = &a1[v16];
  v21 = &a2[v16];
  v22 = *(_QWORD *)&a2[v16];
  v23 = *(_QWORD *)&a2[v16 + 8];
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v23;
  v24 = *(int *)(sub_100047110(&qword_10081F550) + 32);
  v25 = &v20[v24];
  v26 = &v21[v24];
  v27 = type metadata accessor for GeometryProxy(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v29(v26, 1, v27))
  {
    v30 = sub_100047110(&qword_10081F430);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v31 = a3[13];
  v32 = &a1[v31];
  v33 = &a2[v31];
  if (v29(&a2[v31], 1, v27))
  {
    v34 = sub_100047110(&qword_10081F430);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v32, v33, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
  v35 = sub_100047110(&qword_10081F438);
  *(_QWORD *)&v32[*(int *)(v35 + 28)] = *(_QWORD *)&v33[*(int *)(v35 + 28)];
  v36 = a3[14];
  v37 = a3[15];
  v38 = &a1[v36];
  v39 = &a2[v36];
  v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *sub_10016E854(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;

  if (a1 != a2)
  {
    sub_10001BE90((uint64_t)a1, &qword_1008325D0);
    v6 = sub_100047110(&qword_1008325D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  _s10FitnessApp24HistoryViewActionContextVwxx_0(&a1[v8]);
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[8];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  v19 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v24 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[10];
  v27 = *(void **)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];

  v28 = a3[11];
  v29 = &a1[v28];
  v30 = &a2[v28];
  if (*(_QWORD *)&a1[v28 + 24])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v29);
  v31 = *((_OWORD *)v30 + 1);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v31;
  *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  v32 = a3[12];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
  swift_release(v35);
  v36 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_release(v36);
  v37 = *(int *)(sub_100047110(&qword_10081F550) + 32);
  v38 = &v33[v37];
  v39 = &v34[v37];
  v40 = type metadata accessor for GeometryProxy(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
LABEL_12:
    v45 = sub_100047110(&qword_10081F430);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v38, v39, v40);
LABEL_13:
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = v42(&a1[v46], 1, v40);
  v50 = v42(v48, 1, v40);
  if (!v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v47, v48, v40);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
    goto LABEL_18;
  }
  if (v50)
  {
LABEL_18:
    v51 = sub_100047110(&qword_10081F430);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v47, v48, v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v47, 0, 1, v40);
LABEL_19:
  v52 = *(int *)(sub_100047110(&qword_10081F438) + 28);
  v53 = *(_QWORD *)&v47[v52];
  *(_QWORD *)&v47[v52] = *(_QWORD *)&v48[v52];
  swift_release(v53);
  v54 = a3[14];
  v55 = &a1[v54];
  v56 = &a2[v54];
  *(_OWORD *)v55 = *(_OWORD *)v56;
  v55[16] = v56[16];
  v57 = *((_QWORD *)v55 + 3);
  *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
  swift_release(v57);
  v58 = a3[15];
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = *(_QWORD *)&a1[v58];
  *(_QWORD *)&a1[v58] = *(_QWORD *)&a2[v58];
  swift_release(v61);
  v62 = *((_QWORD *)v59 + 1);
  *((_QWORD *)v59 + 1) = *((_QWORD *)v60 + 1);
  swift_release(v62);
  v63 = a3[16];
  v64 = &a1[v63];
  v65 = &a2[v63];
  *v64 = *v65;
  v66 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
  swift_release(v66);
  return a1;
}

uint64_t sub_10016EC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016EC34);
}

uint64_t sub_10016EC34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_100047110(&qword_10081F440);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_100047110(&qword_10081F550);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[12];
    }
    else
    {
      v8 = sub_100047110(&qword_10081F438);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[13];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10016ED10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016ED1C);
}

uint64_t sub_10016ED1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_100047110(&qword_10081F440);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 24) = (a2 - 1);
      return result;
    }
    v13 = sub_100047110(&qword_10081F550);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[12];
    }
    else
    {
      v10 = sub_100047110(&qword_10081F438);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[13];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10016EDF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[13];

  sub_1000F2378(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "(";
    v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[3] = &unk_100628290;
    v8[4] = &unk_1006282A8;
    v8[5] = &unk_1006282A8;
    v8[6] = &unk_100628290;
    v8[7] = &unk_1006282C0;
    sub_10016EF00(319, (unint64_t *)&qword_1008230E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
    if (v5 <= 0x3F)
    {
      v8[8] = *(_QWORD *)(v4 - 8) + 64;
      sub_10016EF00(319, (unint64_t *)&qword_10081F4B8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        v8[10] = &unk_1006282D8;
        v8[11] = &unk_1006282F0;
        v8[12] = &unk_1006282F0;
        swift_initStructMetadata(a1, 256, 13, v8, a1 + 16);
      }
    }
  }
}

void sub_10016EF00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100007050(&qword_10081F430);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10016EF5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1006AD15C, 1);
}

uint64_t sub_10016EF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SmallAwardsCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016EFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SmallAwardsCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016EFFC()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for SmallAwardsCardView(0);
  v1 = (_QWORD *)swift_task_alloc(dword_100823164);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000DA0E4;
  return sub_10016D050();
}

unint64_t sub_10016F060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008231F0;
  if (!qword_1008231F0)
  {
    v1 = sub_100007050(&qword_1008231E8);
    sub_10016F0EC(&qword_1008231F8, &qword_100823200);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1008231F0);
  }
  return result;
}

uint64_t sub_10016F0EC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007050(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016F14C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_BYTE *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  sub_1000E439C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_1000E439C(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_10016F1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_BYTE *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  sub_1000E4458(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_1000E4458(v4, v5, v6);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_10016F268()
{
  return sub_10016F284(sub_10016D854);
}

uint64_t sub_10016F278()
{
  return sub_10016F284(sub_10016D8B8);
}

uint64_t sub_10016F284(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SmallAwardsCardView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10016F2C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10016F300()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = (int *)type metadata accessor for SmallAwardsCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100047110(&qword_1008325D0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  _s10FitnessApp24HistoryViewActionContextVwxx_0((_QWORD *)((char *)v6 + v1[5]));

  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[9] + 8));

  v9 = (_QWORD *)((char *)v6 + v1[11]);
  if (v9[3])
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v9);
  v10 = (_QWORD *)((char *)v6 + v1[12]);
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (char *)v10 + *(int *)(sub_100047110(&qword_10081F550) + 32);
  v12 = type metadata accessor for GeometryProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (!v14(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  v15 = (char *)v6 + v1[13];
  if (!v14(v15, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v16 = sub_100047110(&qword_10081F438);
  swift_release(*(_QWORD *)&v15[*(int *)(v16 + 28)]);
  swift_release(*(_QWORD *)((char *)v6 + v1[14] + 24));
  v17 = (_QWORD *)((char *)v6 + v1[15]);
  swift_release(*v17);
  swift_release(v17[1]);
  swift_release(*(_QWORD *)((char *)v6 + v1[16] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

_QWORD *sub_10016F4F0()
{
  type metadata accessor for SmallAwardsCardView(0);
  return sub_10016C1D8();
}

unint64_t sub_10016F528()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823238;
  if (!qword_100823238)
  {
    v1 = sub_100007050(&qword_100823078);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100823238);
  }
  return result;
}

unint64_t sub_10016F588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823248;
  if (!qword_100823248)
  {
    v1 = sub_100007050(&qword_100823170);
    sub_1000E0A18(&qword_100823250, &qword_100823158, (void (*)(void))sub_10016F62C);
    sub_1000083D8((unint64_t *)&qword_100823278, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823248);
  }
  return result;
}

uint64_t sub_10016F62C()
{
  return sub_1000E0A18(&qword_100823258, &qword_100823150, (void (*)(void))sub_10016F650);
}

unint64_t sub_10016F650()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823260;
  if (!qword_100823260)
  {
    v1 = sub_100007050(&qword_100823148);
    sub_10016F6B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100823260);
  }
  return result;
}

unint64_t sub_10016F6B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100823268;
  if (!qword_100823268)
  {
    v1 = sub_100007050(&qword_100823270);
    sub_100028384(&qword_1008231B0, &qword_1008231A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100028384(&qword_1008231B8, &qword_100823190, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100823268);
  }
  return result;
}

void sub_10016F750(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10016F798()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, 0, 0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_10016F918()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DashboardCardCellViewCache()
{
  return objc_opt_self(_TtC10FitnessApp26DashboardCardCellViewCache);
}

uint64_t sub_10016F964@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for DashboardCardCellViewCache();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

unint64_t sub_10016F9A0()
{
  unint64_t result;

  result = qword_100823378;
  if (!qword_100823378)
  {
    result = swift_getWitnessTable(&unk_1006284B0, &type metadata for AwardedWorkoutIntent);
    atomic_store(result, (unint64_t *)&qword_100823378);
  }
  return result;
}

unint64_t sub_10016F9E8()
{
  unint64_t result;

  result = qword_100823380;
  if (!qword_100823380)
  {
    result = swift_getWitnessTable(&unk_1006284D8, &type metadata for AwardedWorkoutIntent);
    atomic_store(result, (unint64_t *)&qword_100823380);
  }
  return result;
}

uint64_t sub_10016FA2C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1006AD224, 1) + 8);
}

uint64_t sub_10016FA50(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10016FA90();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_10016FA90()
{
  unint64_t result;

  result = qword_100823388;
  if (!qword_100823388)
  {
    result = swift_getWitnessTable(&unk_100628420, &type metadata for AwardedWorkoutIntent);
    atomic_store(result, (unint64_t *)&qword_100823388);
  }
  return result;
}

uint64_t sub_10016FAD4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100008398(v0, qword_100869F20);
  sub_10003CE9C(v0, (uint64_t)qword_100869F20);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x800000010068C390);
}

uint64_t sub_10016FB34()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_10016FB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[97] = a5;
  v5[96] = a1;
  v6 = type metadata accessor for IntentDialog(0);
  v5[98] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[99] = v7;
  v5[100] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100047110(&qword_10081E640) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[101] = swift_task_alloc(v8);
  v5[102] = swift_task_alloc(v8);
  v5[103] = swift_task_alloc(v8);
  v9 = type metadata accessor for URL(0);
  v5[104] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[105] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[106] = swift_task_alloc(v11);
  v5[107] = swift_task_alloc(v11);
  v5[108] = swift_task_alloc(v11);
  v12 = sub_100047110((uint64_t *)&unk_10082E690);
  v5[109] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  v5[110] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v5[111] = v14;
  v5[112] = v15;
  return swift_task_switch(sub_10016FCA8, v14, v15);
}

uint64_t sub_10016FCA8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  IntentParameter.wrappedValue.getter(v0 + 92);
  v1 = v0[92];
  v2 = (void *)v0[93];
  EntityProperty.wrappedValue.getter(v0 + 127);
  swift_release(v1);

  if (*((_BYTE *)v0 + 1016) != 1)
  {
    IntentParameter.wrappedValue.getter(v0 + 88);
    v12 = v0[88];
    v0[124] = v12;
    v13 = v0[89];
    v0[125] = v13;
    v0[72] = v12;
    v0[73] = v13;
    v14 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableEntity.urlRepresentation.getter[1]);
    v0[126] = v14;
    v15 = sub_100171194();
    *v14 = v0;
    v14[1] = sub_1001707B8;
    v16 = v0[101];
    return URLRepresentableEntity.urlRepresentation.getter(v16, &type metadata for AwardEntity, v15);
  }
  IntentParameter.wrappedValue.getter(v0 + 78);
  v3 = v0[78];
  v4 = (void *)v0[79];
  v5 = objc_msgSend(v4, "relevantEarnedInstance");
  if (v5
    && (v6 = v5, v7 = objc_msgSend(v5, "externalIdentifier"), v6, v7))
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    UUID.init(uuidString:)(v8, v10, v11);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v17 = v0[109];
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  }
  swift_release(v3);

  v19 = v0[109];
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  if ((_DWORD)v22 == 1)
  {
    sub_10001BE90(v19, (uint64_t *)&unk_10082E690);
    IntentParameter.wrappedValue.getter(v0 + 80);
    v23 = v0[80];
    v0[121] = v23;
    v24 = v0[81];
    v0[122] = v24;
    v0[82] = v23;
    v0[83] = v24;
    v25 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableEntity.urlRepresentation.getter[1]);
    v0[123] = v25;
    v15 = sub_100171194();
    *v25 = v0;
    v25[1] = sub_10017056C;
    v16 = v0[102];
    return URLRepresentableEntity.urlRepresentation.getter(v16, &type metadata for AwardEntity, v15);
  }
  v27 = UUID.uuidString.getter(v22);
  v29 = v28;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  sub_100047110(&qword_1008201E0);
  v30 = type metadata accessor for AppDependencyManager(0);
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v31 = static AppDependencyManager.shared.getter(v30);
  v32 = AppDependency.__allocating_init(key:manager:)(&v42, v31);
  v0[113] = v32;
  v33 = sub_100047110(&qword_1008201E8);
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v34 = static AppDependencyManager.shared.getter(v33);
  v35 = AppDependency.__allocating_init(key:manager:)(&v42, v34);
  v0[114] = v35;
  v36 = sub_100047110(&qword_100822D10);
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v37 = static AppDependencyManager.shared.getter(v36);
  v38 = AppDependency.__allocating_init(key:manager:)(&v42, v37);
  v0[115] = v38;
  v39 = sub_100047110(&qword_100820020);
  inited = swift_initStackObject(v39, v0 + 66);
  v0[116] = inited;
  *(_OWORD *)(inited + 16) = xmmword_100622F90;
  *(_QWORD *)(inited + 32) = v27;
  *(_QWORD *)(inited + 40) = v29;
  v41 = (_QWORD *)swift_task_alloc(dword_10082484C);
  v0[117] = v41;
  *v41 = v0;
  v41[1] = sub_100170044;
  return sub_1001A347C(inited, v32, v35, v38);
}

uint64_t sub_100170044(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 936);
  v3[118] = a1;
  v3[119] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[112];
    v6 = v3[111];
    v7 = sub_100170A04;
  }
  else
  {
    v8 = v3[116];
    v9 = v3[115];
    v10 = v3[114];
    v11 = v3[113];
    swift_setDeallocating(v8);
    swift_arrayDestroy(v8 + 32, *(_QWORD *)(v8 + 16), &type metadata for String);
    swift_release(v11);
    swift_release(v10);
    swift_release(v9);
    v5 = v3[112];
    v6 = v3[111];
    v7 = sub_100170114;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100170114()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(_QWORD *)(v0 + 944);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_OWORD *)(v1 + 32);
    v3 = *(_OWORD *)(v1 + 48);
    v4 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 320) = v4;
    *(_OWORD *)(v0 + 272) = v2;
    *(_OWORD *)(v0 + 288) = v3;
    v5 = *(_OWORD *)(v1 + 96);
    v6 = *(_OWORD *)(v1 + 112);
    v7 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 384) = v7;
    *(_OWORD *)(v0 + 336) = v5;
    *(_OWORD *)(v0 + 352) = v6;
    v8 = *(_OWORD *)(v1 + 160);
    v9 = *(_OWORD *)(v1 + 176);
    v10 = *(_OWORD *)(v1 + 208);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v1 + 192);
    *(_OWORD *)(v0 + 448) = v10;
    *(_OWORD *)(v0 + 400) = v8;
    *(_OWORD *)(v0 + 416) = v9;
    v11 = *(_OWORD *)(v1 + 224);
    v12 = *(_OWORD *)(v1 + 240);
    v13 = *(_OWORD *)(v1 + 272);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v1 + 256);
    *(_OWORD *)(v0 + 512) = v13;
    *(_OWORD *)(v0 + 464) = v11;
    *(_OWORD *)(v0 + 480) = v12;
    sub_100112010((_QWORD *)(v0 + 272));
    swift_bridgeObjectRelease(v1);
    v14 = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 224) = v14;
    v15 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 256) = v15;
    v16 = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 160) = v16;
    v17 = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v0 + 192) = v17;
    v18 = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 96) = v18;
    v19 = *(_OWORD *)(v0 + 384);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 368);
    *(_OWORD *)(v0 + 128) = v19;
    v20 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 32) = v20;
    v21 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 64) = v21;
    v22 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableEntity.urlRepresentation.getter[1]);
    *(_QWORD *)(v0 + 960) = v22;
    v23 = sub_100166890();
    *v22 = v0;
    v22[1] = sub_100170288;
    v24 = *(_QWORD *)(v0 + 824);
    v25 = &type metadata for WorkoutEntity;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 944));
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 640));
    v26 = *(_QWORD *)(v0 + 640);
    *(_QWORD *)(v0 + 968) = v26;
    v27 = *(_QWORD *)(v0 + 648);
    *(_QWORD *)(v0 + 976) = v27;
    *(_QWORD *)(v0 + 656) = v26;
    *(_QWORD *)(v0 + 664) = v27;
    v28 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableEntity.urlRepresentation.getter[1]);
    *(_QWORD *)(v0 + 984) = v28;
    v23 = sub_100171194();
    *v28 = v0;
    v28[1] = sub_10017056C;
    v24 = *(_QWORD *)(v0 + 816);
    v25 = &type metadata for AwardEntity;
  }
  return URLRepresentableEntity.urlRepresentation.getter(v24, v25, v23);
}

uint64_t sub_100170288()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 960));
  return swift_task_switch(sub_1001702D8, *(_QWORD *)(v1 + 888), *(_QWORD *)(v1 + 896));
}

uint64_t sub_1001702D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100112258((_QWORD *)(v0 + 272));
    sub_10001BE90(v3, &qword_10081E640);
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 640));
    v4 = *(_QWORD *)(v0 + 640);
    *(_QWORD *)(v0 + 968) = v4;
    v5 = *(_QWORD *)(v0 + 648);
    *(_QWORD *)(v0 + 976) = v5;
    *(_QWORD *)(v0 + 656) = v4;
    *(_QWORD *)(v0 + 664) = v5;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableEntity.urlRepresentation.getter[1]);
    *(_QWORD *)(v0 + 984) = v6;
    v7 = sub_100171194();
    *v6 = v0;
    v6[1] = sub_10017056C;
    return URLRepresentableEntity.urlRepresentation.getter(*(_QWORD *)(v0 + 816), &type metadata for AwardEntity, v7);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 864);
    v10 = swift_release(*(_QWORD *)(v0 + 880));
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 32))(v9, v3, v2, v10);
    if (qword_10081DDA8 != -1)
      swift_once(&qword_10081DDA8, sub_10044A45C);
    v11 = *(_QWORD *)(v0 + 864);
    v24 = *(_QWORD *)(v0 + 840);
    v25 = *(_QWORD *)(v0 + 832);
    v12 = *(_QWORD *)(v0 + 800);
    v13 = *(_QWORD *)(v0 + 792);
    v23 = *(_QWORD *)(v0 + 784);
    sub_10044AD80(v11);
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 752));
    *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 752);
    IntentDialog.init(stringLiteral:)(0xD000000000000028, 0x800000010068C360);
    v14 = sub_100047110(&qword_1008233C8);
    v15 = sub_1001711D8();
    static IntentResult.result<A>(value:dialog:)(v0 + 720, v12, v14, v15);
    sub_100112258((_QWORD *)(v0 + 272));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v23);
    sub_100171280(*(_QWORD *)(v0 + 720), *(void **)(v0 + 728));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v11, v25);
    v16 = *(_QWORD *)(v0 + 864);
    v17 = *(_QWORD *)(v0 + 856);
    v18 = *(_QWORD *)(v0 + 848);
    v19 = *(_QWORD *)(v0 + 824);
    v20 = *(_QWORD *)(v0 + 816);
    v21 = *(_QWORD *)(v0 + 808);
    v22 = *(_QWORD *)(v0 + 800);
    swift_task_dealloc(*(_QWORD *)(v0 + 872));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10017056C()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(void **)(*v0 + 976);
  v3 = *(_QWORD *)(*v0 + 968);
  swift_task_dealloc(*(_QWORD *)(*v0 + 984));
  swift_release(v3);

  return swift_task_switch(sub_1001705D8, *(_QWORD *)(v1 + 888), *(_QWORD *)(v1 + 896));
}

uint64_t sub_1001705D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 816);
  v4 = swift_release(*(_QWORD *)(v0 + 880));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 48))(v3, 1, v2, v4) == 1)
  {
    sub_10001BE90(*(_QWORD *)(v0 + 816), &qword_10081E640);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 840) + 32))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 832));
    if (qword_10081DDA8 != -1)
      swift_once(&qword_10081DDA8, sub_10044A45C);
    v5 = *(_QWORD *)(v0 + 856);
    v6 = *(_QWORD *)(v0 + 840);
    v7 = *(_QWORD *)(v0 + 832);
    sub_10044AD80(v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v8 = *(_QWORD *)(v0 + 800);
  v9 = *(_QWORD *)(v0 + 792);
  v10 = *(_QWORD *)(v0 + 784);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 672));
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 672);
  IntentDialog.init(stringLiteral:)(0xD000000000000012, 0x800000010068C340);
  v11 = sub_100047110(&qword_1008233C8);
  v12 = sub_1001711D8();
  static IntentResult.result<A>(value:dialog:)(v0 + 688, v8, v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_100171280(*(_QWORD *)(v0 + 688), *(void **)(v0 + 696));
  v13 = *(_QWORD *)(v0 + 864);
  v14 = *(_QWORD *)(v0 + 856);
  v15 = *(_QWORD *)(v0 + 848);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  v18 = *(_QWORD *)(v0 + 808);
  v19 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001707B8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(void **)(*v0 + 1000);
  v3 = *(_QWORD *)(*v0 + 992);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1008));
  swift_release(v3);

  return swift_task_switch(sub_100170824, *(_QWORD *)(v1 + 888), *(_QWORD *)(v1 + 896));
}

uint64_t sub_100170824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 808);
  v4 = swift_release(*(_QWORD *)(v0 + 880));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 48))(v3, 1, v2, v4) == 1)
  {
    sub_10001BE90(*(_QWORD *)(v0 + 808), &qword_10081E640);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 840) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 832));
    if (qword_10081DDA8 != -1)
      swift_once(&qword_10081DDA8, sub_10044A45C);
    v5 = *(_QWORD *)(v0 + 848);
    v6 = *(_QWORD *)(v0 + 840);
    v7 = *(_QWORD *)(v0 + 832);
    sub_10044AD80(v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v8 = *(_QWORD *)(v0 + 800);
  v9 = *(_QWORD *)(v0 + 792);
  v10 = *(_QWORD *)(v0 + 784);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 592));
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 592);
  IntentDialog.init(stringLiteral:)(0xD00000000000002DLL, 0x800000010068C310);
  v11 = sub_100047110(&qword_1008233C8);
  v12 = sub_1001711D8();
  static IntentResult.result<A>(value:dialog:)(v0 + 608, v8, v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_100171280(*(_QWORD *)(v0 + 608), *(void **)(v0 + 616));
  v13 = *(_QWORD *)(v0 + 864);
  v14 = *(_QWORD *)(v0 + 856);
  v15 = *(_QWORD *)(v0 + 848);
  v16 = *(_QWORD *)(v0 + 824);
  v17 = *(_QWORD *)(v0 + 816);
  v18 = *(_QWORD *)(v0 + 808);
  v19 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100170A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 928);
  v2 = *(_QWORD *)(v0 + 920);
  v3 = *(_QWORD *)(v0 + 912);
  v4 = *(_QWORD *)(v0 + 904);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v10 = *(_QWORD *)(v0 + 848);
  v11 = *(_QWORD *)(v0 + 824);
  v12 = *(_QWORD *)(v0 + 816);
  v13 = *(_QWORD *)(v0 + 808);
  v14 = *(_QWORD *)(v0 + 800);
  swift_setDeallocating(v1);
  swift_arrayDestroy(v1 + 32, *(_QWORD *)(v1 + 16), &type metadata for String);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100170B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10081D600 != -1)
    swift_once(&qword_10081D600, sub_10016FAD4);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10003CE9C(v2, (uint64_t)qword_100869F20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100170B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_1008233BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000DA0E4;
  return sub_10016FB64(a1, v6, v7, v8, v4);
}

uint64_t sub_100170BD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_100170EB8();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_100170C00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016FA90();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t destroy for AwardedWorkoutIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for AwardedWorkoutIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for AwardedWorkoutIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for AwardedWorkoutIntent(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardedWorkoutIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardedWorkoutIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardedWorkoutIntent()
{
  return &type metadata for AwardedWorkoutIntent;
}

uint64_t sub_100170E2C()
{
  return sub_100170E74(&qword_100823398, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100170E50()
{
  return sub_100170E74(&qword_1008233A8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100170E74(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100007050(&qword_1008233A0);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100170EB8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v28 = *(_QWORD *)(v0 - 8);
  v29 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100047110(&qword_1008201C8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v26 - v7;
  v9 = sub_100047110(&qword_1008201D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100047110(&qword_1008201E0);
  v16 = type metadata accessor for AppDependencyManager(0);
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v17 = static AppDependencyManager.shared.getter(v16);
  v27 = AppDependency.__allocating_init(key:manager:)(&v30, v17);
  v18 = sub_100047110(&qword_1008201E8);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v19 = static AppDependencyManager.shared.getter(v18);
  v26 = AppDependency.__allocating_init(key:manager:)(&v30, v19);
  v20 = sub_100047110(&qword_100822D10);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v21 = static AppDependencyManager.shared.getter(v20);
  AppDependency.__allocating_init(key:manager:)(&v30, v21);
  sub_100047110(&qword_1008233B0);
  LocalizedStringResource.init(stringLiteral:)(0x6472617741, 0xE500000000000000);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x800000010068C2E0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v22 = type metadata accessor for IntentDialog(0);
  v30 = 0uLL;
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v8, 1, 1, v22);
  v23(v6, 1, 1, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v29);
  v24 = sub_1000F49B4();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v15, v11, &v30, v8, v6, v2, v24);
  return v27;
}

unint64_t sub_100171194()
{
  unint64_t result;

  result = qword_1008233C0;
  if (!qword_1008233C0)
  {
    result = swift_getWitnessTable(&unk_1006440A4, &type metadata for AwardEntity);
    atomic_store(result, (unint64_t *)&qword_1008233C0);
  }
  return result;
}

unint64_t sub_1001711D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1008233D0;
  if (!qword_1008233D0)
  {
    v1 = sub_100007050(&qword_1008233C8);
    sub_10017123C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1008233D0);
  }
  return result;
}

unint64_t sub_10017123C()
{
  unint64_t result;

  result = qword_1008233D8;
  if (!qword_1008233D8)
  {
    result = swift_getWitnessTable(&unk_1006441F4, &type metadata for AwardEntity);
    atomic_store(result, (unint64_t *)&qword_1008233D8);
  }
  return result;
}

void sub_100171280(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release(a1);

  }
}

id sub_1001714C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingViewControllerFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivitySharingViewControllerFactory()
{
  return objc_opt_self(CHActivitySharingViewControllerFactory);
}

id sub_100171518(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  id result;
  void *v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  id v41;
  objc_class *v42;
  char *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  objc_super v48;
  _OWORD v49[13];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  sub_1000E0DAC(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)&v51, a9, a10, a11, a12, a13, a14, a15, a16);
  v16 = (char *)objc_allocWithZone((Class)type metadata accessor for ActivitySharingTabViewHostingController(0));
  *(_QWORD *)&v16[qword_100823FF0] = 0;
  v17 = &v16[qword_100823FF8];
  v18 = v52;
  *(_OWORD *)v17 = v51;
  *((_OWORD *)v17 + 1) = v18;
  v19 = v56;
  v21 = v53;
  v20 = v54;
  *((_OWORD *)v17 + 4) = v55;
  *((_OWORD *)v17 + 5) = v19;
  *((_OWORD *)v17 + 2) = v21;
  *((_OWORD *)v17 + 3) = v20;
  v22 = v59[1];
  v24 = v57;
  v23 = v58;
  *((_OWORD *)v17 + 8) = v59[0];
  *((_OWORD *)v17 + 9) = v22;
  *((_OWORD *)v17 + 6) = v24;
  *((_OWORD *)v17 + 7) = v23;
  v25 = v60;
  v26 = v61;
  v27 = v62;
  *((_QWORD *)v17 + 26) = v63;
  *((_OWORD *)v17 + 11) = v26;
  *((_OWORD *)v17 + 12) = v27;
  *((_OWORD *)v17 + 10) = v25;
  v49[10] = v60;
  v49[11] = v61;
  v49[12] = v62;
  v50 = v63;
  v49[6] = v57;
  v49[7] = v58;
  v49[8] = v59[0];
  v49[9] = v59[1];
  v49[2] = v53;
  v49[3] = v54;
  v49[4] = v55;
  v49[5] = v56;
  v49[0] = v51;
  v49[1] = v52;
  sub_100021D04((uint64_t)&v51);
  sub_100021D04((uint64_t)&v51);
  v28 = (void *)UIHostingController.init(rootView:)(v49);
  result = objc_msgSend(v28, "tabBarItem");
  if (result)
  {
    v30 = result;
    v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v31, "localizedStringForKey:value:table:", v32, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v35 = v34;

    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setTitle:", v36, swift_bridgeObjectRelease(v35).n128_f64[0]);

    result = objc_msgSend(v28, "tabBarItem");
    if (result)
    {
      v37 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("person.2.fill"));
      v39 = v38;
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
      v41 = objc_msgSend((id)objc_opt_self(UIImage), "smm_systemImageNamed:", v40);

      objc_msgSend(v37, "setImage:", v41);
      v42 = (objc_class *)type metadata accessor for ActivitySharingNavigationController();
      v43 = (char *)objc_allocWithZone(v42);
      *(_QWORD *)&v43[OBJC_IVAR____TtC10FitnessApp35ActivitySharingNavigationController_viewController] = v28;
      v48.receiver = v43;
      v48.super_class = v42;
      v44 = v28;
      v45 = objc_msgSendSuper2(&v48, "initWithRootViewController:", v44);
      v49[0] = *(_OWORD *)((char *)v59 + 8);
      v46 = *(void **)(*(_QWORD *)&v59[1] + 144);
      *(_QWORD *)(*(_QWORD *)&v59[1] + 144) = v45;
      sub_10004D65C((uint64_t)v49);
      v47 = v45;

      sub_100011450((uint64_t)&v51);
      sub_10004D634((uint64_t)v49);
      return v47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100171924()
{
  return sub_1001731F0((uint64_t)&unk_100628738, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts);
}

void sub_100171938(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100173288(a1, (uint64_t)&unk_100628738, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts, a2);
}

double sub_10017194C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628738);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10017CB9C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1001719F4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100628788);
  v4 = v0;
  v2 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder)).n128_u64[0];
  return result;
}

double sub_100171A84@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100628788);
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3
                 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_100171B1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628788);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017C71C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100171BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  _QWORD v19[3];

  v1 = v0;
  v2 = type metadata accessor for GregorianDayRange(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_100628788);
  v19[0] = v0;
  v7 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  if (v8)
  {
    v9 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  }
  else
  {
    type metadata accessor for SleepingSampleViewModelProvider(0);
    v10 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore);
    v11 = swift_getKeyPath(&unk_100628670);
    v19[0] = v1;
    v12 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v19, v11, v7);
    swift_release(v11);
    v13 = v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
    swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v19, 0, 0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
    v9 = SleepingSampleViewModelProvider.__allocating_init(healthStore:dayRange:debugIdentifier:)(v12, v5, 0, 0);
    v14 = swift_getKeyPath(&unk_100628788);
    __chkstk_darwin(v14);
    *(_QWORD *)&v17[-16] = v1;
    *(_QWORD *)&v17[-8] = v9;
    v18 = v1;
    swift_retain(v9);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v14, sub_10017C71C, &v17[-32], (char *)&type metadata for () + 8, v7);
    swift_release(v9);
    swift_release(v14);
    dispatch thunk of SleepingSampleViewModelProvider.startQuery()(v15);
    v8 = 0;
  }
  swift_retain(v8);
  return v9;
}

uint64_t sub_100171DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_100628670);
  v8[0] = v1;
  v4 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v8, 0, 0);
  v6 = type metadata accessor for GregorianDayRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_100171EBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100628670);
  v9[0] = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v9, 0, 0);
  v7 = type metadata accessor for GregorianDayRange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_100171F80(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  __n128 v11;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = type metadata accessor for GregorianDayRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628670);
  v14 = v8;
  v15 = v7;
  v16 = v8;
  v10 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_10017AED4, v13, (char *)&type metadata for () + 8, v10);
  v11 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v11);
}

uint64_t sub_10017208C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  __n128 v15;
  void (*v16)(char *, uint64_t);
  _QWORD v19[3];

  v4 = type metadata accessor for GregorianDayRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19[-1] - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19[-1] - v9, a2, v4);
  v12 = a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v19, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v12, v10, v4);
  swift_endAccess(v19);
  KeyPath = swift_getKeyPath(&unk_100628670);
  v19[0] = a1;
  v14 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v14);
  v15 = swift_release(KeyPath);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v11)(v8, v12, v4, v15);
  sub_100177258((uint64_t)v8);
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
}

double sub_10017220C()
{
  return sub_100172D60((uint64_t)&unk_100628710, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange);
}

double sub_100172220@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628710, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange, a2);
}

double sub_100172234(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628710);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017AF84, v7, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1001722EC()
{
  return sub_100172D60((uint64_t)&unk_100628760, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek);
}

double sub_100172300@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628760, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek, a2);
}

double sub_100172314(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628760);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017C69C, v7, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1001723CC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1008234EC);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_10016D0B4;
  return sub_10017890C();
}

uint64_t sub_100172430()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1006286E8);
  v4 = v0;
  v2 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter);
}

double sub_1001724C4(char *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v6 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &a1[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter];
  *(_QWORD *)v9 = a2;
  *((_WORD *)v9 + 4) = a3;
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = a1;
  v12 = static MainActor.shared.getter(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_10078A198, 40, 7);
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v11;
  v14 = sub_10020D9C0((uint64_t)v8, (uint64_t)&unk_100823508, (uint64_t)v13);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

void *sub_1001725CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1006287D8);
  v6 = v0;
  v2 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  v4 = v3;
  return v3;
}

id sub_100172660@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006287D8);
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  *a2 = v6;
  return v6;
}

double sub_1001726F4(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  double result;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006287D8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10017C758, v8, (char *)&type metadata for () + 8, v5);

  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

Swift::Int sub_1001727A8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD v6[9];

  v2 = *(void **)v0;
  v1 = *(void **)(v0 + 8);
  Hasher.init(_seed:)(v6, 0);
  v3 = v2;
  NSObject.hash(into:)(v6);

  if (v1)
  {
    Hasher._combine(_:)(1u);
    v4 = v1;
    NSObject.hash(into:)(v6);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10017282C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(v1 + 8);
  v4 = *(id *)v1;
  NSObject.hash(into:)(a1);

  if (v3)
  {
    Hasher._combine(_:)(1u);
    v5 = v3;
    NSObject.hash(into:)(a1);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1001728BC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[9];

  v3 = *(void **)v1;
  v2 = *(void **)(v1 + 8);
  Hasher.init(_seed:)(v7, a1);
  v4 = v3;
  NSObject.hash(into:)(v7);

  if (v2)
  {
    Hasher._combine(_:)(1u);
    v5 = v2;
    NSObject.hash(into:)(v7);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_10017293C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  v2 = *a1;
  v3 = (void *)a1[1];
  v4 = *a2;
  v5 = (void *)a2[1];
  sub_10001E724(0, (unint64_t *)&qword_10081E630, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(v2, v4) & 1) != 0)
  {
    if (v3)
    {
      if (v5)
      {
        sub_10001E724(0, (unint64_t *)&qword_10082E6A0, HKWorkoutActivity_ptr);
        v6 = v5;
        v7 = v3;
        v8 = static NSObject.== infix(_:_:)(v7, v6);

        if ((v8 & 1) != 0)
          return 1;
      }
    }
    else if (!v5)
    {
      return 1;
    }
  }
  return 0;
}

double sub_1001729F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  double result;
  _QWORD v5[3];

  KeyPath = swift_getKeyPath(&unk_1006287B0);
  v5[0] = v0;
  v2 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities, v5, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*v3).n128_u64[0];
  return result;
}

double sub_100172A98@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  double result;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1006287B0);
  v9[0] = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = (uint64_t *)(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities, v9, 0, 0);
  v7 = *v6;
  *a2 = *v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

double sub_100172B48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006287B0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017C738, v7, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100172C00(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess(a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities, v6, 1, 0);
  v4 = *v3;
  *v3 = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

double sub_100172C6C()
{
  return sub_100172D60((uint64_t)&unk_100628698, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries);
}

double sub_100172C80@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628698, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries, a2);
}

double sub_100172C94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628698);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017AE74, v7, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_100172D4C()
{
  return sub_100172D60((uint64_t)&unk_1006286C0, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek);
}

double sub_100172D60(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v2 + *a2)).n128_u64[0];
  return result;
}

double sub_100172DE8@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_1006286C0, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek, a2);
}

double sub_100172DFC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v11 = v6;
  v8 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(_QWORD *)(v6 + *a3);
  *a4 = v9;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v9).n128_u64[0];
  return result;
}

double sub_100172E98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1006286C0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017AEB8, v7, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100172F50()
{
  return sub_10017301C((uint64_t)&unk_100628828, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery);
}

double sub_100172F64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628828);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017CB88, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100173008()
{
  return sub_10017301C((uint64_t)&unk_100628850, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying);
}

uint64_t sub_10017301C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(_QWORD *)(v2 + *a2);
}

void sub_1001730A0(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_QWORD *)(v6 + *a3);
}

double sub_100173138(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628850);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10017C9E4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1001731DC()
{
  return sub_1001731F0((uint64_t)&unk_100628800, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated);
}

uint64_t sub_1001731F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

void sub_100173274(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100173288(a1, (uint64_t)&unk_100628800, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated, a2);
}

void sub_100173288(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_BYTE *)(v6 + *a3);
}

double sub_100173320(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100628800);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10017CBB0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

char *sub_1001733C8(void (*a1)(char *, uint64_t), uint64_t a2, void (*a3)(char *, uint64_t), void *a4, int a5)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (**v35)(char *, uint64_t);
  id v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, uint64_t, __n128);
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, char *);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (**v77)(char *, uint64_t);
  uint64_t v78;
  objc_class *v79;
  char *v80;
  char *v81;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  id v86;
  id v87;
  uint64_t v88;
  void *v89;
  id v90;
  __n128 v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  int v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, char *, uint64_t);
  void (**v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, __n128);
  id v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD aBlock[5];
  uint64_t v123;
  objc_super v124;

  v101 = a5;
  v110 = a4;
  v103 = a2;
  v99 = sub_100047110(&qword_100823560);
  v8 = __chkstk_darwin(v99);
  v100 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v97 = (char *)&v95 - v10;
  v11 = (char *)type metadata accessor for DayIndex(0);
  v116 = *((_QWORD *)v11 - 1);
  v12 = __chkstk_darwin(v11);
  v112 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v114 = (char *)&v95 - v14;
  v117 = sub_100047110(&qword_100823530);
  v15 = __chkstk_darwin(v117);
  v98 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v113 = (char *)&v95 - v18;
  v19 = __chkstk_darwin(v17);
  v111 = (char *)&v95 - v20;
  __chkstk_darwin(v19);
  v96 = (uint64_t)&v95 - v21;
  v107 = type metadata accessor for Calendar.Identifier(0);
  v105 = *(void (**)(char *, char *, uint64_t))(v107 - 8);
  __chkstk_darwin(v107);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for Calendar(0);
  v109 = *(void (**)(uint64_t, uint64_t, __n128))(v119 - 8);
  __chkstk_darwin(v119);
  v25 = (char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Date(0);
  v106 = *(void (***)(char *, uint64_t))(v108 - 8);
  __chkstk_darwin(v108);
  v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for GregorianDayRange(0);
  v118 = *(_QWORD *)(v121 - 8);
  v28 = __chkstk_darwin(v121);
  v115 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v95 - v31;
  __chkstk_darwin(v30);
  v120 = (char *)&v95 - v33;
  v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek] = _swiftEmptyArrayStorage;
  v34 = &v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter];
  *(_QWORD *)v34 = 0;
  *((_WORD *)v34 + 4) = 768;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying] = 3;
  v5[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated] = 0;
  v35 = v5;
  ObservationRegistrar.init()(v35);
  *(void (**)(char *, uint64_t))((char *)v35 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore) = a1;
  *(void (**)(char *, uint64_t))((char *)v35
                                         + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_historyDataProvider) = a3;
  v36 = v110;
  *(void (**)(char *, uint64_t))((char *)v35
                                         + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_activityDataProvider) = (void (*)(char *, uint64_t))v110;
  type metadata accessor for TrainingLoadViewModelProvider(0);
  v104 = a1;
  v102 = a3;
  v110 = v36;
  static Date.now.getter();
  v37 = v105;
  v38 = v107;
  (*((void (**)(char *, _QWORD, uint64_t))v105 + 13))(v23, enum case for Calendar.Identifier.gregorian(_:), v107);
  Calendar.init(identifier:)(v23);
  (*((void (**)(char *, uint64_t))v37 + 1))(v23, v38);
  v39 = v120;
  static TrainingLoadViewModelProvider.createDayRange(now:days:gregorianCalendar:)(v27, 28, v25);
  v40 = (void (*)(uint64_t, uint64_t, __n128))*((_QWORD *)v109 + 1);
  v107 = (uint64_t)v25;
  v41 = v121;
  v109 = v40;
  ((void (*)(char *, uint64_t))v40)(v25, v119);
  v106[1](v27, v108);
  v42 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v43 = v112;
  v42((char *)v35 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v39, v41);
  v105 = v42;
  v42(v32, v39, v41);
  v44 = v104;
  v108 = (uint64_t)v32;
  v104 = v44;
  v45 = TrainingLoadViewModelProvider.__allocating_init(dayRange:healthStore:)(v32);
  v106 = v35;
  *(void (**)(char *, uint64_t))((char *)v35
                                         + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_trainingLoadViewModelProvider) = (void (*)(char *, uint64_t))v45;
  swift_retain(v45);
  v46 = v111;
  GregorianDayRange.dayIndexRange.getter(v47);
  v48 = v117;
  v49 = &v46[*(int *)(v117 + 36)];
  v50 = (uint64_t)v46;
  v51 = *(void (**)(char *, uint64_t))(v116 + 16);
  v52 = (uint64_t)v114;
  ((void (*)(char *, char *, char *))v51)(v114, v49, v11);
  v53 = &qword_100823530;
  v54 = sub_10001BE90(v50, &qword_100823530);
  v55 = (uint64_t)v113;
  GregorianDayRange.dayIndexRange.getter(v54);
  ((void (*)(char *, uint64_t, char *))v51)(v43, v55 + *(int *)(v48 + 36), v11);
  sub_10001BE90(v55, &qword_100823530);
  v56 = sub_1000083D8((unint64_t *)&qword_100823548, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
  v57 = v43;
  v58 = v11;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v52, v43, v11, v56) & 1) != 0)
  {
    v59 = v99;
    v60 = (char *)v45;
    v61 = v97;
    v62 = &v97[*(int *)(v99 + 48)];
    v63 = v116;
    v64 = *(void (**)(char *, uint64_t, char *))(v116 + 32);
    v64(v97, v52, v11);
    v64(v62, (uint64_t)v57, v11);
    v65 = *(int *)(v59 + 48);
    v114 = v60;
    v66 = v100;
    v67 = &v100[v65];
    ((void (*)(char *, char *, char *))v51)(v100, v61, v11);
    ((void (*)(char *, char *, char *))v51)(v67, v62, v11);
    v68 = (uint64_t)v98;
    v64(v98, (uint64_t)v66, v11);
    v69 = *(void (**)(char *, char *))(v63 + 8);
    v69(v67, v11);
    v70 = *(int *)(v59 + 48);
    v71 = v121;
    v72 = &v66[v70];
    v64(v66, (uint64_t)v61, v11);
    v64(v72, (uint64_t)v62, v11);
    v64((char *)(v68 + *(int *)(v117 + 36)), (uint64_t)v72, v11);
    v69(v66, v11);
    v73 = v96;
    v74 = sub_100045AD4(v68, v96, &qword_100823530);
    v75 = v107;
    GregorianDayRange.gregorianCalendar.getter(v74);
    v76 = v115;
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)(v73, v75);
    type metadata accessor for SleepingSampleViewModelProvider(0);
    v105((char *)v108, v76, v71);
    v51 = v104;
    v52 = SleepingSampleViewModelProvider.__allocating_init(healthStore:dayRange:debugIdentifier:)();
    v77 = v106;
    *(void (**)(char *, uint64_t))((char *)v106
                                           + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_overnightSleepingSampleViewModelProvider) = (void (*)(char *, uint64_t))v52;
    swift_retain(v52);

    v78 = dispatch thunk of TrainingLoadViewModelProvider.startQuery(isFaking:)(v101 & 1);
    dispatch thunk of SleepingSampleViewModelProvider.startQuery()(v78);
    v79 = (objc_class *)type metadata accessor for BalanceDataProvider(0);
    v124.receiver = v77;
    v124.super_class = v79;
    v80 = (char *)objc_msgSendSuper2(&v124, "init");
    v81 = *(char **)&v80[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_historyDataProvider];
    v55 = swift_allocObject(&unk_10078A1C0, 24, 7);
    swift_unknownObjectWeakInit(v55 + 16, v80);
    v45 = swift_allocObject(&unk_10078A288, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_10017CA38;
    *(_QWORD *)(v45 + 24) = v55;
    v57 = &v81[OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers];
    swift_beginAccess(&v81[OBJC_IVAR___CHHistoryDataProvider_onChangeHandlers], aBlock, 33, 0);
    v11 = *(char **)v57;
    v58 = v80;
    v53 = v81;
    swift_retain_n(v55, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)v57 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v11 = (char *)sub_10004C908(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
  *(_QWORD *)v57 = v11;
LABEL_3:
  v84 = *((_QWORD *)v11 + 2);
  v83 = *((_QWORD *)v11 + 3);
  if (v84 >= v83 >> 1)
  {
    v11 = (char *)sub_10004C908((_QWORD *)(v83 > 1), v84 + 1, 1, v11);
    *(_QWORD *)v57 = v11;
  }
  *((_QWORD *)v11 + 2) = v84 + 1;
  v85 = &v11[16 * v84];
  *((_QWORD *)v85 + 4) = sub_10003BD6C;
  *((_QWORD *)v85 + 5) = v45;
  swift_endAccess(aBlock);
  swift_release_n(v55, 2);

  sub_100174420();
  v86 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v87 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v88 = swift_allocObject(&unk_10078A1C0, 24, 7);
  swift_unknownObjectWeakInit(v88 + 16, v58);
  aBlock[4] = sub_10017CA64;
  v123 = v88;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000398D4;
  aBlock[3] = &unk_10078A2A0;
  v89 = _Block_copy(aBlock);
  v90 = objc_msgSend(v86, "addObserverForName:object:queue:usingBlock:", CFSTR("ActivitySummaryCacheChangedNotification"), 0, v87, v89, swift_release(v123).n128_f64[0]);
  _Block_release(v89);

  swift_unknownObjectRelease(v90);
  sub_100179718();

  swift_release(v52);
  v91 = swift_release(v114);
  v109(v103, v119, v91);
  v92 = *(void (**)(char *, uint64_t))(v118 + 8);
  v93 = v121;
  v92(v115, v121);
  v92(v120, v93);
  return v58;
}

double sub_100173E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double result;
  _BYTE v15[24];

  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_10078A1C0, 24, 7);
  swift_beginAccess(a2, v15, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  swift_unknownObjectWeakInit(v7 + 16, Strong);

  type metadata accessor for MainActor(0);
  swift_retain(v7);
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_10078A300, 40, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v7;
  swift_release(v7);
  v12 = sub_10020DB28((uint64_t)v5, (uint64_t)&unk_1008235B0, (uint64_t)v11);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_100173FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch(sub_100174010, v6, v7);
}

uint64_t sub_100174010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1008234EC);
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = sub_1001740B4;
    return sub_10017890C();
  }
  else
  {
    v5 = swift_release(*(_QWORD *)(v0 + 56));
    **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
}

uint64_t sub_1001740B4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = *(void **)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));

  return swift_task_switch(sub_100174104, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100174104()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100174148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double result;
  _BYTE v15[24];

  v3 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_10078A1C0, 24, 7);
  swift_beginAccess(a2, v15, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  swift_unknownObjectWeakInit(v7 + 16, Strong);

  type metadata accessor for MainActor(0);
  swift_retain(v7);
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_10078A2D8, 40, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v7;
  swift_release(v7);
  v12 = sub_10020DB28((uint64_t)v5, (uint64_t)&unk_1008235A0, (uint64_t)v11);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_100174284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001742F0, v6, v7);
}

uint64_t sub_1001742F0()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    sub_100179718();

  }
  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100174420()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  void *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ObjectType;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t aBlock[5];
  uint64_t v97;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v90 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v89 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  __chkstk_darwin(v4);
  v86 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for DispatchTime(0);
  v83 = *(_QWORD *)(v85 - 8);
  v6 = __chkstk_darwin(v85);
  v82 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v84 = (char *)&v77 - v8;
  v9 = sub_100047110((uint64_t *)&unk_10082E690);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v77 - v13;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v93 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v77 - v19;
  v21 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer];
  v91 = v2;
  v94 = v16;
  if (v21)
  {
    v22 = v21;
    static WOLog.trainingLoad.getter(v22);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    LODWORD(v81) = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, (os_log_type_t)v81))
    {
      v79 = v24;
      v80 = v15;
      v25 = swift_slowAlloc(22, -1);
      v78 = swift_slowAlloc(64, -1);
      aBlock[0] = v78;
      *(_DWORD *)v25 = 136315394;
      v26 = _typeName(_:qualified:)(ObjectType, 0);
      v28 = v27;
      v95 = (_QWORD *)sub_10003E8EC(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, aBlock, v25 + 4);
      *(_QWORD *)&v29 = swift_bridgeObjectRelease(v28).n128_u64[0];
      *(_WORD *)(v25 + 12) = 2080;
      v30 = objc_msgSend(v23, "activationUUID", v29);
      if (v30)
      {
        v31 = v30;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v32 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 0, 1, v32);
      }
      else
      {
        v33 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
      }
      sub_100045AD4((uint64_t)v12, (uint64_t)v14, (uint64_t *)&unk_10082E690);
      v34 = Optional.description.getter(v9);
      v36 = v35;
      sub_10001BE90((uint64_t)v14, (uint64_t *)&unk_10082E690);
      v95 = (_QWORD *)sub_10003E8EC(v34, v36, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, aBlock, v25 + 14);
      swift_bridgeObjectRelease(v36);

      v37 = v79;
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v81, "%s Clearing Old HKWorkoutEffortRelationshipQuery with activation uuid %s", (uint8_t *)v25, 0x16u);
      v38 = v78;
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      v15 = v80;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v20, v80);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    }
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore], "stopQuery:", v23);

  }
  KeyPath = swift_getKeyPath(&unk_100628828);
  aBlock[0] = (uint64_t)v1;
  v40 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, KeyPath, v40);
  swift_release(KeyPath);
  v41 = OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery;
  v42 = *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery];
  v43 = swift_getKeyPath(&unk_100628850);
  aBlock[0] = (uint64_t)v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, v43, v40);
  swift_release(v43);
  if (v42 >= *(_QWORD *)&v1[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying])
  {
    v45 = v93;
    static WOLog.trainingLoad.getter(v44);
    v46 = v1;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v81 = v46;
      v50 = v49;
      v79 = (os_log_t)swift_slowAlloc(32, -1);
      aBlock[0] = (uint64_t)v79;
      *(_DWORD *)v50 = 136315394;
      v51 = _typeName(_:qualified:)(ObjectType, 0);
      v80 = v15;
      v53 = v52;
      v95 = (_QWORD *)sub_10003E8EC(v51, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, aBlock, v50 + 4);
      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v50 + 12) = 2048;
      v54 = swift_getKeyPath(&unk_100628828);
      v95 = v81;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v54, v40);
      swift_release(v54);
      v55 = *(_QWORD **)&v1[v41];

      v95 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, aBlock, v50 + 14);

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s Delaying Retrying Effort relationship query. Retry count %ld ", (uint8_t *)v50, 0x16u);
      v56 = v79;
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      v57 = v50;
      v46 = v81;
      swift_slowDealloc(v57, -1, -1);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v80);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v94 + 8))(v45, v15);
    }
    v58 = swift_getKeyPath(&unk_100628828);
    aBlock[0] = (uint64_t)v46;
    ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, v58, v40);
    swift_release(v58);
    v59 = *(_QWORD *)&v1[v41];
    v60 = (unsigned __int128)(v59 * (__int128)10) >> 64;
    v61 = 10 * v59;
    if (v60 == v61 >> 63)
    {
      if (v61 >= 180)
        v62 = 180;
      else
        v62 = v61;
      sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
      v64 = (void *)static OS_dispatch_queue.main.getter(v63);
      v65 = v82;
      static DispatchTime.now()(v64);
      v66 = v84;
      + infix(_:_:)(v65, (double)v62);
      v94 = *(_QWORD *)(v83 + 8);
      v67 = v85;
      ((void (*)(char *, uint64_t))v94)(v65, v85);
      v68 = swift_allocObject(&unk_10078A1C0, 24, 7);
      swift_unknownObjectWeakInit(v68 + 16, v46);
      aBlock[4] = (uint64_t)sub_10017C9DC;
      v97 = v68;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10002D0F8;
      aBlock[3] = (uint64_t)&unk_10078A250;
      v69 = _Block_copy(aBlock);
      swift_retain(v68);
      v70 = v86;
      static DispatchQoS.unspecified.getter(v71);
      v95 = _swiftEmptyArrayStorage;
      v72 = sub_1000083D8((unint64_t *)&qword_1008268E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v73 = sub_100047110(&qword_100828C80);
      v74 = sub_10002FB08();
      v75 = v89;
      v76 = v91;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v73, v74, v91, v72);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v66, v70, v75, v69);
      _Block_release(v69);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v75, v76);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v70, v88);
      ((void (*)(char *, uint64_t))v94)(v66, v67);
      swift_release(v97);
      swift_release(v68);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100174D60();
  }
}

void sub_100174D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_100174D60();

  }
}

void sub_100174D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  void *v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ObjectType;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t aBlock[5];
  uint64_t v77;
  char v78[32];

  ObjectType = swift_getObjectType(v0);
  v60 = type metadata accessor for Logger(0);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v73 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Calendar(0);
  v70 = *(_QWORD *)(v2 - 8);
  v71 = v2;
  __chkstk_darwin(v2);
  v69 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for DayIndex(0);
  v64 = *(_QWORD *)(v74 - 8);
  v4 = v64;
  __chkstk_darwin(v74);
  v68 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GregorianDayRange(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v67 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v58 - v13;
  v62 = type metadata accessor for Date(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v66 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100628670);
  v65 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
  aBlock[0] = v0;
  v17 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, KeyPath, v17);
  swift_release(KeyPath);
  v18 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v78, 0, 0);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v20 = v19(v14, v18, v9);
  GregorianDayRange.dayIndexRange.getter(v20);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v14, v9);
  v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v23 = v68;
  v22(v68, v8, v74);
  v24 = (uint64_t)v8;
  v25 = v66;
  sub_10001BE90(v24, &qword_100823530);
  v26 = swift_getKeyPath(&unk_100628670);
  v63 = v0;
  aBlock[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, v26, v17);
  v27 = swift_release(v26);
  v28 = v67;
  v29 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v19)(v67, v18, v9, v27);
  v30 = v69;
  GregorianDayRange.gregorianCalendar.getter(v29);
  v21(v28, v9);
  DayIndex.startDate(in:)(v30);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v30, v71);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v23, v74);
  sub_10001E724(0, (unint64_t *)&unk_100827490, NSPredicate_ptr);
  v31 = sub_100047110((uint64_t *)&unk_100827460);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100622F90;
  isa = Date._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v32 + 56) = sub_10001E724(0, (unint64_t *)&qword_100823578, NSDate_ptr);
  *(_QWORD *)(v32 + 64) = sub_10017C7F8();
  *(_QWORD *)(v32 + 32) = isa;
  v34 = (void *)NSPredicate.init(format:_:)(0x7461447472617473, 0xEF4025203D3E2065, v32);
  static WOLog.trainingLoad.getter(v34);
  v35 = v34;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = (_QWORD *)swift_slowAlloc(8, -1);
    v74 = swift_slowAlloc(32, -1);
    aBlock[0] = v74;
    *(_DWORD *)v38 = 136315394;
    v40 = _typeName(_:qualified:)(ObjectType, 0);
    v41 = v25;
    v43 = v42;
    v75 = sub_10003E8EC(v40, v42, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock, v38 + 4);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v38 + 12) = 2112;
    v75 = (uint64_t)v35;
    v44 = v35;
    v25 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock, v38 + 14);
    *v39 = v35;

    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s Starting an HKWorkoutEffortRelationshipQuery with predicate %@", (uint8_t *)v38, 0x16u);
    v45 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v39, 1, v45);
    swift_slowDealloc(v39, -1, -1);
    v46 = v74;
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v73, v60);
  v47 = v63;
  v48 = ObjectType;
  v49 = v62;
  v50 = v61;
  v51 = swift_allocObject(&unk_10078A1C0, 24, 7);
  swift_unknownObjectWeakInit(v51 + 16, v47);
  v52 = swift_allocObject(&unk_10078A1E8, 32, 7);
  *(_QWORD *)(v52 + 16) = v51;
  *(_QWORD *)(v52 + 24) = v48;
  v53 = objc_allocWithZone((Class)HKWorkoutEffortRelationshipQuery);
  aBlock[4] = (uint64_t)sub_10017C898;
  v77 = v52;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10017AD90;
  aBlock[3] = (uint64_t)&unk_10078A200;
  v54 = _Block_copy(aBlock);
  v55 = objc_msgSend(v53, "initWithPredicate:anchor:options:resultsHandler:", v35, 0, 0, v54, swift_retain(v51).n128_f64[0]);
  _Block_release(v54);
  swift_release(v77);
  swift_release(v51);
  v56 = OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer;
  v57 = *(void **)(v47 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer);
  *(_QWORD *)(v47 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer) = v55;

  if (*(_QWORD *)(v47 + v56))
  {
    objc_msgSend(*(id *)(v47 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore), "executeQuery:");

    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v49);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v49);

  }
}

double sub_10017547C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *Strong;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double result;
  _BYTE v24[24];

  v11 = sub_100047110(&qword_10081E650);
  __chkstk_darwin(v11);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a5 += 16;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = swift_allocObject(&unk_10078A1C0, 24, 7);
  swift_beginAccess(a5, v24, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a5);
  swift_unknownObjectWeakInit(v15 + 16, Strong);

  type metadata accessor for MainActor(0);
  swift_errorRetain(a4);
  v17 = a3;
  swift_retain(v15);
  swift_bridgeObjectRetain(a2);
  v19 = static MainActor.shared.getter(v18);
  v20 = (_QWORD *)swift_allocObject(&unk_10078A238, 72, 7);
  v20[2] = v19;
  v20[3] = &protocol witness table for MainActor;
  v20[4] = a4;
  v20[5] = v15;
  v20[6] = a2;
  v20[7] = a3;
  v20[8] = a6;
  swift_release(v15);
  v21 = sub_10020D9C0((uint64_t)v13, (uint64_t)&unk_100823590, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_1001755F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[22] = a7;
  v8[23] = a8;
  v8[20] = a5;
  v8[21] = a6;
  v8[19] = a4;
  v9 = type metadata accessor for Logger(0);
  v8[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[25] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[26] = swift_task_alloc(v11);
  v8[27] = swift_task_alloc(v11);
  v8[28] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v8[29] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v8[30] = v13;
  v8[31] = v14;
  return swift_task_switch(sub_1001756AC, v13, v14);
}

void sub_1001756AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *Strong;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[2];

  v1 = *(_QWORD *)(v0 + 152);
  if (!v1)
  {
    v21 = *(_QWORD *)(v0 + 160) + 16;
    swift_beginAccess(v21, v0 + 16, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v21);
    *(_QWORD *)(v0 + 256) = Strong;
    if (Strong)
    {
      v23 = Strong;
      v24 = *(_QWORD *)(v0 + 168);
      if (v24)
      {
        v25 = static WOLog.trainingLoad.getter(Strong);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter(v26);
        v28 = os_log_type_enabled(v26, v27);
        v29 = *(_QWORD *)(v0 + 216);
        v30 = *(_QWORD *)(v0 + 192);
        v31 = *(_QWORD *)(v0 + 200);
        if (v28)
        {
          v32 = *(_QWORD *)(v0 + 184);
          v74 = *(_QWORD *)(v0 + 216);
          v33 = (uint8_t *)swift_slowAlloc(12, -1);
          v73 = v31;
          v34 = swift_slowAlloc(32, -1);
          v75[0] = v34;
          *(_DWORD *)v33 = 136315138;
          v35 = _typeName(_:qualified:)(v32, 0);
          v37 = v36;
          *(_QWORD *)(v0 + 88) = sub_10003E8EC(v35, v36, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v33 + 4);
          swift_bridgeObjectRelease(v37);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s Effort Association Updated in Fitness successfully", v33, 0xCu);
          swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v34, -1, -1);
          swift_slowDealloc(v33, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v30);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
        }
        KeyPath = swift_getKeyPath(&unk_100628828);
        v68 = swift_task_alloc(32);
        *(_QWORD *)(v68 + 16) = v23;
        *(_QWORD *)(v68 + 24) = 0;
        *(_QWORD *)(v0 + 96) = v23;
        v69 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 96, KeyPath, sub_10017C9A0, v68, (char *)&type metadata for () + 8, v69);
        swift_release(KeyPath);
        swift_task_dealloc(v68);
        v70 = (_QWORD *)swift_task_alloc(dword_1008234E4);
        *(_QWORD *)(v0 + 264) = v70;
        *v70 = v0;
        v70[1] = sub_100175E1C;
        sub_100175EBC(v24, *(_QWORD *)(v0 + 176));
        return;
      }

    }
    swift_release(*(_QWORD *)(v0 + 232));
    v52 = static WOLog.trainingLoad.getter(v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter(v53);
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 208);
    v58 = *(_QWORD *)(v0 + 192);
    if (v55)
    {
      v59 = *(_QWORD *)(v0 + 184);
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v75[0] = v61;
      *(_DWORD *)v60 = 136315138;
      v62 = _typeName(_:qualified:)(v59, 0);
      v64 = v63;
      *(_QWORD *)(v0 + 128) = sub_10003E8EC(v62, v63, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v60 + 4);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s Effort Association Updated in Fitness, relationships or self is nil. Exiting without updating efforts", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
    goto LABEL_20;
  }
  v2 = v0 + 64;
  v3 = *(_QWORD *)(v0 + 232);
  swift_errorRetain(*(_QWORD *)(v0 + 152));
  swift_release(v3);
  static WOLog.trainingLoad.getter(v4);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  if (v8)
  {
    v12 = *(_QWORD *)(v0 + 184);
    v72 = *(_QWORD *)(v0 + 200);
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v71 = swift_slowAlloc(32, -1);
    v75[0] = v71;
    *(_DWORD *)v13 = 136315394;
    v15 = _typeName(_:qualified:)(v12, 0);
    v17 = v16;
    *(_QWORD *)(v0 + 136) = sub_10003E8EC(v15, v16, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 4);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v1);
    v18 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 144) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 14);
    *v14 = v18;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Effort Association Updated in Fitness with error: %@. Re-establishing query", (uint8_t *)v13, 0x16u);
    v19 = sub_100047110(&qword_10081E648);
    swift_arrayDestroy(v14, 1, v19);
    v20 = v14;
    v2 = v0 + 64;
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v9, v10);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v38 = *(_QWORD *)(v0 + 160) + 16;
  swift_beginAccess(v38, v2, 0, 0);
  v39 = swift_unknownObjectWeakLoadStrong(v38);
  if (!v39)
    goto LABEL_12;
  v40 = (char *)v39;
  v41 = swift_getKeyPath(&unk_100628828);
  *(_QWORD *)(v0 + 104) = v40;
  v42 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 104, v41, v42);
  swift_release(v41);
  *(_QWORD *)(v0 + 112) = v40;
  v43 = swift_getKeyPath(&unk_100628828);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 112, v43, v42);
  swift_release(v43);
  v44 = *(_QWORD *)&v40[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery];
  v45 = __OFADD__(v44, 1);
  v46 = v44 + 1;
  if (!v45)
  {
    *(_QWORD *)&v40[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery] = v46;
    *(_QWORD *)(v0 + 120) = v40;
    v47 = swift_getKeyPath(&unk_100628828);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 120, v47, v42);

    swift_release(v47);
LABEL_12:
    v48 = *(_QWORD *)(v0 + 160) + 16;
    swift_beginAccess(v48, v0 + 40, 0, 0);
    v49 = swift_unknownObjectWeakLoadStrong(v48);
    if (v49)
    {
      v50 = (void *)v49;
      sub_100174420();
      swift_errorRelease(v1);

    }
    else
    {
      swift_errorRelease(v1);
    }
LABEL_20:
    v65 = *(_QWORD *)(v0 + 216);
    v66 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
}

uint64_t sub_100175E1C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 264));
  return swift_task_switch(sub_100175E68, *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248));
}

uint64_t sub_100175E68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 232));

  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100175EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v3[20] = swift_getObjectType(v2);
  v4 = type metadata accessor for Logger(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v3[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[25] = v7;
  v3[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v3[27] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100175FBC, v9, v10);
}

uint64_t sub_100175FBC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  id v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  char **v56;
  _UNKNOWN **v57;
  char *v58;
  id v60;
  id v61;
  id v62;
  double v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  void *v82;
  __n128 v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t *v121;
  _QWORD *v122;
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;

  v3 = (_QWORD *)v0[26];
  v4 = (_QWORD *)v0[24];
  v5 = v0[25];
  swift_release(v0[27]);
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *v3 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v4);
  v7 = _dispatchPreconditionTest(_:)(v3);
  v8 = (char *)(*(uint64_t (**)(_QWORD *, _QWORD *))(v5 + 8))(v3, v4);
  if ((v7 & 1) == 0)
    goto LABEL_66;
  v9 = v0[18];
  v10 = v0[19];
  KeyPath = swift_getKeyPath(&unk_1006287D8);
  v0[8] = v10;
  v124 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 8, KeyPath, v124);
  swift_release(KeyPath);
  v13 = OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor;
  v14 = *(void **)(v10 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  v125 = v0;
  if (!v9)
  {
    if (!v14)
      goto LABEL_62;
    goto LABEL_7;
  }
  if (!v14
    || (v15 = (void *)v0[18],
        sub_10001E724(0, &qword_100823570, HKQueryAnchor_ptr),
        v16 = v14,
        v17 = v15,
        v18 = static NSObject.== infix(_:_:)(v17, v16),
        v17,
        v16,
        (v18 & 1) == 0))
  {
LABEL_7:
    v19 = (void *)v0[18];
    v20 = (void *)v0[19];
    static WOLog.trainingLoad.getter(v12);
    v21 = v19;
    v22 = v20;
    v23 = v21;
    v24 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v119 = v25;
      v26 = v0[20];
      v113 = v0[19];
      v27 = swift_slowAlloc(32, -1);
      v115 = (_QWORD *)swift_slowAlloc(16, -1);
      v117 = swift_slowAlloc(32, -1);
      v126 = v117;
      *(_DWORD *)v27 = 136315650;
      v28 = _typeName(_:qualified:)(v26, 0);
      v30 = v29;
      v0[11] = sub_10003E8EC(v28, v29, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v27 + 4);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v27 + 12) = 2112;
      v31 = swift_getKeyPath(&unk_1006287D8);
      v0[12] = v113;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 12, v31, v124);
      swift_release(v31);
      v32 = *(void **)(v10 + v13);
      if (v32)
      {
        v0[16] = v32;
        v33 = v32;
        v34 = v0 + 16;
        v35 = v0 + 17;
      }
      else
      {
        v34 = v0 + 13;
        v0[13] = 0;
        v35 = v0 + 14;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v27 + 14);
      v40 = v0 + 5;
      v41 = (void *)v0[19];
      *v115 = v32;

      *(_WORD *)(v27 + 22) = 2112;
      if (v9)
      {
        v0[15] = v23;
        v42 = v23;
        v43 = v0 + 15;
        v44 = v0 + 16;
      }
      else
      {
        v43 = v0 + 14;
        v0[14] = 0;
        v44 = v0 + 15;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v44, v27 + 24);
      v45 = v0[22];
      v46 = v0[23];
      v47 = v0[21];
      v115[1] = v0[18];

      _os_log_impl((void *)&_mh_execute_header, v24, v119, "%s Effort Association Anchor updated from %@ to %@, updating efforts.", (uint8_t *)v27, 0x20u);
      v48 = sub_100047110(&qword_10081E648);
      swift_arrayDestroy(v115, 2, v48);
      swift_slowDealloc(v115, -1, -1);
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
    }
    else
    {
      v37 = v0[22];
      v36 = v0[23];
      v38 = v0[21];
      v39 = (void *)v0[19];

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      v40 = v0 + 5;
    }
    v50 = v0[18];
    v49 = v0[19];
    v2 = v0[17];
    v51 = swift_getKeyPath(&unk_1006287D8);
    v52 = swift_task_alloc(32);
    *(_QWORD *)(v52 + 16) = v49;
    *(_QWORD *)(v52 + 24) = v50;
    v0[5] = v49;
    v53 = v23;
    v1 = (unint64_t)&type metadata for ();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, v51, sub_10017C758, v52, (char *)&type metadata for () + 8, v124);
    v109 = 0;
    swift_release(v51);

    swift_task_dealloc(v52);
    v8 = (char *)v0[17];
    v4 = v0;
    if (v2 >> 62)
      goto LABEL_67;
    v54 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v8);
    if (!v54)
    {
LABEL_61:
      v103 = v4[19];
      swift_bridgeObjectRelease(v8);
      v104 = swift_getKeyPath(&unk_100628800);
      v105 = swift_task_alloc(32);
      *(_QWORD *)(v105 + 16) = v103;
      *(_BYTE *)(v105 + 24) = 1;
      v4[10] = v103;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v4 + 10, v104, sub_10017C7A4, v105, v1 + 8, v124);
      v0 = v125;
      swift_release(v104);
      swift_task_dealloc(v105);
      goto LABEL_62;
    }
LABEL_18:
    v1 = 0;
    v116 = v4 + 7;
    v118 = v4 + 6;
    v121 = (uint64_t *)(v4[19] + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
    v122 = v4 + 2;
    v55 = v2 & 0xC000000000000001;
    v110 = v8 + 32;
    v111 = v2 & 0xFFFFFFFFFFFFFF8;
    v56 = &selRef_systemBlueColor;
    v57 = &FIUIDistanceTypeForActivityType_ptr;
    v120 = v54;
    v112 = v2 & 0xC000000000000001;
    v114 = v4 + 9;
    while (1)
    {
      while (1)
      {
        if (v55)
        {
          v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v4[17]);
        }
        else
        {
          if (v1 >= *(_QWORD *)(v111 + 16))
            goto LABEL_64;
          v8 = (char *)*(id *)&v110[8 * v1];
        }
        v58 = v8;
        if (__OFADD__(v1++, 1))
        {
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          if ((uint64_t)v8 < 0)
            v108 = (uint64_t)v8;
          else
            v108 = v2 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v54 = _CocoaArrayWrapper.endIndex.getter(v108);
          v8 = (char *)v4[17];
          if (!v54)
            goto LABEL_61;
          goto LABEL_18;
        }
        v60 = objc_msgSend(v8, v56[157]);
        v61 = objc_msgSend(v60, "workoutActivityType");

        if (v61 != (id)84)
          break;

        if (v1 == v54)
          goto LABEL_60;
      }
      v62 = objc_msgSend(v58, "samples");
      v123 = v58;
      if (v62)
        break;
      v77 = _swiftEmptyArrayStorage;
LABEL_48:
      v79 = objc_msgSend(v58, v56[157], v63, v109);
      v80 = objc_msgSend(v58, "activity");
      type metadata accessor for EffortUtilities(0, v81);
      v82 = (void *)static EffortUtilities.effortSampleCollection(for:)(v77);
      v83 = swift_bridgeObjectRelease(v77);
      v84 = (void *)dispatch thunk of EffortSampleCollection.preferredSample.getter(v83);

      if (v84)
      {
        v2 = (unint64_t)objc_msgSend(v84, "quantity");

      }
      else
      {
        v2 = 1;
      }
      v85 = v125[19];
      v86 = swift_getKeyPath(&unk_1006287B0);
      v125[6] = v85;
      v87 = v79;
      v88 = v80;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v118, v86, v124);
      swift_release(v86);
      v125[7] = v85;
      v4 = v125;
      v89 = swift_getKeyPath(&unk_1006287B0);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(v116, v89, v124);
      swift_release(v89);
      swift_beginAccess(v121, v122, 33, 0);
      v90 = *v121;
      if (v2 == 1)
      {
        swift_bridgeObjectRetain(*v121);
        v91 = sub_10043960C(v87, v80);
        v93 = v92;
        swift_bridgeObjectRelease(v90);
        v54 = v120;
        if ((v93 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v121);
          v95 = *v121;
          v126 = *v121;
          *v121 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1004011CC();
            v95 = v126;
          }
          v96 = *(_QWORD *)(v95 + 48) + 16 * v91;
          v97 = *(void **)(v96 + 8);

          v2 = *(_QWORD *)(*(_QWORD *)(v95 + 56) + 8 * v91);
          sub_1004D195C(v91, v95);
          v98 = *v121;
          *v121 = v95;

          swift_bridgeObjectRelease(v98);
          v4 = v125;
        }
        else
        {

          v2 = 1;
        }
        v57 = &FIUIDistanceTypeForActivityType_ptr;
        sub_10017C76C((id)v2);
      }
      else
      {
        v99 = swift_isUniquelyReferenced_nonNull_native(*v121);
        v126 = *v121;
        *v121 = 0x8000000000000000;
        sub_1003FEC4C(v2, v87, v80, v99);
        v100 = *v121;
        *v121 = v126;

        swift_bridgeObjectRelease(v100);
        v54 = v120;
        v57 = &FIUIDistanceTypeForActivityType_ptr;
      }
      v101 = v4[19];
      swift_endAccess(v122);
      v4[9] = v101;
      v102 = swift_getKeyPath(&unk_1006287B0);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v114, v102, v124);

      swift_release(v102);
      v55 = v112;
      v56 = &selRef_systemBlueColor;
      if (v1 == v54)
      {
LABEL_60:
        v8 = (char *)v4[17];
        v1 = (unint64_t)&type metadata for ();
        goto LABEL_61;
      }
    }
    v64 = v62;
    v65 = sub_10001E724(0, &qword_100823568, HKSample_ptr);
    v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v65);

    v126 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v66 >> 62)
    {
      if (v66 < 0)
        v78 = v66;
      else
        v78 = v66 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v66);
      v8 = (char *)_CocoaArrayWrapper.endIndex.getter(v78);
      v67 = (uint64_t)v8;
      if (v8)
        goto LABEL_29;
    }
    else
    {
      v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v66);
      if (v67)
      {
LABEL_29:
        if (v67 < 1)
          goto LABEL_65;
        for (i = 0; i != v67; ++i)
        {
          if ((v66 & 0xC000000000000001) != 0)
            v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v66);
          else
            v69 = *(id *)(v66 + 8 * i + 32);
          v70 = v69;
          v71 = objc_opt_self(v57[269]);
          v72 = swift_dynamicCastObjCClass(v70, v71);
          if (v72)
          {
            v73 = v72;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
            v75 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v74 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v75 >= v74 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
            v76 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v73);
            specialized Array._endMutation()(v76);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease(v66);
        v77 = (_QWORD *)v126;
        v56 = &selRef_systemBlueColor;
        v58 = v123;
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease(v66);
    v77 = _swiftEmptyArrayStorage;
LABEL_47:
    *(_QWORD *)&v63 = swift_bridgeObjectRelease(v66).n128_u64[0];
    goto LABEL_48;
  }
LABEL_62:
  v106 = v0[23];
  swift_task_dealloc(v0[26]);
  swift_task_dealloc(v106);
  return ((uint64_t (*)(void))v0[1])();
}

void *sub_100176A88(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  id v17;
  _QWORD v19[3];

  KeyPath = swift_getKeyPath(&unk_1006287B0);
  v19[0] = v2;
  v6 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  v7 = a1;
  v8 = a2;
  v9 = v7;
  v10 = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v6);
  swift_release(KeyPath);
  v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess(v11, v19, 0, 0);
  v12 = *v11;
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain(v12);
  if (v13 && (v14 = sub_10043960C(v9, a2), (v15 & 1) != 0))
  {
    v16 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v14);
    v17 = v16;
  }
  else
  {
    v16 = 0;
  }
  swift_bridgeObjectRelease(v12);

  return v16;
}

uint64_t sub_100176BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t result;
  uint64_t v51;
  __n128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  BOOL v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t (*v80)(char *, uint64_t, uint64_t, __n128);
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ViewModelProvider;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[4];

  v78 = type metadata accessor for Calendar.Identifier(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (char *)&v75 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100047110(&qword_100823520);
  __chkstk_darwin(v2);
  v84 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v83 = (char *)&v75 - v5;
  v98 = type metadata accessor for Calendar(0);
  ViewModelProvider = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v97 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DayIndex(0);
  v92 = *(_QWORD *)(v7 - 8);
  v93 = v7;
  __chkstk_darwin(v7);
  v91 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v87);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GregorianDayRange(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  __chkstk_darwin(v11);
  v89 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v75 - v16;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v94 = v18;
  v95 = v19;
  __chkstk_darwin(v18);
  v88 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v90 = (char *)&v75 - v22;
  Date.init()(v23);
  KeyPath = swift_getKeyPath(&unk_100628670);
  v100 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
  v102[0] = v0;
  v25 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v102, KeyPath, v25);
  swift_release(KeyPath);
  v26 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v102, 0, 0);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v99 = v13;
  v28 = v27(v17, v26, v13);
  GregorianDayRange.dayIndexRange.getter(v28);
  v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v75 = v17;
  v29(v17, v13);
  v30 = &v10[*(int *)(v87 + 36)];
  v32 = v91;
  v31 = v92;
  v33 = v93;
  v79 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  v79(v91, v30, v93);
  v82 = v10;
  sub_10001BE90((uint64_t)v10, &qword_100823530);
  v34 = swift_getKeyPath(&unk_100628670);
  v86 = v25;
  v87 = v0;
  v101 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v101, v34, v25);
  v35 = swift_release(v34);
  v36 = v89;
  v81 = v26;
  v37 = v26;
  v38 = v99;
  v80 = (uint64_t (*)(char *, uint64_t, uint64_t, __n128))v27;
  v39 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v27)(v89, v37, v99, v35);
  v40 = v97;
  GregorianDayRange.gregorianCalendar.getter(v39);
  v41 = v36;
  v85 = v29;
  v29(v36, v38);
  v42 = v31;
  v43 = v88;
  DayIndex.startDate(in:)(v40);
  v44 = *(void (**)(char *, uint64_t))(ViewModelProvider + 8);
  v44(v40, v98);
  v45 = v94;
  v46 = v33;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v33);
  v47 = v90;
  LOBYTE(v32) = Date.isSameDay(as:)(v43);
  v48 = *(void (**)(char *, uint64_t))(v95 + 8);
  v48(v43, v45);
  v49 = v47;
  result = ((uint64_t (*)(char *, uint64_t))v48)(v47, v45);
  if ((v32 & 1) == 0)
  {
    ViewModelProvider = type metadata accessor for TrainingLoadViewModelProvider(0);
    v51 = swift_getKeyPath(&unk_100628670);
    v101 = v87;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v101, v51, v86);
    v52 = swift_release(v51);
    v53 = v41;
    v54 = v99;
    v55 = v80(v41, v81, v99, v52);
    v56 = (uint64_t)v82;
    GregorianDayRange.dayIndexRange.getter(v55);
    v85(v53, v54);
    v57 = (uint64_t)v83;
    v58 = v46;
    v79(v83, (char *)v56, v46);
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
    v59(v57, 0, 1, v46);
    v60 = (uint64_t)v84;
    v59((uint64_t)v84, 1, 1, v58);
    v61 = sub_10036E2E0(v57, v60);
    sub_10001BE90(v60, &qword_100823520);
    sub_10001BE90(v57, &qword_100823520);
    result = sub_10001BE90(v56, &qword_100823530);
    v63 = __OFSUB__(v61, 1);
    v64 = v61 - 1;
    if (v63)
    {
      __break(1u);
    }
    else
    {
      v65 = v49;
      static Date.now.getter(v62);
      v66 = v77;
      v67 = v76;
      v68 = v78;
      (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for Calendar.Identifier.gregorian(_:), v78);
      v69 = v97;
      Calendar.init(identifier:)(v67);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
      v70 = v75;
      static TrainingLoadViewModelProvider.createDayRange(now:days:gregorianCalendar:)(v65, v64, v69);
      v44(v69, v98);
      v48(v65, v45);
      v71 = swift_getKeyPath(&unk_100628670);
      __chkstk_darwin(v71);
      v72 = v86;
      v73 = v87;
      *(&v75 - 2) = (char *)v87;
      *(&v75 - 1) = v70;
      v101 = v73;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v101, v71, sub_10017CB74, &v75 - 4, (char *)&type metadata for () + 8, v72);
      v74 = swift_release(v71);
      return ((uint64_t (*)(char *, uint64_t, __n128))v85)(v70, v54, v74);
    }
  }
  return result;
}

uint64_t sub_100177258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ViewModel;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, __n128);
  uint64_t KeyPath;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v3);
  v75 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100047110(&qword_100823560);
  v5 = __chkstk_darwin(v72);
  v64 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v69 = (char *)&v63 - v7;
  v8 = type metadata accessor for DayIndex(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v63 - v13;
  v15 = sub_100047110(&qword_100823530);
  v16 = __chkstk_darwin(v15);
  v68 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v63 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v63 - v22;
  __chkstk_darwin(v21);
  v65 = (uint64_t)&v63 - v24;
  v25 = type metadata accessor for GregorianDayRange(0);
  v26 = __chkstk_darwin(v25);
  v71 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v63 - v28;
  v76 = v1;
  v73 = v31;
  v74 = v30;
  v70 = *(void (**)(char *, uint64_t))(v31 + 16);
  v70((char *)&v63 - v28, a1);
  ViewModel = dispatch thunk of TrainingLoadViewModelProvider.dayRange.setter(v29);
  GregorianDayRange.dayIndexRange.getter(ViewModel);
  v33 = &v23[*(int *)(v15 + 36)];
  v67 = v9;
  v34 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v34(v14, v33, v8);
  v35 = sub_10001BE90((uint64_t)v23, &qword_100823530);
  v77 = a1;
  GregorianDayRange.dayIndexRange.getter(v35);
  v66 = v15;
  v36 = *(int *)(v15 + 36);
  v37 = v12;
  v34(v12, &v20[v36], v8);
  sub_10001BE90((uint64_t)v20, &qword_100823530);
  v38 = sub_1000083D8((unint64_t *)&qword_100823548, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v14, v12, v8, v38);
  if ((result & 1) != 0)
  {
    v40 = v72;
    v41 = v69;
    v42 = &v69[*(int *)(v72 + 48)];
    v43 = v64;
    v63 = v29;
    v44 = v67;
    v45 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v45(v69, v14, v8);
    v45(v42, v37, v8);
    v46 = &v43[*(int *)(v40 + 48)];
    v34(v43, v41, v8);
    v34(v46, v42, v8);
    v47 = (uint64_t)v68;
    v45(v68, v43, v8);
    v48 = *(void (**)(char *, uint64_t))(v44 + 8);
    v49 = v63;
    v48(v46, v8);
    v50 = &v43[*(int *)(v40 + 48)];
    v45(v43, v41, v8);
    v45(v50, v42, v8);
    v45((char *)(v47 + *(int *)(v66 + 36)), v50, v8);
    v48(v43, v8);
    v51 = v65;
    v52 = sub_100045AD4(v47, v65, &qword_100823530);
    v53 = v75;
    v54 = v77;
    GregorianDayRange.gregorianCalendar.getter(v52);
    v55 = v71;
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)(v51, v53);
    v56 = v76;
    v57 = v74;
    v58 = (void (*)(char *, uint64_t, uint64_t, __n128))v70;
    ((void (*)(char *, char *, uint64_t))v70)(v49, v55, v74);
    dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter(v49);
    KeyPath = swift_getKeyPath(&unk_100628788);
    v78 = v56;
    v60 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, KeyPath, v60);
    v61 = swift_release(KeyPath);
    v62 = *(_QWORD *)(v56
                    + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
    if (v62)
    {
      v58(v49, v54, v57, v61);
      swift_retain(v62);
      dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter(v49);
      swift_release(v62);
    }
    sub_100179718();
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v55, v57);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10017774C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t View;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;

  v88 = a2;
  v89 = a3;
  v4 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v4);
  v92 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100047110(&qword_100823560);
  __chkstk_darwin(v100);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v99 = (char *)&v82 - v9;
  v10 = type metadata accessor for DayIndex(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v82 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v82 - v18;
  v20 = type metadata accessor for GregorianDayRange(0);
  v86 = *(_QWORD *)(v20 - 8);
  v87 = v20;
  __chkstk_darwin(v20);
  v85 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v84 = (char *)&v82 - v23;
  __chkstk_darwin(v24);
  v93 = (char *)&v82 - v25;
  v26 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v26);
  v90 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v82 - v29;
  __chkstk_darwin(v31);
  v97 = (uint64_t)&v82 - v32;
  __chkstk_darwin(v33);
  v98 = (uint64_t)&v82 - v34;
  v36 = GregorianDayRange.dayIndexRange.getter(v35);
  GregorianDayRange.dayIndexRange.getter(v36);
  v37 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v37(v16, v30, v10);
  sub_10001BE90((uint64_t)v30, &qword_100823530);
  DayIndex.init(integerLiteral:)(1);
  static DayIndex.+ infix(_:_:)(v16, v13);
  v91 = v11;
  v38 = *(void (**)(char *, uint64_t))(v11 + 8);
  v38(v13, v10);
  v95 = v38;
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v16, v10);
  v101 = a1;
  GregorianDayRange.dayIndexRange.getter(v39);
  v96 = v26;
  v40 = &v30[*(int *)(v26 + 36)];
  v94 = v37;
  v37(v16, v40, v10);
  v83 = v30;
  sub_10001BE90((uint64_t)v30, &qword_100823530);
  v41 = sub_1000083D8((unint64_t *)&qword_100823548, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
  v102 = v19;
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v19, v16, v10, v41);
  if ((result & 1) != 0)
  {
    v43 = v99;
    v44 = v100;
    v45 = &v99[*(int *)(v100 + 48)];
    v46 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
    v46(v99, v102, v10);
    v46(v45, v16, v10);
    v47 = &v7[*(int *)(v44 + 48)];
    v91 = v41;
    v48 = v94;
    v94(v7, v43, v10);
    v48(v47, v45, v10);
    v49 = (uint64_t)v90;
    v46(v90, v7, v10);
    v50 = v95;
    v95(v47, v10);
    v51 = &v7[*(int *)(v44 + 48)];
    v46(v7, v43, v10);
    v46(v51, v45, v10);
    v52 = v96;
    v46((char *)(v49 + *(int *)(v96 + 36)), v51, v10);
    v50(v7, v10);
    v53 = v97;
    v54 = sub_100045AD4(v49, v97, &qword_100823530);
    v55 = v92;
    GregorianDayRange.gregorianCalendar.getter(v54);
    v56 = v93;
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)(v53, v55);
    DayIndex.init(integerLiteral:)(1);
    v57 = v102;
    v58 = v98;
    static DayIndex.+ infix(_:_:)(v98, v16);
    v50(v16, v10);
    v59 = v58 + *(int *)(v52 + 36);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v57, v59, v10, v91);
    if ((result & 1) != 0)
    {
      v61 = v99;
      v60 = v100;
      v62 = &v99[*(int *)(v100 + 48)];
      v46(v99, v102, v10);
      v63 = v94;
      v94(v62, (char *)v59, v10);
      v64 = &v7[*(int *)(v60 + 48)];
      v63(v7, v61, v10);
      v63(v64, v62, v10);
      v65 = (uint64_t)v83;
      v46(v83, v7, v10);
      v66 = v64;
      v67 = v95;
      v95(v66, v10);
      v68 = &v7[*(int *)(v60 + 48)];
      v46(v7, v61, v10);
      v46(v68, v62, v10);
      v46((char *)(v65 + *(int *)(v96 + 36)), v68, v10);
      v67(v7, v10);
      v69 = v56;
      v70 = v97;
      v71 = sub_100045AD4(v65, v97, &qword_100823530);
      __chkstk_darwin(v71);
      v72 = v101;
      *(&v82 - 2) = v101;
      sub_100368F80((void (*)(char *))sub_10017CB4C, (uint64_t)(&v82 - 4));
      v74 = v73;
      v76 = v86;
      v75 = v87;
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
      v78 = v84;
      v77(v84, v72, v87);
      v79 = v85;
      v80 = ((uint64_t (*)(char *, char *, uint64_t))v77)(v85, v69, v75);
      View = TrainingLoadViewModel.chartPoints.getter(v80);
      TrainingLoadChart.Configuration.init(dayRangeOfData:viewPortDayRange:points:keyDates:)(v78, v79, View, v74);
      sub_10001BE90(v70, &qword_100823530);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v69, v75);
      return sub_10001BE90(v98, &qword_100823530);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100177DB8@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;

  v83 = a2;
  v3 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v3);
  v86 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100047110(&qword_100823560);
  __chkstk_darwin(v94);
  v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v93 = (char *)&v78 - v8;
  v9 = type metadata accessor for DayIndex(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v78 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v78 - v17;
  v19 = type metadata accessor for GregorianDayRange(0);
  v81 = *(_QWORD *)(v19 - 8);
  v82 = v19;
  __chkstk_darwin(v19);
  v80 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v79 = (char *)&v78 - v22;
  __chkstk_darwin(v23);
  v87 = (char *)&v78 - v24;
  v25 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v25);
  v84 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v78 - v28;
  __chkstk_darwin(v30);
  v91 = (uint64_t)&v78 - v31;
  __chkstk_darwin(v32);
  v92 = (uint64_t)&v78 - v33;
  v35 = GregorianDayRange.dayIndexRange.getter(v34);
  GregorianDayRange.dayIndexRange.getter(v35);
  v36 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v36(v15, v29, v9);
  sub_10001BE90((uint64_t)v29, &qword_100823530);
  DayIndex.init(integerLiteral:)(1);
  static DayIndex.+ infix(_:_:)(v15, v12);
  v85 = v10;
  v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v12, v9);
  v89 = v37;
  v38 = ((uint64_t (*)(char *, uint64_t))v37)(v15, v9);
  v95 = a1;
  GregorianDayRange.dayIndexRange.getter(v38);
  v90 = v25;
  v39 = &v29[*(int *)(v25 + 36)];
  v88 = v36;
  v36(v15, v39, v9);
  v78 = v29;
  sub_10001BE90((uint64_t)v29, &qword_100823530);
  v40 = sub_1000083D8((unint64_t *)&qword_100823548, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
  v96 = v18;
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v18, v15, v9, v40);
  if ((result & 1) != 0)
  {
    v42 = v93;
    v43 = v94;
    v44 = &v93[*(int *)(v94 + 48)];
    v45 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
    v45(v93, v96, v9);
    v45(v44, v15, v9);
    v46 = &v6[*(int *)(v43 + 48)];
    v85 = v40;
    v47 = v88;
    v88(v6, v42, v9);
    v47(v46, v44, v9);
    v48 = (uint64_t)v84;
    v45(v84, v6, v9);
    v49 = v89;
    v89(v46, v9);
    v50 = &v6[*(int *)(v43 + 48)];
    v45(v6, v42, v9);
    v45(v50, v44, v9);
    v51 = v90;
    v45((char *)(v48 + *(int *)(v90 + 36)), v50, v9);
    v49(v6, v9);
    v52 = v91;
    v53 = sub_100045AD4(v48, v91, &qword_100823530);
    v54 = v86;
    GregorianDayRange.gregorianCalendar.getter(v53);
    v55 = v87;
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)(v52, v54);
    DayIndex.init(integerLiteral:)(1);
    v56 = v96;
    v57 = v92;
    static DayIndex.+ infix(_:_:)(v92, v15);
    v49(v15, v9);
    v58 = v57 + *(int *)(v51 + 36);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v56, v58, v9, v85);
    if ((result & 1) != 0)
    {
      v60 = v93;
      v59 = v94;
      v61 = &v93[*(int *)(v94 + 48)];
      v45(v93, v96, v9);
      v62 = v88;
      v88(v61, (char *)v58, v9);
      v63 = &v6[*(int *)(v59 + 48)];
      v62(v6, v60, v9);
      v62(v63, v61, v9);
      v64 = (uint64_t)v78;
      v45(v78, v6, v9);
      v65 = v89;
      v89(v63, v9);
      v66 = &v6[*(int *)(v59 + 48)];
      v45(v6, v60, v9);
      v45(v66, v61, v9);
      v45((char *)(v64 + *(int *)(v90 + 36)), v66, v9);
      v65(v6, v9);
      v67 = v91;
      v68 = sub_100045AD4(v64, v91, &qword_100823530);
      __chkstk_darwin(v68);
      v69 = v95;
      *(&v78 - 2) = v95;
      sub_100368F80((void (*)(char *))sub_10017C6F8, (uint64_t)(&v78 - 4));
      v71 = v70;
      v73 = v81;
      v72 = v82;
      v74 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      v75 = v55;
      v76 = v79;
      v74(v79, v69, v82);
      v77 = v80;
      v74(v80, v75, v72);
      TrainingLoadChart.Configuration.init(dayRangeOfData:viewPortDayRange:points:keyDates:)(v76, v77, &_swiftEmptyArrayStorage, v71);
      sub_10001BE90(v67, &qword_100823530);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
      return sub_10001BE90(v92, &qword_100823530);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100178418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for Calendar(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GregorianDayRange.gregorianCalendar.getter(v2);
  DayIndex.startDate(in:)(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1001784C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (**v6)(char *, uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  CHWorkoutDetailHeartRateTableViewCell *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v50;
  const char *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint8_t *v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  CHWorkoutDetailHeartRateTableViewCell *v74;
  uint64_t v75;
  uint64_t v76;
  void (**v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v78 = a1;
  v75 = a2;
  v2 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v2 - 8);
  v71 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SleepingSampleDataType(0);
  v6 = *(void (***)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v69 - v10;
  v12 = type metadata accessor for SleepingSampleViewModel(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100047110(&qword_100823550);
  __chkstk_darwin(v16);
  v73 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100171BD4();
  v19 = dispatch thunk of SleepingSampleViewModelProvider.viewModels.getter();
  v20 = v18;
  v21 = v13;
  v22 = swift_release(v20);
  v23 = (CHWorkoutDetailHeartRateTableViewCell *)v19;
  v24 = v75;
  v25 = *(_QWORD *)v23->cellPadding;
  v74 = v23;
  if (v25)
  {
    v69 = v8;
    v72 = v4;
    v26 = (char *)v23 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v76 = *(_QWORD *)(v21 + 72);
    v77 = v6;
    v27 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v21 + 16);
    v28 = swift_bridgeObjectRetain(v23);
    while (1)
    {
      v29 = v21;
      v30 = v27(v15, v26, v12, v28);
      SleepingSampleViewModel.dataType.getter(v30);
      v31 = v12;
      v32 = sub_1000083D8(&qword_100823558, (uint64_t (*)(uint64_t))&type metadata accessor for SleepingSampleDataType, (uint64_t)&protocol conformance descriptor for SleepingSampleDataType);
      dispatch thunk of RawRepresentable.rawValue.getter(&v80, v5, v32);
      dispatch thunk of RawRepresentable.rawValue.getter(&v79, v5, v32);
      v34 = v79;
      v33 = v80;
      v77[1](v11, v5);
      if (v33 == v34)
        break;
      v21 = v29;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v31);
      v26 += v76;
      --v25;
      v12 = v31;
      if (!v25)
      {
        swift_bridgeObjectRelease(v74, v42, v43, v44, v45, v46, v47, v48);
        v24 = v75;
        v4 = v72;
        v6 = v77;
        v8 = v69;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(v74, v35, v36, v37, v38, v39, v40, v41);
    v21 = v29;
    v50 = (uint64_t)v73;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v73, v15, v31);
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v29 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49)(v50, 0, 1, v31);
    v24 = v75;
    v4 = v72;
    v12 = v31;
    v6 = v77;
    v8 = v69;
  }
  else
  {
LABEL_6:
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
    v50 = (uint64_t)v73;
    v49(v73, 1, 1, v12, v22);
  }
  swift_bridgeObjectRelease(v74, v51, v52, v53, v54, v55, v56, v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v50, 1, v12) == 1)
  {
    v58 = sub_10001BE90(v50, &qword_100823550);
    static WOLog.trainingLoad.getter(v58);
    v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v6[2])(v8, v78, v5);
    v60 = v8;
    v61 = Logger.logObject.getter(v59);
    v62 = static os_log_type_t.error.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = v4;
      v64 = v63;
      *(_DWORD *)v63 = 134217984;
      v77 = (void (**)(char *, uint64_t))(v63 + 4);
      v78 = v12;
      v65 = SleepingSampleDataType.rawValue.getter();
      v6[1](v60, v5);
      v80 = v65;
      v12 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v77);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Didn't find sleeping sample view model for data type: %ld", v64, 0xCu);
      v66 = v64;
      v4 = v72;
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      v6[1](v60, v5);
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v4, v71);
    v67 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v24, v50, v12);
    v67 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v24, v67, 1, v12);
}

uint64_t sub_10017890C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[6] = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v1[10] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[11] = v5;
  v1[12] = v6;
  return swift_task_switch(sub_1001789A0, v5, v6);
}

uint64_t sub_1001789A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  char v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = v0[8];
  v1 = (_QWORD *)v0[9];
  v3 = v0[7];
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *v1 = static OS_dispatch_queue.main.getter(v4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  v5 = _dispatchPreconditionTest(_:)(v1);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v1, v3);
  if ((v5 & 1) != 0)
  {
    v7 = (char *)v0[6];
    v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_historyDataProvider];
    if (*(_BYTE *)(v8 + OBJC_IVAR___CHHistoryDataProvider_hasInitialWorkouts) == 1
      && (*(_BYTE *)(v8 + OBJC_IVAR___CHHistoryDataProvider_hasInitialMindfulnessSessions) & 1) != 0
      || *(_BYTE *)(v8 + OBJC_IVAR___CHHistoryDataProvider_shouldForceReload) == 1)
    {
      v9 = objc_msgSend(*(id *)(v8 + OBJC_IVAR___CHHistoryDataProvider_workoutDataProvider), "isRetrying");
      v7 = (char *)v0[6];
    }
    else
    {
      v9 = 1;
    }
    KeyPath = swift_getKeyPath(&unk_100628738);
    v11 = swift_task_alloc(32);
    *(_QWORD *)(v11 + 16) = v7;
    *(_BYTE *)(v11 + 24) = v9;
    v0[13] = OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
    v0[2] = v7;
    v12 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    v0[14] = v12;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2, KeyPath, sub_10017C094, v11, (char *)&type metadata for () + 8, v12);
    swift_release(KeyPath);
    swift_task_dealloc(v11);
    v13 = *(_QWORD *)(v8 + OBJC_IVAR___CHHistoryDataProvider_allHistoryItems);
    v14 = v7;
    swift_bridgeObjectRetain(v13);
    v16 = sub_10017C0AC(v15, (uint64_t)v14);

    v17 = swift_getKeyPath(&unk_100628710);
    v18 = swift_task_alloc(32);
    *(_QWORD *)(v18 + 16) = v14;
    *(_QWORD *)(v18 + 24) = v16;
    v0[3] = v14;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 3, v17, sub_10017AF84, v18, (char *)&type metadata for () + 8, v12);
    v0[15] = 0;
    swift_release(v17);
    swift_bridgeObjectRelease(v16);
    swift_task_dealloc(v18);
    v19 = swift_getKeyPath(&unk_100628710);
    v0[4] = v14;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 4, v19, v12);
    swift_release(v19);
    v20 = *(_QWORD *)&v14[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange];
    v0[16] = v20;
    v21 = dword_1008234F4;
    swift_bridgeObjectRetain(v20);
    v22 = (_QWORD *)swift_task_alloc(v21);
    v0[17] = v22;
    *v22 = v0;
    v22[1] = sub_100178C64;
    return sub_100179478(v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100178C64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100178CB8, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_100178CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  v4 = sub_100178F50();
  KeyPath = swift_getKeyPath(&unk_100628760);
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v0 + 40) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_10017C69C, v6, (char *)&type metadata for () + 8, v1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100178D90(uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23[2];
  _QWORD *v24;

  v19[1] = a2;
  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v19[0] = a3;
    v6 = a3 + 32;
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1000252E0(v6, (uint64_t)v23);
      v8 = a1(v23);
      if (v3)
      {
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v23);
        swift_release(v7);
        swift_bridgeObjectRelease(v19[0]);
        return v7;
      }
      if ((v8 & 1) == 0)
        break;
      sub_10002411C(v23, (uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      v24 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10012176C(0, v7[2] + 1, 1);
        v7 = v24;
      }
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
        sub_10012176C(v10 > 1, v11 + 1, 1);
      v12 = v21;
      v13 = v22;
      v14 = sub_10017C044((uint64_t)v20, v21);
      __chkstk_darwin(v14);
      v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v16);
      sub_1003C5B8C(v11, (uint64_t)v16, (uint64_t *)&v24, v12, v13);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v20);
      v7 = v24;
      v6 += 40;
      if (!--v4)
        goto LABEL_14;
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v23);
LABEL_14:
    swift_bridgeObjectRelease(v19[0]);
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

_QWORD *sub_100178F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[16];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];

  v1 = v0;
  v31 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v31);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for GregorianDayRange(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DayIndex(0);
  v30 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v26 - v13;
  __chkstk_darwin(v12);
  v27 = (char *)&v26 - v15;
  KeyPath = swift_getKeyPath(&unk_100628670);
  v29 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
  v36[0] = v0;
  v28 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v36, KeyPath, v28);
  swift_release(KeyPath);
  v17 = v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v17, v36, 0, 0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, v4);
  GregorianDayRange.dayIndexRange.getter(v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v19 = v30;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v14, &v3[*(int *)(v31 + 36)], v8);
  sub_10001BE90((uint64_t)v3, &qword_100823530);
  DayIndex.init(integerLiteral:)(6);
  v20 = v27;
  static DayIndex.- infix(_:_:)(v14, v11);
  v21 = *(void (**)(char *, uint64_t))(v19 + 8);
  v21(v11, v8);
  v21(v14, v8);
  v22 = swift_getKeyPath(&unk_100628710);
  v35 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v35, v22, v28);
  swift_release(v22);
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange);
  v33 = v20;
  v34 = v1;
  swift_bridgeObjectRetain(v23);
  v24 = sub_100178D90((uint64_t (*)(__int128 *))sub_10017C028, (uint64_t)v32, v23);
  v21(v20, v8);
  return v24;
}

BOOL sub_100179204(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v28 = a3;
  v33 = a2;
  v4 = type metadata accessor for Calendar(0);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for GregorianDayRange(0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v27 - v14;
  v17 = a1[3];
  v16 = a1[4];
  sub_100016804(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v17, v16);
  KeyPath = swift_getKeyPath(&unk_100628670);
  v34[0] = v28;
  v19 = v28;
  v20 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v34, KeyPath, v20);
  swift_release(KeyPath);
  v21 = v19 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess(v19 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v34, 0, 0);
  v22 = v21;
  v23 = v29;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, v29);
  GregorianDayRange.gregorianCalendar.getter(v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  DayIndex.startDate(in:)(v6);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
  sub_1000083D8((unint64_t *)&qword_1008274E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(v23) = dispatch thunk of static Comparable.< infix(_:_:)(v15, v13, v10);
  v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v13, v10);
  v25(v15, v10);
  return (v23 & 1) == 0;
}

uint64_t sub_100179478(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[9] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10017950C, v6, v7);
}

uint64_t sub_10017950C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  sub_10001E724(0, (unint64_t *)&qword_100828710, OS_dispatch_queue_ptr);
  *v1 = static OS_dispatch_queue.main.getter(v4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v2);
  v5 = _dispatchPreconditionTest(_:)(v1);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v1, v2);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    KeyPath = swift_getKeyPath(&unk_1006286E8);
    *(_QWORD *)(v0 + 16) = v8;
    v10 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v10);
    swift_release(KeyPath);
    sub_1003C2258(v7, *(void **)(v8 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter), *(_WORD *)(v8 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter + 8));
    v12 = v11;
    v18 = v11;
    swift_bridgeObjectRetain(v11);
    sub_10017AEF4(&v18);
    v13 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRelease(v12);
    v15 = v18;
    v16 = swift_getKeyPath(&unk_100628710);
    v17 = swift_task_alloc(32);
    *(_QWORD *)(v17 + 16) = v14;
    *(_QWORD *)(v17 + 24) = v15;
    *(_QWORD *)(v0 + 24) = v14;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, v16, sub_10017AF84, v17, (char *)&type metadata for () + 8, v10);
    swift_release(v16);
    swift_release(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100179718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t KeyPath;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t, __n128);
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  int v78;
  uint64_t v79;
  int v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  char *v83;
  char *v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t result;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  char *v102;
  uint64_t v103;
  char *v104;
  __n128 v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  NSDate v111;
  Class isa;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  Class v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  id v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t (*v160)(char *, char *, uint64_t);
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  void (*v179)(char *, uint64_t, uint64_t, uint64_t);
  char *v180;
  _QWORD *v181;
  uint64_t (*v182)(char *, uint64_t, __n128);
  char *v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;

  v144 = sub_100047110(&qword_1008221B0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v154 = (char *)&v141 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100047110(&qword_100821648);
  v2 = __chkstk_darwin(v1);
  v173 = (uint64_t)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v175 = (uint64_t)&v141 - v5;
  __chkstk_darwin(v4);
  v146 = (char *)&v141 - v6;
  v165 = type metadata accessor for Calendar(0);
  v153 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v152 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for Date(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v176 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100047110(&qword_100823510);
  __chkstk_darwin(v164);
  v171 = (uint64_t)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100047110(&qword_100823518);
  __chkstk_darwin(v10);
  v178 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100047110(&qword_100823520);
  v13 = __chkstk_darwin(v12);
  v157 = (uint64_t)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v149 = (char *)&v141 - v16;
  v17 = __chkstk_darwin(v15);
  v158 = (uint64_t)&v141 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v141 - v20;
  v22 = __chkstk_darwin(v19);
  v180 = (char *)&v141 - v23;
  __chkstk_darwin(v22);
  v177 = (char *)&v141 - v24;
  v147 = sub_100047110(&qword_100823528);
  v25 = __chkstk_darwin(v147);
  v172 = (char *)&v141 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v168 = (uint64_t)&v141 - v27;
  v163 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v163);
  v29 = (char *)&v141 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for GregorianDayRange(0);
  v30 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v161 = (char *)&v141 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DayIndex(0);
  v181 = *(_QWORD **)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v183 = (char *)&v141 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v156 = (char *)&v141 - v36;
  v37 = __chkstk_darwin(v35);
  v155 = (char *)&v141 - v38;
  v39 = __chkstk_darwin(v37);
  v142 = (char *)&v141 - v40;
  v41 = __chkstk_darwin(v39);
  v141 = (char *)&v141 - v42;
  __chkstk_darwin(v41);
  v169 = (char *)&v141 - v43;
  v44 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v141 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = static WOLog.trainingLoad.getter(v46);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pulling new activity summaries from the cache", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
  v174 = _swiftEmptyArrayStorage;
  v186 = (unint64_t)_swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_100628670);
  v167 = &v170[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar];
  v185 = v170;
  v54 = v170;
  v166 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v185, KeyPath, v166);
  swift_release(KeyPath);
  v55 = &v54[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange];
  v148 = &v54[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange];
  swift_beginAccess(&v54[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange], &v185, 0, 0);
  v160 = *(uint64_t (**)(char *, char *, uint64_t))(v30 + 16);
  v56 = v161;
  v57 = v162;
  v58 = v160(v161, v55, v162);
  GregorianDayRange.dayIndexRange.getter(v58);
  v159 = *(void (**)(char *, uint64_t))(v30 + 8);
  v159(v56, v57);
  v59 = &v29[*(int *)(v163 + 36)];
  v60 = v181;
  v145 = (void (*)(char *, char *, uint64_t))v181[2];
  v61 = v141;
  v145(v141, v59, v32);
  sub_10001BE90((uint64_t)v29, &qword_100823530);
  v62 = v142;
  DayIndex.init(integerLiteral:)(6);
  static DayIndex.- infix(_:_:)(v61, v62);
  v63 = (uint64_t (*)(char *, uint64_t, __n128))v60[1];
  v182 = v63;
  ((void (*)(char *, uint64_t))v63)(v62, v32);
  ((void (*)(char *, uint64_t))v63)(v61, v32);
  v64 = swift_getKeyPath(&unk_100628670);
  v184 = (uint64_t)v170;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v184, v64, v166);
  v65 = swift_release(v64);
  v66 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v160)(v56, v55, v57, v65);
  GregorianDayRange.dayIndexRange.getter(v66);
  v159(v56, v57);
  v67 = (uint64_t)v172;
  sub_100021CC0((uint64_t)v29, (uint64_t)v172, &qword_100823530);
  v68 = (uint64_t)v177;
  v145(v177, v29, v32);
  v179 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v181[7];
  v179((char *)v68, 0, 1, v32);
  sub_10001BE90((uint64_t)v29, &qword_100823530);
  v69 = v147;
  sub_100045AD4(v68, v67 + *(int *)(v147 + 36), &qword_100823520);
  v70 = v168;
  sub_100045AD4(v67, v168, &qword_100823528);
  v71 = v70 + *(int *)(v69 + 36);
  v147 = OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_activityDataProvider;
  v72 = (uint64_t)v146;
  v172 = v21;
  v177 = (char *)v71;
  while (1)
  {
    v74 = (uint64_t)v180;
    v179(v180, 1, 1, v32);
    v75 = v171;
    v76 = v171 + *(int *)(v164 + 48);
    sub_100021CC0(v71, v171, &qword_100823520);
    sub_100021CC0(v74, v76, &qword_100823520);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v181[6];
    if (v77(v75, 1, v32) == 1)
    {
      v78 = v77(v76, 1, v32);
      v79 = v165;
      if (v78 == 1)
      {
        sub_10001BE90(v75, &qword_100823520);
        sub_10001BE90((uint64_t)v180, &qword_100823520);
LABEL_34:
        v179(v178, 1, 1, v32);
        sub_10001BE90(v168, &qword_100823528);
        v134 = (char *)v186;
        v135 = swift_getKeyPath(&unk_100628698);
        __chkstk_darwin(v135);
        v136 = v170;
        *(&v141 - 2) = v170;
        *(&v141 - 1) = v134;
        v184 = (uint64_t)v136;
        v137 = v166;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v184, v135, sub_10017AE74, &v141 - 4, (char *)&type metadata for () + 8, v166);
        swift_bridgeObjectRelease(v134);
        swift_release(v135);
        v138 = sub_10049843C((unint64_t)v174);
        v139 = swift_getKeyPath(&unk_1006286C0);
        __chkstk_darwin(v139);
        *(&v141 - 2) = v136;
        *(&v141 - 1) = (char *)v138;
        v184 = (uint64_t)v136;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v184, v139, sub_10017AEB8, &v141 - 4, (char *)&type metadata for () + 8, v137);
        swift_bridgeObjectRelease(v138);
        v140 = swift_release(v139);
        return v182(v169, v32, v140);
      }
      goto LABEL_11;
    }
    sub_100021CC0(v75, (uint64_t)v21, &qword_100823520);
    v80 = v77(v76, 1, v32);
    v79 = v165;
    if (v80 == 1)
    {
      ((void (*)(char *, uint64_t))v182)(v21, v32);
LABEL_11:
      sub_10001BE90(v75, &qword_100823510);
      sub_10001BE90((uint64_t)v180, &qword_100823520);
      goto LABEL_13;
    }
    v81 = (void (*)(char *, uint64_t))v182;
    v82 = (void (*)(char *, char *, uint64_t))v181[4];
    v83 = v141;
    v82(v141, v21, v32);
    v84 = v142;
    v82(v142, (char *)v76, v32);
    v85 = sub_1000083D8(&qword_100823538, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
    v86 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v84, v32, v85);
    v81(v84, v32);
    v87 = v83;
    v72 = (uint64_t)v146;
    v81(v87, v32);
    sub_10001BE90(v171, &qword_100823520);
    sub_10001BE90((uint64_t)v180, &qword_100823520);
    if ((v86 & 1) != 0)
      goto LABEL_34;
LABEL_13:
    v88 = (uint64_t)v177;
    v89 = v158;
    sub_100021CC0((uint64_t)v177, v158, &qword_100823520);
    result = v77(v89, 1, v32);
    if ((_DWORD)result == 1)
      break;
    v91 = (void (*)(char *, uint64_t, uint64_t))v181[4];
    v92 = v155;
    v91(v155, v89, v32);
    v91(v178, (uint64_t)v92, v32);
    v93 = v157;
    sub_100021CC0(v88, v157, &qword_100823520);
    result = v77(v93, 1, v32);
    v94 = v156;
    if ((_DWORD)result == 1)
      goto LABEL_36;
    v91(v156, v93, v32);
    v95 = v168 + *(int *)(v163 + 36);
    v96 = sub_1000083D8(&qword_100823538, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
    v97 = dispatch thunk of static Equatable.== infix(_:_:)(v94, v95, v32, v96);
    v98 = (uint64_t)v149;
    if ((v97 & 1) != 0)
    {
      ((void (*)(char *, uint64_t))v182)(v94, v32);
      v99 = 1;
    }
    else
    {
      v184 = 1;
      v100 = sub_1000083D8(&qword_100823540, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
      dispatch thunk of Strideable.advanced(by:)(&v184, v32, v100);
      ((void (*)(char *, uint64_t))v182)(v94, v32);
      v99 = 0;
    }
    v71 = (uint64_t)v177;
    v101 = v179;
    v179((char *)v98, v99, 1, v32);
    sub_10001BE90(v71, &qword_100823520);
    sub_100045AD4(v98, v71, &qword_100823520);
    v102 = v178;
    v101(v178, 0, 1, v32);
    v91(v183, (uint64_t)v102, v32);
    v103 = swift_getKeyPath(&unk_100628670);
    v104 = v170;
    v184 = (uint64_t)v170;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v184, v103, v166);
    v105 = swift_release(v103);
    v106 = v161;
    v107 = v162;
    v108 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v160)(v161, v148, v162, v105);
    v109 = v152;
    GregorianDayRange.gregorianCalendar.getter(v108);
    v159(v106, v107);
    DayIndex.startDate(in:)(v109);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v109, v79);
    v110 = *(_QWORD *)&v104[v147];
    v111.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (qword_10081D548 != -1)
      swift_once(&qword_10081D548, sub_100005A80);
    sub_10003CE9C(v79, (uint64_t)qword_100869D10);
    isa = Calendar._bridgeToObjectiveC()().super.isa;
    v113 = (id)_HKActivityCacheDateComponentsFromDate(v111.super.isa, isa);

    if (v113)
    {
      v114 = v175;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v113);

      v115 = type metadata accessor for DateComponents(0);
      v116 = *(_QWORD *)(v115 - 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v114, 0, 1, v115);
    }
    else
    {
      v115 = type metadata accessor for DateComponents(0);
      v116 = *(_QWORD *)(v115 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v175, 1, 1, v115);
    }
    v117 = (uint64_t)v172;
    sub_100045AD4(v175, v72, &qword_100821648);
    v118 = v173;
    sub_100021CC0(v72, v173, &qword_100821648);
    type metadata accessor for DateComponents(0);
    v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115);
    v120 = 0;
    v21 = (char *)v117;
    if (v119 != 1)
    {
      v121 = v173;
      v120 = DateComponents._bridgeToObjectiveC()().super.isa;
      v122 = v121;
      v21 = v172;
      v72 = (uint64_t)v146;
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v122, v115);
    }
    v123 = _HKCacheIndexFromDateComponents(v120);

    sub_10001BE90(v72, &qword_100821648);
    v124 = objc_msgSend(*(id *)(v110 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache), "activitySummaryForCacheIndex:", v123);
    sub_1000083D8((unint64_t *)&qword_100823548, (uint64_t (*)(uint64_t))&type metadata accessor for DayIndex, (uint64_t)&protocol conformance descriptor for DayIndex);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v183, v169, v32) & 1) == 0)
    {
      v125 = *(int *)(v144 + 48);
      v126 = (uint64_t)v154;
      v145(v154, v183, v32);
      *(_QWORD *)(v126 + v125) = v124;
      v127 = v124;
      if ((swift_isUniquelyReferenced_nonNull_native(v174) & 1) == 0)
        v174 = (_QWORD *)sub_10013FECC(0, v174[2] + 1, 1, (unint64_t)v174);
      v129 = v174[2];
      v128 = v174[3];
      if (v129 >= v128 >> 1)
        v174 = (_QWORD *)sub_10013FECC(v128 > 1, v129 + 1, 1, (unint64_t)v174);
      v130 = v174;
      v174[2] = v129 + 1;
      sub_100045AD4((uint64_t)v154, (uint64_t)v130+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(_QWORD *)(v143 + 72) * v129, &qword_1008221B0);
    }
    if (v124)
    {
      v131 = v124;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v131);
      v133 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v132 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v133 >= v132 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
      v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v133, v131);
      specialized Array._endMutation()(v73);

    }
    (*(void (**)(char *, uint64_t))(v150 + 8))(v176, v151);
    ((void (*)(char *, uint64_t))v182)(v183, v32);
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

id sub_10017A850()
{
  char *v0;
  id v1;
  objc_super v3;

  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer])
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore], "stopQuery:");
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BalanceDataProvider(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_10017AA48()
{
  return type metadata accessor for BalanceDataProvider(0);
}

uint64_t type metadata accessor for BalanceDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1008234D0;
  if (!qword_1008234D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BalanceDataProvider);
  return result;
}

uint64_t sub_10017AAB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[20];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[3] = &unk_100628588;
  v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[6] = &unk_1006285A0;
  result = type metadata accessor for GregorianDayRange(319);
  if (v3 <= 0x3F)
  {
    v5[7] = *(_QWORD *)(result - 8) + 64;
    v5[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[10] = &unk_1006285B8;
    v5[11] = &unk_1006285A0;
    v5[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[15] = &unk_1006285A0;
    v5[16] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[17] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[18] = &unk_100628588;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[19] = *(_QWORD *)(result - 8) + 64;
      return swift_updateClassMetadata2(a1, 256, 20, v5, a1 + 80);
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for BalanceDataProvider.WorkoutAndActivityKey(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for BalanceDataProvider.WorkoutAndActivityKey(id *a1)
{

}

uint64_t assignWithCopy for BalanceDataProvider.WorkoutAndActivityKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for BalanceDataProvider.WorkoutAndActivityKey(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for BalanceDataProvider.WorkoutAndActivityKey()
{
  return &type metadata for BalanceDataProvider.WorkoutAndActivityKey;
}

unint64_t sub_10017ACAC()
{
  unint64_t result;

  result = qword_1008234F8;
  if (!qword_1008234F8)
  {
    result = swift_getWitnessTable(&unk_1006285E8, &type metadata for BalanceDataProvider.WorkoutAndActivityKey);
    atomic_store(result, &qword_1008234F8);
  }
  return result;
}

uint64_t sub_10017ACF0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017AD1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100823504);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000EA380;
  return sub_1001723CC();
}

double sub_10017AD90(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v9;
  void (*v10)(id, uint64_t, void *, void *);
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  double result;

  v7 = a3;
  v10 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v11 = sub_10001E724(0, &qword_100823580, HKWorkoutEffortRelationship_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v11);
  }
  swift_retain(v9);
  v12 = a2;
  v13 = a4;
  v14 = a5;
  v10(v12, v7, a4, a5);
  swift_release(v9);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

double sub_10017AE4C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628698, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries, a2);
}

uint64_t sub_10017AE74()
{
  return sub_10017C6B8(&OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries);
}

double sub_10017AE90@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_1006286C0, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek, a2);
}

uint64_t sub_10017AEB8()
{
  return sub_10017C6B8(&OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek);
}

uint64_t sub_10017AED4()
{
  uint64_t v0;

  return sub_10017208C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10017AEF4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10002E078(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_10017AFA0(v4);
  *a1 = v2;
}

double sub_10017AF5C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628710, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange, a2);
}

uint64_t sub_10017AF84()
{
  return sub_10017C6B8(&OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange);
}

void sub_10017AFA0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char *v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  Swift::Int v126;
  uint64_t v127;
  char *v128;
  Swift::Int v129;
  Swift::Int v130;
  char *v131;
  char *v132;
  Swift::Int v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v144 = type metadata accessor for Date(0);
  v137 = *(_QWORD *)(v144 - 8);
  v2 = __chkstk_darwin(v144);
  v4 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v125 - v5;
  v7 = a1[1];
  v8 = _minimumMergeRunLength(_:)(v7);
  if (v8 >= v7)
  {
    if (v7 < 0)
      goto LABEL_137;
    if (v7)
      sub_10017B974(0, v7, 1, a1);
    return;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_145;
  v126 = v8;
  if (v7 < 2)
  {
    v134 = (char *)&_swiftEmptyArrayStorage[4];
    v125 = _swiftEmptyArrayStorage;
    if (v7 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
      v14 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v117 = v136;
      if (v15 >= 2)
      {
        v118 = *a1;
        do
        {
          v119 = v15 - 2;
          if (v15 < 2)
            goto LABEL_132;
          if (!v118)
            goto LABEL_144;
          v106 = v14;
          v120 = v14 + 32;
          v121 = *(_QWORD *)&v14[16 * v119 + 32];
          v122 = *(_QWORD *)&v14[16 * v15 + 24];
          sub_10017BB78((char *)(v118 + 40 * v121), (char *)(v118 + 40 * *(_QWORD *)&v120[16 * v15 - 16]), v118 + 40 * v122, v134);
          if (v117)
            goto LABEL_100;
          if (v122 < v121)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
            v106 = sub_100147754((uint64_t)v106);
          if (v119 >= *((_QWORD *)v106 + 2))
            goto LABEL_134;
          v123 = &v106[16 * v119 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v106 + 2);
          if (v15 > v124)
            goto LABEL_135;
          v14 = v106;
          memmove(&v106[16 * v15 + 16], &v106[16 * v15 + 32], 16 * (v124 - v15));
          *((_QWORD *)v106 + 2) = v124 - 1;
          v15 = v124 - 1;
        }
        while (v124 > 2);
      }
      swift_bridgeObjectRelease(v14);
      v116 = v125;
      v125[2] = 0;
LABEL_115:
      swift_bridgeObjectRelease(v116);
      return;
    }
  }
  else
  {
    v10 = v9 >> 1;
    v11 = sub_100047110((uint64_t *)&unk_10082E5B0);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(_QWORD *)(v12 + 16) = v10;
    v125 = (_QWORD *)v12;
    v134 = (char *)(v12 + 32);
  }
  v13 = 0;
  v14 = (char *)_swiftEmptyArrayStorage;
  v135 = a1;
  v131 = v6;
  v132 = v4;
  while (1)
  {
    v16 = v13++;
    v130 = v16;
    if (v13 >= v7)
      break;
    v17 = *a1;
    sub_1000252E0(*a1 + 40 * v13, (uint64_t)&v141);
    v18 = v17;
    sub_1000252E0(v17 + 40 * v16, (uint64_t)v138);
    v133 = v7;
    v20 = v142;
    v19 = v143;
    sub_100016804(&v141, v142);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v20, v19);
    v21 = v139;
    v22 = v140;
    sub_100016804(v138, v139);
    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 32);
    v24 = v22;
    v7 = v133;
    v23(v21, v24);
    LODWORD(v129) = static Date.> infix(_:_:)(v6, v4);
    v25 = *(char **)(v137 + 8);
    v26 = v144;
    ((void (*)(char *, uint64_t))v25)(v4, v144);
    v128 = v25;
    ((void (*)(char *, uint64_t))v25)(v6, v26);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v138);
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&v141);
    v127 = v18;
    if (v16 + 2 >= v7)
    {
      v13 = v16 + 2;
    }
    else
    {
      v27 = v18 + 40 * v16 + 40;
      v13 = v16 + 2;
      while (1)
      {
        v28 = v27 + 40;
        sub_1000252E0(v27 + 40, (uint64_t)&v141);
        sub_1000252E0(v27, (uint64_t)v138);
        v30 = v142;
        v29 = v143;
        sub_100016804(&v141, v142);
        (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v30, v29);
        v31 = v139;
        v32 = v140;
        sub_100016804(v138, v139);
        (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
        LODWORD(v31) = static Date.> infix(_:_:)(v6, v4);
        v33 = v144;
        v34 = v128;
        ((void (*)(char *, uint64_t))v128)(v4, v144);
        ((void (*)(char *, uint64_t))v34)(v6, v33);
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v138);
        _s10FitnessApp24HistoryViewActionContextVwxx_0(&v141);
        if (((v129 ^ v31) & 1) != 0)
          break;
        ++v13;
        v27 = v28;
        v7 = v133;
        if (v133 == v13)
        {
          v13 = v133;
          goto LABEL_23;
        }
      }
      v7 = v133;
    }
LABEL_23:
    a1 = v135;
    if ((v129 & 1) == 0)
      break;
    if (v13 < v16)
      goto LABEL_138;
    if (v16 >= v13)
      break;
    v35 = v16;
    v36 = v13;
    v37 = v14;
    v38 = 40 * v36 - 40;
    v39 = 40 * v35;
    v40 = v36;
    v41 = v35;
    do
    {
      if (v41 != --v36)
      {
        if (!v127)
          goto LABEL_143;
        v42 = v127 + v39;
        v43 = v127 + v38;
        sub_10002411C((__int128 *)(v127 + v39), (uint64_t)&v141);
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *(_OWORD *)(v42 + 16) = v45;
        *(_QWORD *)(v42 + 32) = v44;
        sub_10002411C(&v141, v43);
      }
      ++v41;
      v38 -= 40;
      v39 += 40;
    }
    while (v41 < v36);
    v14 = v37;
    a1 = v135;
    v13 = v40;
    v4 = v132;
    v7 = v133;
    v16 = v130;
    if (v13 < v133)
      goto LABEL_33;
LABEL_52:
    if (v13 < v16)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_100147150(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v61 = *((_QWORD *)v14 + 2);
    v60 = *((_QWORD *)v14 + 3);
    v15 = v61 + 1;
    if (v61 >= v60 >> 1)
      v14 = sub_100147150((char *)(v60 > 1), v61 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v15;
    v62 = v14 + 32;
    v63 = &v14[16 * v61 + 32];
    *(_QWORD *)v63 = v16;
    *((_QWORD *)v63 + 1) = v13;
    if (v61)
    {
      a1 = v135;
      while (1)
      {
        v64 = v15 - 1;
        if (v15 >= 4)
        {
          v69 = &v62[16 * v15];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_120;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_121;
          v76 = v15 - 2;
          v77 = &v62[16 * v15 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_123;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_126;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_130;
            v92 = v67 < v102;
            goto LABEL_90;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v93 = *((_QWORD *)v14 + 4);
            v94 = *((_QWORD *)v14 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_84;
          }
          v66 = *((_QWORD *)v14 + 4);
          v65 = *((_QWORD *)v14 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_122;
        v76 = v15 - 2;
        v82 = &v62[16 * v15 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_125;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_128;
        if (__OFADD__(v86, v91))
          goto LABEL_129;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_90:
          if (v92)
            v64 = v76;
          goto LABEL_92;
        }
LABEL_84:
        if ((v87 & 1) != 0)
          goto LABEL_124;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_127;
        if (v98 < v86)
          goto LABEL_14;
LABEL_92:
        v103 = v64 - 1;
        if (v64 - 1 >= v15)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_142;
        v105 = v13;
        v106 = v14;
        v107 = &v62[16 * v103];
        v108 = *(_QWORD *)v107;
        v109 = v62;
        v110 = v64;
        v111 = &v62[16 * v64];
        v112 = *((_QWORD *)v111 + 1);
        v113 = v136;
        sub_10017BB78((char *)(v104 + 40 * *(_QWORD *)v107), (char *)(v104 + 40 * *(_QWORD *)v111), v104 + 40 * v112, v134);
        v136 = v113;
        if (v113)
        {
LABEL_100:
          v115 = v125;
          swift_bridgeObjectRelease(v106);
          v115[2] = 0;
          v116 = v115;
          goto LABEL_115;
        }
        if (v112 < v108)
          goto LABEL_117;
        if (v110 > *((_QWORD *)v106 + 2))
          goto LABEL_118;
        *(_QWORD *)v107 = v108;
        *(_QWORD *)&v109[16 * v103 + 8] = v112;
        v114 = *((_QWORD *)v106 + 2);
        if (v110 >= v114)
          goto LABEL_119;
        v14 = v106;
        v15 = v114 - 1;
        memmove(v111, v111 + 16, 16 * (v114 - 1 - v110));
        v62 = v109;
        *((_QWORD *)v106 + 2) = v114 - 1;
        v92 = v114 > 2;
        a1 = v135;
        v13 = v105;
        v6 = v131;
        v4 = v132;
        if (!v92)
          goto LABEL_14;
      }
    }
    v15 = 1;
    a1 = v135;
LABEL_14:
    v7 = a1[1];
    if (v13 >= v7)
      goto LABEL_103;
  }
  if (v13 >= v7)
    goto LABEL_52;
LABEL_33:
  if (__OFSUB__(v13, v16))
    goto LABEL_136;
  if (v13 - v16 >= v126)
    goto LABEL_52;
  if (__OFADD__(v16, v126))
    goto LABEL_139;
  if (v16 + v126 >= v7)
    v46 = v7;
  else
    v46 = v16 + v126;
  if (v46 >= v16)
  {
    if (v13 != v46)
    {
      v128 = v14;
      v129 = v46;
      v47 = 40 * v13 - 40;
      do
      {
        v133 = v47;
        while (1)
        {
          v48 = v13;
          v49 = *a1 + v47;
          sub_1000252E0(v49 + 40, (uint64_t)&v141);
          sub_1000252E0(v49, (uint64_t)v138);
          v50 = a1;
          v51 = v142;
          v52 = v143;
          sub_100016804(&v141, v142);
          (*(void (**)(uint64_t, uint64_t))(v52 + 32))(v51, v52);
          v53 = v139;
          v54 = v140;
          sub_100016804(v138, v139);
          (*(void (**)(uint64_t, uint64_t))(v54 + 32))(v53, v54);
          LOBYTE(v53) = static Date.> infix(_:_:)(v6, v4);
          v55 = *(void (**)(char *, uint64_t))(v137 + 8);
          v56 = v144;
          v55(v4, v144);
          v55(v6, v56);
          _s10FitnessApp24HistoryViewActionContextVwxx_0(v138);
          _s10FitnessApp24HistoryViewActionContextVwxx_0(&v141);
          if ((v53 & 1) == 0)
            break;
          v57 = *v50;
          if (!*v50)
            goto LABEL_141;
          a1 = v50;
          v58 = v57 + v47;
          sub_10002411C((__int128 *)(v57 + v47 + 40), (uint64_t)&v141);
          v59 = *(_OWORD *)(v58 + 16);
          *(_OWORD *)(v58 + 40) = *(_OWORD *)v58;
          *(_OWORD *)(v58 + 56) = v59;
          *(_QWORD *)(v58 + 72) = *(_QWORD *)(v58 + 32);
          sub_10002411C(&v141, v58);
          v47 -= 40;
          ++v16;
          v13 = v48;
          if (v48 == v16)
            goto LABEL_43;
        }
        a1 = v50;
        v13 = v48;
LABEL_43:
        ++v13;
        v47 = v133 + 40;
        v16 = v130;
      }
      while (v13 != v129);
      v13 = v129;
      v14 = v128;
    }
    goto LABEL_52;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10017B974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = a1;
  v7 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v36 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v14 = 40 * v36 - 40;
LABEL_5:
    v15 = v27;
    v28 = v14;
    while (1)
    {
      v16 = *a4 + v14;
      sub_1000252E0(v16 + 40, (uint64_t)&v33);
      sub_1000252E0(v16, (uint64_t)v30);
      v17 = v34;
      v18 = v35;
      sub_100016804(&v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
      v19 = v31;
      v20 = v32;
      sub_100016804(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
      LOBYTE(v19) = static Date.> infix(_:_:)(v13, v10);
      v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v10, v7);
      v21(v13, v7);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v30);
      result = _s10FitnessApp24HistoryViewActionContextVwxx_0(&v33);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v14 = v28 + 40;
        if (++v36 == v26)
          return result;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = v22 + v14;
      sub_10002411C((__int128 *)(v22 + v14 + 40), (uint64_t)&v33);
      v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)(v23 + 40) = *(_OWORD *)v23;
      *(_OWORD *)(v23 + 56) = v24;
      *(_QWORD *)(v23 + 72) = *(_QWORD *)(v23 + 32);
      result = sub_10002411C(&v33, v23);
      v14 -= 40;
      if (v36 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10017BB78(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;

  v8 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = a2 - a1;
  v14 = (a2 - a1) / 40;
  v15 = a3 - (_QWORD)a2;
  v16 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v70 = a1;
  v69 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39)
      goto LABEL_45;
    if (a4 != a2 || &a2[40 * v16] <= a4)
      memmove(a4, a2, 40 * v16);
    v34 = &a4[40 * v16];
    v68 = v34;
    v70 = a2;
    if (v15 < 40 || a1 >= a2)
      goto LABEL_44;
    v35 = a3 - 40;
    v57 = a4;
    v58 = a1;
    while (1)
    {
      v36 = (char *)(v35 + 40);
      sub_1000252E0((uint64_t)(v34 - 40), (uint64_t)v65);
      v37 = a2 - 40;
      sub_1000252E0((uint64_t)(a2 - 40), (uint64_t)v62);
      v38 = v66;
      v39 = v67;
      sub_100016804(v65, v66);
      (*(void (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);
      v40 = v63;
      v41 = v64;
      sub_100016804(v62, v63);
      v42 = v12;
      v43 = v59;
      (*(void (**)(uint64_t, uint64_t))(v41 + 32))(v40, v41);
      LOBYTE(v40) = static Date.> infix(_:_:)(v42, v43);
      v44 = v61;
      v45 = *(void (**)(char *, uint64_t))(v60 + 8);
      v46 = v43;
      v12 = v42;
      v45(v46, v61);
      v45(v42, v44);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v62);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v65);
      if ((v40 & 1) != 0)
      {
        if (v36 != a2 || v35 >= (unint64_t)a2)
        {
          v47 = *(_OWORD *)v37;
          v48 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v35 + 32) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v35 = v47;
          *(_OWORD *)(v35 + 16) = v48;
        }
        v70 -= 40;
        v34 = v68;
      }
      else
      {
        v49 = v68;
        v34 = v68 - 40;
        v68 -= 40;
        if (v36 >= v49 && v35 < (unint64_t)v49)
        {
          v50 = (unint64_t)v58;
          if (v36 != v49)
          {
            v51 = *(_OWORD *)v34;
            v52 = *(_OWORD *)(v49 - 24);
            *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
            *(_OWORD *)v35 = v51;
            *(_OWORD *)(v35 + 16) = v52;
          }
          v37 = a2;
          goto LABEL_40;
        }
        v53 = *(_OWORD *)v34;
        v54 = *(_OWORD *)(v49 - 24);
        *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
        *(_OWORD *)v35 = v53;
        *(_OWORD *)(v35 + 16) = v54;
        v37 = a2;
      }
      v50 = (unint64_t)v58;
LABEL_40:
      if (v34 > v57)
      {
        v35 -= 40;
        a2 = v37;
        if ((unint64_t)v37 > v50)
          continue;
      }
      goto LABEL_44;
    }
  }
  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[40 * v14] <= a4)
      memmove(a4, a1, 40 * v14);
    v17 = (unint64_t)&a4[40 * v14];
    v68 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      do
      {
        sub_1000252E0((uint64_t)a2, (uint64_t)v65);
        sub_1000252E0((uint64_t)a4, (uint64_t)v62);
        v18 = v66;
        v19 = v67;
        sub_100016804(v65, v66);
        (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
        v20 = v63;
        v21 = v64;
        sub_100016804(v62, v63);
        v22 = v59;
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        v23 = static Date.> infix(_:_:)(v12, v22);
        v24 = *(void (**)(char *, uint64_t))(v60 + 8);
        v25 = v22;
        v26 = v61;
        v24(v25, v61);
        v24(v12, v26);
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v62);
        _s10FitnessApp24HistoryViewActionContextVwxx_0(v65);
        v27 = v70;
        if ((v23 & 1) != 0)
        {
          v28 = (unint64_t)(a2 + 40);
          if (v70 >= a2 && (unint64_t)v70 < v28 && v70 == a2)
          {
            v27 = a2;
          }
          else
          {
            v29 = *(_OWORD *)a2;
            v30 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)a2 + 4);
            *v27 = v29;
            v27[1] = v30;
          }
        }
        else
        {
          v31 = v69 + 40;
          if (v70 != v69 || v70 >= v31)
          {
            v32 = *(_OWORD *)v69;
            v33 = *((_OWORD *)v69 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)v69 + 4);
            *v27 = v32;
            v27[1] = v33;
          }
          v69 = v31;
          v28 = (unint64_t)a2;
        }
        v70 = (char *)v27 + 40;
        a4 = v69;
        if ((unint64_t)v69 >= v17)
          break;
        a2 = (char *)v28;
      }
      while (v28 < a3);
    }
LABEL_44:
    sub_100147248((void **)&v70, (const void **)&v69, &v68);
    return 1;
  }
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_10017C028(_QWORD *a1)
{
  uint64_t v1;

  return sub_100179204(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10017C044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_10017C06C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100173288(a1, (uint64_t)&unk_100628738, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts, a2);
}

void sub_10017C094()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts) = *(_BYTE *)(v0 + 24);
}

_QWORD *sub_10017C0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t, __n128);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  _QWORD *v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char v84[8];
  _QWORD *v85;

  v70 = type metadata accessor for Calendar(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DayIndex(0);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  __chkstk_darwin(v6);
  v67 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100047110(&qword_100823530);
  __chkstk_darwin(v8);
  v66 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for GregorianDayRange(0);
  v64 = *(_QWORD *)(v65 - 8);
  v10 = __chkstk_darwin(v65);
  v63 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v62 = (char *)&v54 - v12;
  v61 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v61 - 8);
  v13 = __chkstk_darwin(v61);
  v59 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v75 = (char *)&v54 - v15;
  v85 = _swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v56 = v2;
    v55 = a1;
    v17 = a1 + 32;
    v58 = a2 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
    v74 = a2;
    v57 = a2 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
    swift_beginAccess(a2 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange, v84, 0, 0);
    v18 = _swiftEmptyArrayStorage;
    v19 = v65;
    while (1)
    {
      v71 = v18;
      v72 = v17;
      v73 = v16;
      sub_1000252E0(v17, (uint64_t)&v81);
      v20 = v82;
      v21 = v83;
      sub_100016804(&v81, v82);
      (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
      KeyPath = swift_getKeyPath(&unk_100628670);
      v78[0] = v74;
      v23 = sub_1000083D8(&qword_10081FEB8, type metadata accessor for BalanceDataProvider, (uint64_t)&unk_100628650);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v78, KeyPath, v23);
      v24 = swift_release(KeyPath);
      v25 = v64;
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v64 + 16);
      v27 = v62;
      v28 = v57;
      v29 = v26(v62, v57, v19, v24);
      v30 = (uint64_t)v66;
      GregorianDayRange.dayIndexRange.getter(v29);
      v31 = *(void (**)(char *, uint64_t))(v25 + 8);
      v31(v27, v19);
      v32 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v67, v30, v77);
      sub_10001BE90(v30, &qword_100823530);
      v33 = swift_getKeyPath(&unk_100628670);
      v78[0] = v74;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v78, v33, v23);
      v34 = swift_release(v33);
      v35 = v63;
      v36 = v26(v63, v28, v19, v34);
      v37 = v68;
      GregorianDayRange.gregorianCalendar.getter(v36);
      v31(v35, v19);
      v38 = v59;
      DayIndex.startDate(in:)(v37);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v37, v70);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v32, v77);
      sub_1000083D8((unint64_t *)&qword_1008274E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v39 = v75;
      v40 = v61;
      LOBYTE(v35) = dispatch thunk of static Comparable.< infix(_:_:)(v75, v38, v61);
      v41 = *(void (**)(char *, uint64_t))(v60 + 8);
      v41(v38, v40);
      v41(v39, v40);
      if ((v35 & 1) != 0)
        break;
      sub_10002411C(&v81, (uint64_t)v78);
      v42 = v71;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
      v85 = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10012176C(0, v42[2] + 1, 1);
        v42 = v85;
      }
      v44 = v73;
      v46 = v42[2];
      v45 = v42[3];
      if (v46 >= v45 >> 1)
        sub_10012176C(v45 > 1, v46 + 1, 1);
      v47 = v79;
      v48 = v80;
      v49 = sub_10017C044((uint64_t)v78, v79);
      __chkstk_darwin(v49);
      v51 = (char *)&v54 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v52 + 16))(v51);
      sub_1003C5B8C(v46, (uint64_t)v51, (uint64_t *)&v85, v47, v48);
      _s10FitnessApp24HistoryViewActionContextVwxx_0(v78);
      v18 = v85;
      v17 = v72 + 40;
      v16 = v44 - 1;
      if (!v16)
      {
        swift_bridgeObjectRelease(v55);
        return v18;
      }
    }
    _s10FitnessApp24HistoryViewActionContextVwxx_0(&v81);
    swift_bridgeObjectRelease(v55);
    return v85;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
}

double sub_10017C674@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100172DFC(a1, (uint64_t)&unk_100628760, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek, a2);
}

uint64_t sub_10017C69C()
{
  return sub_10017C6B8(&OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek);
}

uint64_t sub_10017C6B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + *a1);
  *(_QWORD *)(v3 + *a1) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10017C6F8()
{
  return sub_100178418();
}

uint64_t sub_10017C71C()
{
  return sub_10017C9F8();
}

uint64_t sub_10017C738()
{
  uint64_t v0;

  return sub_100172C00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10017C758()
{
  sub_10017C7BC();
}

void sub_10017C76C(id a1)
{
  if (a1 != (id)1)

}

void sub_10017C77C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100173288(a1, (uint64_t)&unk_100628800, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated, a2);
}

void sub_10017C7A4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated) = *(_BYTE *)(v0 + 24);
}

void sub_10017C7BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor) = v2;
  v4 = v2;

}

unint64_t sub_10017C7F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100828750;
  if (!qword_100828750)
  {
    v1 = sub_10001E724(255, (unint64_t *)&qword_100823578, NSDate_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100828750);
  }
  return result;
}

uint64_t sub_10017C850()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017C874()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

double sub_10017C898(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10017547C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_10017C8A0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10017C8E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10082358C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000EA380;
  return sub_1001755F4(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_10017C978(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1001730A0(a1, (uint64_t)&unk_100628828, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery, a2);
}

void sub_10017C9A0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16)
            + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery) = *(_QWORD *)(v0 + 24);
}

void sub_10017C9B4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1001730A0(a1, (uint64_t)&unk_100628850, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying, a2);
}

void sub_10017C9DC()
{
  uint64_t v0;

  sub_100174D10(v0);
}

void sub_10017C9E4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16)
            + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying) = *(_QWORD *)(v0 + 24);
}

uint64_t sub_10017C9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

double sub_10017CA38(uint64_t a1)
{
  uint64_t v1;

  return sub_100173E68(a1, v1);
}

uint64_t sub_10017CA40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_10017CA64(uint64_t a1)
{
  uint64_t v1;

  return sub_100174148(a1, v1);
}

uint64_t sub_10017CA70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10082359C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000DA0E4;
  return sub_100174284(a1, v4, v5, v6);
}

uint64_t sub_10017CAE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1008235AC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA380;
  return sub_100173FA4(a1, v4, v5, v6);
}

uint64_t sub_10017CB4C()
{
  return sub_10017C6F8();
}

uint64_t sub_10017CB74()
{
  return sub_10017AED4();
}

void sub_10017CB88()
{
  sub_10017C9A0();
}

void sub_10017CB9C()
{
  sub_10017C094();
}

void sub_10017CBB0()
{
  sub_10017C7A4();
}

void sub_10017CBC4()
{
  id v0;
  CHWorkoutDetailHeartRateTableViewCell *v1;
  id v2;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  CHWorkoutDetailHeartRateTableViewCell *v39;
  uint64_t v40;
  _QWORD *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  CHWorkoutDetailHeartRateTableViewCell *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71[2];
  CHWorkoutDetailHeartRateTableViewCell *v72;

  v2 = objc_msgSend(v0, "friendAchievements");
  if (v2)
  {
    v0 = v2;
    v1 = (CHWorkoutDetailHeartRateTableViewCell *)sub_10001E724(0, (unint64_t *)&qword_100828930, NSNumber_ptr);
    v10 = sub_100047110(&qword_1008235B8);
    v11 = sub_10001E6E4((unint64_t *)&qword_100828940, (unint64_t *)&qword_100828930, NSNumber_ptr);
    v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v0, v1, v10, v11);

  }
  else
  {
    v12 = sub_100435D20((CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyArrayStorage, v3, v4, v5, v6, v7, v8, v9);
  }
  v72 = (CHWorkoutDetailHeartRateTableViewCell *)_swiftEmptyDictionarySingleton;
  v13 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v12 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(v12);
  v18 = 0;
  if (!v16)
    goto LABEL_8;
LABEL_7:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    v24 = 8 * i;
    v1 = *(CHWorkoutDetailHeartRateTableViewCell **)(*(_QWORD *)(v12 + 56) + v24);
    v71[0] = *(id *)(*(_QWORD *)(v12 + 48) + v24);
    v71[1] = v1;
    v0 = v71[0];
    swift_bridgeObjectRetain(v1);
    sub_10017CE70((uint64_t *)&v72, (uint64_t)v71);
    swift_bridgeObjectRelease(v1, v25, v26, v27, v28, v29, v30, v31);

    if (v16)
      goto LABEL_7;
LABEL_8:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    if (!v22)
      break;
LABEL_22:
    v16 = (v22 - 1) & v22;
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v18 + 2;
  if (v18 + 2 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v18 + 3;
  if (v18 + 3 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v18 + 4;
  if (v18 + 4 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
    goto LABEL_21;
  v23 = v18 + 5;
  if (v18 + 5 >= v17)
  {
LABEL_29:
    swift_release(v12);
    swift_bridgeObjectRelease((CHWorkoutDetailHeartRateTableViewCell *)v12, v32, v33, v34, v35, v36, v37, v38);
    v39 = v72;
    swift_bridgeObjectRetain(v72);
    v41 = sub_10029606C(v40);
    swift_bridgeObjectRelease(v39, v42, v43, v44, v45, v46, v47, v48);
    sub_10013D8C8((uint64_t)v41);
    swift_bridgeObjectRelease(v39, v49, v50, v51, v52, v53, v54, v55);
    swift_release(v41);
    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
LABEL_21:
    v18 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  v56 = v72;
  swift_release(v12);
  swift_bridgeObjectRelease(v1, v57, v58, v59, v60, v61, v62, v63);

  swift_bridgeObjectRelease(v56, v64, v65, v66, v67, v68, v69, v70);
  __break(1u);
}

