void sub_100003280(uint64_t a1)
{
  id v1;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "weekScrollView"));
  objc_msgSend(v1, "updateDayBadges");

}

uint64_t type metadata accessor for TipsManager()
{
  return objc_opt_self(_TtC9MobileCal11TipsManager);
}

void sub_100003330(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[26];
    WeakRetained[26] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

id sub_1000033B0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TipsManager()), "init");
  static TipsManager.shared = (uint64_t)result;
  return result;
}

void sub_1000033DC(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "invisibleCalendars"));
  objc_msgSend(v1, "__buildCalendarSyncHashesForCalendars:", v2);

}

void sub_100004338(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "defaultCalendarForNewEvents"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 != 0;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100004450;
  v3[3] = &unk_1001B3030;
  v4 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
}

void sub_100004450(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addEventBarButtonItem"));
  objc_msgSend(v2, "setEnabled:", v1);

}

void sub_1000048B0(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a3;
  if (v5)
  {
    v6 = kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[UserStateLog] State -> UserNotificationCenter requestAuthorizationWithOptions error: [%@]", (uint8_t *)&v8, 0xCu);
    }
  }
  v7 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_INFO))
  {
    v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[UserStateLog] State -> UserNotificationCenter requestAuthorizationWithOptions callback. Access granted: [%d]", (uint8_t *)&v8, 8u);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 41) = a2;

}

void sub_100004BD0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.mobilecal.notificationCountUpdateQ", v4);
  v3 = (void *)qword_1001F6270;
  qword_1001F6270 = (uint64_t)v2;

}

void sub_100004C20(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  __int128 v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "model"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultCalendarForNewEvents"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3 != 0;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001CA8C;
  v4[3] = &unk_1001B3030;
  v5 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
}

id sub_100004CC8(uint64_t a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  id result;
  uint8_t v5[16];

  objc_msgSend(*(id *)(a1 + 32), "setNumberOfNotifications:", *(_QWORD *)(a1 + 40));
  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Broadcasting darwin notification to update badge count", v5, 2u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, _EKNotificationCountChangedExternallyNotification, 0, 0, 1u);
  result = objc_msgSend(*(id *)(a1 + 32), "showingOverriddenToolbarItems");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_updateInboxBarButtonItem");
  return result;
}

void sub_1000056C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000640C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("MainViewControllerDidAppearNotification"), *(_QWORD *)(a1 + 32));

}

void sub_100006DE0(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = dispatch_queue_create("com.apple.mobilecal.calendarsButtonConfig", attr);
  v5 = (void *)qword_1001F6260;
  qword_1001F6260 = (uint64_t)v4;

}

void sub_100006FA4(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_calendarsButtonConfiguration"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001CBA0;
  v4[3] = &unk_1001B26A0;
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v2;
  v3 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_100007318(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = dispatch_queue_create("dayNavigationViewController.loadOccurrenceCacheQueue", attr);
  v5 = (void *)qword_1001F6530;
  qword_1001F6530 = (uint64_t)v4;

}

int main(int argc, const char **argv, const char **envp)
{
  void *v5;
  objc_class *v6;
  NSString *v7;
  NSString *v8;

  v5 = objc_autoreleasePoolPush();
  v6 = (objc_class *)objc_opt_class(Application);
  v7 = NSStringFromClass(v6);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue(v7);
  UIApplicationMain(argc, (char **)argv, v8, 0);

  objc_autoreleasePoolPop(v5);
  return 0;
}

void sub_1000076A8(id a1)
{
  os_log_t v1;
  void *v2;
  os_log_t v3;
  void *v4;
  os_log_t v5;
  void *v6;
  os_log_t v7;
  void *v8;

  v1 = os_log_create(CalendarLogSubsystem, "CalendarUI");
  v2 = (void *)kCalUILogHandle;
  kCalUILogHandle = (uint64_t)v1;

  v3 = os_log_create(CalendarLogSubsystem, "Inbox");
  v4 = (void *)kCalUILogInboxHandle;
  kCalUILogInboxHandle = (uint64_t)v3;

  v5 = os_log_create(CalendarLogSubsystem, "Testing");
  v6 = (void *)kCalUILogTestHandle;
  kCalUILogTestHandle = (uint64_t)v5;

  v7 = os_log_create(CalendarLogSubsystem, "Carplay");
  v8 = (void *)kCalUILogCarplayHandle;
  kCalUILogCarplayHandle = (uint64_t)v7;

}

void sub_1000080F4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  __objc2_class *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_findSomeCalendarModel"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "traitCollection"));
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1)
    v5 = PadApplicationTester;
  else
    v5 = PhoneApplicationTester;
  v6 = objc_msgSend([v5 alloc], "initWithModel:", v9);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v6;

}

void sub_1000081A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastViewedOccurrenceUID"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastViewedOccurrenceDate"));

  if (v10)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "eventStore"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allEventsWithUniqueId:occurrenceDate:", v10, v4));

    if (objc_msgSend(v7, "count") == (id)1)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      if (v8)
      {
        v9 = (void *)v8;
        objc_msgSend(*(id *)(a1 + 32), "showEvent:animated:showMode:context:", v8, 0, 1, 0);

      }
    }

  }
}

uint64_t sub_1000082A4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000EE18(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000082E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v0 = sub_10000EDD8(&qword_1001F5DD8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Tips.UsesConstellation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDD8(&qword_1001F5DE0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.UsesConstellation.init(_:)(1);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v7, v4, &protocol witness table for Tips.UsesConstellation);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = v4;
  v17 = &protocol witness table for Tips.UsesConstellation;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>, 1);
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v11, v8, OpaqueTypeConformance2);
  v16 = v8;
  v17 = (void *)OpaqueTypeConformance2;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>, 1);
  v14 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v3, v0, v13);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

void sub_100008740(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Swift::Void __swiftcall TipsManager.addTipObservers(for:todayButton:)(UIViewController a1, UIBarButtonItem todayButton)
{
  char *v2;
  char *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *Strong;
  char *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  sub_10000EDD8(&qword_1001F5D60);
  __chkstk_darwin();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC9MobileCal11TipsManager_tipObservationTask;
  if (!*(_QWORD *)&v3[OBJC_IVAR____TtC9MobileCal11TipsManager_tipObservationTask])
  {
    v9 = &v3[OBJC_IVAR____TtC9MobileCal11TipsManager_todayBarButtonItem];
    Strong = (void *)swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC9MobileCal11TipsManager_todayBarButtonItem]);

    if (!Strong)
    {
      v11 = &v3[OBJC_IVAR____TtC9MobileCal11TipsManager_presentingController];
      v12 = (void *)swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC9MobileCal11TipsManager_presentingController]);

      if (!v12)
      {
        swift_unknownObjectWeakAssign(v9, todayButton.super.super.isa);
        swift_unknownObjectWeakAssign(v11, a1.super.super.isa);
        v13 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
        type metadata accessor for MainActor(0);
        v14 = v3;
        v15 = static MainActor.shared.getter();
        v16 = (_QWORD *)swift_allocObject(&unk_1001B6338, 40, 7);
        v16[2] = v15;
        v16[3] = &protocol witness table for MainActor;
        v16[4] = v14;
        v17 = sub_1001236B0((uint64_t)v7, (uint64_t)&unk_1001F5B98, (uint64_t)v16);
        v18 = *(_QWORD *)&v3[v8];
        *(_QWORD *)&v3[v8] = v17;
        swift_release(v18);
      }
    }
  }
}

void sub_10000954C(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[6];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "model"));
  v3 = objc_msgSend(v2, "eventNotificationsForCurrentIdentityCount");

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001C894;
  v4[3] = &unk_1001B2838;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
}

void sub_10000A7D4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = qword_1001F6260;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000C320;
  v6[3] = &unk_1001B4028;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_10000C320(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_calendarsButtonConfiguration"));

  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10001C88C;
    v4[3] = &unk_1001B26A0;
    v5 = *(id *)(a1 + 32);
    v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  }
}

id sub_10000C840(uint64_t a1)
{
  void *v1;
  _QWORD v3[4];
  __int128 v4;
  char v5;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10001A278;
  v3[3] = &unk_1001B52E8;
  v5 = *(_BYTE *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 40);
  return objc_msgSend(v1, "enumerateObjectsUsingBlock:", v3);
}

int64_t sub_10000CD44(id a1, AnchoredValuePair *a2, AnchoredValuePair *a3)
{
  AnchoredValuePair *v4;
  AnchoredValuePair *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int64_t v10;
  double v11;
  double v12;
  double v13;

  v4 = a2;
  v5 = a3;
  -[AnchoredValuePair size](v4, "size");
  v7 = v6;
  -[AnchoredValuePair size](v5, "size");
  v9 = v7 - v8;
  if (v9 < 0.0)
    v9 = -v9;
  if (v9 >= 0.00001)
  {
    -[AnchoredValuePair size](v4, "size");
    v12 = v11;
    -[AnchoredValuePair size](v5, "size");
    if (v12 > v13)
      v10 = 1;
    else
      v10 = -1;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10000D968(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F64D8;
  qword_1001F64D8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F64D8, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F64D8, "addAnchoredValue:forWindowSizeWidth:", 16, 51.0);
  objc_msgSend((id)qword_1001F64D8, "addAnchoredValue:forWindowSizeWidth:", 32, 56.66);
  objc_msgSend((id)qword_1001F64D8, "addAnchoredValue:forWindowSizeWidth:", 2, 44.5);
  objc_msgSend((id)qword_1001F64D8, "addAnchoredValue:forWindowSizeWidth:", 4, 44.5);
}

id sub_10000E760(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setFrame:", *(double *)(a1 + 40) + *(double *)(a1 + 48) * -0.5, *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 72));
}

uint64_t sub_10000E78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];

  v0 = sub_10000EDD8(&qword_1001F5BA8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for Tips.Rule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1001F5880 != -1)
    swift_once(&qword_1001F5880, sub_10001CDC4);
  v8 = sub_10000EBE8(v0, (uint64_t)qword_1001F6CF0);
  swift_beginAccess(v8, v23, 0, 0);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v9(v3, v8, v0);
  Tips.Rule.init<A>(_:_:)(v3, sub_10001CDC0, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v10 = static Tips.RuleBuilder.buildExpression(_:)(v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if (qword_1001F5888 != -1)
    swift_once(&qword_1001F5888, sub_10001CDF8);
  v12 = sub_10000EBE8(v0, (uint64_t)qword_1001F6D08);
  swift_beginAccess(v12, v22, 0, 0);
  v9(v3, v12, v0);
  Tips.Rule.init<A>(_:_:)(v3, sub_10001CDC0, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v13 = static Tips.RuleBuilder.buildExpression(_:)(v7);
  v11(v7, v4);
  if (qword_1001F5878 != -1)
    swift_once(&qword_1001F5878, sub_10001CE20);
  v14 = sub_10000EBE8(v0, (uint64_t)qword_1001F6CD8);
  swift_beginAccess(v14, v21, 0, 0);
  v9(v3, v14, v0);
  Tips.Rule.init<A>(_:_:)(v3, sub_10001CDC0, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v15 = static Tips.RuleBuilder.buildExpression(_:)(v7);
  v11(v7, v4);
  v16 = static Tips.RuleBuilder.buildPartialBlock(first:)(v10);
  swift_bridgeObjectRelease(v10);
  v17 = static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)(v16, v13);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  v18 = static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)(v17, v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  return v18;
}

void sub_10000EA8C(void *a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[31];
  char v15;

  v10 = *a4;
  v11 = a1;
  if (v10 != -1)
    swift_once(a4, a6);
  v12 = sub_10000EDD8(&qword_1001F5BA8);
  v13 = sub_10000EBE8(v12, a5);
  v15 = a3;
  swift_beginAccess(v13, v14, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v15, v12);
  swift_endAccess(v14);

}

uint64_t sub_10000EB3C(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char v11;

  v9 = sub_10000EDD8(&qword_1001F5BA8);
  sub_10000EC00(v9, a2);
  sub_10000EBE8(v9, (uint64_t)a2);
  v11 = a3;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for JumpToTodayTip, a4, a5, &v11, &_swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for JumpToTodayTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_10000EBE8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_10000EC00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10000EC40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[15];
  char v16;

  v4 = sub_10000EDD8(&qword_1001F5DE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10000EDD8(&qword_1001F5DF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_1000082A4(&qword_1001F5DF8, &qword_1001F5DF0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v8, v12);
  v16 = 1;
  static PredicateExpressions.build_Arg<A>(_:)(&v16, &type metadata for Bool);
  a2[3] = sub_10000EDD8(&qword_1001F5E00);
  a2[4] = sub_10000EE98();
  sub_10000EE5C(a2);
  v13 = sub_1000082A4(&qword_1001F5E20, &qword_1001F5DE8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v11, v7, v8, v4, v12, v13, &protocol witness table for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10000EDD8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000EE18(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_10000EE5C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_10000EE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5E08;
  if (!qword_1001F5E08)
  {
    v1 = sub_10000EE18(&qword_1001F5E00);
    sub_1000082A4(&qword_1001F5E10, &qword_1001F5DF0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    sub_10001CEA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001F5E08);
  }
  return result;
}

void sub_10000F608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000F824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL EKUICurrentWindowInterfaceParadigm_RequiresPageSheetEventEditors()
{
  return (EKUICurrentWindowSizeParadigmForViewHierarchy() & 0x3FCC0420) != 0;
}

id sub_100012B6C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = CUIKCalendarModelDisplayedOccurrencesChangedForTheFirstTimeNotification;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 8), "model"));
  objc_msgSend(v2, "removeObserver:name:object:", v3, v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("MainViewControllerDidCompleteExtendedLaunchNotification"), 0);

  return objc_msgSend(*(id *)(a1 + 32), "updateErrorState");
}

void sub_100012DEC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  dispatch_time_t v7;
  _QWORD block[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "topMainViewControllerContainer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentChildViewController"));
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 183)
    && (!*(_QWORD *)(a1 + 32)
     || objc_msgSend(v2, "isEqualToString:", CUIKCalendarModelDisplayedOccurrencesChangedForTheFirstTimeNotification)&& !objc_msgSend(v4, "handlesNotifyOnExtendedLaunchCompletion")|| objc_msgSend(v2, "isEqualToString:", CFSTR("MainViewControllerDidCompleteExtendedLaunchNotification"))))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 183) = 1;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 183))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v5, "removeObserver:name:object:", *(_QWORD *)(a1 + 40), CUIKCalendarModelDisplayedOccurrencesChangedForTheFirstTimeNotification, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224));

      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v6, "removeObserver:name:object:", *(_QWORD *)(a1 + 40), CFSTR("MainViewControllerDidCompleteExtendedLaunchNotification"), 0);

      objc_msgSend(*(id *)(a1 + 40), "_updateCalendarButtonAccessory");
      objc_msgSend(*(id *)(a1 + 40), "_updateUserActivity");
      v7 = dispatch_time(0, 300000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10009C0D0;
      block[3] = &unk_1001B2538;
      block[4] = *(_QWORD *)(a1 + 40);
      dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }

}

void sub_100017C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000192FC(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "CGRectValue");
  objc_msgSend(*(id *)(a1 + 32), "convertRect:toView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  CalRoundRectToScreenScale(v3, v4, v5, v6);
  v7 = *(void **)(a1 + 40);
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:"));
  objc_msgSend(v7, "addObject:", v8);

}

void sub_10001A278(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  CGFloat MidX;
  id v6;
  CGRect v7;
  CGRect v8;

  v3 = a2;
  v6 = v3;
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_5;
  objc_msgSend(v3, "frame");
  v4 = 0.0;
  if (CGRectGetMidX(v7) >= *(double *)(a1 + 32))
  {
    objc_msgSend(v6, "frame");
    MidX = CGRectGetMidX(v8);
    v3 = v6;
    if (MidX >= *(double *)(a1 + 40))
      goto LABEL_6;
LABEL_5:
    v4 = 1.0;
    goto LABEL_6;
  }
  v3 = v6;
LABEL_6:
  objc_msgSend(v3, "setAlpha:", v4);

}

unint64_t sub_10001C7DC()
{
  return 0xD00000000000001FLL;
}

id sub_10001C88C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setConfiguration:", *(_QWORD *)(a1 + 40));
}

id sub_10001C894(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "updateInboxCount:", *(_QWORD *)(a1 + 40));
}

void sub_10001C9F0(uint64_t a1)
{
  _QWORD block[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "numberOfDaysWithCachedOccurrences");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "fetchDaysStartingFromSection:sectionsToLoadInBothDirections:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sectionForCachedOccurrencesOnDate:", *(_QWORD *)(a1 + 40)), 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100003280;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10001CA8C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "newEventBarButtonItem");
  objc_msgSend(v2, "setEnabled:", v1);

}

void sub_10001CAD8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_1001F62F8;
  qword_1001F62F8 = (uint64_t)v1;

}

void sub_10001CB00(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_1001F6220;
  qword_1001F6220 = (uint64_t)v1;

}

id sub_10001CB28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUserActivity");
}

void sub_10001CB30(uint64_t a1)
{
  id v2;
  _QWORD v3[6];

  v2 = objc_msgSend(*(id *)(a1 + 32), "eventNotificationsForCurrentIdentityCount");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100004CC8;
  v3[3] = &unk_1001B2838;
  v3[4] = *(_QWORD *)(a1 + 40);
  v3[5] = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
}

id sub_10001CBA0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setConfiguration:", *(_QWORD *)(a1 + 40));
}

void sub_10001CBB4(id a1)
{
  NSCache *v1;
  void *v2;

  v1 = objc_opt_new(NSCache);
  v2 = (void *)qword_1001F6170;
  qword_1001F6170 = (uint64_t)v1;

}

id sub_10001CBDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "requestContactsAuthorization");
}

void sub_10001CBE4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1001F6190;
  qword_1001F6190 = v1;

}

void sub_10001CC10(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1001F6180;
  qword_1001F6180 = v1;

}

void sub_10001CC3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.mobilecal.signposts", "TelemetrySignposts");
  v2 = (void *)qword_1001F64B0;
  qword_1001F64B0 = (uint64_t)v1;

}

void sub_10001CC6C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001F6100;
  qword_1001F6100 = (uint64_t)v1;

}

void sub_10001CC90(id a1)
{
  CalendarSceneManagerSharedState *v1;
  void *v2;

  v1 = objc_alloc_init(CalendarSceneManagerSharedState);
  v2 = (void *)qword_1001F6500;
  qword_1001F6500 = (uint64_t)v1;

}

unint64_t EKUICurrentWindowInterfaceParadigm_SupportsLargeWeekdayNamesInNavigationPalette()
{
  return ((unint64_t)EKUICurrentWindowInterfaceParadigm() >> 4) & 1;
}

void CalUILogInitialize()
{
  if (qword_1001F6218 != -1)
    dispatch_once(&qword_1001F6218, &stru_1001B3A10);
}

uint64_t sub_10001CCFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000EDD8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10001CD38()
{
  unint64_t result;

  result = qword_1001F5DD0;
  if (!qword_1001F5DD0)
  {
    result = swift_getWitnessTable(&unk_1001A1E4C, &type metadata for JumpToTodayTip);
    atomic_store(result, (unint64_t *)&qword_1001F5DD0);
  }
  return result;
}

unint64_t sub_10001CD7C()
{
  unint64_t result;

  result = qword_1001F5BB8;
  if (!qword_1001F5BB8)
  {
    result = swift_getWitnessTable(&unk_1001A1E84, &type metadata for JumpToTodayTip);
    atomic_store(result, (unint64_t *)&qword_1001F5BB8);
  }
  return result;
}

uint64_t sub_10001CDC4(uint64_t a1)
{
  return sub_10000EB3C(a1, qword_1001F6CF0, 0, 0x7274726F5073692BLL, 0xEB00000000746961);
}

uint64_t sub_10001CDF8(uint64_t a1)
{
  return sub_10000EB3C(a1, qword_1001F6D08, 0, 0xD000000000000024, 0x8000000100195AA0);
}

uint64_t sub_10001CE20(uint64_t a1)
{
  return sub_10000EB3C(a1, qword_1001F6CD8, 1, 0xD00000000000001CLL, 0x8000000100195AD0);
}

void sub_10001CE80()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9MobileCal11TipsManager____lazy_storage___jumpToTodayTip) == 1)
    *(_BYTE *)(v0 + OBJC_IVAR____TtC9MobileCal11TipsManager____lazy_storage___jumpToTodayTip) = 0;
}

unint64_t sub_10001CEA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5E18;
  if (!qword_1001F5E18)
  {
    v1 = sub_10000EE18(&qword_1001F5DE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001F5E18);
  }
  return result;
}

void sub_10001D4BC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10001EA14(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor separatorColor](UIColor, "separatorColor"));
  v2 = (void *)qword_1001F5ED8;
  qword_1001F5ED8 = v1;

  v3 = objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
  v4 = (void *)qword_1001F5EE0;
  qword_1001F5EE0 = v3;

  v5 = 0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  do
  {
    *(double *)&qword_1001F5EE8[v5] = v9;
    *(double *)&qword_1001F5F20[v5] = v8;
    *(double *)&qword_1001F5F58[v5] = v7;
    *(double *)&qword_1001F5F90[v5] = v6;
    v9 = v9 + *(double *)&qword_1001A1270[v5] + 0.5;
    v8 = v8 + *(double *)&qword_1001A12A8[v5] + 0.5;
    v7 = v7 + *(double *)&qword_1001A12E0[v5] + 1.0;
    v6 = v6 + *(double *)&qword_1001A1318[v5++] + 1.0;
  }
  while (v5 != 7);
}

void sub_10001EDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001EE0C(uint64_t a1)
{
  void *v1;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[1], "setBackgroundColor:", objc_msgSend((id)qword_1001F5ED8, "CGColor"));
    objc_msgSend(WeakRetained[2], "setBackgroundColor:", objc_msgSend((id)qword_1001F5ED8, "CGColor"));
    objc_msgSend(WeakRetained, "_rebuildOverlayLabels");
    objc_msgSend(WeakRetained, "_rebuildDayNumberLabels");
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[57], "layer"));
    objc_msgSend(v1, "setNeedsDisplay");

  }
}

void sub_10001FDA8(id a1, UILabel *a2, unint64_t a3, BOOL *a4)
{
  -[UILabel removeFromSuperview](a2, "removeFromSuperview", a3, a4);
}

void sub_10001FDB0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v5 = a2;
  v18 = v5;
  if (*(_QWORD *)(a1 + 56) > a3 || *(_QWORD *)(a1 + 64) <= a3)
  {
    objc_msgSend(v5, "setHidden:", 1);
  }
  else
  {
    objc_msgSend(v5, "setHidden:", 0);
    v6 = a3 - *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 400), "date"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dateByAddingUnit:value:toDate:options:", 16, v6, v8, 1024));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKDateStrings overlayMediumStringForDate:inCalendar:](CUIKDateStrings, "overlayMediumStringForDate:inCalendar:", v9, *(_QWORD *)(a1 + 32)));
    objc_msgSend(v18, "setText:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "components:fromDate:", 24, v9));
    v12 = objc_msgSend(v11, "day");
    if (v12 == (id)1)
    {
      v12 = objc_msgSend(v11, "month");
      if (v12 == (id)1)
      {
        v12 = objc_msgSend(v11, "isLeapMonth");
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) = a3;
        if ((v12 & 1) == 0)
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + 80) = 1;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) = a3;
      }
    }
    v13 = CUIKZeroIndexedWeekStart(v12);
    v14 = ((unint64_t)(v13 + a3) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    if ((CUIKDayOfWeekIsWeekend((_DWORD)v13 + (_DWORD)a3 - 7
                                                          * ((v14
                                                                          + ((unint64_t)(v13 + a3 - v14) >> 1)) >> 2)) & 1) != 0)
    {
      v15 = WeekendTextColor();
      v16 = objc_claimAutoreleasedReturnValue(v15);
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    }
    v17 = (void *)v16;
    objc_msgSend(v18, "setTextColor:", v16);

    objc_msgSend(v18, "setFont:", *(_QWORD *)(a1 + 48));
  }

}

void sub_1000203FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;

  v5 = a2;
  v28 = v5;
  if (*(_QWORD *)(a1 + 40) > a3 || *(_QWORD *)(a1 + 48) <= a3)
  {
    objc_msgSend(v5, "setHidden:", 1);
  }
  else
  {
    objc_msgSend(v5, "setHidden:", 0);
    v6 = ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 400), "day") + a3 + ~*(_QWORD *)(a1 + 40))
       % *(_QWORD *)(a1 + 56);
    v7 = CUIKLocalizedStringForInteger(v6 + 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v28, "setText:", v8);

    v9 = (id)qword_1001F5EC0;
    v10 = CUIKZeroIndexedWeekStart(v9);
    v11 = ((unint64_t)(v10 + a3) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    if ((CUIKDayOfWeekIsWeekend((_DWORD)v10 + (_DWORD)a3 - 7
                                                          * ((v11
                                                                          + ((unint64_t)(v10 + a3 - v11) >> 1)) >> 2)) & 1) != 0)
    {
      v12 = WeekendTextColor();
      v13 = objc_claimAutoreleasedReturnValue(v12);
    }
    else
    {
      v13 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    }
    v14 = (void *)v13;
    if (v6 + 1 == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 472))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
      objc_msgSend(v28, "setTextColor:", v15);

      objc_msgSend(v28, "setTextAlignment:", 1);
      v16 = (id)qword_1001F5EC8;

      v17 = v28;
      v9 = v16;
    }
    else
    {
      objc_msgSend(v28, "setTextColor:", v13);
      v17 = v28;
    }
    objc_msgSend(v17, "setFont:", v9);
    if (!v6)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "setTextColor:", v14);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "font"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "setFont:", v18);

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "date"));
      v21 = CUIKStringForDate(v20, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "setText:", v22);

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 376), "setTextColor:", v14);
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "font"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 376), "setFont:", v23);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startDate"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "date"));
      v26 = CUIKStringForMonth();
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 376), "setText:", v27);

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384) = a3;
    }

  }
}

void sub_1000206D0(id a1, UIImageView *a2, unint64_t a3, BOOL *a4)
{
  UIImageView *v4;

  v4 = a2;
  -[UIImageView setHidden:](v4, "setHidden:", 1);
  -[UIImageView setAlpha:](v4, "setAlpha:", 1.0);

}

void sub_1000207D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  id v32;
  id v33;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 376);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 472) != 1)
  {
    v32 = v2;
    v4 = *(id *)(v3 + 368);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384)));
    v6 = v5;
    v7 = 0.0;
    if (!*(_BYTE *)(a1 + 40))
      v7 = 1.0;
    objc_msgSend(v5, "setAlpha:", v7);

    v2 = v4;
  }
  if (*(_BYTE *)(a1 + 40))
    v8 = 1.0;
  else
    v8 = 0.0;
  v33 = v2;
  objc_msgSend(v2, "setAlpha:", v8);
  if (*(_BYTE *)(a1 + 40))
    v9 = 1.0;
  else
    v9 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setAlpha:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectAtIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384)));
  v11 = v10;
  if (*(_BYTE *)(a1 + 40))
    v12 = 0.0;
  else
    v12 = 1.0;
  objc_msgSend(v10, "setAlpha:", v12);
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v13 + 40) && !*(_BYTE *)(a1 + 40))
  {
    v14 = objc_msgSend(*(id *)(v13 + 400), "dayOfWeek");
    v15 = CUIKZeroIndexedWeekStart(v14);
    v16 = (uint64_t)v14 - v15 + 6;
    v18 = CUIKGetOverlayCalendar(v15, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(v20 + 384) + 7 * (v16 / 7) - v16;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v20 + 400), "date"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dateByAddingUnit:value:toDate:options:", 16, v21, v22, 1024));

    v26 = CUIKGetOverlayCalendar(v24, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKDateStrings overlayMediumStringForDate:inCalendar:](CUIKDateStrings, "overlayMediumStringForDate:inCalendar:", v23, v27));

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 384)));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "text"));
    v31 = objc_msgSend(v28, "isEqualToString:", v30);

    if ((v31 & 1) == 0)
    {
      objc_msgSend(v29, "setAlpha:", 0.0);
      objc_msgSend(v29, "setText:", v28);
      objc_msgSend(v29, "setAlpha:", 1.0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAlpha:", 0.0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAlpha:", 1.0);
    }

  }
}

id sub_1000212A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.1);
}

void sub_1000212B8(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 488));
  objc_msgSend(WeakRetained, "largeMonthWeekView:didDoubleTapOnDay:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100021A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100021AA4(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  int IsLeftToRight;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double MaxX;
  uint64_t v15;
  uint64_t v16;
  double MinX;
  double v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double Width;
  id v31;
  uint64_t v32;
  int v33;
  double v34;
  double v38;
  double v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  double v62;
  double v63;
  double v64;
  int v65;
  uint64_t v66;
  double v70;
  double v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  _QWORD *v87;
  int *v88;
  id v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  double v97;
  double v98;
  double x;
  double v100;
  double v101;
  double v102;
  void *v103;
  void *v104;
  uint64_t v105;
  int v106;
  double v107;
  double v111;
  double v112;
  void *v113;
  NSAttributedStringKey v114;
  void *v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;

  v5 = a2;
  v6 = objc_msgSend(v5, "sizeToFit");
  IsLeftToRight = CalTimeDirectionIsLeftToRight(v6, v7);
  v9 = (uint64_t *)(a1[4] + 128 + 32 * a3);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  if (IsLeftToRight)
  {
    MaxX = CGRectGetMaxX(*(CGRect *)&v10);
    objc_msgSend(v5, "bounds");
    MinX = MaxX - CGRectGetWidth(v116);
    v18 = -9.5;
  }
  else
  {
    MinX = CGRectGetMinX(*(CGRect *)&v10);
    v18 = 9.5;
  }
  *(double *)(*(_QWORD *)(a1[5] + 8) + 32) = CalRoundToScreenScale(v15, v16, MinX + v18);
  CalRoundPointToScreenScale(objc_msgSend(v5, "frame"), *(double *)(*(_QWORD *)(a1[5] + 8) + 32), *(double *)(*(_QWORD *)(a1[5] + 8) + 40));
  objc_msgSend(v5, "setFrame:");
  v19 = a1[4];
  if (*(_QWORD *)(v19 + 384) == a3)
  {
    objc_msgSend(*(id *)(v19 + 368), "sizeToFit");
    v20 = 376;
    v21 = objc_msgSend(*(id *)(a1[4] + 376), "sizeToFit");
    if (*(_QWORD *)(a1[4] + 472) == 1)
    {
      v114 = NSFontAttributeName;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "font"));
      v115 = v23;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v115, &v114, 1));
      objc_msgSend(CFSTR(" "), "sizeWithAttributes:", v24);
      v26 = v25;

      if (CalTimeDirectionIsLeftToRight(v27, v28))
      {
        objc_msgSend(*(id *)(a1[4] + 376), "bounds");
        v29 = v26 + CGRectGetWidth(v117);
        objc_msgSend(v5, "bounds");
        *(double *)(*(_QWORD *)(a1[5] + 8) + 32) = *(double *)(*(_QWORD *)(a1[5] + 8) + 32)
                                                     - (v29
                                                      + CGRectGetWidth(v118));
      }
      CalRoundPointToScreenScale(objc_msgSend(*(id *)(a1[4] + 376), "frame"), *(double *)(*(_QWORD *)(a1[5] + 8) + 32), *(double *)(*(_QWORD *)(a1[5] + 8) + 40));
      objc_msgSend(*(id *)(a1[4] + 376), "setFrame:");
    }
    else
    {
      if (CalTimeDirectionIsLeftToRight(v21, v22))
      {
        objc_msgSend(v5, "bounds");
        Width = CGRectGetWidth(v119);
        objc_msgSend(*(id *)(a1[4] + 368), "bounds");
        *(double *)(*(_QWORD *)(a1[5] + 8) + 32) = Width
                                                     - CGRectGetWidth(v120)
                                                     + *(double *)(*(_QWORD *)(a1[5] + 8) + 32);
      }
      CalRoundPointToScreenScale(objc_msgSend(*(id *)(a1[4] + 368), "frame"), *(double *)(*(_QWORD *)(a1[5] + 8) + 32), *(double *)(*(_QWORD *)(a1[5] + 8) + 40));
      objc_msgSend(*(id *)(a1[4] + 368), "setFrame:");
      v20 = 368;
    }
    v31 = *(id *)(a1[4] + v20);
    v33 = CalTimeDirectionIsLeftToRight(v31, v32);
    objc_msgSend(v31, "frame");
    if (v33)
      v38 = v34 + -14.0;
    else
      v38 = CGRectGetMaxX(*(CGRect *)&v34);
    objc_msgSend(v31, "frame");
    objc_msgSend(*(id *)(a1[4] + 56), "setFrame:", v38, v39 + -7.0, 14.0, 14.0);
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 56), "layer"));
    objc_msgSend(v40, "setCornerRadius:", 7.0);

    v19 = a1[4];
  }
  v41 = *(void **)(v19 + 40);
  if (v41)
  {
    v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "objectAtIndexedSubscript:", a3));
    v44 = (void *)v42;
    if (*(_QWORD *)(a1[4] + 384) == a3)
    {
      v45 = CUIKGetOverlayCalendar(v42, v43);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      v47 = a3 - a1[6];
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 400), "date"));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "dateByAddingUnit:value:toDate:options:", 16, v47, v48, 1024));

      v52 = CUIKGetOverlayCalendar(v50, v51);
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKDateStrings overlayMediumStringForDate:inCalendar:](CUIKDateStrings, "overlayMediumStringForDate:inCalendar:", v49, v53));
      objc_msgSend(v44, "setText:", v54);

    }
    else
    {
      v49 = 0;
    }
    objc_msgSend(v44, "sizeToFit");
    v55 = objc_msgSend(v44, "frame");
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v64 = v63;
    if (a1[6] == a3 && *(_BYTE *)(a1[4] + 465))
    {
      v65 = CalTimeDirectionIsLeftToRight(v55, v56);
      objc_msgSend(*(id *)(a1[4] + 392), "frame");
      if (v65)
      {
        v70 = CGRectGetMaxX(*(CGRect *)&v66);
        v71 = 2.0;
LABEL_26:
        v78 = v70 + v71;
LABEL_30:
        objc_msgSend(v5, "frame");
        v83 = v82;
        objc_msgSend(v5, "_firstLineBaselineOffsetFromBoundsTop");
        v85 = v84 + v83;
        objc_msgSend(v44, "_firstLineBaselineOffsetFromBoundsTop");
        objc_msgSend(v44, "setFrame:", v78, v85 - v86 + -1.0, v62, v64);
        v87 = (_QWORD *)a1[4];
        if (v87[48] == a3)
        {
          if (v87[59] == 1)
            v88 = &OBJC_IVAR___LargeMonthWeekView__firstOfMonthNoDayLabel;
          else
            v88 = &OBJC_IVAR___LargeMonthWeekView__firstOfMonthLabel;
          v89 = *(id *)((char *)v87 + *v88);
          objc_msgSend(v89, "alpha");
          if (v90 == 1.0)
          {
            objc_msgSend(v89, "frame");
            v91 = CGRectGetMinX(v122);
            objc_msgSend(v44, "frame");
            if (v91 < CGRectGetMaxX(v123))
            {
              v94 = CUIKGetOverlayCalendar(v92, v93);
              v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
              v96 = (void *)objc_claimAutoreleasedReturnValue(+[CUIKDateStrings overlayShortStringForDate:inCalendar:](CUIKDateStrings, "overlayShortStringForDate:inCalendar:", v49, v95));
              objc_msgSend(v44, "setText:", v96);

              objc_msgSend(v44, "sizeToFit");
              objc_msgSend(v89, "alpha");
              if (v97 == 1.0)
              {
                objc_msgSend(v89, "frame");
                v98 = CGRectGetMinX(v124);
                objc_msgSend(v44, "frame");
                if (v98 < CGRectGetMaxX(v125))
                {
                  objc_msgSend(v44, "setText:", &stru_1001B67C0);
                  objc_msgSend(v44, "sizeToFit");
                }
              }
            }
          }

          v87 = (_QWORD *)a1[4];
        }
        if (v87[9] == a3)
        {
          objc_msgSend(v44, "frame");
          x = v126.origin.x;
          v100 = v126.size.width;
          v101 = CGRectGetMaxY(v126) + 1.0;
          if (*(_BYTE *)(a1[4] + 80))
            v102 = 1.5;
          else
            v102 = 1.0;
          CalRoundRectToScreenScale(x, v101, v100, v102);
          objc_msgSend(*(id *)(a1[4] + 64), "setFrame:");
        }

        v19 = a1[4];
        goto LABEL_46;
      }
      v79 = CGRectGetMinX(*(CGRect *)&v66);
      v80 = -2.0;
    }
    else
    {
      v72 = CalTimeDirectionIsLeftToRight(v55, v56);
      v73 = (uint64_t *)(a1[4] + 128 + 32 * a3);
      v74 = *v73;
      v75 = v73[1];
      v76 = v73[2];
      v77 = v73[3];
      if (v72)
      {
        v70 = CGRectGetMinX(*(CGRect *)&v74);
        v71 = 9.5;
        goto LABEL_26;
      }
      v79 = CGRectGetMaxX(*(CGRect *)&v74);
      v80 = -9.5;
    }
    v81 = v79 + v80;
    v121.origin.x = v58;
    v121.origin.y = v60;
    v121.size.width = v62;
    v121.size.height = v64;
    v78 = v81 - CGRectGetWidth(v121);
    goto LABEL_30;
  }
LABEL_46:
  v103 = *(void **)(v19 + 48);
  if (v103)
  {
    v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "objectAtIndexedSubscript:", a3));
    v106 = CalTimeDirectionIsLeftToRight(v104, v105);
    objc_msgSend(v5, "frame");
    if (v106)
      v111 = v107 + -14.0;
    else
      v111 = CGRectGetMaxX(*(CGRect *)&v107);
    objc_msgSend(v5, "frame");
    objc_msgSend(v104, "setFrame:", v111, v112 + -7.0, 14.0, 14.0);
    v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "layer"));
    objc_msgSend(v113, "setCornerRadius:", 7.0);

  }
}

void sub_1000229C4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.05));
  v2 = (void *)qword_1001F5FC8;
  qword_1001F5FC8 = v1;

}

id sub_1000229FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_100022A08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_100022A14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

id sub_1000245AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "openAttendeesDetailItem");
}

uint64_t sub_100026BE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_100026DFC(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)EKUIReadonlyEventViewController), "initWithEvent:", *(_QWORD *)(a1 + 32));
}

id sub_100026E2C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v11;
  uint64_t v12;
  id *(*v13)(id *, uint64_t);
  void *v14;
  uint64_t v15;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectedOccurrences"));
  v6 = *(_QWORD *)(a1 + 32);
  v11 = _NSConcreteStackBlock;
  v12 = 3221225472;
  v13 = sub_100026F44;
  v14 = &unk_1001B2650;
  v15 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[EKUIContextMenuActions menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:](EKUIContextMenuActions, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:", v5));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v4, "count") + 1));
  objc_msgSend(v8, "addObjectsFromArray:", v4);

  objc_msgSend(v8, "addObject:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v8));

  return v9;
}

id *sub_100026F44(id *result, uint64_t a2)
{
  if (a2 == 8)
    return (id *)objc_msgSend(result[4], "attemptDisplayReviewPrompt");
  return result;
}

void sub_10002719C(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100027214;
  v2[3] = &unk_1001B26A0;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);

}

id sub_100027214(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 40), 1, 1, 0);
}

id sub_100027400(id *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  if (a2 == 3)
    return _objc_msgSend(a1[6], "setEditing:animated:", 0, 1);
  objc_storeStrong((id *)a1[4] + 10, a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  objc_msgSend(v3, "beginUpdates");

  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tableView"));
  v6 = objc_msgSend(v4, "tableView:numberOfRowsInSection:", v5, objc_msgSend(*((id *)a1[4] + 10), "section"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", a1[5]));
    objc_msgSend(v7, "deleteRowsAtIndexPaths:withRowAnimation:", v8, 2);
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", objc_msgSend(*((id *)a1[4] + 10), "section")));
    objc_msgSend(v7, "deleteSections:withRowAnimation:", v8, 2);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tableView"));
  objc_msgSend(v9, "endUpdates");

  return objc_msgSend(a1[4], "performSelector:withObject:afterDelay:", "_clearSwipedRow", 0, 1.0);
}

void sub_1000276B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 == 2)
  {
    v3 = a1[5];
    v4 = *(void **)(a1[4] + 8);
    v11 = 0;
    v5 = (id *)&v11;
    v6 = &v11;
    v7 = 2;
  }
  else if (a2 == 1)
  {
    v3 = a1[5];
    v4 = *(void **)(a1[4] + 8);
    v12 = 0;
    v5 = (id *)&v12;
    v6 = &v12;
    v7 = 1;
  }
  else
  {
    if (a2)
    {
      v8 = 0;
      goto LABEL_9;
    }
    v3 = a1[5];
    v4 = *(void **)(a1[4] + 8);
    v13 = 0;
    v5 = (id *)&v13;
    v6 = &v13;
    v7 = 0;
  }
  objc_msgSend(v4, "removeEvent:withSpan:error:", v3, v7, v6);
  v8 = *v5;
LABEL_9:
  v9 = a1[4];
  v10 = *(void **)(v9 + 88);
  *(_QWORD *)(v9 + 88) = 0;

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100028710(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateBadge");

}

void sub_100029498(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setHidden:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;

}

_QWORD *sub_10002AEA0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 152))
    return objc_msgSend(*(id *)(v1 + 144), "removeFromSuperview");
  return result;
}

void sub_10002B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B080(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002B090(uint64_t a1)
{

}

void sub_10002B098(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  CGRect v14;

  v13 = a2;
  objc_msgSend(v13, "frame");
  if (CGRectContainsPoint(v14, *(CGPoint *)(a1 + 48))
    && objc_msgSend(v13, "conformsToProtocol:", &OBJC_PROTOCOL___MonthInfiniteScrollSubview))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v5, "convertPoint:toView:", v13, *(double *)(a1 + 48), *(double *)(a1 + 56));
    v7 = v6;
    v9 = v8;

    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dateAtPoint:", v7, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    *a3 = 1;
  }

}

id sub_10002B370(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setAlpha:", 0.0);
}

void sub_10002B388(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 224);
  *(_QWORD *)(v2 + 224) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 216);
  *(_QWORD *)(v4 + 216) = 0;

}

void sub_10002BA9C(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  InfiniteScrollViewSubview *v3;

  v3 = a2;
  if (-[InfiniteScrollViewSubview conformsToProtocol:](v3, "conformsToProtocol:", &OBJC_PROTOCOL___MonthInfiniteScrollSubview))-[InfiniteScrollViewSubview setHighlightedDayRange:](v3, "setHighlightedDayRange:", 0x7FFFFFFFFFFFFFFFLL, 0);

}

void sub_10002BB30(uint64_t a1, void *a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v3 = objc_msgSend(v14, "conformsToProtocol:", &OBJC_PROTOCOL___MonthInfiniteScrollSubview);
  v4 = v14;
  if (v3)
  {
    v5 = v14;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "calendarDate"));
    if (objc_msgSend(v6, "compare:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184)) == (id)-1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "endCalendarDate"));
      v8 = objc_msgSend(v7, "compare:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176));

      if (v8 == (id)1)
      {
        v9 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "calendarDate"));
        v11 = (uint64_t)objc_msgSend(v9, "differenceInDays:", v10);

        v12 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "differenceInDays:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176))+ (v11 & (v11 >> 63))+ 1;
        v13 = v11 & ~(v11 >> 63);
LABEL_7:
        objc_msgSend(v5, "setHighlightedDayRange:", v13, v12);

        v4 = v14;
        goto LABEL_8;
      }
    }
    else
    {

    }
    v12 = 0;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_8:

}

id sub_10002BE54(uint64_t a1)
{
  void *v2;
  __int128 v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _OWORD v11[3];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 224);
  v3 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v11[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v11[1] = v3;
  v11[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(v2, "setTransform:", v11);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "frame");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v4, "convertPoint:fromView:", v5, *(double *)(a1 + 40), *(double *)(a1 + 48));
  v7 = v6;
  v9 = v8;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setFrame:", v7, v9, *(double *)(a1 + 56), *(double *)(a1 + 64));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setAlpha:", 0.0);
}

uint64_t sub_10002BF2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10002C66C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_10002C67C(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002C744;
  v4[3] = &unk_1001B2538;
  v5 = *(id *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002C750;
  v2[3] = &unk_1001B25D0;
  v3 = *(id *)(a1 + 32);
  +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 0, v4, v2, 1.0, 0.5);

}

id sub_10002C744(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_10002C750(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_10002CEFC(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  double v17;
  double v18;
  CGAffineTransform v19;
  CGAffineTransform v20;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 224);
  CGAffineTransformMakeScale(&v20, 1.3, 1.3);
  v19 = v20;
  objc_msgSend(v2, "setTransform:", &v19);
  objc_msgSend(v2, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "occurrence"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "startDate"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "occurrence"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "endDate"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "calendar"));
  v16 = objc_msgSend(v12, "isSameDayAsDate:inCalendar:", v14, v15);

  v17 = v8 * 0.769230769;
  if (v16)
  {
    v17 = v8 + 23.08;
    v18 = v4 + -11.54;
  }
  else
  {
    v18 = v4 + v8 * 0.769230769 * 0.15;
  }
  objc_msgSend(v2, "setFrame:", v18, v6 + -30.0, v17, v10);

}

id sub_10002D078(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "draggedOccurrenceWasCancelled:atPoint:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(double *)(a1 + 40), *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "removeDraggingOccurrenceAnimated:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
}

void sub_10002D2D8(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  double *v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  id v34;

  v34 = *(id *)(*(_QWORD *)(a1 + 32) + 224);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v34, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "convertRect:fromView:", v11, v4, v6, v8, v10);
  v13 = v12;
  v15 = v14;

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "occurrence"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "startDate"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "occurrence"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "endDate"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "calendar"));
  v21 = objc_msgSend(v17, "isSameDayAsDate:inCalendar:", v19, v20);

  v22 = *(double **)(a1 + 32);
  v23 = *(double *)(a1 + 40) + v22[25];
  if (v21)
    v23 = v23 + v13 * -0.15 / 1.3 + -8.87692308;
  v24 = *(double *)(a1 + 48) + v22[26] + -30.0;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "view"));
  v26 = CalRoundRectToScreenScale(v23, v24, v13, v15);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v25, "convertRect:fromView:", v33, v26, v28, v30, v32);
  objc_msgSend(v34, "setFrame:");

}

id sub_10002DB68(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeDraggingOccurrenceAnimated:", 1);
  objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
  return objc_msgSend(*(id *)(a1 + 32), "selectOccurrence:inWeek:", 0, 0);
}

void sub_10002DBA4(uint64_t a1, int a2, uint64_t a3)
{
  id *v4;
  void *v6;
  _QWORD v7[6];

  v4 = *(id **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v4[27], "rollback");
    objc_msgSend(*(id *)(a1 + 32), "draggedOccurrenceWasCancelled:atPoint:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(double *)(a1 + 48), *(double *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 32), "removeDraggingOccurrenceAnimated:", 1);
    objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
    objc_msgSend(*(id *)(a1 + 32), "selectOccurrence:inWeek:", 0, 0);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dateAtPoint:", *(double *)(a1 + 64), *(double *)(a1 + 72)));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10002DC94;
    v7[3] = &unk_1001B2838;
    v7[4] = *(_QWORD *)(a1 + 32);
    v7[5] = a3;
    objc_msgSend(v4, "_animateDraggingOccurrenceToDate:atLastPosition:dropPoint:completion:", v6, 1, v7, *(double *)(a1 + 48), *(double *)(a1 + 56));

  }
}

id sub_10002DC94(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_saveDraggedEventWithSpan:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "removeDraggingOccurrenceAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
  return objc_msgSend(*(id *)(a1 + 32), "selectOccurrence:inWeek:", 0, 0);
}

id sub_10002DCDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

id sub_10002DCFC(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setClipsToBounds:", 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setNeedsDisplay");
}

id sub_10002DD38(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeDraggingOccurrenceAnimated:", 1);
  objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
  return objc_msgSend(*(id *)(a1 + 32), "selectOccurrence:inWeek:", 0, 0);
}

void sub_10002E294(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  _QWORD v4[4];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "removeAllWeekHighlights");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002E360;
  v4[3] = &unk_1001B2538;
  v5 = *(id *)(a1 + 40);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002E36C;
  v2[3] = &unk_1001B25D0;
  v3 = *(id *)(a1 + 40);
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v4, v2, 0.2);

}

id sub_10002E360(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_10002E36C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

uint64_t sub_10002E48C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return NSRequestConcreteImplementation(v2, v1, a1);
}

uint64_t sub_10002E49C(uint64_t a1)
{
  return objc_opt_class(a1);
}

void sub_10002E4F8(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F5FD8;
  qword_1001F5FD8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F5FD8, "addAnchoredValue:forWindowSizeWidth:", 2, 15.0);
}

void sub_10002E604(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F5FE8;
  qword_1001F5FE8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F5FE8, "addAnchoredValue:forWindowSizeWidth:", 2, 140.0);
}

void sub_10002E698(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F5FF8;
  qword_1001F5FF8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F5FF8, "addAnchoredValue:forWindowSizeWidth:", 2, 164.0);
}

void sub_10002E7A4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6008;
  qword_1001F6008 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6008, "addAnchoredValue:forWindowSizeWidth:", 2, 28.0);
}

void sub_10002E880(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6018;
  qword_1001F6018 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6018, "addAnchoredValue:forWindowSizeWidth:", 2, 13.0);
}

void sub_10002E91C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6028;
  qword_1001F6028 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6028, "addAnchoredValue:forWindowSizeWidth:", 2, 18.0);
}

void sub_10002E9C0(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6038;
  qword_1001F6038 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6038, "addAnchoredValue:forWindowSizeWidth:", 2, 37.0);
}

void sub_10002EA5C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6048;
  qword_1001F6048 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6048, "addAnchoredValue:forWindowSizeWidth:", 2, 20.0);
}

void sub_10002EAF4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6058;
  qword_1001F6058 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6058, "addAnchoredValue:forWindowSizeWidth:", 2, 21.0);
}

void sub_10002FE44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[128];

  v16 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "occurrenceBlocks", 0));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v10)
        objc_enumerationMutation(v7);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (v16)
        break;
      if (v9 == (id)++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
        if (v9)
          goto LABEL_3;
        break;
      }
    }
  }

  if (v16)
    *a5 = 1;
}

void sub_100030078(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceView"));
  objc_msgSend(v3, "setUsesSmallText:", v2);

}

void sub_100030278(uint64_t a1, void *a2, unint64_t a3)
{
  double v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL8 v10;
  id v11;

  v4 = (double)a3;
  v5 = *(void **)(a1 + 32);
  v11 = a2;
  objc_msgSend(v5, "_dayWidth");
  v7 = v6 * v4;
  objc_msgSend(*(id *)(a1 + 32), "_dayWidth");
  v8 = *(double *)(a1 + 40);
  v10 = v7 + v9 > v8 && v7 <= v8;
  objc_msgSend(v11, "setOverlayShowsMonth:animated:", v10, *(unsigned __int8 *)(a1 + 48));

}

void sub_1000308DC(uint64_t a1, void *a2)
{
  void *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "occurrenceView"));
  v4 = (char *)objc_msgSend(v9, "rangeStart");
  if (v4 <= objc_msgSend(v9, "rangeEnd"))
  {
    while (v4 < objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "count"))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectAtIndexedSubscript:", v4));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "date"));

      LODWORD(v5) = objc_msgSend(*(id *)(a1 + 32), "_shouldAnnotateAppEntitiesForDay:", v6);
      if ((_DWORD)v5)
      {
        v8 = 1;
        goto LABEL_7;
      }
      if (v4++ >= objc_msgSend(v9, "rangeEnd"))
        break;
    }
  }
  v8 = 0;
LABEL_7:
  objc_msgSend(v3, "setShouldAnnotateAppEntities:", v8);

}

void sub_100030CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100030CE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100030CF8(uint64_t a1)
{

}

void sub_100030D00(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v12 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "occurrenceView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "occurrence"));
  LODWORD(v6) = objc_msgSend(v6, "isEqual:", v8);

  if ((_DWORD)v6)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "occurrenceView"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    *a3 = 1;
  }

}

void sub_100030EAC(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceView"));
  objc_msgSend(v3, "setUserInteractionEnabled:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 251));

}

void sub_100030F78(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "occurrenceView"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrence"));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v5)
  {
    v6 = *(unsigned __int8 *)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "occurrenceView"));
    objc_msgSend(v7, "setDimmed:", v6);

  }
}

void sub_100031098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000310B0(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

void sub_100031214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100031234(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  unsigned int v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceView"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "occurrence"));
  v7 = objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_1000313B8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceView"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1000314D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000314E8(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;

  v32 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isBirthday"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "occurrence"));
    v7 = objc_msgSend(v6, "isBirthday");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "occurrence"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "startCalendarDate"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dayComponents"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startCalendarDate"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dayComponents"));
      if (objc_msgSend(v11, "isEqual:", v13))
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "occurrence"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "birthdayContactIdentifier"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "birthdayContactIdentifier"));
        if (objc_msgSend(v14, "isEqual:", v15))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "occurrence"));
          v29 = v8;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "uniqueIdentifier"));
          v28 = v9;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier"));
          v27 = objc_msgSend(v16, "isEqual:", v17);

          v18 = v32;
          if (!v27)
            goto LABEL_11;
          goto LABEL_8;
        }

      }
      v18 = v32;
      goto LABEL_11;
    }
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "occurrence"));
  v21 = objc_msgSend(v20, "isEqual:", *(_QWORD *)(a1 + 32));

  v18 = v32;
  if (v21)
  {
LABEL_8:
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "occurrenceView"));
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;

    v18 = v32;
    *a3 = 1;
  }
LABEL_11:

}

void sub_1000319BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000319D4(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (a1[6] == a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "occurrenceBlocks", 0));
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "occurrenceView"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "occurrence"));
          v15 = objc_msgSend(v14, "isEqual:", a1[4]);

          if (v15)
          {
            v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "occurrenceView"));
            v17 = *(_QWORD *)(a1[5] + 8);
            v18 = *(void **)(v17 + 40);
            *(_QWORD *)(v17 + 40) = v16;

            *a5 = 1;
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v9);
    }

  }
}

void sub_100031D84(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceView"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "addObject:", v3);
    objc_msgSend(v4, "setHidden:", 1);
    objc_msgSend(v4, "setOccurrence:", 0);
    v3 = v4;
  }

}

void sub_100031E44(uint64_t a1, void *a2)
{
  void *v3;
  NSMutableDictionary *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "rangeStart")));
  v4 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "objectForKeyedSubscript:", v3));
  if (!v4)
  {
    v4 = objc_opt_new(NSMutableDictionary);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "setObject:forKeyedSubscript:", v4, v3);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "occurrenceView"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "occurrence"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "calendarItemIdentifier"));

  if (v5 && v7)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v5, v7);
    objc_msgSend(v8, "setOccurrenceView:", 0);
  }

}

id sub_100032858(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100034008(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100034020(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  CGRect v19;
  CGRect v20;

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "occurrenceBlocks", 0));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v6);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), "occurrenceView"));
        objc_msgSend(v12, "frame");
        if (CGRectIntersectsRect(v19, *(CGRect *)(a1 + 40)))
        {
          if (objc_msgSend(v12, "isHidden"))
          {
            objc_msgSend(v12, "frame");
            if (!CGRectIsEmpty(v20))
              objc_msgSend(v12, "setHidden:", 0);
          }
          v9 = 1;
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);

    if ((v9 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_QWORD *)(v13 + 24) < a4)
        *(_QWORD *)(v13 + 24) = a4;
    }
  }
  else
  {

  }
}

void sub_10003519C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6068;
  qword_1001F6068 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6068, "setRoundingType:", 4);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 64, 2.0);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 256, 2.0);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 1024, 2.0);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 4096, 3.0);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 2048, 4.0);
  objc_msgSend((id)qword_1001F6068, "addAnchoredValue:forWindowSizeHeight:", 0x2000, 6.0);
}

void sub_1000356AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000356C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  uint64_t v8;

  result = objc_msgSend(*(id *)(a1 + 32), "useMultiDayHeaderStyle");
  if (!(_DWORD)result || *(_QWORD *)(a1 + 48) == a2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (*(_QWORD *)(v8 + 24) <= a4)
      *(_QWORD *)(v8 + 24) = a4 + 1;
  }
  return result;
}

void sub_100036188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000361C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  unsigned int v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  void *v30;
  double v31;
  double v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];

  v6 = a3;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "occurrenceBlocks"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  v9 = 0.0;
  v10 = 0.0;
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v12)
          objc_enumerationMutation(v7);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), "occurrenceView"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "currentImageState"));
        v16 = objc_msgSend(v15, "requiresLanguageAwarePadding");

        v17 = 0.0;
        if (v16)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "currentImageState"));
          objc_msgSend(v18, "totalLanguageAwareHeightPadding");
          v17 = v19;

        }
        if (v17 > v10)
          v10 = v17;

      }
      v11 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    }
    while (v11);
  }

  v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v21));

  if (v22)
  {
    objc_msgSend(v22, "doubleValue");
    v9 = v23;
  }
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "occurrenceBlocks"));
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v26; j = (char *)j + 1)
      {
        if (*(_QWORD *)v39 != v27)
          objc_enumerationMutation(v24);
        v29 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "occurrenceView"));
        objc_msgSend(*(id *)(a1 + 32), "_frameForOccurrenceBlock:index:yPos:padding:", v29, a4, v9, v10);
        objc_msgSend(v30, "setFrame:");
        objc_msgSend(v30, "requestContentIfNeeded:completion:", *(_QWORD *)(a1 + 56), 0);

      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
    }
    while (v26);
  }

  objc_msgSend(*(id *)(a1 + 32), "occurrenceHeight");
  v32 = v9 + v10 + v31;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v32 + 3.0));
  v34 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  objc_msgSend(v34, "setObject:forKeyedSubscript:", v33, v35);

  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (v32 > *(double *)(v36 + 24))
    *(double *)(v36 + 24) = v32;

}

void sub_10003665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100036674(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "occurrenceBlocks", 0));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10), "occurrenceView"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "occurrence"));
        v13 = objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 32));

        if (v13)
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4;
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);
  }

}

void sub_100037540(id a1)
{
  +[EKFeatureSet userAcknowledgedSplashScreen](EKFeatureSet, "userAcknowledgedSplashScreen");
}

uint64_t sub_100037660(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100037944(int8x16_t *a1)
{
  id v1;
  int8x16_t v2;
  _QWORD block[4];
  int8x16_t v4;

  if (a1[2].i64[0])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000379C4;
    block[3] = &unk_1001B26A0;
    v2 = a1[2];
    v1 = (id)v2.i64[0];
    v4 = vextq_s8(v2, v2, 8uLL);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

id sub_1000379C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "continueSearchWithTerm:", *(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000379D0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (v1)
    return objc_msgSend(*(id *)(result[5] + 24), "continueSearchWithTerm:animated:removeViewControllersIncapableOfSearchIfNeeded:", v1, 1, 0);
  return result;
}

id sub_100037C48(uint64_t a1)
{
  uint64_t v3;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "splitBehavior") == (id)2 || *(_BYTE *)(a1 + 40) == 0)
    v3 = 3;
  else
    v3 = 2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setPreferredDisplayMode:", v3);
  return objc_msgSend(*(id *)(a1 + 32), "updateSearchViewControllerToolbar");
}

void sub_100037DB4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "searchEnding");

}

void sub_100037DE4(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setViewController:forColumn:", 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setPreferredDisplayMode:", 1);
  objc_msgSend(*(id *)(a1 + 32), "teardownSearch");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "searchEnded");

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
}

void sub_100038388(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 104));
  objc_msgSend(WeakRetained, "setShowsCancelButton:animated:", 1, 1);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v3, "searchBegan");

}

uint64_t sub_1000383EC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = 0;
  return result;
}

id sub_10003851C(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 24), "searchResultsViewController:didSelectEvent:", a1[5], a1[6]);
}

void sub_100038834(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "searchEnding");

}

void sub_100038864(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  void *v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setViewController:forColumn:", 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setPreferredDisplayMode:", 1);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v2 + 104));
  objc_msgSend(v3, "searchBarCancelButtonClicked:", WeakRetained);

  objc_msgSend(*(id *)(a1 + 32), "teardownSearch");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v5, "searchEnded");

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
}

void sub_100038C98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_detailViewControllerAppeared:", EKEventViewControllerDidAppearNotification, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedTest:", *(_QWORD *)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v4, "startedSubTest:forTest:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rootNavigationController"));
  objc_msgSend(v6, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 56), 1, 1, 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100038DFC;
  v8[3] = &unk_1001B2C88;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 64);
  objc_msgSend(v7, "installCACommitCompletionBlock:", v8);

}

void sub_100038DFC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "finishedSubTest:forTest:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedSubTest:forTest:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_100038FEC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "eventStore"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[EKEvent eventWithEventStore:](EKEvent, "eventWithEventStore:", v2));

  v4 = CUIKNowDate();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setStartDate:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dateByAddingTimeInterval:", 3600.0));
  objc_msgSend(v3, "setEndDate:", v7);

  objc_msgSend(v3, "setTitle:", CFSTR("Perf test event"));
  v8 = (void *)qword_1001F6088;
  qword_1001F6088 = (uint64_t)v3;

}

void sub_1000392B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_detailViewControllerAppeared:", EKEventViewControllerDidAppearNotification, 0);

  if (objc_msgSend(*(id *)(a1 + 32), "shouldWaitForAttendeeLoading"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_attendeesDidFinishLoading:", EKEventDetailsDidFinishLoadingAttendeesNotification, 0);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v4, "startedTest:", *(_QWORD *)(a1 + 40));

  if (objc_msgSend(*(id *)(a1 + 32), "shouldWaitForAttendeeLoading"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventDetailsDidShowSubtestName"));
    objc_msgSend(v5, "startedSubTest:forTest:", v6, *(_QWORD *)(a1 + 40));

  }
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rootNavigationController"));
  objc_msgSend(v7, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 48), 1, 1, 0);

}

void sub_100039758(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_detailViewControllerAppeared:", EKEventViewControllerDidAppearNotification, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedTest:", *(_QWORD *)(a1 + 40));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v4, "startedSubTest:forTest:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rootNavigationController"));
  objc_msgSend(v6, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 56), 1, 1, 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000398BC;
  v8[3] = &unk_1001B2C88;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 64);
  objc_msgSend(v7, "installCACommitCompletionBlock:", v8);

}

void sub_1000398BC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "finishedSubTest:forTest:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedSubTest:forTest:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_100039CE4(uint64_t a1)
{
  CarplayDataManager *v2;
  CarplayDataManager *v3;
  void *v4;
  id v5;

  v2 = [CarplayDataManager alloc];
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "eventStore"));
  v3 = -[CarplayDataManager initWithEventStore:](v2, "initWithEventStore:", v5);
  v4 = (void *)qword_1001F6098;
  qword_1001F6098 = (uint64_t)v3;

}

id sub_10003A078(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_refreshTodayView");
}

void sub_10003A828(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", EKEventStoreChangedObjectIDsUserInfoKey));

  v3 = *(_QWORD *)(a1 + 40);
  if (v4)
    objc_msgSend(*(id *)(v3 + 64), "addObjectsFromArray:", v4);
  else
    *(_BYTE *)(v3 + 72) = 1;
  objc_msgSend(*(id *)(a1 + 40), "_refreshTodayView");

}

id sub_10003A910(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v2 = CUIKInvalidateToday();
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v6 = CUIKNowDate(v2, v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = CUIKStringForDateAndDayOfWeekInCalendarTimezoneWithFormattingContext(v7, 0, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_msgSend(v3, "updateHeaderText:", v9);

  v13 = CUIKNowDate(v10, v11, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = CUIKStringForDateAndDayOfWeekInCalendarTimezoneWithFormattingContext(v14, 0, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setSectionTitle:", v16);

  return objc_msgSend(*(id *)(a1 + 32), "_refreshTodayView");
}

id sub_10003AA18(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_refreshTodayView");
}

id sub_10003AB24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setViewStatesForCachedEventCollection");
}

id sub_10003C0D4(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "startedTest:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "_mainLoop");
}

void sub_10003C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003C434(uint64_t a1)
{
  id *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "backgroundImage"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithPatternImage:](UIColor, "colorWithPatternImage:", v2));
    objc_msgSend(v6, "setBackgroundColor:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
    objc_msgSend(v6[1], "setBackgroundColor:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    objc_msgSend(v6[1], "setTextColor:", v5);

    WeakRetained = v6;
  }

}

id sub_10003C67C(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", v1);
}

id sub_10003C698(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", v1);
}

void sub_10003C928(id *a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = objc_msgSend((id)objc_opt_class(a1[4]), "testName");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(a1[5], "startedTest:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "traitCollection"));
  v5 = objc_msgSend(v4, "horizontalSizeClass");

  if (v5 == (id)2)
    objc_msgSend(a1[6], "setCurrentSidebarState:", 1);
  else
    objc_msgSend(a1[7], "showCalendarsAnimated:completion:", 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003CA2C;
  v8[3] = &unk_1001B26A0;
  v9 = a1[5];
  v10 = v3;
  v7 = v3;
  objc_msgSend(v6, "installCACommitCompletionBlock:", v8);

}

id sub_10003CA2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest:waitForCommit:extraResults:", *(_QWORD *)(a1 + 40), 1, 0);
}

void sub_10003D7F4(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("PhoneMonthListAnimator_ListToMonthAnimationCompleteNotification"), 0);

}

void sub_10003D840(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("PhoneMonthListAnimator_MonthToListAnimationCompleteNotification"), 0);

}

id sub_10003D900(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
}

void sub_10003DD18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  objc_msgSend(v2, "setSplitStateOpen:", 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v4, "setAlpha:", 0.0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v6, "frame");
  v8 = v7;
  v10 = v9;

  objc_msgSend(*(id *)(a1 + 32), "listViewNormalLocation");
  v12 = v11;
  v14 = v13;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "view"));
  objc_msgSend(v16, "setFrame:", v12, v14, v8, v10);

  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "view"));
  objc_msgSend(v17, "setAlpha:", 1.0);

}

void sub_10003DE40(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 200000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003DEB8;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10003DEB8(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_10003DF04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dayInitialsHeaderView"));
  objc_msgSend(v5, "setAlpha:", 0.0);

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v11 = v10;
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dayInitialsHeaderView"));
  objc_msgSend(v12, "setFrame:", v7, 0.0, v9, v11);

}

uint64_t sub_10003DFF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dayInitialsHeaderView"));
  objc_msgSend(v5, "setAlpha:", 1.0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v6, "setSuppressLayout:", 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v7, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10003E4E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  objc_msgSend(v2, "setSplitStateOpen:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v4, "setAlpha:", 1.0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v6, "frame");
  v8 = v7;
  v10 = v9;

  v11 = *(double *)(a1 + 40);
  v12 = *(double *)(a1 + 48);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "view"));
  objc_msgSend(v14, "setFrame:", v11, v12, v8, v10);

  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "view"));
  objc_msgSend(v15, "setAlpha:", 0.0);

}

void sub_10003E5FC(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v3, v5, v7, v9);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dayInitialsHeaderView"));
  objc_msgSend(v13, "setAlpha:", 1.0);

  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "animatableDateLabel"));
  objc_msgSend(v14, "setAlpha:", 1.0);

}

uint64_t sub_10003E6E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dateLabel"));
  objc_msgSend(v3, "setHidden:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "animatableDateLabel"));
  objc_msgSend(v5, "setAlpha:", 0.0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v6, "setSuppressLayout:", 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v7, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10003F56C(uint64_t a1)
{
  _QWORD block[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "numberOfDaysWithCachedOccurrences");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003F5E8;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10003F5E8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_reloadOccurrenceData");
}

void sub_10003FBA8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setSelectedOccurrences:", v2);

}

id sub_10003FC38(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)EKUIReadonlyEventViewController), "initWithEvent:", *(_QWORD *)(a1 + 32));
}

id sub_10003FC68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectedOccurrences"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[EKUIContextMenuActions menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:](EKUIContextMenuActions, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:", v5, *(_QWORD *)(a1 + 32), 0, 0, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v4, "count") + 1));
  objc_msgSend(v7, "addObjectsFromArray:", v4);

  objc_msgSend(v7, "addObject:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v7));

  return v8;
}

void sub_10003FE18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int IsCompactInViewHierarchy;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  IsCompactInViewHierarchy = EKUICurrentWidthSizeClassIsCompactInViewHierarchy(v2, v3);

  v5 = *(_QWORD *)(a1 + 32);
  if (IsCompactInViewHierarchy)
  {
    v6 = *(void **)(v5 + 64);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "event"));
    objc_msgSend(v6, "compactMonthListViewController:didSelectEvent:showMode:", v5);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactMonthListViewDelegate"));
    v8 = objc_opt_respondsToSelector(v7, "compactMonthListViewController:wantsToCommitViewControllerFromPreview:");

    if ((v8 & 1) == 0)
      return;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactMonthListViewDelegate"));
    objc_msgSend(v9, "compactMonthListViewController:wantsToCommitViewControllerFromPreview:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }

}

void sub_100040754(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  if (a2 == 3)
  {
    _objc_msgSend(*(id *)(a1 + 48), "setEditing:animated:", 0, 1);
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v4, "deleteRowsAtIndexPaths:withRowAnimation:", v3, 2);

  }
}

void sub_100040A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100040A60(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (a2 == 2)
  {
    v6 = (void *)WeakRetained[1];
    v8 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 32);
    v14 = 0;
    v9 = (id *)&v14;
    v10 = &v14;
    v11 = 2;
  }
  else if (a2 == 1)
  {
    v6 = (void *)WeakRetained[1];
    v8 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 32);
    v15 = 0;
    v9 = (id *)&v15;
    v10 = &v15;
    v11 = 1;
  }
  else
  {
    if (a2)
    {
      v12 = 0;
      goto LABEL_9;
    }
    v6 = (void *)WeakRetained[1];
    v8 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 32);
    v16 = 0;
    v9 = (id *)&v16;
    v10 = &v16;
    v11 = 0;
  }
  objc_msgSend(v6, "removeEvent:withSpan:error:", v7, v11, v10);
  v12 = *v9;
  objc_msgSend(v5, "_purgeCachedOccurrence:", *v8);
LABEL_9:
  v13 = (void *)v5[5];
  v5[5] = 0;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100041A78(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v4 = v2;
  if (*(_BYTE *)(a1 + 49))
    v3 = 2;
  else
    v3 = 1;
  objc_msgSend(v2, "inboxViewControllerWantsShowEvent:animated:showMode:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), v3);

}

uint64_t sub_100041FBC(uint64_t a1)
{
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "doneBlock"));

  if (v2)
  {
    v3 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "doneBlock"));
    v3[2](v3, *(_QWORD *)(a1 + 32), 0);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1000422A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLabelElementsVisible:", 1);
}

void sub_100042AD8(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  double v5;
  NSAttributedStringKey v6;
  void *v7;

  v6 = NSFontAttributeName;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_normalFont"));
  v7 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));

  v3 = objc_msgSend(CFSTR(" "), "sizeWithAttributes:", v2);
  qword_1001F60E8 = CalRoundToScreenScale(v3, v4, v5);

}

id GetFormatAnd_d_FieldRangeFor_Ed(void *a1, uint64_t *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  UChar32 v19;
  void *v21;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[DayNavigationViewCell _findFormatForLocale:usingExampleDate:](LargeDayNavigationViewCell, "_findFormatForLocale:usingExampleDate:", v3, v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter dateFormatFromTemplate:options:locale:](NSDateFormatter, "dateFormatFromTemplate:options:locale:", CFSTR("d"), 0, v3));
  v7 = sub_100043604(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_100043604(v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (uint64_t)objc_msgSend(v8, "rangeOfString:", v10);
  *a2 = v11;
  a2[1] = v12;
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v13 = (uint64_t)+[DayNavigationViewCell _rangeForFirstSequenceOfDCharacters:](DayNavigationViewCell, "_rangeForFirstSequenceOfDCharacters:", v8);
    *a2 = v13;
    a2[1] = v12;
    if (v13 < 0)
      goto LABEL_33;
  }
  else
  {
    v13 = v11;
    if (v11 < 0)
      goto LABEL_33;
  }
  v14 = v12 + v13;
  v15 = objc_msgSend(v8, "length");
  if (v14 < (unint64_t)v15 && objc_msgSend(v8, "characterAtIndex:", v14) == 100)
    ++v14;
  if (v14 < (unint64_t)v15
    && objc_msgSend(v8, "characterAtIndex:", v14 - 1) == 100
    && objc_msgSend(v8, "characterAtIndex:", v14) == 46)
  {
    ++v14;
  }
  v21 = v5;
  if (v13)
  {
    if (objc_msgSend(v8, "characterAtIndex:", v13 - 1) == 100)
      *a2 = --v13;
    if ((unint64_t)v13 >= 2)
    {
      v16 = objc_msgSend(v8, "characterAtIndex:", v13 - 1);
      if (v16 == 8208 || v16 == 45)
        --v13;
    }
  }
  v17 = 0;
  while (1)
  {
    v18 = v13 - 1;
    if (v13 < 1)
      break;
    v19 = objc_msgSend(v8, "characterAtIndex:", v13 - 1);
    if (u_isUWhiteSpace(v19) || u_ispunct(v19))
    {
      if ((v17 & 1) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
    if (u_isUAlphabetic(v19))
    {
      v17 = 1;
      --v13;
      if ((v19 - 65) > 0x39)
        continue;
      v13 = v18;
      if ((v19 - 97) >= 0xFFFFFFFA)
        continue;
    }
    goto LABEL_32;
  }
  if ((v17 & 1) == 0)
    goto LABEL_32;
  v13 = 0;
LABEL_31:
  *a2 = v13;
LABEL_32:
  a2[1] = v14 - *a2;
  v5 = v21;
LABEL_33:

  return v5;
}

id sub_100043604(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _BOOL4 v9;
  void *v10;
  __int16 v12;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 10));
  objc_msgSend(v2, "insertString:atIndex:", v1, 0);
  v3 = (uint64_t)objc_msgSend(v2, "length");
  if (v3 >= 1)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    do
    {
      v12 = 0;
      v7 = objc_msgSend(v2, "characterAtIndex:", v5);
      if (v7 == 39)
      {
        v6 ^= 1u;
      }
      else
      {
        v9 = v7 - 65 < 0x3A && v7 - 97 < 0xFFFFFFFA;
        if ((v6 & v9) == 1)
        {
          v12 = v7 - 8257;
          v6 = 1;
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &v12, 1));
          objc_msgSend(v2, "replaceCharactersInRange:withString:", v5, 1, v10);

        }
      }
      ++v5;
    }
    while (v4 != v5);
  }

  return v2;
}

uint64_t sub_1000438B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSRequestConcreteImplementation(a1, a2, a3);
}

uint64_t sub_1000438B8()
{
  uint64_t v0;

  return v0;
}

void sub_100044430(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "notificationName"));
  objc_msgSend(v2, "addObserver:selector:name:object:", v3, "_animationCompleted", v4, 0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "testName");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v5, "startedTest:", v7);
  v8 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_delaySubTestName");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_animationSubTestName");
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v5, "startedSubTest:forTest:", v9, v7);
  objc_msgSend(*(id *)(a1 + 32), "kickOffAnimation");
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000445B0;
  v16[3] = &unk_1001B2C88;
  v17 = v5;
  v18 = v9;
  v19 = v7;
  v20 = v11;
  v12 = v11;
  v13 = v7;
  v14 = v9;
  v15 = v5;
  objc_msgSend(v15, "installCACommitCompletionBlock:", v16);

}

id sub_1000445B0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:forTest:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:forTest:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_10004464C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "testName");
  v6 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_animationSubTestName");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "finishedSubTest:forTest:", v5, v6);
  objc_msgSend(v3, "finishedTest:", v6);

}

void sub_100045778(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "testName");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(*(id *)(a1 + 40), "startedTest:", v3);
  v4 = objc_msgSend(*(id *)(a1 + 48), "showInboxAnimated:completion:", 0, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100045838;
  v6[3] = &unk_1001B2538;
  v5 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v5, "finishedTest:waitForCommit:extraResults:withTeardownBlock:", v3, 1, 0, v6);

}

id sub_100045838(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerWithTransition:completion:", 0, 0);
}

void sub_100045FC8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100046024;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100046024(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setupWeekView");
}

void sub_10004A8C4(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v5), "layer", (_QWORD)v7));
        objc_msgSend(v6, "removeAllAnimations");

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

}

uint64_t sub_10004A9C8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 96) = 0;
  return result;
}

void sub_10004D060(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v2, "setContentOffset:animated:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48));

}

id sub_10004D0A4(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) = 0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(a1 + 32), "didEndScrolling");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setNeedsLayout");
  return objc_msgSend(*(id *)(a1 + 32), "reloadDataForViews:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10004E084(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10004E434(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004E444(uint64_t a1)
{

}

void sub_10004E44C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_10004E514(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_10004E5A4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  const char *v5;

  v2 = kCalUILogCarplayHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogCarplayHandle, OS_LOG_TYPE_INFO))
  {
    v4 = 136315138;
    v5 = "-[CarplayDataManager reloadEvents:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s beginning", (uint8_t *)&v4, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "_fetchUpcomingOccurrences:", *(_QWORD *)(a1 + 40));
  v3 = kCalUILogCarplayHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogCarplayHandle, OS_LOG_TYPE_INFO))
  {
    v4 = 136315138;
    v5 = "-[CarplayDataManager reloadEvents:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s complete", (uint8_t *)&v4, 0xCu);
  }
}

BOOL sub_10004EDD4(id a1, EKEvent *a2, NSDictionary *a3)
{
  return -[EKEvent participationStatus](a2, "participationStatus", a3) != (id)3;
}

void sub_10004EEF0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  void *v5;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone calendarTimeZone](NSTimeZone, "calendarTimeZone"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setTimeZone:", v2);
    v3 = kCalUILogCarplayHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogCarplayHandle, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Changed the cached event store's time zone to [%@]", (uint8_t *)&v4, 0xCu);
    }

  }
}

void sub_10004F654(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  id v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSString *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  id v43;

  v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllers"));
  if (objc_msgSend(v37, "containsObject:", *(_QWORD *)(a1 + 40)))
  {

    return;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedViewController"));
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if ((v3 & 1) == 0)
  {
    v4 = (id)kCalUILogHandle;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = objc_opt_class(UINavigationController);
      isKindOfClass = objc_opt_isKindOfClass(v5, v6);
      v8 = *(void **)(a1 + 40);
      if ((isKindOfClass & 1) != 0)
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "topViewController"));
      *(_DWORD *)buf = 138412290;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[83058884] Showing vc %@", buf, 0xCu);
      if ((isKindOfClass & 1) != 0)

    }
    v9 = objc_msgSend(*(id *)(a1 + 40), "prefersForcedModalShowViewController");
    v10 = *(void **)(a1 + 40);
    if (v9)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "modalPresentationDelegate"));
      v12 = objc_msgSend(v11, "presentationStyleOverrideForChildViewControllers");

      v13 = objc_msgSend(*(id *)(a1 + 40), "prefersToBePresentedFromApplicationRootViewController");
      v14 = *(void **)(a1 + 40);
      if (v13)
      {
        v15 = 1;
      }
      else
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "modalPresentationDelegate"));

        v14 = *(void **)(a1 + 40);
        if (!v20 || v12 == (id)-1)
          v15 = 6;
        else
          v15 = (uint64_t)v12;
      }
      objc_msgSend(v14, "setModalPresentationStyle:", v15);
      v28 = *(_QWORD *)(a1 + 40);
      v29 = objc_opt_class(EKExpandedReminderStackViewController);
      if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
        objc_msgSend(*(id *)(a1 + 40), "setModalTransitionStyle:", 12);
      v30 = objc_opt_class(*(_QWORD *)(a1 + 32));
      v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%@> presents <%@> with modal style %ld"), v30, objc_opt_class(*(_QWORD *)(a1 + 40)), objc_msgSend(*(id *)(a1 + 40), "modalPresentationStyle"));
      v16 = (id)objc_claimAutoreleasedReturnValue(v31);
      v32 = (void *)kCalUILogHandle;
      if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(_QWORD *)(a1 + 32);
        v34 = v32;
        v35 = (void *)objc_opt_class(v33);
        *(_DWORD *)buf = 138412802;
        v39 = v35;
        v40 = 2080;
        v41 = "-[UINavigationController(MobileCalUniversalShowViewControllerSignatureUsage) showViewController:sender:ani"
              "mated:completion:]_block_invoke";
        v42 = 2112;
        v43 = v16;
        v36 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "%@ [%s] %@", buf, 0x20u);

      }
      v17 = *(void **)(a1 + 32);
      v18 = *(id *)(a1 + 40);
      v19 = *(unsigned __int8 *)(a1 + 48);
    }
    else
    {
      if (!objc_msgSend(v10, "prefersToBePresentedFromUINavigationController"))
      {
        v21 = objc_opt_class(*(_QWORD *)(a1 + 32));
        v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%@> pushes <%@>"), v21, objc_opt_class(*(_QWORD *)(a1 + 40)));
        v16 = (id)objc_claimAutoreleasedReturnValue(v22);
        v23 = (void *)kCalUILogHandle;
        if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
        {
          v24 = *(_QWORD *)(a1 + 32);
          v25 = v23;
          v26 = (void *)objc_opt_class(v24);
          *(_DWORD *)buf = 138412802;
          v39 = v26;
          v40 = 2080;
          v41 = "-[UINavigationController(MobileCalUniversalShowViewControllerSignatureUsage) showViewController:sender:a"
                "nimated:completion:]_block_invoke";
          v42 = 2112;
          v43 = v16;
          v27 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%@ [%s] %@", buf, 0x20u);

        }
        objc_msgSend(*(id *)(a1 + 32), "pushViewController:animated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
        goto LABEL_27;
      }
      v16 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v16, "setModalPresentationStyle:", 3);
      v17 = *(void **)(a1 + 32);
      v18 = v16;
      v19 = 0;
    }
    objc_msgSend(v17, "presentViewController:animated:completion:", v18, v19, 0);
LABEL_27:

  }
}

uint64_t sub_10004FA60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10005028C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startTest");
}

id sub_10005035C(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[57])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rotationAnimationStartedNotificationName"));
    objc_msgSend(v3, "addObserver:selector:name:object:", v4, "_rotationAnimationStarted:", v5, 0);

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rotationAnimationCompleteNotificationName"));
    objc_msgSend(v6, "addObserver:selector:name:object:", v7, "_rotationAnimationCompleted:", v8, 0);

    v2 = *(_BYTE **)(a1 + 32);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "application"));
  objc_msgSend(v9, "startedTest:", *(_QWORD *)(a1 + 40));

  return _objc_msgSend(*(id *)(a1 + 32), "_rotationTest");
}

void sub_10005066C(uint64_t a1)
{
  _QWORD block[5];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 57))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000506DC;
    block[3] = &unk_1001B2538;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_1000506DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_rotationTest");
}

id sub_100050864(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_rotationTest");
}

void sub_100050E80(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_1001F6118;
  qword_1001F6118 = (uint64_t)v1;

}

void sub_100050EA8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_1001F6128;
  qword_1001F6128 = (uint64_t)v1;

}

void sub_100052940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005296C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005297C(uint64_t a1)
{

}

void sub_100052984(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceBlocks", 0));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v12 = objc_msgSend(v11, "startRange");
        v13 = objc_msgSend(v11, "length");
        v14 = *(_QWORD *)(a1 + 40);
        if (v14 >= (uint64_t)v12 && v14 <= (uint64_t)v12 + (uint64_t)v13)
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v11);
          *a4 = 1;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

}

void sub_100052C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100052C24(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isFilledForDay:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

id sub_10005326C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 0);
  return objc_msgSend(*(id *)(a1 + 40), "setNeedsDisplay");
}

int64_t sub_10005474C(id a1, id a2, id a3)
{
  id v4;
  void *v5;
  void *v6;
  int64_t v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrence"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "occurrence"));

  v7 = CUIKCompareEKEvents(v5, v6, 1);
  return v7;
}

id sub_100055400(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "animating") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "setHidden:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_layoutSingleOccurrence:index:numRows:drawTimeString:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
}

id sub_10005544C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_layoutSingleOccurrence:index:numRows:drawTimeString:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 0.0);
}

uint64_t sub_1000563A8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;

  if (a2 > a3 || a2 > 0x13)
  {
    v5 = a2;
    return v5 > 0x13;
  }
  else
  {
    v4 = 19;
    if (a3 < 0x13)
      v4 = a3;
    while (!*(_BYTE *)(a4 + 20 * *(_QWORD *)(a1 + 32) + a2))
    {
      v5 = a2 + 1;
      if (a2++ >= v4)
        return v5 > 0x13;
    }
    return 1;
  }
}

id sub_100056404(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  return objc_msgSend(*(id *)(a1 + 32), "update");
}

void sub_1000564D8(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[5];

  v2 = objc_alloc((Class)UIGraphicsImageRenderer);
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  v8 = objc_msgSend(v2, "initWithSize:", v3, v4);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000565BC;
  v9[3] = &unk_1001B3008;
  v9[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "imageWithActions:", v9)));
  v6 = objc_msgSend(v5, "CGImage");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v7, "setContents:", v6);

  objc_msgSend(*(id *)(a1 + 32), "setHasDrawnBefore:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);

}

void sub_1000565BC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(a2, "CGContext");
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  objc_msgSend(v3, "drawIntoContext:traitCollection:", v4, v5);

}

id sub_10005684C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[5];

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "selectedEventsForEditMenu"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "presentationControllerForEditMenu"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005699C;
  v13[3] = &unk_1001B2650;
  v13[4] = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[EKUIContextMenuActions menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:](EKUIContextMenuActions, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:", v6, v8, 0, 0, v13));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v4, "count") + 1));
  objc_msgSend(v10, "addObjectsFromArray:", v4);

  objc_msgSend(v10, "addObject:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v10));

  return v11;
}

void sub_10005699C(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  if (a2 == 8)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v4 = objc_opt_respondsToSelector(v3, "attemptDisplayReviewPrompt");

    if ((v4 & 1) != 0)
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v5, "attemptDisplayReviewPrompt");

    }
  }
}

void sub_100056F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100056F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v6[5];

  v5 = objc_msgSend(objc_alloc((Class)UIGraphicsImageRenderer), "initWithSize:", *(double *)(*(_QWORD *)(a1 + 32) + 40), *(double *)(*(_QWORD *)(a1 + 32) + 48));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100057004;
  v6[3] = &unk_1001B3008;
  v6[4] = *(_QWORD *)(a1 + 32);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageWithActions:", v6));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100057004(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  v5 = objc_msgSend(v4, "CGContext");

  objc_msgSend(v6, "drawIntoContext:traitCollection:", v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
}

void sub_10005707C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];

  if ((objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v3 = objc_msgSend(v2, "hasDrawnBefore");

    if ((v3 & 1) != 0)
    {
      v4 = objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)), "CGImage");
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "layer"));
      objc_msgSend(v6, "setContents:", v4);

    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      objc_msgSend(v7, "setAlpha:", 0.0);

      v8 = objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)), "CGImage");
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layer"));
      objc_msgSend(v10, "setContents:", v8);

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000571E4;
      v12[3] = &unk_1001B2538;
      v12[4] = *(_QWORD *)(a1 + 32);
      +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v12, 0.15);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v11, "setHasDrawnBefore:", 1);

  }
}

void sub_1000571E4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_1000572BC(id a1)
{
  _BackgroundViewRenderManager *v1;
  void *v2;

  v1 = objc_alloc_init(_BackgroundViewRenderManager);
  v2 = (void *)qword_1001F6150;
  qword_1001F6150 = (uint64_t)v1;

}

void sub_1000574B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000574CC(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  _QWORD block[4];
  id v5;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  objc_sync_enter(v2);
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "containsObject:", *(_QWORD *)(a1 + 40));
  objc_sync_exit(v2);

  if ((v3 & 1) == 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100057590;
    block[3] = &unk_1001B2538;
    v5 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_10005757C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100057590(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if ((objc_opt_respondsToSelector(v1, "didCompleteMonthWeekViewBackgroundRendering") & 1) != 0)
    objc_msgSend(v1, "didCompleteMonthWeekViewBackgroundRendering");

}

void sub_100057754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000577D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100057DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100057E14(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v3 = WeakRetained[40];
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v22;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v22 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v7);
          v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[LargeMonthWeekView gridlineColor](LargeMonthWeekView, "gridlineColor")));
          objc_msgSend(v8, "setBackgroundColor:", objc_msgSend(v9, "CGColor"));

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      }
      while (v5);
    }

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v10 = v2[41];
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v18;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v18 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v14);
          v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[LargeMonthWeekView weekendColor](LargeMonthWeekView, "weekendColor", (_QWORD)v17)));
          objc_msgSend(v15, "setBackgroundColor:", objc_msgSend(v16, "CGColor"));

          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
      }
      while (v12);
    }

  }
}

void sub_100058810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100058834(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100058844(uint64_t a1)
{

}

void sub_10005884C(uint64_t a1, void *a2)
{
  id v3;
  _BYTE *v4;
  _QWORD v5[5];
  __int128 v6;
  _QWORD *v7;
  _QWORD v8[4];

  v3 = a2;
  v4 = *(_BYTE **)(a1 + 32);
  if (v4[381])
  {
    objc_msgSend(v4, "_animateGridlinesAndBackgrounds");
    v4 = *(_BYTE **)(a1 + 32);
  }
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058918;
  v5[3] = &unk_1001B3078;
  v5[4] = v4;
  v6 = *(_OWORD *)(a1 + 40);
  v7 = v8;
  objc_msgSend(v4, "enumerateScrollViewSubviews:", v5);
  _Block_object_dispose(v8, 8);

}

void sub_100058900(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100058918(uint64_t a1, void *a2)
{
  id v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  void *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  _BOOL4 v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  id v34;
  CGRect v35;
  CGRect v36;

  v4 = a2;
  v34 = v4;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(v4, "frame");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v13, "bounds");
    v36.origin.x = v14;
    v36.origin.y = v15;
    v36.size.width = v16;
    v36.size.height = v17;
    v35.origin.x = v6;
    v35.origin.y = v8;
    v35.size.width = v10;
    v35.size.height = v12;
    v18 = CGRectIntersectsRect(v35, v36);

    v4 = v34;
    if (v18)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
      objc_msgSend(v19, "contentOffset");
      v21 = v20;
      v23 = v22;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
      objc_msgSend(v34, "convertPoint:fromView:", v24, v21, v23);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      *(_QWORD *)(v25 + 32) = v26;
      *(_QWORD *)(v25 + 40) = v27;

      objc_msgSend(v34, "frame");
      v4 = v34;
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = v28
                                                                  - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                              + 40);
    }
  }
  v29 = *(void **)(a1 + 32);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startDate"));
  objc_msgSend(v29, "_subviewHeightForDate:", v30);
  v32 = v31;

  objc_msgSend(v34, "frame");
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                          + 24)
                                                              + v32
                                                              - v33;
  objc_msgSend(v34, "setFrame:");

}

void sub_100058ABC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  CGFloat MaxY;
  uint64_t v5;
  double v6;
  CGFloat v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  CGRect v15;

  objc_msgSend(*(id *)(a1 + 32), "updateDraggedOccurrenceView");
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 381))
  {
    *(_BYTE *)(v2 + 381) = 0;
    objc_msgSend(*(id *)(a1 + 32), "_cleanupGridAnimation");
  }
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v3)
  {
    objc_msgSend(v3, "bounds");
    MaxY = CGRectGetMaxY(v15);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(double *)(v5 + 32);
    v7 = MaxY - *(double *)(v5 + 40);
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v8, "convertPoint:toView:", v9, v6, v7);
    v11 = v10;
    v13 = v12;

    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v14, "setContentOffset:animated:", 0, v11, v13);

  }
}

void sub_100058D28(uint64_t a1)
{
  id v2;
  uint64_t i;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[2];

  objc_msgSend(*(id *)(a1 + 32), "_removeAnimatedGridComponents");
  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 6);
  for (i = 0; i != 6; ++i)
  {
    v4 = objc_alloc_init((Class)UIView);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[LargeMonthWeekView gridlineColor](LargeMonthWeekView, "gridlineColor"));
    objc_msgSend(v4, "setBackgroundColor:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 320), "objectAtIndexedSubscript:", i));
    objc_msgSend(v6, "frame");
    objc_msgSend(v4, "setFrame:");

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v7, "addSubview:", v4);

    objc_msgSend(v2, "addObject:", v4);
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 336);
  *(_QWORD *)(v8 + 336) = v2;
  v10 = v2;

  v11 = objc_alloc_init((Class)UIView);
  v12 = objc_alloc_init((Class)UIView);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[LargeMonthWeekView weekendColor](LargeMonthWeekView, "weekendColor"));
  objc_msgSend(v11, "setBackgroundColor:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[LargeMonthWeekView weekendColor](LargeMonthWeekView, "weekendColor"));
  objc_msgSend(v12, "setBackgroundColor:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 328), "objectAtIndexedSubscript:", 0));
  objc_msgSend(v15, "frame");
  objc_msgSend(v11, "setFrame:");

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 328), "objectAtIndexedSubscript:", 1));
  objc_msgSend(v16, "frame");
  objc_msgSend(v12, "setFrame:");

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v17, "addSubview:", v11);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v18, "addSubview:", v12);

  v22[0] = v11;
  v22[1] = v12;
  v19 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 2));
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 344);
  *(_QWORD *)(v20 + 344) = v19;

}

void sub_100059EDC(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  -[InfiniteScrollViewSubview updateToday](a2, "updateToday", a3);
}

void sub_10005A190(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "startDate"));
  v4 = objc_msgSend(v3, "month");
  if (v4 == objc_msgSend(*(id *)(a1 + 32), "month"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "startDate"));
    objc_msgSend(v6, "setShowsFirstDayOfMonthLabel:animated:", objc_msgSend(v5, "year") != objc_msgSend(*(id *)(a1 + 32), "year"), 1);

  }
  else
  {
    objc_msgSend(v6, "setShowsFirstDayOfMonthLabel:animated:", 1, 1);
  }

}

void sub_10005A8D8(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6160;
  qword_1001F6160 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6160, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6160, "addAnchoredValue:forWindowSizeWidth:", 2048, 110.5);
  objc_msgSend((id)qword_1001F6160, "addAnchoredValue:forWindowSizeWidth:", 4096, 140.5);
  objc_msgSend((id)qword_1001F6160, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 169.0);
}

void sub_10005BDF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10005BE10(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  if ((objc_msgSend(*(id *)(a1 + 32), "isNew") & 1) != 0 || *(_QWORD *)(a1 + 72) == 3)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "model"));
    v4 = objc_claimAutoreleasedReturnValue(+[AddEventViewController editOrAddViewControllerForEventOrIntegrationWithEvent:model:creationMethod:eventEditViewDelegate:](AddEventViewController, "editOrAddViewControllerForEventOrIntegrationWithEvent:model:creationMethod:eventEditViewDelegate:", v2, v3, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 40)));

    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
  }
  else
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "augmentEventDetailsContext:", *(_QWORD *)(a1 + 48)));
    v7 = objc_claimAutoreleasedReturnValue(+[EKEventViewController eventDetailViewControllerWithEvent:delegate:context:](EKEventViewController, "eventDetailViewControllerWithEvent:delegate:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v10));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    objc_msgSend(*(id *)(a1 + 56), "setNavigationBarHidden:animated:", 1, 0);
    v6 = v10;
  }

}

uint64_t sub_10005BEF4(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "openAttendeesDetailItem");
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return EKUIPopFallbackSizingContextWithViewHierarchy(result);
  return result;
}

void sub_10005C488(uint64_t a1)
{
  double v1;
  double v2;
  id v3;

  v1 = *(double *)(a1 + 40);
  v2 = *(double *)(a1 + 48);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v3, "setContentOffset:", v1, v2);

}

void sub_10005C67C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_10005C6B0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedViewController"));

  if (v2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10005C770;
    v5[3] = &unk_1001B3158;
    v3 = *(void **)(a1 + 40);
    v6 = *(id *)(a1 + 32);
    v7 = v3;
    v8 = *(id *)(a1 + 48);
    objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 0, v5);

  }
  else
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(void))(v4 + 16))();
  }
}

uint64_t sub_10005C770(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "presentationControllerDidDismiss:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10005CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005CDF4(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  _BYTE v17[24];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "startCalendarDate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subviewForDate:", v3));

  if ((objc_msgSend(WeakRetained, "isReadyToShowViewControllersInsideEnqueueableManagedNavigationController:", *(_QWORD *)(a1 + 40)) & 1) != 0|| (objc_msgSend(WeakRetained, "isWaitingForBackgroundLoadingOfSelectedEventOccurrenceView") & 1) != 0)
  {
    v5 = (void *)kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v6 = v5;
      *(_DWORD *)v17 = 138412290;
      *(_QWORD *)&v17[4] = objc_opt_class(WeakRetained);
      v7 = *(id *)&v17[4];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ found the source occurrence view for the selected event yet.", v17, 0xCu);

    }
    objc_msgSend(v4, "setSelectedOccurrence:", *(_QWORD *)(a1 + 32), *(_OWORD *)v17);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "shownEventViewController"));
    if (v8)
    {
      v9 = *((unsigned __int8 *)WeakRetained + 248);

      if (!v9)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "draggedOccurrenceView"));

        if (v10)
        {
          objc_msgSend(WeakRetained, "removeDraggingOccurrenceAnimated:", 0);
          objc_msgSend(WeakRetained, "removeAllWeekHighlights");
        }
      }
    }
    objc_storeStrong(WeakRetained + 32, *(id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_scrollToWeekView:animated:completion:", v4, 1, *(_QWORD *)(a1 + 56));
  }
  else
  {
    v11 = (void *)kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v12 = v11;
      v13 = (void *)objc_opt_class(WeakRetained);
      v14 = v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "managedNavigationController"));
      *(_DWORD *)v17 = 138412546;
      *(_QWORD *)&v17[4] = v13;
      *(_WORD *)&v17[12] = 2112;
      *(_QWORD *)&v17[14] = objc_opt_class(v15);
      v16 = *(id *)&v17[14];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@ didn't find the source occurrence view for the selected event yet. It is probably still background loading. %@ will be notified once it loads.", v17, 0x16u);

    }
    objc_msgSend(WeakRetained, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:", 1, *(_QWORD *)v17, *(_OWORD *)&v17[8]);
  }
  objc_msgSend(*(id *)(a1 + 48), "setNeedsUpdateOfSupportedInterfaceOrientations");

}

id sub_10005D6D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
}

id sub_10005D888(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

id sub_10005D8B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

uint64_t sub_10005D8C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10005D9DC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_10005DAEC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_10005DBEC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_10005DD30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  void *v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v17 = v3;
  if (!v4)
    goto LABEL_5;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 40), "timeIntervalSinceReferenceDate");
  v8 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "calendarDate"));
  objc_msgSend(v9, "absoluteTime");
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "calendarDate"));
  v13 = objc_msgSend(v12, "calendarDateForEndOfWeekWithWeekStart:", CUIKOneIndexedWeekStart(v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  objc_msgSend(v14, "absoluteTime");
  v16 = v15;

  v3 = v17;
  if (v16 >= v6 && v11 <= v8)
  {
LABEL_5:
    objc_msgSend(v3, "reloadData");
    v3 = v17;
  }

}

id sub_10005E15C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setShowsWeekNumber:", *(unsigned __int8 *)(a1 + 32));
}

void sub_10005E744(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10005E75C(uint64_t a1, void *a2, _BYTE *a3)
{
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  void *v10;
  double v11;
  CGFloat v12;
  _BOOL4 v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  CGRect v20;

  v19 = a2;
  objc_msgSend(v19, "frame");
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v10, "bounds");
  v12 = v11;

  v20.origin.x = 0.0;
  v20.origin.y = v7;
  v20.size.width = v12;
  v20.size.height = v9;
  v13 = CGRectContainsPoint(v20, *(CGPoint *)(a1 + 48));
  v14 = v19;
  if (v13)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v15 = *(_QWORD **)(a1 + 64);
    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
      objc_msgSend(v16, "convertPoint:toView:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
      *v15 = v17;
      v15[1] = v18;

    }
    *a3 = 1;
    v14 = v19;
  }

}

id sub_10005E8DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_presentationControllerDidDismiss");
}

id sub_10005F100(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateSubviewAlpha");
}

id sub_10005F1E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateSubviewAlpha");
}

void sub_10005F62C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)UILabel);
  v2 = (void *)qword_1001F61A0;
  qword_1001F61A0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F61A0, "setText:", CFSTR("0"));
}

void sub_100060160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006018C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)*((_QWORD *)WeakRetained + 7);
    *((_QWORD *)WeakRetained + 7) = 0;

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allDayView"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "occurrenceViews"));

    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v20;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v20 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v9), "forceUpdateColors");
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      }
      while (v7);
    }

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "occurrenceViews", 0));
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v16;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v16 != v13)
            objc_enumerationMutation(v10);
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v14), "forceUpdateColors");
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      }
      while (v12);
    }

  }
}

void sub_1000610FC(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD block[5];
  id v13;
  char v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "dateFromComponents:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastSecondOfWeek"));
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 128));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "weekView:allEventsForStartDate:endDate:", *(_QWORD *)(a1 + 32), v2, v3));

  if (v5)
  {
    v6 = objc_msgSend(v5, "copy");
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 64);
    *(_QWORD *)(v7 + 64) = v6;

    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "timedOccurrences"));
    objc_msgSend(v9, "loadAndLayoutOccurrences:reverse:", v10, *(unsigned __int8 *)(a1 + 48));

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006125C;
    block[3] = &unk_1001B32C0;
    v11 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v14 = *(_BYTE *)(a1 + 48);
    v13 = v11;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_10006125C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "allDayOccurrences"));
  objc_msgSend(v3, "setOccurrences:animated:", v4, 1);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "movePreloadedItemsToVisible");
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v7 = *(unsigned __int8 *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100061338;
  v8[3] = &unk_1001B2E30;
  v9 = v5;
  objc_msgSend(v6, "applyLoadedOccurrencesWithBatching:animated:reverse:completion:", 1, 1, v7, v8);

}

uint64_t sub_100061338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000617E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "scrollViewDidScroll:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id sub_100061838(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setContentOffset:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_100061DF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "scrollRectToVisible:animated:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_100062420(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  objc_msgSend(v3, "setFill");

  objc_msgSend(v12, "fillRect:", 0.0, 0.0, *(double *)(a1 + 40), *(double *)(a1 + 48));
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "weekSeparatorColor");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = EKUISeparatorLineThickness(objc_msgSend(v5, "setFill"));
  objc_msgSend(*(id *)(a1 + 32), "safeAreaInsets");
  v8 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v8 + 48) >= 2)
  {
    v9 = v7;
    v10 = 1;
    do
    {
      objc_msgSend((id)objc_opt_class(v8), "dayWidthForOrientation:withViewInViewHierarchy:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
      v9 = v9 + v11;
      objc_msgSend(v12, "fillRect:", CalRoundRectToScreenScale(v9, 0.0, v6, 1.0));
      ++v10;
      v8 = *(_QWORD *)(a1 + 32);
    }
    while (*(_QWORD *)(v8 + 48) > v10);
  }

}

void sub_100063978(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_searchViewDidAppear", CFSTR("ListViewController_ViewDidAppearNotification"), 0);

  v3 = *(void **)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "selectedDate"));
  v5 = objc_msgSend(v3, "pushCalendarViewControllerWithViewType:andDate:", 4, v4);

}

id sub_100063A10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, *(_QWORD *)(a1 + 40));
}

void sub_100063AB4(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "testName");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v4, "startedTest:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rootNavigationController"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topViewController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentChildViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tableViewForTesting"));

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100063BC0;
  v12[3] = &unk_1001B2538;
  v12[4] = v10;
  objc_msgSend(v11, "scrollView:completionBlock:", v9, v12);

}

void sub_100063BC0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  objc_msgSend(v1, "setShowDayAsList:", 0);

}

void sub_100063C48(id a1)
{
  NSMutableDictionary *v1;
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)NSMutableParagraphStyle);
  objc_msgSend(v3, "setAlignment:", 0);
  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1001F61B8;
  qword_1001F61B8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F61B8, "setObject:forKeyedSubscript:", v3, NSParagraphStyleAttributeName);
}

void sub_100063ED4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  CGRect v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "drawInRect:withAttributes:", *(_QWORD *)(a1 + 40), CGPointZero.x, CGPointZero.y, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (*(double *)(a1 + 64) > 0.0)
  {
    v4 = CalendarAppTintColor(v2, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(v5, "setFill");

    v6.size.width = *(CGFloat *)(a1 + 48);
    v6.origin.y = *(double *)(a1 + 56) + 2.0;
    v6.size.height = *(CGFloat *)(a1 + 64);
    v6.origin.x = 0.0;
    UIRectFill(v6);
  }
}

void sub_10006406C(id a1)
{
  NSCache *v1;
  void *v2;

  v1 = objc_opt_new(NSCache);
  v2 = (void *)qword_1001F61C8;
  qword_1001F61C8 = (uint64_t)v1;

}

void sub_100064394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000643B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000643C4(uint64_t a1)
{

}

void sub_1000643CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 64);
  v6 = CalRoundToScreenScale(v2, v5, *(double *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "fontSize");
  v8 = v7;
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_cachedImageForString:isWeekend:underlineThickness:fontSize:style:", v3, v4, objc_msgSend(v12, "userInterfaceStyle"), v6, v8));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

void sub_100065330(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[DividedMonthDayTransitionView dividedMonthPaletteBackgroundColor](DividedMonthDayTransitionView, "dividedMonthPaletteBackgroundColor"));
  objc_msgSend(v2, "setBackgroundColor:", v3);

  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "paletteView"));
  objc_msgSend(v4, "setExtraPaletteHeight:", *(double *)(a1 + 56));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "paletteView"));
  objc_msgSend(v5, "layoutSubviews");

  v7 = (id)objc_claimAutoreleasedReturnValue(+[CompactMonthViewController dividedModeBackgroundColor](CompactMonthViewController, "dividedModeBackgroundColor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "scrubber"));
  objc_msgSend(v6, "setBackgroundColor:", v7);

}

id sub_1000653F8(id *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "paletteView"));
  objc_msgSend(v2, "setExtraPaletteHeight:", 0.0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "paletteView"));
  objc_msgSend(v3, "layoutSubviews");

  objc_msgSend(a1[5], "removeFromSuperview");
  return objc_msgSend(a1[6], "removeFromSuperview");
}

void sub_100065454(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v3, v5, v7, v9);

  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dateLabel"));
  objc_msgSend(v12, "setAlpha:", 1.0);

}

id sub_10006550C(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "frame");
  v5 = v4;
  v7 = v6;

  v8 = *(double *)(a1 + 48);
  v9 = *(double *)(a1 + 56);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "view"));
  objc_msgSend(v11, "setFrame:", v8, v9, v5, v7);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "view"));
  objc_msgSend(v13, "setAlpha:", 1.0);

  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 40), "frame");
  return objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(a1 + 64), *(double *)(a1 + 72));
}

void sub_1000655F4(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "monthViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v2, "setHidden:", 0);

}

id sub_10006564C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

id sub_10006565C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

void sub_100065668(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allDayView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

id sub_10006569C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
}

void sub_10006655C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "scrubber"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "scrubber"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[DividedMonthDayTransitionView dividedMonthPaletteBackgroundColor](DividedMonthDayTransitionView, "dividedMonthPaletteBackgroundColor"));
  objc_msgSend(v4, "setBackgroundColor:", v3);

}

id sub_1000665E0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  return objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
}

void sub_100066608(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsDay");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v3, v5, v7, v9);

  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "animatableDateLabel"));
  objc_msgSend(v12, "setAlpha:", 0.0);

}

void sub_1000666C0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v2, "setExtraPaletteHeight:", 0.0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v3, "layoutSubviews");

}

id sub_100066718(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(a1 + 32), "frame");
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", 0.0, -(*(double *)(a1 + 40) + 63.0));
}

id sub_100066764(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "setHidden:", 0);

  return objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
}

void sub_1000667B8(uint64_t a1)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  _OWORD v18[8];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bottomView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  v4 = *(_OWORD *)&CATransform3DIdentity.m33;
  v18[4] = *(_OWORD *)&CATransform3DIdentity.m31;
  v18[5] = v4;
  v5 = *(_OWORD *)&CATransform3DIdentity.m43;
  v18[6] = *(_OWORD *)&CATransform3DIdentity.m41;
  v18[7] = v5;
  v6 = *(_OWORD *)&CATransform3DIdentity.m13;
  v18[0] = *(_OWORD *)&CATransform3DIdentity.m11;
  v18[1] = v6;
  v7 = *(_OWORD *)&CATransform3DIdentity.m23;
  v18[2] = *(_OWORD *)&CATransform3DIdentity.m21;
  v18[3] = v7;
  objc_msgSend(v3, "setTransform:", v18);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bottomView"));
  objc_msgSend(v8, "frame");
  v10 = v9;
  v12 = v11;

  objc_msgSend(*(id *)(a1 + 32), "dayViewDayLocation");
  v14 = v13;
  v16 = v15;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bottomView"));
  objc_msgSend(v17, "setFrame:", v14, v16, v10, v12);

}

id sub_1000668A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "animationDidStop:finished:", 0, 1);
}

void sub_1000668B0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bottomView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

id sub_1000668E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
}

void sub_100067028(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v3, v5, v7, v9);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dayInitialsHeaderView"));
  objc_msgSend(v13, "setAlpha:", 1.0);

  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "animatableDateLabel"));
  objc_msgSend(v14, "setAlpha:", 1.0);

}

uint64_t sub_10006710C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dateLabel"));
  objc_msgSend(v3, "setHidden:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "animatableDateLabel"));
  objc_msgSend(v5, "setAlpha:", 0.0);

  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v7, "setDividerLineVisible:", v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v8, "setSuppressLayout:", 0);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v9, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100067200(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "frame");
  v5 = v4;
  v7 = v6;

  v8 = *(double *)(a1 + 40);
  v9 = *(double *)(a1 + 48);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "view"));
  objc_msgSend(v10, "setFrame:", v8, v9, v5, v7);

}

id sub_1000672A8(uint64_t a1)
{
  void *v2;
  double MinY;
  void *v4;
  void *v5;
  CGFloat v6;
  CGFloat Height;
  void *v8;
  CATransform3D v10;
  CATransform3D b;
  CATransform3D a;
  CATransform3D v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  objc_msgSend(v2, "frameOfListView");
  MinY = CGRectGetMinY(v14);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v5, "frame");
  v6 = MinY / CGRectGetHeight(v15);

  objc_msgSend(*(id *)(a1 + 40), "frame");
  Height = CGRectGetHeight(v16);
  CATransform3DMakeTranslation(&a, 0.0, Height * 0.5, 0.0);
  CATransform3DMakeScale(&b, 1.0, v6, 1.0);
  CATransform3DConcat(&v13, &a, &b);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "layer"));
  v10 = v13;
  objc_msgSend(v8, "setTransform:", &v10);

  return objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 0.0);
}

void sub_1000673C4(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "listViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v2, "setHidden:", 0);

}

void sub_100067BFC(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v1, "setHidden:", 1);

}

void sub_100067C48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dayInitialsHeaderView"));
  objc_msgSend(v5, "setAlpha:", 0.0);

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v11 = v10;
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dayInitialsHeaderView"));
  objc_msgSend(v12, "setFrame:", v7, 0.0, v9, v11);

}

uint64_t sub_100067D38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateLabel"));
  objc_msgSend(v5, "setHidden:", 0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dayInitialsHeaderView"));
  objc_msgSend(v7, "setAlpha:", 1.0);

  v8 = *(unsigned __int8 *)(a1 + 48);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v9, "setDividerLineVisible:", v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v10, "setSuppressLayout:", 0);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "paletteView"));
  objc_msgSend(v11, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100067E58(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "frame");
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", 0.0, -*(double *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

void sub_100067E98(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "monthViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v2, "setHidden:", 0);

}

void sub_100067EF0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "setHidden:", 1);

  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "view"));
  objc_msgSend(v4, "frame");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
  objc_msgSend(v8, "frame");
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "view"));
  objc_msgSend(v12, "setFrame:", 0.0, 0.0, v6, v10);

}

id sub_100067FE8(uint64_t a1)
{
  void *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  v3 = *(_OWORD *)&CATransform3DIdentity.m33;
  v8[4] = *(_OWORD *)&CATransform3DIdentity.m31;
  v8[5] = v3;
  v4 = *(_OWORD *)&CATransform3DIdentity.m43;
  v8[6] = *(_OWORD *)&CATransform3DIdentity.m41;
  v8[7] = v4;
  v5 = *(_OWORD *)&CATransform3DIdentity.m13;
  v8[0] = *(_OWORD *)&CATransform3DIdentity.m11;
  v8[1] = v5;
  v6 = *(_OWORD *)&CATransform3DIdentity.m23;
  v8[2] = *(_OWORD *)&CATransform3DIdentity.m21;
  v8[3] = v6;
  objc_msgSend(v2, "setTransform:", v8);

  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_10006805C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "listViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "setHidden:", 0);

  return objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
}

id sub_1000682A8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "startedTest:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "_mainLoop");
}

void sub_1000683F0(id a1)
{
  _objc_msgSend(UIApp, "rotateIfNeeded:", 1);
}

id sub_100068404(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setDisplayedDate:animated:", *(_QWORD *)(a1 + 40), 1);
}

id sub_100068974(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "startedTest:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "_mainLoop");
}

void sub_100068ABC(id a1)
{
  _objc_msgSend(UIApp, "rotateIfNeeded:", 1);
}

id sub_100068AD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "selectDate:animated:", *(_QWORD *)(a1 + 40), 1);
}

id sub_100068CD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToDisplayedDateAnimated:", 0);
}

void sub_100069FA8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  v7 = a2;
  v8 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006A070;
  block[3] = &unk_1001B3498;
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v14 = v9;
  v15 = v10;
  v17 = v7;
  v18 = a4;
  v16 = v8;
  v11 = v7;
  v12 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10006A070(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16)))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "setText:", *(_QWORD *)(a1 + 48));
    switch(*(_QWORD *)(a1 + 64))
    {
      case 0:
      case 2:
        v2 = (id)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("video.fill")));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "setImage:", v2);

        break;
      case 1:
      case 3:
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "setImage:", *(_QWORD *)(a1 + 56));
        break;
      default:
        return;
    }
  }
}

void sub_10006A2A8(id a1, BOOL a2)
{
  _BOOL4 v2;
  NSObject *v3;
  _DWORD v4[2];

  v2 = a2;
  v3 = kCalUILogCarplayHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogCarplayHandle, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "cellWasTapped for conference cell completion handler called with success %d", (uint8_t *)v4, 8u);
  }
}

void sub_10006A478(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_1001F61D8;
  qword_1001F61D8 = (uint64_t)v1;

}

UIColor *__cdecl sub_10006AA30(id a1, UITraitCollection *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)1)
  {
    v2 = 0.518;
    v3 = 1.0;
    v4 = 0.518;
    v5 = 0.518;
  }
  else
  {
    v2 = 0.596;
    v5 = 0.62;
    v3 = 1.0;
    v4 = 0.596;
  }
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v4, v5, v3));
}

UIColor *__cdecl sub_10006AA94(id a1, UITraitCollection *a2)
{
  double v2;
  double v3;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)1)
  {
    v2 = 0.537;
    v3 = 0.557;
  }
  else
  {
    v2 = 0.62;
    v3 = 0.643;
  }
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v2, v3, 1.0));
}

void sub_10006AD40(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "clearMetrics", UIContentSizeCategoryDidChangeNotification, 0);

}

void sub_10006C990(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  void *v5;

  if (*(_BYTE *)(a1 + 40))
    v2 = 0.0;
  else
    v2 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", v2);
  if (*(_BYTE *)(a1 + 40))
    v3 = 1.0;
  else
    v3 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", v3);
  if (!*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "_removeCommentPromptRelatedConstraintsIfNeeded");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "removeFromSuperview");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 72);
    *(_QWORD *)(v4 + 72) = 0;

  }
}

id sub_10006D6A4(uint64_t a1, void *a2, int a3, double a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _QWORD v36[4];
  id v37;

  v7 = *(void **)(a1 + 32);
  v8 = a2;
  if (objc_msgSend(v7, "count"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anyObject"));
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v9);
    objc_msgSend(v9, "setUserInteractionEnabled:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "gestureRecognizers"));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10006DA88;
    v36[3] = &unk_1001B3588;
    v11 = v9;
    v37 = v11;
    objc_msgSend(v10, "enumerateObjectsUsingBlock:", v36);

    v12 = v37;
  }
  else
  {
    v11 = (id)objc_opt_new(EKStrikethroughLabel);
    objc_msgSend(v11, "setOpaque:", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v11, "setBackgroundColor:", v13);

    objc_msgSend(v11, "setLineBreakMode:", 4);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contentView"));
    objc_msgSend(v12, "addSubview:", v11);
  }

  if (a3 == 3)
  {
    v18 = 32770;
  }
  else
  {
    if (a3 == 1)
    {
      v14 = objc_msgSend(*(id *)(a1 + 40), "showAsCancelledOrDeclined");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:](UIFontDescriptor, "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", UIFontTextStyleHeadline, 0x8000, 0));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v15, 0.0));
      objc_msgSend(v11, "setFont:", v16);

      if ((v14 & 1) != 0)
        v17 = objc_claimAutoreleasedReturnValue(+[CalendarMessageCell strikethroughTitleColor:](CalendarMessageCell, "strikethroughTitleColor:", objc_msgSend(*(id *)(a1 + 40), "destination")));
      else
        v17 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
      v26 = (void *)v17;
      objc_msgSend(v11, "setTextColor:", v17);

      objc_msgSend(v11, "setDrawsStrikethrough:", v14);
      v27 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "numberOfLinesForTitleLabels");
      goto LABEL_19;
    }
    v18 = 0x8000;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:](UIFontDescriptor, "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", UIFontTextStyleFootnote, v18, 0));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v15, 0.0));
  objc_msgSend(v11, "setFont:", v19);

  if (a3 == 4)
  {
    v22 = CalendarAppTintColor(v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    objc_msgSend(v11, "setTextColor:", v23);

    objc_msgSend(v11, "setUserInteractionEnabled:", 1);
    v24 = objc_msgSend(objc_alloc((Class)UITapGestureRecognizer), "initWithTarget:action:", *(_QWORD *)(a1 + 40), "actionLabelTap");
    objc_msgSend(v11, "addGestureRecognizer:", v24);
  }
  else
  {
    if ((a3 & 0xFFFFFFFE) == 2)
      v25 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
    else
      v25 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    v24 = (id)v25;
    objc_msgSend(v11, "setTextColor:", v25);
  }

  objc_msgSend(v11, "setDrawsStrikethrough:", 0);
  v27 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40)), "numberOfLinesForBodyLabels");
LABEL_19:
  objc_msgSend(v11, "setNumberOfLines:", v27);

  objc_msgSend(v11, "setFirstLineHeadIndent:", a4);
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "traitCollection"));
  v30 = EKUIUsesLargeTextLayout(v28, v29);
  v31 = 0.0;
  if (v30)
    v31 = 0.5;
  objc_msgSend(v11, "setHyphenationFactor:", v31);

  objc_msgSend(v11, "setText:", v8);
  objc_msgSend(v11, "_setOverallWritingDirectionFollowsLayoutDirection:", 1);
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v32) = 1144750080;
  objc_msgSend(v11, "setContentCompressionResistancePriority:forAxis:", 0, v32);
  LODWORD(v33) = 1144750080;
  objc_msgSend(v11, "setContentHuggingPriority:forAxis:", 1, v33);
  LODWORD(v34) = 1132068864;
  objc_msgSend(v11, "setContentHuggingPriority:forAxis:", 0, v34);
  return v11;
}

id sub_10006DA88(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeGestureRecognizer:", a2);
}

void sub_10006DA94(uint64_t a1, void *a2, uint64_t a3)
{
  double v5;
  id v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = 0.0;
  v14 = a2;
  if (!a3)
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "_shouldWrapTextUnderAuthor");
    if ((_DWORD)v6)
    {
      v8 = CalRoundToScreenScale(v6, v7, 36.0);
      +[EKUILargeTextUtilities contentSizeCategoryScaledValueForDefaultValue:shouldScaleForSmallerSizes:](EKUILargeTextUtilities, "contentSizeCategoryScaledValueForDefaultValue:shouldScaleForSmallerSizes:", 0, CalRoundToScreenScale(v9, v10, 6.0));
      v5 = v8 + v11;
    }
  }
  v12 = (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 48) + 16))(v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);

}

void sub_10006DB44(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 40) + 16))(0.0);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v3, "setNumberOfLines:", 2);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

const __CFString *CalendarMessageCellStringForButtonAction(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  BOOL v10;
  const __CFString *v11;

  result = 0;
  if (a1 <= 511)
  {
    if (a1 > 31)
    {
      v3 = CFSTR("EKEventStatusButtonsActionIgnore");
      v4 = CFSTR("EKEventStatusButtonsActionViewComment");
      if (a1 != 256)
        v4 = 0;
      if (a1 != 128)
        v3 = v4;
      v5 = CFSTR("EKEventStatusButtonsActionOK");
      v6 = CFSTR("EKEventStatusButtonsActionJoin");
      if (a1 != 64)
        v6 = 0;
      if (a1 != 32)
        v5 = v6;
      if (a1 <= 127)
        return v5;
      else
        return v3;
    }
    else
    {
      switch(a1)
      {
        case 0:
        case 7:
          return CFSTR("EKEventStatusButtonsActionNone");
        case 1:
          result = CFSTR("EKEventStatusButtonsActionAccept");
          break;
        case 2:
          result = CFSTR("EKEventStatusButtonsActionMaybe");
          break;
        case 4:
          result = CFSTR("EKEventStatusButtonsActionDeclineEvent");
          break;
        case 8:
          result = CFSTR("EKEventStatusButtonsActionAdd");
          break;
        case 16:
          result = CFSTR("EKEventStatusButtonsActionDelete");
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    if (a1 < 0x4000)
    {
      if (a1 <= 2047)
      {
        if (a1 == 512)
          return CFSTR("EKEventStatusButtonsActionViewComments");
        if (a1 == 1024 || a1 == 1792)
          return CFSTR("EKEventStatusButtonsActionViewEvent");
        return result;
      }
      v7 = CFSTR("EKEventStatusButtonsActionUpdate");
      v8 = CFSTR("EKEventStatusButtonsActionAcceptNewTime");
      v9 = CFSTR("EKEventStatusButtonsActionRejectNewTime");
      if (a1 != 0x2000)
        v9 = 0;
      if (a1 != 4096)
        v8 = v9;
      v10 = a1 == 2048;
LABEL_38:
      if (v10)
        return v7;
      else
        return v8;
    }
    if (a1 >= 0x20000)
    {
      v7 = CFSTR("EKEventStatusButtonsActionDeclineSharedCalendar");
      v8 = CFSTR("EKEventStatusButtonsActionUnsubscribe");
      v11 = CFSTR("EKEventStatusButtonsActionDeleteReminder");
      if (a1 != 0x80000)
        v11 = 0;
      if (a1 != 0x40000)
        v8 = v11;
      v10 = a1 == 0x20000;
      goto LABEL_38;
    }
    switch(a1)
    {
      case 0x4000:
        return CFSTR("EKEventStatusButtonsActionRespond");
      case 0x8000:
        return CFSTR("EKEventStatusButtonsActionNone");
      case 0x10000:
        return CFSTR("EKEventStatusButtonsActionReportJunk");
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_10006FDA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000703A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000703C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000703D4(uint64_t a1)
{

}

void sub_1000703DC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id obj;

  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_castedDayOccurrenceViewFromGenericView:", a2));
  objc_msgSend(*(id *)(a1 + 32), "convertPoint:toView:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (v6 >= 0.0 && (v8 = v7, v7 >= 0.0) && (v9 = v6, objc_msgSend(obj, "bounds"), v9 <= v10))
  {
    objc_msgSend(obj, "bounds");
    v12 = v11;
    if ((objc_msgSend(obj, "isSelectedCopyView") & 1) == 0 && v8 <= v12)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
      *a4 = 1;
    }
  }
  else
  {
    objc_msgSend(obj, "isSelectedCopyView");
  }

}

void sub_100070AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100070B14(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  void *v3;
  void *v4;
  id *v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = objc_msgSend((id)objc_opt_class(WeakRetained), "_headerBackgroundColor");
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    objc_msgSend(v5, "setBackgroundColor:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_thinLineColor"));
    objc_msgSend(v5[2], "setBackgroundColor:", v4);

    WeakRetained = v5;
  }

}

void sub_100070E0C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor separatorColor](UIColor, "separatorColor"));
  v2 = (void *)qword_1001F6208;
  qword_1001F6208 = v1;

}

void sub_100072410(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "presentingViewController"));

  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "sourceViewController"));
    v4 = objc_msgSend(v3, "presentationStyleOverrideForChildViewControllers");

    if (v4 != (id)-1)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setModalPresentationStyle:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceViewController"));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(v6 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000724EC;
    v8[3] = &unk_1001B25D0;
    v8[4] = v6;
    objc_msgSend(v5, "enqueuableNavigationController:requestsDeferShowViewControllerUntilReady:", v7, v8);

  }
}

void sub_1000724EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceViewController"));
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "popoverPresentationController"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100072598;
  v5[3] = &unk_1001B2538;
  v5[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "enqueueableManagedNavigationController:requestsConfigurationOfPropertiesForPopoverPresentationController:completion:", v3, v4, v5);

}

void sub_100072598(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char isKindOfClass;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "presentingViewController"));

  v3 = (void *)kCalUILogHandle;
  if (v2)
  {
    if (!os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_ERROR))
      return;
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sourceViewController"));
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "presentingViewController"));
    *(_DWORD *)buf = 138412802;
    v25 = v6;
    v26 = 2112;
    v27 = v7;
    v28 = 2112;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Race condition: %@ asked to present %@ after it has already been presented, off of %@.", buf, 0x20u);

  }
  else
  {
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
      v10 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sourceViewController"));
      objc_opt_class(v11);
      *(_DWORD *)buf = 138412290;
      v25 = v12;
      v13 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@ is now ready to present the popover.", buf, 0xCu);

    }
    v14 = (id)kCalUILogHandle;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
      objc_opt_class(UINavigationController);
      isKindOfClass = objc_opt_isKindOfClass(v15, v16);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(void **)(v18 + 40);
      if ((isKindOfClass & 1) != 0)
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v18 + 40), "topViewController"));
      *(_DWORD *)buf = 138412290;
      v25 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[83058884] presenting deferred vc %@", buf, 0xCu);
      if ((isKindOfClass & 1) != 0)

    }
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "sourceViewController"));
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(v20 + 40);
    v22 = *(unsigned __int8 *)(v20 + 48);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10007283C;
    v23[3] = &unk_1001B2538;
    v23[4] = v20;
    -[NSObject presentViewController:animated:completion:](v5, "presentViewController:animated:completion:", v21, v22, v23);
  }

}

void sub_10007283C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000728B0;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

id sub_1000728B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

void sub_100074348(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  objc_msgSend(*(id *)(a1 + 32), "updateDraggingOccurrenceFrameFromSource");
  objc_msgSend(*(id *)(a1 + 32), "updateDraggingOccurrenceOrigin");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 40) + 344);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), "weekView", (_QWORD)v9));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "content"));
        objc_msgSend(v8, "setNeedsLayout");

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_100074668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  objc_opt_class(EKEventViewController);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = *(id *)(a1 + 32);
    objc_msgSend(v4, "setCalendarPreviewIsInlineDayView:", 1);
    objc_msgSend(v4, "setAllowsCalendarPreview:", 1);
    if (*(_QWORD *)(a1 + 40) == 2)
      objc_msgSend(v4, "openAttendeesDetailItem");

  }
}

id sub_1000764E4(uint64_t a1, void *a2)
{
  uint64_t v3;

  objc_msgSend(a2, "setAsyncLoading:", 0);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 107))
  {
    objc_msgSend((id)v3, "_reloadDataIfVisible");
  }
  else
  {
    *(_QWORD *)(v3 + 128) = 0;
    objc_msgSend(*(id *)(a1 + 32), "_updateHeaderHeightsAnimated:", *(unsigned __int8 *)(a1 + 40));
  }
  return objc_msgSend(*(id *)(a1 + 32), "updateVisibleRects");
}

void sub_10007728C(id a1, NSMutableDictionary *a2)
{
  -[NSMutableDictionary setObject:forKeyedSubscript:](a2, "setObject:forKeyedSubscript:", CFSTR("SwipedOnWeekViewCanvas"), CFSTR("method"));
}

id sub_100077B10(uint64_t a1, void *a2)
{
  _BYTE *v3;

  objc_msgSend(a2, "setAsyncLoading:", 0);
  v3 = *(_BYTE **)(a1 + 32);
  if (v3[107])
    return objc_msgSend(v3, "_reloadDataIfVisible");
  else
    return objc_msgSend(v3, "_updateHeaderHeightsAnimated:", 1);
}

uint64_t sub_10007A3BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10007ABC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007ABE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10007ABF8(uint64_t a1)
{

}

void sub_10007AC00(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double MinX;
  double MaxX;
  double v9;
  char *v10;
  uint64_t v11;
  int IsLeftToRight;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  id v19;
  CGRect v20;
  CGRect v21;

  v19 = a2;
  objc_msgSend(v19, "frame");
  MinX = CGRectGetMinX(v20);
  objc_msgSend(v19, "frame");
  MaxX = CGRectGetMaxX(v21);
  v9 = *(double *)(a1 + 48);
  if (v9 < MinX)
  {
    v10 = (char *)objc_msgSend(v19, "week");
    IsLeftToRight = CalTimeDirectionIsLeftToRight(v10, v11);
    v13 = v10 - 1;
    if (!IsLeftToRight)
      v13 = v10 + 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v13;
    v9 = *(double *)(a1 + 48);
  }
  if (v9 > MaxX)
  {
    v14 = (char *)objc_msgSend(v19, "week");
    v16 = CalTimeDirectionIsLeftToRight(v14, v15);
    v17 = v14 - 1;
    if (v16)
      v17 = v14 + 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v17;
    v9 = *(double *)(a1 + 48);
  }
  if (v9 >= MinX && v9 <= MaxX)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_10007BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007BEC0(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrenceViewForEvent:occurrenceDate:", a1[4], a1[5]));
  v7 = *(_QWORD *)(a1[6] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
    *a4 = 1;
}

id sub_10007DC74(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 344);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 32), "_setHeaderHeightForWeekGroupView:forceLayout:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), *(unsigned __int8 *)(a1 + 48), (_QWORD)v19);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 360), "setHeaderHeight:", *(double *)(a1 + 40));
  v7 = 1.0;
  if (!*(_BYTE *)(a1 + 49))
    v7 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 360), "setAllDayAlpha:", v7, (_QWORD)v19);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 360), "layoutSubviews");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "frame");
  v9 = v8;
  v11 = v10;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 360), "frame");
  v12 = *(double **)(a1 + 32);
  v14 = v13 + v12[16] - v11;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "view"));
  objc_msgSend(v15, "bounds");
  v17 = v16;

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "setFrame:", v9, v14, v17, v11);
}

id sub_10007DE3C(uint64_t a1)
{
  _BOOL8 v2;

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "weekViewClass"), "showsAllDayDividerLine"))
    v2 = *(_BYTE *)(a1 + 40) == 0;
  else
    v2 = 1;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "setHidden:", v2);
}

void sub_10007E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E08C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  id v8;
  CGRect v9;

  v8 = a2;
  objc_msgSend(v8, "frame");
  if (v7 <= *(double *)(a1 + 40) + 0.0001)
  {
    objc_msgSend(v8, "frame");
    if (CGRectGetMaxX(v9) > *(double *)(a1 + 40) + -0.0001)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

void sub_10007E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E23C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  id v8;
  CGRect v9;

  v8 = a2;
  objc_msgSend(v8, "frame");
  if (v7 < *(double *)(a1 + 40))
  {
    objc_msgSend(v8, "frame");
    if (CGRectGetMaxX(v9) >= *(double *)(a1 + 40))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

uint64_t sub_10007FB24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10007FC10(uint64_t a1)
{
  void *v2;
  void *i;
  void *v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  unsigned int v8;
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  Class v34;
  NSString *v35;
  void *v36;
  uint64_t v37;
  id obj;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  _QWORD v54[9];
  _QWORD v55[9];
  _BYTE v56[128];

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v37 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_visibleOccurrenceViewsWithOptions:", 3));
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = v2;
  v41 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
  if (v41)
  {
    v40 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v41; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v40)
          objc_enumerationMutation(obj);
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i), "occurrence"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUID"));

        if (v5)
        {
          v54[0] = CFSTR("startDate");
          v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startDate"));
          v45 = (void *)v6;
          if (v6)
            v7 = (const __CFString *)v6;
          else
            v7 = &stru_1001B67C0;
          v55[0] = v7;
          v54[1] = CFSTR("duration");
          objc_msgSend(v4, "duration");
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          v55[1] = v44;
          v54[2] = CFSTR("allDay");
          v8 = objc_msgSend(v4, "isAllDay");
          v9 = CFSTR("NO");
          if (v8)
            v9 = CFSTR("YES");
          v55[2] = v9;
          v54[3] = CFSTR("UUID");
          v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUID"));
          v43 = (void *)v10;
          if (v10)
            v11 = (const __CFString *)v10;
          else
            v11 = &stru_1001B67C0;
          v55[3] = v11;
          v54[4] = CFSTR("uniqueID");
          v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uniqueID"));
          v42 = (void *)v12;
          if (v12)
            v13 = (const __CFString *)v12;
          else
            v13 = &stru_1001B67C0;
          v55[4] = v13;
          v54[5] = CFSTR("externalID");
          v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "externalID"));
          v15 = (void *)v14;
          if (v14)
            v16 = (const __CFString *)v14;
          else
            v16 = &stru_1001B67C0;
          v55[5] = v16;
          v54[6] = CFSTR("externalURL");
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "externalURL"));
          v18 = (void *)v17;
          if (v17)
            v19 = (const __CFString *)v17;
          else
            v19 = &stru_1001B67C0;
          v55[6] = v19;
          v54[7] = CFSTR("calendarIdentifier");
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "calendar"));
          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "calendarIdentifier"));
          v22 = (void *)v21;
          if (v21)
            v23 = (const __CFString *)v21;
          else
            v23 = &stru_1001B67C0;
          v55[7] = v23;
          v54[8] = CFSTR("sourceIdentifier");
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "calendar"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "source"));
          v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sourceIdentifier"));
          v27 = (void *)v26;
          if (v26)
            v28 = (const __CFString *)v26;
          else
            v28 = &stru_1001B67C0;
          v55[8] = v28;
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v55, v54, 9));

          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUID"));
          objc_msgSend(v39, "setObject:forKeyedSubscript:", v29, v30);

        }
      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    }
    while (v41);
  }
  v31 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_INFO))
  {
    v32 = *(_QWORD *)(v37 + 32);
    v33 = v31;
    objc_opt_class(v32);
    v35 = NSStringFromClass(v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    *(_DWORD *)buf = 138543618;
    v51 = v36;
    v52 = 2114;
    v53 = v39;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "[UserStateLog] State -> %{public}@ Visible Events when viewDidAppear. %{public}@", buf, 0x16u);

  }
}

void sub_100080C34(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", a1[4], "_viewControllerAppeared:", EKEventEditViewControllerDidAppear, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  objc_msgSend(v3, "startedTest:", a1[5]);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  objc_msgSend(v4, "startedSubTest:forTest:", a1[6], a1[5]);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rootNavigationController"));
  objc_msgSend(v6, "addEventPressed");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "application"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100080D88;
  v8[3] = &unk_1001B2C88;
  v8[4] = a1[4];
  v9 = a1[6];
  v10 = a1[5];
  v11 = a1[7];
  objc_msgSend(v7, "installCACommitCompletionBlock:", v8);

}

void sub_100080D88(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "finishedSubTest:forTest:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedSubTest:forTest:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

}

void sub_100080EE0(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD *v8;
  _QWORD v9[4];
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    if ((objc_msgSend(WeakRetained, "dividedListMode") & 1) != 0)
    {
      v2 = objc_msgSend((id)objc_opt_class(v8), "dividedModeBackgroundColor");
      v3 = objc_claimAutoreleasedReturnValue(v2);
    }
    else
    {
      v3 = objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
    }
    v4 = (void *)v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "scrollView"));
    objc_msgSend(v5, "setBackgroundColor:", v4);

    v6 = (void *)v8[53];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100080FC0;
    v9[3] = &unk_1001B37E8;
    v10 = v4;
    v7 = v4;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v9);

    WeakRetained = v8;
  }

}

id sub_100080FC0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setBackgroundColor:", *(_QWORD *)(a1 + 32));
}

void sub_1000827B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000827D0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  double v16;
  id v17;

  v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subviewForDate:", a2));
  if (v17)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v7, "floatValue");
    objc_msgSend(v8, "convertPoint:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520), 0.0, v9);
    v11 = v10;

    objc_msgSend(v17, "frame");
    v13 = v12 - v11;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v15, "contentOffset");
    objc_msgSend(v14, "setContentOffset:", 0.0, v13 + v16);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    *a4 = 1;

  }
}

void sub_100082E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_100082E40(uint64_t a1)
{
  _BYTE *v2;
  id v3;
  void *v4;
  id v5;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) && !objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = *(_BYTE **)(a1 + 40);
    if (!v2[334])
    {
      objc_msgSend(v2, "finishChangeScale");
      v3 = objc_msgSend(*(id *)(a1 + 40), "pinchToZoomAllowed");
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pinchRecognizer"));
      objc_msgSend(v4, "setEnabled:", v3);

      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v5, "postNotificationName:object:", CFSTR("MonthViewScaleAnimationFinishedNotification"), 0);

    }
  }
}

id sub_100082EF8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "applySizeToPinchView:compressed:snapToBoundary:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), 1);
}

uint64_t sub_100082F0C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100082F28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeObject:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_100082F58(uint64_t a1)
{
  int v2;
  id *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double Height;
  CGRect v15;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(id **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "_updateListViewFrame");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "view"));
    v5 = v4;
    v6 = 1.0;
    v7 = 1.0;
  }
  else
  {
    objc_msgSend(v3[38], "frame");
    v9 = v8;
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v12, "bounds");
    Height = CGRectGetHeight(v15);

    v6 = 0.0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 304), "setFrame:", 0.0, Height, v9, v11);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "view"));
    v5 = v4;
    v7 = 0.0;
  }
  objc_msgSend(v4, "setAlpha:", v7);

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "setAlpha:", v6);
}

uint64_t sub_100083058(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "view"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 304), "setUserInteractionEnabled:", objc_msgSend(*(id *)(a1 + 32), "dividedListMode"));
  if (!*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 304), "setHidden:", 1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "setDisabled:", 1);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_updateNavigationControllerBackButton");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 334) = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000834DC(uint64_t a1, int a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v4 = objc_msgSend(*(id *)(a1 + 32), "setDisableTodayPulse:", 0);
  if (a2)
  {
    v5 = CUIKTodayComponents(v4);
    v10 = (id)objc_claimAutoreleasedReturnValue(v5);
    v6 = objc_msgSend(*(id *)(a1 + 40), "month");
    if (v6 == objc_msgSend(v10, "month")
      && (v7 = objc_msgSend(*(id *)(a1 + 40), "year"), v7 == objc_msgSend(v10, "year")))
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "calendarDateForDay"));
    }
    else
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "calendarDateForMonth"));
    }
    v9 = (void *)v8;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8), "setSelectedDate:", v8);

    objc_msgSend(*(id *)(a1 + 48), "_animateChangeToWeekSize:divided:", *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  }
}

id sub_100083E3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "applySizeToPinchView:compressed:snapToBoundary:", *(_QWORD *)(a1 + 40), 0, 0);
}

void sub_100083E50(uint64_t a1)
{
  id v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "finishChangeScale");
  v2 = objc_msgSend(*(id *)(a1 + 32), "pinchToZoomAllowed");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pinchRecognizer"));
  objc_msgSend(v3, "setEnabled:", v2);

}

void sub_100083F58(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "dividedListMode"))
  {
    v2 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "model"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "selectedDay"));
    objc_msgSend(v2, "reinitializeAllViewsWithCalendarDate:", v3);

  }
}

id sub_1000847BC(id result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v1 + 331))
  {
    *(_BYTE *)(v1 + 331) = 0;
    *(_BYTE *)(*((_QWORD *)result + 4) + 330) = 0;
    return objc_msgSend(*((id *)result + 4), "_loadEventsForAllSubviews");
  }
  return result;
}

id sub_1000847F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateListViewFrame");
}

void sub_100084DBC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v2, "setContentOffset:animated:", 0, **(double **)(a1 + 40), *(double *)(*(_QWORD *)(a1 + 40) + 8));

}

id sub_100084E04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didEndScrolling");
}

id sub_100084E0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateListViewFrame");
}

id sub_100084E14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setGrayLineAlpha:", 0.0);
}

id sub_100084E20(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setGrayLineAlpha:", 1.0);
}

void sub_1000863B4(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  -[InfiniteScrollViewSubview resetTodayBits](a2, "resetTodayBits", a3);
}

void sub_1000865D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "resetTimeZone:", v2);
  objc_msgSend(v3, "resetTodayBits");

}

void sub_100086988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000869A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000869B0(uint64_t a1)
{

}

void sub_1000869B8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  CGPoint v13;
  CGRect v14;

  v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "locationInView:", v12);
  v8 = v7;
  v10 = v9;
  objc_opt_class(CompactMonthWeekView);
  if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
  {
    objc_msgSend(v12, "bounds");
    v13.x = v8;
    v13.y = v10;
    if (CGRectContainsPoint(v14, v13) && (objc_msgSend(v12, "isHidden") & 1) == 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

void sub_100086BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086BFC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  CGPoint v13;
  CGRect v14;

  v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "locationInView:", v12);
  v8 = v7;
  v10 = v9;
  if ((objc_msgSend(v12, "isHidden") & 1) == 0)
  {
    objc_opt_class(CompactMonthWeekView);
    if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
    {
      objc_msgSend(v12, "bounds");
      v13.x = v8;
      v13.y = v10;
      if (CGRectContainsPoint(v14, v13))
      {
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
        *a4 = 1;
      }
    }
  }

}

void sub_100086E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086E78(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  CGFloat v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  CGFloat v21;
  id v22;
  CGRect v23;
  CGRect v24;

  v22 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v11, "contentOffset");
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v14, "safeAreaInsets");
  v16 = v13 + v15;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 304), "frame");
  v18 = v17;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v19, "safeAreaInsets");
  v21 = v18 - v20;

  v23.origin.x = v8;
  v23.origin.y = v16;
  v23.size.width = v10;
  v23.size.height = v21;
  if (CGRectContainsPoint(v23, *(CGPoint *)(a1 + 48)))
  {
    objc_msgSend(v22, "frame");
    if (CGRectContainsPoint(v24, *(CGPoint *)(a1 + 48)))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a3 = 1;
    }
  }

}

id sub_100087618(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeMonthHighlight");
}

id sub_100087994(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_1000879A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_100087F3C(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "calendarDate"));
  objc_msgSend(v3, "absoluteTime");
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "endCalendarDate"));
  objc_msgSend(v6, "absoluteTime");
  v8 = v7;

  if (v5 <= *(double *)(a1 + 40) && v8 >= *(double *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 32), "_loadEventDataForMonthWeekView:", v9);

}

void sub_1000880B8(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_loadEventsForStartDate:endDate:", a1[5], a1[6]));
  v3 = (void *)*((_QWORD *)a1[4] + 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "date"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "date"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrencesForStartDate:endDate:preSorted:waitForLoad:", v4, v5, 1, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "occurrences"));

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100088210;
  v10[3] = &unk_1001B3948;
  v11 = a1[5];
  v12 = a1[7];
  v13 = a1[6];
  v14 = v2;
  v15 = a1[4];
  v16 = v7;
  v8 = v7;
  v9 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

void sub_100088210(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "calendarDate"));
  if ((objc_msgSend(v2, "isEqual:") & 1) != 0)
  {
    v3 = *(void **)(a1 + 48);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "endCalendarDate"));
    LODWORD(v3) = objc_msgSend(v3, "isEqual:", v4);

    if ((_DWORD)v3)
    {
      v5 = *(_QWORD *)(a1 + 56);
      if (v5)
        objc_msgSend(*(id *)(a1 + 40), "setEventData:animated:", v5, objc_msgSend(*(id *)(a1 + 64), "_shouldAnimateDots"));
      objc_msgSend(*(id *)(a1 + 40), "setOccurrences:animated:", *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 64), "_shouldAnimateDots"));
    }
  }
  else
  {

  }
}

id sub_1000883C8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_loadEventDataForMonthWeekView:", a2);
}

id sub_100088E74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_loadEventsForAllSubviews");
}

void sub_100088E7C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  _QWORD block[5];
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "numberOfDaysWithCachedOccurrences");
  v7 = 0;
  v6 = 0;
  objc_msgSend(*(id *)(a1 + 32), "_dayIndexesForRangeStart:rangeEnd:outFirstDayIndex:outLastDayIndex:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v7, &v6);
  v2 = v7;
  if (v7 <= v6)
  {
    do
      v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "cachedSpecialDayDataForSection:", v2);
    while (v2++ < v6);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100088F5C;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100088F5C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 328) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_loadEventsForAllSubviews");
}

void sub_10008939C(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  void *v5;
  double v6;
  id v7;
  uint64_t v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double x;
  double y;
  double width;
  double height;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  id v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v42 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  +[UITraitCollection _setCurrentTraitCollection:](UITraitCollection, "_setCurrentTraitCollection:", v3);

  objc_msgSend(v42, "frame");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4));
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
  if ((objc_msgSend(*(id *)(a1 + 32), "dividedListMode") & 1) != 0)
  {
    *(_QWORD *)&v6 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dividedModeBackgroundColor", v6));
  }
  else
  {
    v8 = objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  }
  v9 = (void *)v8;
  objc_msgSend(v42, "setBackgroundColor:", v8);

  objc_msgSend(v42, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  if (objc_msgSend(*(id *)(a1 + 32), "dividedListMode"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
    objc_msgSend(v42, "rectForCells");
    objc_msgSend(v18, "convertRect:fromView:", v42);
    v11 = v19;
    v13 = v20;
    v15 = v21;
    v17 = v22;

  }
  v44.origin.x = v11;
  v44.origin.y = v13;
  v44.size.width = v15;
  v44.size.height = v17;
  if (CGRectContainsRect(*(CGRect *)(a1 + 64), v44))
  {
    objc_msgSend(v42, "setHidden:", 1);
  }
  else
  {
    objc_msgSend(v42, "frame");
    v45.origin.x = v23;
    v45.origin.y = v24;
    v45.size.width = v25;
    v45.size.height = v26;
    v43 = CGRectIntersection(*(CGRect *)(a1 + 64), v45);
    x = v43.origin.x;
    y = v43.origin.y;
    width = v43.size.width;
    height = v43.size.height;
    if (!CGRectIsNull(v43))
    {
      if (height > 10.0)
        objc_msgSend(v42, "setTemporarilyHideWeekNumber:", 1);
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
      objc_msgSend(v31, "convertRect:toView:", v42, x, y, width, height);
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;

      v40 = objc_msgSend(objc_alloc((Class)UIView), "initWithFrame:", v33, v35, v37, v39);
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
      objc_msgSend(v40, "setBackgroundColor:", v41);

      objc_msgSend(v42, "addSubview:", v40);
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v40);

    }
  }
  objc_msgSend(*(id *)(a1 + 56), "addObject:", v42);

}

void sub_1000898A4(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  void *v3;
  InfiniteScrollViewSubview *v4;

  v4 = a2;
  if (-[InfiniteScrollViewSubview isHidden](v4, "isHidden"))
    -[InfiniteScrollViewSubview setHidden:](v4, "setHidden:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  -[InfiniteScrollViewSubview setBackgroundColor:](v4, "setBackgroundColor:", v3);

}

id sub_100089E50(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "setAlpha:", v1);
}

void sub_10008A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008A4EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "calendarDateForEndOfMonth"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subviewForDate:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008A96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10008A9A4(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v4 = *(double *)(a1 + 48);
  v13 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "calendarDate"));
  objc_msgSend(v5, "absoluteTime");
  if (v4 <= v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "calendarDate"));
    objc_msgSend(v7, "absoluteTime");
    v9 = v8;
    v10 = *(double *)(a1 + 56);

    if (v9 <= v10)
    {
      objc_msgSend(v13, "frame");
      if (v11 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        objc_msgSend(v13, "frame");
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      }
    }
  }
  else
  {

  }
}

uint64_t sub_10008AB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  objc_opt_class(EKEventViewController);
  result = objc_opt_isKindOfClass(v2, v3);
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 == 3)
    {
      return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "editButtonTapped");
    }
    else if (v5 == 2)
    {
      return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "openAttendeesDetailItem");
    }
  }
  return result;
}

uint64_t sub_10008AD44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10008AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008AF6C(uint64_t a1, void *a2, _BYTE *a3)
{
  _BOOL4 v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  CGRect v13;

  v12 = a2;
  objc_msgSend(v12, "frame");
  v6 = CGRectContainsPoint(v13, *(CGPoint *)(a1 + 48));
  v7 = v12;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v8 = *(_QWORD **)(a1 + 64);
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
      objc_msgSend(v9, "convertPoint:toView:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
      *v8 = v10;
      v8[1] = v11;

    }
    *a3 = 1;
    v7 = v12;
  }

}

void sub_10008BA5C(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transitionView"));
  objc_msgSend(v3, "removeFromSuperview");

  objc_msgSend(a1[6], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[7], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[8], "completeTransition:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[9], "view"));
  objc_msgSend(v4, "setHidden:", 0);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("YearMonthAnimator_MonthToYearAnimationCompleteNotification"), 0);

}

void sub_10008BB1C(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "view"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "view"));
  objc_msgSend(v3, "setHidden:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transitionView"));
  objc_msgSend(v4, "removeFromSuperview");

  objc_msgSend(a1[7], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[8], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[9], "completeTransition:", 1);
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("YearMonthAnimator_YearToMonthAnimationCompleteNotification"), 0);

}

void sub_10008C45C(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  int *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v5 = a2;
  v6 = v5;
  v7 = a3 + 1;
  v8 = a1[7];
  if ((id)a1[4] == v5)
    v9 = *(_BYTE *)(a1[5] + 82) != 0;
  else
    v9 = objc_msgSend(v5, "isSelected");
  if (v7 == v8 && (v9 & 1) != 0)
    goto LABEL_26;
  if ((void *)a1[4] == v6)
  {
    v10 = &OBJC_IVAR___MainWindowControlHeaderView__inboxSelected;
    goto LABEL_10;
  }
  if ((void *)a1[6] == v6)
  {
    v10 = &OBJC_IVAR___MainWindowControlHeaderView__calendarSelected;
LABEL_10:
    *(_BYTE *)(a1[5] + *v10) = v7 == v8;
  }
  v11 = a1[5];
  if (*(void **)(v11 + 40) == v6)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "customView"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MainWindowControlHeaderView inboxImageForCount:selected:](MainWindowControlHeaderView, "inboxImageForCount:selected:", *(_QWORD *)(a1[5] + 72), *(unsigned __int8 *)(a1[5] + 82)));
    objc_msgSend(v12, "setImage:forState:", v13, 0);

    objc_msgSend(v12, "sizeToFit");
  }
  else
  {
    if (*(void **)(v11 + 24) != v6)
    {
      objc_msgSend(v6, "setSelected:", v7 == v8);
      goto LABEL_26;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "customView"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[MainWindowControlHeaderView badgedCalendarIcon:](MainWindowControlHeaderView, "badgedCalendarIcon:", *(unsigned __int8 *)(a1[5] + 81)));
    objc_msgSend(v12, "setImage:forState:", v14, 0);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "customView"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "interactions", 0));
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        objc_opt_class(UIPointerInteraction);
        if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
          objc_msgSend(v21, "invalidate");
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v18);
  }

LABEL_26:
}

id sub_10008C70C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  int *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  void *v42;

  v5 = 24;
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v7 = a3;
  v8 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "customView"));

  v10 = &OBJC_IVAR___MainWindowControlHeaderView__inboxSelected;
  if (v9 == v8)
    v10 = &OBJC_IVAR___MainWindowControlHeaderView__calendarSelected;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + *v10);
  v12 = objc_alloc_init((Class)UIPreviewParameters);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "preview"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "target"));
  v15 = objc_alloc((Class)UITargetedPreview);
  if (v9 != v8)
    v5 = 40;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + v5), "customView"));
  v17 = objc_msgSend(v15, "initWithView:parameters:target:", v16, v12, v14);

  if (v11)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerLiftEffect effectWithPreview:](UIPointerLiftEffect, "effectWithPreview:", v17));
    v19 = 0;
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerHighlightEffect effectWithPreview:](UIPointerHighlightEffect, "effectWithPreview:", v17));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "container"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "view"));
    objc_msgSend(v21, "bounds");
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "view"));
    objc_msgSend(v20, "convertRect:fromView:", v30, v23, v25, v27, v29);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v38 = v37;

    if (v9 == v8)
    {
      v39.n128_u64[0] = -8.0;
      v40.n128_u64[0] = -10.0;
      v41.n128_u64[0] = -8.0;
    }
    else
    {
      v39.n128_u64[0] = -4.0;
      v40.n128_u64[0] = -10.0;
      v41.n128_u64[0] = -2.0;
    }
    UIRectInset(v32, v34, v36, v38, v39, v40, v41, -10.0);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerShape shapeWithRoundedRect:](UIPointerShape, "shapeWithRoundedRect:"));
  }
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerStyle styleWithEffect:shape:](UIPointerStyle, "styleWithEffect:shape:", v18, v19));

  return v42;
}

id sub_10008D058(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "startedTest:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "_mainLoop");
}

void sub_10008D164(id a1)
{
  _objc_msgSend(UIApp, "rotateIfNeeded:", 1);
}

id sub_10008D178(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "navigateToNextDateComponentUnitAnimated:", 1);
}

void sub_10008D5A4(id a1, CalendarMessageCell *a2, unint64_t a3, BOOL *a4)
{
  CalendarMessageCell *v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector(v4, "updateSelectedResponseButton") & 1) != 0)
    -[CalendarMessageCell updateSelectedResponseButton](v4, "updateSelectedResponseButton");

}

void sub_10008D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008D80C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008D81C(uint64_t a1)
{

}

void sub_10008D824(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008D884(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;
  id v11;
  _QWORD block[5];
  id v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(NSObject **)(v2 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008D9A4;
  block[3] = &unk_1001B3838;
  v14 = *(_QWORD *)(a1 + 56);
  block[4] = v2;
  v13 = v3;
  dispatch_sync(v4, block);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "scanForConflicts"));
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(void **)(a1 + 40);
      v8 = *(NSObject **)(v6 + 72);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10008DA04;
      v9[3] = &unk_1001B2CD8;
      v9[4] = v6;
      v10 = v7;
      v11 = v5;
      dispatch_sync(v8, v9);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5);

    }
  }

}

void sub_10008D9A4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008DA04(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v1, v3);

}

void sub_10008DADC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), "notification", (_QWORD)v9));
        if (!objc_msgSend(v7, "type") || objc_msgSend(v7, "type") == (id)1)
          v8 = objc_msgSend(*(id *)(a1 + 40), "conflictInfoForNotification:", v7);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_10008DC64(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count");
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40) < (uint64_t)v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectAtIndex:"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "notification"));

      v5 = CUIKDisplayStringForNotificationIdentity(v4, 0, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(NSObject **)(v7 + 96);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008DD68;
      block[3] = &unk_1001B2CD8;
      block[4] = v7;
      v12 = v4;
      v13 = v6;
      v9 = v6;
      v10 = v4;
      dispatch_sync(v8, block);

    }
  }
}

void sub_10008DD68(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v1, v3);

}

id sub_10008E080(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  id result;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "notification"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URL"));
  objc_msgSend(v6, "removeObject:", v8);

  result = objc_msgSend(*(id *)(a1 + 32), "count");
  if (!result)
    *a4 = 1;
  return result;
}

void sub_10008E6F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10008E720(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008E780(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD block[4];
  id v5;
  uint64_t v6;
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008E814;
  block[3] = &unk_1001B3B58;
  objc_copyWeak(&v7, (id *)(a1 + 48));
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v7);
}

void sub_10008E814(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  id *v5;
  _QWORD v6[6];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v4 = objc_msgSend(WeakRetained[3], "indexOfObject:", *(_QWORD *)(a1 + 32));
    v3 = v5;
    if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10008E8B4;
      v6[3] = &unk_1001B2838;
      v6[4] = *(_QWORD *)(a1 + 40);
      v6[5] = v4;
      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v6);
      v3 = v5;
    }
  }

}

void sub_10008E8B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "inboxTableViewGroupController:requestsReloadOfRow:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10008E8F4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008F13C(uint64_t a1, void *a2)
{
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "notification"));
  objc_opt_class(EKCalendarEventInvitationNotification);
  isKindOfClass = objc_opt_isKindOfClass(v10, v3);
  v5 = v10;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v10;
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    if (v9)
      objc_msgSend(*(id *)(a1 + 32), "_saveStatus:forEventInvitationNotification:commit:", 3, v6, 1);

    v5 = v10;
  }

}

void sub_1000901A8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  NSObject *v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  id v27;
  _BYTE v28[128];

  objc_msgSend(*(id *)(a1 + 32), "_saveStatus:forEventInvitationNotification:commit:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), 0);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "conflictingDates"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v23;
    while (2)
    {
      v7 = 0;
      v8 = v5;
      do
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v2);
        v9 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v7);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "eventStore"));
        v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "eventForObjectID:occurrenceDate:checkValid:", v11, v9, 0));

        objc_msgSend(v12, "setParticipationStatus:", 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "eventStore"));
        v21 = v8;
        LOBYTE(v11) = objc_msgSend(v13, "saveEvent:span:commit:error:", v12, 0, 0, &v21);
        v5 = v21;

        if ((v11 & 1) == 0)
        {
          v14 = kCalUILogInboxHandle;
          if (os_log_type_enabled((os_log_t)kCalUILogInboxHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v27 = v5;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Error saving invitation status: %@.", buf, 0xCu);
          }
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "eventStore"));
          objc_msgSend(v15, "rollback");

          goto LABEL_17;
        }

        v7 = (char *)v7 + 1;
        v8 = v5;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v5 = 0;
  }
  v16 = v5;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "eventStore"));
  v20 = v5;
  v18 = objc_msgSend(v17, "commitWithRollback:", &v20);
  v5 = v20;

  if ((v18 & 1) == 0)
  {
    v19 = kCalUILogInboxHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogInboxHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Error committing to event store: %@.", buf, 0xCu);
    }
  }
LABEL_17:

}

id sub_100090470(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_saveStatus:forEventInvitationNotification:commit:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 1);
}

uint64_t sub_100090484(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100090C80(id a1, EKCalendarNotificationReference *a2)
{
  return -[EKCalendarNotificationReference notification](a2, "notification");
}

void sub_100091BB4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 192));
  _Unwind_Resume(a1);
}

void sub_100091BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  id v7;
  uint8_t buf[4];
  id v9;

  v3 = *(void **)(a1 + 32);
  v7 = 0;
  v4 = objc_msgSend(v3, "saveEvent:span:error:", a2, a3, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v6 = kCalUILogInboxHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogInboxHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error clearing attendee change flags: %@", buf, 0xCu);
    }
  }

}

void sub_100091CA8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    v4 = objc_alloc_init((Class)NSMutableArray);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v4;

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URL"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", v7);
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100091DEC;
  v14[3] = &unk_1001B3C60;
  v13 = v3;
  v15 = v13;
  v9 = objc_msgSend(v8, "indexOfObjectPassingTest:", v14);
  if (v9 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObjectAtIndex:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v10, "inboxTableViewGroupController:addedRows:removedRows:updatedRows:", *(_QWORD *)(a1 + 32), 0, 0, 0);

    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectID"));
    objc_msgSend(v11, "addRespondedNotificationObjectID:", v12);

  }
}

BOOL sub_100091DEC(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "notification"));
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t sub_100091E28(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setIsJunk:", 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100091E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if ((unint64_t)(a2 - 3) >= 3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = 0;

}

void sub_100091EA8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "presentingViewController"));
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, 0);

    WeakRetained = v4;
  }

}

void sub_100091F08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  int v7;
  id v8;

  v5 = a4;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObject:", *(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = kCalUILogInboxHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogInboxHandle, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error responding to shared calendar invitation: %@", (uint8_t *)&v7, 0xCu);
    }
  }

}

id sub_100092214(uint64_t a1)
{
  id result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) = 1;
  result = objc_msgSend(*(id *)(a1 + 32), "visible");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "refreshIfNeeded");
  return result;
}

id sub_10009234C(uint64_t a1)
{
  id result;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) = 1;
  result = objc_msgSend(*(id *)(a1 + 32), "visible");
  if ((_DWORD)result)
  {
    v3 = kCalUILogInboxHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogInboxHandle, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138543362;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Will refresh inbox notifications group controller if needed. Inbox notifications group controller: %{public}@.", (uint8_t *)&v5, 0xCu);
    }
    return objc_msgSend(*(id *)(a1 + 32), "refreshIfNeeded");
  }
  return result;
}

BOOL sub_100092808(id a1, EKCalendarNotificationReference *a2, NSDictionary *a3)
{
  return -[EKCalendarNotificationReference type](a2, "type", a3) - 6 < 0xFFFFFFFB;
}

BOOL sub_1000928F4(id a1, EKCalendarNotificationReference *a2, NSDictionary *a3)
{
  unsigned int v3;

  v3 = -[EKCalendarNotificationReference type](a2, "type", a3);
  return v3 > 5 || (v3 & 0x3F) == 1;
}

BOOL sub_1000929E8(id a1, EKCalendarNotificationReference *a2, NSDictionary *a3)
{
  unsigned int v3;

  v3 = -[EKCalendarNotificationReference type](a2, "type", a3);
  return (v3 > 5) | (0x1Cu >> v3) & 1;
}

id sub_100092CBC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if ((result & 1) == 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "isExecuting");
    if ((result & 1) == 0)
    {
      result = objc_msgSend(*(id *)(a1 + 32), "isFinished");
      if ((result & 1) == 0)
        return _objc_msgSend(*(id *)(a1 + 32), "main");
    }
  }
  return result;
}

void sub_100092EEC(id a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[2];

  objc_opt_class(CalendarsViewController);
  v6[0] = v1;
  *(_QWORD *)&v2 = objc_opt_class(InboxViewController).n128_u64[0];
  v6[1] = v3;
  v4 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 2, v2));
  v5 = (void *)qword_1001F6240;
  qword_1001F6240 = v4;

}

void sub_1000930A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  double v16;
  uint64_t v17;
  unsigned __int8 v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  id v25;
  _QWORD v26[5];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v2;
    objc_opt_class(v3);
    v6 = v5;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = v5;
    objc_opt_class(v7);
    *(_DWORD *)buf = 138412546;
    v28 = v6;
    v29 = 2112;
    v30 = v9;
    v10 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ operation instructing %@ to dismiss presented view controller.", buf, 0x16u);

  }
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100093398;
  v26[3] = &unk_1001B2538;
  v26[4] = *(_QWORD *)(a1 + 32);
  v11 = objc_retainBlock(v26);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "presentedViewController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "presentingViewController"));
  if (v13 == *(void **)(*(_QWORD *)(a1 + 32) + 8))
  {
    v14 = 0;
    if (!v12)
      goto LABEL_10;
  }
  else
  {
    v14 = objc_msgSend(v12, "isBeingDismissed");
    if (!v12)
    {
LABEL_10:
      if (!v12)
      {
        v21 = (void *)kCalUILogHandle;
        if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v23 = v21;
          objc_opt_class(v22);
          *(_DWORD *)buf = 138412290;
          v28 = v24;
          v25 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Not dismissing. %@ has no presentation", buf, 0xCu);

        }
        goto LABEL_16;
      }
LABEL_11:
      if (v14)
      {
        v19 = kCalUILogHandle;
        if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
          *(_DWORD *)buf = 138412802;
          v28 = v20;
          v29 = 2112;
          v30 = v12;
          v31 = 2112;
          v32 = v13;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Not dismissing. %@'s presentation already being dismissed (%@ presented by %@)", buf, 0x20u);
        }
      }
LABEL_16:
      ((void (*)(_QWORD *))v11[2])(v11);
      goto LABEL_17;
    }
  }
  if ((v14 & 1) != 0)
    goto LABEL_10;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[DismissPresentedViewControllerOperation blacklistedDismissalClasses](DismissPresentedViewControllerOperation, "blacklistedDismissalClasses"));
  *(_QWORD *)&v16 = objc_opt_class(v12).n128_u64[0];
  v18 = objc_msgSend(v15, "containsObject:", v17, v16);

  if ((v18 & 1) != 0)
    goto LABEL_11;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "dismissViewControllerWithoutEnqueuingWithTransition:completion:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16), v11);
LABEL_17:

}

void sub_100093398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  _QWORD block[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    (*(void (**)(void))(v3 + 16))();
    v2 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v2 + 24);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v2 + 24) = 0;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100093440;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v5, block);

}

id sub_100093440(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

void sub_100093E14(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "model"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectedDate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "calendarDateForYear"));
  objc_msgSend(v2, "reinitializeAllViewsWithCalendarDate:", v5);

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v6, "setNeedsLayout");

}

id sub_100093EA4(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CompactYearViewController;
  return objc_msgSendSuper2(&v3, "viewWillTransitionToSize:withTransitionCoordinator:", v1, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

id sub_100093EE0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return _objc_msgSend(*(id *)(a1 + 32), "transitionToSizeDidEnd");
}

id sub_100095A58(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "layoutSubviews");
}

void sub_100095A6C(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setSplitStateOpen:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "view"));
  objc_msgSend(v2, "setAlpha:", 0.0);

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsDay");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v4, v6, v8, v10);

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "animatableDateLabel"));
  objc_msgSend(v12, "setAlpha:", 0.0);

}

id sub_100095B4C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setAlpha:", 1.0);
}

id sub_100095B94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
}

id sub_10009611C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "layoutSubviews");
}

void sub_100096130(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setSplitStateOpen:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "view"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  objc_msgSend(*(id *)(a1 + 32), "weekDayInitialsMonth");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "dayInitialsHeaderView"));
  objc_msgSend(v11, "setFrame:", v4, v6, v8, v10);

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "animatableDateLabel"));
  objc_msgSend(v12, "setAlpha:", 1.0);

}

void sub_100096210(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "dateLabel"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

}

id sub_100096284(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setAlpha:", 0.0);
}

id sub_1000962CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_haltAnimations");
}

void sub_100096458(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = springAnimateViewAlpha(*(_QWORD *)(a1 + 32), 1, 0, *(double *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  preferredNavigationAnimationFrameRateRange();
  objc_msgSend(v2, "setPreferredFrameRateRange:");

}

void sub_100097BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100097C14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100097C24(uint64_t a1)
{

}

void sub_100097C2C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  id v8;

  v8 = a2;
  v7 = objc_opt_class(DeferredPopoverPresentationOperation);
  if ((objc_opt_isKindOfClass(v8, v7) & 1) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

id sub_1000985A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setViewControllers:", &__NSArray0__struct);
}

void sub_10009887C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1000988B8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllers"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v6 = (void *)kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = v6;
      objc_opt_class(v7);
      v10 = v9;
      v11 = *(void **)(a1 + 32);
      v12 = v9;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "viewControllers"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "count")));
      v17 = 138412546;
      v18 = v10;
      v19 = 2112;
      v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%@ removing %@ stack view controllers.", (uint8_t *)&v17, 0x16u);

    }
    v15 = objc_loadWeakRetained(v2);
    objc_msgSend(v15, "setViewControllers:animated:", &__NSArray0__struct, 0);

    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
      (*(void (**)(void))(v16 + 16))();
  }
}

void sub_100098A40(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;

  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a1 + 57))
  {
    v2 = (void *)kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v3 = v2;
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      objc_opt_class(WeakRetained);
      v6 = v5;
      v7 = v5;
      v8 = objc_loadWeakRetained((id *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "presentedViewController"));
      objc_opt_class(v9);
      *(_DWORD *)buf = 138412546;
      v31 = v6;
      v32 = 2112;
      v33 = v10;
      v11 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%@ dismissing presented view controller %@.", buf, 0x16u);

    }
    v12 = *(void **)(a1 + 32);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100098D40;
    v27[3] = &unk_1001B3E90;
    objc_copyWeak(&v29, (id *)(a1 + 48));
    v28 = *(id *)(a1 + 40);
    objc_msgSend(v12, "dismissViewControllerWithTransition:completion:", 0, v27);

    objc_destroyWeak(&v29);
  }
  else
  {
    v13 = objc_loadWeakRetained((id *)(a1 + 48));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "viewControllers"));
    v15 = objc_msgSend(v14, "count");

    if (v15)
    {
      v16 = (void *)kCalUILogHandle;
      if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
      {
        v17 = v16;
        v18 = objc_loadWeakRetained((id *)(a1 + 48));
        objc_opt_class(v18);
        v20 = v19;
        v21 = v19;
        v22 = objc_loadWeakRetained((id *)(a1 + 48));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "viewControllers"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v23, "count")));
        *(_DWORD *)buf = 138412546;
        v31 = v20;
        v32 = 2112;
        v33 = v24;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%@ removing %@ stack view controllers.", buf, 0x16u);

      }
      v25 = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(v25, "setViewControllers:animated:", &__NSArray0__struct, 0);

      v26 = *(_QWORD *)(a1 + 40);
      if (v26)
        (*(void (**)(void))(v26 + 16))();
    }
  }
}

void sub_100098D24(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100098D40(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllers"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v6 = (void *)kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v7 = v6;
      v8 = objc_loadWeakRetained(v2);
      objc_opt_class(v8);
      v10 = v9;
      v11 = v9;
      v12 = objc_loadWeakRetained(v2);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "viewControllers"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "count")));
      v17 = 138412546;
      v18 = v10;
      v19 = 2112;
      v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ removing %@ stack view controllers after dismissing presented vc completed.", (uint8_t *)&v17, 0x16u);

    }
    v15 = objc_loadWeakRetained(v2);
    objc_msgSend(v15, "setViewControllers:animated:", &__NSArray0__struct, 0);

    v16 = *(_QWORD *)(a1 + 32);
    if (v16)
      (*(void (**)(void))(v16 + 16))();
  }
}

void sub_100099088(uint64_t a1)
{
  id v1;
  __int128 v2;
  _QWORD block[4];
  __int128 v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000990FC;
  block[3] = &unk_1001B3EE0;
  v2 = *(_OWORD *)(a1 + 32);
  v1 = (id)v2;
  v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1000990FC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@ executing block operation.", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100099CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100099CE8(uint64_t a1, void *a2)
{
  CGFloat MaxX;
  uint64_t v4;
  uint64_t v5;

  objc_msgSend(a2, "setFrame:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56));
  if (++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) <= *(_QWORD *)(a1 + 48))
  {
    MaxX = CGRectGetMaxX(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32));
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = CalRoundToScreenScale(v4, v5, MaxX + *(double *)(a1 + 56));
  }
}

id sub_100099FA8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setOverlaySignificantDatesProvider:", *(_QWORD *)(a1 + 32));
}

id sub_10009A038(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "overlaySignificantDatesChangedInRange:", *(_QWORD *)(a1 + 32));
}

id sub_10009A718(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 0.0);
}

id sub_10009A87C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 1.0);
}

void sub_10009BDE8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "setHorizontalSizeClass:", objc_msgSend(v2, "activeWidthSizeClass"));

}

id sub_10009C0C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateAfterExtendedLaunch:", 0);
}

id sub_10009C0D0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateSelectedDateForJumpToTodayTip");
  return objc_msgSend(*(id *)(a1 + 32), "updateShouldDisplayJumpToTodayTip");
}

id sub_10009C218(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegatesMenu"));

  return v2;
}

id sub_10009C250(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10009C320(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateFilterLabel");
}

id sub_10009C75C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleDayViewMode:", 0);
}

id sub_10009C768(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleDayViewMode:", 1);
}

id sub_10009C774(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleDayViewMode:", 2);
}

void sub_10009CEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  uint64_t v9;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v9 - 160));
  _Unwind_Resume(a1);
}

void sub_10009CF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  void *v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[3];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topMainViewControllerContainer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "currentChildViewController"));
  objc_opt_class(CompactWidthMonthViewController);
  isKindOfClass = objc_opt_isKindOfClass(v8, v9);

  if ((isKindOfClass & 1) != 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topMainViewControllerContainer"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentChildViewController"));

    objc_msgSend(v12, "animateToMonthWeekSize:divided:", a2, a3);
    objc_msgSend(*(id *)(a1 + 32), "updateDividedMonthBarButtonItem");

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addEventBarButtonItem"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchBarButtonItem", v13));
  v19[1] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_compactMonthDividedListSwitchBarButtonItem"));
  v19[2] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 3));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topViewController"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "navigationItem"));
  objc_msgSend(v18, "setRightBarButtonItems:animated:", v16, 0);

}

uint64_t sub_10009D09C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10009D0B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009D0C4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[CUIKPreferences sharedPreferences](CUIKPreferences, "sharedPreferences"));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, objc_msgSend(v2, "monthViewEventScaleSize"), 0);

}

uint64_t sub_10009D118(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009D2CC(id a1, RootNavigationController *a2)
{
  id v2;

  v2 = -[RootNavigationController showSearchAnimated:becomeFirstResponder:completion:](a2, "showSearchAnimated:becomeFirstResponder:completion:", 1, 0, 0);
  CalAnalyticsSendEvent(CFSTR("userTappedSearchButton"), 0);
}

id sub_10009D3BC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "showSearchAnimated:becomeFirstResponder:completion:", 1, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_10009D3E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009D410(id a1, RootNavigationController *a2)
{
  void *v2;
  RootNavigationController *v3;
  Block_layout *v4;

  v2 = (void *)UIApp;
  v3 = a2;
  if (objc_msgSend(v2, "isRunningTest"))
    v4 = &stru_1001B4170;
  else
    v4 = 0;
  -[RootNavigationController showAddEventAnimated:completion:](v3, "showAddEventAnimated:completion:", 1, v4);

  CalAnalyticsSendEvent(CFSTR("userTappedAddEventButton"), 0);
}

void sub_10009D470(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("AddEventButton_AnimationCompleteNotification"), 0);

}

void sub_10009D4C8(id a1, RootNavigationController *a2)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  RootNavigationController *v5;

  v5 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[RootNavigationController model](v5, "model"));
  v3 = objc_msgSend(v2, "showDayAsList");

  if (v3)
    v4 = 0;
  else
    v4 = 2;
  -[RootNavigationController toggleDayViewMode:](v5, "toggleDayViewMode:", v4);

}

void sub_10009D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009D718(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (!WeakRetained)
  {
    v5 = kCalUILogHandle;
    if (!os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v9 = *(_QWORD *)(a1 + 32);
    v11 = 138543362;
    v12 = v9;
    v8 = "Suppressing %{public}@ because RootNavigationController has been deallocated.";
    goto LABEL_8;
  }
  if ((objc_msgSend(WeakRetained, "_isCurrentlyDraggingEvent") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "presentedViewController"));

    if (!v4)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      goto LABEL_11;
    }
  }
  v5 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v11 = 138543362;
    v12 = v7;
    v8 = "%{public}@ suppressed due to active event gestures, or presented view controller.";
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v11, 0xCu);
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, v6);
LABEL_11:

}

void sub_10009DF34(id a1, RootNavigationController *a2)
{
  RootNavigationController *v2;
  RootNavigationController *v3;

  v2 = a2;
  v3 = v2;
  if (v2->_showingAccountErrors && !v2->_interactedWithCalendarButtonForCurrentError)
  {
    +[EKUIAccountErrorsAnalyticsTracker trackRootUIInteractedWithError](EKUIAccountErrorsAnalyticsTracker, "trackRootUIInteractedWithError");
    v2 = v3;
    v3->_interactedWithCalendarButtonForCurrentError = 1;
  }
  -[RootNavigationController showCalendarsAnimated:completion:](v2, "showCalendarsAnimated:completion:", 1, 0);

}

id sub_10009E084(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "showCalendarsAnimated:completion:", 1, *(_QWORD *)(a1 + 32));
}

uint64_t sub_10009E094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009E0BC(id a1, RootNavigationController *a2)
{
  id v2;

  v2 = -[RootNavigationController showInboxAnimated:completion:](a2, "showInboxAnimated:completion:", 1, 0);
}

id sub_10009E168(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "showInboxAnimated:completion:", 1, *(_QWORD *)(a1 + 32));
}

void sub_10009E414(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  uint64_t v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentChildViewController"));
  objc_opt_class(LargeDayViewController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) == 0)
    objc_msgSend(v6, "invalidateManagedNavigationController");
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, *(unsigned __int8 *)(a1 + 48));

}

BOOL sub_10009E560(id a1, UIViewController *a2)
{
  UIViewController *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(MainViewController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

id sub_10009E794(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showCalendarsAnimated:completion:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10009E8A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168));
  return result;
}

void sub_10009ED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a35);
  _Unwind_Resume(a1);
}

void sub_10009EDB0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "model"));
    objc_msgSend(v2, "updateSourceForSelectedIdentity:selectedCalendars:", 0, 0);

    WeakRetained = v3;
  }

}

void sub_10009EE00(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "model"));
    objc_msgSend(v3, "updateSourceForSelectedIdentity:selectedCalendars:", *(_QWORD *)(a1 + 32), 0);

    WeakRetained = v4;
  }

}

void sub_10009F0FC(uint64_t a1, int a2)
{
  void *v3;
  AddEventViewController *v4;
  void *v5;
  AddEventViewController *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  NSObject *v15;
  uint8_t v16[16];

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_popToViewControllerSatisfying:", &stru_1001B42A8));
    if (v3)
    {
      v4 = [AddEventViewController alloc];
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
      v6 = -[AddEventViewController initWithModel:eventTitle:startDate:endDate:location:](v4, "initWithModel:eventTitle:startDate:endDate:location:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

      -[AddEventViewController setPresentedOverWholeApp:](v6, "setPresentedOverWholeApp:", 1);
      -[AddEventViewController setAllDay:](v6, "setAllDay:", *(unsigned __int8 *)(a1 + 104));
      -[AddEventViewController setExactEventStartDate:](v6, "setExactEventStartDate:", *(_QWORD *)(a1 + 72));
      -[AddEventViewController setSuggestionKey:](v6, "setSuggestionKey:", *(_QWORD *)(a1 + 80));
      -[AddEventViewController setDelegate:](v6, "setDelegate:", *(_QWORD *)(a1 + 32));
      -[AddEventViewController setEventCreationMethod:](v6, "setEventCreationMethod:", 2);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
      v8 = objc_opt_respondsToSelector(v7, "showEventDetailsWhenNewEventAdded");

      if ((v8 & 1) != 0)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
        -[AddEventViewController setShowEventWhenAdded:](v6, "setShowEventWhenAdded:", objc_msgSend(v9, "showEventDetailsWhenNewEventAdded"));

      }
      v10 = *(void **)(a1 + 32);
      v11 = *(void **)(a1 + 88);
      v12 = v11;
      if (!v11)
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addEventBarButtonItem"));
      v13 = EKUIContainedControllerIdealWidth();
      v14 = EKUIContainedControllerIdealWidth();
      objc_msgSend(v10, "_presentAdaptiveModalPopoverViewController:relativeToBarButtonItem:permittedArrowDirections:contentSize:animated:completion:", v6, v12, 1, *(unsigned __int8 *)(a1 + 105), *(_QWORD *)(a1 + 96), v13, v14 * EKUIGoldenRatioPhi());
      if (!v11)

    }
    else
    {
      v15 = kCalUILogHandle;
      if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "The current top view controller does not allow the add event view to be displayed above it.", v16, 2u);
      }
    }

  }
}

BOOL sub_10009F2D8(id a1, UIViewController *a2)
{
  UIViewController *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(MainViewController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

void sub_10009F410(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "presentingViewController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "presentedViewController"));

  if (v7)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10009F4F8;
    v11[3] = &unk_1001B42F8;
    v8 = v5;
    v9 = *(void **)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    v12 = v8;
    v13 = v9;
    objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "todayBarButtonItem"));
    objc_msgSend(v10, "setEnabled:", 1);

    objc_msgSend(*(id *)(a1 + 32), "_updateCalendarsButtonTitle");
  }

}

uint64_t sub_10009F4F8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  v5 = objc_msgSend(v4, "shouldInvalidateManagedNavigationControllerOnPresentationDismissal");

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
    objc_msgSend(v6, "invalidateManagedNavigationController");

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009FC10(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPopFallbackSizingContextWithViewHierarchy(v3);

}

void sub_10009FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id *sub_10009FE14(id *result, int a2)
{
  _QWORD v2[4];

  if (a2)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10009FE78;
    v2[3] = &unk_1001B4348;
    return (id *)objc_msgSend(result[4], "_popToViewControllerSatisfying:", v2);
  }
  return result;
}

uint64_t sub_10009FE78(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "navigationItem"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rightBarButtonItems"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBarButtonItem"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "containsObject:", v5);

  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_1000A0360(id a1, UIMutableTraits *a2)
{
  -[UIMutableTraits setHorizontalSizeClass:](a2, "setHorizontalSizeClass:", 1);
}

id sub_1000A036C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showSearchController:withSearchBar:animated:becomeFirstResponder:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 56));
}

void sub_1000A0468(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD block[4];
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  char v9;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A0510;
  block[3] = &unk_1001B4400;
  v9 = *(_BYTE *)(a1 + 64);
  v5 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 56);
  v2 = *(id *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = v2;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1000A0510(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "setNeedsUpdateOfSupportedInterfaceOrientations");
}

void sub_1000A0B94(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

id sub_1000A0BD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

id sub_1000A0BE0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

void sub_1000A1118(uint64_t a1, void *a2)
{
  unsigned int v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a2, "isCancelled");
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "disappearingViewController"));
    objc_msgSend(v4, "_updatePaletteStateWithViewController:", v5);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_updatePaletteStateWithViewController:", *(_QWORD *)(a1 + 40));
  }
}

id sub_1000A1184(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updatePaletteStateWithViewController:", *(_QWORD *)(a1 + 40));
}

void sub_1000A14DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A14F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A1504(uint64_t a1)
{

}

id sub_1000A150C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setAlpha:", 0.0);
}

id sub_1000A1520(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "removeFromSuperview");
}

void sub_1000A2390(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topViewController"));
  objc_msgSend(v2, "_updatePaletteStateWithViewController:", v3);

  objc_msgSend(*(id *)(a1 + 32), "_updateLeftFixedSpaceBarButtonItemWidthWithViewController:targetWindowSize:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBar"));
  objc_msgSend(v4, "setNeedsLayout");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewSwitcherLayoutHandler"));
  if (v5)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewSwitcherLayoutHandler"));
    objc_msgSend(v6, "rootNavigationControllerRequestsLayoutOfViewSwitcher:", *(_QWORD *)(a1 + 32));

  }
}

id sub_1000A244C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_invalidateNavBarDateStringCache");
  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 40), "updateNavigationBarDisplayedDateString") & 1) != 0)
    objc_msgSend(*(id *)(a1 + 40), "updateNavigationBarDisplayedDateString");
  return _objc_msgSend(*(id *)(a1 + 32), "updateDeviceOrientationForJumpToTodayTip");
}

void sub_1000A268C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1000A26A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setAlpha:", 0.0);
}

void sub_1000A26B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *j;
  void *v23;
  void *v24;
  void *v25;
  _OWORD v26[3];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];

  v3 = a2;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "layer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sublayers"));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        *(_QWORD *)&v13 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
        objc_msgSend(v14, "recursiveAnimationRemove:", v12, v13);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v9);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBar"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "superview"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "layer"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "sublayers"));

  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v28;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(_QWORD *)v28 != v21)
          objc_enumerationMutation(v18);
        objc_msgSend(*(id *)(a1 + 32), "recursiveAnimationRemoveForSmallLayers:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)j));
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v20);
  }

  v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "containerView"));
  v25 = v24;
  if (v24)
    objc_msgSend(v24, "transform");
  else
    memset(v26, 0, sizeof(v26));
  objc_msgSend(v23, "setTransform:", v26);

}

id sub_1000A2910(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "removeFromSuperview");
}

BOOL sub_1000A2CBC(id a1, UIViewController *a2)
{
  UIViewController *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(MainViewControllerContainer);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

void sub_1000A36B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v2;
    objc_opt_class(v3);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = v5;
    objc_opt_class(v7);
    *(_DWORD *)buf = 138412546;
    v19 = v6;
    v20 = 2112;
    v21 = v9;
    v10 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Completion handler for: [%@ showViewController:%@ sender:::]", buf, 0x16u);

  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000A3874;
  v13[3] = &unk_1001B2CB0;
  v11 = *(void **)(a1 + 56);
  v13[4] = *(_QWORD *)(a1 + 48);
  v14 = v11;
  v15 = *(id *)(a1 + 40);
  v16 = *(id *)(a1 + 64);
  v17 = *(id *)(a1 + 72);
  v12 = objc_retainBlock(v13);
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
    ((void (*)(_QWORD *))v12[2])(v12);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v12);

}

void sub_1000A3874(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPushFallbackSizingContextWithViewHierarchy(v2);

  v6 = *(id *)(a1 + 40);
  if (objc_msgSend(*(id *)(a1 + 48), "prefersForcedModalShowViewController"))
  {
    v3 = *(id *)(a1 + 48);

    v4 = v3;
  }
  else
  {
    v4 = v6;
  }
  v7 = v4;
  objc_msgSend(*(id *)(a1 + 32), "_replayJournal:withRootVC:topMainVC:", *(_QWORD *)(a1 + 56), v4, *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPopFallbackSizingContextWithViewHierarchy(v5);

}

void sub_1000A3918(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  id v8;
  char v9;
  void *v10;
  _BOOL4 v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;

  if (objc_msgSend(*(id *)(a1 + 32), "displayType") == (id)1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "presentingViewController"));
    if (v2 || *(_BYTE *)(a1 + 72))
      v3 = 1;
    else
      v3 = objc_msgSend(*(id *)(a1 + 48), "_viewControllerRequiresSystemPresentation:", *(_QWORD *)(a1 + 56));

  }
  else
  {
    v3 = 0;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    if (*(_BYTE *)(a1 + 74))
    {
      v4 = *(_QWORD *)(a1 + 40);
      objc_opt_class(UINavigationController);
      isKindOfClass = objc_opt_isKindOfClass(v4, v5);
      v7 = *(void **)(a1 + 40);
      if ((isKindOfClass & 1) != 0)
        v8 = v7;
      else
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "navigationController"));
      v30 = v8;
      objc_msgSend(v8, "pushViewController:animated:", *(_QWORD *)(a1 + 56), 0);

    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 56), "modalPresentationStyle") == (id)7)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "popoverPresentationController"));
        objc_msgSend(v21, "setSourceView:", v20);

      }
      objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64));
    }
  }
  else
  {
    v9 = v3 | ~objc_opt_respondsToSelector(*(_QWORD *)(a1 + 40), "showViewController:sender:animated:completion:");
    v10 = (void *)kCalUILogHandle;
    v11 = os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEFAULT);
    if ((v9 & 1) != 0)
    {
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 40);
        v13 = v10;
        objc_opt_class(v12);
        v15 = v14;
        v16 = *(_QWORD *)(a1 + 56);
        v17 = v14;
        objc_opt_class(v16);
        *(_DWORD *)buf = 138412546;
        v32 = v15;
        v33 = 2112;
        v34 = v18;
        v19 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Calling [%@ presentViewController:%@]", buf, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64));
    }
    else
    {
      if (v11)
      {
        v22 = *(_QWORD *)(a1 + 40);
        v23 = v10;
        objc_opt_class(v22);
        v25 = v24;
        v26 = *(_QWORD *)(a1 + 56);
        v27 = v24;
        objc_opt_class(v26);
        *(_DWORD *)buf = 138412546;
        v32 = v25;
        v33 = 2112;
        v34 = v28;
        v29 = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Calling [%@ showViewController:%@ sender:::]", buf, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 40), "showViewController:sender:animated:completion:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 64));
    }
  }
}

void sub_1000A439C(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "_setNavigationStackOfMainViewControllersForTraitsTransitionFromTraitCollection:toNewTraitCollection:withPreTransitionViewType:withPreferredPostTransitionViewType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  objc_msgSend(v6, "setupForViewAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentChildViewController"));
  if ((objc_opt_respondsToSelector(v2, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:") & 1) != 0)
    objc_msgSend(v2, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:", objc_msgSend(*(id *)(a1 + 56), "isEmpty") ^ 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "viewControllerToShowFrom"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  if ((v4 & 1) == 0)
    v5 = objc_msgSend(v2, "managedNavigationController");
  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_replayJournal:withRootVC:topMainVC:", *(_QWORD *)(a1 + 56), v2, v2);
  +[CATransaction commit](CATransaction, "commit");

}

void sub_1000A4490(uint64_t a1, void *a2)
{
  uint64_t v3;
  Class v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = NSClassFromString(CFSTR("_UIDatePickerWheelsTimeLabel"));
    if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
  }
  if (+[ApplicationTester testingSessionStarted](ApplicationTester, "testingSessionStarted"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v5, "postNotificationName:object:", CFSTR("RootNavigationController_TransitionCompletedNotification"), *(_QWORD *)(a1 + 40));

  }
  objc_msgSend(*(id *)(a1 + 40), "_adjustNavBarVisibilityAfterTraitCollectionChange");

}

void sub_1000A452C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("RootNavigationController_TransitionStartedNotification"), *(_QWORD *)(a1 + 32));

}

void sub_1000A4FEC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  objc_msgSend(v2, "selectDate:andTime:animated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));

}

void sub_1000A5230(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  if (a2)
  {
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "calendar"));
    v4 = v3;
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
      objc_msgSend(v9, "ensureCalendarVisibleWithId:", v5);

    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "startCalendarDate"));
    objc_msgSend(v9, "setSelectedDate:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_popToViewControllerSatisfying:", &stru_1001B4558));
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));

  }
}

BOOL sub_1000A5304(id a1, UIViewController *a2)
{
  UIViewController *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(MainViewController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

void sub_1000A53C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSPersonNameComponents *v6;
  void *v7;
  void *v8;
  NSPersonNameComponentsFormatter *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CalContactsProvider defaultProvider](CalContactsProvider, "defaultProvider"));
  v3 = *(_QWORD *)(a1 + 32);
  v19[0] = CNContactGivenNameKey;
  v19[1] = CNContactFamilyNameKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "unifiedContactWithIdentifier:keysToFetch:", v3, v4));

  if (v5)
  {
    v6 = objc_opt_new(NSPersonNameComponents);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "givenName"));
    -[NSPersonNameComponents setGivenName:](v6, "setGivenName:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "familyName"));
    -[NSPersonNameComponents setFamilyName:](v6, "setFamilyName:", v8);

    v9 = objc_opt_new(NSPersonNameComponentsFormatter);
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSPersonNameComponentsFormatter stringFromPersonNameComponents:](v9, "stringFromPersonNameComponents:", v6));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "topViewController"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "navigationItem"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "rightBarButtonItems"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "searchBarButtonItem"));
    v15 = objc_msgSend(v13, "containsObject:", v14);

    if (objc_msgSend(v10, "length") && v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "presentedViewController"));

      if (v16)
        objc_msgSend(*(id *)(a1 + 40), "dismissViewControllerAnimated:completion:", 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "showSearchAnimated:becomeFirstResponder:completion:", 1, 0, 0));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "searchBar"));
      objc_msgSend(v18, "setText:", v10);

    }
  }

}

id sub_1000A60D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setDateString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
}

void sub_1000A63A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMainViewControllerContainer"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bestDateForNewEvent"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPushFallbackSizingContextWithViewHierarchy(v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pushCalendarViewControllerWithViewType:andDate:", *(_QWORD *)(a1 + 40), v6));
  objc_msgSend(v4, "viewSwitcherSwitchedToViewWithDate:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPopFallbackSizingContextWithViewHierarchy(v5);

}

void sub_1000A68F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A690C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  double v8;
  uint64_t v9;
  NSAttributedStringKey v10;
  void *v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_switcherFontOfSize:isSemibold:", 0, 16.0));
  v10 = NSFontAttributeName;
  v11 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v7 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v4, v6);

  objc_msgSend(v7, "boundingRectWithSize:options:context:", 0, 0, 1.79769313e308, 1.79769313e308);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v8 > *(double *)(v9 + 24))
    *(double *)(v9 + 24) = v8;

}

void sub_1000A6D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A6D70(double *a1, void *a2)
{
  void *v3;
  double v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  double v9;
  uint64_t v10;
  NSAttributedStringKey v11;
  void *v12;

  v3 = (void *)*((_QWORD *)a1 + 4);
  v4 = a1[6];
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_switcherFontOfSize:isSemibold:", 0, v4));
  v11 = NSFontAttributeName;
  v12 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v8 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v5, v7);

  objc_msgSend(v8, "boundingRectWithSize:options:context:", 0, 0, 1.79769313e308, 1.79769313e308);
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  if (v9 > *(double *)(v10 + 24))
    *(double *)(v10 + 24) = v9;

}

void sub_1000A764C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "showInboxAnimated:", 0));
  objc_msgSend(v2, "showEvent:animated:", *(_QWORD *)(a1 + 40), 0);

}

void sub_1000A7694(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventStore"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A7708;
  v3[3] = &unk_1001B4618;
  v3[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "familyCalendarsWithCompletion:", v3);

}

void sub_1000A7708(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "count") == (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
    objc_msgSend(*(id *)(a1 + 32), "showCalendar:", v3);

  }
}

void sub_1000A79C4(id a1)
{
  byte_1001F6280 = objc_opt_class(CalendarDiagnosticsUIViewController) != 0;
}

void sub_1000A7B78(uint64_t a1, int a2)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  if (a2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000A7BF0;
    v3[3] = &unk_1001B4640;
    v2 = *(void **)(a1 + 40);
    v4 = *(id *)(a1 + 32);
    v5 = v2;
    objc_msgSend(v4, "showCalendarsAnimated:completion:", 1, v3);

  }
}

id sub_1000A7BF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "showAddSubscribedCalendarWithURL:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A87F8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 181) = 0;
  return result;
}

void sub_1000A89C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A89E0(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  id *v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topViewController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "navigationItem"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rightBarButtonItems"));
    v6 = objc_msgSend(v5, "containsObject:", v9[2]);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "presentedViewController"));
    if (v7 || !v6)
    {

      goto LABEL_7;
    }
    v8 = objc_msgSend(v9[2], "isEnabled");
    v2 = v9;
    if (v8)
    {
      objc_msgSend(v9, "showAddEventAnimated:completion:", 1, 0);
LABEL_7:
      v2 = v9;
    }
  }

}

void sub_1000A8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A8B88(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;
  _QWORD *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "navigationItem"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rightBarButtonItems"));
    v5 = objc_msgSend(v4, "containsObject:", v8[3]);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "presentedViewController"));
    WeakRetained = v8;
    if (!v6)
    {
      if (v5)
      {
        v7 = objc_msgSend(v8, "showSearchAnimated:becomeFirstResponder:completion:", 1, 1, 0);
        WeakRetained = v8;
      }
    }
  }

}

void sub_1000A8EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A8EDC(uint64_t a1, void *a2, uint64_t a3)
{
  id *v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v5 = (id *)(a1 + 40);
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modifiedStartDate"));
  objc_msgSend(v6, "setStartDate:", v8);

  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "modifiedEndDate"));
  objc_msgSend(v6, "setEndDateUnadjustedForLegacyClients:", v10);

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "EKUI_editor"));
  objc_msgSend(v11, "saveEvent:span:error:", v6, a3, 0);

}

id sub_1000A9EC8(id *a1)
{
  void *v2;

  objc_msgSend(a1[4], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[5], "setAnimatingViewTransition:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transitionView"));
  objc_msgSend(v2, "removeFromSuperview");

  return objc_msgSend(a1[7], "completeTransition:", 1);
}

id sub_1000A9F1C(id *a1)
{
  void *v2;

  objc_msgSend(a1[4], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[5], "setAnimatingViewTransition:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transitionView"));
  objc_msgSend(v2, "removeFromSuperview");

  return objc_msgSend(a1[7], "completeTransition:", 1);
}

void sub_1000AAD50(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v1 = objc_alloc_init((Class)UILabel);
  v2 = (void *)qword_1001F6290;
  qword_1001F6290 = (uint64_t)v1;

  v3 = objc_alloc_init((Class)UILabel);
  v4 = (void *)qword_1001F6298;
  qword_1001F6298 = (uint64_t)v3;

  v5 = CUIKLocalizedStringForInteger(22);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend((id)qword_1001F6290, "setText:", v6);

  v7 = CUIKLocalizedStringForInteger(22);
  v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend((id)qword_1001F6298, "setText:", v8);

}

id sub_1000AC244(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setDoneButtonState");
}

void sub_1000AD234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AD260(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = WeakRetained[14];
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v8, "updateDayNumber", (_QWORD)v13);
          objc_msgSend(v8, "updateOverlay");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

    objc_msgSend(v2[17], "hideOverlayAndNumber:", 1);
    if ((objc_msgSend(v2, "compressedVerticalMode") & 1) != 0)
      v9 = objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    else
      v9 = objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
    v10 = (void *)v9;
    objc_msgSend(v2[8], "setBackgroundColor:", v9, (_QWORD)v13);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[17], "attachedTodayCircle"));
    objc_msgSend(v11, "setBackgroundColor:", v10);

    objc_msgSend(v2, "_forceReloadImagesForDayTypeBadges");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[20], "layer"));
    objc_msgSend(v12, "setNeedsDisplay");

  }
}

void sub_1000AD4DC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v2 = (void *)qword_1001F62A8;
  qword_1001F62A8 = v1;

}

void sub_1000ADC48(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)__cachedCalculatedValues;
  __cachedCalculatedValues = (uint64_t)v1;

}

void sub_1000AF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_1000AF5BC(uint64_t a1, void *a2, uint64_t a3)
{
  double Width;
  double v6;
  double v7;
  void *v8;
  id v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat MaxY;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double MidX;
  CGFloat v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  void *v38;
  void *v39;
  void *v40;
  double v41;
  void *v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  id v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;

  v93 = a2;
  objc_msgSend(v93, "frame");
  Width = CGRectGetWidth(v94);
  objc_msgSend(v93, "frame");
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "layer"));
  v9 = objc_msgSend(v8, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = 1.0 / EKUIScaleFactor(v9);
  v95.origin.x = v11;
  v95.origin.y = v13;
  v95.size.width = v15;
  v95.size.height = v17;
  v91 = v7;
  v92 = Width;
  v19 = v7 + (Width - CGRectGetWidth(v95)) * 0.5;
  v20 = *(double *)(a1 + 80);
  objc_msgSend(v8, "setFrame:", CalRoundRectToScreenScale(v19, v20, v15, v17));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "overlay"));

  if (v21)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "overlay"));
    objc_msgSend(v22, "frame");
    v89 = v18;
    v24 = v23;
    v26 = v25;
    v28 = v27;

    v96.origin.x = v19;
    v96.origin.y = v20;
    v96.size.width = v15;
    v96.size.height = v17;
    MaxY = CGRectGetMaxY(v96);
    v32 = CalRoundToScreenScale(v30, v31, MaxY + -2.0);
    v97.origin.x = v19;
    v97.origin.y = v20;
    v97.size.width = v15;
    v97.size.height = v17;
    MidX = CGRectGetMidX(v97);
    v98.origin.x = v24;
    v18 = v89;
    v98.origin.y = v32;
    v98.size.width = v26;
    v98.size.height = v28;
    v34 = CGRectGetWidth(v98);
    v37 = CalRoundToScreenScale(v35, v36, MidX + v34 * -0.5 - v89);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "overlay"));
    objc_msgSend(v38, "setFrame:", v37, v32, v26, v28);

  }
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "attachedTodayCircle"));

  if (v39)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "attachedTodayCircle"));
    objc_msgSend(v40, "setCompressed:", objc_msgSend(*(id *)(a1 + 32), "compressedVerticalMode"));
    objc_msgSend(v40, "sizeToFit");
    *(_QWORD *)&v41 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
    v43 = v42;
    objc_msgSend(v40, "frame", v41);
    v88 = v45;
    v90 = v44;
    objc_msgSend(v8, "frame");
    v87 = v46;
    v48 = v47;
    v50 = v49;
    v52 = v51;
    objc_msgSend(v93, "frame");
    v53 = v18;
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "overlay"));
    v86 = v55;
    v18 = v53;
    objc_msgSend(v43, "frameForDayCircleWithSize:dayNumberLayerFrame:dayNumberFrame:withOverlay:compressed:containsFirstDayOfMonth:", v62 != 0, objc_msgSend(*(id *)(a1 + 32), "compressedVerticalMode"), objc_msgSend(*(id *)(a1 + 32), "containsFirstDayOfMonth"), v90, v88, v87, v48, v50, v52, v86, v57, v59, v61);
    v64 = v63;
    v66 = v65;
    v68 = v67;
    v70 = v69;

    objc_msgSend(v40, "setFrame:", v64, v66, v68, v70);
  }
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "calendarDate"));

  if (v71)
  {
    v72 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if ((*(_QWORD *)(v72 + 24) & 0x8000000000000000) != 0)
      *(_QWORD *)(v72 + 24) = a3;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a3;
    v73 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v91 < *(double *)(v73 + 24))
      *(double *)(v73 + 24) = v91;
    v74 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (*(double *)(v74 + 24) == 0.0)
      *(double *)(v74 + 24) = v92;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v92
                                                                + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                            + 24);
  }
  objc_msgSend(*(id *)(a1 + 32), "_layoutDayTypeBadgeForDayNumber:yOffset:", v93, *(double *)(a1 + 88));
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "objectAtIndex:", a3));
  v77 = CalRoundToScreenScale(v75, v76, v92 + -6.0);
  v80 = v18 + CalRoundToScreenScale(v78, v79, v92 * 0.5 + v91 - v77 * 0.5);
  objc_msgSend(*(id *)(a1 + 32), "frame");
  v82 = v81 - *(double *)(a1 + 96);
  +[CompactMonthWeekView verticalEventPadding:](CompactMonthWeekView, "verticalEventPadding:", objc_msgSend(*(id *)(a1 + 32), "compressedVerticalMode"));
  objc_msgSend(v75, "setFrame:", v80, v82 - v83, v77, 6.0);
  objc_msgSend(v75, "setNeedsDisplay");
  v84 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v84 + 255))
  {
    v85 = 0.0;
    if (!*(_BYTE *)(v84 + 120))
      v85 = 1.0;
    objc_msgSend(v75, "setAlpha:", v85);
  }

}

void sub_1000B00D4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "objectAtIndex:"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "processedEventData", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "eventIdentifier"));
        if (v9)
        {
          v10 = (void *)v9;
          v11 = *(void **)(a1 + 40);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "eventIdentifier"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v12));

          if (!v13)
          {
            v14 = *(void **)(a1 + 40);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "eventIdentifier"));
            objc_msgSend(v14, "setObject:forKeyedSubscript:", v2, v15);

          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

}

MonthViewOccurrence *sub_1000B0260(uint64_t a1, void *a2)
{
  id v3;
  MonthViewOccurrence *v4;
  void *v5;
  id v6;
  uint64_t v7;
  MonthViewOccurrence *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v3 = a2;
  v4 = [MonthViewOccurrence alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrence"));
  v6 = objc_msgSend(v3, "dayRange");
  v8 = -[MonthViewOccurrence initWithFrame:occurrence:forDayRange:isCompact:](v4, "initWithFrame:occurrence:forDayRange:isCompact:", v5, v6, v7, 1, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);

  v9 = *(void **)(a1 + 32);
  objc_msgSend(v3, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  objc_msgSend(v9, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160), v11, v13, v15, v17);
  -[MonthViewOccurrence setFrame:](v8, "setFrame:");
  objc_msgSend(*(id *)(a1 + 32), "addSubview:", v8);
  return v8;
}

void sub_1000B0358(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  AnimationInfo *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  v21 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "occurrence"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "eventOccurrenceID"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  if (v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 176), "objectForKeyedSubscript:", v5));
    if (v7)
    {
      v8 = (AnimationInfo *)v7;
      v9 = 0;
    }
    else
    {
      v8 = objc_opt_new(AnimationInfo);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 176), "setObject:forKeyedSubscript:", v8, v5);
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dataForEventID:", v5));
      objc_msgSend(v12, "setAnimating:", 1);
      -[AnimationInfo setView:](v8, "setView:", v9);
      -[AnimationInfo setSummary:](v8, "setSummary:", v6);
      -[AnimationInfo setEventID:](v8, "setEventID:", v5);
      -[AnimationInfo setOccurrenceView:](v8, "setOccurrenceView:", v21);
      -[AnimationInfo setSummaryData:](v8, "setSummaryData:", v12);

    }
    if (*(_BYTE *)(a1 + 57))
    {
      v13 = *(void **)(a1 + 40);
      objc_msgSend(v6, "frameForEventID:", v5);
      objc_msgSend(v13, "convertRect:fromView:", v6);
      objc_msgSend(v9, "setFrame:");
    }
    else
    {
      objc_msgSend(v9, "setDrawBackgroundWithLayer:", 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue(-[AnimationInfo occurrenceView](v8, "occurrenceView"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "occurrence"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "calendar"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "displayColor"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "traitCollection"));
      v18 = CUIKSummaryColorForColor(v16, objc_msgSend(v17, "userInterfaceStyle"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

      objc_msgSend(v9, "updateBackgroundWithEdgeInsets:color:alpha:cornerMask:", v19, objc_msgSend(v6, "backGroundCornerMaskforEventID:", v5), UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right, 1.0);
    }
    objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", v5);
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v8 = objc_opt_new(AnimationInfo);
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[AnimationInfo setView:](v8, "setView:", v9);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 184), "addObject:", v8);
LABEL_11:

  }
}

void sub_1000B05F8(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  v16 = v6;
  if (v4)
  {
    objc_msgSend(v6, "setDrawBackgroundWithLayer:", 1);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "occurrenceView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "occurrence"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "calendar"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "displayColor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
    v12 = CUIKSummaryColorForColor(v10, objc_msgSend(v11, "userInterfaceStyle"));
    v16 = (id)objc_claimAutoreleasedReturnValue(v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "summary"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "eventID"));

    objc_msgSend(v13, "updateBackgroundWithEdgeInsets:color:alpha:cornerMask:", v16, objc_msgSend(v14, "backGroundCornerMaskforEventID:", v15), UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right, 1.0);
  }
  else
  {

    objc_msgSend(v16, "setDrawBackgroundWithLayer:", 0);
  }

}

id sub_1000B0750(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];
  char v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 176);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B07BC;
  v4[3] = &unk_1001B47B0;
  v4[4] = v1;
  v5 = *(_BYTE *)(a1 + 40);
  return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
}

void sub_1000B07BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  _QWORD v31[5];
  char v32;

  v30 = a3;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 112);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1000B09B4;
  v31[3] = &unk_1001B47D8;
  v31[4] = v4;
  v32 = *(_BYTE *)(a1 + 40);
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v31);
  if (*(_BYTE *)(a1 + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "summary"));
    if (v6)
    {
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "eventID"));
      objc_msgSend(v6, "frameForEventID:", v8);
      objc_msgSend(v7, "convertRect:fromView:", v6);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "view"));
      objc_msgSend(v17, "setFrame:", v10, v12, v14, v16);

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "view"));
      objc_msgSend(v8, "setAlpha:", 0.0);
    }

  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "occurrenceView"));

    if (v18)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "occurrenceView"));
      objc_msgSend(v19, "setHidden:", 1);

      v20 = *(void **)(a1 + 32);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "occurrenceView"));
      objc_msgSend(v21, "frame");
      objc_msgSend(v20, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
      v23 = v22;
      v25 = v24;
      v27 = v26;
      v29 = v28;

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "view"));
      objc_msgSend(v6, "setFrame:", v23, v25, v27, v29);
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "view"));
      objc_msgSend(v6, "setAlpha:", 0.0);
    }
  }

}

void sub_1000B09B4(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "objectAtIndex:"));
  v4 = v2;
  v3 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v3 = 0.0;
  objc_msgSend(v2, "setAlpha:", v3);

}

id sub_1000B0A10(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 184);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B0A94;
  v5[3] = &unk_1001B4800;
  v5[4] = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setAlpha:", 0.0);
}

void sub_1000B0A94(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "occurrenceView"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "occurrenceView"));
  objc_msgSend(v4, "setHidden:", 1);

  if (v3)
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(v3, "frame");
    objc_msgSend(v5, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
    v8 = v7 + v6 * 0.5 + -3.0;
    v11 = v9 - v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "view"));
    objc_msgSend(v12, "setFrame:", v8, v11, 6.0, 6.0);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "view"));
  objc_msgSend(v13, "setAlpha:", 0.0);

}

id sub_1000B0B84(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 184);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B0C08;
  v5[3] = &unk_1001B4800;
  v5[4] = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "setAlpha:", 1.0);
}

void sub_1000B0C08(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "occurrenceView"));
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "frame");
  objc_msgSend(v4, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "view"));
  objc_msgSend(v13, "setFrame:", v6, v8, v10, v12);

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 216))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "view"));
    objc_msgSend(v14, "setAlpha:", 1.0);

  }
}

id sub_1000B0CE8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 184);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B0D48;
  v4[3] = &unk_1001B4800;
  v4[4] = v1;
  return objc_msgSend(v2, "enumerateObjectsUsingBlock:", v4);
}

void sub_1000B0D48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;

  v3 = a2;
  v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrenceView"));
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v17, "frame");
  objc_msgSend(v4, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(v17, "backgroundInsets");
  v12 = v11;
  objc_msgSend(v17, "backgroundInsets");
  v14 = v12 + v13 + 6.0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v15, "setFrame:", v6 + v10 * 0.5 - v14 * 0.5, v8, v14, v14);

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v16, "setAlpha:", 1.0);

}

_QWORD *sub_1000B0E48(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD v4[5];

  v1 = result[4];
  if (result[5] == *(_QWORD *)(v1 + 208))
  {
    v2 = result;
    v3 = *(void **)(v1 + 184);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000B0EE0;
    v4[3] = &unk_1001B4800;
    v4[4] = v1;
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);
    return objc_msgSend(*(id *)(v2[4] + 160), "setAlpha:", 1.0);
  }
  return result;
}

void sub_1000B0EE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  id v14;

  v3 = a2;
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrenceView"));
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v14, "frame");
  objc_msgSend(v4, "convertRect:fromView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160));
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));

  objc_msgSend(v13, "setFrame:", v6, v8, v10, v12);
}

uint64_t sub_1000B0F94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[6];
  result = a1[4];
  if (v2 == *(_QWORD *)(result + 208))
  {
    objc_msgSend((id)result, "finishAnimations");
    result = a1[5];
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B11B4(id a1, id a2, AnimationInfo *a3, BOOL *a4)
{
  AnimationInfo *v4;
  void *v5;
  id v6;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[AnimationInfo view](v4, "view"));
  objc_msgSend(v5, "removeFromSuperview");

  v6 = (id)objc_claimAutoreleasedReturnValue(-[AnimationInfo summaryData](v4, "summaryData"));
  objc_msgSend(v6, "setAnimating:", 0);

}

id sub_1000B14D4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 0);
  return objc_msgSend(*(id *)(a1 + 40), "haltTodayPulse");
}

void sub_1000B1BB0(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "frame");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:"));
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_1000B1CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1CE8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B1CF8(uint64_t a1)
{

}

void sub_1000B1D00(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  CGRect v10;

  v9 = a2;
  if (objc_msgSend(v9, "representsActualDate"))
  {
    objc_msgSend(v9, "frame");
    if (CGRectContainsPoint(v10, *(CGPoint *)(a1 + 40)))
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "calendarDate"));
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      *a4 = 1;
    }
  }

}

void sub_1000B1E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000B1E2C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  CGRect v8;

  v7 = a2;
  if (objc_msgSend(v7, "representsActualDate"))
  {
    objc_msgSend(v7, "frame");
    if (CGRectContainsPoint(v8, *(CGPoint *)(a1 + 40)))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
      *a4 = 1;
    }
  }

}

void sub_1000B2200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000B2224(_QWORD *a1, void *a2)
{
  unsigned int v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v3 = objc_msgSend(v17, "representsActualDate");
  v4 = v17;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "calendarDate"));
    if (!objc_msgSend(v5, "compare:", a1[4]))
    {
      objc_msgSend(v17, "frame");
      v6 = *(_QWORD **)(a1[5] + 8);
      v6[4] = v7;
      v6[5] = v8;
      v6[6] = v9;
      v6[7] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "layer"));
      objc_msgSend(v11, "frame");
      v12 = *(_QWORD **)(a1[6] + 8);
      v12[4] = v13;
      v12[5] = v14;
      v12[6] = v15;
      v12[7] = v16;

    }
    v4 = v17;
  }

}

void sub_1000B2528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000B2568(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = a2;
  v9 = v5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) <= a3)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "month") == *(id *)(a1 + 72))
    {
      objc_msgSend(v9, "setCalendarDate:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      if ((unint64_t)(a3 + 1) < *(_QWORD *)(a1 + 80))
      {
        v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "calendarDateByAddingDays:", 1));
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v8 = *(void **)(v7 + 40);
        *(_QWORD *)(v7 + 40) = v6;

      }
    }
    else
    {
      objc_msgSend(v9, "setCalendarDate:", 0);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }
  }
  else
  {
    objc_msgSend(v5, "setCalendarDate:", 0);
  }

}

id sub_1000B281C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setAlpha:", *(double *)(a1 + 40));
}

void sub_1000B2950(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "calendarDate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "date"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[EKCalendarDate calendarDateWithDate:timeZone:](EKCalendarDate, "calendarDateWithDate:timeZone:", v4, *(_QWORD *)(a1 + 32)));
  objc_msgSend(v3, "setCalendarDate:", v5);

}

void sub_1000B2CA0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a2;
  v7 = objc_msgSend(v23, "representsActualDate");
  v8 = v23;
  if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "calendarDate"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "calendarDateForDay"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "date"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "calendarDateForEndOfDay"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "date"));

    if (objc_msgSend(v11, "compare:", *(_QWORD *)(a1 + 32)) != (id)1
      && objc_msgSend(v13, "compare:", *(_QWORD *)(a1 + 32)) != (id)-1)
    {
      v14 = *(_QWORD **)(a1 + 40);
      if ((id)v14[17] != v23)
      {
        objc_msgSend(v14, "_clearTodayHighlight");
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "makeDayCircleForDate:isToday:", v9, 1));
        objc_msgSend(*(id *)(a1 + 40), "addSubview:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "attachedTodayCircle"));
        objc_msgSend(v16, "removeFromSuperview");

        objc_msgSend(v23, "setAttachedTodayCircle:", v15);
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 136), a2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "hideOverlayAndNumber:", 1);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dayTypeBadge"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "superlayer"));

        if (v18)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dayTypeBadge"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "superlayer"));

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dayTypeBadge"));
          objc_msgSend(v21, "removeFromSuperlayer");

          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dayTypeBadge"));
          objc_msgSend(v20, "addSublayer:", v22);

        }
      }
      *a4 = 1;
    }

    v8 = v23;
  }

}

void sub_1000B3378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void sub_1000B33A4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "calendarDate"));

  if (v7)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_1000B33FC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + a3;
  if (v5 < (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "objectAtIndexedSubscript:", v5));
    v7 = *(void **)(a1 + 32);
    v8 = objc_msgSend(v16, "dayType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dayTypeBadgeColor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dayTypeBadgeLocale"));
    objc_msgSend(v7, "_updateDayTypeBadgeForDayNumber:withDayType:color:locale:forceImageUpdate:", v6, v8, v9, v10, 0);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "calendarDate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "date"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "calendar"));
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "eventSummaryData"));
    objc_msgSend(v14, "_updateSingleDaySummaryForDayIndex:withData:date:calendar:", v5, v15, v12, v13);

  }
}

id sub_1000B3548(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDayTypeBadgeForDayNumber:withDayType:color:locale:forceImageUpdate:", a2, 0, 0, 0, 0);
}

void sub_1000B3AB0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachedTodayCircle"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_1000B4228(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000B4240(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "calendarDate"));

  if (v7)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_1000B4298(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + a3;
  if (v5 < (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "objectAtIndexedSubscript:", v5));
    v7 = *(void **)(a1 + 32);
    v8 = objc_msgSend(v11, "dayType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dayTypeBadgeColor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dayTypeBadgeLocale"));
    objc_msgSend(v7, "_updateDayTypeBadgeForDayNumber:withDayType:color:locale:forceImageUpdate:", v6, v8, v9, v10, 1);

  }
}

void sub_1000B4434(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v2, "cgColor");
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dayTypeBadge"));

  objc_msgSend(v5, "setBackgroundColor:", v4);
}

id sub_1000B53C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlay"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  objc_msgSend(v4, "setHidden:", 0);

  return +[CATransaction commit](CATransaction, "commit");
}

void sub_1000B58C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B58DC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "calendarDate"));

  if (v7)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_1000B60C8(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.05));
  v2 = (void *)qword_1001F62C0;
  qword_1001F62C0 = v1;

  v3 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.1));
  v4 = (void *)qword_1001F62C8;
  qword_1001F62C8 = v3;

}

id sub_1000B6130(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_1000B613C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_1000B6148(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

int64_t sub_1000B6D9C(id a1, EventSummaryData *a2, EventSummaryData *a3)
{
  EventSummaryData *v4;
  EventSummaryData *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  int64_t v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[EventSummaryData startDate](v4, "startDate"));
  objc_msgSend(v6, "timeIntervalSinceReferenceDate");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(-[EventSummaryData startDate](v5, "startDate"));
  objc_msgSend(v9, "timeIntervalSinceReferenceDate");
  v11 = v10;

  if (-[EventSummaryData isAllDay](v4, "isAllDay") && !-[EventSummaryData isAllDay](v5, "isAllDay"))
  {
    v12 = -1;
  }
  else if (-[EventSummaryData isAllDay](v4, "isAllDay") || !-[EventSummaryData isAllDay](v5, "isAllDay"))
  {
    if (-[EventSummaryData isAllDay](v4, "isAllDay") && -[EventSummaryData isAllDay](v5, "isAllDay"))
    {
      v12 = 0;
    }
    else if (vabdd_f64(v8, v11) >= 2.22044605e-16)
    {
      if (v8 >= v11)
        v12 = 1;
      else
        v12 = -1;
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[EventSummaryData endDate](v4, "endDate"));
      objc_msgSend(v13, "timeIntervalSinceReferenceDate");
      v15 = v14 - v8;

      v16 = (void *)objc_claimAutoreleasedReturnValue(-[EventSummaryData endDate](v5, "endDate"));
      objc_msgSend(v16, "timeIntervalSinceReferenceDate");
      v18 = v17 - v11;

      v19 = vabdd_f64(v15, v18);
      v20 = -1;
      if (v15 >= v18)
        v20 = 1;
      if (v19 >= 2.22044605e-16)
        v12 = v20;
      else
        v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

uint64_t sub_1000B6EF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v16 = 0.0;
  v17 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "color"));
  objc_msgSend(v6, "getHue:saturation:brightness:alpha:", &v17, &v16, &v15, 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "color"));
  objc_msgSend(v7, "getHue:saturation:brightness:alpha:", &v14, &v13, &v12, 0);

  v8 = *(double *)(a1 + 32);
  v9 = v8 * floor(v17 / v8);
  v10 = v8 * floor(v14 / v8);
  if (vabdd_f64(v9, v10) >= 2.22044605e-16)
  {
    if (v9 < v10)
      return -1;
    if (v9 > v10)
      return 1;
  }
  if (v16 < v13)
    return -1;
  if (v16 <= v13)
  {
    if (v15 >= v12)
      return v15 > v12;
    return -1;
  }
  return 1;
}

void sub_1000B8374(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B83E8;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

id sub_1000B83E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

void sub_1000B8BDC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_1001F6308;
  qword_1001F6308 = (uint64_t)v1;

}

id sub_1000B9D78(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "scrollView:completionBlock:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000BA170(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_listViewDidAppear", CFSTR("ListViewController_ViewDidAppearNotification"), 0);

  v3 = *(void **)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "selectedDate"));
  v5 = objc_msgSend(v3, "pushCalendarViewControllerWithViewType:andDate:", 4, v4);

}

id sub_1000BA208(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, *(_QWORD *)(a1 + 40));
}

void sub_1000BA2AC(uint64_t a1)
{
  double v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];

  *(_QWORD *)&v2 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testName", v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v5, "startedTest:", v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "rootNavigationController"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topViewController"));
  objc_opt_class(ListViewContainerViewController);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentChildViewController"));
    objc_opt_class(ListViewController);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "tableViewForTesting"));
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(void **)(v13 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1000BA440;
      v17[3] = &unk_1001B2538;
      v17[4] = v13;
      objc_msgSend(v14, "scrollView:completionBlock:", v12, v17);

    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
      objc_msgSend(v16, "failedTest:withResults:", v4, 0);

    }
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
    objc_msgSend(v15, "failedTest:withResults:", v4, 0);

  }
}

void sub_1000BA440(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  objc_msgSend(v1, "setShowDayAsList:", 0);

}

void sub_1000BA8E0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (v2)
  {
    objc_msgSend(v2, "setViewControllers:animated:", &__NSArray0__struct, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeFromParentViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "view"));
    objc_msgSend(v3, "removeFromSuperview");

    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;

  }
}

void sub_1000BACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BACE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000BACF0(uint64_t a1)
{

}

void sub_1000BACF8(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if ((objc_opt_isKindOfClass(v4, *(_QWORD *)(a1 + 40)) & 1) != 0)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

}

id sub_1000BB0B8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "disableRotationTimings");
  if ((result & 1) == 0)
    return _objc_msgSend(*(id *)(a1 + 32), "transitionToSizeDidEnd");
  return result;
}

void sub_1000BB1A0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1000BB880(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6328;
  qword_1001F6328 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6328, "addAnchoredValue:forWindowSizeWidth:", 2, 7.5);
  objc_msgSend((id)qword_1001F6328, "addAnchoredValue:forWindowSizeWidth:", 16, 1.0);
  objc_msgSend((id)qword_1001F6328, "addAnchoredValue:forWindowSizeWidth:", 32, 17.67);
}

void sub_1000BB934(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6338;
  qword_1001F6338 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6338, "addAnchoredValue:forWindowSizeWidth:", 2, 41.0);
  objc_msgSend((id)qword_1001F6338, "addAnchoredValue:forWindowSizeWidth:", 16, 59.0);
  objc_msgSend((id)qword_1001F6338, "addAnchoredValue:forWindowSizeWidth:", 32, 59.0);
  objc_msgSend((id)qword_1001F6338, "addAnchoredValue:forWindowSizeWidth:", 0x20000, 59.0);
}

void sub_1000BBA30(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6348;
  qword_1001F6348 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6348, "addAnchoredValue:forWindowSizeWidth:", 2, 7.5);
  objc_msgSend((id)qword_1001F6348, "addAnchoredValue:forWindowSizeWidth:", 16, -6.5);
  objc_msgSend((id)qword_1001F6348, "addAnchoredValue:forWindowSizeWidth:", 32, 0.0);
  objc_msgSend((id)qword_1001F6348, "addAnchoredValue:forWindowSizeWidth:", 0x20000, 0.0);
}

void sub_1000BBB18(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6358;
  qword_1001F6358 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6358, "addAnchoredValue:forWindowSizeWidth:", 2, 1.0);
  objc_msgSend((id)qword_1001F6358, "addAnchoredValue:forWindowSizeWidth:", 16, 1.5);
  objc_msgSend((id)qword_1001F6358, "addAnchoredValue:forWindowSizeWidth:", 32, 1.33);
}

id sub_1000BC4F0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setText:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setAlpha:", 1.0);
}

uint64_t sub_1000BC53C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000BCB0C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BCB68;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1000BCB68(uint64_t a1)
{
  objc_super v2;

  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)MonthViewLandscapeScrollTest;
  return objc_msgSendSuper2(&v2, "runTest");
}

void sub_1000BCC88(uint64_t a1)
{
  objc_class *v1;
  NSString *v2;
  uint64_t v3;
  void *v4;

  v1 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v2 = NSStringFromClass(v1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)qword_1001F6370;
  qword_1001F6370 = v3;

}

void sub_1000BDD80(id a1, UITraitEnvironment *a2, UITraitCollection *a3)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter", a3));
  objc_msgSend(v3, "postNotificationName:object:", CUIKSizeClassChangedNotification, 0);

}

id sub_1000BEEE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "scrollView:completionBlock:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000BF490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000BF4BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runRecapTestIfNeeded:", *(_QWORD *)(a1 + 40));
}

id sub_1000BF620(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_callCompletionIfExists");
}

void sub_1000BF628(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BF69C;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1000BF69C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "finishedTest:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  return objc_msgSend(*(id *)(a1 + 32), "_callCompletionIfExists");
}

id sub_1000BFAC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_realTest");
}

void sub_1000BFC64(id a1)
{
  _objc_msgSend(UIApp, "rotateIfNeeded:", 1);
}

void sub_1000BFE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BFE9C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateBadge");

}

void sub_1000C0054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1000C008C(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && v2)
    objc_msgSend(WeakRetained, "dayNavigationCellTouchUpOccurred:", v2);

}

id sub_1000C08E8(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setText:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setAlpha:", 1.0);
}

uint64_t sub_1000C0934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C0FD4(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setHidden:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;

}

void sub_1000C46B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "scrollView:completionBlock:", v2, 0);

}

void sub_1000C4C28(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("LargeWeekViewController_RotationAnimationStartedNotification"), *(_QWORD *)(a1 + 32));

}

void sub_1000C4C74(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPushFallbackSizingContextWithViewHierarchy(v2);

  objc_msgSend(*(id *)(a1 + 32), "_resizeInterfaceForWindowSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPopFallbackSizingContextWithViewHierarchy(v3);

}

void sub_1000C4CD4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setRotating:", 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 384) = 0;
  objc_msgSend(*(id *)(a1 + 32), "updateVisibleRects");
  if (+[ApplicationTester testingSessionStarted](ApplicationTester, "testingSessionStarted"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v2, "postNotificationName:object:", CFSTR("LargeWeekViewController_RotationAnimationCompletedNotification"), *(_QWORD *)(a1 + 32));

  }
}

void sub_1000C50B8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  _BYTE v29[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedOccurrenceViews"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedOccurrenceViews", 0));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v8)
            objc_enumerationMutation(v5);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "occurrence"));
          objc_msgSend(v4, "addObject:", v10);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      }
      while (v7);
    }
    goto LABEL_12;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventGestureController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "draggingView"));

  if (v12)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventGestureController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "event"));
    v28 = v13;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1));

LABEL_12:
    goto LABEL_13;
  }
  v4 = 0;
LABEL_13:
  objc_msgSend(*(id *)(a1 + 32), "_setSelectedEvents:", v4);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedOccurrenceViews"));
  v15 = objc_msgSend(v14, "count");

  if (v15 == (id)1)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedViewController"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "popoverPresentationController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedOccurrenceViews"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
    objc_msgSend(v17, "setSourceView:", v19);

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedViewController"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "popoverPresentationController"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedOccurrenceViews"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "firstObject"));
    objc_msgSend(v23, "bounds");
    objc_msgSend(v21, "setSourceRect:");

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 378) = 0;

}

uint64_t sub_1000C5D0C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000C5D20(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000C5D9C;
  v3[3] = &unk_1001B27E8;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "scrollEventIntoView:animateWithDuration:completion:", v2, v3, 0.3);

}

uint64_t sub_1000C5D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C6894(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1000C68B8(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C6930;
  block[3] = &unk_1001B3F90;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_1000C6930(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  id v6;
  int v7;
  void *v8;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = v2;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationThrottleOperation"));
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#NavigationThrottle Finished navigation throttle operation: %@", (uint8_t *)&v7, 0xCu);

  }
  v6 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v6, "setNavigationThrottleOperation:", 0);

}

void sub_1000C6A20(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id location;
  uint8_t buf[4];
  id v20;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrence"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
    *(_DWORD *)buf = 138412290;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ShowEvent Finished showing event: %@", buf, 0xCu);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[TimerOperation operationWithTimeInterval:](TimerOperation, "operationWithTimeInterval:", 0.2));
  objc_initWeak(&location, v7);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000C6C44;
  v13[3] = &unk_1001B4BE8;
  objc_copyWeak(&v17, &location);
  v8 = v7;
  v14 = v8;
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v15 = v9;
  v16 = v10;
  objc_msgSend(v8, "setCompletionBlock:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "showEventDetailsOperationQueue"));
  objc_msgSend(v11, "addOperation:", v8);

  v12 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ShowDetails Added show event details timer operation: %@", buf, 0xCu);
  }

  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);

}

void sub_1000C6C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C6C44(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000C6CEC;
  v4[3] = &unk_1001B4BE8;
  objc_copyWeak(&v8, (id *)(a1 + 56));
  v5 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = v2;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  objc_destroyWeak(&v8);
}

void sub_1000C6CEC(id *a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  id v14;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = v2;
    WeakRetained = objc_loadWeakRetained(a1 + 7);
    *(_DWORD *)buf = 138412290;
    v14 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#ShowDetails Finished show event details timer operation: %@", buf, 0xCu);

  }
  if ((objc_msgSend(a1[4], "isCancelled") & 1) == 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "occurrence"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "model"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "selectedOccurrence"));
    v8 = objc_msgSend(v5, "isEqual:", v7);

    if (v8)
    {
      v9 = a1[6];
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "occurrence"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000C6E84;
      v11[3] = &unk_1001B2538;
      v12 = a1[5];
      objc_msgSend(v9, "showEvent:animated:showMode:context:completion:", v10, 1, 1, 0, v11);

    }
  }
}

void sub_1000C6E84(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "occurrence"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ShowDetails Showed details for event: %@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_1000C7618(uint64_t a1)
{
  void *v2;
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectedOccurrence"));

  v4 = *(_BYTE **)(a1 + 32);
  if (v3)
  {
    if (!v4[380])
    {
      if (v4[381])
        v5 = 2;
      else
        v5 = 1;
      objc_msgSend(v4, "showEvent:animated:showMode:context:", v3, 1, v5, 0);
      v4 = *(_BYTE **)(a1 + 32);
    }
    objc_msgSend(v4, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:", 0);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 381) = 0;
    v6 = *(_BYTE **)(a1 + 32);
    if (v6[380])
    {
      objc_initWeak(&location, v6);
      v7 = *(void **)(a1 + 32);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000C7774;
      v8[3] = &unk_1001B3D00;
      objc_copyWeak(&v9, &location);
      objc_msgSend(v7, "scrollEventIntoView:animated:completion:", v3, 0, v8);
      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
  }
  else
  {
    objc_msgSend(v4, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:", 0);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 381) = 0;
  }

}

void sub_1000C7758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C7774(uint64_t a1)
{
  void *v1;
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  WeakRetained[380] = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "managedNavigationController"));
  objc_msgSend(v1, "sourceViewController:notifiesReadinessForPresentation:", WeakRetained, 1);

}

void sub_1000C7C04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPushFallbackSizingContextWithViewHierarchy(v2);
  objc_msgSend(*(id *)(a1 + 32), "invalidateManagedNavigationController");
  objc_msgSend(*(id *)(a1 + 32), "_presentDetailViewControllerAsPageSheet:", *(_QWORD *)(a1 + 40));
  EKUIPopFallbackSizingContextWithViewHierarchy(v2);

}

id sub_1000C7E68(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
}

void sub_1000C7FA8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_1000C80B8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_1000C81B8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  objc_msgSend(v1, "showEvent:animated:showMode:context:", v2, 1, 1, v3);

}

void sub_1000C8388(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "invalidateManagedNavigationController");
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "augmentEventDetailsContext:", 0));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "event"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[EKEventViewController eventDetailViewControllerWithEvent:delegate:context:](EKEventViewController, "eventDetailViewControllerWithEvent:delegate:context:", v2, *(_QWORD *)(a1 + 32), v4));

  objc_msgSend(*(id *)(a1 + 32), "_presentDetailViewControllerAsPageSheet:", v3);
}

id sub_1000C8788(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfSupportedInterfaceOrientations");
}

uint64_t sub_1000C87B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "windowScene"));
  v5 = objc_msgSend(v4, "activationState");

  if (v5 != (id)2)
    objc_msgSend(*(id *)(a1 + 32), "invalidateManagedNavigationController");
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 382) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 383) = 0;
  return result;
}

void sub_1000C885C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1000C8890(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  char v7;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000C8924;
  v3[3] = &unk_1001B4C10;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  v7 = *(_BYTE *)(a1 + 56);
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 0, v3);

}

uint64_t sub_1000C8924(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_presentationControllerDidDismissPopover:cleanSelectionState:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000C8AF8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "window"));
  EKUIPopFallbackSizingContextWithViewHierarchy(v3);

}

void sub_1000C8B54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  _QWORD v39[4];
  id v40;
  uint64_t v41;
  id v42;
  char v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  const char *v47;
  CGRect v48;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 378) && *(_QWORD *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "layer"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mask"));
    v4 = *(void **)(a1 + 48);
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "layer"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mask"));
      objc_msgSend(v6, "frame");
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;

    }
    else
    {
      objc_msgSend(v4, "bounds");
      v8 = v15;
      v10 = v16;
      v12 = v17;
      v14 = v18;
    }

    if (!*(_QWORD *)(a1 + 48)
      || (v48.origin.x = v8, v48.origin.y = v10, v48.size.width = v12, v48.size.height = v14, CGRectIsEmpty(v48)))
    {
      v19 = (void *)kCalUILogHandle;
      if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = v19;
        objc_opt_class(v20);
        *(_DWORD *)buf = 138412546;
        v45 = v22;
        v46 = 2080;
        v47 = "-[LargeWeekViewController _presentEventViewController:forOccurrenceView:animated:showComments:completion:]_block_invoke_2";
        v23 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@ [%s] Invalid occurrence view source for popover.", buf, 0x16u);

      }
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerToShowFrom"));
    v25 = *(_QWORD *)(a1 + 40);
    objc_opt_class(EKEventViewController);
    LOBYTE(v25) = objc_opt_isKindOfClass(v25, v26);
    v27 = *(_QWORD *)(a1 + 40);
    objc_opt_class(AddEventViewController);
    LOBYTE(v27) = objc_opt_isKindOfClass(v27, v28);
    v29 = *(_QWORD *)(a1 + 40);
    objc_opt_class(EKExpandedReminderStackViewController);
    objc_msgSend(v24, "setNavigationBarHidden:animated:", ((v25 | v27) | objc_opt_isKindOfClass(v29, v30)) & 1, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "window"));
    EKUIPushFallbackSizingContextWithViewHierarchy(v32);

    v34 = *(_QWORD *)(a1 + 32);
    v33 = *(void **)(a1 + 40);
    v35 = *(unsigned __int8 *)(a1 + 65);
    if (*(_BYTE *)(a1 + 64))
      v36 = v35 == 0;
    else
      v36 = 0;
    v37 = v36;
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_1000C8E3C;
    v39[3] = &unk_1001B4C60;
    v43 = v35;
    v40 = v33;
    v38 = *(id *)(a1 + 56);
    v41 = *(_QWORD *)(a1 + 32);
    v42 = v38;
    objc_msgSend(v24, "showViewController:sender:animated:completion:", v40, v34, v37, v39);

  }
}

void sub_1000C8E3C(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  uint64_t v5;
  id v6;
  char v7;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000C8ED0;
  v3[3] = &unk_1001B4C60;
  v7 = *(_BYTE *)(a1 + 56);
  v4 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

id sub_1000C8ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    objc_opt_class(EKEventViewController);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
      objc_msgSend(*(id *)(a1 + 32), "openAttendeesDetailItem");
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  return objc_msgSend(*(id *)(a1 + 40), "setNeedsUpdateOfSupportedInterfaceOrientations");
}

uint64_t sub_1000C9398(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000C9708(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000C971C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSNumber *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  if ((objc_msgSend(*(id *)(a1 + 32), "isNew") & 1) != 0 || *(_BYTE *)(a1 + 80))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 382) = EKUICurrentWindowInterfaceParadigm_SupportsPopoversForEventEditing((uint64_t)v2, v3) ^ 1;

    v4 = objc_claimAutoreleasedReturnValue(+[AddEventViewController editOrAddViewControllerForEventOrIntegrationWithEvent:model:creationMethod:eventEditViewDelegate:](AddEventViewController, "editOrAddViewControllerForEventOrIntegrationWithEvent:model:creationMethod:eventEditViewDelegate:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_QWORD *)(a1 + 72)));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "augmentEventDetailsContext:", *(_QWORD *)(a1 + 48)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v5));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, EKUIEventDetailsContext_AllowsCalendarPreview);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, EKUIEventDetailsContext_CalendarPreviewIsInlineDayView);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
    v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", EKUICurrentWindowInterfaceParadigm(v7, v8) == 8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, EKUIEventDetailsContext_MinimalMode);

    objc_msgSend(v6, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, EKUIEventDetailsContext_ShowsDoneButton);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "view"));
    v15 = +[EKEventViewController eventDetailViewControllerWithEvent:delegate:context:allowInlinePreview:previewInline:minimalMode:](EKEventViewController, "eventDetailViewControllerWithEvent:delegate:context:allowInlinePreview:previewInline:minimalMode:", v11, v12, v6, 0, 0, EKUICurrentWindowInterfaceParadigm(v13, v14) == 8);
    v16 = (id)objc_claimAutoreleasedReturnValue(v15);

    v4 = (uint64_t)v16;
  }
  v17 = (id)v4;
  objc_msgSend(*(id *)(a1 + 40), "_presentEventViewController:forOccurrenceView:animated:showComments:completion:", v4, *(_QWORD *)(a1 + 56), 1, *(unsigned __int8 *)(a1 + 81), *(_QWORD *)(a1 + 64));

}

void sub_1000CA484(uint64_t a1)
{
  id v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 380) = 0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedNavigationController"));
  objc_msgSend(v2, "sourceViewController:notifiesReadinessForPresentation:", *(_QWORD *)(a1 + 32), 1);

}

uint64_t sub_1000CB630(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000CB640(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventGestureController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "draggingView"));
  objc_msgSend(v3, "setDrawsResizeHandles:", 0);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventGestureController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "draggingView"));
  objc_msgSend(v4, "setAlpha:", 0.0);

}

id sub_1000CB6C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "editorDidCancelEditingEvent:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CB6D0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "editorDidCancelEditingEvent:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_1000CB704(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

id sub_1000CB70C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "attemptDisplayReviewPrompt");
}

void sub_1000CBCD8(uint64_t a1, void *a2)
{
  double v3;
  id v4;
  CGRect v5;

  v3 = *(double *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "frame");
  objc_msgSend(v4, "showOverlayMonthInCellAtOffset:animated:", *(unsigned __int8 *)(a1 + 40), v3 - CGRectGetMinX(v5));

}

id sub_1000CBEC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_presentationControllerDidDismissPopover:cleanSelectionState:", 0, 1);
}

void sub_1000CC18C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6380;
  qword_1001F6380 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6380, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6380, "addAnchoredValue:forWindowSizeWidth:", 2048, 72.0);
  objc_msgSend((id)qword_1001F6380, "addAnchoredValue:forWindowSizeWidth:", 4096, 78.0);
}

void sub_1000CC278(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor preferredFontDescriptorWithTextStyle:](UIFontDescriptor, "preferredFontDescriptorWithTextStyle:", UIFontTextStyleHeadline));
  objc_msgSend(*(id *)(a1 + 32), "_yearNumberFontSize");
  v2 = objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v4));
  v3 = (void *)qword_1001F6390;
  qword_1001F6390 = v2;

}

void sub_1000CC364(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63A0;
  qword_1001F63A0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63A0, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F63A0, "addAnchoredValue:forWindowSizeWidth:", 2048, 50.0);
  objc_msgSend((id)qword_1001F63A0, "addAnchoredValue:forWindowSizeWidth:", 4096, 50.0);
}

void sub_1000CC6FC(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63B0;
  qword_1001F63B0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63B0, "addAnchoredValue:forWindowSizeWidth:", 2, 92.5);
  objc_msgSend((id)qword_1001F63B0, "addAnchoredValue:forWindowSizeWidth:", 16, 105.0);
  objc_msgSend((id)qword_1001F63B0, "addAnchoredValue:forWindowSizeWidth:", 32, 119.0);
  objc_msgSend((id)qword_1001F63B0, "addAnchoredValue:forWindowSizeWidth:", 128, 147.0);
}

void sub_1000CC874(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63C0;
  qword_1001F63C0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63C0, "addAnchoredValue:forWindowSizeWidth:", 2, 108.0);
  objc_msgSend((id)qword_1001F63C0, "addAnchoredValue:forWindowSizeWidth:", 16, 126.5);
  objc_msgSend((id)qword_1001F63C0, "addAnchoredValue:forWindowSizeWidth:", 32, 138.0);
  objc_msgSend((id)qword_1001F63C0, "addAnchoredValue:forWindowSizeWidth:", 128, 141.0);
}

void sub_1000CCA68(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63D0;
  qword_1001F63D0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63D0, "addAnchoredValue:forWindowSizeWidth:", 2, -1.0);
  objc_msgSend((id)qword_1001F63D0, "addAnchoredValue:forWindowSizeWidth:", 16, 0.0);
  objc_msgSend((id)qword_1001F63D0, "addAnchoredValue:forWindowSizeWidth:", 32, 0.0);
}

void sub_1000CCB20(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63E0;
  qword_1001F63E0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63E0, "addAnchoredValue:forWindowSizeWidth:", 2, 2.0);
  objc_msgSend((id)qword_1001F63E0, "addAnchoredValue:forWindowSizeWidth:", 16, 4.0);
  objc_msgSend((id)qword_1001F63E0, "addAnchoredValue:forWindowSizeWidth:", 32, 6.0);
}

void sub_1000CCBD8(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F63F0;
  qword_1001F63F0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F63F0, "addAnchoredValue:forWindowSizeWidth:", 2, 5.5);
  objc_msgSend((id)qword_1001F63F0, "addAnchoredValue:forWindowSizeWidth:", 16, 5.0);
  objc_msgSend((id)qword_1001F63F0, "addAnchoredValue:forWindowSizeWidth:", 32, 5.0);
  objc_msgSend((id)qword_1001F63F0, "addAnchoredValue:forWindowSizeWidth:", 128, 5.0);
}

void sub_1000CCEAC(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6418;
  qword_1001F6418 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 2, 8.0);
  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 16, 9.0);
  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 32, 10.6666667);
  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 0x400000, 10.0);
  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 0x1000000, 11.0);
  objc_msgSend((id)qword_1001F6418, "addAnchoredValue:forWindowSizeWidth:", 128, 11.0);
}

void sub_1000CCF98(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6428;
  qword_1001F6428 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6428, "addAnchoredValue:forWindowSizeWidth:", 2, 8.0);
  objc_msgSend((id)qword_1001F6428, "addAnchoredValue:forWindowSizeWidth:", 16, 9.0);
  objc_msgSend((id)qword_1001F6428, "addAnchoredValue:forWindowSizeWidth:", 32, 10.6666667);
  objc_msgSend((id)qword_1001F6428, "addAnchoredValue:forWindowSizeWidth:", 128, 12.0);
}

void sub_1000CD064(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6438;
  qword_1001F6438 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6438, "addAnchoredValue:forWindowSizeWidth:", 2, 13.0);
  objc_msgSend((id)qword_1001F6438, "addAnchoredValue:forWindowSizeWidth:", 16, 14.0);
  objc_msgSend((id)qword_1001F6438, "addAnchoredValue:forWindowSizeWidth:", 32, 16.0);
}

void sub_1000CD150(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6448;
  qword_1001F6448 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6448, "addAnchoredValue:forWindowSizeWidth:", 2, 24.0);
  objc_msgSend((id)qword_1001F6448, "addAnchoredValue:forWindowSizeWidth:", 16, 25.0);
  objc_msgSend((id)qword_1001F6448, "addAnchoredValue:forWindowSizeWidth:", 32, 26.5);
  objc_msgSend((id)qword_1001F6448, "addAnchoredValue:forWindowSizeWidth:", 128, 27.0);
}

void sub_1000CD21C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6458;
  qword_1001F6458 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6458, "addAnchoredValue:forWindowSizeWidth:", 2, 13.0);
  objc_msgSend((id)qword_1001F6458, "addAnchoredValue:forWindowSizeWidth:", 16, 15.0);
  objc_msgSend((id)qword_1001F6458, "addAnchoredValue:forWindowSizeWidth:", 32, 17.0);
  objc_msgSend((id)qword_1001F6458, "addAnchoredValue:forWindowSizeWidth:", 128, 20.0);
}

void sub_1000CD2E4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6468;
  qword_1001F6468 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6468, "addAnchoredValue:forWindowSizeWidth:", 2, 14.0);
  objc_msgSend((id)qword_1001F6468, "addAnchoredValue:forWindowSizeWidth:", 16, 17.0);
  objc_msgSend((id)qword_1001F6468, "addAnchoredValue:forWindowSizeWidth:", 32, 18.0);
  objc_msgSend((id)qword_1001F6468, "addAnchoredValue:forWindowSizeWidth:", 128, 18.5);
}

void sub_1000CD3B0(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6478;
  qword_1001F6478 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6478, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6478, "addAnchoredValue:forWindowSizeWidth:", 2, 0.0);
  objc_msgSend((id)qword_1001F6478, "addAnchoredValue:forWindowSizeWidth:", 16, 0.0);
  objc_msgSend((id)qword_1001F6478, "addAnchoredValue:forWindowSizeWidth:", 32, -0.25);
  objc_msgSend((id)qword_1001F6478, "addAnchoredValue:forWindowSizeWidth:", 128, -0.25);
}

void sub_1000CD484(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6488;
  qword_1001F6488 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6488, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6488, "addAnchoredValue:forWindowSizeWidth:", 2, 0.0);
  objc_msgSend((id)qword_1001F6488, "addAnchoredValue:forWindowSizeWidth:", 16, 0.0);
  objc_msgSend((id)qword_1001F6488, "addAnchoredValue:forWindowSizeWidth:", 32, -0.25);
  objc_msgSend((id)qword_1001F6488, "addAnchoredValue:forWindowSizeWidth:", 128, -0.25);
}

void sub_1000CD578(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6498;
  qword_1001F6498 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6498, "addAnchoredValue:forWindowSizeWidth:", 2, -1.0);
  objc_msgSend((id)qword_1001F6498, "addAnchoredValue:forWindowSizeWidth:", 16, -1.0);
  objc_msgSend((id)qword_1001F6498, "addAnchoredValue:forWindowSizeWidth:", 32, -1.33333333);
  objc_msgSend((id)qword_1001F6498, "addAnchoredValue:forWindowSizeWidth:", 128, -2.0);
}

void sub_1000CD8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CD8CC(uint64_t a1)
{
  char *WeakRetained;
  char *v2;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !*(_QWORD *)(WeakRetained + 138))
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_configureSidebarConfigurationOfManagedNavigationController");
    WeakRetained = v2;
  }

}

void sub_1000CEB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_1000CEBE0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "setModelSelectedEvent:", 0);
    objc_msgSend(v5, "_selectEvent:animated:context:", 0, 1, 1);
    v3 = objc_loadWeakRetained((id *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "presentingViewController"));
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, 0);

    WeakRetained = v5;
  }

}

void sub_1000CF538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CF568(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrence"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "occurrence"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "isEqual:", v7);

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;
}

void sub_1000CF6B4(id a1)
{
  double v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[3];
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)&v1 = objc_opt_class(LargeDayNavigationWrapperView).n128_u64[0];
  v33 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1, v1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UINavigationBar appearanceWhenContainedInInstancesOfClasses:](UINavigationBar, "appearanceWhenContainedInInstancesOfClasses:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  objc_msgSend(v4, "setBarTintColor:", v5);

  *(_QWORD *)&v6 = objc_opt_class(LargeDayNavigationWrapperView).n128_u64[0];
  v32 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v32, 1, v6));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIToolbar appearanceWhenContainedInInstancesOfClasses:](UIToolbar, "appearanceWhenContainedInInstancesOfClasses:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  objc_msgSend(v9, "setBarTintColor:", v10);

  objc_opt_class(LargeDayNavigationWrapperView);
  v31[0] = v11;
  *(_QWORD *)&v12 = objc_opt_class(UINavigationController).n128_u64[0];
  v31[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v31, 2, v12));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UITableView appearanceWhenContainedInInstancesOfClasses:](UITableView, "appearanceWhenContainedInInstancesOfClasses:", v14));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGroupedBackgroundColor](UIColor, "systemGroupedBackgroundColor"));
  objc_msgSend(v15, "setEditorBackgroundColor:", v16);

  *(_QWORD *)&v17 = objc_opt_class(UINavigationController).n128_u64[0];
  v30 = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1, v17));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UITableView appearanceWhenContainedInInstancesOfClasses:](UITableView, "appearanceWhenContainedInInstancesOfClasses:", v19));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGroupedBackgroundColor](UIColor, "systemGroupedBackgroundColor"));
  objc_msgSend(v20, "setEditorBackgroundColor:", v21);

  objc_opt_class(UITableViewCell);
  v29[0] = v22;
  objc_opt_class(EKEventEditViewController);
  v29[1] = v23;
  *(_QWORD *)&v24 = objc_opt_class(LargeDayNavigationWrapperView).n128_u64[0];
  v29[2] = v25;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v29, 3, v24));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[UILabel appearanceWhenContainedInInstancesOfClasses:](UILabel, "appearanceWhenContainedInInstancesOfClasses:", v26));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v27, "setEditorBackgroundColor:", v28);

}

void sub_1000D1328(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000D134C(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[124] = 0;
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "updateNoContentConfiguration");
    WeakRetained = v2;
  }

}

id sub_1000D174C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "clearNoContentConfiguration");
}

uint64_t sub_1000D1754(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000D1768(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateNoContentConfiguration");
}

uint64_t sub_1000D1770(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000D1E48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_selectEvent:animated:context:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48));
}

id sub_1000D1E5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetSplitView");
}

id sub_1000D1E64(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateNoContentConfiguration");
}

id sub_1000D2600(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_selectEvents:animated:context:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48));
}

id sub_1000D2614(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetSplitView");
}

id sub_1000D261C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateNoContentConfiguration");
}

void sub_1000D2804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D281C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000D282C(uint64_t a1)
{

}

void sub_1000D2834(_QWORD *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_opt_class(EKDayOccurrenceView);
  if ((objc_opt_isKindOfClass(v8, v4) & 1) != 0 && objc_msgSend(v8, "isSelectedCopyView"))
  {
    if (os_variant_has_internal_ui("com.apple.calendar"))
    {
      v5 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
      if (v5)
      {
        v6 = objc_msgSend(v5, "tag");
        if (v6 != objc_msgSend(v8, "tag"))
        {
          v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
          objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a1[6], a1[4], CFSTR("LargeDayViewController.m"), 1424, CFSTR("There shouldn't be more than one selectedOccurrenceFrontmostClonedView."));

        }
      }
    }
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
  }

}

uint64_t sub_1000D432C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1000D4844(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 120) = 0;
  return result;
}

void sub_1000D49F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1000D4A20(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "shownEventViewController"));
  objc_msgSend(v4, "setEditorShowTransition:", 0);

  v5 = objc_loadWeakRetained(v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shownEventViewController"));
  objc_msgSend(v6, "editButtonTapped");

  v7 = objc_loadWeakRetained(v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "shownEventViewController"));
  objc_msgSend(v8, "setEditorShowTransition:", 6);

  v9 = (id *)(a1 + 40);
  v10 = objc_loadWeakRetained(v9);
  LODWORD(v8) = objc_msgSend(v10, "isHidden");

  if ((_DWORD)v8)
  {
    v11 = objc_loadWeakRetained(v2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "managedNavigationController"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000D4B6C;
    v13[3] = &unk_1001B3F90;
    objc_copyWeak(&v14, v9);
    objc_msgSend(v12, "enqueueBlock:", v13);

    objc_destroyWeak(&v14);
  }
}

void sub_1000D4B58(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D4B6C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHidden:", 0);

}

void sub_1000D6D10(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  double Width;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double MinX;
  double v35;
  id v36;
  uint64_t v37;
  double v38;
  double v39;
  double MaxX;
  double v41;
  double v42;
  double MinY;
  void *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  void *v50;
  void *v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  void *v81;
  id v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  objc_msgSend(*(id *)(a1 + 32), "firstDayCellInset");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "dayCellSize");
  v5 = v4;
  v7 = v6;
  v8 = EKUIWidthSizeClassForViewHierarchy(*(_QWORD *)(a1 + 32));
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count"))
    goto LABEL_9;
  v9 = 0;
  Width = -1.0;
  do
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectAtIndex:", v9));
    objc_msgSend(v11, "setFrame:", v3, 0.0, v5, v7);
    objc_msgSend(v11, "setAlpha:", 1.0);
    if (((unint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex") & 0x8000000000000000) == 0
      && (uint64_t)v9 <= (uint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex"))
    {
      Width = v5 + v3;
    }
    objc_msgSend(*(id *)(a1 + 32), "dayCellSize");
    v13 = v12;
    +[CompactDayNavigationViewCell standardCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "standardCircleDiameterForSizeClass:", v8);
    v15 = v14;
    +[CompactDayNavigationViewCell overlayCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "overlayCircleDiameterForSizeClass:", v8);
    v17 = v16;
    +[CompactDayNavigationViewCell largeOverlayCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "largeOverlayCircleDiameterForSizeClass:", v8);
    objc_msgSend(v11, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v15, v17, v18);
    objc_msgSend(v11, "setMonthAnimationState:", 0);
    objc_msgSend(v11, "setApplyMonthAnimationStateAdjustments:", 0);
    objc_msgSend(v11, "layoutIfNeeded");

    v19 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
    if (v9 > 5)
      break;
    v3 = v3 + v13;
    ++v9;
  }
  while (v9 < (unint64_t)v19);
  if (Width < 0.0)
  {
LABEL_9:
    objc_msgSend(*(id *)(a1 + 32), "monthFrame");
    Width = CGRectGetWidth(v83);
  }
  v20 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  v21 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex");
  v22 = *(_QWORD *)(a1 + 32);
  if ((v21 & 0x8000000000000000) == 0 && *(_QWORD *)(v22 + 56) > *(_QWORD *)(v22 + 112))
  {
    objc_msgSend((id)v22, "monthFrame");
    v20 = Width;
    Width = CGRectGetWidth(v84) - Width;
    v22 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v22 + 16), "setFrame:", v20, 0.0, Width, 1.0);
  v23 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v23 + 25))
  {
    objc_msgSend(*(id *)(v23 + 32), "sizeToFit");
    v24 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "frame");
    v26 = v25;
    v28 = v27;
    v30 = v29;
    v32 = v31;
    if (CalTimeDirectionIsLeftToRight(v24, v33))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
      MinX = CGRectGetMinX(v85);
      v86.origin.x = v26;
      v86.origin.y = v28;
      v86.size.width = v30;
      v86.size.height = v32;
      v35 = MinX - CGRectGetWidth(v86);
      v36 = +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      v39 = v35 - v38;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
      MaxX = CGRectGetMaxX(v87);
      v36 = +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      v39 = MaxX + v41;
    }
    v42 = CalRoundToScreenScale(v36, v37, v39);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
    MinY = CGRectGetMinY(v88);
    v89.origin.x = v42;
    v89.origin.y = v28;
    v89.size.width = v30;
    v89.size.height = v32;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setFrame:", v42, MinY + CGRectGetHeight(v89) * -0.5, v30, v32);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 0.0);
    v23 = *(_QWORD *)(a1 + 32);
  }
  if (*(_QWORD *)(v23 + 64) == *(_QWORD *)(v23 + 56))
  {
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v23, "_todayCell"));
    +[CompactDayNavigationViewCell standardCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "standardCircleDiameterForSizeClass:", v8);
    v46 = v45;
    +[CompactDayNavigationViewCell overlayCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "overlayCircleDiameterForSizeClass:", v8);
    v48 = v47;
    +[CompactDayNavigationViewCell largeOverlayCircleDiameterForSizeClass:](CompactDayNavigationViewCell, "largeOverlayCircleDiameterForSizeClass:", v8);
    objc_msgSend(v44, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v46, v48, v49);

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_todayCell"));
    objc_msgSend(v50, "layoutIfNeeded");

    v23 = *(_QWORD *)(a1 + 32);
  }
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v23, "monthOccurrencesSnapshot"));

  if (v51)
  {
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesSnapshot"));
    objc_msgSend(v52, "setAlpha:", 0.0);

    objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesFrame");
    v54 = v53;
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesSnapshot"));
    objc_msgSend(v61, "setFrame:", v54, v56, v58, v60);

  }
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
  v63 = objc_msgSend(v62, "count");
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummaryFrames"));
  v65 = objc_msgSend(v64, "count");

  if (v63 == v65)
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
    v67 = (uint64_t)objc_msgSend(v66, "count");

    if (v67 >= 1)
    {
      v68 = 0;
      do
      {
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectAtIndexedSubscript:", v68));

        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummaryFrames"));
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectAtIndexedSubscript:", v68));
        objc_msgSend(v72, "CGRectValue");
        v74 = v73;
        v76 = v75;
        v78 = v77;
        v80 = v79;

        objc_msgSend(v70, "setAlpha:", 0.0);
        objc_msgSend(v70, "setFrame:", v74, v76, v78, v80);

        ++v68;
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
        v82 = objc_msgSend(v81, "count");

      }
      while (v68 < (uint64_t)v82);
    }
  }
}

void sub_1000D724C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_todayCell"));
  objc_msgSend(v2, "setCircled:animated:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), *(unsigned __int8 *)(a1 + 40));

}

void sub_1000D72B0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));
  objc_msgSend(v2, "setCircled:animated:", 1, *(unsigned __int8 *)(a1 + 40));

}

id sub_1000D72F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setBounds:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_1000D7838(uint64_t a1)
{
  id v2;
  double v3;
  char *v4;
  uint64_t v5;
  double v6;
  void *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  _QWORD *v23;
  _BOOL8 v24;
  double v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  _QWORD *v33;
  double Width;
  uint64_t v35;
  uint64_t v36;
  double v37;
  void *v38;
  void *v39;
  double MaxX;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  id v55;
  double v56;
  double v57;
  uint64_t v58;
  id v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double MinX;
  double v70;
  id v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double MinY;
  CGFloat Height;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unsigned __int8 *v84;
  int v85;
  void *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  void *v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  void *v103;
  void *v104;
  void *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  void *v134;
  id v135;
  id v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;

  objc_msgSend(*(id *)(a1 + 32), "dayCellSize");
  if (((unint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex") & 0x8000000000000000) != 0)
  {
    v3 = 1.0;
  }
  else
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex");
    if ((uint64_t)v2 >= (uint64_t)objc_msgSend(*(id *)(a1 + 32), "selectedIndex"))
      v3 = 1.0;
    else
      v3 = 0.0;
  }
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count"))
    goto LABEL_33;
  v136 = 0;
  v4 = 0;
  v5 = 6;
  v6 = 0.0;
  do
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectAtIndex:", v4));
    v8 = objc_msgSend(*(id *)(a1 + 32), "firstMonthCellIndex");
    v9 = v4 - v8;
    if (!CalTimeDirectionIsLeftToRight(v8, v10))
      v9 = v5;
    if (v9 < 0
      || (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthCellFrames")),
          v12 = objc_msgSend(v11, "count"),
          v11,
          v9 >= (uint64_t)v12))
    {
      objc_msgSend(*(id *)(a1 + 32), "dayCellSize");
      v17 = v20;
      v19 = v21;
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthCellFrames"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndex:", v9));

      objc_msgSend(v14, "CGRectValue");
      v6 = v15;
      v17 = v16;
      objc_msgSend(*(id *)(a1 + 32), "dayCellSize");
      v19 = v18;

    }
    if (((unint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex") & 0x8000000000000000) == 0
      && (uint64_t)v4 <= (uint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex"))
    {
      v22 = v7;

      v136 = v22;
    }
    v23 = *(_QWORD **)(a1 + 32);
    v24 = v4 == (char *)v23[8] || v4 == (char *)v23[7];
    objc_msgSend(v23, "_yOffsetForMonthCells:", v24);
    objc_msgSend(v7, "setFrame:", v6, v25, v17, v19);
    objc_msgSend(v7, "setAlpha:", v3);
    if (v4 == objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex"))
    {
      v26 = objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex");
      if ((uint64_t)v26 >= (uint64_t)objc_msgSend(*(id *)(a1 + 32), "selectedIndex"))
        v3 = 0.0;
      else
        v3 = 1.0;
    }
    if (v4 == *(char **)(*(_QWORD *)(a1 + 32) + 64))
      objc_msgSend(v7, "setApplyMonthAnimationStateAdjustments:", 1);
    else
      objc_msgSend(v7, "setMonthAnimationState:", 1);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40))
      +[CompactMonthWeekView circleDiameterCompressed](CompactMonthWeekView, "circleDiameterCompressed");
    else
      +[CompactMonthWeekView circleDiameter](CompactMonthWeekView, "circleDiameter");
    v28 = v27;
    +[CompactMonthWeekView circleDiameterWithOverlay](CompactMonthWeekView, "circleDiameterWithOverlay");
    v30 = v29;
    +[CompactMonthWeekView circleDiameterWithOverlayLarge](CompactMonthWeekView, "circleDiameterWithOverlayLarge");
    objc_msgSend(v7, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v28, v30, v31);
    objc_msgSend(v7, "layoutIfNeeded");

    v32 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
    if ((unint64_t)v4 > 5)
      break;
    v6 = v6 + v17;
    ++v4;
    --v5;
  }
  while (v4 < v32);
  if (!v136)
LABEL_33:
    v136 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectAtIndexedSubscript:", 6));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 1.0);
  if (((unint64_t)objc_msgSend(*(id *)(a1 + 32), "monthBreakIndex") & 0x8000000000000000) == 0)
  {
    v33 = *(_QWORD **)(a1 + 32);
    if (v33[7] > v33[14])
    {
      objc_msgSend(v33, "monthFrame");
      Width = CGRectGetWidth(v137);
      objc_msgSend(v136, "frame");
      v37 = Width - CGRectGetMaxX(v138);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) && (CalTimeDirectionIsLeftToRight(v35, v36) & 1) == 0)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthCellFrames"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "firstObject"));

        if (v39)
        {
          objc_msgSend(*(id *)(a1 + 32), "monthFrame");
          MaxX = CGRectGetMaxX(v139);
          +[CompactMonthWeekView twoDigitWeekNumberWidth](CompactMonthWeekView, "twoDigitWeekNumberWidth");
          v42 = MaxX - v41;
          +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
          v44 = v42 - v43;
          objc_msgSend(v136, "frame");
          v37 = v44 - CGRectGetMaxX(v140);
        }

      }
      objc_msgSend(v136, "frame");
      v45 = CGRectGetMaxX(v141);
      goto LABEL_51;
    }
  }
  objc_msgSend(v136, "frame");
  v37 = CGRectGetMaxX(v142);
  v46 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v46 + 25))
  {
    v45 = 0.0;
    goto LABEL_52;
  }
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v46, "monthCellFrames"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "firstObject"));

  v45 = 0.0;
  if (v48)
  {
    if (CalTimeDirectionIsLeftToRight(v49, v50))
    {
      +[CompactMonthWeekView twoDigitWeekNumberWidth](CompactMonthWeekView, "twoDigitWeekNumberWidth");
      v52 = v51;
      +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      v54 = v52 + v53 * 2.0;
      v45 = v54 + 0.0;
LABEL_49:
      v37 = v37 - v54;
      goto LABEL_50;
    }
    v55 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectAtIndexedSubscript:", 6));

    if (v136 == v55)
    {
      objc_msgSend(*(id *)(a1 + 32), "monthFrame");
      v56 = CGRectGetMaxX(v143);
      +[CompactMonthWeekView twoDigitWeekNumberWidth](CompactMonthWeekView, "twoDigitWeekNumberWidth");
      v37 = v56 - v57;
      +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      goto LABEL_49;
    }
  }
LABEL_50:

LABEL_51:
  v46 = *(_QWORD *)(a1 + 32);
LABEL_52:
  objc_msgSend(*(id *)(v46 + 16), "setFrame:", v45, 0.0, v37, 1.0);
  v58 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v58 + 25))
  {
    objc_msgSend(*(id *)(v58 + 32), "sizeToFit");
    v59 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "frame");
    v61 = v60;
    v63 = v62;
    v65 = v64;
    v67 = v66;
    if (CalTimeDirectionIsLeftToRight(v59, v68))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
      MinX = CGRectGetMinX(v144);
      v145.origin.x = v61;
      v145.origin.y = v63;
      v145.size.width = v65;
      v145.size.height = v67;
      v70 = MinX - CGRectGetWidth(v145);
      v71 = +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      v74 = v70 - v73;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
      v75 = CGRectGetMaxX(v146);
      v71 = +[CompactMonthWeekView weekNumberDistanceFromGrayLine](CompactMonthWeekView, "weekNumberDistanceFromGrayLine");
      v74 = v75 + v76;
    }
    v77 = CalRoundToScreenScale(v71, v72, v74);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "frame");
    MinY = CGRectGetMinY(v147);
    v148.origin.x = v77;
    v148.origin.y = v63;
    v148.size.width = v65;
    v148.size.height = v67;
    Height = CGRectGetHeight(v148);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setFrame:", v77, CalRoundToScreenScale(v80, v81, MinY + Height * -0.5), v65, v67);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 1.0);
    v58 = *(_QWORD *)(a1 + 32);
  }
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v58, "_todayCell"));
  if (v82)
  {

  }
  else
  {
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));

    if (!v83)
      goto LABEL_64;
  }
  v84 = *(unsigned __int8 **)(a1 + 32);
  v85 = v84[40];
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "_todayCell"));
  if (v85)
  {
    +[CompactMonthWeekView circleDiameterCompressed](CompactMonthWeekView, "circleDiameterCompressed");
    v88 = v87;
    +[CompactMonthWeekView circleDiameterWithOverlay](CompactMonthWeekView, "circleDiameterWithOverlay");
    v90 = v89;
    +[CompactMonthWeekView circleDiameterWithOverlayLarge](CompactMonthWeekView, "circleDiameterWithOverlayLarge");
    objc_msgSend(v86, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v88, v90, v91);

    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));
    +[CompactMonthWeekView circleDiameterCompressed](CompactMonthWeekView, "circleDiameterCompressed");
    v94 = v93;
    +[CompactMonthWeekView circleDiameterWithOverlay](CompactMonthWeekView, "circleDiameterWithOverlay");
    v96 = v95;
    +[CompactMonthWeekView circleDiameterWithOverlayLarge](CompactMonthWeekView, "circleDiameterWithOverlayLarge");
    objc_msgSend(v92, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v94, v96, v97);

    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));
    objc_msgSend(v86, "layoutIfNeeded");
  }
  else
  {
    +[CompactMonthWeekView circleDiameter](CompactMonthWeekView, "circleDiameter");
    v99 = v98;
    +[CompactMonthWeekView circleDiameterWithOverlay](CompactMonthWeekView, "circleDiameterWithOverlay");
    v101 = v100;
    +[CompactMonthWeekView circleDiameterWithOverlayLarge](CompactMonthWeekView, "circleDiameterWithOverlayLarge");
    objc_msgSend(v86, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:", v99, v101, v102);
  }

  v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_todayCell"));
  objc_msgSend(v103, "layoutIfNeeded");

LABEL_64:
  v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesSnapshot"));

  if (v104)
  {
    v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesSnapshot"));
    objc_msgSend(v105, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesFrame");
    v107 = v106;
    v109 = v108;
    v111 = v110;
    v113 = v112;
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthOccurrencesSnapshot"));
    objc_msgSend(v114, "setFrame:", v107, v109, v111, v113);

  }
  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
  v116 = objc_msgSend(v115, "count");
  v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummaryFrames"));
  v118 = objc_msgSend(v117, "count");

  if (v116 == v118)
  {
    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
    v120 = (uint64_t)objc_msgSend(v119, "count");

    if (v120 >= 1)
    {
      v121 = 0;
      do
      {
        v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "objectAtIndexedSubscript:", v121));

        v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummaryFrames"));
        v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "objectAtIndexedSubscript:", v121));
        objc_msgSend(v125, "CGRectValue");
        v127 = v126;
        v129 = v128;
        v131 = v130;
        v133 = v132;

        objc_msgSend(v123, "setAlpha:", 1.0);
        objc_msgSend(v123, "setFrame:", v127, v129, v131, v133);

        ++v121;
        v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monthSummarySnapshots"));
        v135 = objc_msgSend(v134, "count");

      }
      while (v121 < (uint64_t)v135);
    }
  }

}

void sub_1000D80F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_todayCell"));
  objc_msgSend(v2, "setCircled:animated:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), *(unsigned __int8 *)(a1 + 40));

}

void sub_1000D8154(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));
  objc_msgSend(v2, "setCircled:animated:", 1, *(unsigned __int8 *)(a1 + 40));

}

void sub_1000D8198(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_todayCell"));
  objc_msgSend(v2, "setCircled:animated:", 1, *(unsigned __int8 *)(a1 + 40));

}

void sub_1000D81DC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectedCell"));
  objc_msgSend(v2, "setCircled:animated:", *(_BYTE *)(a1 + 40) == 0);

}

id sub_1000D8224(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setBounds:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

id sub_1000D8408(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "frame");
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 32), "frame");
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", v2, v3, v5);
}

id paletteTitleFont(void *a1, void *a2)
{
  id v3;
  NSString *v4;
  NSString *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = UIFontTextStyleLargeTitle;
  if (!objc_msgSend(a2, "userInterfaceIdiom") && (char *)objc_msgSend(v3, "interfaceOrientation") - 3 <= (char *)1)
  {
    v5 = UIFontTextStyleTitle2;

    v4 = v5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _preferredFontForTextStyle:maximumContentSizeCategory:](UIFont, "_preferredFontForTextStyle:maximumContentSizeCategory:", v4, UIContentSizeCategoryMedium));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:](UIFontDescriptor, "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:", v4, 2, 0));
  objc_msgSend(v6, "pointSize");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v7));

  return v8;
}

id contactForSource(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "preferredOwnerAddress"));
  v3 = v2;
  if (v2)
  {
    if (objc_msgSend(v2, "hasMailto"))
    {
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringRemovingMailto"));
LABEL_6:
      v5 = (void *)v4;
      goto LABEL_22;
    }
    if (objc_msgSend(v3, "hasTel"))
    {
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringRemovingTel"));
      goto LABEL_6;
    }
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ownerAddresses"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (!v7)
  {
    v5 = 0;
    goto LABEL_21;
  }
  v8 = v7;
  v9 = *(_QWORD *)v19;
  while (2)
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(_QWORD *)v19 != v9)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v11, "hasMailto"))
      {
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringRemovingMailto"));
LABEL_20:
        v5 = (void *)v12;
        goto LABEL_21;
      }
      if (objc_msgSend(v11, "hasTel"))
      {
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringRemovingTel"));
        goto LABEL_20;
      }
    }
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    v5 = 0;
    if (v8)
      continue;
    break;
  }
LABEL_21:

LABEL_22:
  v13 = CUIKDisplayedTitleForSource(v1, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[EKUILabeledAvatarView contactKeysToFetch](EKUILabeledAvatarView, "contactKeysToFetch"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[ContactsUtils contactForAddress:fullName:firstName:lastName:keysToFetch:](ContactsUtils, "contactForAddress:fullName:firstName:lastName:keysToFetch:", v5, v14, 0, 0, v15));

  return v16;
}

unint64_t EKUICurrentWindowInterfaceParadigm_ShouldUseLargeFormatInterface(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)EKUICurrentWindowInterfaceParadigm(a1, a2) >> 4) & 1;
}

unint64_t EKUICurrentWindowInterfaceParadigm_SupportsPopoversForEventEditing(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)EKUICurrentWindowInterfaceParadigm(a1, a2) >> 4) & 1;
}

id sub_1000DA194(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "restorePresentedViewControllers:startIndex:presenter:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
}

void sub_1000DA448(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;
  id v14;
  uint64_t v15;
  uint8_t buf[4];
  void *v17;

  v2 = (id)kCalUILogHandle;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    objc_opt_class(UINavigationController);
    isKindOfClass = objc_opt_isKindOfClass(v3, v4);
    v6 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topViewController"));
    *(_DWORD *)buf = 138412290;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[83058884] CalendarVC restoring presented vc %@", buf, 0xCu);
    if ((isKindOfClass & 1) != 0)

  }
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000DA5B0;
  v12[3] = &unk_1001B33A0;
  v9 = *(void **)(a1 + 56);
  v12[4] = *(_QWORD *)(a1 + 48);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 64);
  v13 = v10;
  v15 = v11;
  v14 = *(id *)(a1 + 32);
  objc_msgSend(v7, "presentViewController:animated:completion:", v8, 0, v12);

}

id sub_1000DA5B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "restorePresentedViewControllers:startIndex:presenter:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

void sub_1000DA8C0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  dispatch_time_t v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rootNavigationController"));
  v4 = objc_msgSend(v3, "resetToYearView");

  v5 = dispatch_time(0, 2000000000);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000DA9B0;
  v7[3] = &unk_1001B2C88;
  v6 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v6;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v7);

}

void sub_1000DA9B0(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;
  id v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000DAA50;
  v3[3] = &unk_1001B2C88;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

void sub_1000DAA50(uint64_t a1)
{
  double v2;
  id v3;
  id v4;
  id v5;

  *(_QWORD *)&v2 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testName", v2));
  objc_msgSend(*(id *)(a1 + 40), "startedTest:", v5);
  v4 = objc_msgSend(*(id *)(a1 + 48), "pushCalendarViewControllerWithViewType:andDate:", objc_msgSend(*(id *)(a1 + 32), "_viewType"), *(_QWORD *)(a1 + 56));

}

void sub_1000DAB58(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "removeObserver:", *(_QWORD *)(a1 + 32));

}

void sub_1000DB150(id a1, UIMutableTraits *a2)
{
  -[UIMutableTraits setVerticalSizeClass:](a2, "setVerticalSizeClass:", 2);
}

void sub_1000DB6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000DB708(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[5];

  v3 = a2;
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (!*(_QWORD *)(v5 + 112))
      goto LABEL_8;
    v8[1] = 3221225472;
    v8[2] = sub_1000DB7E8;
    v8[3] = &unk_1001B2538;
    v8[4] = v5;
    v7 = v3;
    v8[0] = _NSConcreteStackBlock;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v8);
    v3 = v7;
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 49) && !*(_BYTE *)(a1 + 50) && (v4 = *(_QWORD **)(a1 + 32), v4[14]))
  {
    v6 = v3;
    objc_msgSend(v4, "setCurrentSidebarState:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;

  }
  else
  {
LABEL_8:

  }
}

id sub_1000DB7E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000DB84C;
  v4[3] = &unk_1001B4FD8;
  v4[4] = v1;
  return objc_msgSend(v2, "showCalendarsAnimated:completion:", 0, v4);
}

void sub_1000DB84C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;

  objc_msgSend(a2, "restorePreservedState:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = 0;

}

void sub_1000DB88C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  dispatch_time_t v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  _QWORD v18[6];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
    objc_msgSend(v4, "becomeFirstResponder");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setOverrideTraitCollection:forChildViewController:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(*(id *)(a1 + 40), "layoutSearchControl");
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = v7 == 0;
  if (!v7)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) || !*(_BYTE *)(a1 + 72))
    {
      v8 = 0;
      goto LABEL_12;
    }
    *(_QWORD *)(v6 + 24) = 1;
    v5 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24);
  }
  if (v7 == 2)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v9 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "splitBehavior");
      v5 = *(_QWORD *)(a1 + 64);
      if (v9 == (id)2)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24) = 0;
        v5 = *(_QWORD *)(a1 + 64);
      }
    }
  }
LABEL_12:
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 24);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v10 != *(_QWORD *)(v11 + 136) || *(_QWORD *)(v11 + 112))
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000DBA80;
      v18[3] = &unk_1001B3030;
      v18[4] = v11;
      v18[5] = v5;
      v12 = objc_retainBlock(v18);
      v13 = v12;
      if (v8)
      {
        v14 = dispatch_time(0, 0);
        dispatch_after(v14, (dispatch_queue_t)&_dispatch_main_q, v13);
      }
      else
      {
        ((void (*)(_QWORD *))v12[2])(v12);
      }

    }
  }
  v15 = *(void **)(a1 + 56);
  if (v15)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000DBAF0;
    v16[3] = &unk_1001B26A0;
    v16[4] = *(_QWORD *)(a1 + 40);
    v17 = v15;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v16);

  }
}

id sub_1000DBA80(uint64_t a1)
{
  _QWORD v2[4];
  __int128 v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000DBAE0;
  v2[3] = &unk_1001B3030;
  v3 = *(_OWORD *)(a1 + 32);
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);
}

id sub_1000DBAE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCurrentSidebarState:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

id sub_1000DBAF0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "restoreEventDetailViewControllers:", *(_QWORD *)(a1 + 40));
}

void sub_1000DBDE0(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  double v6;
  id v7;

  if (!*(_BYTE *)(a1 + 48) || fabs(*(double *)(a1 + 40)) != 180.0)
  {
    v2 = *(void **)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "traitCollection"));
    objc_msgSend(v2, "setupSearchControlForTraitCollection:", v3);

    objc_msgSend(*(id *)(a1 + 32), "layoutSearchControl");
  }
  objc_msgSend(*(id *)(a1 + 32), "updatePrimaryViewControllerToolbar");
  v4 = *(_QWORD **)(a1 + 32);
  v5 = (void *)v4[5];
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "view"));
  objc_msgSend(v7, "bounds");
  objc_msgSend(v5, "layoutForWidth:", v6);

}

void sub_1000DC060(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  double v5;
  id v6;
  id v7;
  id v8;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[1];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "traitCollection"));
  objc_msgSend(v3, "setAvatarViewVisible:", objc_msgSend(v2, "canShowAvatarViewWithTraitCollection:", v4));

  *(_QWORD *)&v5 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v7 = objc_msgSend(v6, "shouldHideInlineFocusBannerForSidebarState:", 0, v5);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "paletteView"));
  objc_msgSend(v8, "setShouldHideInlineFocusBanner:", v7);

}

void sub_1000DC680(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "model"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "eventStore"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000DC734;
  v7[3] = &unk_1001B4618;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "familyCalendarsWithCompletion:", v7);

}

void sub_1000DC734(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "count") == (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
    objc_msgSend(*(id *)(a1 + 32), "showCalendar:enableDoneInitially:", v3, 0);

  }
}

id sub_1000DCAD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutSearchControl");
}

id sub_1000DCAE0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "becomeFirstResponder");
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfSupportedInterfaceOrientations");
}

void sub_1000DD084(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "splitBehavior") == (id)1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    v3 = (void *)v2[1];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "traitCollection"));
    objc_msgSend(v3, "setAvatarViewVisible:", objc_msgSend(v2, "canShowAvatarViewWithTraitCollection:", v4));

  }
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "shouldHideInlineFocusBannerForSidebarState:", 0);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "paletteView"));
  objc_msgSend(v6, "setShouldHideInlineFocusBanner:", v5);

}

uint64_t sub_1000DD148(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000DD154(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "cancelSearch");
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 97))
  {
    objc_msgSend(*(id *)(v2 + 8), "setAvatarViewVisible:", 0);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v3 = objc_msgSend((id)objc_opt_class(v2), "shouldHideInlineFocusBannerForSidebarState:", *(_QWORD *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "paletteView"));
  objc_msgSend(v4, "setShouldHideInlineFocusBanner:", v3);

}

void sub_1000DD1F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v9 = v3;
    v5 = objc_opt_class(CalendarsViewController);
    isKindOfClass = objc_opt_isKindOfClass(v4, v5);
    v3 = v9;
    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "restorePreservedState:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(void **)(v7 + 112);
      *(_QWORD *)(v7 + 112) = 0;

      v3 = v9;
    }
  }

}

void sub_1000DD360(uint64_t a1, void *a2)
{
  uint64_t v3;
  char isKindOfClass;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(CalendarsViewController);
  isKindOfClass = objc_opt_isKindOfClass(v7, v3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = v7;
    if ((isKindOfClass & 1) == 0)
      v6 = 0;
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

}

void sub_1000DD4AC(uint64_t a1, void *a2)
{
  uint64_t v3;
  char isKindOfClass;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(InboxViewController);
  isKindOfClass = objc_opt_isKindOfClass(v7, v3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = v7;
    if ((isKindOfClass & 1) == 0)
      v6 = 0;
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

}

void sub_1000DD5F8(uint64_t a1, void *a2)
{
  uint64_t v3;
  char isKindOfClass;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(ListViewController);
  isKindOfClass = objc_opt_isKindOfClass(v7, v3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = v7;
    if ((isKindOfClass & 1) == 0)
      v6 = 0;
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

}

id sub_1000DD924(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", 0.0);
}

id sub_1000DD97C(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000DD9E0;
  v2[3] = &unk_1001B2538;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v2, 0.25);
}

id sub_1000DD9E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setAlpha:", 1.0);
}

id sub_1000DDB94(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48), 0);
}

id sub_1000DE79C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "showCalendar:enableDoneInitially:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id sub_1000DE870(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "dismissPresentedViewControllerAnimated:completion:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1000DF794(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;
  void *v5;
  void *v6;
  dispatch_time_t v7;
  dispatch_queue_global_t global_queue;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getEvent"));
  *(_QWORD *)&v3 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "testName", v3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controller"));
  objc_msgSend(v6, "showEvent:animated:showMode:context:", v2, 0, 1, 0);

  v7 = dispatch_time(0, 2000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v9 = objc_claimAutoreleasedReturnValue(global_queue);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000DF8BC;
  v13[3] = &unk_1001B2C88;
  v10 = *(void **)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v2;
  v15 = v10;
  v16 = v5;
  v11 = v5;
  v12 = v2;
  dispatch_after(v7, v9, v13);

}

void sub_1000DF8BC(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;
  id v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000DF95C;
  v3[3] = &unk_1001B2C88;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

void sub_1000DF95C(id *a1)
{
  void *v2;
  void *v3;
  dispatch_time_t v4;
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "controller"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "shownEventViewController"));
  objc_msgSend(v3, "doneButtonTapped");

  v4 = dispatch_time(0, 2000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v6 = objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000DFA58;
  v9[3] = &unk_1001B2C88;
  v10 = a1[5];
  v11 = a1[6];
  v7 = a1[7];
  v8 = a1[4];
  v12 = v7;
  v13 = v8;
  dispatch_after(v4, v6, v9);

}

void sub_1000DFA58(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000DFAF8;
  v4[3] = &unk_1001B2C88;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v2 = *(id *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v7 = v2;
  v8 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_1000DFAF8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    objc_msgSend(v2, "startedTest:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "controller"));
    objc_msgSend(v5, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 32), 0, 1, 0);

    v6 = (void *)UIApp;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000DFC00;
    v10[3] = &unk_1001B2CD8;
    v11 = *(id *)(a1 + 40);
    v7 = *(id *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v12 = v7;
    v13 = v8;
    objc_msgSend(v6, "installCACommitCompletionBlock:", v10);

  }
  else
  {
    objc_msgSend(v2, "failedTest:withFailure:", v4, CFSTR("No Events Loaded"));
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v9, "removeObserver:", *(_QWORD *)(a1 + 56));

  }
}

id sub_1000DFC00(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedTest:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "cleanUp");
}

void sub_1000E0204(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  dispatch_time_t v13;
  dispatch_queue_global_t global_queue;
  NSObject *v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  uint64_t v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getEvent"));
  *(_QWORD *)&v3 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "testName", v3));
  if (objc_msgSend(v2, "isNew"))
  {
    objc_msgSend(*(id *)(a1 + 40), "failedTest:withFailure:", v5, CFSTR("Event failed to save"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "removeObserver:", *(_QWORD *)(a1 + 32));

  }
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "startDate"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "model"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "eventStore"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "timeZone"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[EKCalendarDate calendarDateWithDate:timeZone:](EKCalendarDate, "calendarDateWithDate:timeZone:", v8, v11));
  objc_msgSend(v7, "selectDate:animated:", v12, 0);

  v13 = dispatch_time(0, 2000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v15 = objc_claimAutoreleasedReturnValue(global_queue);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000E03E8;
  v18[3] = &unk_1001B2C88;
  v19 = v2;
  v20 = *(id *)(a1 + 40);
  v21 = v5;
  v22 = *(_QWORD *)(a1 + 32);
  v16 = v5;
  v17 = v2;
  dispatch_after(v13, v15, v18);

}

void sub_1000E03E8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000E0488;
  v4[3] = &unk_1001B2C88;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v2 = *(id *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v7 = v2;
  v8 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_1000E0488(uint64_t a1)
{
  dispatch_time_t v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v2 = dispatch_time(0, 2000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000E055C;
  v7[3] = &unk_1001B2C88;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v10 = v5;
  v11 = v6;
  dispatch_after(v2, v4, v7);

}

void sub_1000E055C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000E05FC;
  v4[3] = &unk_1001B2C88;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v2 = *(id *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v7 = v2;
  v8 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_1000E05FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 56), "_detailsDidAppear:", EKEventViewControllerDidAppearNotification, 0);

    if (objc_msgSend(*(id *)(a1 + 56), "shouldWaitForAttendeeLoad"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 56), "_attendeesDidFinishLoading:", EKEventDetailsDidFinishLoadingAttendeesNotification, 0);

    }
    objc_msgSend(*(id *)(a1 + 40), "startedTest:", *(_QWORD *)(a1 + 48));
    if (objc_msgSend(*(id *)(a1 + 56), "shouldWaitForAttendeeLoad"))
    {
      v4 = *(void **)(a1 + 40);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "eventDetailsDidShowSubtestName"));
      objc_msgSend(v4, "startedSubTest:forTest:", v5, *(_QWORD *)(a1 + 48));

    }
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "controller"));
    objc_msgSend(v6, "showEvent:animated:showMode:context:", *(_QWORD *)(a1 + 32), 0, 1, 0);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "failedTest:withFailure:", *(_QWORD *)(a1 + 48), CFSTR("No Events Loaded"));
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "removeObserver:", *(_QWORD *)(a1 + 56));
  }

}

void sub_1000E0E40(id a1, NSMutableDictionary *a2)
{
  -[NSMutableDictionary setObject:forKeyedSubscript:](a2, "setObject:forKeyedSubscript:", CFSTR("SwipedOnDayViewScrubber"), CFSTR("method"));
}

id sub_1000E0E58(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setContentOffset:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_1000E0E74(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "scrollViewDidEndDecelerating:", *(_QWORD *)(a1 + 40));
}

void sub_1000E1078(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  v2 = (void *)qword_1001F64C0;
  qword_1001F64C0 = v1;

}

void sub_1000E22EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2304(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000E2314(uint64_t a1)
{

}

void sub_1000E231C(uint64_t a1)
{
  dispatch_time_t v2;
  id v3;
  __int128 v4;
  _QWORD block[5];
  __int128 v6;

  v2 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E23C0;
  block[3] = &unk_1001B51C8;
  block[4] = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000E23C0(uint64_t a1)
{
  double v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  *(_QWORD *)&v2 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "testName", v2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v5, "startedTest:", v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "switcherViewController"));
  v7 = objc_msgSend(v6, "showRepliedSection");

  v8 = *(void **)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000E24A8;
  v10[3] = &unk_1001B26A0;
  v11 = v8;
  v12 = v4;
  v9 = v4;
  objc_msgSend(v11, "installCACommitCompletionBlock:", v10);

}

id sub_1000E24A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest:extraResults:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000E2618(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000E26A4;
  v6[3] = &unk_1001B2798;
  v7 = v3;
  v5 = v3;
  objc_msgSend(WeakRetained, "enumerateScrollViewSubviews:", v6);

}

id sub_1000E26A4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "overlaySignificantDatesChangedInRange:", *(_QWORD *)(a1 + 32));
}

id sub_1000E2800(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "extendedLaunchCompletedByViewType:", 0);
}

void sub_1000E3584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000E359C(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(a2, "maximumNumberOfMonths");
  if (result != *(id *)(a1 + 40))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_1000E3668(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  -[InfiniteScrollViewSubview updateToday](a2, "updateToday", a3);
}

void sub_1000E36D0(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  -[InfiniteScrollViewSubview updateToday](a2, "updateToday", a3);
}

void sub_1000E3730(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  EKUIPushFallbackSizingContextWithViewHierarchy(v2);
  objc_msgSend(*(id *)(a1 + 32), "_reloadAllViews");
  objc_msgSend(*(id *)(a1 + 32), "localeDidChange");
  objc_msgSend(*(id *)(a1 + 32), "enumerateScrollViewSubviews:", &stru_1001B5288);
  EKUIPopFallbackSizingContextWithViewHierarchy(v2);

}

void sub_1000E3794(id a1, InfiniteScrollViewSubview *a2, BOOL *a3)
{
  -[InfiniteScrollViewSubview localeChanged](a2, "localeChanged", a3);
}

id sub_1000E3CEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setAlpha:", *(double *)(a1 + 40));
}

id sub_1000E41DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_updateBackButtonToSelectedDate");
  return objc_msgSend(*(id *)(a1 + 32), "_pushMonthViewControllerWithDate:animated:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "shouldAnimateTransitionsToMonthView"));
}

id sub_1000E4988(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "setContentOffset:", *(double *)(*(_QWORD *)(a1 + 32) + 48), 0.0);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 128) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 129) = 0;
  return result;
}

id sub_1000E49E0(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  result = objc_msgSend(*(id *)(a1 + 32), "_didFinishDecelerating");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 128) = 0;
  return result;
}

void sub_1000E5658(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F64E8;
  qword_1001F64E8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F64E8, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F64E8, "addAnchoredValue:forWindowSizeWidth:", 512, 109.0);
  objc_msgSend((id)qword_1001F64E8, "addAnchoredValue:forWindowSizeWidth:", 1024, 109.0);
  objc_msgSend((id)qword_1001F64E8, "addAnchoredValue:forWindowSizeWidth:", 2048, 109.0);
  objc_msgSend((id)qword_1001F64E8, "addAnchoredValue:forWindowSizeWidth:", 4096, 146.0);
}

uint64_t sub_1000E5FE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000E6424(id a1, NSMutableDictionary *a2)
{
  -[NSMutableDictionary setObject:forKeyedSubscript:](a2, "setObject:forKeyedSubscript:", CFSTR("TappedOnDayViewScrubber"), CFSTR("method"));
}

void sub_1000E643C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "date"));
  objc_msgSend(v2, "setSelectedDate:animated:", v3, 1);

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navDelegate"));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "date"));
  objc_msgSend(v6, "dayNavigationWeekScrollView:selectedDateChanged:", v4, v5);

}

id sub_1000E6944(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showDebugMenu");
}

void sub_1000E6FBC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "currentViewType")));
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v2, CFSTR("_CalendarSceneManagerDidChangeDisplayedOccurrencesForTheFirstTimeNotification_CalendarContentViewType_Key")));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:userInfo:", CFSTR("_CalendarSceneManagerDidChangeDisplayedOccurrencesForTheFirstTimeNotification"), *(_QWORD *)(a1 + 32), v4);

}

void sub_1000E70F8(uint64_t a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventStore"));
  v1 = objc_msgSend(v2, "refreshEverythingIfNecessary:", 0);

}

_QWORD *sub_1000E72D0(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = result[4];
  if (*(_BYTE *)(v1 + 45))
  {
    v2 = result;
    *(_BYTE *)(v1 + 45) = 0;
    v3 = kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v2[5];
      v5 = 138412290;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CalendarSceneManager calling _completeStateRestoration (5 second timeout expired) for scene: %@", (uint8_t *)&v5, 0xCu);
    }
    return objc_msgSend((id)v2[5], "_completeStateRestoration");
  }
  return result;
}

id sub_1000E738C(uint64_t a1)
{
  +[CalMCSignpost endLaunchToView:extended:](CalMCSignpost, "endLaunchToView:extended:", objc_msgSend(*(id *)(a1 + 32), "currentViewType"), 0);
  return +[CalMCSignpost beginLaunch:](CalMCSignpost, "beginLaunch:", 1);
}

void sub_1000E7958(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "eventStore"));
  objc_msgSend(v1, "requestIntegrationCatchupSync");

}

void sub_1000E96C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1000E96EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id WeakRetained;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 136315394;
    v6 = "-[CalendarSceneManager _continueUserActivity:restoreSelectedOccurrence:restoreSelectedDate:restorationHandler:]_block_invoke";
    v7 = 2112;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Running delayed execution of [%s] that was previously requested at [%@] in the system time.", (uint8_t *)&v5, 0x16u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_continueUserActivity:restoreSelectedOccurrence:restoreSelectedDate:restorationHandler:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 48));

}

void sub_1000E9FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EA018(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6 = 136315650;
    v7 = "-[CalendarSceneManager _openURL:]_block_invoke";
    v8 = 2112;
    v9 = v3;
    v10 = 2112;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Running delayed execution of [%s] with URL [%@] that was previously requested at [%@] in the system time.", (uint8_t *)&v6, 0x20u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_openURL:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_1000EA0F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000EA100(uint64_t a1)
{

}

void sub_1000EA108(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 32);
  v7 = EKUIEventDetailsFromTravelAdvisoryContextKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v8 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  objc_msgSend(WeakRetained, "handleURL:context:", v3, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1000EA41C(id a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet URLFragmentAllowedCharacterSet](NSCharacterSet, "URLFragmentAllowedCharacterSet"));
  v4 = objc_msgSend(v1, "mutableCopy");

  objc_msgSend(v4, "removeCharactersInString:", CFSTR("/?&:$+,;=@"));
  v2 = objc_msgSend(v4, "copy");
  v3 = (void *)qword_1001F6520;
  qword_1001F6520 = (uint64_t)v2;

}

void sub_1000EA898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EA8C4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v6 = 136315650;
    v7 = "-[CalendarSceneManager windowScene:performActionForShortcutItem:completionHandler:]_block_invoke";
    v8 = 2112;
    v9 = v3;
    v10 = 2112;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Running delayed execution of [%s] with shortcut item [%@] that was previously requested at [%@] in the system time.", (uint8_t *)&v6, 0x20u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "windowScene:performActionForShortcutItem:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));

}

void sub_1000EABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  id *v24;
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1000EAC14(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  id v16;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    v8 = kCalUILogHandle;
    if (!os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    *(_WORD *)buf = 0;
    v9 = "Will not dismiss the splash screen view controller because 'strongSelf' is nil.";
    v10 = v8;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v9, buf, 2u);
    goto LABEL_11;
  }
  v4 = kCalUILogHandle;
  if (!v3)
  {
    if (!os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    *(_WORD *)buf = 0;
    v9 = "Will not dismiss the splash screen view controller because 'strongSplashScreenViewController' is nil.";
    v10 = v4;
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Dismissing the splash screen view controller: [%@]", buf, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "presentingViewController"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000EADB8;
  v11[3] = &unk_1001B2CD8;
  v6 = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v14 = WeakRetained;
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v11);

LABEL_11:
}

id sub_1000EADB8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v6;
  uint64_t v7;

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Completed dismissal of the splash screen view controller: [%@]", (uint8_t *)&v6, 0xCu);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "removeObserver:name:object:", *(_QWORD *)(a1 + 40), CFSTR("_CalendarSceneManagerDidCompleteSplashScreenNotification"), 0);

  return objc_msgSend(*(id *)(a1 + 48), "_splashScreenDidDismissShouldNotify:", 1);
}

uint64_t sub_1000EAE94(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  int v6;
  id v7;

  v2 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v3 = v2;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6 = 138412290;
    v7 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Completed presentation of the splash screen view controller: [%@]", (uint8_t *)&v6, 0xCu);

  }
  return EKUIPopFallbackSizingContextWithViewHierarchy(*(_QWORD *)(a1 + 32));
}

id sub_1000EB120(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Completed dismissal of splash screen view controller.", v4, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_splashScreenDidDismissShouldNotify:", 0);
}

void sub_1000EB194(uint64_t a1, void *a2)
{
  id v3;
  NSNumber *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", CalDefaultTimeZoneSettingIsAutomatic());
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("timezoneSupportIsEnabled"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CDBPreferences shared](CDBPreferences, "shared"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v6, "get_kCalPreferredDaysToSyncKey")));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("numberOfDaysToSync"));

  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "currentViewType")));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("viewType"));

}

void sub_1000EB6F4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellFactory"));
  objc_msgSend(v2, "localeChanged");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "calendar"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setCalendar:", v3);

}

id sub_1000EC088(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000EC0E8;
  v2[3] = &unk_1001B2538;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);
}

void sub_1000EC0E8(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "model"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "selectedDate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "calendarDateForEndOfMonth"));
  objc_msgSend(v1, "reinitializeAllViewsWithCalendarDate:", v3);

}

void sub_1000EC154(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  objc_msgSend(v2, "setToolbarHidden:animated:", objc_msgSend(*(id *)(a1 + 32), "allowsOverriddenToolbarItems") ^ 1, 1);

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 240) = 0;
}

void sub_1000EC388(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "reinitializeAllViewsWithCalendarDate:", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;

}

void sub_1000EC89C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6540;
  qword_1001F6540 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6540, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6540, "setRoundingType:", 4);
  objc_msgSend((id)qword_1001F6540, "addAnchoredValue:forWindowSizeWidth:", 2048, 3.0);
  objc_msgSend((id)qword_1001F6540, "addAnchoredValue:forWindowSizeWidth:", 4096, 4.0);
  objc_msgSend((id)qword_1001F6540, "addAnchoredValue:forWindowSizeWidth:", 0x40000000, 6.0);
}

id sub_1000ED068(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "_updateYearNumbersAnimated:withForce:", 0, 1);
}

void sub_1000ED240(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  id v7;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 200);
  v7 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "calendarDate"));
  v5 = objc_msgSend(v3, "compare:", v4);

  v6 = *(_BYTE *)(a1 + 40) != 0;
  if (v5)
    objc_msgSend(v7, "showYearNumberAnimated:", v6);
  else
    objc_msgSend(v7, "hideYearNumberAnimated:", v6);

}

void sub_1000EDA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EDA64(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "selectSegmentIndex:", *(_QWORD *)(a1 + 40));

}

id sub_1000EEBF0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "requestReminderSheet:", a2);
}

id sub_1000EEBFC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "requestReminderSheet:", a2);
}

id sub_1000EF3A4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setShowWeekNumber:", *(unsigned __int8 *)(a1 + 32));
}

BOOL sub_1000EFD24(id a1, EKCalendarNotificationReference *a2, NSDictionary *a3)
{
  return -[EKCalendarNotificationReference type](a2, "type", a3) > 4;
}

void sub_1000EFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EFED8(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  double v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "traitCollection"));
  v4 = objc_msgSend(v10, "verticalSizeClass");
  if (v4 == (id)1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    *(_QWORD *)&v5 = objc_opt_class(WeakRetained).n128_u64[0];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dividedModeBackgroundColor", v5));
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  }
  v8 = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "scrollView"));
  objc_msgSend(v9, "setBackgroundColor:", v7);

  if (v4 == (id)1)
  {

    v7 = WeakRetained;
  }

}

id sub_1000F0A20(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "transitionToSizeDidEnd");
}

id sub_1000F165C(id result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v1 + 351))
  {
    *(_BYTE *)(v1 + 351) = 0;
    return objc_msgSend(*((id *)result + 4), "_loadEventsForAllSubviews");
  }
  return result;
}

void sub_1000F1CDC(uint64_t a1, uint64_t a2)
{
  id *v4;
  void *v5;
  id *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v4 = *(id **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[1], "selectedDate"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subviewForDate:", v5));

  v6 = *(id **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[1], "selectedDate"));
  objc_msgSend(v6, "_setSelectedDay:onMonthWeekView:animated:", v7, v9, 1);

  if (objc_msgSend(*(id *)(a1 + 32), "_viewingEventDetailsColumn")
    && (objc_msgSend(*(id *)(a1 + 32), "_shouldDisplayThreeColumns") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_autoSelectEvent");
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, a2);

}

void sub_1000F1F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1F5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F1F6C(uint64_t a1)
{

}

void sub_1000F1F74(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  CGPoint v13;
  CGRect v14;

  v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "locationInView:", v12);
  v8 = v7;
  v10 = v9;
  objc_opt_class(CompactMonthWeekView);
  if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
  {
    objc_msgSend(v12, "bounds");
    v13.x = v8;
    v13.y = v10;
    if (CGRectContainsPoint(v14, v13) && (objc_msgSend(v12, "isHidden") & 1) == 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

void sub_1000F219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F21B4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  CGPoint v13;
  CGRect v14;

  v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "locationInView:", v12);
  v8 = v7;
  v10 = v9;
  objc_opt_class(CompactMonthWeekView);
  if ((objc_opt_isKindOfClass(v12, v11) & 1) != 0)
  {
    objc_msgSend(v12, "bounds");
    v13.x = v8;
    v13.y = v10;
    if (CGRectContainsPoint(v14, v13))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

uint64_t sub_1000F2344(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 362) = 0;
  return result;
}

void sub_1000F2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F2470(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  CGFloat v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  CGFloat v22;
  id v23;
  CGRect v24;
  CGRect v25;

  v23 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v11, "contentOffset");
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v14, "safeAreaInsets");
  v16 = v13 + v15;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v17, "frame");
  v19 = v18;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollView"));
  objc_msgSend(v20, "safeAreaInsets");
  v22 = v19 - v21;

  v24.origin.x = v8;
  v24.origin.y = v16;
  v24.size.width = v10;
  v24.size.height = v22;
  if (CGRectContainsPoint(v24, *(CGPoint *)(a1 + 48)))
  {
    objc_msgSend(v23, "frame");
    if (CGRectContainsPoint(v25, *(CGPoint *)(a1 + 48)))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a3 = 1;
    }
  }

}

id sub_1000F2A70(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeMonthHighlight");
}

id sub_1000F2CB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_1000F2CC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_1000F3024(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "calendarDate"));
  objc_msgSend(v3, "absoluteTime");
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "endCalendarDate"));
  objc_msgSend(v6, "absoluteTime");
  v8 = v7;

  if (v5 <= *(double *)(a1 + 40) && v8 >= *(double *)(a1 + 48))
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "calendarDate"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "endCalendarDate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_loadEventsForStartDate:endDate:", v10, v11));

    if (v12)
      objc_msgSend(v13, "setEventData:animated:", v12, objc_msgSend(*(id *)(a1 + 32), "_shouldAnimateDots"));

  }
}

void sub_1000F31F4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "calendarDate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "endCalendarDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_loadEventsForStartDate:endDate:", v4, v5));

  if (v6)
    objc_msgSend(v7, "setEventData:animated:", v6, objc_msgSend(*(id *)(a1 + 32), "_shouldAnimateDots"));

}

void sub_1000F3AF8(uint64_t a1)
{
  _QWORD block[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "numberOfDaysWithCachedOccurrences");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000F3B78;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1000F3B78(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 347) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_loadEventsForAllSubviews");
}

void sub_1000F4310(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 312);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "event"));
  objc_msgSend(v2, "selectEvent:animated:", v3, *(unsigned __int8 *)(a1 + 48));

}

id sub_1000F4364(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldDisplayThreeColumns") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_setPaletteDisplaced");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "setAlpha:", 1.0);
  }
  return objc_msgSend(*(id *)(a1 + 32), "viewWillLayoutSubviews");
}

id sub_1000F44DC(uint64_t a1)
{
  int v2;
  void *v3;
  double v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "_setPaletteDisplaced");
    v4 = 1.0;
  }
  else
  {
    objc_msgSend(v3, "_resetPaletteState");
    v4 = 0.0;
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 368), "setAlpha:", v4);
}

_QWORD *sub_1000F4528(_QWORD *result)
{
  if (!*((_BYTE *)result + 40))
    return objc_msgSend(*(id *)(result[4] + 368), "setHidden:", 1);
  return result;
}

id sub_1000F46E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "viewWillLayoutSubviews");
}

id sub_1000F46E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 384), "presentedViewController"));
  objc_opt_class(EKEventEditViewController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) != 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 384), "dismissViewControllerWithTransition:completion:", 0, 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 384), "popToRootViewControllerAnimated:", 0);
}

void sub_1000F575C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "defaultEventForSelectedDate"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setSelectedOccurrence:", v4);
  if (v4)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "scrollToSelectedDateAnimated:", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "augmentEventDetailsContext:", 0));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[EKEventViewController eventDetailViewControllerWithEvent:delegate:context:](EKEventViewController, "eventDetailViewControllerWithEvent:delegate:context:", v4, *(_QWORD *)(a1 + 32), v2));
    objc_msgSend(*(id *)(a1 + 32), "_slideToShowEventDetails:animated:", v3, 0);

  }
}

void sub_1000F598C(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  objc_msgSend(a1[4], "invalidateManagedNavigationController");
  objc_msgSend(a1[5], "setDelegate:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "startCalendarDate"));
  objc_msgSend(*((id *)a1[4] + 1), "setSelectedDate:", v2);

  v3 = a1[4];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "startDate"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000F5A98;
  v5[3] = &unk_1001B55E8;
  v5[4] = a1[4];
  v6 = a1[6];
  v7 = a1[5];
  v8 = a1[7];
  objc_msgSend(v3, "showDate:animated:completionBlock:", v4, 1, v5);

}

id sub_1000F5A98(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
    objc_msgSend(v3, "_showDetailsForEvent:animated:showMode:context:", v4, 1, 1, v5);

  }
  return objc_msgSend(*(id *)(a1 + 56), "setDisableTodayPulse:", 0);
}

void sub_1000F5D18(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD block[4];
  id v5;
  uint64_t v6;
  uint64_t v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000F5D94;
  block[3] = &unk_1001B5610;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v5 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1000F5D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  objc_opt_class(EKEventViewController);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setEditorShowTransition:", 6);
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 == 3)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 361) = 1;
      objc_msgSend(*(id *)(a1 + 32), "editButtonTapped");
    }
    else if (v4 == 2)
    {
      objc_msgSend(*(id *)(a1 + 32), "openAttendeesDetailItem");
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 304), "deselectAllRowsAnimated:", 0);
}

id sub_1000F5ED4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "invalidateManagedNavigationController");
  objc_msgSend(*(id *)(a1 + 40), "setDelegate:", 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setSelectedOccurrence:", 0);
}

id sub_1000F5FF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidateManagedNavigationController");
}

void sub_1000F6230(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "setDisableTodayPulse:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "model"));
  objc_msgSend(v2, "setSelectedDate:", *(_QWORD *)(a1 + 48));

  byte_1001F6560 = 0;
}

uint64_t sub_1000F82FC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_animationComplete");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1000F8434(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_animationComplete");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1000F8B10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "springAnimateToEndStateWithTimingFunction:", 2);
}

id sub_1000F8B28(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "view"));
  objc_msgSend(*(id *)(a1 + 32), "_calculateYearFrameForYearViewZoom");
  scaleViewToFrame(v2);

  scaleViewToFrame(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "view", scaleViewToFrame(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)).n128_f64[0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "setAlpha:", 1.0);

  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v5 + 32))
  {
    v6 = *(double *)(v5 + 168);
    v7 = -*(double *)(v5 + 192);
    objc_msgSend(*(id *)(v5 + 32), "frame");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setFrame:", v6, v7);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(_QWORD *)(v5 + 40))
  {
    v8 = *(double *)(v5 + 200);
    objc_msgSend((id)v5, "bounds");
    v10 = v9;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "frame");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setFrame:", v8, v10);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(_QWORD *)(v5 + 48))
  {
    v11 = *(double *)(v5 + 232);
    objc_msgSend((id)v5, "bounds");
    v12 = *(_QWORD *)(a1 + 32);
    v14 = v13 + *(double *)(v12 + 224);
    objc_msgSend(*(id *)(v12 + 48), "frame");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setFrame:", v11, v14);
    v5 = *(_QWORD *)(a1 + 32);
  }
  result = *(id *)(v5 + 320);
  if (result)
  {
    objc_msgSend(result, "frame");
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 320), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  }
  return result;
}

id sub_1000F8D08(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:", 0.0);
}

id sub_1000F8D80(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:", 1.0);
}

id sub_1000F8FD8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "springAnimateToStartStateWithTimingFunction:", 2);
}

id sub_1000F8FF0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "view"));
  objc_msgSend(*(id *)(a1 + 32), "_calculateMonthFrameForYearViewZoom");
  scaleViewToFrame(v2);

  scaleViewToFrame(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "view", scaleViewToFrame(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)).n128_f64[0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "setAlpha:", 0.0);

  v5 = *(_QWORD **)(a1 + 32);
  v6 = v5[4];
  if (v6)
  {
    scaleViewToFrame(v6);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", 1.0);
    v5 = *(_QWORD **)(a1 + 32);
  }
  v7 = v5[5];
  if (v7)
  {
    scaleViewToFrame(v7);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", 1.0);
    v5 = *(_QWORD **)(a1 + 32);
  }
  result = (id)v5[6];
  if (result)
  {
    scaleViewToFrame(result);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", 1.0);
  }
  return result;
}

id sub_1000F916C(uint64_t a1)
{
  id result;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 320);
  if (result)
  {
    objc_msgSend(result, "frame");
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 320), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  }
  return result;
}

id sub_1000F91B8(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", *(double *)(*(_QWORD *)(a1 + 32) + 328));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "animatableDateLabel"));
  objc_msgSend(v2, "setAlpha:", 1.0);

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:", 1.0);
}

void sub_1000F9260(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "dateLabel"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "animatableDateLabel"));
  objc_msgSend(v3, "setAlpha:", 0.0);

}

NSArray *__cdecl sub_1000FBF90(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  void *v4;
  void *v5;
  NSArray *v6;
  void *v8;

  v2 = a2;
  v3 = -[NSArray indexOfObjectPassingTest:](v2, "indexOfObjectPassingTest:", &stru_1001B5690);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", v3));
    v8 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    v6 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByExcludingObjectsInArray:](v2, "arrayByExcludingObjectsInArray:", v5));

  }
  else
  {
    v6 = v2;
  }

  return v6;
}

BOOL sub_1000FC060(id a1, UIMenuElement *a2, unint64_t a3, BOOL *a4)
{
  UIMenuElement *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *v8;

  v4 = a2;
  objc_opt_class(UIKeyCommand);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    v6 = -[UIMenuElement action](v4, "action") == "find:";
  }
  else
  {
    objc_opt_class(UIMenu);
    if ((objc_opt_isKindOfClass(v4, v7) & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(-[UIMenuElement identifier](v4, "identifier"));
      v6 = objc_msgSend(v8, "isEqualToString:", UIMenuFind);

    }
    else
    {
      v6 = 0;
    }
  }

  return v6;
}

NSMutableDictionary *sub_1000FC114(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *i;
  void *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  const __CFString *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  const __CFString *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  const __CFString *v27;
  void *v28;
  void *v29;
  void *v30;
  id obj;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  NSMutableDictionary *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[6];
  _QWORD v50[6];
  _BYTE v51[128];
  _BYTE v52[128];

  v39 = objc_opt_new(NSMutableDictionary);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "allSceneManagers"));

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = v3;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
  if (v34)
  {
    v4 = 0;
    v33 = *(_QWORD *)v46;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v46 != v33)
          objc_enumerationMutation(obj);
        v35 = v5;
        v36 = v4;
        v6 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v5);
        v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Scene #%ld"), v4));
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v40 = (void *)v7;
        -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v8, v7);

        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "model"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedCalendars"));

        v37 = v10;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v41, v51, 16);
        if (v11)
        {
          v12 = v11;
          v38 = *(_QWORD *)v42;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v42 != v38)
                objc_enumerationMutation(v37);
              v14 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
              v49[0] = CFSTR("calendarIdentifier");
              v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "calendarIdentifier"));
              v16 = (void *)v15;
              if (v15)
                v17 = (const __CFString *)v15;
              else
                v17 = &stru_1001B67C0;
              v50[0] = v17;
              v49[1] = CFSTR("isIgnoringEventAlerts");
              if (objc_msgSend(v14, "isIgnoringEventAlerts"))
                v18 = CFSTR("YES");
              else
                v18 = CFSTR("NO");
              v50[1] = v18;
              v49[2] = CFSTR("type");
              v19 = (void *)objc_claimAutoreleasedReturnValue(+[EKCalendar typeDescription:](EKCalendar, "typeDescription:", objc_msgSend(v14, "type")));
              v50[2] = v19;
              v49[3] = CFSTR("color");
              v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "colorString"));
              v21 = (void *)v20;
              if (v20)
                v22 = (const __CFString *)v20;
              else
                v22 = &stru_1001B67C0;
              v50[3] = v22;
              v49[4] = CFSTR("allowsModify");
              if (objc_msgSend(v14, "allowsContentModifications"))
                v23 = CFSTR("YES");
              else
                v23 = CFSTR("NO");
              v50[4] = v23;
              v49[5] = CFSTR("sourceIdentifier");
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "source"));
              v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "sourceIdentifier"));
              v26 = (void *)v25;
              if (v25)
                v27 = (const __CFString *)v25;
              else
                v27 = &stru_1001B67C0;
              v50[5] = v27;
              v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 6));
              v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v39, "objectForKeyedSubscript:", v40));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "calendarIdentifier"));
              objc_msgSend(v29, "setObject:forKeyedSubscript:", v28, v30);

            }
            v12 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v41, v51, 16);
          }
          while (v12);
        }

        v4 = v36 + 1;
        v5 = v35 + 1;
      }
      while ((id)(v35 + 1) != v34);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
    }
    while (v34);
  }

  return v39;
}

uint64_t sub_1000FC4E0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CUIKStateCaptureNotification, *(_QWORD *)(a1 + 32), 0);

  return 0;
}

void sub_1000FD178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FD1D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000FD1E0(uint64_t a1)
{

}

void sub_1000FD1E8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v4 = kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v9 = 138412546;
    v10 = v5;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Finished updating snapshot for scene %@ with result: %d", (uint8_t *)&v9, 0x12u);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v6, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

  }
  if (!a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

}

void sub_1000FD308(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    v4 = kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v5 = a1[4];
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Got occurrences changed notification before the timeout for scene %@", (uint8_t *)&v6, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
    (*(void (**)(void))(a1[5] + 16))();
  }

}

uint64_t sub_1000FD3F0(uint64_t result)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 24))
  {
    v1 = (_QWORD *)result;
    v2 = kCalUILogHandle;
    if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEBUG))
    {
      v3 = v1[4];
      v4 = 138412290;
      v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timed out before we got the occurrences change notification for scene %@", (uint8_t *)&v4, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(v1[7] + 8) + 24) = 1;
    return (*(uint64_t (**)(void))(v1[5] + 16))();
  }
  return result;
}

uint64_t sub_1000FD4C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  return result;
}

void sub_1000FD800(uint64_t a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventStore"));
  v1 = objc_msgSend(v2, "refreshEverythingIfNecessary:", 0);

}

void sub_1000FE32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FE350(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  +[EKUILargeTextUtilities clearCache](EKUILargeTextUtilities, "clearCache");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  objc_msgSend(v2, "reloadData");

}

void sub_1000FE580(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "refreshIfNeeded");
  if (objc_msgSend(v3, "hasRows"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

id sub_1000FE644(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setVisible:", *(unsigned __int8 *)(a1 + 32));
}

void sub_1000FE68C(id a1, InboxNotificationsGroupController *a2, unint64_t a3, BOOL *a4)
{
  -[InboxNotificationsGroupController inboxWillDismiss](a2, "inboxWillDismiss", a3, a4);
}

id sub_1000FEB4C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "viewWillAppear:", *(unsigned __int8 *)(a1 + 32));
}

void sub_1000FED50(id a1, InboxNotificationsGroupController *a2, unint64_t a3, BOOL *a4)
{
  -[InboxNotificationsGroupController viewDidDisappear](a2, "viewDidDisappear", a3, a4);
}

void sub_1000FEEC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 64);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "selectedOccurrence"));
  LOBYTE(v3) = objc_msgSend(v3, "isEqual:", v4);

  if ((v3 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = 0;

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexPathForSelectedRow"));
    objc_msgSend(v7, "deselectRowAtIndexPath:animated:", v9, 1);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 72);
  *(_QWORD *)(v10 + 72) = 0;

}

id sub_1000FFCA4(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(objc_alloc((Class)EKUIReadonlyEventViewController), "initWithEvent:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v1, "setAllowsCalendarPreview:", 1);
  objc_msgSend(v1, "setInlineDayViewRespectsSelectedCalendarsFilter:", 0);
  objc_msgSend(v1, "setCalendarPreviewIsInlineDayView:", 1);
  return v1;
}

id sub_1000FFCFC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 40)));

  v12 = *(_QWORD *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000FFE38;
  v10[3] = &unk_1001B58C8;
  v11 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000FFE8C;
  v8[3] = &unk_1001B2650;
  v9 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[EKUIContextMenuActions menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:](EKUIContextMenuActions, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:", v4, v9, 0, v10, v8));

  return v6;
}

BOOL sub_1000FFE38(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  v3 = +[EKUIContextMenuActions statusButtonsActionFromContextMenuAction:](EKUIContextMenuActions, "statusButtonsActionFromContextMenuAction:", a2);
  v4 = v3 & 7;
  if ((v3 & 7) != 0)
    objc_msgSend(*(id *)(a1 + 32), "eventStatusButtonsView:didSelectAction:appliesToAll:ifCancelled:", 0, v3, 0, 0);
  return v4 != 0;
}

id *sub_1000FFE8C(id *result, uint64_t a2)
{
  if (a2 == 8)
    return (id *)objc_msgSend(result[4], "attemptDisplayReviewPrompt");
  return result;
}

void sub_10010015C(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1001001D4;
  v2[3] = &unk_1001B26A0;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);

}

void sub_1001001D4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 104));
  objc_msgSend(WeakRetained, "inboxNewSectionViewController:inspectEvent:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10010073C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a2, *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10010078C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a2, *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001007DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a2, *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001015E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100101614(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;

  v19 = a2;
  v5 = a3;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend(WeakRetained, "_updateTodayButtonPosition");

  if (objc_msgSend(v5, "horizontalSizeClass") == (id)2
    && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "traitCollection")),
        v9 = objc_msgSend(v8, "horizontalSizeClass"),
        v8,
        v9 == (id)1))
  {
    v10 = objc_loadWeakRetained(v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "viewControllers"));
    v12 = objc_msgSend(v11, "count");

    if ((unint64_t)v12 >= 2)
    {
      v13 = objc_loadWeakRetained(v6);
      objc_msgSend(v13, "_hideSearchBar");
LABEL_9:

    }
  }
  else if (objc_msgSend(v5, "horizontalSizeClass") == (id)1)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "traitCollection"));
    v15 = objc_msgSend(v14, "horizontalSizeClass");

    if (v15 == (id)2)
    {
      v16 = objc_loadWeakRetained(v6);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "viewControllers"));
      v18 = objc_msgSend(v17, "count");

      if ((unint64_t)v18 >= 2)
      {
        v13 = objc_loadWeakRetained(v6);
        objc_msgSend(v13, "_showSearchBar");
        goto LABEL_9;
      }
    }
  }

}

void sub_10010199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001019B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int IsRegularInViewHierarchy;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  void *v34;
  void *v35;
  double Width;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  CGRect v48;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = *(_QWORD *)(a1 + 48);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  IsRegularInViewHierarchy = EKUICurrentWidthSizeClassIsRegularInViewHierarchy(v2, v3);

  if (IsRegularInViewHierarchy)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    objc_msgSend(v5, "setFrame:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResultsViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    objc_msgSend(v8, "frame");
    objc_msgSend(v6, "_searchBar:proposedSearchFieldFrame:", v7);
    v10 = v9;
    v12 = v11;

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "searchField"));
    objc_msgSend(v14, "frame");
    v16 = v15;

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "searchField"));
    objc_msgSend(v18, "setFrame:", v10, 8.0, v12, v16);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v20 = EKUIApplicationFrame();
    v22 = v21;
    v24 = v23;

    v25 = *(double *)(a1 + 72);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "searchField"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "superview"));
    objc_msgSend(v28, "setFrame:", v20, v22, v24, v25);

    v29 = *(double *)(a1 + 72);
    v30 = *(double *)(a1 + 56) - v29 + -20.0;
    v31 = v29 + 1.0;
    v33 = EKUIWidthForWindowSizeParadigm(32, v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentViewController"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "view"));
    objc_msgSend(v35, "frame");
    Width = CGRectGetWidth(v48);

    v37 = *(void **)(a1 + 32);
    if (Width <= v33)
    {
      v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "parentViewController"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "view"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "superview"));
      objc_msgSend(v46, "setFrame:", v10, v31, v12, v30);

    }
    else
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "view"));
      objc_msgSend(v38, "setFrame:", v10, v31, v12, v30);

      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "layer"));
      objc_msgSend(v40, "setMasksToBounds:", 1);

      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "layer"));
      objc_msgSend(v42, "setCornerRadius:", 4.0);

      v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      objc_msgSend(v47, "setNeedsDisplay");
    }
  }
  else
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    EKUIApplicationFrame();
    objc_msgSend(v43, "setFrame:");

    v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
    objc_msgSend(v47, "setFrame:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56));
  }

}

id sub_100102034(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_hideSearchBar");
}

void sub_10010203C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  objc_msgSend(v1, "setHidden:", 1);

}

id sub_10010217C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_showSearchBar");
}

uint64_t sub_100102184(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100102340(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  objc_msgSend(v2, "setHidden:", 0);

  v3 = *(double *)(a1 + 40);
  v4 = *(double *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 64);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  objc_msgSend(v7, "setFrame:", v3, v4, v5, v6);

}

void sub_1001026B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int IsRegularInViewHierarchy;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  id v18;
  _QWORD v19[5];
  char v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  IsRegularInViewHierarchy = EKUICurrentWidthSizeClassIsRegularInViewHierarchy(v2, v3);

  v5 = *(void **)(a1 + 32);
  if (IsRegularInViewHierarchy)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchBar"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_leftButton"));

    v8 = objc_msgSend(v7, "setEnabled:", *(unsigned __int8 *)(a1 + 40));
    if (*(_BYTE *)(a1 + 40))
    {
      v10 = CalendarAppTintColor(v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
    }
    else
    {
      v11 = objc_claimAutoreleasedReturnValue(+[UIColor lightGrayColor](UIColor, "lightGrayColor"));
    }
    v12 = (void *)v11;
    objc_msgSend(v7, "setTitleColor:forState:", v11, 0);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchResultsViewController"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "toolbarItems"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10010283C;
    v19[3] = &unk_1001B5968;
    v19[4] = *(_QWORD *)(a1 + 32);
    v20 = *(_BYTE *)(a1 + 40);
    objc_msgSend(v12, "enumerateObjectsUsingBlock:", v19);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "searchField"));
  objc_msgSend(v14, "setUserInteractionEnabled:", *(unsigned __int8 *)(a1 + 40));

  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "searchField"));
  v16 = v15;
  v17 = 0.35;
  if (*(_BYTE *)(a1 + 40))
    v17 = 1.0;
  objc_msgSend(v15, "setAlpha:", v17);

}

void sub_10010283C(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
  *(_QWORD *)&v4 = objc_opt_class(*(_QWORD *)(a1 + 32)).n128_u64[0];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_todayLocalizedString", v4));
  v7 = objc_msgSend(v3, "isEqualToString:", v6);

  if (v7)
    objc_msgSend(v8, "setEnabled:", *(unsigned __int8 *)(a1 + 40));

}

void sub_100102D24(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6578;
  qword_1001F6578 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6578, "addAnchoredValue:forWindowSizeWidth:", 2, 7.5);
}

void sub_100102DB4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6588;
  qword_1001F6588 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6588, "addAnchoredValue:forWindowSizeWidth:", 2, 55.0);
}

void sub_100102E48(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6598;
  qword_1001F6598 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6598, "addAnchoredValue:forWindowSizeWidth:", 2, 0.0);
}

void sub_100102EE0(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F65A8;
  qword_1001F65A8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F65A8, "addAnchoredValue:forWindowSizeWidth:", 2, 4.0);
}

void sub_100102FD4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F65B8;
  qword_1001F65B8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F65B8, "addAnchoredValue:forWindowSizeWidth:", 2, 36.0);
}

void sub_10010307C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F65D0;
  qword_1001F65D0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F65D0, "addAnchoredValue:forWindowSizeWidth:", 2, 17.0);
}

void sub_100103170(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F65E0;
  qword_1001F65E0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F65E0, "addAnchoredValue:forWindowSizeWidth:", 2, 8.0);
}

void sub_100103210(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F65F0;
  qword_1001F65F0 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F65F0, "addAnchoredValue:forWindowSizeWidth:", 2, 12.0);
}

void sub_100103450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100103474(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateTableAlpha:", 1);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_setContentInsets");

}

void sub_100103D80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100103D9C(uint64_t a1)
{
  id *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  id WeakRetained;

  v2 = (id *)(a1 + 40);
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tableView"));
  if ((uint64_t)objc_msgSend(v3, "numberOfSectionsInTableView:", v4) >= 1)
  {

LABEL_4:
    WeakRetained = objc_loadWeakRetained(v2);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
    v10 = v9;
    v11 = 1.0;
LABEL_5:
    objc_msgSend(v9, "setAlpha:", v11);

    return;
  }
  v5 = objc_loadWeakRetained(v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchBar"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "text"));
  v8 = objc_msgSend(v7, "length");

  if (v8)
    goto LABEL_4;
  if (objc_msgSend(*(id *)(a1 + 32), "destination") != (id)2)
  {
    WeakRetained = objc_loadWeakRetained(v2);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
    v10 = v9;
    v11 = 0.0;
    goto LABEL_5;
  }
}

void sub_100104408(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResultsDelegate"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResultsDelegate"));
    objc_msgSend(v3, "searchResultsViewController:didSelectEvent:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

void sub_1001045D0(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100104648;
  v2[3] = &unk_1001B26A0;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);

}

id sub_100104648(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showEvent:", *(_QWORD *)(a1 + 40));
}

id sub_10010535C(uint64_t a1)
{
  void *v2;
  void *v3;

  +[NSThread sleepForTimeInterval:](NSThread, "sleepForTimeInterval:", 2.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "_searchViewDidAppear", CFSTR("ListViewController_ViewDidAppearNotification"), 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v3, "startedTest:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "toggleDayViewMode:", 2);
}

id sub_1001053F0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "presentedViewController"));

  if (v2)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "dismissViewControllerAnimated:completion:", 1, *(_QWORD *)(a1 + 40));
  else
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1001054F8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "removeObserver:", *(_QWORD *)(a1 + 32));

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "toggleDayViewMode:", 0);
}

void sub_1001056A8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_eventEditorForTestingOnly"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 40), "handleDidBeginAutocompleteSearchNotification:", _EventKitUI_EventEditorDidBeginAutocompleteSearchNotification, 0);
  objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 40), "handleDidShowAutocompleteResultsNotification:", _EventKitUI_EventEditorDidShowAutocompleteResultsNotification, 0);
  objc_msgSend(*(id *)(a1 + 48), "startedTest:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 48), "startedSubTest:forTest:", CFSTR("SearchThrottleDelay"), *(_QWORD *)(a1 + 56));
  objc_msgSend(v2, "_setEventTitleForTestingAutocomplete:", *(_QWORD *)(a1 + 64));

}

void sub_1001058E0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  objc_msgSend(v2, "finishedSubTest:forTest:", CFSTR("CellDisplay"), *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10010597C;
  v5[3] = &unk_1001B2538;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "finishedTest:extraResults:withTeardownBlock:", v4, 0, v5);

}

void sub_10010597C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "removeObserver:", *(_QWORD *)(a1 + 32));

}

void sub_100105E18(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v2 = (void *)qword_1001F6630;
  qword_1001F6630 = v1;

  v3 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v4 = (void *)qword_1001F6638;
  qword_1001F6638 = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor"));
  v6 = (void *)qword_1001F6640;
  qword_1001F6640 = v5;

  v7 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.75));
  v8 = (void *)qword_1001F6648;
  qword_1001F6648 = v7;

}

void sub_100106044(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v2 = (void *)qword_1001F6658;
  qword_1001F6658 = v1;

  v3 = objc_claimAutoreleasedReturnValue(+[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor"));
  v4 = (void *)qword_1001F6660;
  qword_1001F6660 = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor"));
  v6 = (void *)qword_1001F6668;
  qword_1001F6668 = v5;

}

void sub_100106124(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.2));
  v2 = (void *)qword_1001F6678;
  qword_1001F6678 = v1;

}

void sub_100106EF0(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1001F6688;
  qword_1001F6688 = (uint64_t)v1;

}

void sub_100106F18(id a1)
{
  qword_1001F6698 = EKUIScaleFactor(a1);
}

void sub_100106F34(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setFill");
  UIRectFill(*(CGRect *)(a1 + 40));
}

void sub_100107440(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1001F66A8;
  qword_1001F66A8 = (uint64_t)v1;

}

void sub_100107468(id a1)
{
  qword_1001F66B8 = EKUIScaleFactor(a1);
}

void sub_100107484(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setFill");
  UIRectFill(*(CGRect *)(a1 + 40));
}

void sub_100109CF8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.831372549, 1.0));
  v2 = (void *)qword_1001F66C8;
  qword_1001F66C8 = v1;

}

id sub_100109D30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDotImageView");
}

id sub_10010BE7C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 1;
  return objc_msgSend(*(id *)(a1 + 40), "reloadData");
}

void sub_10010BE90(uint64_t a1)
{
  void *v2;
  id v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[CarplayUtilities dateForSection:](CarplayUtilities, "dateForSection:", objc_msgSend(*(id *)(a1 + 40), "section")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellForRow:underDate:inTableView:", objc_msgSend(*(id *)(a1 + 40), "row"), v3, *(_QWORD *)(a1 + 48)));
  objc_msgSend(*(id *)(a1 + 56), "crossfadeToCell:", v2);
  objc_msgSend(*(id *)(a1 + 48), "insertRowsAtIndexPaths:withRowAnimation:", *(_QWORD *)(a1 + 64), 3);

}

id sub_10010BF28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reloadData");
}

BOOL sub_10010C33C(id a1, EKEvent *a2, NSDictionary *a3)
{
  void *v3;
  void *v4;
  BOOL v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[EKEvent calendar](a2, "calendar", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "source"));
  v5 = objc_msgSend(v4, "sourceType") == (id)5;

  return v5;
}

void sub_10010CCB4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F66D8;
  qword_1001F66D8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F66D8, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forSize:", 223.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 512, 159.0);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 2048, 215.5);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 4096, 208.5);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 237.0);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 218.0);
  objc_msgSend((id)qword_1001F66D8, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 290.0);
}

void sub_10010CE14(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F66E8;
  qword_1001F66E8 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F66E8, "addAnchoredValue:forWindowSizeWidth:", 2048, 5.0);
  objc_msgSend((id)qword_1001F66E8, "addAnchoredValue:forWindowSizeWidth:", 4096, 5.0);
}

void sub_10010CF40(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "headerFontMaxSize");
  v1 = objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:"));
  v2 = (void *)qword_1001F66F8;
  qword_1001F66F8 = v1;

}

void sub_10010D1B8(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6718;
  qword_1001F6718 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6718, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forSize:", 14.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 512, 10.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 2048, 12.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 4096, 12.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 13.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 13.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 16.0);
  objc_msgSend((id)qword_1001F6718, "addAnchoredValue:forWindowSizeWidth:", 0x40000000, 15.5);
}

void sub_10010D338(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6728;
  qword_1001F6728 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6728, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forSize:", 16.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 512, 11.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 2048, 14.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 4096, 14.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 14.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 14.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 16.0);
  objc_msgSend((id)qword_1001F6728, "addAnchoredValue:forWindowSizeWidth:", 0x40000000, 15.5);
}

void sub_10010D4A4(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6738;
  qword_1001F6738 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6738, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forSize:", 28.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 512, 16.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 2048, 24.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 4096, 24.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 24.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 24.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 28.0);
  objc_msgSend((id)qword_1001F6738, "addAnchoredValue:forWindowSizeWidth:", 0x40000000, 27.5);
}

void sub_10010D684(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6748;
  qword_1001F6748 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6748, "setCalculationType:", 0);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forSize:", 1.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forWindowSizeWidth:", 512, -1.5);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forWindowSizeWidth:", 2048, 0.0);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forWindowSizeWidth:", 4096, 0.0);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forWindowSizeWidth:", 0x4000, -2.0);
  objc_msgSend((id)qword_1001F6748, "addAnchoredValue:forWindowSizeWidth:", 0x40000000, -1.5);
}

void sub_10010D7F8(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6758;
  qword_1001F6758 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6758, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6758, "addAnchoredValue:forWindowSizeWidth:", 512, 48.0);
  objc_msgSend((id)qword_1001F6758, "addAnchoredValue:forWindowSizeWidth:", 2048, 59.5);
  objc_msgSend((id)qword_1001F6758, "addAnchoredValue:forWindowSizeWidth:", 4096, 59.5);
  objc_msgSend((id)qword_1001F6758, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 75.0);
}

void sub_10010D93C(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6768;
  qword_1001F6768 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6768, "addAnchoredValue:forSize:", 24.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6768, "addAnchoredValue:forWindowSizeWidth:", 512, 24.0);
  objc_msgSend((id)qword_1001F6768, "addAnchoredValue:forWindowSizeWidth:", 2048, 24.0);
  objc_msgSend((id)qword_1001F6768, "addAnchoredValue:forWindowSizeWidth:", 4096, 24.0);
}

void sub_10010DA54(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6778;
  qword_1001F6778 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6778, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forSize:", 24.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 512, 17.0);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 2048, 22.0);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 4096, 22.0);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 26.0);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 26.0);
  objc_msgSend((id)qword_1001F6778, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 30.0);
}

void sub_10010DBEC(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;
  uint64_t v3;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6788;
  qword_1001F6788 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6788, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6788, "addAnchoredValue:forSize:", 12.0, EKUIWidthForWindowSizeParadigm(0x4000, v3) * 0.5);
  objc_msgSend((id)qword_1001F6788, "addAnchoredValue:forWindowSizeWidth:", 512, 11.0);
  objc_msgSend((id)qword_1001F6788, "addAnchoredValue:forWindowSizeWidth:", 2048, 12.0);
}

void sub_10010DD04(id a1)
{
  AnchoredValueGenerator *v1;
  void *v2;

  v1 = objc_opt_new(AnchoredValueGenerator);
  v2 = (void *)qword_1001F6798;
  qword_1001F6798 = (uint64_t)v1;

  objc_msgSend((id)qword_1001F6798, "setCalculationType:", 1);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 512, 31.0);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 2048, 38.0);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 4096, 38.0);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 0x8000, 38.0);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 0x10000, 38.0);
  objc_msgSend((id)qword_1001F6798, "addAnchoredValue:forWindowSizeWidth:", 0x4000, 50.0);
}

void sub_10010F150(id *a1)
{
  void *v2;
  id v3;

  objc_msgSend(a1[4], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[5], "setAnimatingViewTransition:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transitionView"));
  objc_msgSend(v2, "removeFromSuperview");

  objc_msgSend(a1[7], "completeTransition:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("PhoneMonthDayAnimator_DayToMonthAnimationCompleteNotification"), 0);

}

void sub_10010F1D8(id *a1)
{
  void *v2;
  id v3;

  objc_msgSend(a1[4], "setAnimatingViewTransition:", 0);
  objc_msgSend(a1[5], "setAnimatingViewTransition:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transitionView"));
  objc_msgSend(v2, "removeFromSuperview");

  objc_msgSend(a1[7], "completeTransition:", 1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("PhoneMonthDayAnimator_MonthToDayAnimationCompleteNotification"), 0);

}

void sub_100110B14(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  _QWORD block[4];
  id v7;
  uint64_t v8;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100110BDC;
  block[3] = &unk_1001B26A0;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v7 = v2;
  v8 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100110C40;
  v5[3] = &unk_1001B2538;
  v5[4] = *(_QWORD *)(a1 + 40);
  dispatch_async(v4, v5);

}

uint64_t sub_100110BDC(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "navigationController:didShowViewController:animated:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(*(id *)(a1 + 32), "navigationController:didShowViewController:animated:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 11));
  return result;
}

id sub_100110C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

id sub_100110CB4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if ((result & 1) == 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "isExecuting");
    if ((result & 1) == 0)
    {
      result = objc_msgSend(*(id *)(a1 + 32), "isFinished");
      if ((result & 1) == 0)
        return _objc_msgSend(*(id *)(a1 + 32), "main");
    }
  }
  return result;
}

void sub_100110E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  _QWORD block[5];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 10))
    goto LABEL_7;
  v3 = *(_QWORD *)(v2 + 32);
  objc_opt_class(UINavigationController);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 32);
LABEL_7:
    _objc_msgSend((id)v2, "doInternalPresentation");
    return;
  }
  v5 = (void *)kCalUILogHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v5;
    objc_opt_class(v6);
    v9 = v8;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v8;
    objc_opt_class(v10);
    v13 = v12;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    v15 = v12;
    objc_opt_class(v14);
    *(_DWORD *)buf = 138412802;
    v21 = v9;
    v22 = 2112;
    v23 = v13;
    v24 = 2112;
    v25 = v16;
    v17 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ operation instructing %@ to push %@.", buf, 0x20u);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "pushViewController:animated:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 11));
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100111054;
  block[3] = &unk_1001B2538;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v18, block);

}

id sub_100111054(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

id sub_1001110FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finish");
}

void sub_100111AE0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 112);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "selectedOccurrence"));
  LOBYTE(v3) = objc_msgSend(v3, "isEqual:", v4);

  if ((v3 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 112);
    *(_QWORD *)(v5 + 112) = 0;

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexPathForSelectedRow"));
    objc_msgSend(v7, "deselectRowAtIndexPath:animated:", v9, 1);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 120);
  *(_QWORD *)(v10 + 120) = 0;

}

void sub_100111FA4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(*(id *)(a1 + 40), "isFocusBannerSection:", objc_msgSend(v7, "section")) & 1) == 0)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_notificationForIndexPath:cache:", v7, *(_QWORD *)(a1 + 48)));
          v9 = v8;
          if (v8)
          {
            v10 = *(_QWORD *)(a1 + 40);
            v11 = *(NSObject **)(v10 + 80);
            v12[0] = _NSConcreteStackBlock;
            v12[1] = 3221225472;
            v12[2] = sub_100112138;
            v12[3] = &unk_1001B26A0;
            v12[4] = v10;
            v13 = v8;
            dispatch_sync(v11, v12);

          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_100112138(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = CUIKDisplayStringForNotificationIdentity(*(_QWORD *)(a1 + 40), 0, 0);
  v6 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);

}

id sub_1001125F8(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(objc_alloc((Class)EKUIReadonlyEventViewController), "initWithEvent:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v1, "setAllowsCalendarPreview:", 1);
  objc_msgSend(v1, "setInlineDayViewRespectsSelectedCalendarsFilter:", 0);
  objc_msgSend(v1, "setCalendarPreviewIsInlineDayView:", 1);
  return v1;
}

id sub_100112650(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 40)));

  v11 = *(_QWORD *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v5 = *(_QWORD *)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10011276C;
  v9[3] = &unk_1001B58C8;
  v10 = v3;
  v6 = v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[EKUIContextMenuActions menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:](EKUIContextMenuActions, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:", v4, v5, 0, v9, 0));

  return v7;
}

BOOL sub_10011276C(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  v3 = +[EKUIContextMenuActions statusButtonsActionFromContextMenuAction:](EKUIContextMenuActions, "statusButtonsActionFromContextMenuAction:", a2);
  v4 = v3 & 7;
  if ((v3 & 7) != 0)
    objc_msgSend(*(id *)(a1 + 32), "eventStatusButtonsView:didSelectAction:appliesToAll:ifCancelled:", 0, v3, 0, 0);
  return v4 != 0;
}

void sub_100112A7C(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100112AF4;
  v2[3] = &unk_1001B26A0;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);

}

void sub_100112AF4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 160));
  objc_msgSend(WeakRetained, "inboxRepliedSectionViewController:inspectEvent:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100112FFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113010(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

  v6 = v14;
  if (v5 != v14)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "notification"));
    v8 = v7;
    if (v7)
    {
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URL"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

      if (v11)
      {
        v12 = *(void **)(a1 + 32);
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, *(_QWORD *)(a1 + 40)));
        objc_msgSend(v12, "_saveStatus:forItemAtIndexPath:", 3, v13);

      }
    }

    v6 = v14;
  }

}

_BYTE *sub_100113644(uint64_t a1)
{
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = 1;
  result = *(_BYTE **)(a1 + 32);
  if (result[40])
    return objc_msgSend(result, "_refreshIfNeeded");
  return result;
}

_BYTE *sub_100113774(uint64_t a1)
{
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = 1;
  result = *(_BYTE **)(a1 + 32);
  if (result[40])
    return objc_msgSend(result, "_refreshIfNeeded");
  return result;
}

_BYTE *sub_1001138A4(uint64_t a1)
{
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = 1;
  result = *(_BYTE **)(a1 + 32);
  if (result[40])
    return objc_msgSend(result, "_refreshIfNeeded");
  return result;
}

void sub_100113C60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100113C94(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_eventForOccurrenceInfo:", a2));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "focusFilterMode") == (id)1
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "unselectedCalendarsForFocusMode")),
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "calendar")),
        v6 = objc_msgSend(v4, "containsObject:", v5),
        v5,
        v4,
        (v6 & 1) != 0))
  {
    v7 = 0;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sourceForSelectedIdentity"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "calendar"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "source"));
    v11 = v10;
    if (v8)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sourceIdentifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sourceForSelectedIdentity"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "sourceIdentifier"));
      v7 = objc_msgSend(v12, "isEqualToString:", v14);

    }
    else
    {
      v7 = (id)(objc_msgSend(v10, "isDelegate") ^ 1);
    }

  }
  return v7;
}

void sub_1001140A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001140BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001140CC(uint64_t a1)
{

}

void sub_1001140D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1001142D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100114600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100114620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notification"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100114658(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setNotification:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

id sub_100115B10(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setDesiredPaddingDays:", 1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setComponentForExpandingPadding:", 16);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setPreloadExtraDays:", 1);
}

void sub_100116078(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100116094(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentedViewController"));

  if (!v2
    && objc_msgSend(WeakRetained, "didSelectEvent:userInitiated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48)))
  {
    objc_msgSend(WeakRetained, "_showDetailForEvent:animated:context:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 49), 0);
  }

}

void sub_1001161EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100116208(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentedViewController"));

  if (!v2
    && objc_msgSend(WeakRetained, "didSelectEvents:userInitiated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48)))
  {
    objc_msgSend(WeakRetained, "_showDetailForEvents:animated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 49));
  }

}

uint64_t sub_1001176D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

id sub_100118E78(id a1, EKDayOccurrenceView *a2)
{
  return -[EKDayOccurrenceView occurrence](a2, "occurrence");
}

id sub_100118E80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_100118FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100118FC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100118FD8(uint64_t a1)
{

}

void sub_100118FE0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_opt_class(EKDayOccurrenceView);
  if ((objc_opt_isKindOfClass(v8, v3) & 1) != 0 && objc_msgSend(v8, "isSelectedCopyView"))
  {
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v4)
    {
      v5 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

      v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    objc_msgSend(v4, "addObject:", v8);
  }

}

id sub_100119224(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "occurrence"));
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

void sub_100119EC4(id a1, BOOL a2)
{
  _BOOL4 v2;
  NSObject *v3;
  _DWORD v4[2];

  v2 = a2;
  v3 = kCalUILogCarplayHandle;
  if (os_log_type_enabled((os_log_t)kCalUILogCarplayHandle, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "cellWasTapped on location cell completion handler called with success %d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_10011A98C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  id v55;
  char *v56;
  _BYTE v57[24];
  char v58[24];

  v55 = a1;
  v2 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v56 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v51 = (char *)&v47 - v6;
  v7 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RemindersInCalendarEditingReminderProperties(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationConfiguration(0);
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  v17 = __chkstk_darwin(v16);
  v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v48 = (char *)&v47 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v47 - v21;
  v52 = v1;
  v23 = v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule, v58, 0, 0);
  sub_10011FC44(v23, (uint64_t)v22, (uint64_t *)&unk_1001F5970);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v24 = v53(v22, 1, v2);
  v25 = sub_10001CCFC((uint64_t)v22, (uint64_t *)&unk_1001F5970);
  if (v24 == 1)
  {
    RemindersInCalendarUtilities.ReminderCreationConfiguration.init()(v25);
    v26 = objc_msgSend((id)objc_opt_self(REMReminder), "newObjectID");
    RemindersInCalendarUtilities.ReminderCreationConfiguration.reminderID.setter(v26);
    v27 = objc_msgSend(v55, "addItemState");
    v28 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v9, 1, 1, v28);
    v29 = v52;
    sub_10011AE9C(v27, (uint64_t)v9, 0);

    sub_10001CCFC((uint64_t)v9, (uint64_t *)&unk_1001F5D80);
    RemindersInCalendarUtilities.ReminderCreationConfiguration.initialProperties.setter(v12);
    v30 = *(void **)(v29 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_undoManager);
    v31 = v30;
    RemindersInCalendarUtilities.ReminderCreationConfiguration.undoManager.setter(v30);
    v32 = v51;
    v33 = static RemindersInCalendarUtilities.makeReminderCreationModule(configuration:)(v15);
    v34 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v33);
    v36 = v35;
    ObjectType = swift_getObjectType(v34);
    v38 = sub_10011FD08(&qword_1001F59E0, type metadata accessor for AddReminderViewControllerManager, (uint64_t)&unk_1001A1B60);
    v39 = swift_unknownObjectRetain(v29);
    dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.moduleDelegate.setter(v39, v38, ObjectType, v36);
    swift_unknownObjectRelease(v34);
    v40 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v48, v32, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v40, 0, 1, v2);
    swift_beginAccess(v23, v57, 33, 0);
    sub_10011FD48(v40, v23, (uint64_t *)&unk_1001F5970);
    swift_endAccess(v57);
    v41 = objc_msgSend(v55, "addItemState");
    sub_10011BBA4(v41);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v50);
  }
  v42 = v54;
  sub_10011FC44(v23, v54, (uint64_t *)&unk_1001F5970);
  if (v53((char *)v42, 1, v2) == 1)
  {
    sub_10001CCFC(v42, (uint64_t *)&unk_1001F5970);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000028, 0x8000000100195570, "MobileCal/AddReminderViewControllerManager.swift", 48, 2, 50, 0);
    __break(1u);
  }
  else
  {
    v43 = v56;
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32))(v56, v42, v2);
    v45 = RemindersInCalendarUtilities.ReminderCreationModule.viewController.getter(v44);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v43, v2);
    return v45;
  }
  return result;
}

void sub_10011AE9C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(char *, uint64_t, uint64_t, uint64_t);
  id v44;
  void *v45;
  uint64_t v46;
  objc_class *v47;
  Class isa;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t, uint64_t);
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void (**v88)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE v89[24];
  char v90[32];

  v87 = a3;
  v83 = a2;
  v4 = sub_10000EDD8(&qword_1001F59C0);
  v5 = __chkstk_darwin(v4);
  v79 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v78 = (char *)&v76 - v7;
  v8 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  v9 = __chkstk_darwin(v8);
  v82 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v76 = (char *)&v76 - v11;
  v12 = type metadata accessor for DateComponents(0);
  v88 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v12 - 8);
  __chkstk_darwin(v12);
  v77 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  v15 = __chkstk_darwin(v14);
  v85 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v84 = (uint64_t)&v76 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v76 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v76 - v22;
  v24 = sub_10000EDD8(&qword_1001F59C8);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  RemindersInCalendarEditingReminderProperties.init()(v25);
  v28 = objc_msgSend(a1, "event");
  v29 = objc_msgSend(v28, "title");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

  }
  else
  {
    v31 = 0;
    v33 = 0;
  }
  RemindersInCalendarEditingReminderProperties.title.setter(v31, v33);
  v34 = objc_msgSend(v28, "notes");
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0;
  }
  RemindersInCalendarEditingReminderProperties.notes.setter(v36, v38);
  v39 = objc_msgSend(v28, "URL");
  if (v39)
  {
    v40 = v39;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v41 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v27, 0, 1, v41);
  }
  else
  {
    v42 = ((uint64_t (*)(void))type metadata accessor for URL)();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v27, 1, 1, v42);
  }
  v43 = v88;
  RemindersInCalendarEditingReminderProperties.url.setter(v27);
  if (objc_msgSend(a1, "explicitTime"))
  {
    v44 = objc_msgSend(v28, "startDateComponents");
    if (v44)
    {
      v45 = v44;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      v46 = 0;
    }
    else
    {
      v46 = 1;
    }
    v43[7](v23, v46, 1, v12);
    RemindersInCalendarEditingReminderProperties.dueDateComponents.setter(v23);
    goto LABEL_25;
  }
  sub_10011FC44(v83, (uint64_t)v21, (uint64_t *)&unk_1001F5D80);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v43[6])(v21, 1, v12) == 1)
  {
    sub_10001CCFC((uint64_t)v21, (uint64_t *)&unk_1001F5D80);
    v47 = (objc_class *)objc_msgSend(v28, "startDate");
    isa = v47;
    if (v47)
    {
      v49 = v82;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v51 = v80;
      v50 = v81;
      v52 = v78;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v49, v81);
      v53 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v53)(v52, 0, 1, v50);
      v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v52, 1, v50);
      v55 = v79;
      v88 = v53;
      if (v54 == 1)
      {
        isa = 0;
      }
      else
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
      }
    }
    else
    {
      v51 = v80;
      v50 = v81;
      v88 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v88)(v78, 1, 1, v81);
      v55 = v79;
    }
    v58 = (id)CUIKGetDefaultTimeForDate(isa);

    if (v58)
    {
      v59 = v82;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

      v60 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v60(v55, v59, v50);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v88)(v55, 0, 1, v50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v55, 1, v50) != 1)
      {
        v61 = (uint64_t)v76;
        v60(v76, v55, v50);
        v62 = v84;
        sub_10011B65C(v61, 0, v84);
        v43[7]((char *)v62, 0, 1, v12);
        RemindersInCalendarEditingReminderProperties.dueDateComponents.setter(v62);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v61, v50);
        goto LABEL_25;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v88)(v55, 1, 1, v50);
    }
    __break(1u);
    return;
  }
  v56 = v77;
  ((void (*)(char *, char *, uint64_t))v43[4])(v77, v21, v12);
  v57 = v84;
  ((void (*)(uint64_t, char *, uint64_t))v43[2])(v84, v56, v12);
  v43[7]((char *)v57, 0, 1, v12);
  RemindersInCalendarEditingReminderProperties.dueDateComponents.setter(v57);
  ((void (*)(char *, uint64_t))v43[1])(v56, v12);
LABEL_25:
  v63 = v86 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_initialDateComponents;
  swift_beginAccess(v86 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_initialDateComponents, v90, 0, 0);
  v64 = v85;
  sub_10011FC44(v63, v85, (uint64_t *)&unk_1001F5D80);
  v65 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43[6])(v64, 1, v12);
  v66 = sub_10001CCFC(v64, (uint64_t *)&unk_1001F5D80);
  if (v65 == 1)
  {
    v67 = v84;
    RemindersInCalendarEditingReminderProperties.dueDateComponents.getter(v66);
    swift_beginAccess(v63, v89, 33, 0);
    sub_10011FD48(v67, v63, (uint64_t *)&unk_1001F5D80);
    swift_endAccess(v89);
  }
  if (v87)
  {
    v68 = v87;
    v69 = objc_msgSend(v28, "recurrenceRules");
    if (v69)
    {
      v70 = v69;
      v71 = sub_10011FCD0(0, &qword_1001F59D8, EKRecurrenceRule_ptr);
      v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v71);

    }
    else
    {
      v72 = 0;
    }
    sub_10011FCD0(0, &qword_1001F59D0, REMRecurrenceRule_ptr);
    v73 = objc_msgSend(v68, "accountID");
    v74 = objc_msgSend(v68, "objectID");
    v75 = static REMRecurrenceRule.convert(_:account:reminder:)(v72, v73, v74);

    swift_bridgeObjectRelease(v72);
    RemindersInCalendarEditingReminderProperties.recurrenceRules.setter(v75);

  }
}

uint64_t sub_10011B65C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_10000EDD8(&qword_1001F5998);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v37 - v15;
  v17 = (id)CUIKCalendar(v14);
  if (!v17)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_8;
  }
  v18 = v17;
  v41 = a3;
  v42 = a1;
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v40 = v16;
  v19(v16, v8, v9);
  v21 = sub_10000EDD8(&qword_1001F59A0);
  v22 = type metadata accessor for Calendar.Component(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = v25 | 7;
  v28 = 2 * v24;
  v29 = 3 * v24;
  v39 = 4 * v24;
  if ((a2 & 1) != 0)
  {
    v30 = swift_allocObject(v21, v26 + 5 * v24, v27);
    *(_OWORD *)(v30 + 16) = xmmword_1001A1AD0;
    v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104);
    v31(v30 + v26, enum case for Calendar.Component.era(_:), v22);
    v31(v30 + v26 + v24, enum case for Calendar.Component.year(_:), v22);
    v31(v30 + v26 + v28, enum case for Calendar.Component.month(_:), v22);
    v31(v30 + v26 + v29, enum case for Calendar.Component.day(_:), v22);
    v31(v30 + v26 + v39, enum case for Calendar.Component.timeZone(_:), v22);
    v32 = sub_10011F5A0(v30);
    swift_setDeallocating(v30);
    v33 = v30 + v26;
    v34 = 5;
  }
  else
  {
    v38 = 8 * v24;
    v30 = swift_allocObject(v21, v26 + 8 * v24, v27);
    *(_OWORD *)(v30 + 16) = xmmword_1001A1AC0;
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104);
    v35(v30 + v26, enum case for Calendar.Component.era(_:), v22);
    v35(v30 + v26 + v24, enum case for Calendar.Component.year(_:), v22);
    v35(v30 + v26 + v28, enum case for Calendar.Component.month(_:), v22);
    v35(v30 + v26 + v29, enum case for Calendar.Component.day(_:), v22);
    v35(v30 + v26 + v39, enum case for Calendar.Component.hour(_:), v22);
    v35(v30 + v26 + 5 * v24, enum case for Calendar.Component.minute(_:), v22);
    v35(v30 + v26 + 6 * v24, enum case for Calendar.Component.second(_:), v22);
    v35(v30 + v26 + v38 - v24, enum case for Calendar.Component.timeZone(_:), v22);
    v32 = sub_10011F5A0(v30);
    swift_setDeallocating(v30);
    v33 = v30 + v26;
    v34 = 8;
  }
  swift_arrayDestroy(v33, v34, v22);
  swift_deallocClassInstance(v30, 32, 7);
  v36 = v40;
  Calendar.dateComponents(_:from:)(v32, v42);
  swift_bridgeObjectRelease(v32);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v36, v9);
}

uint64_t sub_10011BA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v1 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v8, v13, 0, 0);
  sub_10011FC44(v8, (uint64_t)v3, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10001CCFC((uint64_t)v3, (uint64_t *)&unk_1001F5970);
    return 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v9 = RemindersInCalendarUtilities.ReminderCreationModule.viewController.getter(v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t sub_10011BBA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44[24];

  v43 = a1;
  v2 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v40 - v6;
  v8 = type metadata accessor for RemindersInCalendarEditingReminderProperties(0);
  v9 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v42 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v12);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule, v44, 0, 0);
  sub_10011FC44(v19, (uint64_t)v14, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    return sub_10001CCFC((uint64_t)v14, (uint64_t *)&unk_1001F5970);
  v40[1] = v1;
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  v22 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v21);
  v40[0] = v23;
  v24 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v22);
  v26 = v25;
  ObjectType = swift_getObjectType(v24);
  v28 = (void *)dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.reminder.getter(ObjectType, v26);
  swift_unknownObjectRelease(v24);
  if (v28)
  {
    v29 = objc_msgSend(v28, "dueDateComponents");

    if (v29)
    {
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v29);

      v30 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v5, 0, 1, v30);
    }
    else
    {
      v32 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v5, 1, 1, v32);
    }
    sub_10011FC88((uint64_t)v5, (uint64_t)v7);
  }
  else
  {
    v31 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v7, 1, 1, v31);
  }
  v33 = v41;
  v34 = swift_getObjectType(v22);
  v35 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v34);
  v37 = v36;
  v38 = swift_getObjectType(v35);
  v39 = (void *)dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.reminder.getter(v38, v37);
  swift_unknownObjectRelease(v35);
  sub_10011AE9C(v43, (uint64_t)v7, v39);

  sub_10001CCFC((uint64_t)v7, (uint64_t *)&unk_1001F5D80);
  dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.editReminder(with:)(v11, v34, v40[0]);
  swift_unknownObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void sub_10011BF40(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  void *v56;
  char *v57;
  id v58;
  void *v59;
  uint64_t v60;
  void (**v61)(char *, uint64_t, uint64_t, uint64_t);
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  void *v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  BOOL v77;
  char v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char *v88;
  char v89;
  char v90;
  void (**v91)(char *, uint64_t, uint64_t, uint64_t);
  char *v92;
  void (**v93)(char *, uint64_t, uint64_t, uint64_t);
  char *v94;
  void (*v95)(char *, uint64_t, uint64_t, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char v109;
  char v110;
  void (**v111)(char *, uint64_t, uint64_t, uint64_t);
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  char *v113;
  void (**v114)(char *, uint64_t, uint64_t, uint64_t);
  char *v115;
  char *v116;
  void (*v117)(char *, uint64_t, uint64_t, uint64_t);
  char *v118;
  void (**v119)(char *, uint64_t, uint64_t, uint64_t);
  void (*v120)(char *, uint64_t, uint64_t, uint64_t);
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  void (*v125)(char *, uint64_t, uint64_t, uint64_t);
  id v126;
  char v127;
  char *v128;
  void (*v129)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  char *v135;
  char v136;
  char v137;
  char v138;
  void (*v139)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  char v145;
  char v146;
  char v147;
  void (*v148)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  char *v154;
  char v155;
  char v156;
  char v157;
  void (*v158)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  char *v164;
  char v165;
  char v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  void (*v185)(char *, uint64_t, uint64_t, uint64_t);
  char *v186;
  char *v187;
  void *v188;
  void (**v189)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  char v191[24];
  _QWORD v192[5];
  char v193[8];

  v2 = v1;
  v4 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  v5 = __chkstk_darwin(v4);
  v185 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v8 = (char *)&v167 - v7;
  v9 = type metadata accessor for DateComponents(0);
  v189 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v9 - 8);
  v190 = v9;
  v10 = __chkstk_darwin(v9);
  v172 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v175 = (char *)&v167 - v13;
  v14 = __chkstk_darwin(v12);
  v182 = (char *)&v167 - v15;
  v16 = __chkstk_darwin(v14);
  v173 = (char *)&v167 - v17;
  v18 = __chkstk_darwin(v16);
  v181 = (char *)&v167 - v19;
  v20 = __chkstk_darwin(v18);
  v174 = (char *)&v167 - v21;
  v22 = __chkstk_darwin(v20);
  v180 = (char *)&v167 - v23;
  v24 = __chkstk_darwin(v22);
  v177 = (char *)&v167 - v25;
  v26 = __chkstk_darwin(v24);
  v183 = (char *)&v167 - v27;
  v28 = __chkstk_darwin(v26);
  v176 = (char *)&v167 - v29;
  v30 = __chkstk_darwin(v28);
  v178 = (char *)&v167 - v31;
  v32 = __chkstk_darwin(v30);
  v179 = (char *)&v167 - v33;
  v34 = __chkstk_darwin(v32);
  v186 = (char *)&v167 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v167 - v37;
  __chkstk_darwin(v36);
  v187 = (char *)&v167 - v39;
  v40 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v40);
  v42 = (char *)&v167 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v44 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v46 = (char *)&v167 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = a1;
  v47 = objc_msgSend(a1, "event");
  v184 = v2;
  v48 = v2 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule, v193, 0, 0);
  v49 = v48;
  v50 = v43;
  sub_10011FC44(v49, (uint64_t)v42, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) == 1)
  {

    sub_10001CCFC((uint64_t)v42, (uint64_t *)&unk_1001F5970);
    return;
  }
  v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 32))(v46, v42, v43);
  v52 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v51);
  v54 = v53;
  ObjectType = swift_getObjectType(v52);
  v56 = (void *)dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.reminder.getter(ObjectType, v54);
  swift_unknownObjectRelease(v52);
  v57 = v46;
  if (!v56)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v50);

    return;
  }
  v171 = v50;
  v170 = v56;
  v58 = objc_msgSend(v56, "dueDateComponents");
  if (!v58)
  {
    v189[7](v8, 1, 1, v190);
    goto LABEL_10;
  }
  v59 = v58;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v58);

  v61 = v189;
  v60 = v190;
  v62 = v189[4];
  ((void (*)(char *, char *, uint64_t))v62)(v8, v38, v190);
  v61[7](v8, 0, 1, v60);
  v63 = v61[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v63)(v8, 1, v60) == 1)
  {
LABEL_10:
    sub_10001CCFC((uint64_t)v8, (uint64_t *)&unk_1001F5D80);
    v68 = v188;
    v69 = v47;
    goto LABEL_43;
  }
  v64 = v187;
  ((void (*)(char *, char *, uint64_t))v62)(v187, v8, v60);
  v65 = v184 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_initialDateComponents;
  swift_beginAccess(v184 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_initialDateComponents, v191, 0, 0);
  v66 = v185;
  sub_10011FC44(v65, (uint64_t)v185, (uint64_t *)&unk_1001F5D80);
  if (((unsigned int (*)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v63)(v66, 1, v60) != 1)
  {
    v71 = ((uint64_t (*)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))v62)(v186, v66, v60);
    v72 = DateComponents.era.getter(v71);
    v74 = v73;
    v75 = DateComponents.era.getter(v72);
    v169 = v44;
    if ((v74 & 1) != 0)
    {
      v78 = v76 & 1;
    }
    else
    {
      v77 = (v76 & 1) == 0 && v72 == v75;
      v78 = v77;
    }
    v57 = v46;
    v79 = v61[2];
    v80 = v179;
    ((void (*)(char *, char *, uint64_t))v79)(v179, v186, v60);
    v81 = v178;
    v82 = v187;
    v185 = v79;
    v83 = ((uint64_t (*)(char *, char *, uint64_t))v79)(v178, v187, v60);
    v168 = v57;
    if ((v78 & 1) != 0)
    {
      v84 = DateComponents.year.getter(v83);
      v86 = v85;
      v87 = DateComponents.year.getter(v84);
      v88 = v81;
      v90 = v89;
      v91 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v61[1];
      ((void (*)(char *, uint64_t))v91)(v88, v60);
      ((void (*)(char *, uint64_t))v91)(v80, v60);
      v92 = v183;
      if ((v86 & 1) != 0)
      {
        v100 = v90 & 1;
        v69 = v47;
      }
      else
      {
        v69 = v47;
        if ((v90 & 1) != 0)
        {
          v189 = v91;
          v82 = v187;
LABEL_24:
          v95 = v185;
          v94 = v186;
          v96 = v174;
          v97 = v177;
          v98 = v176;
          ((void (*)(char *, char *, uint64_t))v185)(v176, v186, v60);
          v99 = v183;
          ((void (*)(char *, char *, uint64_t))v95)(v183, v82, v60);
          v91 = v189;
          ((void (*)(char *, uint64_t))v189)(v99, v60);
          goto LABEL_32;
        }
        v100 = v84 == v87;
      }
      v94 = v186;
      v82 = v187;
      v98 = v176;
      v101 = v185;
      ((void (*)(char *, char *, uint64_t))v185)(v176, v186, v60);
      v102 = ((uint64_t (*)(char *, char *, uint64_t))v101)(v92, v82, v60);
      if ((v100 & 1) != 0)
      {
        v103 = DateComponents.month.getter(v102);
        v105 = v104;
        v106 = DateComponents.month.getter(v103);
        v107 = v92;
        v108 = v98;
        v110 = v109;
        ((void (*)(char *, uint64_t))v91)(v107, v60);
        ((void (*)(char *, uint64_t))v91)(v108, v60);
        if ((v105 & 1) != 0)
        {
          v127 = v110 & 1;
        }
        else
        {
          if ((v110 & 1) != 0)
          {
            v111 = v91;
            v94 = v186;
            v82 = v187;
            v96 = v174;
            v97 = v177;
LABEL_33:
            v112 = v185;
            ((void (*)(char *, char *, uint64_t))v185)(v97, v94, v60);
            v113 = v180;
            ((void (*)(char *, char *, uint64_t))v112)(v180, v82, v60);
            v91 = v111;
            goto LABEL_34;
          }
          v127 = v103 == v106;
        }
        v82 = v187;
        v128 = v177;
        v129 = v185;
        ((void (*)(char *, char *, uint64_t))v185)(v177, v186, v60);
        v113 = v180;
        v130 = ((uint64_t (*)(char *, char *, uint64_t))v129)(v180, v82, v60);
        if ((v127 & 1) != 0)
        {
          v131 = DateComponents.day.getter(v130);
          v133 = v132;
          v134 = DateComponents.day.getter(v131);
          v135 = v113;
          v137 = v136;
          ((void (*)(char *, uint64_t))v91)(v135, v60);
          ((void (*)(char *, uint64_t))v91)(v128, v60);
          if ((v133 & 1) != 0)
          {
            v138 = v137 & 1;
          }
          else
          {
            if ((v137 & 1) != 0)
            {
              v114 = v91;
              v115 = v172;
              v94 = v186;
              v82 = v187;
              v116 = v173;
              v96 = v174;
              goto LABEL_35;
            }
            v138 = v131 == v134;
          }
          v82 = v187;
          v96 = v174;
          v139 = v185;
          ((void (*)(char *, char *, uint64_t))v185)(v174, v186, v60);
          v118 = v181;
          v140 = ((uint64_t (*)(char *, char *, uint64_t))v139)(v181, v82, v60);
          if ((v138 & 1) != 0)
          {
            v141 = DateComponents.hour.getter(v140);
            v143 = v142;
            v144 = DateComponents.hour.getter(v141);
            v146 = v145;
            ((void (*)(char *, uint64_t))v91)(v118, v60);
            ((void (*)(char *, uint64_t))v91)(v96, v60);
            if ((v143 & 1) != 0)
            {
              v147 = v146 & 1;
            }
            else
            {
              if ((v146 & 1) != 0)
              {
                v119 = v91;
                v115 = v172;
                v94 = v186;
                v82 = v187;
                v116 = v173;
                goto LABEL_37;
              }
              v147 = v141 == v144;
            }
            v82 = v187;
            v121 = v173;
            v148 = v185;
            ((void (*)(char *, char *, uint64_t))v185)(v173, v186, v60);
            v122 = v182;
            v149 = ((uint64_t (*)(char *, char *, uint64_t))v148)(v182, v82, v60);
            if ((v147 & 1) != 0)
            {
              v150 = DateComponents.minute.getter(v149);
              v152 = v151;
              v153 = DateComponents.minute.getter(v150);
              v154 = v122;
              v156 = v155;
              ((void (*)(char *, uint64_t))v91)(v154, v60);
              ((void (*)(char *, uint64_t))v91)(v121, v60);
              if ((v152 & 1) != 0)
              {
                v189 = v91;
                v157 = v156 & 1;
                v124 = v175;
              }
              else
              {
                v124 = v175;
                if ((v156 & 1) != 0)
                {
                  v123 = v172;
                  v94 = v186;
                  v82 = v187;
                  goto LABEL_39;
                }
                v189 = v91;
                v157 = v150 == v153;
              }
              v158 = v185;
              v94 = v186;
              ((void (*)(char *, char *, uint64_t))v185)(v124, v186, v60);
              v123 = v172;
              v82 = v187;
              v159 = ((uint64_t (*)(char *, char *, uint64_t))v158)(v172, v187, v60);
              if ((v157 & 1) != 0)
              {
                v160 = DateComponents.second.getter(v159);
                v162 = v161;
                v163 = DateComponents.second.getter(v160);
                v164 = v123;
                v166 = v165;
                v91 = v189;
                ((void (*)(char *, uint64_t))v189)(v164, v60);
                ((void (*)(char *, uint64_t))v91)(v124, v60);
                ((void (*)(char *, uint64_t))v91)(v94, v60);
                if ((v162 & 1) != 0)
                {
                  v82 = v187;
                  v68 = v188;
                  v44 = v169;
                  if ((v166 & 1) != 0)
                    goto LABEL_42;
                }
                else if ((v166 & 1) != 0)
                {
                  v82 = v187;
                  v68 = v188;
                  v44 = v169;
                }
                else
                {
                  v77 = v160 == v163;
                  v82 = v187;
                  v68 = v188;
                  v44 = v169;
                  if (v77)
                    goto LABEL_42;
                }
LABEL_41:
                objc_msgSend(v68, "setExplicitTime:", 1);
LABEL_42:
                ((void (*)(char *, uint64_t))v91)(v82, v60);
                goto LABEL_43;
              }
              v68 = v188;
              v91 = v189;
LABEL_40:
              v44 = v169;
              ((void (*)(char *, uint64_t))v91)(v123, v60);
              ((void (*)(char *, uint64_t))v91)(v124, v60);
              ((void (*)(char *, uint64_t))v91)(v94, v60);
              goto LABEL_41;
            }
            v115 = v172;
            v94 = v186;
LABEL_38:
            ((void (*)(char *, uint64_t))v91)(v122, v60);
            ((void (*)(char *, uint64_t))v91)(v121, v60);
            v123 = v115;
            v124 = v175;
LABEL_39:
            v125 = v185;
            ((void (*)(char *, char *, uint64_t))v185)(v124, v94, v60);
            ((void (*)(char *, char *, uint64_t))v125)(v123, v82, v60);
            v68 = v188;
            goto LABEL_40;
          }
          v115 = v172;
          v94 = v186;
          v116 = v173;
LABEL_36:
          ((void (*)(char *, uint64_t))v91)(v118, v60);
          v119 = v91;
          ((void (*)(char *, uint64_t))v91)(v96, v60);
LABEL_37:
          v120 = v185;
          ((void (*)(char *, char *, uint64_t))v185)(v116, v94, v60);
          v121 = v116;
          v122 = v182;
          ((void (*)(char *, char *, uint64_t))v120)(v182, v82, v60);
          v91 = v119;
          v57 = v168;
          goto LABEL_38;
        }
        v94 = v186;
        v96 = v174;
        v97 = v128;
LABEL_34:
        ((void (*)(char *, uint64_t))v91)(v113, v60);
        v114 = v91;
        ((void (*)(char *, uint64_t))v91)(v97, v60);
        v115 = v172;
        v116 = v173;
LABEL_35:
        v117 = v185;
        ((void (*)(char *, char *, uint64_t))v185)(v96, v94, v60);
        v118 = v181;
        ((void (*)(char *, char *, uint64_t))v117)(v181, v82, v60);
        v91 = v114;
        goto LABEL_36;
      }
      v96 = v174;
      v97 = v177;
      ((void (*)(char *, uint64_t))v91)(v92, v60);
LABEL_32:
      v111 = v91;
      ((void (*)(char *, uint64_t))v91)(v98, v60);
      goto LABEL_33;
    }
    v93 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v61[1];
    ((void (*)(char *, uint64_t))v93)(v81, v60);
    v189 = v93;
    ((void (*)(char *, uint64_t))v93)(v80, v60);
    v69 = v47;
    goto LABEL_24;
  }
  sub_10001CCFC((uint64_t)v66, (uint64_t *)&unk_1001F5D80);
  v67 = v61[1];
  v68 = v188;
  v69 = v47;
  v70 = v64;
  v57 = v46;
  ((void (*)(char *, uint64_t))v67)(v70, v60);
LABEL_43:
  v192[3] = sub_10011FCD0(0, &qword_1001F5990, REMReminderChangeItem_ptr);
  v192[4] = &protocol witness table for REMReminderChangeItem;
  v192[0] = v170;
  v126 = v170;
  EKEvent.update(from:updateDates:forSavingIntegrationEvent:)(v192, objc_msgSend(v68, "explicitTime"), 0);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v57, v171);
  sub_10011FC24(v192);
}

uint64_t sub_10011CC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  _BYTE v27[24];

  v1 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  v2 = __chkstk_darwin(v1);
  v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v2);
  v6 = &v27[-v5 - 8];
  v7 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  v13 = &v27[-v12 - 8];
  v14 = v0 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule, v27, 0, 0);
  sub_10011FC44(v14, (uint64_t)v6, (uint64_t *)&unk_1001F5970);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
  {
    sub_10001CCFC((uint64_t)v6, (uint64_t *)&unk_1001F5970);
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    v17 = (void *)RemindersInCalendarUtilities.ReminderCreationModule.viewController.getter(v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v18 = objc_msgSend(v17, "isModalInPresentation");

    if ((v18 & 1) != 0)
    {
      v19 = 0;
      return v19 & 1;
    }
  }
  sub_10011FC44(v14, (uint64_t)v4, (uint64_t *)&unk_1001F5970);
  if (v15(v4, 1, v7) == 1)
  {
    sub_10001CCFC((uint64_t)v4, (uint64_t *)&unk_1001F5970);
    v19 = 1;
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v11, v4, v7);
    v21 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v20);
    v23 = v22;
    ObjectType = swift_getObjectType(v21);
    LOBYTE(v23) = dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.requiresUserConfirmationForCancelingEditing.getter(ObjectType, v23);
    swift_unknownObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v19 = v23 ^ 1;
  }
  return v19 & 1;
}

id sub_10011CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  NSString v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  id v48;
  void (*v49)(char *, uint64_t);
  id v51;
  void (*v52)(char *, _QWORD, uint64_t);
  unsigned int v53;
  void *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  _QWORD aBlock[5];
  uint64_t v62;

  v58 = type metadata accessor for LocalizedStringResource.BundleDescription(0, a2);
  v2 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  v56 = *(_QWORD *)(v11 - 8);
  v12 = v56;
  v13 = __chkstk_darwin(v11);
  v55 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v59 = (char *)&v51 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v51 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v51 - v20;
  v57 = (char *)&v51 - v20;
  v22 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000033, 0x8000000100195360);
  static Locale.current.getter(v22);
  v23 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v24 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v53 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = v58;
  v24(v4, enum case for LocalizedStringResource.BundleDescription.main(_:), v58);
  v52 = v24;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0, 0, v7, v4, "Warning message displayed in action sheet when trying to dismiss a reminder edit view for a new, unsaved reminder", 113, 2);
  v60 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v60(v19, v21, v11);
  String.init(localized:)(v19);
  v27 = v26;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v29 = objc_msgSend((id)objc_opt_self(EKUIAlertController), "alertControllerWithTitle:message:preferredStyle:", 0, v28, 0);
  v51 = v29;

  objc_msgSend(v29, "setProhibitsRotation:", 1);
  v30 = String.LocalizationValue.init(stringLiteral:)(0x2064726163736944, 0xEF7365676E616843);
  static Locale.current.getter(v30);
  v24(v4, v23, v25);
  v31 = v59;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0, 0, v7, v4, "Destructive action displayed in action sheet when trying to dismiss an event edit view where data has been changed.", 115, 2);
  v60(v19, v31, v11);
  String.init(localized:)(v19);
  v33 = v32;
  v34 = swift_allocObject(&unk_1001B6028, 24, 7);
  v35 = v54;
  *(_QWORD *)(v34 + 16) = v54;
  v36 = v35;
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  aBlock[4] = sub_10011FC04;
  v62 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10011D500;
  aBlock[3] = &unk_1001B6040;
  v38 = _Block_copy(aBlock);
  swift_release(v62);
  v39 = (void *)objc_opt_self(UIAlertAction);
  v40 = objc_msgSend(v39, "actionWithTitle:style:handler:", v37, 2, v38);
  _Block_release(v38);

  v41 = v51;
  objc_msgSend(v51, "addAction:", v40);

  v42 = String.LocalizationValue.init(stringLiteral:)(0x696445207065654BLL, 0xEC000000676E6974);
  static Locale.current.getter(v42);
  v52(v4, v53, v58);
  v43 = v55;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0, 0, v7, v4, "Cancel action displayed in action sheet when trying to dismiss an event edit view where data has been changed.", 110, 2);
  v44 = v43;
  v60(v19, v43, v11);
  String.init(localized:)(v19);
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  v48 = objc_msgSend(v39, "actionWithTitle:style:handler:", v47, 1, 0);

  objc_msgSend(v41, "addAction:", v48);
  v49 = *(void (**)(char *, uint64_t))(v56 + 8);
  v49(v44, v11);
  v49(v59, v11);
  v49(v57, v11);
  return v41;
}

uint64_t sub_10011D3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _BYTE v18[24];

  v3 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = a2 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v10, v18, 0, 0);
  sub_10011FC44(v10, (uint64_t)v5, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return sub_10001CCFC((uint64_t)v5, (uint64_t *)&unk_1001F5970);
  v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v13 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v12);
  v15 = v14;
  ObjectType = swift_getObjectType(v13);
  dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.cancelEditing(canShowUserConfirmation:)(0, ObjectType, v15);
  swift_unknownObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10011D500(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10011D5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _BYTE v17[24];

  v1 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v8, v17, 0, 0);
  sub_10011FC44(v8, (uint64_t)v3, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10001CCFC((uint64_t)v3, (uint64_t *)&unk_1001F5970);
    v9 = 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v11 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v10);
    v13 = v12;
    ObjectType = swift_getObjectType(v11);
    v9 = dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.hasUncommittedChanges.getter(ObjectType, v13);
    swift_unknownObjectRelease(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9 & 1;
}

uint64_t sub_10011D778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _BYTE v17[24];

  v1 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v8, v17, 0, 0);
  sub_10011FC44(v8, (uint64_t)v7, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    sub_10001CCFC((uint64_t)v7, (uint64_t *)&unk_1001F5970);
    v9 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    v10 = sub_10001CCFC((uint64_t)v7, (uint64_t *)&unk_1001F5970);
    v11 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v10);
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    ObjectType = swift_getObjectType(v11);
    v9 = dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.requiresUserConfirmationForCommittingEditing.getter(ObjectType, v13);
    swift_unknownObjectRelease(v11);
  }
  return v9 & 1;
}

uint64_t sub_10011D910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(uint64_t);
  char v35[24];

  v34 = (void (*)(uint64_t))a1;
  v4 = sub_10000EDD8(&qword_1001F5D60);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - v15;
  v17 = v2 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v17, v35, 0, 0);
  sub_10011FC44(v17, (uint64_t)v9, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    result = sub_10001CCFC((uint64_t)v9, (uint64_t *)&unk_1001F5970);
    v19 = v34;
    if (v34)
    {
      v20 = swift_retain(a2);
      v19(v20);
      return sub_10011FA88((uint64_t)v19, a2);
    }
  }
  else
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v33(v16, v9, v10);
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    type metadata accessor for MainActor(0);
    v32 = v6;
    v22 = (uint64_t)v34;
    v23 = sub_10011FA98((uint64_t)v34, a2);
    v24 = static MainActor.shared.getter(v23);
    v25 = *(unsigned __int8 *)(v11 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = a2;
    v28 = (v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_1001B6000, v28 + 16, v25 | 7);
    *(_QWORD *)(v29 + 16) = v24;
    *(_QWORD *)(v29 + 24) = &protocol witness table for MainActor;
    v33((char *)(v29 + v26), v14, v10);
    v30 = (uint64_t *)(v29 + v28);
    *v30 = v22;
    v30[1] = v27;
    v31 = sub_1001236B0((uint64_t)v32, (uint64_t)&unk_1001F5988, v29);
    swift_release(v31);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return result;
}

uint64_t sub_10011DBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for RemindersInCalendarEditingResult(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[7] = swift_task_alloc(v9);
  v6[8] = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  v6[9] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v6[10] = v11;
  v6[11] = v12;
  return swift_task_switch(sub_10011DC48, v11, v12);
}

void sub_10011DC48(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;

  v2 = (void *)RemindersInCalendarUtilities.ReminderCreationModule.viewController.getter(a1);
  v3 = objc_msgSend(v2, "view");

  if (v3)
  {
    objc_msgSend(v3, "endEditing:", 1);

    v5 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v4);
    v7 = v6;
    v1[12] = v5;
    ObjectType = swift_getObjectType(v5);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.commitEditing(allowingUserConfirmation:)[1]);
    v1[13] = v9;
    *v9 = v1;
    v9[1] = sub_10011DD10;
    dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.commitEditing(allowingUserConfirmation:)(v1[8], 1, ObjectType, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10011DD10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_10011DD64, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_10011DD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for RemindersInCalendarEditingResult.performed(_:), v4);
  LOBYTE(v1) = static RemindersInCalendarEditingResult.== infix(_:_:)(v1, v2);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v2, v4);
  if ((v1 & 1) != 0 && v5)
  {
    v7 = *(void (**)(uint64_t))(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = swift_retain(v8);
    v7(v9);
    sub_10011FA88((uint64_t)v7, v8);
  }
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  v6(v11, *(_QWORD *)(v0 + 40));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011DEE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _BYTE v17[24];

  v1 = v0;
  v2 = sub_10000EDD8((uint64_t *)&unk_1001F5970);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule, v17, 0, 0);
  sub_10011FC44(v9, (uint64_t)v4, (uint64_t *)&unk_1001F5970);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_10001CCFC((uint64_t)v4, (uint64_t *)&unk_1001F5970);
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v12 = RemindersInCalendarUtilities.ReminderCreationModule.moduleInterface.getter(v11);
  v14 = v13;
  ObjectType = swift_getObjectType(v12);
  dispatch thunk of RemindersInCalendarReminderCreationModuleInterface.cancelEditing(canShowUserConfirmation:)((*(_BYTE *)(v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_ignoreUnsavedChanges) & 1) == 0, ObjectType, v14);
  swift_unknownObjectRelease(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10011E090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(async function pointer to static RemindersInCalendarUtilities.checkAndRequestAuthorizationIfNeeded(presentingWith:)[1]);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_10011FF54;
  return static RemindersInCalendarUtilities.checkAndRequestAuthorizationIfNeeded(presentingWith:)(a4);
}

void sub_10011E124(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *);
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  os_log_type_t v45;
  uint8_t *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  NSObject *v51;
  unsigned int v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  void *v72;
  id v73;
  uint64_t v74;
  NSObject *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v78 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v77 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  __chkstk_darwin(v14);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = a1;
  v17 = objc_msgSend(a1, "dueDateComponents");
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v10);
    goto LABEL_11;
  }
  v18 = v17;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v17);

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
LABEL_11:
    sub_10001CCFC((uint64_t)v16, (uint64_t *)&unk_1001F5D80);
    if (qword_1001F5870 != -1)
      swift_once(&qword_1001F5870, sub_100128B8C);
    sub_10000EBE8(v4, (uint64_t)qword_1001F6CC0);
    v21 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v45 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v45))
      goto LABEL_16;
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    v47 = "Created reminder has no due date and won't be visible in Calendar";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v21, v45, v47, v46, 2u);
    swift_slowDealloc(v46, -1, -1);
LABEL_16:

    return;
  }
  sub_10001CCFC((uint64_t)v16, (uint64_t *)&unk_1001F5D80);
  v19 = *(void **)(v2 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_model);
  v20 = objc_msgSend(v19, "eventStore");
  if (!v20)
  {
    if (qword_1001F5870 != -1)
      swift_once(&qword_1001F5870, sub_100128B8C);
    sub_10000EBE8(v4, (uint64_t)qword_1001F6CC0);
    v21 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v45 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v21, v45))
      goto LABEL_16;
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    v47 = "No event store";
    goto LABEL_15;
  }
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(EKEvent), "eventWithEventStore:", v20);
  v23 = objc_msgSend(v19, "reminderCalendar");
  if (!v23)
  {
    if (qword_1001F5870 != -1)
      swift_once(&qword_1001F5870, sub_100128B8C);
    sub_10000EBE8(v4, (uint64_t)qword_1001F6CC0);
    v48 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v49 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v48, v49))
    {

      goto LABEL_16;
    }
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "No calendar", v50, 2u);
    swift_slowDealloc(v50, -1, -1);

    goto LABEL_34;
  }
  v75 = v23;
  v76 = v19;
  objc_msgSend(v22, "setCalendar:", v23);
  v24 = v22;
  v25 = objc_msgSend(v79, "objectID");
  v26 = objc_msgSend(v25, "urlRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);
  URL.absoluteString.getter();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v24, "setUniqueID:", v29);

  v30 = objc_msgSend(objc_allocWithZone((Class)AddItemState), "initWithEvent:", v24);
  objc_msgSend(v30, "setExplicitTime:", 1);
  sub_10011BF40(v30);
  if (qword_1001F5870 != -1)
    swift_once(&qword_1001F5870, sub_100128B8C);
  v31 = sub_10000EBE8(v4, (uint64_t)qword_1001F6CC0);
  v32 = v77;
  v33 = v78;
  v34 = *(void (**)(char *))(v78 + 16);
  v74 = v31;
  v34(v77);
  v35 = v24;
  v36 = ((uint64_t (*)(void))Logger.logObject.getter)();
  v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v73 = v30;
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = (void *)swift_slowAlloc(32, -1);
    v82 = v72;
    *(_DWORD *)v38 = 136315138;
    v39 = objc_msgSend(v35, "uniqueID");
    if (!v39)
    {

      __break(1u);
      goto LABEL_36;
    }
    v40 = v39;
    v71 = v38 + 4;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v80 = sub_10011EE28(v41, v43, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v71, v38 + 12);

    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Saving temporary event for reminder %s", v38, 0xCu);
    v44 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v32, v4);
    v30 = v73;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v4);
  }
  v51 = v75;
  v82 = 0;
  v52 = -[NSObject saveEvent:span:commit:error:](v21, "saveEvent:span:commit:error:", v35, 0, 0, &v82);
  v53 = v82;
  v54 = v76;
  if (!v52)
  {
    v61 = v82;
    v62 = _convertNSErrorToError(_:)(v53);

    swift_willThrow();
    swift_errorRetain(v62);
    v63 = swift_errorRetain(v62);
    v48 = Logger.logObject.getter(v63);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = (_QWORD *)swift_slowAlloc(8, -1);
      v79 = v35;
      *(_DWORD *)v65 = 138412290;
      swift_errorRetain(v62);
      v67 = (void *)_swift_stdlib_bridgeErrorToNSError(v62);
      v73 = v30;
      v68 = v67;
      v82 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v65 + 4, v65 + 12);
      *v66 = v68;
      swift_errorRelease(v62);
      swift_errorRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v48, v64, "Error saving event for new reminder %@", v65, 0xCu);
      v69 = sub_10000EDD8(&qword_1001F5960);
      swift_arrayDestroy(v66, 1, v69);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      swift_errorRelease(v62);
      v21 = v51;
      goto LABEL_16;
    }

    swift_errorRelease(v62);
    swift_errorRelease(v62);
    swift_errorRelease(v62);
LABEL_34:
    v21 = v48;
    goto LABEL_16;
  }
  v55 = v82;
  v56 = objc_msgSend(v54, "pendingReminderTracker");
  if (!v56)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v57 = v56;
  v58 = objc_msgSend(v35, "sequenceNumber");
  objc_msgSend(v57, "setOptimisticReminder:forEvent:sequenceNumber:", v79, v35, v58);

  v59 = objc_msgSend(v54, "pendingReminderTracker");
  if (v59)
  {
    v60 = v59;
    objc_msgSend(v59, "addPendingEvent:sequenceNumber:", v35, objc_msgSend(v35, "sequenceNumber"));

    goto LABEL_16;
  }
LABEL_37:
  __break(1u);
}

id sub_10011EB04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddReminderViewControllerManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_10011EBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *result;
  void *v4;

  result = (void *)swift_unknownObjectWeakLoadStrong(v2+ OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_addItemViewControllerManagerDelegate, a2);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, "addItemViewControllerManager:didCompleteWithAction:", v2, 0);
    return (void *)swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_10011EC08(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10011F9D8(a3);
}

uint64_t variable initialization expression of TipsManager.tipPopoverController()
{
  return 0;
}

uint64_t variable initialization expression of TipsManager.$__lazy_storage_$_jumpToTodayTip()
{
  return 1;
}

uint64_t sub_10011EC20()
{
  return type metadata accessor for AddReminderViewControllerManager(0);
}

uint64_t type metadata accessor for AddReminderViewControllerManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1001F5938;
  if (!qword_1001F5938)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddReminderViewControllerManager);
  return result;
}

void sub_10011EC64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10011ED2C(319, &qword_1001F5948, (uint64_t (*)(uint64_t))&type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10011ED2C(319, (unint64_t *)&unk_1001F5950, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = "\b";
      v6[5] = &unk_1001A1B40;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

void sub_10011ED2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10011ED78(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10011EDDC;
  return v6(a1);
}

uint64_t sub_10011EDDC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10011EE28(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10011EEF8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10011FA48((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10011FA48((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10011FC24(v12);
  return v7;
}

uint64_t sub_10011EEF8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10011F0B0(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10011F0B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10011F144(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10011F31C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10011F31C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10011F144(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10011F2B8(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10011F2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10000EDD8(&qword_1001F5968);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10011F31C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDD8(&qword_1001F5968);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_10011F468(void *a1)
{
  _BYTE *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  objc_super v12;

  v3 = &v1[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_creationModule];
  v4 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_initialDateComponents];
  v6 = type metadata accessor for DateComponents(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_addItemViewControllerManagerDelegate], 0);
  v1[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_ignoreUnsavedChanges] = 0;
  v7 = v1;
  v8 = objc_msgSend(a1, "undoManager");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "systemUndoManager");

    if (v10)
    {
      *(_QWORD *)&v7[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_undoManager] = v10;
      *(_QWORD *)&v7[OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_model] = a1;
      v11 = a1;

      v12.receiver = v7;
      v12.super_class = (Class)type metadata accessor for AddReminderViewControllerManager(0);
      objc_msgSendSuper2(&v12, "init");
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void *sub_10011F5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10000EDD8(&qword_1001F59A8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10011FD08(&qword_1001F59B0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10011FD08(&qword_1001F59B8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10011F808(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  v2 = sub_10000EDD8(&qword_1001F5D60);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1001B6078, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = a1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = a1;
  if (v9 == 1)
  {
    sub_10001CCFC((uint64_t)v4, &qword_1001F5D60);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_1001B60A0, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_1001F59F0;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1001F5A00, v19);
  return swift_release(v21);
}

uint64_t sub_10011F9D8(void *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v4;
  char v5;

  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC9MobileCal32AddReminderViewControllerManager_addItemViewControllerManagerDelegate);
  if (result)
  {
    v4 = (void *)result;
    sub_10011E124(a1);
    objc_msgSend(v4, "addItemViewControllerManager:didCompleteWithAction:", v1, v5 & 1);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_10011FA48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10011FA88(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10011FA98(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10011FAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_10011FB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for RemindersInCalendarUtilities.ReminderCreationModule(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1001F5984);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10011FF54;
  return sub_10011DBA0(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10011FBE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011FC04(uint64_t a1)
{
  uint64_t v1;

  return sub_10011D3A8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10011FC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011FC1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011FC24(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10011FC44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000EDD8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011FCD0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10011FD08(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011FD48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000EDD8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10011FD8C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011FDB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001F59EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10011FE28;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static RemindersInCalendarUtilities.checkAndRequestAuthorizationIfNeeded(presentingWith:)[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10011FF54;
  return static RemindersInCalendarUtilities.checkAndRequestAuthorizationIfNeeded(presentingWith:)(v2);
}

uint64_t sub_10011FE28()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10011FE70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011FE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001F59FC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10011FE28;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001F59F8 + dword_1001F59F8))(a1, v4);
}

uint64_t sub_10011FF04()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011FF28()
{
  uint64_t v0;

  return sub_1001262C0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10011FF30(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

BOOL sub_10011FF58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10011FF70()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10011FFB4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10011FFDC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Application.open(view:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for CalendarAppView(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001200C0, v6, v7);
}

void sub_1001200C0()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  int v12;
  char **v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;

  v1 = (void *)v0[3];
  swift_release(v0[7]);
  v2 = objc_msgSend(v1, "allSceneManagers");
  v3 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_30:
    v18 = v0[6];
    swift_bridgeObjectRelease(v4);
    v19 = sub_1001203CC();
    swift_allocError(&type metadata for OpenViewError, v19, 0, 0);
    *v20 = 0;
    swift_willThrow();
    swift_task_dealloc(v18);
    v15 = (void (*)(void))v0[1];
LABEL_31:
    v15();
    return;
  }
  if (v4 < 0)
    v16 = v4;
  else
    v16 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v17 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v4);
  if (!v17)
    goto LABEL_30;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;
    v8 = v0[5];
    v7 = v0[6];
    v9 = v0[4];
    v10 = v0[2];
    swift_bridgeObjectRelease(v4);
    v11 = objc_msgSend(v6, "rootViewController");
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v7, v9);
    if (v12 == enum case for CalendarAppView.day(_:))
    {
      v13 = &selRef_showDayView;
    }
    else if (v12 == enum case for CalendarAppView.week(_:))
    {
      v13 = &selRef_showWeekView;
    }
    else if (v12 == enum case for CalendarAppView.month(_:))
    {
      v13 = &selRef_showMonthView;
    }
    else if (v12 == enum case for CalendarAppView.splitMonth(_:))
    {
      v13 = &selRef_showSplitMonthView;
    }
    else if (v12 == enum case for CalendarAppView.year(_:))
    {
      v13 = &selRef_showYearView;
    }
    else if (v12 == enum case for CalendarAppView.list(_:))
    {
      v13 = &selRef_showListView;
    }
    else if (v12 == enum case for CalendarAppView.search(_:))
    {
      v13 = &selRef_showSearchView;
    }
    else if (v12 == enum case for CalendarAppView.calendars(_:))
    {
      v13 = &selRef_showCalendarsView;
    }
    else
    {
      if (v12 != enum case for CalendarAppView.inbox(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(v0[4], v0[4]);
        return;
      }
      v13 = &selRef_showInboxView;
    }
    v14 = v0[6];
    objc_msgSend(v11, *v13);

    swift_task_dealloc(v14);
    v15 = (void (*)(void))v0[1];
    goto LABEL_31;
  }
  __break(1u);
}

unint64_t sub_1001203CC()
{
  unint64_t result;

  result = qword_1001F5A78;
  if (!qword_1001F5A78)
  {
    result = swift_getWitnessTable(&unk_1001A1C94, &type metadata for OpenViewError);
    atomic_store(result, (unint64_t *)&qword_1001F5A78);
  }
  return result;
}

uint64_t Application.open(date:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10000EDD8(&qword_1001F5998) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[4] = swift_task_alloc(v3);
  v2[5] = swift_task_alloc(v3);
  v4 = sub_10000EDD8(&qword_1001F5A88);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000EDD8(&qword_1001F59C0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v2[8] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001204F8, v7, v8);
}

void sub_1001204F8()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void (*v28)(void);
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (void *)v0[3];
  swift_release(v0[8]);
  v2 = objc_msgSend(v1, "allSceneManagers");
  v3 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v4);
    v33 = sub_1001203CC();
    swift_allocError(&type metadata for OpenViewError, v33, 0, 0);
    *v34 = 0;
    swift_willThrow();
    goto LABEL_18;
  }
  if (v4 < 0)
    v31 = v4;
  else
    v31 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v4);
  if (!v32)
    goto LABEL_17;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v5 = *(id *)(v4 + 32);
  }
  v6 = v5;
  v7 = v0[7];
  v8 = v0[2];
  swift_bridgeObjectRelease(v4);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  v11 = objc_msgSend(v6, "model");
  v12 = objc_msgSend(v11, "calendar");

  v13 = v0[4];
  if (v12)
  {
    static Calendar._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = type metadata accessor for Calendar(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    v14 = type metadata accessor for Calendar(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  }
  v15 = v0[5];
  sub_100120894(v0[4], v15);
  type metadata accessor for Calendar(0);
  v16 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v14) != 1)
  {
    v18 = v0[6];
    v17 = v0[7];
    v19 = v0[5];
    sub_10011FCD0(0, &qword_1001F5A90, EKCalendarDate_ptr);
    Calendar.timeZone.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v14);
    v20 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
    v21 = sub_1001208DC(v17, v18);
    if (v21)
    {
      v22 = v21;
      v24 = v0[6];
      v23 = v0[7];
      v26 = v0[4];
      v25 = v0[5];
      v27 = objc_msgSend(v6, "rootNavigationController");
      objc_msgSend(v27, "showDate:animated:", v22, 1);

      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      v28 = (void (*)(void))v0[1];
LABEL_19:
      v28();
      return;
    }
    v29 = sub_1001203CC();
    swift_allocError(&type metadata for OpenViewError, v29, 0, 0);
    *v30 = 1;
    swift_willThrow();

LABEL_18:
    v35 = v0[6];
    v37 = v0[4];
    v36 = v0[5];
    swift_task_dealloc(v0[7]);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    v28 = (void (*)(void))v0[1];
    goto LABEL_19;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_100120894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDD8(&qword_1001F5998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1001208DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  Class v11;
  id v12;

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  }
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9) != 1)
  {
    v11 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithDate:timeZone:", isa, v11);

  return v12;
}

uint64_t Application.open(event:withIdiom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for OpenIdiom(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v3[8] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100120A6C, v7, v8);
}

void sub_100120A6C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;

  v1 = *(void **)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 64));
  v2 = objc_msgSend(v1, "eventStore");
  if (!v2)
  {
    v19 = type metadata accessor for CalendarLinkError(0);
    v20 = sub_100120DBC();
    swift_allocError(v19, v20, 0, 0);
    v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for CalendarLinkError.failedToCreateEventStore(_:), v19);
    swift_willThrow(v22);
LABEL_22:
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    v29 = *(void (**)(void))(v0 + 8);
LABEL_23:
    v29();
    return;
  }
  v3 = v2;
  EventEntity.id.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v3, "eventWithIdentifier:", v6);

  if (!v7)
  {
    v23 = type metadata accessor for CalendarLinkError(0);
    v24 = sub_100120DBC();
    swift_allocError(v23, v24, 0, 0);
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for CalendarLinkError.eventNotFound(_:), v23);
    swift_willThrow(v26);
LABEL_21:

    goto LABEL_22;
  }
  v8 = objc_msgSend(*(id *)(v0 + 32), "allSceneManagers");
  v9 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if (!((unint64_t)v10 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    goto LABEL_20;
  }
  if (v10 < 0)
    v30 = v10;
  else
    v30 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v10);
  if (!v31)
  {
LABEL_20:
    swift_bridgeObjectRelease(v10);
    v32 = sub_1001203CC();
    v33 = swift_allocError(&type metadata for OpenViewError, v32, 0, 0);
    *v34 = 0;
    swift_willThrow(v33);

    goto LABEL_21;
  }
LABEL_5:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v10 + 32);
LABEL_8:
    v12 = v11;
    v14 = *(_QWORD *)(v0 + 48);
    v13 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 24);
    swift_bridgeObjectRelease(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
    if (v17 == enum case for OpenIdiom.viewer(_:))
    {
      v18 = 1;
    }
    else
    {
      if (v17 != enum case for OpenIdiom.editor(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 40));
        return;
      }
      v18 = 3;
    }
    v27 = *(_QWORD *)(v0 + 56);
    v28 = objc_msgSend(v12, "rootNavigationController");
    objc_msgSend(v28, "showEvent:animated:showMode:context:", v7, 1, v18, 0);

    swift_task_dealloc(v27);
    v29 = *(void (**)(void))(v0 + 8);
    goto LABEL_23;
  }
  __break(1u);
}

unint64_t sub_100120DBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5AA0;
  if (!qword_1001F5AA0)
  {
    v1 = type metadata accessor for CalendarLinkError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CalendarLinkError, v1);
    atomic_store(result, (unint64_t *)&qword_1001F5AA0);
  }
  return result;
}

uint64_t Application.open(calendar:enableDoneInitially:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 32) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_100120E74, v5, v6);
}

void sub_100120E74()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v1 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = objc_msgSend(v1, "allSceneManagers");
  v3 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v4);
    v13 = sub_1001203CC();
    v14 = swift_allocError(&type metadata for OpenViewError, v13, 0, 0);
    *v15 = 0;
    swift_willThrow(v14);
    v10 = *(void (**)(void))(v0 + 8);
    goto LABEL_12;
  }
  if (v4 < 0)
    v11 = v4;
  else
    v11 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v12 = _CocoaArrayWrapper.endIndex.getter(v11);
  swift_bridgeObjectRelease(v4);
  if (!v12)
    goto LABEL_11;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;
    v7 = *(unsigned __int8 *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(v4);
    v9 = objc_msgSend(v6, "rootViewController");
    objc_msgSend(v9, "showInspectorForCalendar:enableDoneInitially:", v8, v7);

    v10 = *(void (**)(void))(v0 + 8);
LABEL_12:
    v10();
    return;
  }
  __break(1u);
}

uint64_t Application.highlight(event:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_100121064, v4, v5);
}

void sub_100121064()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v1 = (void *)v0[3];
  swift_release(v0[4]);
  v2 = objc_msgSend(v1, "allSceneManagers");
  v3 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v4);
    v12 = sub_1001203CC();
    v13 = swift_allocError(&type metadata for OpenViewError, v12, 0, 0);
    *v14 = 0;
    swift_willThrow(v13);
    v9 = (void (*)(void))v0[1];
    goto LABEL_12;
  }
  if (v4 < 0)
    v10 = v4;
  else
    v10 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v4);
  if (!v11)
    goto LABEL_11;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;
    v7 = v0[2];
    swift_bridgeObjectRelease(v4);
    v8 = objc_msgSend(v6, "rootViewController");
    objc_msgSend(v8, "showEventAndCloseSidebarIfNeeded:animated:showMode:", v7, 1, 0);

    v9 = (void (*)(void))v0[1];
LABEL_12:
    v9();
    return;
  }
  __break(1u);
}

void sub_1001211E0()
{
  qword_1001F6C98 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t Application.composeEmail(event:recipients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  v3[27] = swift_getObjectType(v2);
  v4 = type metadata accessor for MainActor(0);
  v3[28] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[29] = v5;
  v3[30] = v6;
  return swift_task_switch(sub_100121270, v5, v6);
}

void sub_100121270()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  Class v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = (void *)objc_opt_self(EKUIEmailCompositionManager);
  sub_10011FCD0(0, qword_1001F5AC0, EKParticipant_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  LODWORD(v1) = objc_msgSend(v2, "canShowViewControllerForEvent:withParticipantRecipients:", v1, isa);

  if (!(_DWORD)v1)
  {
    swift_release(*(_QWORD *)(v0 + 224));
    v20 = type metadata accessor for CalendarLinkError(0);
    v21 = sub_100120DBC();
    swift_allocError(v20, v21, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for CalendarLinkError.cannotSendMailDueToAccountManagement(_:), v20);
    swift_willThrow(v23);
LABEL_16:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v4 = objc_msgSend(*(id *)(v0 + 208), "allSceneManagers");
  v5 = sub_10011FCD0(0, (unint64_t *)&qword_1001F5B20, off_1001B13A0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_15;
  }
  if (v6 < 0)
    v28 = v6;
  else
    v28 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v29 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v6);
  if (!v29)
  {
LABEL_15:
    v30 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRelease(v6);
    v31 = sub_1001203CC();
    v32 = swift_allocError(&type metadata for OpenViewError, v31, 0, 0);
    *v33 = 0;
    swift_willThrow(v32);
    swift_release(v30);
    goto LABEL_16;
  }
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v6 + 32);
LABEL_7:
    v8 = v7;
    *(_QWORD *)(v0 + 248) = v7;
    v10 = *(void **)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease(v6);
    v11 = objc_allocWithZone((Class)EKUIEmailCompositionManager);
    v12 = v10;
    swift_bridgeObjectRetain(v9);
    v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v14 = objc_msgSend(v11, "initWithEvent:participantRecipients:subjectPrefix:bodyPrefix:", v12, v13, 0, 0);
    *(_QWORD *)(v0 + 256) = v14;

    v15 = objc_msgSend(v14, "viewController");
    *(_QWORD *)(v0 + 264) = v15;
    if (v15)
    {
      v16 = v0 + 16;
      v17 = objc_msgSend(v8, "rootViewController");
      *(_QWORD *)(v0 + 272) = v17;
      *(_QWORD *)(v0 + 56) = v0 + 288;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_10012160C;
      v18 = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
      v19 = (_QWORD *)(v0 + 144);
      v19[1] = 0x40000000;
      v19[2] = sub_1001218D4;
      v19[3] = &unk_1001B6100;
      v19[4] = v18;
      objc_msgSend(v17, "dismissPresentedViewControllerAnimated:completion:", 0, v19);
      swift_continuation_await(v16);
      return;
    }
    swift_release(*(_QWORD *)(v0 + 224));
    v24 = type metadata accessor for CalendarLinkError(0);
    v25 = sub_100120DBC();
    swift_allocError(v24, v25, 0, 0);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for CalendarLinkError.cannotSendMailForUnknownReason(_:), v24);
    swift_willThrow(v27);

    goto LABEL_16;
  }
  __break(1u);
}

uint64_t sub_10012160C()
{
  uint64_t v0;

  return swift_task_switch(sub_100121650, *(_QWORD *)(*(_QWORD *)v0 + 232), *(_QWORD *)(*(_QWORD *)v0 + 240));
}

uint64_t sub_100121650()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v12;

  if (qword_1001F5860 != -1)
    swift_once(&qword_1001F5860, sub_1001211E0);
  v2 = (void *)v0[32];
  v1 = v0[33];
  v3 = (void *)v0[31];
  v4 = v0[27];
  swift_beginAccess(&qword_1001F6C98, v0 + 18, 33, 0);
  v5 = v2;
  sub_100121CC4((Swift::Int *)&v12, v5);
  swift_endAccess(v0 + 18);

  v6 = swift_allocObject(&unk_1001B6128, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, v5);
  v7 = swift_allocObject(&unk_1001B6150, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v4;
  v0[22] = sub_100121FA8;
  v0[23] = v7;
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 1107296256;
  v0[20] = sub_1001219F0;
  v0[21] = &unk_1001B6168;
  v8 = _Block_copy(v0 + 18);
  swift_release(v0[23]);
  objc_msgSend(v5, "setMessageSendingComplete:", v8);
  _Block_release(v8);
  v9 = objc_msgSend(v3, "rootViewController");
  v0[35] = v9;
  v0[10] = v0;
  v0[11] = sub_100121834;
  v10 = swift_continuation_init(v0 + 10, 0);
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100121A2C;
  v0[21] = &unk_1001B6190;
  v0[22] = v10;
  objc_msgSend(v9, "presentViewController:animated:completion:", v1, 1, v0 + 18);
  return swift_continuation_await(v0 + 10);
}

uint64_t sub_100121834()
{
  uint64_t v0;

  return swift_task_switch(sub_100121878, *(_QWORD *)(*(_QWORD *)v0 + 232), *(_QWORD *)(*(_QWORD *)v0 + 240));
}

uint64_t sub_100121878()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 280);
  v2 = *(void **)(v0 + 264);
  v3 = *(void **)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);

  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001218D4(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

void sub_1001218E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(Strong, "viewController");
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "presentingViewController");

      if (v7)
      {
        objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, 0);

      }
    }
    if (qword_1001F5860 != -1)
      swift_once(&qword_1001F5860, sub_1001211E0);
    swift_beginAccess(&qword_1001F6C98, v9, 33, 0);
    v8 = (void *)sub_100122C44(v4);
    swift_endAccess(v9);

  }
}

uint64_t sub_1001219F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100121A2C(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100121A34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001F5A74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10011FF54;
  return Application.open(view:)(a1);
}

uint64_t sub_100121A84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001F5A84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10011FF54;
  return Application.open(date:)(a1);
}

uint64_t sub_100121AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001F5A9C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10011FF54;
  return Application.open(event:withIdiom:)(a1, a2);
}

uint64_t sub_100121B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(async function pointer to CalendarViewOpener.list(description:events:)[1]);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_10011FF54;
  return CalendarViewOpener.list(description:events:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100121BB4(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001F5AAC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10011FF54;
  return Application.open(calendar:enableDoneInitially:)(a1, a2);
}

uint64_t sub_100121C14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001F5AB4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10011FF54;
  return Application.highlight(event:)(a1);
}

uint64_t sub_100121C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001F5ABC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10011FE28;
  return Application.composeEmail(event:recipients:)(a1, a2);
}

uint64_t sub_100121CC4(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100122190(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_100122384(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100122620((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1001226A0((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100121F60()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100121F84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100121FA8(uint64_t a1)
{
  uint64_t v1;

  sub_1001218E8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100121FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100121FC0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_BYTE *initializeBufferWithCopyOfBuffer for OpenViewError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OpenViewError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenViewError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001220B4 + 4 * byte_1001A1BAD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001220E8 + 4 * byte_1001A1BA8[v4]))();
}

uint64_t sub_1001220E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001220F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001220F8);
  return result;
}

uint64_t sub_100122104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012210CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100122110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100122118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100122124(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10012212C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OpenViewError()
{
  return &type metadata for OpenViewError;
}

unint64_t sub_10012214C()
{
  unint64_t result;

  result = qword_1001F5B00;
  if (!qword_1001F5B00)
  {
    result = swift_getWitnessTable(&unk_1001A1C6C, &type metadata for OpenViewError);
    atomic_store(result, (unint64_t *)&qword_1001F5B00);
  }
  return result;
}

Swift::Int sub_100122190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_10000EDD8((uint64_t *)&unk_1001F5B10);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      v7 = v6;
      v8 = sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_100122384(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()();
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_100122384(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000EDD8((uint64_t *)&unk_1001F5B10);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_100122620(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1001226A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100122384(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100122824();
      goto LABEL_14;
    }
    sub_1001229CC(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

id sub_100122824()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000EDD8((uint64_t *)&unk_1001F5B10);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1001229CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000EDD8((uint64_t *)&unk_1001F5B10);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100122C44(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_100122E18(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100122824();
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_100122FB0(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_100122E18(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_100122190(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_10011FCD0(0, &qword_1001F5B08, EKUIEmailCompositionManager_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_100122FB0(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_100122FB0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

EKEventStore_optional __swiftcall Application.eventStore()()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  id v3;
  unint64_t v4;
  uint64_t v5;
  objc_class *v6;
  Swift::Bool v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  EKEventStore_optional result;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = objc_msgSend(v1, "allSceneManagers");
  v4 = sub_1001232A4();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v11 = v5;
    else
      v11 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    v6 = (objc_class *)swift_bridgeObjectRelease(v5);
    if (v12)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v5);
    v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(ObjectType), "createNewCalendarModel");
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_15;
    }
    v8 = *(id *)(v5 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  v10 = objc_msgSend(v9, "model");

LABEL_12:
  v13 = (objc_class *)objc_msgSend(v10, "eventStore");

  v6 = v13;
LABEL_15:
  result.value.super.isa = v6;
  result.is_nil = v7;
  return result;
}

unint64_t sub_1001232A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5B20;
  if (!qword_1001F5B20)
  {
    v1 = objc_opt_self(CalendarSceneManager);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001F5B20);
  }
  return result;
}

Swift::Void __swiftcall Application.registerAppIntentsDependencies()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = v0;
  type metadata accessor for AppDependencyManager(0);
  v2 = ((uint64_t (*)(void))static AppDependencyManager.shared.getter)();
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v3 = swift_allocObject(&unk_1001B62E8, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v4 = v1;
  v5 = sub_10000EDD8(&qword_1001F5B30);
  AppDependencyManager.add<A>(key:dependency:)(&v17, sub_10012355C, v3, v5);
  swift_release(v2);
  swift_release(v3);
  v6 = sub_100123564((uint64_t)&v17);
  v7 = static AppDependencyManager.shared.getter(v6);
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v8 = swift_allocObject(&unk_1001B6310, 24, 7);
  *(_QWORD *)(v8 + 16) = v4;
  v9 = v4;
  v10 = sub_10000EDD8(&qword_1001F5B40);
  AppDependencyManager.add<A>(key:dependency:)(&v17, sub_1001235A4, v8, v10);
  swift_release(v7);
  swift_release(v8);
  v11 = sub_100123564((uint64_t)&v17);
  v12 = static AppDependencyManager.shared.getter(v11);
  v13 = sub_10011FCD0(0, &qword_1001F5B48, CalLinkREMStoreWrapper_ptr);
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  AppDependencyManager.add<A>(key:dependency:)(&v17, sub_1001235B0, 0, v13);
  swift_release(v12);
  v14 = sub_100123564((uint64_t)&v17);
  v15 = static AppDependencyManager.shared.getter(v14);
  v16 = sub_10011FCD0(0, &qword_1001F5B50, CNContactStore_ptr);
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  AppDependencyManager.add<A>(key:dependency:)(&v17, sub_1001235E8, 0, v16);
  swift_release(v15);
  sub_100123564((uint64_t)&v17);
}

id sub_1001234E4@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = sub_10011FCD0(0, &qword_1001F5B58, &off_1001B1250);
  a2[4] = sub_100123654();
  *a2 = a1;
  return a1;
}

uint64_t sub_100123538()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10012355C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001234E4(*(void **)(v1 + 16), a1);
}

uint64_t sub_100123564(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDD8(&qword_1001F5B38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1001235A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

id sub_1001235B0@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)CalLinkREMStoreWrapper), "init");
  *a1 = result;
  return result;
}

id sub_1001235E8@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  *a1 = result;
  return result;
}

unint64_t sub_100123654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5B60;
  if (!qword_1001F5B60)
  {
    v1 = sub_10011FCD0(255, &qword_1001F5B58, &off_1001B1250);
    result = swift_getWitnessTable(&protocol conformance descriptor for Application, v1);
    atomic_store(result, (unint64_t *)&qword_1001F5B60);
  }
  return result;
}

uint64_t sub_1001236B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10001CCFC(a1, &qword_1001F5D60);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1001B64A0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001F5A00, v16);
}

id TipsManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

uint64_t *TipsManager.shared.unsafeMutableAddressor()
{
  if (qword_1001F5868 != -1)
    swift_once(&qword_1001F5868, sub_1000033B0);
  return &static TipsManager.shared;
}

id static TipsManager.shared.getter()
{
  if (qword_1001F5868 != -1)
    swift_once(&qword_1001F5868, sub_1000033B0);
  return (id)static TipsManager.shared;
}

uint64_t sub_1001238A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[12] = a4;
  v5 = sub_10000EDD8(&qword_1001F5C08);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Tips.Status(0);
  v4[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[15] = v7;
  v4[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDD8(&qword_1001F5C10);
  v4[17] = v8;
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000EDD8(&qword_1001F5C18);
  v4[19] = v9;
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000EDD8(&qword_1001F5C20);
  v4[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[22] = v11;
  v4[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000EDD8(&qword_1001F5C28);
  v4[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[25] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[26] = swift_task_alloc(v14);
  v4[27] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v4[28] = v15;
  v4[29] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v4[30] = v16;
  v4[31] = v17;
  return swift_task_switch(sub_100123A14, v16, v17);
}

uint64_t sub_100123A14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v0[22];
  v1 = v0[23];
  v4 = v0[20];
  v3 = v0[21];
  v5 = v0[17];
  sub_10001CE80();
  v6 = sub_10001CD7C();
  Tip.shouldDisplayUpdates.getter(&type metadata for JumpToTodayTip, v6);
  AsyncMapSequence.base.getter(v3);
  v7 = sub_1000082A4(&qword_1001F5C30, &qword_1001F5C10, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v5, v7);
  v8 = AsyncMapSequence.transform.getter(v3);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v11 = AsyncMapSequence.Iterator.init(_:transform:)(v4, v8, v10, v5, &type metadata for Bool, v7);
  v0[32] = OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController;
  v12 = static MainActor.shared.getter(v11);
  v0[33] = v12;
  if (v12)
  {
    ObjectType = swift_getObjectType();
    v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v0[34] = v14;
  v0[35] = v16;
  return swift_task_switch(sub_100123B68, v14, v16);
}

uint64_t sub_100123B68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[33];
  v0[36] = AsyncMapSequence.Iterator.baseIterator.modify(v0 + 8, v0[24]);
  sub_1000082A4(&qword_1001F5C38, &qword_1001F5C18, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v2 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[37] = v2;
  *v2 = v0;
  v2[1] = sub_100123C10;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[13], v1, &protocol witness table for MainActor);
}

uint64_t sub_100123C10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 296));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 272);
    v4 = *(_QWORD *)(v2 + 280);
    v5 = sub_100123DC4;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v2 + 288))(v2 + 64, 0);
    v3 = *(_QWORD *)(v2 + 272);
    v4 = *(_QWORD *)(v2 + 280);
    v5 = sub_100123C80;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_100123C80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;

  v1 = v0[14];
  v2 = v0[15];
  v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = v0[33];
    sub_10001CCFC(v3, &qword_1001F5C08);
    swift_release(v4);
    return swift_task_switch(sub_100123FF0, v0[30], v0[31]);
  }
  else
  {
    v7 = v0[26];
    v6 = v0[27];
    v8 = v0[24];
    v9 = v0[25];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(v0[16], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    v10 = (int *)AsyncMapSequence.Iterator.transform.getter(v8);
    v0[38] = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v13 = (int *)((char *)v10 + *v10);
    v12 = (_QWORD *)swift_task_alloc(v10[1]);
    v0[39] = v12;
    *v12 = v0;
    v12[1] = sub_100123DD4;
    return ((uint64_t (*)(_QWORD *, _QWORD))v13)(v0 + 40, v0[16]);
  }
}

uint64_t sub_100123DC4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 288))(v0 + 64, 1);
}

uint64_t sub_100123DD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 304);
  v4 = *(_QWORD *)(*v0 + 120);
  v3 = *(_QWORD *)(*v0 + 128);
  v5 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_release(v2);
  *(_BYTE *)(v1 + 321) = *(_BYTE *)(v1 + 320);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_100123E58, *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280));
}

uint64_t sub_100123E58()
{
  _QWORD *v0;

  swift_release(v0[33]);
  return swift_task_switch(sub_100123E90, v0[30], v0[31]);
}

uint64_t sub_100123E90()
{
  _QWORD *v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*((_BYTE *)v0 + 321) & 1) != 0)
  {
    sub_1001241A0();
  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(v0[12] + v0[32]);
    if (Strong)
    {
      v2 = (void *)Strong;
      v3 = v0[12];
      v4 = swift_allocObject(&unk_1001B6388, 24, 7);
      swift_unknownObjectWeakInit(v4 + 16, v3);
      v5 = (_QWORD *)swift_allocObject(&unk_1001B64C8, 40, 7);
      v5[2] = nullsub_3;
      v5[3] = 0;
      v5[4] = v4;
      v0[6] = sub_1001255C8;
      v0[7] = v5;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_1001246E8;
      v0[5] = &unk_1001B64E0;
      v6 = _Block_copy(v0 + 2);
      swift_release(v0[7]);
      objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, v6);
      _Block_release(v6);

    }
  }
  v7 = static MainActor.shared.getter(Strong);
  v0[33] = v7;
  if (v7)
  {
    ObjectType = swift_getObjectType();
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v0[34] = v9;
  v0[35] = v11;
  return swift_task_switch(sub_100123B68, v9, v11);
}

uint64_t sub_100123FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(v2, *(_QWORD *)(v0 + 192));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall TipsManager.updatePresentedController(_:)(UIViewController a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;

  if (byte_1001F5B70 == 1)
  {
    v3 = v1 + OBJC_IVAR____TtC9MobileCal11TipsManager_presentingController;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);

    if (!Strong)
      swift_unknownObjectWeakAssign(v3, a1.super.super.isa);
  }
}

void sub_1001241A0()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double Width;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Class isa;
  id v40;
  _QWORD v41[5];
  CGRect v42;

  v1 = v0 + OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController);

  if (!Strong)
  {
    v3 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9MobileCal11TipsManager_todayBarButtonItem);
    if (v3)
    {
      v40 = (id)v3;
      v4 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9MobileCal11TipsManager_presentingController);
      if (!v4)
      {
LABEL_20:

        return;
      }
      v5 = (void *)v4;
      sub_10001CE80();
      v41[3] = &type metadata for JumpToTodayTip;
      v41[4] = sub_10001CD7C();
      v6 = objc_msgSend(v5, "view");
      if (v6)
      {
        v7 = v6;
        type metadata accessor for TipUIPopoverViewController(0);
        v8 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)(v41, v7, nullsub_3, 0);
        v9 = objc_msgSend(v5, "traitCollection");
        v10 = objc_msgSend(v9, "horizontalSizeClass");

        if (v10 == (id)1)
        {
          v11 = objc_msgSend(v5, "view");
          if (!v11)
          {
LABEL_23:
            __break(1u);
            return;
          }
          v12 = v11;
          objc_msgSend(v11, "bounds");
          v14 = v13;
          v16 = v15;
          v18 = v17;
          v20 = v19;

          v42.origin.x = v14;
          v42.origin.y = v16;
          v42.size.width = v18;
          v42.size.height = v20;
          Width = CGRectGetWidth(v42);
        }
        else
        {
          Width = UILayoutFittingCompressedSize.width;
        }
        v22 = (void *)TipUIPopoverViewController.popoverPresentationController.getter(objc_msgSend(v8, "setPreferredContentSize:", Width, UILayoutFittingCompressedSize.height, v40));
        if (v22)
        {
          v23 = v22;
          objc_msgSend(v22, "setPermittedArrowDirections:", 2);

        }
        v24 = TipUIPopoverViewController.popoverPresentationController.getter(v22);
        if (v24)
        {
          v25 = (void *)v24;
          v26 = objc_msgSend(v5, "view");
          objc_msgSend(v25, "setSourceView:", v26);

        }
        v27 = (void *)TipUIPopoverViewController.popoverPresentationController.getter(v24);
        if (v27)
        {
          v28 = v27;
          objc_msgSend(v27, "setBarButtonItem:", v40);

        }
        v29 = TipUIPopoverViewController.popoverPresentationController.getter(v27);
        if (!v29)
          goto LABEL_19;
        v30 = (void *)v29;
        v31 = objc_msgSend(v5, "view");
        v32 = sub_100124520(v31);

        v33 = objc_msgSend(v5, "view");
        if (v33)
        {
          v34 = v33;
          v35 = objc_msgSend(v33, "subviews");

          v36 = sub_10011FCD0(0, &qword_1001F5BE8, UIView_ptr);
          v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

          v41[0] = v32;
          sub_100124D68(v37);
          v38 = v41[0];
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v38);
          objc_msgSend(v30, "setPassthroughViews:", isa);

LABEL_19:
          objc_msgSend(v5, "presentViewController:animated:completion:", v8, 1, 0);
          swift_unknownObjectWeakAssign(v1, v8);

          goto LABEL_20;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_23;
    }
  }
}

void *sub_100124520(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t ObjectType;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  if (!a1)
    return &_swiftEmptyArrayStorage;
  v1 = a1;
  v2 = objc_msgSend(v1, "superview");
  if (!v2)
  {
LABEL_9:
    v13 = sub_10000EDD8(&qword_1001F5DC0);
    v14 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1001A1CE0;
    *(_QWORD *)(v14 + 32) = v1;
    v17 = v14;
    specialized Array._endMutation()(v14);
    return (void *)v17;
  }
  v3 = v2;
  ObjectType = swift_getObjectType();
  if (ObjectType == sub_10011FCD0(0, &qword_1001F5C00, UIWindow_ptr))
  {

    goto LABEL_9;
  }
  v5 = v3;
  v6 = sub_100124520(v3);

  v7 = v1;
  v8 = swift_bridgeObjectRetain(v6);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v9 >= v10 >> 1)
  {
    v16 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
    v9 = v16;
  }
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
  specialized Array._endMutation()(v11);
  v12 = v6;

  swift_bridgeObjectRelease(v6);
  return (void *)v12;
}

void sub_100124680(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  a1();
  swift_beginAccess(v3, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    swift_unknownObjectWeakAssign(Strong + OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController, 0);

  }
}

uint64_t sub_1001246E8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t TipsManager.dismissTipIfPresentedWithCompletionBlock(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[5];
  _QWORD *v18;
  char v19;

  v5 = swift_allocObject(&unk_1001B6360, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = swift_allocObject(&unk_1001B6388, 24, 7);
    swift_unknownObjectWeakInit(v8 + 16, v2);
    v9 = (_QWORD *)swift_allocObject(&unk_1001B63B0, 40, 7);
    v9[2] = sub_1001252C8;
    v9[3] = v5;
    v9[4] = v8;
    aBlock[4] = sub_1001252F8;
    v18 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001246E8;
    aBlock[3] = &unk_1001B63C8;
    v10 = _Block_copy(aBlock);
    v11 = v18;
    swift_retain_n(a2, 2);
    swift_retain(v5);
    swift_release(v11);
    objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 0, v10);
    _Block_release(v10);

  }
  else
  {
    v12 = qword_1001F5878;
    swift_retain_n(a2, 2);
    if (v12 != -1)
      swift_once(&qword_1001F5878, sub_10001CE20);
    v13 = sub_10000EDD8(&qword_1001F5BA8);
    v14 = sub_10000EBE8(v13, (uint64_t)qword_1001F6CD8);
    v19 = 0;
    swift_beginAccess(v14, aBlock, 33, 0);
    Tips.Parameter.wrappedValue.setter(&v19, v13);
    v15 = swift_endAccess(aBlock);
    a1(v15);
  }
  swift_release(v5);
  return swift_release(a2);
}

uint64_t sub_1001248EC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[31];
  char v7;

  if (qword_1001F5878 != -1)
    swift_once(&qword_1001F5878, sub_10001CE20);
  v2 = sub_10000EDD8(&qword_1001F5BA8);
  v3 = sub_10000EBE8(v2, (uint64_t)qword_1001F6CD8);
  v7 = 0;
  swift_beginAccess(v3, v6, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v7, v2);
  v4 = swift_endAccess(v6);
  return a1(v4);
}

id TipsManager.init()()
{
  _BYTE *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC9MobileCal11TipsManager_tipObservationTask] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController], 0);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC9MobileCal11TipsManager_todayBarButtonItem], 0);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC9MobileCal11TipsManager_presentingController], 0);
  v0[OBJC_IVAR____TtC9MobileCal11TipsManager____lazy_storage___jumpToTodayTip] = 1;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipsManager();
  return objc_msgSendSuper2(&v2, "init");
}

id TipsManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall TipsManager.jumpToTodayActionPerformed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Tips.InvalidationReason(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CE80();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Tips.InvalidationReason.actionPerformed(_:), v0);
  v4 = sub_10001CD7C();
  Tip.invalidate(reason:)(v3, &type metadata for JumpToTodayTip, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

Swift::Void __swiftcall TipsManager.setIsPortraitOrientation(to:)(Swift::Bool to)
{
  sub_100124CB8(to, &qword_1001F5880, (uint64_t)qword_1001F6CF0, (uint64_t)sub_10001CDC4);
}

Swift::Void __swiftcall TipsManager.setIsSelectedDateFiveDaysAwayFromToday(to:)(Swift::Bool to)
{
  sub_100124CB8(to, &qword_1001F5888, (uint64_t)qword_1001F6D08, (uint64_t)sub_10001CDF8);
}

Swift::Void __swiftcall TipsManager.setShouldDisplayJumpToTodayTip(to:)(Swift::Bool to)
{
  sub_100124CB8(to, &qword_1001F5878, (uint64_t)qword_1001F6CD8, (uint64_t)sub_10001CE20);
}

uint64_t sub_100124CB8(char a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[31];
  char v10;

  if (*a2 != -1)
    swift_once(a2, a4);
  v6 = sub_10000EDD8(&qword_1001F5BA8);
  v7 = sub_10000EBE8(v6, a3);
  v10 = a1 & 1;
  swift_beginAccess(v7, v9, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v10, v6);
  return swift_endAccess(v9);
}

uint64_t sub_100124D68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_100124F20(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100124F20(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void (*v15)(_QWORD *);
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  void (*v20[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a3);
    if (v13 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000082A4(&qword_1001F5BF8, &qword_1001F5BF0, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10000EDD8(&qword_1001F5BF0);
          v15 = sub_10012513C(v20, i, a3);
          v17 = *v16;
          ((void (*)(void (**)(id *), _QWORD))v15)(v20, 0);
          *(_QWORD *)(a1 + 8 * i) = v17;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v8 + 32;
  if (v8 + 32 >= a1 + 8 * v9 || v10 + 8 * v9 <= a1)
  {
    v11 = sub_10011FCD0(0, &qword_1001F5BE8, UIView_ptr);
    swift_arrayInitWithCopy(a1, v10, v9, v11);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_10012513C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1001251BC(v6, a2, a3);
  return sub_100125190;
}

void sub_100125190(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1001251BC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100125228;
  }
  __break(1u);
  return result;
}

void sub_100125228(id *a1)
{

}

uint64_t sub_100125230()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012525C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001F5B94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10011FE28;
  return sub_1001238A0(a1, v4, v5, v6);
}

uint64_t sub_1001252C8()
{
  uint64_t v0;

  return sub_1001248EC(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1001252D0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001252F8()
{
  uint64_t v0;

  sub_100124680(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100125304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100125314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10012531C(uint64_t a1, void (**a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD aBlock[5];
  _QWORD *v16;
  char v17;

  v4 = swift_allocObject(&unk_1001B6400, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject(&unk_1001B6428, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10011FF28;
  *(_QWORD *)(v5 + 24) = v4;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC9MobileCal11TipsManager_tipPopoverController);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = swift_allocObject(&unk_1001B6388, 24, 7);
    swift_unknownObjectWeakInit(v8 + 16, a1);
    v9 = (_QWORD *)swift_allocObject(&unk_1001B6450, 40, 7);
    v9[2] = sub_1001255AC;
    v9[3] = v5;
    v9[4] = v8;
    aBlock[4] = sub_1001255C8;
    v16 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001246E8;
    aBlock[3] = &unk_1001B6468;
    v10 = _Block_copy(aBlock);
    v11 = v16;
    swift_retain_n(v4, 2);
    _Block_copy(a2);
    swift_retain(v5);
    swift_release(v11);
    objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 0, v10);
    _Block_release(v10);

  }
  else
  {
    swift_retain_n(v4, 2);
    _Block_copy(a2);
    if (qword_1001F5878 != -1)
      swift_once(&qword_1001F5878, sub_10001CE20);
    v12 = sub_10000EDD8(&qword_1001F5BA8);
    v13 = sub_10000EBE8(v12, (uint64_t)qword_1001F6CD8);
    v17 = 0;
    swift_beginAccess(v13, aBlock, 33, 0);
    Tips.Parameter.wrappedValue.setter(&v17, v12);
    swift_endAccess(aBlock);
    a2[2](a2);
  }
  swift_release(v5);
  return swift_release_n(v4, 2);
}

uint64_t sub_100125530()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100125554()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100125580()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100125630(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v2 = sub_10000EDD8(&qword_1001F5C58);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for AppEntityID(0);
  v5 = *(_QWORD *)(v32 - 8);
  v6 = __chkstk_darwin(v32);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ViewLocation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "event");
  v18 = EKEvent.entityIdentifier.getter();
  if (!v19)
  {

    return 0;
  }
  v20 = v18;
  v21 = v19;
  if ((objc_msgSend(v17, "isIntegrationEvent") & 1) != 0)
  {
    if (objc_msgSend(v17, "isReminderIntegrationEvent"))
    {
      AppEntityID.init(entityIdentifierString:)(v20, v21);
      v22 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v32) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v4, v22);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v22);
        ViewLocation.init(x:y:z:width:height:depth:)(objc_msgSend(a1, "rect"));
        sub_100125B6C((char)objc_msgSend(a1, "state"));
        v28 = type metadata accessor for ReminderEntity(0);
        v29 = type metadata accessor for _RepresentedEntityElement(0);
        swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
        v30 = sub_10011FD08(&qword_1001F5C68, (uint64_t (*)(uint64_t))&type metadata accessor for ReminderEntity, (uint64_t)&protocol conformance descriptor for ReminderEntity);
        v26 = _RepresentedEntityElement.init<A>(appEntityType:identifier:geometry:state:subelements:)(v28, v8, v16, v13, &_swiftEmptyArrayStorage, v28, v30);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v22);
        return v26;
      }

      sub_100126000((uint64_t)v4);
    }
    else
    {

      swift_bridgeObjectRelease(v21);
    }
    return 0;
  }
  ViewLocation.init(x:y:z:width:height:depth:)(objc_msgSend(a1, "rect"));
  sub_100125B6C((char)objc_msgSend(a1, "state"));
  v23 = type metadata accessor for EventEntity(0);
  v33[0] = v20;
  v33[1] = v21;
  v24 = type metadata accessor for _RepresentedEntityElement(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = sub_10011FD08(&qword_1001F5C60, (uint64_t (*)(uint64_t))&type metadata accessor for EventEntity, (uint64_t)&protocol conformance descriptor for EventEntity);
  v26 = _RepresentedEntityElement.init<A>(appEntityType:identifier:geometry:state:subelements:)(v23, v33, v16, v13, &_swiftEmptyArrayStorage, v23, v25);

  return v26;
}

void *sub_1001259D4(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v18;
  id v19;
  unint64_t v20;

  v4 = v3;
  v20 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v14 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100125B6C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  void (*v14)(char *, uint64_t);
  void (*v15)(char *, uint64_t);
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  void *v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v20 - v7;
  v21 = &_swiftEmptyArrayStorage;
  v10 = sub_10011FD08(&qword_1001F5C70, v9, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v11 = sub_10000EDD8(&qword_1001F5C78);
  v12 = sub_100126040();
  result = dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v11, v12, v2, v10);
  if ((a1 & 1) != 0)
  {
    static AppEntityVisualState.selected.getter(result);
    sub_10012608C(v8, (uint64_t)v6);
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v6, v2);
    result = ((uint64_t (*)(char *, uint64_t))v15)(v8, v2);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  static AppEntityVisualState.highlighted.getter(result);
  sub_10012608C(v8, (uint64_t)v6);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v6, v2);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v8, v2);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  static AppEntityVisualState.focused.getter(result);
  sub_10012608C(v8, (uint64_t)v6);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  result = ((uint64_t (*)(char *, uint64_t))v17)(v8, v2);
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  static AppEntityVisualState.disabled.getter(result);
  sub_10012608C(v8, (uint64_t)v6);
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      return result;
    goto LABEL_7;
  }
LABEL_13:
  static AppEntityVisualState.editing.getter(result);
  sub_10012608C(v8, (uint64_t)v6);
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v8, v2);
  if ((a1 & 0x20) == 0)
    return result;
LABEL_7:
  static AppEntityVisualState.primary.getter(result);
  sub_10012608C(v8, (uint64_t)v6);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
}

void *sub_100125DC8()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[6];

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0);
  if (!Strong)
    return &_swiftEmptyArrayStorage;
  v2 = Strong;
  v3 = objc_msgSend(Strong, "annotatedEntities");
  if (!v3)
  {
    swift_unknownObjectRelease(v2);
    return &_swiftEmptyArrayStorage;
  }
  v4 = v3;
  v5 = sub_100125F88();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  __chkstk_darwin(v7);
  v10[2] = v0;
  v8 = sub_1001259D4((void (*)(uint64_t *__return_ptr, id *))sub_100125FC4, (uint64_t)v10, v6);
  swift_bridgeObjectRelease(v6);
  swift_unknownObjectRelease(v2);
  return v8;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewEntityProviderWrapper(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t getEnumTagSinglePayload for ViewEntityProviderWrapper(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ViewEntityProviderWrapper(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ViewEntityProviderWrapper()
{
  return &type metadata for ViewEntityProviderWrapper;
}

unint64_t sub_100125F44()
{
  unint64_t result;

  result = qword_1001F5C48;
  if (!qword_1001F5C48)
  {
    result = swift_getWitnessTable(&unk_1001A1D20, &type metadata for ViewEntityProviderWrapper);
    atomic_store(result, (unint64_t *)&qword_1001F5C48);
  }
  return result;
}

unint64_t sub_100125F88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5C50;
  if (!qword_1001F5C50)
  {
    v1 = objc_opt_self(CUIKViewEntityAnnotation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001F5C50);
  }
  return result;
}

uint64_t sub_100125FC4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100125630(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100126000(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDD8(&qword_1001F5C58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100126040()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5C80;
  if (!qword_1001F5C80)
  {
    v1 = sub_10000EE18(&qword_1001F5C78);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001F5C80);
  }
  return result;
}

uint64_t sub_10012608C(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;

  v30 = a1;
  v4 = sub_10000EDD8(&qword_1001F5C88);
  v5 = __chkstk_darwin(v4);
  v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - v7;
  v9 = type metadata accessor for AppEntityVisualState(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v25 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v27 = v2;
  v16(v13, v2, v9);
  v17 = sub_10011FD08(&qword_1001F5C70, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  v18 = sub_10011FD08((unint64_t *)&unk_1001F5C90, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v26 = a2;
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v18) ^ 1;
  v29 = v4;
  v20 = &v8[*(int *)(v4 + 48)];
  *v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v22 = v26;
    v16(v20, v26, v9);
    v16(v13, v22, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v17);
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }
  v23 = &v28[*(int *)(v29 + 48)];
  v21(v23, v20, v9);
  v21(v30, v23, v9);
  return v19 & 1;
}

uint64_t sub_1001262C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1001264FC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Class isa;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD v81[3];

  v1 = v0;
  v2 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v2);
  v71 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  v5 = __chkstk_darwin(v4);
  v70 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (uint64_t)&v68 - v7;
  v8 = type metadata accessor for RemindersInCalendarEditingReminderProperties(0);
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  __chkstk_darwin(v8);
  v80 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, v10);
  v75 = *(_QWORD *)(v11 - 8);
  v76 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration(0);
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000EDD8(&qword_1001F5DB0);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v68 - v25;
  v79 = OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_event;
  v27 = *(void **)&v0[OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_event];
  v28 = v27;
  sub_100126AD8(v27, v19);
  v29 = v21;
  v30 = v20;

  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v19, 1, v20) == 1)
    return sub_10001CCFC((uint64_t)v19, &qword_1001F5DB0);
  (*(void (**)(char *, _QWORD *, uint64_t))(v29 + 32))(v26, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v24, v26, v20);
  v32 = v16;
  RemindersInCalendarUtilities.ReminderEditingConfiguration.init(reminderSpecifier:)(v24);
  v33 = *(id *)&v1[OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_model];
  v69 = v29;
  if (v33)
    v33 = objc_msgSend(v33, "undoManager");
  v34 = (uint64_t)v71;
  RemindersInCalendarUtilities.ReminderEditingConfiguration.undoManager.setter(v33);
  v35 = static RemindersInCalendarUtilities.makeReminderEditingModule(configuration:)(v32);
  RemindersInCalendarEditingReminderProperties.init()(v35);
  v36 = *(void **)&v1[v79];
  if (v36)
  {
    v37 = objc_msgSend(v36, "startDateComponents");
    if (v37)
    {
      v38 = v37;
      v39 = v26;
      v40 = (uint64_t)v70;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v41 = type metadata accessor for DateComponents(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
    }
    else
    {
      v39 = v26;
      v44 = type metadata accessor for DateComponents(0);
      v40 = (uint64_t)v70;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v70, 1, 1, v44);
    }
    v43 = v72;
    sub_10011FC88(v40, v72);
  }
  else
  {
    v39 = v26;
    v42 = type metadata accessor for DateComponents(0);
    v43 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v72, 1, 1, v42);
  }
  v45 = v80;
  v46 = RemindersInCalendarEditingReminderProperties.dueDateComponents.setter(v43);
  v47 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v46);
  v49 = v48;
  ObjectType = swift_getObjectType();
  dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.editReminder(with:)(v45, ObjectType, v49);
  v51 = swift_unknownObjectRelease(v47);
  v52 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v51);
  v54 = v53;
  v55 = swift_getObjectType();
  v56 = sub_100128AFC();
  v57 = swift_unknownObjectRetain(v1);
  dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.moduleDelegate.setter(v57, v56, v55, v54);
  swift_unknownObjectRelease(v52);
  v59 = v75;
  v58 = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(v34, v13, v76);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v34, 0, 1, v58);
  v60 = (uint64_t)&v1[OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule];
  swift_beginAccess(&v1[OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule], v81, 33, 0);
  sub_100128B44(v34, v60);
  swift_endAccess(v81);
  v61 = sub_10000EDD8(&qword_1001F5DC0);
  v62 = swift_allocObject(v61, 40, 7);
  *(_OWORD *)(v62 + 16) = xmmword_1001A1CE0;
  v63 = RemindersInCalendarUtilities.ReminderEditingModule.viewController.getter();
  *(_QWORD *)(v62 + 32) = v63;
  v81[0] = v62;
  specialized Array._endMutation()(v63);
  v64 = v81[0];
  sub_10011FCD0(0, &qword_1001F5DC8, UIViewController_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v64);
  objc_msgSend(v1, "setViewControllers:animated:", isa, 0);

  v66 = (void *)RemindersInCalendarUtilities.ReminderEditingModule.viewController.getter();
  v67 = objc_msgSend(v66, "view");

  if (v67)
  {
    objc_msgSend(v67, "annotateWithEvent:", *(_QWORD *)&v1[v79]);
    objc_msgSend(v67, "updateEntityAnnotationStateWithIsSelected:isHighlighted:isFocused:isDisabled:isEditing:isPrimary:", 1, 0, 0, 0, 1, 1);

  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v78);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v58);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v32, v74);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v39, v30);
}

uint64_t sub_100126AD8@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSURL *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v5 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDD8(&qword_1001F59C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_model);
    v43 = a2;
    if (v15)
    {
      v16 = a1;
      v17 = v15;
      v18 = objc_msgSend(v17, "pendingReminderTracker");
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "optimisticReminderForEvent:", v16);

        if (v20)
        {

          v21 = v43;
          *v43 = v20;
          v22 = enum case for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier.optimisticReminder(_:);
          v23 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier(0);
          v24 = *(_QWORD *)(v23 - 8);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v24 + 104))(v21, v22, v23);
          return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
      }
      else
      {

      }
    }
    else
    {
      v27 = a1;
    }
    v28 = objc_msgSend(a1, "uniqueID");
    if (v28)
    {
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      URL.init(string:)(v30, v32);
      swift_bridgeObjectRelease(v32);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {

        sub_10001CCFC((uint64_t)v10, &qword_1001F59C8);
        v33 = v43;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
        URL._bridgeToObjectiveC()(v34);
        v36 = v35;
        v37 = objc_msgSend((id)objc_opt_self(REMObjectID), "objectIDWithURL:", v35);

        v33 = v43;
        if (v37)
        {
          EKEvent.recurrentReminderOccurrenceDate.getter();
          RemindersInCalendarUtilities.ReminderSpecifier.init(reminderID:dueDateOfRecurrentInstance:)(v37, v7);

          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          v38 = enum case for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier.reminder(_:);
          v39 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier(0);
          v40 = *(_QWORD *)(v39 - 8);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v40 + 104))(v33, v38, v39);
          return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v33, 0, 1, v39);
        }
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

      }
    }
    else
    {

      v33 = v43;
    }
    v41 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v33, 1, 1, v41);
  }
  else
  {
    v26 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingConfiguration.ReminderSpecifier(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a2, 1, 1, v26);
  }
}

uint64_t sub_100126E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  _BYTE v30[24];

  v1 = sub_10000EDD8((uint64_t *)&unk_1001F5D80);
  __chkstk_darwin(v1);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for RemindersInCalendarEditingReminderProperties(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v8);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule, v30, 0, 0);
  sub_100128840(v16, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
    return sub_10001CCFC((uint64_t)v10, &qword_1001F5D68);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v10, v12);
  v18 = *(void **)(v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_event);
  if (v18)
  {
    v19 = v18;
    RemindersInCalendarEditingReminderProperties.init()(v19);
    v20 = objc_msgSend(v19, "startDateComponents");
    if (v20)
    {
      v21 = v20;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v3, 0, 1, v22);
    }
    else
    {
      v23 = type metadata accessor for DateComponents(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 1, 1, v23);
    }
    v24 = RemindersInCalendarEditingReminderProperties.dueDateComponents.setter(v3);
    v25 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v24);
    v27 = v26;
    ObjectType = swift_getObjectType();
    dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.editReminder(with:)(v7, ObjectType, v27);

    swift_unknownObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1001271A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _BYTE v18[24];

  v1 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v1);
  v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v9, v18, 0, 0);
  sub_100128840(v9, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) == 1)
  {
    sub_10001CCFC((uint64_t)v3, &qword_1001F5D68);
    v10 = 0;
  }
  else
  {
    v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v3, v5);
    v12 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v11);
    v14 = v13;
    ObjectType = swift_getObjectType();
    v10 = dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.hasUncommittedChanges.getter(ObjectType, v14);
    swift_unknownObjectRelease(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v10 & 1;
}

uint64_t sub_100127328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _BYTE v19[24];

  v3 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v7);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = v2 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v10, v19, 0, 0);
  sub_100128840(v10, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3))
  {
    sub_10001CCFC((uint64_t)v9, &qword_1001F5D68);
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    v12 = sub_10001CCFC((uint64_t)v9, &qword_1001F5D68);
    v13 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v12);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ObjectType = swift_getObjectType();
    v11 = dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.requiresUserConfirmationForCommittingEditing.getter(ObjectType, v15);
    swift_unknownObjectRelease(v13);
  }
  return v11 & 1;
}

uint64_t sub_1001274B8(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (**v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char v35[24];

  v5 = sub_10000EDD8(&qword_1001F5D60);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - v17;
  v19 = v2 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v19, v35, 0, 0);
  sub_100128840(v19, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    result = sub_10001CCFC((uint64_t)v10, &qword_1001F5D68);
    if (a1)
    {
      v21 = swift_retain(a2);
      a1(v21);
      return sub_10011FA88((uint64_t)a1, a2);
    }
  }
  else
  {
    v34 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v34(v18, v10, v12);
    v22 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    type metadata accessor for MainActor(0);
    v23 = sub_10011FA98((uint64_t)a1, a2);
    v24 = static MainActor.shared.getter(v23);
    v25 = *(unsigned __int8 *)(v13 + 80);
    v26 = (v25 + 32) & ~v25;
    v33 = v7;
    v27 = a2;
    v28 = (v14 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_1001B65A8, v28 + 16, v25 | 7);
    *(_QWORD *)(v29 + 16) = v24;
    *(_QWORD *)(v29 + 24) = &protocol witness table for MainActor;
    v34((char *)(v29 + v26), v16, v12);
    v30 = (void (**)(uint64_t))(v29 + v28);
    *v30 = a1;
    v30[1] = (void (*)(uint64_t))v27;
    v31 = sub_1001236B0((uint64_t)v33, (uint64_t)&unk_1001F5D78, v29);
    swift_release(v31);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  return result;
}

uint64_t sub_100127738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for RemindersInCalendarEditingResult(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[7] = swift_task_alloc(v9);
  v6[8] = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  v6[9] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v6[10] = v11;
  v6[11] = v12;
  return swift_task_switch(sub_1001277E0, v11, v12);
}

void sub_1001277E0()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;

  v1 = (void *)RemindersInCalendarUtilities.ReminderEditingModule.viewController.getter();
  v2 = objc_msgSend(v1, "view");

  if (v2)
  {
    objc_msgSend(v2, "endEditing:", 1);

    v4 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v3);
    v6 = v5;
    v0[12] = v4;
    ObjectType = swift_getObjectType();
    v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.commitEditing(allowingUserConfirmation:)[1]);
    v0[13] = v8;
    *v8 = v0;
    v8[1] = sub_10011DD10;
    dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.commitEditing(allowingUserConfirmation:)(v0[8], 1, ObjectType, v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100127960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a4;
  v5 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, a2);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDD8(&qword_1001F5D68);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDD8(&qword_1001F5DA0);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[11] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[12] = v10;
  v4[13] = v11;
  return swift_task_switch(sub_100127A3C, v10, v11);
}

uint64_t sub_100127A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  sub_100128840(v4, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2))
  {
    v5 = *(_QWORD *)(v0 + 72);
    swift_release(*(_QWORD *)(v0 + 88));
    sub_10001CCFC(v5, &qword_1001F5D68);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 64);
    v9 = type metadata accessor for RemindersInCalendarEditingResult(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
    sub_10001CCFC(v7, &qword_1001F5DA0);
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 48);
    v14 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
    v16 = sub_10001CCFC(v12, &qword_1001F5D68);
    v17 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v16);
    v19 = v18;
    *(_QWORD *)(v0 + 112) = v17;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
    ObjectType = swift_getObjectType();
    LOBYTE(v13) = *(_BYTE *)(v15 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_ignoreUnsavedChanges);
    v21 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.cancelEditing(allowingUserConfirmation:)[1]);
    *(_QWORD *)(v0 + 120) = v21;
    *v21 = v0;
    v21[1] = sub_100127C04;
    return dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.cancelEditing(allowingUserConfirmation:)(*(_QWORD *)(v0 + 80), (v13 & 1) == 0, ObjectType, v19);
  }
}

uint64_t sub_100127C04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_100127C58, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_100127C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = type metadata accessor for RemindersInCalendarEditingResult(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  sub_10001CCFC(v2, &qword_1001F5DA0);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100128090()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EKReminderEditViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100128124()
{
  return type metadata accessor for EKReminderEditViewController(0);
}

uint64_t type metadata accessor for EKReminderEditViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1001F5CD8;
  if (!qword_1001F5CD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EKReminderEditViewController);
  return result;
}

void sub_100128168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  sub_1001281F4(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(v3 - 8) + 64;
    v5[1] = "\b";
    v5[2] = &unk_1001A1DC8;
    v5[3] = "\b";
    v5[4] = &unk_1001A1DE0;
    swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
  }
}

void sub_1001281F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1001F5CE8)
  {
    v3 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(255, a2);
    v4 = type metadata accessor for Optional(a1, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001F5CE8);
  }
}

uint64_t sub_10012824C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100128758(a3);
}

uint64_t sub_100128254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  char v17;
  _BYTE v20[24];

  v3 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_10000EDD8(&qword_1001F5D68);
  __chkstk_darwin(v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = v2 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_currentModule;
  swift_beginAccess(v10, v20, 0, 0);
  sub_100128840(v10, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3))
  {
    sub_10001CCFC((uint64_t)v9, &qword_1001F5D68);
    v11 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    v12 = sub_10001CCFC((uint64_t)v9, &qword_1001F5D68);
    v13 = RemindersInCalendarUtilities.ReminderEditingModule.moduleInterface.getter(v12);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    ObjectType = swift_getObjectType();
    v17 = dispatch thunk of RemindersInCalendarReminderEditingModuleInterface.requiresUserConfirmationForCancelingEditing.getter(ObjectType, v15);
    swift_unknownObjectRelease(v13);
    v11 = v17 ^ 1;
  }
  return v11 & 1;
}

void *sub_1001283B8()
{
  uint64_t v0;
  void *v1;
  void *result;
  void *v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_event);
  if (v1)
    objc_msgSend(v1, "rollback");
  result = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_internalEditViewDelegate);
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "eventEditViewController:didCompleteWithAction:completionHandler:", v0, 0, 0);
    return (void *)swift_unknownObjectRelease(v3);
  }
  return result;
}

void sub_10012842C(void *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;
  _QWORD v25[4];

  v25[2] = sub_10011FCD0(0, (unint64_t *)&unk_1001F5D50, REMReminder_ptr);
  v25[3] = &protocol witness table for REMReminder;
  v24 = a2;
  v6 = a2;
  EKEvent.update(from:updateDates:forSavingIntegrationEvent:)(&v24, 1, 1);
  sub_10011FC24(&v24);
  if (objc_msgSend(a1, "completed"))
    objc_msgSend(a1, "setRecurrenceRules:", 0);
  v7 = objc_msgSend(a1, "eventStore");
  if (!v7)
    __break(1u);
  v8 = v7;
  v9 = static EKSpan.automaticChange.getter();
  v24 = 0;
  v10 = objc_msgSend(v8, "saveEvent:span:commit:error:", a1, v9, 0, &v24);

  v11 = v24;
  if (v10)
  {
    v12 = v24;
    objc_msgSend(a3, "setOptimisticReminder:forEvent:sequenceNumber:", v6, a1, objc_msgSend(a1, "sequenceNumber"));
    objc_msgSend(a3, "addPendingEvent:sequenceNumber:", a1, objc_msgSend(a1, "sequenceNumber"));
  }
  else
  {
    v13 = v24;
    v14 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v15);
    if (qword_1001F5870 != -1)
      swift_once(&qword_1001F5870, sub_100128B8C);
    v16 = type metadata accessor for Logger(0);
    sub_10000EBE8(v16, (uint64_t)qword_1001F6CC0);
    swift_errorRetain(v14);
    v17 = swift_errorRetain(v14);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(v14);
      v22 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
      v24 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v20 + 4, v20 + 12);
      *v21 = v22;
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error saving reminder changes onto event %@", v20, 0xCu);
      v23 = sub_10000EDD8(&qword_1001F5960);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v14);
    }
    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      swift_errorRelease(v14);

    }
  }
}

uint64_t sub_100128758(void *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_internalEditViewDelegate);
  if (result)
  {
    v4 = (void *)result;
    v5 = *(void **)(v1 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_model);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v6, "pendingReminderTracker");
      if (v7)
      {
        v8 = v7;
        v9 = *(void **)(v1 + OBJC_IVAR____TtC9MobileCal28EKReminderEditViewController_event);
        if (v9)
        {
          v10 = v9;
          sub_10012842C(v10, a1, v8);

          v6 = v8;
          v8 = v10;
        }

        v6 = v8;
      }

    }
    objc_msgSend(v4, "eventEditViewController:didCompleteWithAction:completionHandler:", v1, 1, 0);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_100128840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDD8(&qword_1001F5D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100128888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  if (*(_QWORD *)(v2 + v7))
    swift_release(*(_QWORD *)(v2 + v7 + 8));
  return swift_deallocObject(v2, v7 + 16, v5 | 7);
}

uint64_t sub_100128914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(type metadata accessor for RemindersInCalendarUtilities.ReminderEditingModule(0, a2) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = v2 + v6;
  v10 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1001F5D74);
  *(_QWORD *)(v3 + 16) = v13;
  *v13 = v3;
  v13[1] = sub_10011FF54;
  return sub_100127738(a1, v7, v8, v9, v11, v12);
}

uint64_t sub_1001289C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001F5D94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10011FF54;
  return sub_100127960(a1, v4, v5, v6);
}

uint64_t sub_100128A34()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100128A60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001F5D94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10011FE28;
  return sub_100127960(a1, v4, v5, v6);
}

uint64_t sub_100128ACC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100128AF0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

unint64_t sub_100128AFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001F5DB8;
  if (!qword_1001F5DB8)
  {
    v1 = type metadata accessor for EKReminderEditViewController(255);
    result = swift_getWitnessTable(&unk_1001A1E00, v1);
    atomic_store(result, (unint64_t *)&qword_1001F5DB8);
  }
  return result;
}

uint64_t sub_100128B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDD8(&qword_1001F5D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100128B8C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000EC00(v0, qword_1001F6CC0);
  sub_10000EBE8(v0, (uint64_t)qword_1001F6CC0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100195A60, 0x49556C6143, 0xE500000000000000);
}

ValueMetadata *type metadata accessor for JumpToTodayTip()
{
  return &type metadata for JumpToTodayTip;
}

void *sub_100128C0C()
{
  return &protocol witness table for String;
}

uint64_t sub_100128C18()
{
  return Tip.title.getter();
}

void sub_100128C44(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x8000000100195A80;
}

uint64_t sub_100128C64()
{
  return Image.init(systemName:)(0x7261646E656C6163, 0xE800000000000000);
}

uint64_t sub_100128C7C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC9MobileCalP33_B31BB3EE9A48A646B19F6F97F5CD1E5719ResourceBundleClass);
}

void sub_100129108(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Initializing a reminder editor without a calendar model. The editor won't be able to update values in the app and there will be a syncing delay before changes are visible. (delegate = %@)", (uint8_t *)&v2, 0xCu);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGContext");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGRectValue");
}

id objc_msgSend_CUIK_disabledSymbolColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CUIK_disabledSymbolColor");
}

id objc_msgSend_CUIK_reminderShouldBeEditable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CUIK_reminderShouldBeEditable");
}

id objc_msgSend_CUIK_symbolColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CUIK_symbolColor");
}

id objc_msgSend_CUIK_symbolName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CUIK_symbolName");
}

id objc_msgSend_CalEmailAddresses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalEmailAddresses");
}

id objc_msgSend_CalGregorianCalendarForTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalGregorianCalendarForTimeZone:");
}

id objc_msgSend_CalIsAfterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalIsAfterDate:");
}

id objc_msgSend_CalIsBeforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalIsBeforeDate:");
}

id objc_msgSend_CalMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalMap:");
}

id objc_msgSend_CalPhoneNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalPhoneNumbers");
}

id objc_msgSend_CalSimulatedDateForNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CalSimulatedDateForNow");
}

id objc_msgSend_Cal_annotateWithNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Cal_annotateWithNotification:");
}

id objc_msgSend_EKUI_editor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "EKUI_editor");
}

id objc_msgSend_EKUI_viewHierarchy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "EKUI_viewHierarchy");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLContexts");
}

id objc_msgSend_URLFragmentAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLFragmentAllowedCharacterSet");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend___buildCalendarSyncHashesForCalendars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__buildCalendarSyncHashesForCalendars:");
}

id objc_msgSend___restoreSelectedCalendarsFromPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__restoreSelectedCalendarsFromPreferences");
}

id objc_msgSend__actualEventsWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actualEventsWidth");
}

id objc_msgSend__addAllObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAllObservers");
}

id objc_msgSend__addButtonsToNavigationBarForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addButtonsToNavigationBarForViewController:");
}

id objc_msgSend__addChildViewControllerForCurrentTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addChildViewControllerForCurrentTraits");
}

id objc_msgSend__addDoneButtonIfNeededToViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDoneButtonIfNeededToViewController:");
}

id objc_msgSend__addNewBottomView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addNewBottomView");
}

id objc_msgSend__addNewCellToSide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addNewCellToSide:");
}

id objc_msgSend__addNewTopView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addNewTopView");
}

id objc_msgSend__addPersistedStateFromCalendarModelToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPersistedStateFromCalendarModelToDictionary:");
}

id objc_msgSend__adjustContentOffsetIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustContentOffsetIfNeeded");
}

id objc_msgSend__adjustNavBarVisibilityAfterTraitCollectionChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustNavBarVisibilityAfterTraitCollectionChange");
}

id objc_msgSend__adjustSelectedOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustSelectedOccurrences");
}

id objc_msgSend__alignXToPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignXToPage:");
}

id objc_msgSend__allDayOccurrenceBlocksForEvents_rangeStart_rangeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allDayOccurrenceBlocksForEvents:rangeStart:rangeEnd:");
}

id objc_msgSend__allEventsHaveSameAddressWithFirstArray_secondArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allEventsHaveSameAddressWithFirstArray:secondArray:");
}

id objc_msgSend__allFetchedOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allFetchedOccurrences:");
}

id objc_msgSend__allowedToDisplayEventDetailsColumn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowedToDisplayEventDetailsColumn");
}

id objc_msgSend__animateChangeToWeekSize_divided_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateChangeToWeekSize:divided:");
}

id objc_msgSend__animateDraggingOccurrenceToDate_atLastPosition_dropPoint_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateDraggingOccurrenceToDate:atLastPosition:dropPoint:completion:");
}

id objc_msgSend__animateGridlinesAndBackgrounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateGridlinesAndBackgrounds");
}

id objc_msgSend__animateUsingDefaultDampedSpringWithDelay_initialSpringVelocity_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateUsingDefaultDampedSpringWithDelay:initialSpringVelocity:options:animations:completion:");
}

id objc_msgSend__animateUsingDefaultTimingWithOptions_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateUsingDefaultTimingWithOptions:animations:completion:");
}

id objc_msgSend__animateUsingSpringWithDuration_delay_options_mass_stiffness_damping_initialVelocity_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:");
}

id objc_msgSend__animateView_toPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateView:toPosition:");
}

id objc_msgSend__animateView_toPosition_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateView:toPosition:setDelegate:");
}

id objc_msgSend__animateWithDuration_delay_options_factory_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateWithDuration:delay:options:factory:animations:completion:");
}

id objc_msgSend__animateZoomToMonthState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateZoomToMonthState");
}

id objc_msgSend__animateZoomToYearState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateZoomToYearState");
}

id objc_msgSend__animationComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationComplete");
}

id objc_msgSend__animationSubTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationSubTestName");
}

id objc_msgSend__anyOccurrencesAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_anyOccurrencesAvailable:");
}

id objc_msgSend__appNameString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appNameString");
}

id objc_msgSend__applicationIconImageForBundleIdentifier_format_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForBundleIdentifier:format:scale:");
}

id objc_msgSend__applicationLastActiveTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationLastActiveTime");
}

id objc_msgSend__areMultipleScenesOpen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_areMultipleScenesOpen");
}

id objc_msgSend__attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attributes");
}

id objc_msgSend__authorCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authorCache");
}

id objc_msgSend__autoSelectEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoSelectEvent");
}

id objc_msgSend__autoSelectEventWithAnimatedScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoSelectEventWithAnimatedScroll:");
}

id objc_msgSend__automaticDayFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_automaticDayFrames");
}

id objc_msgSend__availableSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_availableSpace");
}

id objc_msgSend__backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundColor");
}

id objc_msgSend__backgroundInsetsIgnoringSplitEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundInsetsIgnoringSplitEdges:");
}

id objc_msgSend__badgeDataForDate_outIsLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_badgeDataForDate:outIsLoading:");
}

id objc_msgSend__beginAutoScrollingAutoSelectingWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginAutoScrollingAutoSelectingWithContext:");
}

id objc_msgSend__birthdayCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_birthdayCount");
}

id objc_msgSend__blendColor_withColor_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_blendColor:withColor:alpha:");
}

id objc_msgSend__bodyLeading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyLeading");
}

id objc_msgSend__bodyStringDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyStringDict:");
}

id objc_msgSend__boldFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boldFont");
}

id objc_msgSend__bottomOfCurrentMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bottomOfCurrentMonth");
}

id objc_msgSend__bottomPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bottomPadding");
}

id objc_msgSend__boundsForWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boundsForWeek:");
}

id objc_msgSend__buildDayNumberViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildDayNumberViews");
}

id objc_msgSend__buildVerticalDaySeparators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildVerticalDaySeparators");
}

id objc_msgSend__cachedImageForString_isWeekend_underlineThickness_fontSize_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedImageForString:isWeekend:underlineThickness:fontSize:style:");
}

id objc_msgSend__cachedSizeForLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedSizeForLabel:");
}

id objc_msgSend__calculateCellWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateCellWidth");
}

id objc_msgSend__calculateMonthFrameForYearViewZoom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateMonthFrameForYearViewZoom");
}

id objc_msgSend__calculateYearFrameForYearViewZoom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateYearFrameForYearViewZoom");
}

id objc_msgSend__calendarDateAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarDateAtPoint:");
}

id objc_msgSend__calendarDateIsOnWeekend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarDateIsOnWeekend");
}

id objc_msgSend__calendarOccurrencesCollectionFromPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarOccurrencesCollectionFromPredicate:");
}

id objc_msgSend__calendarOrderSortDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarOrderSortDescriptor");
}

id objc_msgSend__calendarsButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarsButtonConfiguration");
}

id objc_msgSend__calendarsButtonHasBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calendarsButtonHasBackground");
}

id objc_msgSend__callCompletionIfExists(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionIfExists");
}

id objc_msgSend__canChangeSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canChangeSelectedDate");
}

id objc_msgSend__canChangeSelectedEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canChangeSelectedEvent");
}

id objc_msgSend__canEnableRefresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canEnableRefresh");
}

id objc_msgSend__canPerformDeleteKeyCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canPerformDeleteKeyCommand");
}

id objc_msgSend__canPerformDuplicateKeyCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canPerformDuplicateKeyCommand");
}

id objc_msgSend__canSkipViewHierarchyRebuildingWhenTransitioningFromOldCollection_toNewCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canSkipViewHierarchyRebuildingWhenTransitioningFromOldCollection:toNewCollection:");
}

id objc_msgSend__captureImageOfMonthInYearView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureImageOfMonthInYearView");
}

id objc_msgSend__captureImagesForSlidingPiecesFromMonthViewController_selectedDate_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureImagesForSlidingPiecesFromMonthViewController:selectedDate:calendar:");
}

id objc_msgSend__carSystemFocusColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_carSystemFocusColor");
}

id objc_msgSend__carSystemFocusLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_carSystemFocusLabelColor");
}

id objc_msgSend__carSystemFocusPrimaryColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_carSystemFocusPrimaryColor");
}

id objc_msgSend__carSystemPrimaryColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_carSystemPrimaryColor");
}

id objc_msgSend__carSystemQuaternaryColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_carSystemQuaternaryColor");
}

id objc_msgSend__castedDayOccurrenceViewFromGenericView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_castedDayOccurrenceViewFromGenericView:");
}

id objc_msgSend__cellHeightForMultiplier_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellHeightForMultiplier:windowSize:");
}

id objc_msgSend__cellInRowIsCollapsedAllDayCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellInRowIsCollapsedAllDayCell:");
}

id objc_msgSend__cellIndexForX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellIndexForX:");
}

id objc_msgSend__cellTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellTitle");
}

id objc_msgSend__cellToStartDrawingInForViewWithCalendarDate_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellToStartDrawingInForViewWithCalendarDate:calendar:");
}

id objc_msgSend__centerDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_centerDateFormatter");
}

id objc_msgSend__childViewControllerForTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_childViewControllerForTraitCollection:");
}

id objc_msgSend__circleDiameter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circleDiameter");
}

id objc_msgSend__circleFrameWithDayFrame_numberString_overlayString_compressed_containsFirstDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circleFrameWithDayFrame:numberString:overlayString:compressed:containsFirstDay:");
}

id objc_msgSend__circleSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circleSize");
}

id objc_msgSend__circledFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circledFont");
}

id objc_msgSend__circledOverlayFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circledOverlayFont");
}

id objc_msgSend__classRepresentingViewType_isWidthCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classRepresentingViewType:isWidthCompact:");
}

id objc_msgSend__cleanupGridAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupGridAnimation");
}

id objc_msgSend__cleanupSelectedOccurrenceCloneViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupSelectedOccurrenceCloneViews");
}

id objc_msgSend__cleanupSelectedOccurrenceCloneViewsRespectingModelSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupSelectedOccurrenceCloneViewsRespectingModelSelected");
}

id objc_msgSend__cleanupSelectedOccurrenceCloneViewsSkipSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupSelectedOccurrenceCloneViewsSkipSet:");
}

id objc_msgSend__clearSelectedOccurrenceViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSelectedOccurrenceViews");
}

id objc_msgSend__clearSelectedOccurrenceViewsUpdatingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSelectedOccurrenceViewsUpdatingModel:");
}

id objc_msgSend__clearSplitViewNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSplitViewNavigationController");
}

id objc_msgSend__clearTodayHighlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearTodayHighlight");
}

id objc_msgSend__clonedViewForSelectedOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clonedViewForSelectedOccurrence:");
}

id objc_msgSend__closeEventPresentationAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeEventPresentationAnimated:");
}

id objc_msgSend__closeEventPresentationAnimated_cleanSelectionState_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeEventPresentationAnimated:cleanSelectionState:completion:");
}

id objc_msgSend__closeEventPresentationAnimated_viewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeEventPresentationAnimated:viewController:completion:");
}

id objc_msgSend__collectStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectStats:");
}

id objc_msgSend__compactMonthDividedListSwitchBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compactMonthDividedListSwitchBarButtonItem");
}

id objc_msgSend__compactRoundedRectHeightForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compactRoundedRectHeightForSizeClass:");
}

id objc_msgSend__completeStateRestoration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_completeStateRestoration");
}

id objc_msgSend__computeDayStartsAndEndDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeDayStartsAndEndDate");
}

id objc_msgSend__configureSidebarConfigurationOfManagedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureSidebarConfigurationOfManagedNavigationController");
}

id objc_msgSend__configureViewSwitcherShowingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureViewSwitcherShowingViewController:");
}

id objc_msgSend__constructAndPresentSplashScreenFromViewController_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constructAndPresentSplashScreenFromViewController:window:");
}

id objc_msgSend__contactForCurrentIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contactForCurrentIdentity");
}

id objc_msgSend__containsPreciseTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containsPreciseTouch:");
}

id objc_msgSend__containsViewControllerRequiringNavBarVisibilityRestoration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containsViewControllerRequiringNavBarVisibilityRestoration");
}

id objc_msgSend__contentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentUnavailableConfiguration");
}

id objc_msgSend__continueUserActivity_restoreSelectedOccurrence_restoreSelectedDate_restorationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueUserActivity:restoreSelectedOccurrence:restoreSelectedDate:restorationHandler:");
}

id objc_msgSend__createAndActivateConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndActivateConstraints");
}

id objc_msgSend__createAndAddSeparatorView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndAddSeparatorView");
}

id objc_msgSend__createAndAddTitleView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndAddTitleView");
}

id objc_msgSend__createAndSetupModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndSetupModel");
}

id objc_msgSend__createEventDetailsColumn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createEventDetailsColumn");
}

id objc_msgSend__createFocusImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFocusImageView");
}

id objc_msgSend__createLabelWithFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLabelWithFont:");
}

id objc_msgSend__createLargeMonthWeekViewForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLargeMonthWeekViewForDate:");
}

id objc_msgSend__createLeftFixedSpaceBarItemIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLeftFixedSpaceBarItemIfNeeded");
}

id objc_msgSend__createListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createListView");
}

id objc_msgSend__createMonthAnimationStateModeSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMonthAnimationStateModeSubviews");
}

id objc_msgSend__createMonthHighlightForMonthView_day_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMonthHighlightForMonthView:day:");
}

id objc_msgSend__createPreparedViewForWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPreparedViewForWeek:");
}

id objc_msgSend__createPrimaryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPrimaryView");
}

id objc_msgSend__createSecondaryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSecondaryView");
}

id objc_msgSend__createSplitView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSplitView");
}

id objc_msgSend__createSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSubviews");
}

id objc_msgSend__createSubviewsWithFirstVisibleDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSubviewsWithFirstVisibleDate:");
}

id objc_msgSend__createSubviewsWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSubviewsWithSizeClass:");
}

id objc_msgSend__createTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTableView");
}

id objc_msgSend__createTestEventWithStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTestEventWithStartDate:");
}

id objc_msgSend__createViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createViews");
}

id objc_msgSend__currentDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentDateComponents");
}

id objc_msgSend__currentOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentOrientation");
}

id objc_msgSend__currentTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTraitCollection");
}

id objc_msgSend__currentlyViewingCalendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentlyViewingCalendarDate");
}

id objc_msgSend__customizeEventEditorForSplitViewAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customizeEventEditorForSplitViewAppearance:");
}

id objc_msgSend__dateForFirstVisibleRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateForFirstVisibleRow");
}

id objc_msgSend__dateForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateForPoint:");
}

id objc_msgSend__dateLabelMaxWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateLabelMaxWidth");
}

id objc_msgSend__dateModeForAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateModeForAllDay:");
}

id objc_msgSend__dateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateString");
}

id objc_msgSend__dayInMonth_fromGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayInMonth:fromGesture:");
}

id objc_msgSend__dayIndexForToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayIndexForToday");
}

id objc_msgSend__dayIndexesForRangeStart_rangeEnd_outFirstDayIndex_outLastDayIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayIndexesForRangeStart:rangeEnd:outFirstDayIndex:outLastDayIndex:");
}

id objc_msgSend__dayLabelColorAtDayIndex_isWeekend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayLabelColorAtDayIndex:isWeekend:");
}

id objc_msgSend__dayLabelFontForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayLabelFontForSizeClass:");
}

id objc_msgSend__dayNumberFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayNumberFontForSize:");
}

id objc_msgSend__dayOccurrenceViewForEvent_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayOccurrenceViewForEvent:block:");
}

id objc_msgSend__dayOfWeekLabelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayOfWeekLabelFont");
}

id objc_msgSend__dayRangeForOccurrence_useProposedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayRangeForOccurrence:useProposedTime:");
}

id objc_msgSend__dayTextSizeForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayTextSizeForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__dayTextSizeForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayTextSizeForWindowSize:");
}

id objc_msgSend__dayTypeForOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayTypeForOccurrence:");
}

id objc_msgSend__dayViewWidthWhenSplit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayViewWidthWhenSplit");
}

id objc_msgSend__dayWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dayWidth");
}

id objc_msgSend__daysInAWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daysInAWeek");
}

id objc_msgSend__daysToShiftFromSelectedDateToBeginningOfWeekIfShowingFullWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daysToShiftFromSelectedDateToBeginningOfWeekIfShowingFullWeek:");
}

id objc_msgSend__daysYAdjustTopForNumberOfMonthsPerRow_windowSize_heightSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daysYAdjustTopForNumberOfMonthsPerRow:windowSize:heightSizeClass:");
}

id objc_msgSend__daysYAdjustTopForWindowSize_heightSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daysYAdjustTopForWindowSize:heightSizeClass:");
}

id objc_msgSend__delaySubTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delaySubTestName");
}

id objc_msgSend__delegateShouldClose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delegateShouldClose");
}

id objc_msgSend__deleteEventAtIndexPath_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteEventAtIndexPath:withCompletionHandler:");
}

id objc_msgSend__deselectAllSelectedRowsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deselectAllSelectedRowsAnimated:");
}

id objc_msgSend__deselectOccurrenceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deselectOccurrenceView:");
}

id objc_msgSend__deselectOccurrenceView_updatingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deselectOccurrenceView:updatingModel:");
}

id objc_msgSend__deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deselectRowAtIndexPath:animated:");
}

id objc_msgSend__detailViewControllerAppeared_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailViewControllerAppeared:");
}

id objc_msgSend__detailsDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailsDidAppear:");
}

id objc_msgSend__diagnosticsAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_diagnosticsAvailable");
}

id objc_msgSend__didFinishDecelerating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishDecelerating");
}

id objc_msgSend__dismissEditorAndSaveIfPossibleWhileChangingDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissEditorAndSaveIfPossibleWhileChangingDate:animated:");
}

id objc_msgSend__dismissMessagesViewControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissMessagesViewControllerWithCompletion:");
}

id objc_msgSend__dismissPresentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissPresentedViewController");
}

id objc_msgSend__dismissPresentedViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissPresentedViewControllerAnimated:completion:");
}

id objc_msgSend__displayEventDetailsViewControllerForEvent_showComment_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayEventDetailsViewControllerForEvent:showComment:context:completion:");
}

id objc_msgSend__displayEventDetailsViewControllerForSelectedEventWithOccurrenceView_showComments_context_forceShowEditor_creationMethod_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayEventDetailsViewControllerForSelectedEventWithOccurrenceView:showComments:context:forceShowEditor:creationMethod:completion:");
}

id objc_msgSend__displayEventDetailsViewControllerForSelectedEventWithOccurrenceView_showComments_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayEventDetailsViewControllerForSelectedEventWithOccurrenceView:showComments:creationMethod:");
}

id objc_msgSend__donateUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_donateUserActivity:");
}

id objc_msgSend__doneBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doneBlock");
}

id objc_msgSend__doneBlockWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doneBlockWithCompletion:");
}

id objc_msgSend__drawBackgroundInFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawBackgroundInFrame:");
}

id objc_msgSend__drawInFrame_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawInFrame:traitCollection:");
}

id objc_msgSend__drawString_inTextRect_withTrailingFade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawString:inTextRect:withTrailingFade:");
}

id objc_msgSend__earliestVisibleWeekGroupView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_earliestVisibleWeekGroupView");
}

id objc_msgSend__earliestWeekGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_earliestWeekGroup");
}

id objc_msgSend__editingDidCompleteWithAction_changingDate_dismissEditor_editorToDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_editingDidCompleteWithAction:changingDate:dismissEditor:editorToDismiss:");
}

id objc_msgSend__encodeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encodeIdentifier:");
}

id objc_msgSend__ensureStackBaseCalendarViewControllerContainerIsPresent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureStackBaseCalendarViewControllerContainerIsPresent");
}

id objc_msgSend__eventEditorForTestingOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventEditorForTestingOnly");
}

id objc_msgSend__eventForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForIndexPath:");
}

id objc_msgSend__eventForIndexPath_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForIndexPath:cache:");
}

id objc_msgSend__eventForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForItem:");
}

id objc_msgSend__eventForOccurrenceInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForOccurrenceInfo:");
}

id objc_msgSend__eventForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForRowAtIndexPath:");
}

id objc_msgSend__eventForTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventForTest");
}

id objc_msgSend__eventInMonthWeekView_fromGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventInMonthWeekView:fromGesture:");
}

id objc_msgSend__eventIntersectsDayViewControllerActiveDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventIntersectsDayViewControllerActiveDate:");
}

id objc_msgSend__eventURLFromLaunchURL_isTravel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventURLFromLaunchURL:isTravel:");
}

id objc_msgSend__eventViewControllerForModelSelectedEventIsAlreadyShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventViewControllerForModelSelectedEventIsAlreadyShown");
}

id objc_msgSend__eventWithURI_checkValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventWithURI:checkValid:");
}

id objc_msgSend__eventsForCutOrCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventsForCutOrCopy");
}

id objc_msgSend__extendStateRestoration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extendStateRestoration");
}

id objc_msgSend__extendedLaunchDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extendedLaunchDidComplete");
}

id objc_msgSend__extractEventsEndingAfterTimeframeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractEventsEndingAfterTimeframeFrom:");
}

id objc_msgSend__extractEventsStartingBeforeTimeframeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractEventsStartingBeforeTimeframeFrom:");
}

id objc_msgSend__extractNumberFromUserActivity_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractNumberFromUserActivity:forKey:");
}

id objc_msgSend__extractViewTypeFromUserInfo_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractViewTypeFromUserInfo:withKey:");
}

id objc_msgSend__fadeInOccurrenceView_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fadeInOccurrenceView:animated:");
}

id objc_msgSend__fadePressHighlightViewToAlpha_duration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fadePressHighlightViewToAlpha:duration:completion:");
}

id objc_msgSend__fallbackSizingContextWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackSizingContextWindow");
}

id objc_msgSend__fetchUpcomingOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUpcomingOccurrences:");
}

id objc_msgSend__findBoundsForSize_outLowerBound_outUpperBound_outExactMatchValue_outFoundExactMatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findBoundsForSize:outLowerBound:outUpperBound:outExactMatchValue:outFoundExactMatch:");
}

id objc_msgSend__findFormatForLocale_usingExampleDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findFormatForLocale:usingExampleDate:");
}

id objc_msgSend__findSomeCalendarModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findSomeCalendarModel");
}

id objc_msgSend__firstLineBaselineOffsetFromBoundsTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstLineBaselineOffsetFromBoundsTop");
}

id objc_msgSend__firstVisibleIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstVisibleIndex");
}

id objc_msgSend__firstVisibleIndexInView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstVisibleIndexInView");
}

id objc_msgSend__flatImageWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flatImageWithColor:");
}

id objc_msgSend__flooredCalendarDateForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flooredCalendarDateForCalendarDate:");
}

id objc_msgSend__focusBannerVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusBannerVisible");
}

id objc_msgSend__focusConfigurationChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusConfigurationChanged");
}

id objc_msgSend__fontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontSize");
}

id objc_msgSend__fontSizeForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontSizeForSizeClass:");
}

id objc_msgSend__forceInboxButtonCreationIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceInboxButtonCreationIfNeeded");
}

id objc_msgSend__forceLayoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceLayoutIfNeeded");
}

id objc_msgSend__forceReloadImagesForDayTypeBadges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceReloadImagesForDayTypeBadges");
}

id objc_msgSend__forceUpdateCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceUpdateCell:");
}

id objc_msgSend__frameForOccurrenceBlock_index_yPos_padding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameForOccurrenceBlock:index:yPos:padding:");
}

id objc_msgSend__frameForStartColumn_endColumn_dayRow_occurrenceRow_numRows_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameForStartColumn:endColumn:dayRow:occurrenceRow:numRows:");
}

id objc_msgSend__fromString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fromString");
}

id objc_msgSend__generateFormatStringsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateFormatStringsIfNeeded");
}

id objc_msgSend__generateImageForString_isWeekend_underlineThickness_fontSize_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateImageForString:isWeekend:underlineThickness:fontSize:style:");
}

id objc_msgSend__generateImageWithString_color_fontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateImageWithString:color:fontSize:");
}

id objc_msgSend__generateWeekDayInitialsHeaderViewWithHorizontalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateWeekDayInitialsHeaderViewWithHorizontalSizeClass:");
}

id objc_msgSend__getEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getEvent");
}

id objc_msgSend__getMonthViewMonthContainingDate_hideMonthLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getMonthViewMonthContainingDate:hideMonthLabel:");
}

id objc_msgSend__getSortedBlocksFromOccurrenceBlocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSortedBlocksFromOccurrenceBlocks:");
}

id objc_msgSend__gridOfDaysHeightAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gridOfDaysHeightAdjustment");
}

id objc_msgSend__gridOfDaysYAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gridOfDaysYAdjustment");
}

id objc_msgSend__groupForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_groupForIndexPath:");
}

id objc_msgSend__groupForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_groupForSection:");
}

id objc_msgSend__haltAnimations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_haltAnimations");
}

id objc_msgSend__hasPaddingRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasPaddingRow");
}

id objc_msgSend__headerBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headerBackgroundColor");
}

id objc_msgSend__headerEligibleForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headerEligibleForCalendarDate:");
}

id objc_msgSend__headerFontForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headerFontForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__headerFontSizeForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headerFontSizeForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__heightForNumberOfMonthsPerRow_windowSize_heightSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightForNumberOfMonthsPerRow:windowSize:heightSizeClass:");
}

id objc_msgSend__heightForViewWithVisibleHeader_windowSize_heightSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightForViewWithVisibleHeader:windowSize:heightSizeClass:orientation:");
}

id objc_msgSend__heightForWeekdayLabelsForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightForWeekdayLabelsForSizeClass:");
}

id objc_msgSend__hidePressHighlightWithFadeDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hidePressHighlightWithFadeDuration:");
}

id objc_msgSend__hideSearchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideSearchBar");
}

id objc_msgSend__higherScopeCompactCalendarViewControllerRelativeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_higherScopeCompactCalendarViewControllerRelativeTo:");
}

id objc_msgSend__highlightEvent_dayViewDate_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_highlightEvent:dayViewDate:isAllDay:");
}

id objc_msgSend__horizontalVelocity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_horizontalVelocity");
}

id objc_msgSend__ignoreSelectedOccurrencesChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ignoreSelectedOccurrencesChangedNotification:");
}

id objc_msgSend__inboxTitleForNotificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inboxTitleForNotificationCount:");
}

id objc_msgSend__indexForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexForDate:");
}

id objc_msgSend__indexOfCellToScrollToForDateAndBuildIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfCellToScrollToForDateAndBuildIfNeeded:");
}

id objc_msgSend__indexPathForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForDate:");
}

id objc_msgSend__initActionIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initActionIdentifiers");
}

id objc_msgSend__initializeAndPushListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeAndPushListView");
}

id objc_msgSend__initializeBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeBackground");
}

id objc_msgSend__initializeCalendarsButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeCalendarsButton");
}

id objc_msgSend__initializeDaySummaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeDaySummaries");
}

id objc_msgSend__initializeDays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeDays");
}

id objc_msgSend__initializeGrayLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeGrayLine");
}

id objc_msgSend__initializeHeaderView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeHeaderView");
}

id objc_msgSend__initializeMonthNameLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeMonthNameLabel");
}

id objc_msgSend__initializeMonthViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeMonthViews");
}

id objc_msgSend__initializeThinLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeThinLine");
}

id objc_msgSend__interpolatedValueForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpolatedValueForSize:");
}

id objc_msgSend__invalidateMarkerTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateMarkerTimer");
}

id objc_msgSend__invalidateNavBarDateStringCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateNavBarDateStringCache");
}

id objc_msgSend__invalidateUpdateTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateUpdateTimer");
}

id objc_msgSend__invitedByString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invitedByString");
}

id objc_msgSend__isAddEventPopoverDisplayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAddEventPopoverDisplayed");
}

id objc_msgSend__isAnyWindowShowingDelegateCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAnyWindowShowingDelegateCalendar");
}

id objc_msgSend__isCarScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCarScreen");
}

id objc_msgSend__isCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCollapsed");
}

id objc_msgSend__isCurrentlyDraggingEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCurrentlyDraggingEvent");
}

id objc_msgSend__isDateWeekend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDateWeekend:");
}

id objc_msgSend__isLeadingEdgeToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isLeadingEdgeToday");
}

id objc_msgSend__isTextEditingInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTextEditingInProgress");
}

id objc_msgSend__isThisTheOnlyConnectedScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isThisTheOnlyConnectedScene");
}

id objc_msgSend__isTodayCircleFrameFullyUnobstructed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTodayCircleFrameFullyUnobstructed");
}

id objc_msgSend__isTransitioningTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTransitioningTraitCollection");
}

id objc_msgSend__isUserActivityForStateRestoration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isUserActivityForStateRestoration:");
}

id objc_msgSend__isVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isVisible");
}

id objc_msgSend__isWindowSizeFullscreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWindowSizeFullscreen:");
}

id objc_msgSend__itemForIndexPath_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemForIndexPath:cache:");
}

id objc_msgSend__labelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelFont");
}

id objc_msgSend__lastViewOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastViewOnScreen");
}

id objc_msgSend__lastVisibleIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastVisibleIndex");
}

id objc_msgSend__latestDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_latestDateComponents");
}

id objc_msgSend__latestVisibleWeekGroupView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_latestVisibleWeekGroupView");
}

id objc_msgSend__latestWeekGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_latestWeekGroup");
}

id objc_msgSend__launchTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchTestName");
}

id objc_msgSend__layOutSplitDividerFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layOutSplitDividerFrame");
}

id objc_msgSend__layoutCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutCells");
}

id objc_msgSend__layoutDayArea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDayArea");
}

id objc_msgSend__layoutDayInitialsView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDayInitialsView:");
}

id objc_msgSend__layoutDayNumberCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDayNumberCells");
}

id objc_msgSend__layoutDayTypeBadgeForDayNumber_yOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDayTypeBadgeForDayNumber:yOffset:");
}

id objc_msgSend__layoutDayViewPane(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutDayViewPane");
}

id objc_msgSend__layoutForSplitViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutForSplitViews");
}

id objc_msgSend__layoutGridlinesAndBackgrounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutGridlinesAndBackgrounds:");
}

id objc_msgSend__layoutInitialSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutInitialSubviews");
}

id objc_msgSend__layoutOverlayLegend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutOverlayLegend");
}

id objc_msgSend__layoutSingleOccurrence_index_numRows_drawTimeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutSingleOccurrence:index:numRows:drawTimeString:");
}

id objc_msgSend__layoutThinLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutThinLine");
}

id objc_msgSend__layoutVerticalDaySeparators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutVerticalDaySeparators");
}

id objc_msgSend__layoutYearNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutYearNumber");
}

id objc_msgSend__leftButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leftButton");
}

id objc_msgSend__leftDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leftDateFormatter");
}

id objc_msgSend__leftMarginWithOriginalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leftMarginWithOriginalValue:");
}

id objc_msgSend__legacy_drawInRect_withFont_lineBreakMode_alignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_legacy_drawInRect:withFont:lineBreakMode:alignment:");
}

id objc_msgSend__listViewShowsSingleDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listViewShowsSingleDay");
}

id objc_msgSend__listViewSwitchBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listViewSwitchBarButtonItem");
}

id objc_msgSend__listviewColumnCollapsedWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listviewColumnCollapsedWidth");
}

id objc_msgSend__loadAndShowAppropriateContentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadAndShowAppropriateContentView");
}

id objc_msgSend__loadCircleIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadCircleIfNeeded");
}

id objc_msgSend__loadCircledNumberIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadCircledNumberIfNeeded");
}

id objc_msgSend__loadCircledOverlayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadCircledOverlayIfNeeded");
}

id objc_msgSend__loadEventDataForMonthWeekView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadEventDataForMonthWeekView:");
}

id objc_msgSend__loadEventsForAllSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadEventsForAllSubviews");
}

id objc_msgSend__loadEventsForStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadEventsForStartDate:endDate:");
}

id objc_msgSend__loadEventsForViewsInRangeStartingAt_endingAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadEventsForViewsInRangeStartingAt:endingAt:");
}

id objc_msgSend__loadMonthAnimationStateBadgeIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMonthAnimationStateBadgeIfNeeded");
}

id objc_msgSend__loadMonthAnimationStateOverlayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMonthAnimationStateOverlayIfNeeded");
}

id objc_msgSend__loadOverlayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadOverlayIfNeeded");
}

id objc_msgSend__loadPressIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadPressIfNeeded");
}

id objc_msgSend__loadUnderlineIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadUnderlineIfNeeded");
}

id objc_msgSend__loadedBufferViewsLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadedBufferViewsLeft");
}

id objc_msgSend__loadedBufferViewsRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadedBufferViewsRight");
}

id objc_msgSend__locationString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locationString");
}

id objc_msgSend__mainFrameForEvent_atLastPosition_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mainFrameForEvent:atLastPosition:atPoint:");
}

id objc_msgSend__mainLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mainLoop");
}

id objc_msgSend__maxHeightOfTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maxHeightOfTableView");
}

id objc_msgSend__meContact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_meContact");
}

id objc_msgSend__monthFrameForMonthAfter_anchorMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthFrameForMonthAfter:anchorMonth:");
}

id objc_msgSend__monthFrameForMonthBefore_anchorMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthFrameForMonthBefore:anchorMonth:");
}

id objc_msgSend__monthHeaderHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthHeaderHeight");
}

id objc_msgSend__monthLabelColumnIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthLabelColumnIndex");
}

id objc_msgSend__monthOccurrenceAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthOccurrenceAtPoint:");
}

id objc_msgSend__monthWeekViewsUseVerticalCompression(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthWeekViewsUseVerticalCompression");
}

id objc_msgSend__monthsPerRowForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monthsPerRowForWindowSize:");
}

id objc_msgSend__navBarDateStringFromDate_includingMonth_includingYear_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navBarDateStringFromDate:includingMonth:includingYear:format:");
}

id objc_msgSend__navBarStringYearFontForTraitCollection_useSmallerSize_bold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navBarStringYearFontForTraitCollection:useSmallerSize:bold:");
}

id objc_msgSend__nearestValueForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestValueForSize:");
}

id objc_msgSend__newEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newEvent");
}

id objc_msgSend__nodeContainsViewControllersRequiringTeardown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nodeContainsViewControllersRequiringTeardown:");
}

id objc_msgSend__normalFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_normalFont");
}

id objc_msgSend__notificationForIndexPath_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationForIndexPath:cache:");
}

id objc_msgSend__notificationIsCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationIsCancelled:");
}

id objc_msgSend__notificationIsInvite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationIsInvite:");
}

id objc_msgSend__now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_now");
}

id objc_msgSend__numberFrameForDayIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberFrameForDayIndex:");
}

id objc_msgSend__numberOfDaysSortDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfDaysSortDescriptor");
}

id objc_msgSend__numberOfWeeksInSelectedMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfWeeksInSelectedMonth");
}

id objc_msgSend__occurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_occurrenceHeight");
}

id objc_msgSend__occurrencePadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_occurrencePadding");
}

id objc_msgSend__occurrenceViewForEventOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_occurrenceViewForEventOccurrence:");
}

id objc_msgSend__occurrenceViewForPopoverSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_occurrenceViewForPopoverSource");
}

id objc_msgSend__offsetAllViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_offsetAllViews:");
}

id objc_msgSend__offsetForDotInFrame_withDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_offsetForDotInFrame:withDot:");
}

id objc_msgSend__offsetNumberOfWeeksFromSelectedMonthForBottomVisibleMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_offsetNumberOfWeeksFromSelectedMonthForBottomVisibleMonth");
}

id objc_msgSend__offsetNumberOfWeeksFromSelectedMonthForTopVisibleMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_offsetNumberOfWeeksFromSelectedMonthForTopVisibleMonth");
}

id objc_msgSend__opaqueWeekendBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_opaqueWeekendBackgroundColor");
}

id objc_msgSend__openURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openURL:");
}

id objc_msgSend__organizerString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_organizerString");
}

id objc_msgSend__orientationForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orientationForSize:");
}

id objc_msgSend__overlayFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overlayFont");
}

id objc_msgSend__overlayFontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overlayFontSize");
}

id objc_msgSend__pageDecelerationTarget(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pageDecelerationTarget");
}

id objc_msgSend__paletteView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_paletteView");
}

id objc_msgSend__parentViewForCreationGesture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parentViewForCreationGesture");
}

id objc_msgSend__parentViewForCreationGesturePreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parentViewForCreationGesturePreview");
}

id objc_msgSend__performAction_forEventInvitationNotification_avoidUserInteraction_cancelled_cell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAction:forEventInvitationNotification:avoidUserInteraction:cancelled:cell:");
}

id objc_msgSend__performAction_forSuggestionNotification_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAction:forSuggestionNotification:save:");
}

id objc_msgSend__performActionForAllNotifications_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForAllNotifications:save:");
}

id objc_msgSend__performActionForAttendeeReplyNotification_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForAttendeeReplyNotification:save:");
}

id objc_msgSend__performActionForInviteReplayNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForInviteReplayNotification:");
}

id objc_msgSend__performActionForResourceChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForResourceChangeNotification:");
}

id objc_msgSend__performCustomRotationAnimationForMainWindowWithTransitionCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCustomRotationAnimationForMainWindowWithTransitionCoordinator:");
}

id objc_msgSend__performScrollTest_iterations_delta_length_scrollAxis_extraResultsBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:length:scrollAxis:extraResultsBlock:completionBlock:");
}

id objc_msgSend__persistActiveViewModeSettingToPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistActiveViewModeSettingToPreferences");
}

id objc_msgSend__pointForDotInFrame_withDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pointForDotInFrame:withDot:");
}

id objc_msgSend__popToViewControllerSatisfying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_popToViewControllerSatisfying:");
}

id objc_msgSend__popoverPresentationOperationInQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_popoverPresentationOperationInQueue");
}

id objc_msgSend__positionOfSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_positionOfSecond:");
}

id objc_msgSend__preferredFontForTextStyle_maximumContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferredFontForTextStyle:maximumContentSizeCategory:");
}

id objc_msgSend__preferredPostTransitionViewFromTraitCollection_toTraitCollection_currentViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferredPostTransitionViewFromTraitCollection:toTraitCollection:currentViewType:");
}

id objc_msgSend__presentAdaptiveModalPopoverViewController_relativeToBarButtonItem_permittedArrowDirections_contentSize_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentAdaptiveModalPopoverViewController:relativeToBarButtonItem:permittedArrowDirections:contentSize:animated:completion:");
}

id objc_msgSend__presentAdaptiveModalViewController_withPresentationStyleOverride_relativeToBarButtonItem_withSourceView_sourceRect_permittedArrowDirections_contentSize_passThroughViews_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentAdaptiveModalViewController:withPresentationStyleOverride:relativeToBarButtonItem:withSourceView:sourceRect:permittedArrowDirections:contentSize:passThroughViews:animated:completion:");
}

id objc_msgSend__presentDetailViewControllerAsPageSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentDetailViewControllerAsPageSheet:");
}

id objc_msgSend__presentEventViewController_forOccurrenceView_animated_showComments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentEventViewController:forOccurrenceView:animated:showComments:");
}

id objc_msgSend__presentEventViewController_forOccurrenceView_animated_showComments_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentEventViewController:forOccurrenceView:animated:showComments:completion:");
}

id objc_msgSend__presentSelfOnModalPresentationDelegateAnimated_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentSelfOnModalPresentationDelegateAnimated:withCompletionHandler:");
}

id objc_msgSend__presentationControllerDidDismissPopover_cleanSelectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentationControllerDidDismissPopover:cleanSelectionState:");
}

id objc_msgSend__presentedEditor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentedEditor");
}

id objc_msgSend__pressColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pressColor");
}

id objc_msgSend__processEventData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processEventData");
}

id objc_msgSend__processScrollingMessagesOnEveryFrameFromListViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processScrollingMessagesOnEveryFrameFromListViewController");
}

id objc_msgSend__purgeCachedOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeCachedOccurrence:");
}

id objc_msgSend__pushDetailViewControllerForEvent_animated_showComments_proposedTimeAttendee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushDetailViewControllerForEvent:animated:showComments:proposedTimeAttendee:");
}

id objc_msgSend__pushMonthViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushMonthViewControllerWithDate:animated:");
}

id objc_msgSend__rangeEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeEnd");
}

id objc_msgSend__rangeForFirstSequenceOfDCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeForFirstSequenceOfDCharacters:");
}

id objc_msgSend__rangeStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeStart");
}

id objc_msgSend__rePresentEditPopoverFromTargetView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rePresentEditPopoverFromTargetView:");
}

id objc_msgSend__realTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_realTest");
}

id objc_msgSend__rebuildDayNumberLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rebuildDayNumberLabels");
}

id objc_msgSend__rebuildOverlayLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rebuildOverlayLabels");
}

id objc_msgSend__recenterContentIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recenterContentIfNeeded");
}

id objc_msgSend__recursiveRemoveSelectedClonedViewsFromViewTree_skipSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recursiveRemoveSelectedClonedViewsFromViewTree:skipSet:");
}

id objc_msgSend__refreshIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshIfNeeded");
}

id objc_msgSend__refreshListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshListView");
}

id objc_msgSend__refreshTodayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshTodayView");
}

id objc_msgSend__refreshView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshView");
}

id objc_msgSend__registerGestureRecognizers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerGestureRecognizers");
}

id objc_msgSend__reloadAllViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadAllViews");
}

id objc_msgSend__reloadAllViewsForContentSizeCategoryChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadAllViewsForContentSizeCategoryChange");
}

id objc_msgSend__reloadAllViewsWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadAllViewsWithDate:");
}

id objc_msgSend__reloadDataIfVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadDataIfVisible");
}

id objc_msgSend__reloadHeaderView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadHeaderView");
}

id objc_msgSend__reloadMonthNameLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadMonthNameLabel");
}

id objc_msgSend__reloadMonthViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadMonthViews");
}

id objc_msgSend__reloadOccurrenceData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadOccurrenceData");
}

id objc_msgSend__reloadTableViewAndScrollIfNeededWithForceScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadTableViewAndScrollIfNeededWithForceScroll:");
}

id objc_msgSend__reloadYearNumberLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadYearNumberLabel");
}

id objc_msgSend__removeAllAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAllAnimations:");
}

id objc_msgSend__removeAnimatedGridComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAnimatedGridComponents");
}

id objc_msgSend__removeBottomView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBottomView");
}

id objc_msgSend__removeChildViewControllerForCurrentTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeChildViewControllerForCurrentTraits");
}

id objc_msgSend__removeColorBarConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeColorBarConstraintsIfNeeded");
}

id objc_msgSend__removeCommentPromptRelatedConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCommentPromptRelatedConstraintsIfNeeded");
}

id objc_msgSend__removeDateHighlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDateHighlight");
}

id objc_msgSend__removeDisclosureConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDisclosureConstraintsIfNeeded");
}

id objc_msgSend__removeLabelRelatedConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeLabelRelatedConstraintsIfNeeded");
}

id objc_msgSend__removeMonthHighlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeMonthHighlight");
}

id objc_msgSend__removeOverlayLegend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeOverlayLegend");
}

id objc_msgSend__removeTopView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTopView");
}

id objc_msgSend__replayJournal_withRootVC_topMainVC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replayJournal:withRootVC:topMainVC:");
}

id objc_msgSend__resetPaletteState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPaletteState");
}

id objc_msgSend__resetSelectionForDividedListState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetSelectionForDividedListState:");
}

id objc_msgSend__resetSplitView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetSplitView");
}

id objc_msgSend__resizeInterfaceForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resizeInterfaceForWindowSize:");
}

id objc_msgSend__responseButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_responseButtons");
}

id objc_msgSend__restoreLastUsedCalendarViewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreLastUsedCalendarViewType");
}

id objc_msgSend__restoreModelPersistedStateFromUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreModelPersistedStateFromUserActivity:");
}

id objc_msgSend__restoreSelectedCalendarsFromPreferenceIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreSelectedCalendarsFromPreferenceIfNeeded");
}

id objc_msgSend__restoreStateFromUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreStateFromUserActivity:");
}

id objc_msgSend__resumeToTodayTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resumeToTodayTimeout");
}

id objc_msgSend__reusableOccurrenceTableViewCellForEvent_underDate_inTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reusableOccurrenceTableViewCellForEvent:underDate:inTableView:");
}

id objc_msgSend__reuseWeekView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reuseWeekView:");
}

id objc_msgSend__rightDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rightDateFormatter");
}

id objc_msgSend__rightMarginWithOriginalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rightMarginWithOriginalValue:");
}

id objc_msgSend__romanNumeralFromInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_romanNumeralFromInt:");
}

id objc_msgSend__rootNavigationControllerForModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rootNavigationControllerForModel:");
}

id objc_msgSend__rootViewControllerForCarScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rootViewControllerForCarScene");
}

id objc_msgSend__rootViewControllerForModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rootViewControllerForModel:");
}

id objc_msgSend__roundValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roundValue:");
}

id objc_msgSend__roundedRectFrameWithDayFrame_dayLayerFrame_numberString_overlayString_compressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roundedRectFrameWithDayFrame:dayLayerFrame:numberString:overlayString:compressed:");
}

id objc_msgSend__roundedRectOriginForDayLayerFrame_roundedRectSize_withOverlay_compressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roundedRectOriginForDayLayerFrame:roundedRectSize:withOverlay:compressed:");
}

id objc_msgSend__rowDrawsBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rowDrawsBackground:");
}

id objc_msgSend__saveDraggedEventWithSpan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveDraggedEventWithSpan:");
}

id objc_msgSend__saveFilterAndNotifyWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveFilterAndNotifyWithReason:");
}

id objc_msgSend__saveStatus_forEventInvitationNotification_commit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveStatus:forEventInvitationNotification:commit:");
}

id objc_msgSend__saveStatus_forItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveStatus:forItemAtIndexPath:");
}

id objc_msgSend__scaledValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scaledValueForValue:");
}

id objc_msgSend__sceneIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sceneIdentifier");
}

id objc_msgSend__scrollEventIntoViewAndRequestPresentPopoverForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollEventIntoViewAndRequestPresentPopoverForEvent:");
}

id objc_msgSend__scrollListToNewSelectedDateAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollListToNewSelectedDateAnimated:");
}

id objc_msgSend__scrollToCurrentTimeOfDayAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollToCurrentTimeOfDayAnimated:");
}

id objc_msgSend__scrollToEvent_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollToEvent:animated:");
}

id objc_msgSend__scrollToSecond_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollToSecond:animated:completion:");
}

id objc_msgSend__scrollToWeekView_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollToWeekView:animated:completion:");
}

id objc_msgSend__scrollTypeFromOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollTypeFromOptions:");
}

id objc_msgSend__scrollViewVerticalVelocity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollViewVerticalVelocity");
}

id objc_msgSend__scrubAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrubAtPoint:");
}

id objc_msgSend__scrubWithTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrubWithTouches:");
}

id objc_msgSend__searchBar_proposedSearchFieldFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_searchBar:proposedSearchFieldFrame:");
}

id objc_msgSend__secondAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secondAtPosition:");
}

id objc_msgSend__selectEvent_animated_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectEvent:animated:context:");
}

id objc_msgSend__selectEvents_animated_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectEvents:animated:context:");
}

id objc_msgSend__selectEvents_updatingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectEvents:updatingModel:");
}

id objc_msgSend__selectOccurrenceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectOccurrenceView:");
}

id objc_msgSend__selectOccurrenceView_updatingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectOccurrenceView:updatingModel:");
}

id objc_msgSend__selectRowAtIndexPath_animated_scrollPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectRowAtIndexPath:animated:scrollPosition:");
}

id objc_msgSend__selectTodayForMainViewControllerContainer_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectTodayForMainViewControllerContainer:animated:");
}

id objc_msgSend__selectedCalendars(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedCalendars");
}

id objc_msgSend__selectedCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedCell");
}

id objc_msgSend__selectedDateAsCalendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedDateAsCalendarDate");
}

id objc_msgSend__selectedDateChangedToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedDateChangedToDate:");
}

id objc_msgSend__selectedDateIsVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedDateIsVisible");
}

id objc_msgSend__selectedOccurrenceFrontmostClonedViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedOccurrenceFrontmostClonedViews");
}

id objc_msgSend__selectedOccurrenceViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedOccurrenceViews");
}

id objc_msgSend__setAdditionalSelectionInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAdditionalSelectionInsets:");
}

id objc_msgSend__setAlwaysAllowPopoverPresentations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAlwaysAllowPopoverPresentations:");
}

id objc_msgSend__setAnyCalendarsHiddenByFocus_forceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAnyCalendarsHiddenByFocus:forceUpdate:");
}

id objc_msgSend__setAutoDisableCancelButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAutoDisableCancelButton:");
}

id objc_msgSend__setAutoScrollEdgeTransitionDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAutoScrollEdgeTransitionDistance:");
}

id objc_msgSend__setAutoScrollEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAutoScrollEnabled:");
}

id objc_msgSend__setBackdropStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackdropStyle:");
}

id objc_msgSend__setBackgroundView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundView:");
}

id objc_msgSend__setBottomPalette_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBottomPalette:");
}

id objc_msgSend__setCell_highlight_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCell:highlight:animated:");
}

id objc_msgSend__setCell_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCell:toDate:");
}

id objc_msgSend__setClipUnderlapWhileTransitioning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setClipUnderlapWhileTransitioning:");
}

id objc_msgSend__setContentInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContentInsets");
}

id objc_msgSend__setContentUnavailableConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContentUnavailableConfiguration:");
}

id objc_msgSend__setCurrentDateLabelString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentDateLabelString:");
}

id objc_msgSend__setCurrentTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentTraitCollection:");
}

id objc_msgSend__setDayViewToSplitViewVisibleState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDayViewToSplitViewVisibleState");
}

id objc_msgSend__setDoneButtonState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDoneButtonState");
}

id objc_msgSend__setEventTitleForTestingAutocomplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEventTitleForTestingAutocomplete:");
}

id objc_msgSend__setHeaderHeightForWeekGroupView_forceLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeaderHeightForWeekGroupView:forceLayout:");
}

id objc_msgSend__setHidesShadow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHidesShadow:");
}

id objc_msgSend__setHourHeightScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHourHeightScale:");
}

id objc_msgSend__setIgnoreBarButtonItemSiblings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIgnoreBarButtonItemSiblings:");
}

id objc_msgSend__setManagedNavigationControllerModalPresentationDelegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManagedNavigationControllerModalPresentationDelegates");
}

id objc_msgSend__setManualScrollEdgeAppearanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceEnabled:");
}

id objc_msgSend__setManualScrollEdgeAppearanceProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceProgress:");
}

id objc_msgSend__setMarginWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMarginWidth:");
}

id objc_msgSend__setMenuProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMenuProvider:");
}

id objc_msgSend__setMinimumDesiredHeight_forBarMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMinimumDesiredHeight:forBarMetrics:");
}

id objc_msgSend__setModal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setModal:");
}

id objc_msgSend__setModelDateForLaunch_restoreLastViewedDateFromPreferenceIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setModelDateForLaunch:restoreLastViewedDateFromPreferenceIfNeeded:");
}

id objc_msgSend__setNavigationStackOfMainViewControllersForTraitsTransitionFromTraitCollection_toNewTraitCollection_withPreTransitionViewType_withPreferredPostTransitionViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNavigationStackOfMainViewControllersForTraitsTransitionFromTraitCollection:toNewTraitCollection:withPreTransitionViewType:withPreferredPostTransitionViewType:");
}

id objc_msgSend__setNeedsHeaderUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNeedsHeaderUpdate");
}

id objc_msgSend__setNeedsUpdateContentUnavailableConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNeedsUpdateContentUnavailableConfiguration");
}

id objc_msgSend__setNeedsUserActivityUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNeedsUserActivityUpdate");
}

id objc_msgSend__setOffscreenCellsHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOffscreenCellsHidden:animated:");
}

id objc_msgSend__setOverallWritingDirectionFollowsLayoutDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverallWritingDirectionFollowsLayoutDirection:");
}

id objc_msgSend__setPaletteDisplaced(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPaletteDisplaced");
}

id objc_msgSend__setReduceLayoutProcessingForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setReduceLayoutProcessingForAnimation:");
}

id objc_msgSend__setRefreshControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRefreshControl:");
}

id objc_msgSend__setSearchBarEnabledState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSearchBarEnabledState:");
}

id objc_msgSend__setSegmentWidthsForViewSwitcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSegmentWidthsForViewSwitcher:");
}

id objc_msgSend__setSelectedDay_onMonthWeekView_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedDay:onMonthWeekView:animated:");
}

id objc_msgSend__setSelectedEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedEvents:");
}

id objc_msgSend__setShouldRespectPreferredContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldRespectPreferredContentSize:");
}

id objc_msgSend__setSplitViewPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSplitViewPosition");
}

id objc_msgSend__setToDayStateAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToDayStateAnimated:");
}

id objc_msgSend__setToMonthState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToMonthState");
}

id objc_msgSend__setToMonthStateAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToMonthStateAnimated:");
}

id objc_msgSend__setToYearState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToYearState");
}

id objc_msgSend__setTopVisibleDateAsSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTopVisibleDateAsSelectedDate");
}

id objc_msgSend__setTransformLayerRotationsAreEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTransformLayerRotationsAreEnabled:");
}

id objc_msgSend__setUpCustomAppearances(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpCustomAppearances");
}

id objc_msgSend__setUpGesturesAndModalMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpGesturesAndModalMode");
}

id objc_msgSend__setUpInitialViewWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpInitialViewWithDate:");
}

id objc_msgSend__setUpInteraction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpInteraction");
}

id objc_msgSend__setUpInteractions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpInteractions");
}

id objc_msgSend__setUpModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpModel");
}

id objc_msgSend__setUpMonthViewInMonthViewFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpMonthViewInMonthViewFrame");
}

id objc_msgSend__setUpSelectedCalendarsOnModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpSelectedCalendarsOnModel:");
}

id objc_msgSend__setUpSelectedOccurrenceViewsWithEvents_animated_autoScroll_resetSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpSelectedOccurrenceViewsWithEvents:animated:autoScroll:resetSelection:");
}

id objc_msgSend__setViewStatesForCachedEventCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setViewStatesForCachedEventCollection");
}

id objc_msgSend__setupConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupConstraints");
}

id objc_msgSend__setupDebugMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupDebugMenu:");
}

id objc_msgSend__setupListViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupListViewController");
}

id objc_msgSend__setupViewToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupViewToDate:");
}

id objc_msgSend__sharedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sharedState");
}

id objc_msgSend__shouldAnimateDots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnimateDots");
}

id objc_msgSend__shouldAnnotateAppEntitiesForDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnnotateAppEntitiesForDay:");
}

id objc_msgSend__shouldCollapseAllDayEventsAccordingToPolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldCollapseAllDayEventsAccordingToPolicy");
}

id objc_msgSend__shouldDisplayThreeColumns(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDisplayThreeColumns");
}

id objc_msgSend__shouldDoExternalPresentationOfManagedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDoExternalPresentationOfManagedNavigationController");
}

id objc_msgSend__shouldEnqueueDismissals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldEnqueueDismissals");
}

id objc_msgSend__shouldMaintainToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldMaintainToday");
}

id objc_msgSend__shouldResumeToTodayOnBecomeActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldResumeToTodayOnBecomeActive");
}

id objc_msgSend__shouldShowListViewInModeSwitcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowListViewInModeSwitcher");
}

id objc_msgSend__shouldShowMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowMessage");
}

id objc_msgSend__shouldShowNoEventsView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowNoEventsView");
}

id objc_msgSend__shouldShowTomorrowSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowTomorrowSection");
}

id objc_msgSend__shouldUseSideBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUseSideBar");
}

id objc_msgSend__shouldWrapTextUnderAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldWrapTextUnderAuthor");
}

id objc_msgSend__showAddSubscribedCalendarWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAddSubscribedCalendarWithURL:");
}

id objc_msgSend__showBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showBackground");
}

id objc_msgSend__showDate_inView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDate:inView:");
}

id objc_msgSend__showDebugReportProblemViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDebugReportProblemViewController");
}

id objc_msgSend__showDetailForEvent_animated_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailForEvent:animated:context:");
}

id objc_msgSend__showDetailForEvent_animated_showComments_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailForEvent:animated:showComments:context:");
}

id objc_msgSend__showDetailForEvent_animated_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailForEvent:animated:userInitiated:");
}

id objc_msgSend__showDetailForEvents_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailForEvents:animated:");
}

id objc_msgSend__showDetailForEvents_animated_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailForEvents:animated:userInitiated:");
}

id objc_msgSend__showDetailsForEvent_animated_showMode_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showDetailsForEvent:animated:showMode:context:");
}

id objc_msgSend__showEditorForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEditorForEvent:");
}

id objc_msgSend__showEvent_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEvent:animated:");
}

id objc_msgSend__showEvent_inView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEvent:inView:");
}

id objc_msgSend__showEvent_viewController_animated_showComments_modal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEvent:viewController:animated:showComments:modal:");
}

id objc_msgSend__showEventDetailsForOccurrence_inWeek_onDay_animatedScrollToVisible_showMode_context_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEventDetailsForOccurrence:inWeek:onDay:animatedScrollToVisible:showMode:context:creationMethod:");
}

id objc_msgSend__showEventDetailsForOccurrence_inWeek_onDay_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEventDetailsForOccurrence:inWeek:onDay:creationMethod:");
}

id objc_msgSend__showEventsWithoutChangingDate_animated_showComments_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEventsWithoutChangingDate:animated:showComments:context:");
}

id objc_msgSend__showListScrolledToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showListScrolledToDate:");
}

id objc_msgSend__showMonthOverlayInCellAtOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showMonthOverlayInCellAtOffset:animated:");
}

id objc_msgSend__showNowForMainViewControllerContainer_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showNowForMainViewControllerContainer:animated:");
}

id objc_msgSend__showNowWhenSameDaySelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showNowWhenSameDaySelected");
}

id objc_msgSend__showPressHighlightWithFadeDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showPressHighlightWithFadeDuration:");
}

id objc_msgSend__showRightBorder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showRightBorder");
}

id objc_msgSend__showSearchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSearchBar");
}

id objc_msgSend__showViewControllerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showViewControllerAtIndex:");
}

id objc_msgSend__showWeekDayInitialsForHeightSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showWeekDayInitialsForHeightSizeClass:");
}

id objc_msgSend__showingSplashScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showingSplashScreen");
}

id objc_msgSend__showsEventViewControllerAsFullScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showsEventViewControllerAsFullScreen:");
}

id objc_msgSend__simulateScrollWithTranslation_duration_willBeginDragging_didEndDragging_willBeginDecelerating_didEndDecelerating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateScrollWithTranslation:duration:willBeginDragging:didEndDragging:willBeginDecelerating:didEndDecelerating:");
}

id objc_msgSend__sizingContextWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sizingContextWindow");
}

id objc_msgSend__slideToAnimatePalleteShowingBackButton_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_slideToAnimatePalleteShowingBackButton:animated:");
}

id objc_msgSend__slideToHideEventDetailsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_slideToHideEventDetailsAnimated:");
}

id objc_msgSend__slideToShowEventDetails_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_slideToShowEventDetails:animated:");
}

id objc_msgSend__slowComputeCalendarDateForWeekFromStartDate_weekOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_slowComputeCalendarDateForWeekFromStartDate:weekOffset:");
}

id objc_msgSend__snapDateForOffset_snapToWeeks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_snapDateForOffset:snapToWeeks:");
}

id objc_msgSend__sort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sort");
}

id objc_msgSend__sortBlocks_intoRowsUsingDataFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortBlocks:intoRowsUsingDataFrom:");
}

id objc_msgSend__specialDayTypeForOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_specialDayTypeForOccurrence:");
}

id objc_msgSend__splashScreenDidDismissShouldNotify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_splashScreenDidDismissShouldNotify:");
}

id objc_msgSend__splitViewNavigationController_willShowViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_splitViewNavigationController:willShowViewController:animated:completion:");
}

id objc_msgSend__splitViewWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_splitViewWidth");
}

id objc_msgSend__standardLabelForFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_standardLabelForFontSize:");
}

id objc_msgSend__startMarkerTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startMarkerTimer");
}

id objc_msgSend__startTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTest");
}

id objc_msgSend__startUpdateTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startUpdateTimer");
}

id objc_msgSend__startingFrameForEvent_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startingFrameForEvent:atPoint:");
}

id objc_msgSend__stateRestoreSelectedCalendarsFromUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateRestoreSelectedCalendarsFromUserActivity:");
}

id objc_msgSend__stopPulsingToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopPulsingToday");
}

id objc_msgSend__strikeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_strikeColor");
}

id objc_msgSend__stringsIncludeSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringsIncludeSpacing");
}

id objc_msgSend__subTestNameForTargetInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subTestNameForTargetInterfaceOrientation:");
}

id objc_msgSend__subviewHeightForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subviewHeightForDate:");
}

id objc_msgSend__switcherFontOfSize_isSemibold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_switcherFontOfSize:isSemibold:");
}

id objc_msgSend__systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNamed:");
}

id objc_msgSend__tableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tableView");
}

id objc_msgSend__teardownSidebarConfigurationOfManagedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_teardownSidebarConfigurationOfManagedNavigationController");
}

id objc_msgSend__testClassForTestName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_testClassForTestName:");
}

id objc_msgSend__testEventWithConferenceNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_testEventWithConferenceNotes");
}

id objc_msgSend__textColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textColor");
}

id objc_msgSend__textInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textInsets");
}

id objc_msgSend__thinLineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_thinLineColor");
}

id objc_msgSend__thinSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_thinSystemFontOfSize:");
}

id objc_msgSend__threeColumnsDisplayIsAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_threeColumnsDisplayIsAllowed");
}

id objc_msgSend__timeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeColor");
}

id objc_msgSend__timeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeString:");
}

id objc_msgSend__titleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleColor");
}

id objc_msgSend__titleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleFont");
}

id objc_msgSend__todayCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_todayCell");
}

id objc_msgSend__todayDayLabelFontForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_todayDayLabelFontForSizeClass:");
}

id objc_msgSend__todayLocalizedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_todayLocalizedString");
}

id objc_msgSend__todaysDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_todaysDate");
}

id objc_msgSend__tooFarToAnimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tooFarToAnimate:");
}

id objc_msgSend__topExtensionHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topExtensionHeight");
}

id objc_msgSend__topPresentedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topPresentedController");
}

id objc_msgSend__tornDownJournalOfShownViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tornDownJournalOfShownViewControllers");
}

id objc_msgSend__totalEventsWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_totalEventsWidth");
}

id objc_msgSend__totalWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_totalWidth");
}

id objc_msgSend__unregisterGestureRecognizers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterGestureRecognizers");
}

id objc_msgSend__updateAddEventButtonEnabledness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAddEventButtonEnabledness");
}

id objc_msgSend__updateAllDayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAllDayView");
}

id objc_msgSend__updateAppEntityAnnotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAppEntityAnnotation");
}

id objc_msgSend__updateAppEntityAnnotationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAppEntityAnnotationState");
}

id objc_msgSend__updateBackButtonOnBackViewControllerToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackButtonOnBackViewControllerToDate:");
}

id objc_msgSend__updateBackButtonToDate_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackButtonToDate:container:");
}

id objc_msgSend__updateBackButtonToSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackButtonToSelectedDate");
}

id objc_msgSend__updateBadge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadge");
}

id objc_msgSend__updateBadgeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadgeAtIndex:");
}

id objc_msgSend__updateBadgeBackgroundColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadgeBackgroundColors");
}

id objc_msgSend__updateBadgeForCell_forDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadgeForCell:forDate:");
}

id objc_msgSend__updateBadges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBadges");
}

id objc_msgSend__updateCalendarButtonAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCalendarButtonAccessory");
}

id objc_msgSend__updateCalendarButtonSpinner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCalendarButtonSpinner");
}

id objc_msgSend__updateCalendarsButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCalendarsButtonConfiguration");
}

id objc_msgSend__updateCalendarsButtonMenuProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCalendarsButtonMenuProvider");
}

id objc_msgSend__updateCalendarsButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCalendarsButtonTitle");
}

id objc_msgSend__updateCell_atIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCell:atIndexPath:");
}

id objc_msgSend__updateCell_withBadgeDataIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCell:withBadgeDataIndex:");
}

id objc_msgSend__updateCellWidthIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCellWidthIfNeeded");
}

id objc_msgSend__updateChooserForFocusMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChooserForFocusMode");
}

id objc_msgSend__updateCircleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCircleColor");
}

id objc_msgSend__updateColorBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateColorBar");
}

id objc_msgSend__updateColorsForUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateColorsForUserInterfaceStyle:");
}

id objc_msgSend__updateDateLabelFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDateLabelFrame");
}

id objc_msgSend__updateDayBadges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDayBadges");
}

id objc_msgSend__updateDayFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDayFrames");
}

id objc_msgSend__updateDayHeaderFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDayHeaderFrames");
}

id objc_msgSend__updateDayTypeBadgeForDayNumber_withDayType_color_locale_forceImageUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDayTypeBadgeForDayNumber:withDayType:color:locale:forceImageUpdate:");
}

id objc_msgSend__updateDayTypeBadgesWithBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDayTypeBadgesWithBackgroundColor");
}

id objc_msgSend__updateDisplayedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDisplayedString");
}

id objc_msgSend__updateDisplayedStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDisplayedStrings");
}

id objc_msgSend__updateDividedListTopLineForDividedMode_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDividedListTopLineForDividedMode:animated:");
}

id objc_msgSend__updateDotImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDotImage");
}

id objc_msgSend__updateDotImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDotImageView");
}

id objc_msgSend__updateDraggingOffsetTimesForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDraggingOffsetTimesForPoint:");
}

id objc_msgSend__updateEventDetailsColumnViewFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEventDetailsColumnViewFrame");
}

id objc_msgSend__updateEventSummaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEventSummaries");
}

id objc_msgSend__updateFadeDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFadeDirection");
}

id objc_msgSend__updateFadeVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFadeVisibility");
}

id objc_msgSend__updateFadeWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFadeWidth");
}

id objc_msgSend__updateFilterLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFilterLabel");
}

id objc_msgSend__updateFilterState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFilterState");
}

id objc_msgSend__updateFocusBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFocusBanner");
}

id objc_msgSend__updateForCurrentTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateForCurrentTraits");
}

id objc_msgSend__updateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFormatter");
}

id objc_msgSend__updateGroupVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGroupVisibility");
}

id objc_msgSend__updateHeaderHeightsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeaderHeightsAnimated:");
}

id objc_msgSend__updateHeaderViewsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeaderViewsIfNeeded");
}

id objc_msgSend__updateInboxBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateInboxBarButtonItem");
}

id objc_msgSend__updateInfiniteScrollViewFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateInfiniteScrollViewFrame");
}

id objc_msgSend__updateInteractivePopAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateInteractivePopAllowed");
}

id objc_msgSend__updateLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLabels");
}

id objc_msgSend__updateLeftFixedSpaceBarButtonItemWidthWithViewController_targetWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLeftFixedSpaceBarButtonItemWidthWithViewController:targetWindowSize:");
}

id objc_msgSend__updateListViewFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateListViewFrame");
}

id objc_msgSend__updateMonthFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMonthFont");
}

id objc_msgSend__updateMonthTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMonthTitle");
}

id objc_msgSend__updateMonthTitleViewFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMonthTitleViewFont");
}

id objc_msgSend__updateNavbarStringForNewStateAfterWindowSizeChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavbarStringForNewStateAfterWindowSizeChange");
}

id objc_msgSend__updateNavigationControllerBackButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationControllerBackButton");
}

id objc_msgSend__updateNavigationControllerBackButtonToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationControllerBackButtonToDate:");
}

id objc_msgSend__updateOccurrenceBackgroundParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOccurrenceBackgroundParameters");
}

id objc_msgSend__updateOccurrenceTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOccurrenceTable");
}

id objc_msgSend__updateOccurrenceWithForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOccurrenceWithForce:");
}

id objc_msgSend__updateOccurrencesBounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOccurrencesBounds");
}

id objc_msgSend__updateOverlayLegend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOverlayLegend");
}

id objc_msgSend__updateOverlayMonthFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOverlayMonthFont");
}

id objc_msgSend__updatePaletteStateWithViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePaletteStateWithViewController:");
}

id objc_msgSend__updatePreferredContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePreferredContentSize");
}

id objc_msgSend__updateResponseButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateResponseButtons");
}

id objc_msgSend__updateSceneActivationConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSceneActivationConditions");
}

id objc_msgSend__updateSceneTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSceneTitle");
}

id objc_msgSend__updateSelectedViewsToMatchModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelectedViewsToMatchModel");
}

id objc_msgSend__updateSeparatorVisibilityForOccurrenceCell_atIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSeparatorVisibilityForOccurrenceCell:atIndexPath:");
}

id objc_msgSend__updateSeparatorVisibilityForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSeparatorVisibilityForRowAtIndexPath:");
}

id objc_msgSend__updateShouldAnnotateAppEntities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateShouldAnnotateAppEntities");
}

id objc_msgSend__updateShouldAnnotateByDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateShouldAnnotateByDay");
}

id objc_msgSend__updateSingleDaySummaryForDayIndex_withData_date_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSingleDaySummaryForDayIndex:withData:date:calendar:");
}

id objc_msgSend__updateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateString");
}

id objc_msgSend__updateSubviewAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSubviewAlpha");
}

id objc_msgSend__updateSubviewsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSubviewsIfNeeded");
}

id objc_msgSend__updateSuggestionPropertiesWithNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuggestionPropertiesWithNotification:");
}

id objc_msgSend__updateTableAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTableAlpha:");
}

id objc_msgSend__updateTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTextColor");
}

id objc_msgSend__updateTimeMarker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeMarker");
}

id objc_msgSend__updateTimeMarkerExtensionColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeMarkerExtensionColor:");
}

id objc_msgSend__updateTimeMarkerTodayDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeMarkerTodayDay");
}

id objc_msgSend__updateTimeStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimeStrings");
}

id objc_msgSend__updateToMatchMonthViewIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateToMatchMonthViewIfNeeded");
}

id objc_msgSend__updateTodayButtonPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTodayButtonPosition");
}

id objc_msgSend__updateUserActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUserActivity");
}

id objc_msgSend__updateViewSwitcherFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewSwitcherFont");
}

id objc_msgSend__updateViewSwitcherSegmentWidthsAfterWindowSizeChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewSwitcherSegmentWidthsAfterWindowSizeChange");
}

id objc_msgSend__updateViewsForTimeZoneChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewsForTimeZoneChange");
}

id objc_msgSend__updateWeekDayHeaderDayFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekDayHeaderDayFrames");
}

id objc_msgSend__updateWeekHighlightsForDragPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekHighlightsForDragPoint:");
}

id objc_msgSend__updateWeekNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekNumber");
}

id objc_msgSend__updateWeekNumberAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekNumberAnimated:");
}

id objc_msgSend__updateWeekNumberFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekNumberFont");
}

id objc_msgSend__updateWeekNumberLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekNumberLabel");
}

id objc_msgSend__updateWeekViewContentHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekViewContentHeight");
}

id objc_msgSend__updateWeekendIndices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWeekendIndices");
}

id objc_msgSend__updateYearNumbersAnimated_withForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateYearNumbersAnimated:withForce:");
}

id objc_msgSend__useLargeFormatBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useLargeFormatBehavior");
}

id objc_msgSend__useNewPhonePlusMetricsForSizeParadigm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useNewPhonePlusMetricsForSizeParadigm:");
}

id objc_msgSend__usePortraitLayoutForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_usePortraitLayoutForSize:");
}

id objc_msgSend__verticalGridExtensionImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verticalGridExtensionImage");
}

id objc_msgSend__verticalOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verticalOffset");
}

id objc_msgSend__verticalVelocity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verticalVelocity");
}

id objc_msgSend__view_containsCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_view:containsCalendarDate:");
}

id objc_msgSend__viewControllerExistsInPresentationChainThatShouldNotRotate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerExistsInPresentationChainThatShouldNotRotate");
}

id objc_msgSend__viewControllerForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerForIndex:");
}

id objc_msgSend__viewControllerRequiresSystemPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerRequiresSystemPresentation:");
}

id objc_msgSend__viewControllerTreeIsEligibleForJournalingConsideration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerTreeIsEligibleForJournalingConsideration:");
}

id objc_msgSend__viewForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewForCalendarDate:");
}

id objc_msgSend__viewForCalendarDateContainsFirstDayOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewForCalendarDateContainsFirstDayOfMonth:");
}

id objc_msgSend__viewFromGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewFromGesture:");
}

id objc_msgSend__viewSwitcherIndexRepresentingViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewSwitcherIndexRepresentingViewType:");
}

id objc_msgSend__viewSwitcherLabelStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewSwitcherLabelStrings");
}

id objc_msgSend__viewSwitcherNumSegments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewSwitcherNumSegments");
}

id objc_msgSend__viewSwitcherSegmentWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewSwitcherSegmentWidth");
}

id objc_msgSend__viewSwitcherSegmentedControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewSwitcherSegmentedControl");
}

id objc_msgSend__viewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewType");
}

id objc_msgSend__viewTypeRepresentedByViewSwitcherIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewTypeRepresentedByViewSwitcherIndex:");
}

id objc_msgSend__viewingEventDetailsColumn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewingEventDetailsColumn");
}

id objc_msgSend__visibleOccurrenceViewsWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleOccurrenceViewsWithOptions:");
}

id objc_msgSend__visibleSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleSize");
}

id objc_msgSend__weekDayInitialsFontForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekDayInitialsFontForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__weekGroup_containsOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekGroup:containsOccurrence:");
}

id objc_msgSend__weekGroupForEvent_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekGroupForEvent:occurrenceDate:");
}

id objc_msgSend__weekGroupForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekGroupForPoint:");
}

id objc_msgSend__weekNumberFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekNumberFont");
}

id objc_msgSend__weekStartForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekStartForDate:");
}

id objc_msgSend__weekViewAtPoint_pointInWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekViewAtPoint:pointInWeek:");
}

id objc_msgSend__weekViewAtScrollPoint_pointInWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekViewAtScrollPoint:pointInWeek:");
}

id objc_msgSend__weekdayImageForDayNumberString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekdayImageForDayNumberString:");
}

id objc_msgSend__weekendImageForDayNumberString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_weekendImageForDayNumberString:");
}

id objc_msgSend__widthForDayAtPoint_isMovingRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_widthForDayAtPoint:isMovingRight:");
}

id objc_msgSend__widthOfSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_widthOfSpace");
}

id objc_msgSend__willKeyCommandChangeSelectedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willKeyCommandChangeSelectedDate:");
}

id objc_msgSend__willKeyCommandChangeSelectedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willKeyCommandChangeSelectedEvent:");
}

id objc_msgSend__xOffsetForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xOffsetForDate:");
}

id objc_msgSend__xSpacingForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xSpacingForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__yLocationForMonthLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yLocationForMonthLabel");
}

id objc_msgSend__yOffsetForMonthCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yOffsetForMonthCells:");
}

id objc_msgSend__yOffsetForNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yOffsetForNumber");
}

id objc_msgSend__yOffsetForRoundedRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yOffsetForRoundedRect:");
}

id objc_msgSend__yOffsetForWeekdayLabelsWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yOffsetForWeekdayLabelsWithSizeClass:");
}

id objc_msgSend__ySpacingForNumberOfMonthsPerRow_windowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ySpacingForNumberOfMonthsPerRow:windowSize:");
}

id objc_msgSend__yearLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yearLayoutMargins");
}

id objc_msgSend__yearNumberFontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yearNumberFontSize");
}

id objc_msgSend__yearString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yearString");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteTime");
}

id objc_msgSend_acceptSuggestedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptSuggestedEvent:");
}

id objc_msgSend_accountsInInitialSyncCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsInInitialSyncCount");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "action");
}

id objc_msgSend_actionBodyString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionBodyString");
}

id objc_msgSend_actionBodyStringAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionBodyStringAction");
}

id objc_msgSend_actionWithTitle_image_identifier_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:image:identifier:handler:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actions");
}

id objc_msgSend_actionsForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionsForNotification:");
}

id objc_msgSend_actionsForNotification_proposedTimeAttendee_eventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionsForNotification:proposedTimeAttendee:eventStore:");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationState");
}

id objc_msgSend_activeWidthSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeWidthSizeClass");
}

id objc_msgSend_activityForActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityForActivity:");
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityType");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAlarm:");
}

id objc_msgSend_addAnchoredValue_forSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnchoredValue:forSize:");
}

id objc_msgSend_addAnchoredValue_forWindowSizeHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnchoredValue:forWindowSizeHeight:");
}

id objc_msgSend_addAnchoredValue_forWindowSizeWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnchoredValue:forWindowSizeWidth:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimations:");
}

id objc_msgSend_addAttendee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttendee:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addBulletedListItemWithTitle_description_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulletedListItemWithTitle:description:image:");
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButton:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addClip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClip");
}

id objc_msgSend_addCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletion:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEventBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventBarButtonItem");
}

id objc_msgSend_addEventDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventDelegate");
}

id objc_msgSend_addEventPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventPressed");
}

id objc_msgSend_addEventToSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventToSelection:");
}

id objc_msgSend_addEventToSelection_inWeek_updateModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventToSelection:inWeek:updateModel:");
}

id objc_msgSend_addFadeMaskForRect_leftSide_start_end_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFadeMaskForRect:leftSide:start:end:withContext:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addInteraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInteraction:");
}

id objc_msgSend_addItemState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemState");
}

id objc_msgSend_addItemViewControllerManager_didCompleteWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemViewControllerManager:didCompleteWithAction:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addObserversForController_todayButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserversForController:todayButton:");
}

id objc_msgSend_addOccurrenceAwaitingRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOccurrenceAwaitingRefresh:");
}

id objc_msgSend_addOccurrenceBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOccurrenceBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addPresentedViewController_withPresenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPresentedViewController:withPresenter:");
}

id objc_msgSend_addPushedViewController_withPresenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPushedViewController:withPresenter:");
}

id objc_msgSend_addRespondedNotificationObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRespondedNotificationObjectID:");
}

id objc_msgSend_addSegmentWithFrame_splitLeftEdge_splitRightEdge_fadeLeftEdge_fadeRightEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSegmentWithFrame:splitLeftEdge:splitRightEdge:fadeLeftEdge:fadeRightEdge:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addTipObserversFor_todayButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTipObserversFor:todayButton:");
}

id objc_msgSend_addToolbarButtonItemsWithViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToolbarButtonItemsWithViewController:");
}

id objc_msgSend_addUserInfoEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUserInfoEntriesFromDictionary:");
}

id objc_msgSend_addViewToQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addViewToQueue:");
}

id objc_msgSend_addViewToScroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addViewToScroller:");
}

id objc_msgSend_addViewToScroller_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addViewToScroller:isAllDay:");
}

id objc_msgSend_adjustForVisibleRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustForVisibleRect:");
}

id objc_msgSend_adjustHighlight_forDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustHighlight:forDay:");
}

id objc_msgSend_adjustLoadedViewRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustLoadedViewRange");
}

id objc_msgSend_adjustSelectedDateForNewMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustSelectedDateForNewMonth:");
}

id objc_msgSend_adjustVisibleAllDayOccurrenceLabelsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustVisibleAllDayOccurrenceLabelsAnimated:");
}

id objc_msgSend_adjustedContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedContentInset");
}

id objc_msgSend_adjustedSeparatorInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedSeparatorInsets");
}

id objc_msgSend_alarmWithRelativeOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarmWithRelativeOffset:");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_allAccountsOffline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAccountsOffline");
}

id objc_msgSend_allComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allComponents");
}

id objc_msgSend_allDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDay");
}

id objc_msgSend_allDayAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayAlpha");
}

id objc_msgSend_allDayBackgroundColorOriginY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayBackgroundColorOriginY");
}

id objc_msgSend_allDayLabelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayLabelFont");
}

id objc_msgSend_allDayLabelOriginY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayLabelOriginY");
}

id objc_msgSend_allDayOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayOccurrences");
}

id objc_msgSend_allDayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayView");
}

id objc_msgSend_allEventNotificationsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allEventNotificationsCount");
}

id objc_msgSend_allEventsIndividuallyRepresented_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allEventsIndividuallyRepresented:");
}

id objc_msgSend_allEventsValidForAction_fromEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allEventsValidForAction:fromEvents:");
}

id objc_msgSend_allEventsWithUniqueId_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allEventsWithUniqueId:occurrenceDate:");
}

id objc_msgSend_allGroups(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allGroups");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allOccurrenceViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allOccurrenceViews");
}

id objc_msgSend_allSceneManagers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSceneManagers");
}

id objc_msgSend_allSelectedEventsIndividuallyRepresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSelectedEventsIndividuallyRepresented");
}

id objc_msgSend_allViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allViews");
}

id objc_msgSend_allowEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowEvents");
}

id objc_msgSend_allowsContentModifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsContentModifications");
}

id objc_msgSend_allowsOverriddenRightNavigationBarItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsOverriddenRightNavigationBarItems");
}

id objc_msgSend_allowsOverriddenToolbarItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsOverriddenToolbarItems");
}

id objc_msgSend_allowsParticipationStatusModifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsParticipationStatusModifications");
}

id objc_msgSend_allowsResponseCommentModifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsResponseCommentModifications");
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alpha");
}

id objc_msgSend_alwaysAnimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alwaysAnimate");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_animatableDateLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animatableDateLabel");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateAlongsideTransitionInView_animation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransitionInView:animation:completion:");
}

id objc_msgSend_animateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateBlock:");
}

id objc_msgSend_animateShowingSearchBarAnimated_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateShowingSearchBarAnimated:withCompletion:");
}

id objc_msgSend_animateToDayLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToDayLayout");
}

id objc_msgSend_animateToDayWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToDayWithCompletion:");
}

id objc_msgSend_animateToListWithCompletion_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToListWithCompletion:inContext:");
}

id objc_msgSend_animateToMonthLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToMonthLayout");
}

id objc_msgSend_animateToMonthViewWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToMonthViewWithCompletion:");
}

id objc_msgSend_animateToMonthWeekSize_divided_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToMonthWeekSize:divided:");
}

id objc_msgSend_animateToMonthWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToMonthWithCompletion:");
}

id objc_msgSend_animateToMonthWithCompletion_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToMonthWithCompletion:inContext:");
}

id objc_msgSend_animateToScale_fromScale_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToScale:fromScale:completionBlock:");
}

id objc_msgSend_animateToYearViewWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToYearViewWithCompletion:");
}

id objc_msgSend_animateVisible_duration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateVisible:duration:completion:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:");
}

id objc_msgSend_animateWithSpringDuration_bounce_initialSpringVelocity_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithSpringDuration:bounce:initialSpringVelocity:delay:options:animations:completion:");
}

id objc_msgSend_animating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animating");
}

id objc_msgSend_animationDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationDuration");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appGroupIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appGroupIdentifier");
}

id objc_msgSend_appearanceWhenContainedInInstancesOfClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appearanceWhenContainedInInstancesOfClasses:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application");
}

id objc_msgSend_application_runTest_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:runTest:options:");
}

id objc_msgSend_applicationDidForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidForeground");
}

id objc_msgSend_applicationLastActiveTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationLastActiveTime");
}

id objc_msgSend_applicationLastActiveTimeProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationLastActiveTimeProvider");
}

id objc_msgSend_applicationRecordForURL_incomplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationRecordForURL:incomplete:");
}

id objc_msgSend_applicationRequestDelayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationRequestDelayer");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applyLoadedOccurrencesWithBatching_animated_reverse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyLoadedOccurrencesWithBatching:animated:reverse:completion:");
}

id objc_msgSend_applyMonthAnimationStateAdjustments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyMonthAnimationStateAdjustments");
}

id objc_msgSend_areContextualRemindersSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areContextualRemindersSupported");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayByExcludingObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByExcludingObjectsInArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrowDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrowDirection");
}

id objc_msgSend_ascender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ascender");
}

id objc_msgSend_asyncLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asyncLoading");
}

id objc_msgSend_attachedTodayCircle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachedTodayCircle");
}

id objc_msgSend_attemptDisplayReviewPrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptDisplayReviewPrompt");
}

id objc_msgSend_attendees(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attendees");
}

id objc_msgSend_attributedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedText");
}

id objc_msgSend_attributedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTime");
}

id objc_msgSend_attributedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitle");
}

id objc_msgSend_attributedTitleForLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitleForLabel");
}

id objc_msgSend_attributedTitleForWrappingLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitleForWrappingLabel");
}

id objc_msgSend_attributedTitleWithParagraphStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitleWithParagraphStyle:");
}

id objc_msgSend_augmentEventDetailsContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "augmentEventDetailsContext:");
}

id objc_msgSend_authorAddressForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorAddressForIdentity:");
}

id objc_msgSend_authorCacheKeyForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorCacheKeyForIdentity:");
}

id objc_msgSend_authorCacheObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorCacheObjectForKey:");
}

id objc_msgSend_authorCacheSetObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorCacheSetObject:forKey:");
}

id objc_msgSend_authorView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorView");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatus");
}

id objc_msgSend_authorizationStatusForBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatusForBundleIdentifier:");
}

id objc_msgSend_automaticGeocodingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automaticGeocodingEnabled");
}

id objc_msgSend_avatarView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avatarView");
}

id objc_msgSend_backButtonTitleForEventDetails(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backButtonTitleForEventDetails");
}

id objc_msgSend_backGroundCornerMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backGroundCornerMask");
}

id objc_msgSend_backGroundCornerMaskforEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backGroundCornerMaskforEventID:");
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "background");
}

id objc_msgSend_backgroundAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundAlpha");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backgroundImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundImage");
}

id objc_msgSend_backgroundInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundInsets");
}

id objc_msgSend_backgroundView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundView");
}

id objc_msgSend_badgeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeColor");
}

id objc_msgSend_badgeDiameter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeDiameter");
}

id objc_msgSend_badgeFrameFromDayNumberFrame_isRightToLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeFrameFromDayNumberFrame:isRightToLeft:");
}

id objc_msgSend_badgeLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeLocale");
}

id objc_msgSend_badgeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgeType");
}

id objc_msgSend_badgedCalendarIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badgedCalendarIcon:");
}

id objc_msgSend_baselineForWeekdayLabelsWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineForWeekdayLabelsWithSizeClass:");
}

id objc_msgSend_baselineForWeekdayNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineForWeekdayNumbers");
}

id objc_msgSend_baselineOffsetFromTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineOffsetFromTop");
}

id objc_msgSend_baselineOffsetFromTopOfLayerForFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineOffsetFromTopOfLayerForFontSize:");
}

id objc_msgSend_becomeCurrent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeCurrent");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_beganHorizontalDeceleration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beganHorizontalDeceleration");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginAppearanceTransition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAppearanceTransition:animated:");
}

id objc_msgSend_beginEditingOccurrence_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginEditingOccurrence:creationMethod:");
}

id objc_msgSend_beginLaunch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginLaunch:");
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUpdates");
}

id objc_msgSend_bestDateForNewEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bestDateForNewEvent");
}

id objc_msgSend_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:");
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:cornerRadius:");
}

id objc_msgSend_birthdayContactIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "birthdayContactIdentifier");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_blacklistedDismissalClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blacklistedDismissalClasses");
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_blueComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blueComponent");
}

id objc_msgSend_bodyStringDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyStringDict");
}

id objc_msgSend_boldButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldButton");
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldSystemFontOfSize:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomPadding");
}

id objc_msgSend_bottomPinningProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomPinningProximity");
}

id objc_msgSend_bottomShadowMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomShadowMargin");
}

id objc_msgSend_bottomView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomView");
}

id objc_msgSend_bottomViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomViewController");
}

id objc_msgSend_boundingRectWithSize_options_attributes_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:attributes:context:");
}

id objc_msgSend_boundingRectWithSize_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:context:");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "build");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleId");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_buttonTray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTray");
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithType:");
}

id objc_msgSend_cachedCalculatedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedCalculatedValues");
}

id objc_msgSend_cachedOccurrenceAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOccurrenceAtIndexPath:");
}

id objc_msgSend_cachedOccurrenceAtIndexPath_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOccurrenceAtIndexPath:usingFilter:");
}

id objc_msgSend_cachedOccurrencesAreLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOccurrencesAreLoaded");
}

id objc_msgSend_cachedOccurrencesForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOccurrencesForSection:");
}

id objc_msgSend_cachedSpecialDayDataForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedSpecialDayDataForSection:");
}

id objc_msgSend_cal_hasSchemeTel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cal_hasSchemeTel");
}

id objc_msgSend_cal_isMultidayEventForUIWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cal_isMultidayEventForUIWithStartDate:endDate:");
}

id objc_msgSend_calculationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculationType");
}

id objc_msgSend_calendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendar");
}

id objc_msgSend_calendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDate");
}

id objc_msgSend_calendarDateByAddingDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateByAddingDays:");
}

id objc_msgSend_calendarDateByAddingMonths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateByAddingMonths:");
}

id objc_msgSend_calendarDateByAddingWeeks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateByAddingWeeks:");
}

id objc_msgSend_calendarDateByAddingYears_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateByAddingYears:");
}

id objc_msgSend_calendarDateByComponentwiseAddingSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateByComponentwiseAddingSeconds:");
}

id objc_msgSend_calendarDateForDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForDay");
}

id objc_msgSend_calendarDateForEndOfDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForEndOfDay");
}

id objc_msgSend_calendarDateForEndOfMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForEndOfMonth");
}

id objc_msgSend_calendarDateForEndOfWeekWithWeekStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForEndOfWeekWithWeekStart:");
}

id objc_msgSend_calendarDateForEndOfYear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForEndOfYear");
}

id objc_msgSend_calendarDateForMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForMonth");
}

id objc_msgSend_calendarDateForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForPoint:");
}

id objc_msgSend_calendarDateForSubviewAboveSubviewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForSubviewAboveSubviewWithCalendarDate:");
}

id objc_msgSend_calendarDateForSubviewBelowSubviewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForSubviewBelowSubviewWithCalendarDate:");
}

id objc_msgSend_calendarDateForWeekWithWeekStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForWeekWithWeekStart:");
}

id objc_msgSend_calendarDateForYear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateForYear");
}

id objc_msgSend_calendarDateInTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateInTimeZone:");
}

id objc_msgSend_calendarDateWithAbsoluteTime_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateWithAbsoluteTime:timeZone:");
}

id objc_msgSend_calendarDateWithDate_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateWithDate:timeZone:");
}

id objc_msgSend_calendarDateWithDateComponents_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarDateWithDateComponents:timeZone:");
}

id objc_msgSend_calendarFromEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarFromEventStore:");
}

id objc_msgSend_calendarIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarIdentifier");
}

id objc_msgSend_calendarItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarItem");
}

id objc_msgSend_calendarItemIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarItemIdentifier");
}

id objc_msgSend_calendarItemWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarItemWithIdentifier:");
}

id objc_msgSend_calendarModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarModel");
}

id objc_msgSend_calendarOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarOrder");
}

id objc_msgSend_calendarSignpostHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarSignpostHandle");
}

id objc_msgSend_calendarTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarTimeZone");
}

id objc_msgSend_calendarToPasteTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarToPasteTo");
}

id objc_msgSend_calendarsBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarsBarButtonItem");
}

id objc_msgSend_calendarsButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarsButtonTitle");
}

id objc_msgSend_calendarsForEntityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarsForEntityType:");
}

id objc_msgSend_canAnimateToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAnimateToDate:");
}

id objc_msgSend_canBeDirectlyManaged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeDirectlyManaged");
}

id objc_msgSend_canDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDismiss");
}

id objc_msgSend_canManagePresentationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canManagePresentationStyle");
}

id objc_msgSend_canOpenApplication_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canOpenApplication:reason:");
}

id objc_msgSend_canPerformAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformAction:withSender:");
}

id objc_msgSend_canPerformPaste(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformPaste");
}

id objc_msgSend_canRequirePushOrPresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRequirePushOrPresentation");
}

id objc_msgSend_canSelectRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSelectRow:");
}

id objc_msgSend_canShowAvatarViewWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowAvatarViewWithTraitCollection:");
}

id objc_msgSend_canShowViewControllerForEvent_withParticipantRecipients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowViewControllerForEvent:withParticipantRecipients:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelAllRendering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllRendering");
}

id objc_msgSend_cancelButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelButton");
}

id objc_msgSend_cancelEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEditing");
}

id objc_msgSend_cancelOutstandingOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelOutstandingOperations");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelScrollingAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelScrollingAnimation");
}

id objc_msgSend_cancelSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelSearch");
}

id objc_msgSend_cancelTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTimer");
}

id objc_msgSend_capHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capHeight");
}

id objc_msgSend_capitalizedStringWithLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capitalizedStringWithLocale:");
}

id objc_msgSend_captureSnapshotRect_fromView_withSnapshotType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "captureSnapshotRect:fromView:withSnapshotType:");
}

id objc_msgSend_cellClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellClass");
}

id objc_msgSend_cellClassForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellClassForNotification:");
}

id objc_msgSend_cellFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellFactory");
}

id objc_msgSend_cellForRow_allowAsyncLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForRow:allowAsyncLoading:");
}

id objc_msgSend_cellForRow_underDate_inTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForRow:underDate:inTableView:");
}

id objc_msgSend_cellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForRowAtIndexPath:");
}

id objc_msgSend_cellForSource_withModel_inTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForSource:withModel:inTableView:");
}

id objc_msgSend_cellFrameDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellFrameDictionary");
}

id objc_msgSend_cellFramesForWeekContainingDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellFramesForWeekContainingDate:");
}

id objc_msgSend_cellHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellHeight");
}

id objc_msgSend_cellSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellSize");
}

id objc_msgSend_cellWasTapped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellWasTapped");
}

id objc_msgSend_cellsDisplayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellsDisplayed");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centerDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerDateComponents");
}

id objc_msgSend_centerOnCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerOnCalendar:");
}

id objc_msgSend_centerStringForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerStringForDate:");
}

id objc_msgSend_centerViewOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerViewOnScreen");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerXAnchor");
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYAnchor");
}

id objc_msgSend_centerYOffsetForTitleLabelWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYOffsetForTitleLabelWithSizeClass:");
}

id objc_msgSend_centeredCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centeredCalendar");
}

id objc_msgSend_cgColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cgColor");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeType");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characters");
}

id objc_msgSend_checkLocationAuthorizationAndAllowEventLocationPrediction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkLocationAuthorizationAndAllowEventLocationPrediction");
}

id objc_msgSend_checkTestPreconditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkTestPreconditions");
}

id objc_msgSend_childViewControllerChangedForCurrentTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerChangedForCurrentTraits");
}

id objc_msgSend_childViewControllerClassForTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerClassForTraits:");
}

id objc_msgSend_childViewControllerForCompactWidthCompactHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerForCompactWidthCompactHeight");
}

id objc_msgSend_childViewControllerForCompactWidthRegularHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerForCompactWidthRegularHeight");
}

id objc_msgSend_childViewControllerForRegularWidthCompactHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerForRegularWidthCompactHeight");
}

id objc_msgSend_childViewControllerForRegularWidthRegularHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerForRegularWidthRegularHeight");
}

id objc_msgSend_childViewControllerForUnknownTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllerForUnknownTraits");
}

id objc_msgSend_childViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllers");
}

id objc_msgSend_circleDiameter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleDiameter");
}

id objc_msgSend_circleDiameterCompressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleDiameterCompressed");
}

id objc_msgSend_circleDiameterWithOverlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleDiameterWithOverlay");
}

id objc_msgSend_circleDiameterWithOverlayLarge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleDiameterWithOverlayLarge");
}

id objc_msgSend_circleFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleFrame");
}

id objc_msgSend_circleYOffsetCompressed_containsFirstDayOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circleYOffsetCompressed:containsFirstDayOfMonth:");
}

id objc_msgSend_circled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circled");
}

id objc_msgSend_circledFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "circledFontForSize:");
}

id objc_msgSend_classForStackBaseContainerForCurrentTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classForStackBaseContainerForCurrentTraits");
}

id objc_msgSend_cleanUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUp");
}

id objc_msgSend_cleanupSelectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupSelectionState");
}

id objc_msgSend_clearCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCache");
}

id objc_msgSend_clearCachedFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCachedFonts");
}

id objc_msgSend_clearCalculatedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCalculatedValues");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clearSelection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSelection");
}

id objc_msgSend_clearTemporaryViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearTemporaryViews");
}

id objc_msgSend_closestOccurrenceToTomorrowForEventObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestOccurrenceToTomorrowForEventObjectID:");
}

id objc_msgSend_collapsedSectionIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collapsedSectionIdentifiers");
}

id objc_msgSend_collectionForDayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionForDayType:");
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "color");
}

id objc_msgSend_colorBarConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorBarConstraints");
}

id objc_msgSend_colorEffectSaturate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorEffectSaturate:");
}

id objc_msgSend_colorForCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorForCalendar:");
}

id objc_msgSend_colorNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorNamed:");
}

id objc_msgSend_colorString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorString");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithCGColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithCGColor:");
}

id objc_msgSend_colorWithDynamicProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithDynamicProvider:");
}

id objc_msgSend_colorWithPatternImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithPatternImage:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_commandWithTitle_image_action_input_modifierFlags_propertyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandWithTitle:image:action:input:modifierFlags:propertyList:");
}

id objc_msgSend_comment_withInsertedAutoCommentForDate_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comment:withInsertedAutoCommentForDate:timeZone:");
}

id objc_msgSend_commentPromptRelatedConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commentPromptRelatedConstraints");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_commitWithRollback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitWithRollback:");
}

id objc_msgSend_committedValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "committedValueForKey:");
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compact");
}

id objc_msgSend_compactHourFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactHourFont");
}

id objc_msgSend_compactMonthListViewController_didSelectEvent_showMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactMonthListViewController:didSelectEvent:showMode:");
}

id objc_msgSend_compactMonthListViewController_wantsToCommitViewControllerFromPreview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactMonthListViewController:wantsToCommitViewControllerFromPreview:");
}

id objc_msgSend_compactMonthListViewDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactMonthListViewDelegate");
}

id objc_msgSend_compactMonthMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactMonthMenu");
}

id objc_msgSend_compactOccurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactOccurrenceHeight");
}

id objc_msgSend_compactTextFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactTextFont");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_comparePointersOfArray_withArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comparePointersOfArray:withArray:");
}

id objc_msgSend_completeAndSaveWithContinueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeAndSaveWithContinueBlock:");
}

id objc_msgSend_completeReminderFromTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeReminderFromTap:");
}

id objc_msgSend_completeSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeSetup");
}

id objc_msgSend_completeTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeTransition:");
}

id objc_msgSend_completed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completed");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completion");
}

id objc_msgSend_component_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "component:fromDate:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressedVerticalMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compressedVerticalMode");
}

id objc_msgSend_conferenceStringForURL_conferenceURLIsBroadcast_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conferenceStringForURL:conferenceURLIsBroadcast:options:");
}

id objc_msgSend_conferenceURLForDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conferenceURLForDisplay");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationByApplyingConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationByApplyingConfiguration:");
}

id objc_msgSend_configurationWithFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithFont:");
}

id objc_msgSend_configurationWithIdentifier_previewProvider_actionProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithIdentifier:previewProvider:actionProvider:");
}

id objc_msgSend_configurationWithPaletteColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPaletteColors:");
}

id objc_msgSend_configurationWithPointSize_weight_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:weight:scale:");
}

id objc_msgSend_configurationWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithScale:");
}

id objc_msgSend_configurationWithTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithTextStyle:");
}

id objc_msgSend_configurationWithTextStyle_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithTextStyle:scale:");
}

id objc_msgSend_configureTipsCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureTipsCenter");
}

id objc_msgSend_configureWithAllDayCount_birthdayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithAllDayCount:birthdayCount:");
}

id objc_msgSend_configureWithContact_displayName_address_notificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithContact:displayName:address:notificationCount:");
}

id objc_msgSend_configureWithDate_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDate:timeZone:");
}

id objc_msgSend_configureWithOpaqueBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithOpaqueBackground");
}

id objc_msgSend_confirmDismissAlertController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmDismissAlertController");
}

id objc_msgSend_conflictDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conflictDict");
}

id objc_msgSend_conflictInfoForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conflictInfoForNotification:");
}

id objc_msgSend_conflictStringForConflictDetails_maxTitleLength_descriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conflictStringForConflictDetails:maxTitleLength:descriptions:");
}

id objc_msgSend_conflictingDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conflictingDates");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectedScenes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedScenes");
}

id objc_msgSend_constrainedFontForTextStyle_maximumContentSizeCategory_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constrainedFontForTextStyle:maximumContentSizeCategory:traitCollection:");
}

id objc_msgSend_constrainedFontForTextStyle_minimumContentSizeCategory_maximumContentSizeCategory_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constrainedFontForTextStyle:minimumContentSizeCategory:maximumContentSizeCategory:traitCollection:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintEqualToSystemSpacingAfterAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingAfterAnchor:multiplier:");
}

id objc_msgSend_constraintEqualToSystemSpacingBelowAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingBelowAnchor:multiplier:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToConstant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToSystemSpacingAfterAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:");
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraints");
}

id objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintsWithVisualFormat:options:metrics:views:");
}

id objc_msgSend_contact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contact");
}

id objc_msgSend_contactForAddress_fullName_firstName_lastName_keysToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactForAddress:fullName:firstName:lastName:keysToFetch:");
}

id objc_msgSend_contactForContact_keysToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactForContact:keysToFetch:");
}

id objc_msgSend_contactKeysToFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactKeysToFetch");
}

id objc_msgSend_contactStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactStore");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "container");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerView");
}

id objc_msgSend_containerViewForOccurrencePreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerViewForOccurrencePreview");
}

id objc_msgSend_containingPalette(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingPalette");
}

id objc_msgSend_containsCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsCalendarDate:");
}

id objc_msgSend_containsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsDate:");
}

id objc_msgSend_containsDelegateSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsDelegateSources");
}

id objc_msgSend_containsFirstDayOfMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsFirstDayOfMonth");
}

id objc_msgSend_containsLastMonthOfYear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsLastMonthOfYear");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_contentFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentFrame");
}

id objc_msgSend_contentHeightForFontSize_overlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentHeightForFontSize:overlayFontSize:");
}

id objc_msgSend_contentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentInset");
}

id objc_msgSend_contentInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentInsets");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentOffset");
}

id objc_msgSend_contentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSize");
}

id objc_msgSend_contentSizeCategoryChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSizeCategoryChanged");
}

id objc_msgSend_contentSizeCategoryScaledValueForDefaultValue_maximumValue_shouldScaleForSmallerSizes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSizeCategoryScaledValueForDefaultValue:maximumValue:shouldScaleForSmallerSizes:");
}

id objc_msgSend_contentSizeCategoryScaledValueForDefaultValue_shouldScaleForSmallerSizes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSizeCategoryScaledValueForDefaultValue:shouldScaleForSmallerSizes:");
}

id objc_msgSend_contentUnavailableConfigurationForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentUnavailableConfigurationForState:");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_contentWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentWidth");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_continueButtonText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueButtonText");
}

id objc_msgSend_continueSearchWithTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSearchWithTerm:");
}

id objc_msgSend_continueSearchWithTerm_animated_removeViewControllersIncapableOfSearchIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSearchWithTerm:animated:removeViewControllersIncapableOfSearchIfNeeded:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controller");
}

id objc_msgSend_controllerAppearedTipsConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerAppearedTipsConfiguration");
}

id objc_msgSend_convertPoint_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromView:");
}

id objc_msgSend_convertPoint_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toView:");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_convertRect_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:toView:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinate");
}

id objc_msgSend_coordinateSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateSpace");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyEvents_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyEvents:delegate:");
}

id objc_msgSend_couldBeJunk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "couldBeJunk");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createCellWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCellWithFrame:");
}

id objc_msgSend_createInitialViewForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createInitialViewForDate:");
}

id objc_msgSend_createNewCalendarModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewCalendarModel");
}

id objc_msgSend_createOccurrenceViewForEventGestures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOccurrenceViewForEventGestures");
}

id objc_msgSend_createSearchBarIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSearchBarIfNeeded");
}

id objc_msgSend_createTestEvent_numAttendees_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTestEvent:numAttendees:");
}

id objc_msgSend_createViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createViewController:");
}

id objc_msgSend_createdNewEventUsingCreationGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createdNewEventUsingCreationGesture:");
}

id objc_msgSend_creationMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationMethod");
}

id objc_msgSend_crossfadeToCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossfadeToCell:");
}

id objc_msgSend_cuik_nonTodayTimelineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuik_nonTodayTimelineColor");
}

id objc_msgSend_cuik_preferredTightLeadingFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuik_preferredTightLeadingFontForTextStyle:");
}

id objc_msgSend_cuik_todayTimelineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuik_todayTimelineColor");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentChildViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentChildViewController");
}

id objc_msgSend_currentChildViewControllerIsLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentChildViewControllerIsLoaded");
}

id objc_msgSend_currentDayContainsOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDayContainsOccurrences");
}

id objc_msgSend_currentDayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDayView");
}

id objc_msgSend_currentDayViewMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDayViewMode");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentDragSnappingType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDragSnappingType");
}

id objc_msgSend_currentEditor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEditor");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentImageState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentImageState");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentManager");
}

id objc_msgSend_currentNotificationCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentNotificationCenter");
}

id objc_msgSend_currentPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPresentationController");
}

id objc_msgSend_currentRootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRootViewController");
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRunLoop");
}

id objc_msgSend_currentScrollViewXOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentScrollViewXOffset");
}

id objc_msgSend_currentSidebarState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSidebarState");
}

id objc_msgSend_currentTimeFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTimeFrame");
}

id objc_msgSend_currentTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTraitCollection");
}

id objc_msgSend_currentViewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentViewType");
}

id objc_msgSend_currentlyCreatingEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyCreatingEvent");
}

id objc_msgSend_currentlyEditingEventsWithGestures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyEditingEventsWithGestures");
}

id objc_msgSend_currentlyLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyLocked");
}

id objc_msgSend_currentlySelectedOccurrenceViewSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlySelectedOccurrenceViewSource");
}

id objc_msgSend_currentlyVisibleDateRangeFromStartDate_toEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyVisibleDateRangeFromStartDate:toEndDate:");
}

id objc_msgSend_customBadgedButtonWithImage_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customBadgedButtonWithImage:action:");
}

id objc_msgSend_customView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customView");
}

id objc_msgSend_cutEvents_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cutEvents:delegate:");
}

id objc_msgSend_dashboardService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dashboardService");
}

id objc_msgSend_dataForEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForEventID:");
}

id objc_msgSend_dataReloadedWithTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataReloadedWithTrigger:");
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSource");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateAtPoint:");
}

id objc_msgSend_dateAtPoint_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateAtPoint:isAllDay:");
}

id objc_msgSend_dateAtPoint_isAllDay_requireAllDayRegionInsistence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateAtPoint:isAllDay:requireAllDayRegionInsistence:");
}

id objc_msgSend_dateBaselineToLocationBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateBaselineToLocationBaselineConstraint");
}

id objc_msgSend_dateBaselineToTitleBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateBaselineToTitleBaselineConstraint");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingDays_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingDays:inCalendar:");
}

id objc_msgSend_dateByAddingHours_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingHours:inCalendar:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateChanged");
}

id objc_msgSend_dateComponentsForDateOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateComponentsForDateOnly");
}

id objc_msgSend_dateForCachedOccurrencesInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForCachedOccurrencesInSection:");
}

id objc_msgSend_dateForCachedOccurrencesInSection_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForCachedOccurrencesInSection:usingFilter:");
}

id objc_msgSend_dateForCurrentMonthOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForCurrentMonthOnScreen");
}

id objc_msgSend_dateForDayInTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForDayInTimeZone:");
}

id objc_msgSend_dateForEndOfDayInTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForEndOfDayInTimeZone:");
}

id objc_msgSend_dateForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForIndex:");
}

id objc_msgSend_dateForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForSection:");
}

id objc_msgSend_dateForStartOfDayInTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForStartOfDayInTimeZone:");
}

id objc_msgSend_dateForTopVisibleMonthOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForTopVisibleMonthOnScreen");
}

id objc_msgSend_dateForWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForWeek:");
}

id objc_msgSend_dateForXOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForXOffset:");
}

id objc_msgSend_dateFormatFromTemplate_options_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFormatFromTemplate:options:locale:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateIsVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateIsVisible:");
}

id objc_msgSend_dateIsWeekend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateIsWeekend:");
}

id objc_msgSend_dateLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateLabel");
}

id objc_msgSend_dateOfCenterViewInBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfCenterViewInBuffer");
}

id objc_msgSend_dateOfCenterViewOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfCenterViewOnScreen");
}

id objc_msgSend_dateOfViewInBufferIndexRelativeToCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfViewInBufferIndexRelativeToCenter:");
}

id objc_msgSend_dateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateString");
}

id objc_msgSend_dateStringForDate_allDay_standalone_shortFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringForDate:allDay:standalone:shortFormat:");
}

id objc_msgSend_dateStringVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringVisible");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "day");
}

id objc_msgSend_dayBadgeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBadgeColor");
}

id objc_msgSend_dayBadgeColorsFromOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBadgeColorsFromOccurrences");
}

id objc_msgSend_dayBadgeLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBadgeLocale");
}

id objc_msgSend_dayBadgeLocalesFromOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBadgeLocalesFromOccurrences");
}

id objc_msgSend_dayBadgeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayBadgeType");
}

id objc_msgSend_dayCellSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayCellSize");
}

id objc_msgSend_dayCellsScrubbingGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayCellsScrubbingGestureRecognizer");
}

id objc_msgSend_dayCellsTapGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayCellsTapGestureRecognizer");
}

id objc_msgSend_dayComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayComponents");
}

id objc_msgSend_dayContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayContent");
}

id objc_msgSend_dayCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayCount");
}

id objc_msgSend_dayDataWithEventCount_dayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayDataWithEventCount:dayType:");
}

id objc_msgSend_dayDateAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayDateAtPoint:");
}

id objc_msgSend_dayForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayForPoint:");
}

id objc_msgSend_dayFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayFrame");
}

id objc_msgSend_dayFrameRightInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayFrameRightInset");
}

id objc_msgSend_dayFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayFrames");
}

id objc_msgSend_dayHeaderFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayHeaderFrames");
}

id objc_msgSend_dayIndexForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayIndexForCalendarDate:");
}

id objc_msgSend_dayIndexForToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayIndexForToday");
}

id objc_msgSend_dayInitialFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayInitialFont");
}

id objc_msgSend_dayInitialTextAlignment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayInitialTextAlignment");
}

id objc_msgSend_dayInitialsHeaderView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayInitialsHeaderView");
}

id objc_msgSend_dayLabelBaseHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayLabelBaseHeight");
}

id objc_msgSend_dayLabelHeightWithSizeClass_usesMultiDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayLabelHeightWithSizeClass:usesMultiDay:");
}

id objc_msgSend_dayLabelYMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayLabelYMargin");
}

id objc_msgSend_dayNavigationCellShouldEnableSpringLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationCellShouldEnableSpringLoading");
}

id objc_msgSend_dayNavigationCellTouchUpOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationCellTouchUpOccurred:");
}

id objc_msgSend_dayNavigationView_dayDataForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationView:dayDataForDate:");
}

id objc_msgSend_dayNavigationView_didChangeCellWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationView:didChangeCellWidth:");
}

id objc_msgSend_dayNavigationView_selectedDateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationView:selectedDateChanged:");
}

id objc_msgSend_dayNavigationViewAllowedToChangeSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewAllowedToChangeSelectedDate");
}

id objc_msgSend_dayNavigationViewController_didChangeCellWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewController:didChangeCellWidth:");
}

id objc_msgSend_dayNavigationViewController_didSelectDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewController:didSelectDate:");
}

id objc_msgSend_dayNavigationViewControllerAllowedToChangeSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewControllerAllowedToChangeSelectedDate");
}

id objc_msgSend_dayNavigationViewControllerFailedToChangeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewControllerFailedToChangeDate:");
}

id objc_msgSend_dayNavigationViewFailedToSelectDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewFailedToSelectDate:");
}

id objc_msgSend_dayNavigationViewIsLoadingSpecialDayData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationViewIsLoadingSpecialDayData:");
}

id objc_msgSend_dayNavigationWeekScrollView_dayDataForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollView:dayDataForDate:");
}

id objc_msgSend_dayNavigationWeekScrollView_didChangeCellWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollView:didChangeCellWidth:");
}

id objc_msgSend_dayNavigationWeekScrollView_selectedDateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollView:selectedDateChanged:");
}

id objc_msgSend_dayNavigationWeekScrollViewAllowedToChangeSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollViewAllowedToChangeSelectedDate");
}

id objc_msgSend_dayNavigationWeekScrollViewFailedToSelectDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollViewFailedToSelectDate:");
}

id objc_msgSend_dayNavigationWeekScrollViewIsLoadingSpecialDayData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNavigationWeekScrollViewIsLoadingSpecialDayData:");
}

id objc_msgSend_dayNumberCellFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberCellFrames");
}

id objc_msgSend_dayNumberFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberFont");
}

id objc_msgSend_dayNumberFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberFontForSize:");
}

id objc_msgSend_dayNumberFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberFontSize:");
}

id objc_msgSend_dayNumberLayerYOffsetCompressed_containsFirstDayOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberLayerYOffsetCompressed:containsFirstDayOfMonth:");
}

id objc_msgSend_dayNumberOverlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberOverlayFontSize:");
}

id objc_msgSend_dayNumberString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayNumberString");
}

id objc_msgSend_dayOfWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayOfWeek");
}

id objc_msgSend_dayOfWeekStringForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayOfWeekStringForDate:");
}

id objc_msgSend_dayOverlayFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayOverlayFontForSize:");
}

id objc_msgSend_dayRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayRange");
}

id objc_msgSend_dayScrubberController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayScrubberController");
}

id objc_msgSend_dayScrubberFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayScrubberFrame");
}

id objc_msgSend_dayTextSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTextSize");
}

id objc_msgSend_dayType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayType");
}

id objc_msgSend_dayTypeBadge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadge");
}

id objc_msgSend_dayTypeBadgeBackgroundColorForVerticallyCompressedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadgeBackgroundColorForVerticallyCompressedMode:");
}

id objc_msgSend_dayTypeBadgeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadgeColor");
}

id objc_msgSend_dayTypeBadgeDiameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadgeDiameter:");
}

id objc_msgSend_dayTypeBadgeFrameFromDayNumberFrame_compressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadgeFrameFromDayNumberFrame:compressed:");
}

id objc_msgSend_dayTypeBadgeLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypeBadgeLocale");
}

id objc_msgSend_dayTypesFromOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayTypesFromOccurrences");
}

id objc_msgSend_dayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayView");
}

id objc_msgSend_dayViewContent_didTapInEmptySpaceOnDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewContent:didTapInEmptySpaceOnDay:");
}

id objc_msgSend_dayViewController_createEventAtDate_allDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewController:createEventAtDate:allDay:");
}

id objc_msgSend_dayViewDayLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewDayLocation");
}

id objc_msgSend_dayViewDidChangeSelectedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewDidChangeSelectedDate:");
}

id objc_msgSend_dayViewFirstVisibleSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewFirstVisibleSecond");
}

id objc_msgSend_dayViewHourScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewHourScale");
}

id objc_msgSend_dayViewMonthLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayViewMonthLocation");
}

id objc_msgSend_dayWidthForOrientation_withViewInViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dayWidthForOrientation:withViewInViewHierarchy:");
}

id objc_msgSend_daysFromFirstToMiddleDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysFromFirstToMiddleDay");
}

id objc_msgSend_daysInMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysInMonth");
}

id objc_msgSend_daysInWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysInWeek");
}

id objc_msgSend_daysToDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysToDisplay");
}

id objc_msgSend_daysYAdjustTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysYAdjustTop");
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_decelerationDistanceThresholdForDisplayingMonthBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decelerationDistanceThresholdForDisplayingMonthBanner");
}

id objc_msgSend_decelerationDistanceThresholdForPreferringMonthBoundary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decelerationDistanceThresholdForPreferringMonthBoundary");
}

id objc_msgSend_decelerationDistanceThresholdToStopShowingMonthBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decelerationDistanceThresholdToStopShowingMonthBanner");
}

id objc_msgSend_declinesToPerformCutCopyPasteAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "declinesToPerformCutCopyPasteAction:withSender:");
}

id objc_msgSend_defaultActionURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultActionURL");
}

id objc_msgSend_defaultAlarmOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAlarmOffset");
}

id objc_msgSend_defaultCalendarForNewEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCalendarForNewEvents");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultCircleDiameter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCircleDiameter");
}

id objc_msgSend_defaultContactKeysToFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContactKeysToFetch");
}

id objc_msgSend_defaultEventDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultEventDuration");
}

id objc_msgSend_defaultEventForSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultEventForSelectedDate");
}

id objc_msgSend_defaultFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFormat");
}

id objc_msgSend_defaultHeightForSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultHeightForSizeClass:orientation:");
}

id objc_msgSend_defaultHeightForSizeClass_orientation_withHourScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultHeightForSizeClass:orientation:withHourScale:");
}

id objc_msgSend_defaultHourScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultHourScale");
}

id objc_msgSend_defaultMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultMargin");
}

id objc_msgSend_defaultMonthsPerRowForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultMonthsPerRowForWindowSize:");
}

id objc_msgSend_defaultPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPadding");
}

id objc_msgSend_defaultProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultProvider");
}

id objc_msgSend_defaultRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultRowHeight");
}

id objc_msgSend_defaultTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTimeZone");
}

id objc_msgSend_defaultTitleForCalendarItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTitleForCalendarItem");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delaySubTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delaySubTestName");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegateSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegateSources");
}

id objc_msgSend_delegatesMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegatesMenu");
}

id objc_msgSend_deleteEvent_span_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteEvent:span:error:");
}

id objc_msgSend_deleteEvents_presentationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteEvents:presentationController:");
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_deleteSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSections:withRowAnimation:");
}

id objc_msgSend_deleteSuggestedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSuggestedEvent:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:");
}

id objc_msgSend_dequeueReusableHeaderFooterViewWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableHeaderFooterViewWithIdentifier:");
}

id objc_msgSend_dequeueReusableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableView");
}

id objc_msgSend_descender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descender");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionStrings:");
}

id objc_msgSend_descriptorForRequiredKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorForRequiredKeys");
}

id objc_msgSend_deselectAllRowsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectAllRowsAnimated:");
}

id objc_msgSend_deselectOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectOccurrence:");
}

id objc_msgSend_deselectOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectOccurrences:");
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectRowAtIndexPath:animated:");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destination");
}

id objc_msgSend_detailLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailLabel");
}

id objc_msgSend_detailTextLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailTextLabel");
}

id objc_msgSend_detailsLeftInsetAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailsLeftInsetAdjustment");
}

id objc_msgSend_detailsRightInsetAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailsRightInsetAdjustment");
}

id objc_msgSend_diagnosticsViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticsViewController");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAttemptToDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAttemptToDismiss");
}

id objc_msgSend_didBecomeActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBecomeActive");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didCompleteBackgroundOccurrenceRenderingForLargeMonthWeekView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteBackgroundOccurrenceRenderingForLargeMonthWeekView:");
}

id objc_msgSend_didCompleteMonthWeekViewBackgroundRendering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteMonthWeekViewBackgroundRendering");
}

id objc_msgSend_didCrossDragBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCrossDragBoundary:");
}

id objc_msgSend_didEditEvent_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEditEvent:creationMethod:");
}

id objc_msgSend_didEndDraggingWillDecelerate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEndDraggingWillDecelerate:");
}

id objc_msgSend_didEndScrolling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEndScrolling");
}

id objc_msgSend_didEnterBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEnterBackground");
}

id objc_msgSend_didFinishScrolling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishScrolling");
}

id objc_msgSend_didLoadInitialViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didLoadInitialViews");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_didScroll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didScroll");
}

id objc_msgSend_didSelectEvent_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectEvent:userInitiated:");
}

id objc_msgSend_didSelectEvents_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectEvents:userInitiated:");
}

id objc_msgSend_didShowEventWithoutShowingDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didShowEventWithoutShowingDetails:");
}

id objc_msgSend_differenceInDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "differenceInDays:");
}

id objc_msgSend_differenceInMonths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "differenceInMonths:");
}

id objc_msgSend_differenceInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "differenceInSeconds:");
}

id objc_msgSend_dimOccurrence_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimOccurrence:occurrenceDate:");
}

id objc_msgSend_disableContinuity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableContinuity");
}

id objc_msgSend_disableGestureRecognizers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableGestureRecognizers");
}

id objc_msgSend_disableRotationTimings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableRotationTimings");
}

id objc_msgSend_disableTodayPulse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableTodayPulse");
}

id objc_msgSend_disableTodayPushes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableTodayPushes");
}

id objc_msgSend_disabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabled");
}

id objc_msgSend_disappearingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disappearingViewController");
}

id objc_msgSend_disclosureConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disclosureConstraints");
}

id objc_msgSend_dismissAcceptedProposeNewTimeNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAcceptedProposeNewTimeNotification");
}

id objc_msgSend_dismissAttendeeRepliedNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAttendeeRepliedNotification");
}

id objc_msgSend_dismissDraggedOccurrencePresentationAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissDraggedOccurrencePresentationAnimated:");
}

id objc_msgSend_dismissPresentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissPresentedViewController");
}

id objc_msgSend_dismissPresentedViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissPresentedViewControllerAnimated:completion:");
}

id objc_msgSend_dismissSplashScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissSplashScreen");
}

id objc_msgSend_dismissTipDueToUserNavigationWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissTipDueToUserNavigationWithCompletionBlock:");
}

id objc_msgSend_dismissTipIfPresentedWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissTipIfPresentedWithCompletionBlock:");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_dismissViewControllerWithTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerWithTransition:completion:");
}

id objc_msgSend_dismissViewControllerWithoutEnqueuingWithTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerWithoutEnqueuingWithTransition:completion:");
}

id objc_msgSend_dismissing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissing");
}

id objc_msgSend_displayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayColor");
}

id objc_msgSend_displayDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDate");
}

id objc_msgSend_displayDetailsForURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDetailsForURL:completionHandler:");
}

id objc_msgSend_displayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayIfNeeded");
}

id objc_msgSend_displayIntegrationAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayIntegrationAlert:");
}

id objc_msgSend_displayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayMode");
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayName");
}

id objc_msgSend_displayReviewPromptIfNeededInScene_calendarModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayReviewPromptIfNeededInScene:calendarModel:");
}

id objc_msgSend_displayScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayScale");
}

id objc_msgSend_displayType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayType");
}

id objc_msgSend_displayableAccountErrorsForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayableAccountErrorsForSource:");
}

id objc_msgSend_displayedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedDate");
}

id objc_msgSend_displayedDateChanged_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedDateChanged:userInitiated:");
}

id objc_msgSend_displayedDaysForOrientation_withViewInViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedDaysForOrientation:withViewInViewHierarchy:");
}

id objc_msgSend_displayedDetailViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedDetailViewControllers");
}

id objc_msgSend_displayedEditor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedEditor");
}

id objc_msgSend_displayedOccurrencesChangedWithTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedOccurrencesChangedWithTrigger:");
}

id objc_msgSend_displayingRootView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayingRootView");
}

id objc_msgSend_displaysDatesSnappedToWeekBoundaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displaysDatesSnappedToWeekBoundaries");
}

id objc_msgSend_distanceToBottomOfCircleCompressed_containsFirstDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToBottomOfCircleCompressed:containsFirstDay:");
}

id objc_msgSend_dividedListMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dividedListMode");
}

id objc_msgSend_dividedModeBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dividedModeBackgroundColor");
}

id objc_msgSend_dividedMonthPaletteBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dividedMonthPaletteBackgroundColor");
}

id objc_msgSend_dividerLineVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dividerLineVisible");
}

id objc_msgSend_doCrossfadeAnimationWithNavigationViewContents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doCrossfadeAnimationWithNavigationViewContents");
}

id objc_msgSend_donateIsPortraitOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateIsPortraitOrientation:");
}

id objc_msgSend_donateIsSelectedDateFiveDaysAwayFromToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateIsSelectedDateFiveDaysAwayFromToday:");
}

id objc_msgSend_donateShouldDisplayTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateShouldDisplayTip:");
}

id objc_msgSend_donateTodayButtonPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTodayButtonPressed");
}

id objc_msgSend_doneBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doneBlock");
}

id objc_msgSend_doneButtonTapped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doneButtonTapped");
}

id objc_msgSend_dotColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dotColor");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_dragAndDropAllowLongPress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragAndDropAllowLongPress");
}

id objc_msgSend_dragAndDropIsCurrentlyScrubbing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragAndDropIsCurrentlyScrubbing");
}

id objc_msgSend_dragAndDropScrubAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragAndDropScrubAtPoint:");
}

id objc_msgSend_dragGestureInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragGestureInProgress");
}

id objc_msgSend_draggedOccurrenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "draggedOccurrenceView");
}

id objc_msgSend_draggedOccurrenceWasCancelled_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "draggedOccurrenceWasCancelled:atPoint:");
}

id objc_msgSend_draggingDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "draggingDone");
}

id objc_msgSend_draggingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "draggingView");
}

id objc_msgSend_draw(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "draw");
}

id objc_msgSend_drawAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawAtPoint:");
}

id objc_msgSend_drawAtPoint_blendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawAtPoint:blendMode:alpha:");
}

id objc_msgSend_drawCircle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawCircle");
}

id objc_msgSend_drawInFrame_context_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInFrame:context:traitCollection:");
}

id objc_msgSend_drawInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:");
}

id objc_msgSend_drawInRect_blendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:blendMode:alpha:");
}

id objc_msgSend_drawInRect_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:withAttributes:");
}

id objc_msgSend_drawIntoContext_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawIntoContext:traitCollection:");
}

id objc_msgSend_drawWithRect_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawWithRect:options:context:");
}

id objc_msgSend_drawWithViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawWithViews");
}

id objc_msgSend_drawsBackgroundForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawsBackgroundForEvent:");
}

id objc_msgSend_drawsTimeAtBottom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawsTimeAtBottom");
}

id objc_msgSend_drawsTimeString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawsTimeString");
}

id objc_msgSend_duplicateEvents_withDateMode_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duplicateEvents:withDateMode:delegate:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_earliestDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earliestDateComponents");
}

id objc_msgSend_edgesForExtendedLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edgesForExtendedLayout");
}

id objc_msgSend_editButtonTapped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editButtonTapped");
}

id objc_msgSend_editOrAddViewControllerForEventOrIntegrationWithEvent_model_creationMethod_eventEditViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editOrAddViewControllerForEventOrIntegrationWithEvent:model:creationMethod:eventEditViewDelegate:");
}

id objc_msgSend_editViewControllerImplementation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editViewControllerImplementation");
}

id objc_msgSend_editorDidCancelEditingEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorDidCancelEditingEvent:");
}

id objc_msgSend_editorDidDeleteEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorDidDeleteEvent:");
}

id objc_msgSend_editorDidSaveEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorDidSaveEvent:");
}

id objc_msgSend_editorForGroupController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorForGroupController:");
}

id objc_msgSend_effectWithBlurRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithBlurRadius:");
}

id objc_msgSend_effectWithPreview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithPreview:");
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithStyle:");
}

id objc_msgSend_effectiveEventGestureSuperview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveEventGestureSuperview");
}

id objc_msgSend_effectiveUserInterfaceLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveUserInterfaceLayoutDirection");
}

id objc_msgSend_ekui_adjustNavAndToolBarToTranslucentGrayStyles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_adjustNavAndToolBarToTranslucentGrayStyles");
}

id objc_msgSend_ekui_adjustNavAndToolBarToTransparentStyles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_adjustNavAndToolBarToTransparentStyles");
}

id objc_msgSend_ekui_adjustNavBarToTransparentStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_adjustNavBarToTransparentStyle");
}

id objc_msgSend_ekui_adjustToolBarToTransparentStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_adjustToolBarToTransparentStyle");
}

id objc_msgSend_ekui_futureTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_futureTraitCollection");
}

id objc_msgSend_ekui_futureTraitCollectionCategoryPropertyKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_futureTraitCollectionCategoryPropertyKey");
}

id objc_msgSend_ekui_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ekui_interfaceOrientation");
}

id objc_msgSend_eligibleToShowYearNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleToShowYearNumber");
}

id objc_msgSend_emailAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emailAddress");
}

id objc_msgSend_embeddedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embeddedNavigationController");
}

id objc_msgSend_emptyAuthorCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptyAuthorCache");
}

id objc_msgSend_emptyChildViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptyChildViewController");
}

id objc_msgSend_emptyConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptyConfiguration");
}

id objc_msgSend_emptySpaceClick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptySpaceClick");
}

id objc_msgSend_emptySpaceClickForCalendarWeekDayEventContent_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptySpaceClickForCalendarWeekDayEventContent:atPoint:");
}

id objc_msgSend_emptySpaceClickedOnDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptySpaceClickedOnDate:");
}

id objc_msgSend_enableEventCreationGesture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableEventCreationGesture");
}

id objc_msgSend_enableGestureRecognizers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableGestureRecognizers");
}

id objc_msgSend_enableLayerAnimationsDuringLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableLayerAnimationsDuringLayout");
}

id objc_msgSend_endAnimationSplitState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAnimationSplitState");
}

id objc_msgSend_endAppearanceTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAppearanceTransition");
}

id objc_msgSend_endCalendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endCalendarDate");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDate");
}

id objc_msgSend_endDateUnadjustedForLegacyClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDateUnadjustedForLegacyClients");
}

id objc_msgSend_endEditing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endEditing:");
}

id objc_msgSend_endForcedStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endForcedStart");
}

id objc_msgSend_endLaunchToView_extended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endLaunchToView:extended:");
}

id objc_msgSend_endRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endRange");
}

id objc_msgSend_endRefreshing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endRefreshing");
}

id objc_msgSend_endSearch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSearch:");
}

id objc_msgSend_endTimeString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTimeString");
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUpdates");
}

id objc_msgSend_enqueuableNavigationController_requestsDeferShowViewControllerUntilReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueuableNavigationController:requestsDeferShowViewControllerUntilReady:");
}

id objc_msgSend_enqueueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlock:");
}

id objc_msgSend_enqueueStackResetOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueStackResetOperation");
}

id objc_msgSend_enqueueStackResetOperationDismissingPresentations_cancelOperations_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueStackResetOperationDismissingPresentations:cancelOperations:completionBlock:");
}

id objc_msgSend_enqueueableManagedNavigationController_requestsConfigurationOfPropertiesForPopoverPresentationController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueableManagedNavigationController:requestsConfigurationOfPropertiesForPopoverPresentationController:completion:");
}

id objc_msgSend_enqueueableManagedNavigationControllerShouldEnqueuePresentationDismissals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueableManagedNavigationControllerShouldEnqueuePresentationDismissals:");
}

id objc_msgSend_ensureCalendarVisibleWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureCalendarVisibleWithId:");
}

id objc_msgSend_enterAnimationSplitStateWithCutOutArea_topBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enterAnimationSplitStateWithCutOutArea:topBoundary:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateScrollViewSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateScrollViewSubviews:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_era(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "era");
}

id objc_msgSend_estimatedHeightForRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedHeightForRow:");
}

id objc_msgSend_estimatedRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedRowHeight");
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "event");
}

id objc_msgSend_eventCanDialIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventCanDialIn:");
}

id objc_msgSend_eventCanNavigate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventCanNavigate:");
}

id objc_msgSend_eventCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventCount");
}

id objc_msgSend_eventData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventData");
}

id objc_msgSend_eventDetailViewControllerWithEvent_delegate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDetailViewControllerWithEvent:delegate:context:");
}

id objc_msgSend_eventDetailViewControllerWithEvent_delegate_context_allowInlinePreview_previewInline_minimalMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDetailViewControllerWithEvent:delegate:context:allowInlinePreview:previewInline:minimalMode:");
}

id objc_msgSend_eventDetailsDidShowSubtestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDetailsDidShowSubtestName");
}

id objc_msgSend_eventEditViewController_didCompleteWithAction_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventEditViewController:didCompleteWithAction:completionHandler:");
}

id objc_msgSend_eventForObjectID_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForObjectID:occurrenceDate:");
}

id objc_msgSend_eventForObjectID_occurrenceDate_checkValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForObjectID:occurrenceDate:checkValid:");
}

id objc_msgSend_eventForRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForRow:");
}

id objc_msgSend_eventFromEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventFromEventStore:");
}

id objc_msgSend_eventFromStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventFromStore:");
}

id objc_msgSend_eventGestureController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventGestureController");
}

id objc_msgSend_eventGestureController_commitToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventGestureController:commitToPoint:");
}

id objc_msgSend_eventGestureController_didCommitOccurrence_toDate_isAllDay_span_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventGestureController:didCommitOccurrence:toDate:isAllDay:span:");
}

id objc_msgSend_eventGestureController_setUpAtPoint_withOccurrence_forceNewEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventGestureController:setUpAtPoint:withOccurrence:forceNewEvent:");
}

id objc_msgSend_eventID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventID");
}

id objc_msgSend_eventIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventIdentifier");
}

id objc_msgSend_eventIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventIndex");
}

id objc_msgSend_eventNotificationReferencesForCurrentIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventNotificationReferencesForCurrentIdentity");
}

id objc_msgSend_eventNotificationReferencesForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventNotificationReferencesForIdentity:");
}

id objc_msgSend_eventNotificationsForCurrentIdentityCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventNotificationsForCurrentIdentityCount");
}

id objc_msgSend_eventOccurrenceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventOccurrenceID");
}

id objc_msgSend_eventOrIntegrationViewControllerWithEvent_creationMethod_eventEditViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventOrIntegrationViewControllerWithEvent:creationMethod:eventEditViewDelegate:");
}

id objc_msgSend_eventScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventScale");
}

id objc_msgSend_eventStatusButtonsView_didSelectAction_appliesToAll_ifCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventStatusButtonsView:didSelectAction:appliesToAll:ifCancelled:");
}

id objc_msgSend_eventStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventStore");
}

id objc_msgSend_eventStoreForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventStoreForCell:");
}

id objc_msgSend_eventSummaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventSummaryData");
}

id objc_msgSend_eventSummaryDataFromEKEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventSummaryDataFromEKEvent:");
}

id objc_msgSend_eventViewController_didCompleteWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewController:didCompleteWithAction:");
}

id objc_msgSend_eventViewController_requestsDisplayOfEditViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewController:requestsDisplayOfEditViewController:animated:");
}

id objc_msgSend_eventViewControllerNextButtonWasTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerNextButtonWasTapped:");
}

id objc_msgSend_eventViewControllerPreviousButtonWasTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerPreviousButtonWasTapped:");
}

id objc_msgSend_eventViewControllerShouldHideInlineEditButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerShouldHideInlineEditButton");
}

id objc_msgSend_eventViewControllerShouldShowInlineEditButtonForInvitations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerShouldShowInlineEditButtonForInvitations:");
}

id objc_msgSend_eventViewControllerShowsInlinePreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerShowsInlinePreview");
}

id objc_msgSend_eventViewControllerUseMinimalMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewControllerUseMinimalMode:");
}

id objc_msgSend_eventViewDelegateShouldShowNextOccurrenceOfEvent_forward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventViewDelegateShouldShowNextOccurrenceOfEvent:forward:");
}

id objc_msgSend_eventWithEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithEventStore:");
}

id objc_msgSend_eventWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithIdentifier:");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "events");
}

id objc_msgSend_eventsAllDeletable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventsAllDeletable:");
}

id objc_msgSend_eventsFoundInAppsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventsFoundInAppsEnabled");
}

id objc_msgSend_eventsMatchingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventsMatchingPredicate:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_existingPalette(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingPalette");
}

id objc_msgSend_existsInStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existsInStore");
}

id objc_msgSend_extendedLaunchComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedLaunchComplete");
}

id objc_msgSend_extendedLaunchFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedLaunchFinished");
}

id objc_msgSend_extendedLaunchTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedLaunchTestName");
}

id objc_msgSend_externalID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalID");
}

id objc_msgSend_externalURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalURL");
}

id objc_msgSend_externallyEndedGestureDragging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externallyEndedGestureDragging");
}

id objc_msgSend_extraPaletteHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraPaletteHeight");
}

id objc_msgSend_extractInitialDateOption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractInitialDateOption");
}

id objc_msgSend_fadeInContentViewAt_minWidth_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fadeInContentViewAt:minWidth:animated:");
}

id objc_msgSend_fadeLeftEdge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fadeLeftEdge");
}

id objc_msgSend_fadeRightEdge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fadeRightEdge");
}

id objc_msgSend_failedTest_withFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedTest:withFailure:");
}

id objc_msgSend_failedTest_withResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedTest:withResults:");
}

id objc_msgSend_familyCalendarsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyCalendarsWithCompletion:");
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyName");
}

id objc_msgSend_fetchCachedDaysInBackgroundStartingFromSection_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCachedDaysInBackgroundStartingFromSection:usingFilter:");
}

id objc_msgSend_fetchDaysStartingFromSection_sectionsToLoadInBothDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDaysStartingFromSection:sectionsToLoadInBothDirections:");
}

id objc_msgSend_fill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fill");
}

id objc_msgSend_fillRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillRect:");
}

id objc_msgSend_filledButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filledButtonConfiguration");
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredNotificationsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredNotificationsFromArray:");
}

id objc_msgSend_finalFrameForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalFrameForViewController:");
}

id objc_msgSend_findWeekends(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findWeekends");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finish");
}

id objc_msgSend_finishAnimations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishAnimations");
}

id objc_msgSend_finishChangeScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishChangeScale");
}

id objc_msgSend_finishedSubTest_forTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedSubTest:forTest:");
}

id objc_msgSend_finishedSubTest_forTest_waitForCommit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedSubTest:forTest:waitForCommit:");
}

id objc_msgSend_finishedTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:");
}

id objc_msgSend_finishedTest_extraResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:extraResults:");
}

id objc_msgSend_finishedTest_extraResults_withTeardownBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:extraResults:withTeardownBlock:");
}

id objc_msgSend_finishedTest_waitForCommit_extraResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:waitForCommit:extraResults:");
}

id objc_msgSend_finishedTest_waitForCommit_extraResults_withTeardownBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedTest:waitForCommit:extraResults:withTeardownBlock:");
}

id objc_msgSend_firstBaselineAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstBaselineAnchor");
}

id objc_msgSend_firstDayCellInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstDayCellInset");
}

id objc_msgSend_firstEventSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstEventSecond");
}

id objc_msgSend_firstEventYOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstEventYOffset");
}

id objc_msgSend_firstGroupSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstGroupSection");
}

id objc_msgSend_firstLineBaselineOffsetForFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstLineBaselineOffsetForFontSize:");
}

id objc_msgSend_firstLineBaselineOffsetFromBoundsTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstLineBaselineOffsetFromBoundsTop");
}

id objc_msgSend_firstMonthCellIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstMonthCellIndex");
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstName");
}

id objc_msgSend_firstNonAllDayEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstNonAllDayEvent");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstOccurrencesForEachDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstOccurrencesForEachDay");
}

id objc_msgSend_firstPhoneNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstPhoneNumber");
}

id objc_msgSend_firstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponder");
}

id objc_msgSend_firstView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstView");
}

id objc_msgSend_firstViewOnScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstViewOnScreen");
}

id objc_msgSend_firstVisibleDayOffsetFromSelectedDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstVisibleDayOffsetFromSelectedDay");
}

id objc_msgSend_firstVisibleSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstVisibleSecond");
}

id objc_msgSend_firstVisibleSecondChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstVisibleSecondChanged");
}

id objc_msgSend_firstWeekday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstWeekday");
}

id objc_msgSend_fixedDayWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixedDayWidth");
}

id objc_msgSend_flashScrollIndicators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashScrollIndicators");
}

id objc_msgSend_flattenedImageWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flattenedImageWithColor:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_focusBannerPlacement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusBannerPlacement");
}

id objc_msgSend_focusBannerSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusBannerSection");
}

id objc_msgSend_focusBannerVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusBannerVisible");
}

id objc_msgSend_focusFilterMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusFilterMode");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptor");
}

id objc_msgSend_fontDescriptorWithSymbolicTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorWithSymbolicTraits:");
}

id objc_msgSend_fontOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontOverride");
}

id objc_msgSend_fontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontSize");
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithDescriptor:size:");
}

id objc_msgSend_fontWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithSize:");
}

id objc_msgSend_forceStartWithOccurrence_occurrenceDate_shouldUpdateViewSource_shouldUpdateOrigin_shouldPresentEditMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceStartWithOccurrence:occurrenceDate:shouldUpdateViewSource:shouldUpdateOrigin:shouldPresentEditMenu:");
}

id objc_msgSend_forceUpdateColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceUpdateColors");
}

id objc_msgSend_forceUpdateListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceUpdateListView");
}

id objc_msgSend_forceUpdateOfAllElements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceUpdateOfAllElements");
}

id objc_msgSend_formattedStringForPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedStringForPhoneNumber:");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_frameForCircleWithDayFrame_dayLayerFrame_numberString_overlayString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForCircleWithDayFrame:dayLayerFrame:numberString:overlayString:");
}

id objc_msgSend_frameForCircleWithDayFrame_dayLayerFrame_numberString_overlayString_compressed_containsFirstDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForCircleWithDayFrame:dayLayerFrame:numberString:overlayString:compressed:containsFirstDay:");
}

id objc_msgSend_frameForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForDate:");
}

id objc_msgSend_frameForDayCircleWithSize_dayNumberLayerFrame_dayNumberFrame_withOverlay_compressed_containsFirstDayOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForDayCircleWithSize:dayNumberLayerFrame:dayNumberFrame:withOverlay:compressed:containsFirstDayOfMonth:");
}

id objc_msgSend_frameForEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForEventID:");
}

id objc_msgSend_frameForGridOfDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForGridOfDays:");
}

id objc_msgSend_frameForLastOccurrenceOnDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForLastOccurrenceOnDay:");
}

id objc_msgSend_frameForOccurrence_onDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForOccurrence:onDay:");
}

id objc_msgSend_frameForOccurrenceAfterLastOnDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForOccurrenceAfterLastOnDay:");
}

id objc_msgSend_frameForTodayHighlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForTodayHighlight");
}

id objc_msgSend_frameForWeekContainingDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForWeekContainingDate:");
}

id objc_msgSend_frameOfListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameOfListView");
}

id objc_msgSend_fromPerson(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromPerson");
}

id objc_msgSend_futureMajorBoundaryCalendarDateForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "futureMajorBoundaryCalendarDateForCalendarDate:");
}

id objc_msgSend_gapBetweenBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gapBetweenBlock:");
}

id objc_msgSend_generateCurrentListToggleBarButtonItemMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCurrentListToggleBarButtonItemMenu");
}

id objc_msgSend_geoLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoLocation");
}

id objc_msgSend_geocodeEventIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geocodeEventIfNeeded:");
}

id objc_msgSend_geolocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geolocation");
}

id objc_msgSend_gestureController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureController");
}

id objc_msgSend_gestureRecognizers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRecognizers");
}

id objc_msgSend_getBooleanPreference_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBooleanPreference:defaultValue:");
}

id objc_msgSend_getHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHue:saturation:brightness:alpha:");
}

id objc_msgSend_getRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRed:green:blue:alpha:");
}

id objc_msgSend_getWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWhite:alpha:");
}

id objc_msgSend_get_kCalPreferredDaysToSyncKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "get_kCalPreferredDaysToSyncKey");
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "givenName");
}

id objc_msgSend_grayLineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grayLineColor");
}

id objc_msgSend_grayLineHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grayLineHeight");
}

id objc_msgSend_greenComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "greenComponent");
}

id objc_msgSend_grid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grid");
}

id objc_msgSend_gridlineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gridlineColor");
}

id objc_msgSend_gutterWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gutterWidth");
}

id objc_msgSend_haltAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haltAnimation");
}

id objc_msgSend_haltTodayPulse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haltTodayPulse");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleURL:");
}

id objc_msgSend_handleURL_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleURL:context:");
}

id objc_msgSend_handlesNotifyOnExtendedLaunchCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlesNotifyOnExtendedLaunchCompletion");
}

id objc_msgSend_hasAllDayEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAllDayEvents");
}

id objc_msgSend_hasAttendees(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAttendees");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChanges");
}

id objc_msgSend_hasContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasContent");
}

id objc_msgSend_hasDrawnBefore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDrawnBefore");
}

id objc_msgSend_hasMailto(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMailto");
}

id objc_msgSend_hasOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOccurrences");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRecurrenceRules(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecurrenceRules");
}

id objc_msgSend_hasReminderCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasReminderCalendar");
}

id objc_msgSend_hasRows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRows");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTel");
}

id objc_msgSend_hasUnsavedChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnsavedChanges");
}

id objc_msgSend_headerClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerClass");
}

id objc_msgSend_headerDaySpacingForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerDaySpacingForWindowSize:");
}

id objc_msgSend_headerFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerFont");
}

id objc_msgSend_headerFontKerning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerFontKerning");
}

id objc_msgSend_headerFontMaxSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerFontMaxSize");
}

id objc_msgSend_headerForSectionInTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerForSectionInTableView:");
}

id objc_msgSend_headerHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerHeight");
}

id objc_msgSend_headerOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerOrigin");
}

id objc_msgSend_headerVerticalOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerVerticalOffset");
}

id objc_msgSend_headerYInsetForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerYInsetForWindowSize:");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_heightBetweenLineAndNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightBetweenLineAndNumber");
}

id objc_msgSend_heightForAllDayOccurrenceForSizeClass_usesSmallText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForAllDayOccurrenceForSizeClass:usesSmallText:");
}

id objc_msgSend_heightForHeaderInSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForHeaderInSection");
}

id objc_msgSend_heightForInterfaceOrientation_windowSize_heightSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForInterfaceOrientation:windowSize:heightSizeClass:");
}

id objc_msgSend_heightForNumberOfOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForNumberOfOccurrences:");
}

id objc_msgSend_heightForSubviewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForSubviewWithCalendarDate:");
}

id objc_msgSend_heightForViewThatContainsFirstDayOfMonth_compressed_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForViewThatContainsFirstDayOfMonth:compressed:scale:");
}

id objc_msgSend_heightForViewWithCalendarDate_compressed_windowSize_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForViewWithCalendarDate:compressed:windowSize:scale:");
}

id objc_msgSend_heightForViewWithCalendarDate_windowSize_heightSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForViewWithCalendarDate:windowSize:heightSizeClass:orientation:");
}

id objc_msgSend_heightForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForWindowSize:");
}

id objc_msgSend_heightObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightObserver");
}

id objc_msgSend_heightOfCircleCompressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightOfCircleCompressed:");
}

id objc_msgSend_heightOfFrameForFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightOfFrameForFontSize:");
}

id objc_msgSend_heightRequiredWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightRequiredWithSizeClass:");
}

id objc_msgSend_heightRequiredWithSizeClass_usesMultiDayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightRequiredWithSizeClass:usesMultiDayStyle:");
}

id objc_msgSend_heightWithoutNoAllDayOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightWithoutNoAllDayOccurrences");
}

id objc_msgSend_hidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidden");
}

id objc_msgSend_hideColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideColumn:");
}

id objc_msgSend_hideDaySummariesWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideDaySummariesWithScale:");
}

id objc_msgSend_hideNowDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideNowDot:");
}

id objc_msgSend_hideOverlayAndNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideOverlayAndNumber:");
}

id objc_msgSend_hideSearchBarForNavigationTransitionAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideSearchBarForNavigationTransitionAnimated:");
}

id objc_msgSend_hideText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideText");
}

id objc_msgSend_hideTimelineHighlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideTimelineHighlight");
}

id objc_msgSend_hideYearNumberAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideYearNumberAnimated:");
}

id objc_msgSend_hidesBackButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidesBackButton");
}

id objc_msgSend_highlightDayViewCalendarDate_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightDayViewCalendarDate:isAllDay:");
}

id objc_msgSend_hitTest_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hitTest:withEvent:");
}

id objc_msgSend_horizontalScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalScrollView");
}

id objc_msgSend_horizontalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalSizeClass");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hour");
}

id objc_msgSend_hourFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hourFont");
}

id objc_msgSend_hourHeightForSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hourHeightForSizeClass:orientation:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identityChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityChanged:");
}

id objc_msgSend_identityChooserSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityChooserSection");
}

id objc_msgSend_ignoreUnsavedChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreUnsavedChanges");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageFlippedForRightToLeftLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFlippedForRightToLeftLayoutDirection");
}

id objc_msgSend_imageForCurrentDayViewMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForCurrentDayViewMode");
}

id objc_msgSend_imageForDayViewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForDayViewMode:");
}

id objc_msgSend_imageForString_atRect_withSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForString:atRect:withSize:");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithActions:");
}

id objc_msgSend_imageWithRenderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithRenderingMode:");
}

id objc_msgSend_imageWithTintColor_renderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithTintColor:renderingMode:");
}

id objc_msgSend_impactOccurredWithIntensity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impactOccurredWithIntensity:");
}

id objc_msgSend_inboxBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxBarButtonItem");
}

id objc_msgSend_inboxDisclosureImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxDisclosureImage");
}

id objc_msgSend_inboxImageForCount_selected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxImageForCount:selected:");
}

id objc_msgSend_inboxNewSectionViewController_inspectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxNewSectionViewController:inspectEvent:");
}

id objc_msgSend_inboxNewSectionViewController_shouldCloseAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxNewSectionViewController:shouldCloseAnimated:");
}

id objc_msgSend_inboxNewSectionViewController_viewCommentsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxNewSectionViewController:viewCommentsForEvent:");
}

id objc_msgSend_inboxNewSectionViewController_viewProposedTimeForAttendee_onEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxNewSectionViewController:viewProposedTimeForAttendee:onEvent:");
}

id objc_msgSend_inboxRepliedSectionItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxRepliedSectionItems");
}

id objc_msgSend_inboxRepliedSectionViewController_inspectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxRepliedSectionViewController:inspectEvent:");
}

id objc_msgSend_inboxSwitcherViewController_inspectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxSwitcherViewController:inspectEvent:");
}

id objc_msgSend_inboxSwitcherViewController_shouldCloseAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxSwitcherViewController:shouldCloseAnimated:");
}

id objc_msgSend_inboxSwitcherViewController_viewCommentsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxSwitcherViewController:viewCommentsForEvent:");
}

id objc_msgSend_inboxSwitcherViewController_viewProposedTimeForAttendee_onEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxSwitcherViewController:viewProposedTimeForAttendee:onEvent:");
}

id objc_msgSend_inboxSwitcherViewControllerRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxSwitcherViewControllerRightBarButtonItem:");
}

id objc_msgSend_inboxTableViewGroupController_addedRows_removedRows_updatedRows_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxTableViewGroupController:addedRows:removedRows:updatedRows:");
}

id objc_msgSend_inboxTableViewGroupController_inspectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxTableViewGroupController:inspectEvent:");
}

id objc_msgSend_inboxTableViewGroupController_requestsReloadOfRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxTableViewGroupController:requestsReloadOfRow:");
}

id objc_msgSend_inboxTableViewGroupController_viewCommentsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxTableViewGroupController:viewCommentsForEvent:");
}

id objc_msgSend_inboxTableViewGroupController_viewProposedTimeForAttendee_onEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxTableViewGroupController:viewProposedTimeForAttendee:onEvent:");
}

id objc_msgSend_inboxViewControllerWantsShowEvent_animated_showMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxViewControllerWantsShowEvent:animated:showMode:");
}

id objc_msgSend_inboxWillDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inboxWillDismiss");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexPathForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForCell:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_indexPathForRowAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRowAtPoint:");
}

id objc_msgSend_indexPathForSelectedRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForSelectedRow");
}

id objc_msgSend_indexPathWithIndexes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathWithIndexes:length:");
}

id objc_msgSend_indexPathsForOccurrence_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathsForOccurrence:usingFilter:");
}

id objc_msgSend_indexPathsForSelectedRows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathsForSelectedRows");
}

id objc_msgSend_indexPathsForVisibleRows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathsForVisibleRows");
}

id objc_msgSend_indexSetWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndex:");
}

id objc_msgSend_initCalendarDate_calendar_maximumNumberOfMonths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initCalendarDate:calendar:maximumNumberOfMonths:");
}

id objc_msgSend_initForCarplayWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForCarplayWithReuseIdentifier:");
}

id objc_msgSend_initWithAbsoluteTime_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAbsoluteTime:timeZone:");
}

id objc_msgSend_initWithActivationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivationHandler:");
}

id objc_msgSend_initWithActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityType:");
}

id objc_msgSend_initWithAddItemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddItemState:");
}

id objc_msgSend_initWithApplication_model_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:model:options:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBarButtonSystemItem_primaryAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:primaryAction:");
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:target:action:");
}

id objc_msgSend_initWithBarPalette_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarPalette:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithCalendar_selectedDate_cellFactory_eventSpringLoadingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendar:selectedDate:cellFactory:eventSpringLoadingEnabled:");
}

id objc_msgSend_initWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarDate:");
}

id objc_msgSend_initWithCalendarDate_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarDate:calendar:");
}

id objc_msgSend_initWithCalendarDate_calendar_compressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarDate:calendar:compressed:");
}

id objc_msgSend_initWithCalendarDate_model_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarDate:model:window:");
}

id objc_msgSend_initWithCalendarModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarModel:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithContainer_center_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainer:center:");
}

id objc_msgSend_initWithContentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentView:");
}

id objc_msgSend_initWithCustomView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCustomView:");
}

id objc_msgSend_initWithDataPath_pasteboardManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataPath:pasteboardManager:");
}

id objc_msgSend_initWithDate_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:timeZone:");
}

id objc_msgSend_initWithDate_view_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:view:calendar:");
}

id objc_msgSend_initWithDateComponents_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateComponents:timeZone:");
}

id objc_msgSend_initWithDay_model_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDay:model:window:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithEditors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEditors:");
}

id objc_msgSend_initWithEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffect:");
}

id objc_msgSend_initWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:");
}

id objc_msgSend_initWithEvent_participantRecipients_subjectPrefix_bodyPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:participantRecipients:subjectPrefix:bodyPrefix:");
}

id objc_msgSend_initWithEvent_rect_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:rect:state:");
}

id objc_msgSend_initWithEvent_showDayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:showDayName:");
}

id objc_msgSend_initWithEvent_view_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:view:");
}

id objc_msgSend_initWithEventIndex_calendarOrder_dayRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventIndex:calendarOrder:dayRange:");
}

id objc_msgSend_initWithEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventStore:");
}

id objc_msgSend_initWithEventStore_limitedToSource_visibilityChangedCallback_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventStore:limitedToSource:visibilityChangedCallback:queue:");
}

id objc_msgSend_initWithEventStore_pasteboardManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventStore:pasteboardManager:");
}

id objc_msgSend_initWithEventStore_undoManager_alertDisplayer_pendingReminderTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventStore:undoManager:alertDisplayer:pendingReminderTracker:");
}

id objc_msgSend_initWithEventStore_visibilityChangedCallback_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventStore:visibilityChangedCallback:queue:");
}

id objc_msgSend_initWithEvents_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvents:delegate:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_actions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:actions:");
}

id objc_msgSend_initWithFrame_actions_delegate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:actions:delegate:options:");
}

id objc_msgSend_initWithFrame_calendar_selectedDate_cellFactory_eventSpringLoadingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:calendar:selectedDate:cellFactory:eventSpringLoadingEnabled:");
}

id objc_msgSend_initWithFrame_loadMonthAnimationState_hasOverlay_sizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:loadMonthAnimationState:hasOverlay:sizeClass:");
}

id objc_msgSend_initWithFrame_occurrence_forDayRange_isCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:occurrence:forDayRange:isCompact:");
}

id objc_msgSend_initWithFrame_occurrence_forDayRange_isProposedTime_isCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:occurrence:forDayRange:isProposedTime:isCompact:");
}

id objc_msgSend_initWithFrame_orientation_numberOfDaysToDisplay_opaque_backgroundColor_rightClickDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:orientation:numberOfDaysToDisplay:opaque:backgroundColor:rightClickDelegate:");
}

id objc_msgSend_initWithFrame_sizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:sizeClass:");
}

id objc_msgSend_initWithFrame_sizeClass_orientation_backgroundColor_opaque_isMiniPreviewInEventDetail_numberOfDaysToDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:sizeClass:orientation:backgroundColor:opaque:isMiniPreviewInEventDetail:numberOfDaysToDisplay:");
}

id objc_msgSend_initWithFrame_sizeClass_targetWindow_rightClickDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:sizeClass:targetWindow:rightClickDelegate:");
}

id objc_msgSend_initWithFrame_sizeClass_targetWindow_rightClickDelegate_isMultiDayView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:sizeClass:targetWindow:rightClickDelegate:isMultiDayView:");
}

id objc_msgSend_initWithFrame_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:style:");
}

id objc_msgSend_initWithFrame_targetSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:targetSizeClass:orientation:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithImage_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:menu:");
}

id objc_msgSend_initWithImage_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:style:target:action:");
}

id objc_msgSend_initWithItemContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemContentType:");
}

id objc_msgSend_initWithItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItems:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:");
}

id objc_msgSend_initWithModel_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:delegate:");
}

id objc_msgSend_initWithModel_destination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:destination:");
}

id objc_msgSend_initWithModel_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:event:");
}

id objc_msgSend_initWithModel_eventStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:eventStartDate:");
}

id objc_msgSend_initWithModel_eventTitle_startDate_endDate_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:eventTitle:startDate:endDate:location:");
}

id objc_msgSend_initWithModel_paletteView_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:paletteView:reverse:");
}

id objc_msgSend_initWithModel_targetWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:targetWindow:");
}

id objc_msgSend_initWithModel_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithModel:window:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithNavigationView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationView:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithOccurrenceInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOccurrenceInfo:");
}

id objc_msgSend_initWithOccurrenceViews_selectedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOccurrenceViews:selectedEvent:");
}

id objc_msgSend_initWithOccurrences_timedOccurrences_allDayOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOccurrences:timedOccurrences:allDayOccurrences:");
}

id objc_msgSend_initWithOptions_testName_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:testName:application:");
}

id objc_msgSend_initWithPaddingCellEnabled_titleForSectionHeader_shouldCollapseMultipleAllDayEvents_model_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPaddingCellEnabled:titleForSectionHeader:shouldCollapseMultipleAllDayEvents:model:");
}

id objc_msgSend_initWithPasteboardManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPasteboardManager:");
}

id objc_msgSend_initWithPlacement_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlacement:options:");
}

id objc_msgSend_initWithPresentingViewController_transition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPresentingViewController:transition:completion:");
}

id objc_msgSend_initWithProposedTimeAttendee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProposedTimeAttendee:");
}

id objc_msgSend_initWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReuseIdentifier:");
}

id objc_msgSend_initWithRootNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootNavigationController:");
}

id objc_msgSend_initWithRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootViewController:");
}

id objc_msgSend_initWithSearchResultsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSearchResultsController:");
}

id objc_msgSend_initWithSelectionStyle_displayStyle_entityType_forEvent_eventStore_limitedToSource_showIdentityChooser_showDelegateSetupCell_showAccountStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSelectionStyle:displayStyle:entityType:forEvent:eventStore:limitedToSource:showIdentityChooser:showDelegateSetupCell:showAccountStatus:");
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:");
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:format:");
}

id objc_msgSend_initWithSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSizeClass:");
}

id objc_msgSend_initWithStartView_endView_startFrame_endFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartView:endView:startFrame:endFrame:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:");
}

id objc_msgSend_initWithSuperclassDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuperclassDescription:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTargetSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetSizeClass:");
}

id objc_msgSend_initWithTestName_scrollView_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestName:scrollView:completionHandler:");
}

id objc_msgSend_initWithTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:");
}

id objc_msgSend_initWithTitle_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:style:target:action:");
}

id objc_msgSend_initWithTitle_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:target:action:");
}

id objc_msgSend_initWithValue_size_layoutShift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:size:layoutShift:");
}

id objc_msgSend_initWithView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithView:");
}

id objc_msgSend_initWithView_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithView:delegate:");
}

id objc_msgSend_initWithView_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithView:parameters:");
}

id objc_msgSend_initWithView_parameters_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithView:parameters:target:");
}

id objc_msgSend_initWithView_views_bounds_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithView:views:bounds:traitCollection:");
}

id objc_msgSend_initWithViewController_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewController:options:");
}

id objc_msgSend_initWithViewController_shouldShowWithAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewController:shouldShowWithAnimation:");
}

id objc_msgSend_initWithViewControllerToShow_toBeShownInViewController_shouldBeModal_shouldShowWithAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewControllerToShow:toBeShownInViewController:shouldBeModal:shouldShowWithAnimation:");
}

id objc_msgSend_initWithWeekView_andCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWeekView:andCalendar:");
}

id objc_msgSend_initWithWindow_model_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindow:model:");
}

id objc_msgSend_initialPresentationHasCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialPresentationHasCompleted");
}

id objc_msgSend_initiallyInteractive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initiallyInteractive");
}

id objc_msgSend_inputEventData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputEventData");
}

id objc_msgSend_inputInvalid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputInvalid");
}

id objc_msgSend_insertChildMenu_atStartOfMenuForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertChildMenu:atStartOfMenuForIdentifier:");
}

id objc_msgSend_insertNewLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewLayer");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_insertSubview_aboveSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:aboveSubview:");
}

id objc_msgSend_insertSubview_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:atIndex:");
}

id objc_msgSend_insertSubview_belowSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:belowSubview:");
}

id objc_msgSend_insertViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertViews:");
}

id objc_msgSend_insetBounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insetBounds");
}

id objc_msgSend_installCACommitCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installCACommitCompletionBlock:");
}

id objc_msgSend_instancesRespondToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instancesRespondToSelector:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intendedSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intendedSizeClass");
}

id objc_msgSend_intent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intent");
}

id objc_msgSend_interTextSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interTextSpacing");
}

id objc_msgSend_interTextSpacingCircled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interTextSpacingCircled");
}

id objc_msgSend_interaction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interaction");
}

id objc_msgSend_interactions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interactions");
}

id objc_msgSend_interactivePopGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interactivePopGestureRecognizer");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_internalEditViewDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalEditViewDelegate");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intersectingRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectingRect:");
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicContentSize");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateBackButtonDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateBackButtonDate");
}

id objc_msgSend_invalidateFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateFonts");
}

id objc_msgSend_invalidateManagedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateManagedNavigationController");
}

id objc_msgSend_invisibleCalendars(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invisibleCalendars");
}

id objc_msgSend_invisibleCalendarsForAllIdentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invisibleCalendarsForAllIdentities");
}

id objc_msgSend_invitationBearingStoresExistForEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitationBearingStoresExistForEvents");
}

id objc_msgSend_inviteReplyNotificationFromEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inviteReplyNotificationFromEventStore:");
}

id objc_msgSend_invitedBy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitedBy");
}

id objc_msgSend_isAfterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAfterDate:");
}

id objc_msgSend_isAfterDayForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAfterDayForDate:inCalendar:");
}

id objc_msgSend_isAllDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAllDay");
}

id objc_msgSend_isAnimated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnimated");
}

id objc_msgSend_isBackgroundScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackgroundScene");
}

id objc_msgSend_isBeforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeforeDate:");
}

id objc_msgSend_isBeforeDayForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeforeDayForDate:inCalendar:");
}

id objc_msgSend_isBeingDismissed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingDismissed");
}

id objc_msgSend_isBirthday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBirthday");
}

id objc_msgSend_isBroadcast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBroadcast");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCollapsed");
}

id objc_msgSend_isCompact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCompact");
}

id objc_msgSend_isContinuitySupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContinuitySupported");
}

id objc_msgSend_isCurrentMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentMonth");
}

id objc_msgSend_isCurrentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentUser");
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDateInToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDateInToday:");
}

id objc_msgSend_isDateInWeekend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDateInWeekend:");
}

id objc_msgSend_isDateVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDateVisible:");
}

id objc_msgSend_isDecelerating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDecelerating");
}

id objc_msgSend_isDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDelegate");
}

id objc_msgSend_isDescendantOfView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDescendantOfView:");
}

id objc_msgSend_isDragging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDragging");
}

id objc_msgSend_isEditable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEditable");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAttributedString:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEqualToTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTimeZone:");
}

id objc_msgSend_isEventAbleToShowPopover_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEventAbleToShowPopover:");
}

id objc_msgSend_isEventFullyVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEventFullyVisible:");
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExecuting");
}

id objc_msgSend_isFilledForDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFilledForDay:");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstResponder");
}

id objc_msgSend_isFocusBannerSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFocusBannerSection:");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isHighlighted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHighlighted");
}

id objc_msgSend_isHolidayCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHolidayCalendar");
}

id objc_msgSend_isIdentityChooserSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIdentityChooserSection:");
}

id objc_msgSend_isIgnoringEventAlerts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIgnoringEventAlerts");
}

id objc_msgSend_isInUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInUse");
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInstalled");
}

id objc_msgSend_isIntegrationEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIntegrationEvent");
}

id objc_msgSend_isLeapMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLeapMonth");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isModalInPresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isModalInPresentation");
}

id objc_msgSend_isMultiDayTimed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiDayTimed");
}

id objc_msgSend_isMultiDayTimedEventInCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiDayTimedEventInCalendar:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiUser");
}

id objc_msgSend_isNarrow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNarrow");
}

id objc_msgSend_isNarrowWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNarrowWithScale:");
}

id objc_msgSend_isNavigationBarHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNavigationBarHidden");
}

id objc_msgSend_isNew(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNew");
}

id objc_msgSend_isOrWasPartOfRecurringSeries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOrWasPartOfRecurringSeries");
}

id objc_msgSend_isPointInSymbol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPointInSymbol:");
}

id objc_msgSend_isPointInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPointInView:");
}

id objc_msgSend_isPresentedInsidePopover(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPresentedInsidePopover");
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReady");
}

id objc_msgSend_isReadyToShowViewControllersInsideEnqueueableManagedNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToShowViewControllersInsideEnqueueableManagedNavigationController:");
}

id objc_msgSend_isReadyToShowViewControllersInsideEnqueueableManagedNavigationController_isPreemptiveCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToShowViewControllersInsideEnqueueableManagedNavigationController:isPreemptiveCheck:");
}

id objc_msgSend_isRecapAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRecapAvailable");
}

id objc_msgSend_isReminderAppLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReminderAppLocked");
}

id objc_msgSend_isReminderIntegrationEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReminderIntegrationEvent");
}

id objc_msgSend_isReminderStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReminderStack");
}

id objc_msgSend_isRotating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRotating");
}

id objc_msgSend_isRunningTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningTest");
}

id objc_msgSend_isSameDayAsDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSameDayAsDate:inCalendar:");
}

id objc_msgSend_isSceneCalendarAppScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSceneCalendarAppScene:");
}

id objc_msgSend_isScrollAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScrollAnimating");
}

id objc_msgSend_isSelectable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelectable");
}

id objc_msgSend_isSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelected");
}

id objc_msgSend_isSelectedCopyView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelectedCopyView");
}

id objc_msgSend_isShortResumeToTodayTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShortResumeToTodayTimeout");
}

id objc_msgSend_isSingleDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSingleDay");
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSuspended");
}

id objc_msgSend_isTextTruncated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTextTruncated");
}

id objc_msgSend_isToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isToday");
}

id objc_msgSend_isTodayHighlightVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTodayHighlightVisible");
}

id objc_msgSend_isTodayVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTodayVisible");
}

id objc_msgSend_isTomorrow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTomorrow");
}

id objc_msgSend_isToolbarHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isToolbarHidden");
}

id objc_msgSend_isTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTracking");
}

id objc_msgSend_isUserFingerDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserFingerDown");
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isViewLoaded");
}

id objc_msgSend_isWaitingForBackgroundLoadingOfSelectedEventOccurrenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWaitingForBackgroundLoadingOfSelectedEventOccurrenceView");
}

id objc_msgSend_isWeekend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWeekend");
}

id objc_msgSend_iterateThroughEachAllDayRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateThroughEachAllDayRow:");
}

id objc_msgSend_iterateThroughEachOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateThroughEachOccurrence:");
}

id objc_msgSend_joinMethods(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinMethods");
}

id objc_msgSend_jumpToTodayActionPerformed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jumpToTodayActionPerformed");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "key");
}

id objc_msgSend_kickOffAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kickOffAnimation");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_labelElementsVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelElementsVisible");
}

id objc_msgSend_labelRelatedConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelRelatedConstraints");
}

id objc_msgSend_largeListViewDisclosingEventDetails(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeListViewDisclosingEventDetails");
}

id objc_msgSend_largeMonthWeekView_didDoubleTapOnDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:didDoubleTapOnDay:");
}

id objc_msgSend_largeMonthWeekView_didTapOccurrence_onDay_extendSelection_userInitiated_tappedSymbol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:didTapOccurrence:onDay:extendSelection:userInitiated:tappedSymbol:");
}

id objc_msgSend_largeMonthWeekView_touchesBegan_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:touchesBegan:withEvent:");
}

id objc_msgSend_largeMonthWeekView_touchesCancelled_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:touchesCancelled:withEvent:");
}

id objc_msgSend_largeMonthWeekView_touchesEnded_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:touchesEnded:withEvent:");
}

id objc_msgSend_largeMonthWeekView_touchesMoved_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeMonthWeekView:touchesMoved:withEvent:");
}

id objc_msgSend_largeOverlayCircleDiameterForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeOverlayCircleDiameterForSizeClass:");
}

id objc_msgSend_largeTextRegularController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeTextRegularController");
}

id objc_msgSend_largeTitleTextAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeTitleTextAttributes");
}

id objc_msgSend_lastBaselineAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBaselineAnchor");
}

id objc_msgSend_lastDisplayedSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDisplayedSecond");
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastName");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastSecondOfWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSecondOfWeek");
}

id objc_msgSend_lastSidebarMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSidebarMode");
}

id objc_msgSend_lastSuspendTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSuspendTime");
}

id objc_msgSend_lastUsedNonYearView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastUsedNonYearView");
}

id objc_msgSend_lastViewMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastViewMode");
}

id objc_msgSend_lastViewedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastViewedDate");
}

id objc_msgSend_lastViewedOccurrenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastViewedOccurrenceDate");
}

id objc_msgSend_lastViewedOccurrenceUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastViewedOccurrenceUID");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_launchedToTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedToTest");
}

id objc_msgSend_layedOutRowsRemoveAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layedOutRowsRemoveAllObjects");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutBelowIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutBelowIfNeeded");
}

id objc_msgSend_layoutCellsAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutCellsAnimated:");
}

id objc_msgSend_layoutForWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutForWidth:");
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutIfNeeded");
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMargins");
}

id objc_msgSend_layoutMarginsGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMarginsGuide");
}

id objc_msgSend_layoutMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMetrics");
}

id objc_msgSend_layoutOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutOccurrences");
}

id objc_msgSend_layoutOccurrencesIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutOccurrencesIfNeeded");
}

id objc_msgSend_layoutSearchControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutSearchControl");
}

id objc_msgSend_layoutSegmentedControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutSegmentedControl");
}

id objc_msgSend_layoutShift(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutShift");
}

id objc_msgSend_layoutSublayersOfLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutSublayersOfLayer:");
}

id objc_msgSend_layoutSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutSubviews");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_leadingButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingButton");
}

id objc_msgSend_leadingVerticalLinePeak(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingVerticalLinePeak");
}

id objc_msgSend_leftBarButtonBlankFixedSpaceWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftBarButtonBlankFixedSpaceWidth");
}

id objc_msgSend_leftBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftBarButtonItem");
}

id objc_msgSend_leftContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftContentInset");
}

id objc_msgSend_leftMarginAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftMarginAdjustment");
}

id objc_msgSend_leftMarginForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftMarginForWindowSize:");
}

id objc_msgSend_leftStringForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftStringForDate:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_liftUpOccurrenceForEditingEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "liftUpOccurrenceForEditingEvent:");
}

id objc_msgSend_lightGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lightGrayColor");
}

id objc_msgSend_lineHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineHeight");
}

id objc_msgSend_lineHeightAdjustmentOffsetY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineHeightAdjustmentOffsetY:");
}

id objc_msgSend_listGroupedCellConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listGroupedCellConfiguration");
}

id objc_msgSend_listSidebarCellConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listSidebarCellConfiguration");
}

id objc_msgSend_listViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewController");
}

id objc_msgSend_listViewController_didScrollToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewController:didScrollToDate:");
}

id objc_msgSend_listViewControllerContainerHandlesShowEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewControllerContainerHandlesShowEvent");
}

id objc_msgSend_listViewControllerShouldShowEvent_showMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewControllerShouldShowEvent:showMode:");
}

id objc_msgSend_listViewDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewDelegate");
}

id objc_msgSend_listViewNormalLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listViewNormalLocation");
}

id objc_msgSend_loadAndLayoutOccurrences_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAndLayoutOccurrences:reverse:");
}

id objc_msgSend_loadContactsAsynchronously(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadContactsAsynchronously");
}

id objc_msgSend_loadDataAsyncWithCompletion_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadDataAsyncWithCompletion:reverse:");
}

id objc_msgSend_loadDataBetweenStart_end_withTrigger_generation_completionForCurrentDayReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadDataBetweenStart:end:withTrigger:generation:completionForCurrentDayReload:");
}

id objc_msgSend_loadViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadViewController");
}

id objc_msgSend_loadViewIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadViewIfNeeded");
}

id objc_msgSend_loadViewsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadViewsIfNeeded");
}

id objc_msgSend_loadedEventCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadedEventCollection");
}

id objc_msgSend_localCustomObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localCustomObjectForKey:");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locale");
}

id objc_msgSend_localeChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeChanged");
}

id objc_msgSend_localeDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeDidChange");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeIdentifier");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedPasteStringForEventCount_includeHere_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedPasteStringForEventCount:includeHere:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringFromNumber_numberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromNumber:numberStyle:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedStringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "location");
}

id objc_msgSend_locationAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationAddress");
}

id objc_msgSend_locationBaselineToTitleBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationBaselineToTitleBaselineConstraint");
}

id objc_msgSend_locationChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationChanged");
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationInView:");
}

id objc_msgSend_locationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationName");
}

id objc_msgSend_locationOfTouch_inView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationOfTouch:inView:");
}

id objc_msgSend_locationWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationWithTitle:");
}

id objc_msgSend_logEventConfirmedInboxWithUniqueKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEventConfirmedInboxWithUniqueKey:");
}

id objc_msgSend_logEventRejectedInboxWithUniqueKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logEventRejectedInboxWithUniqueKey:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainContentSize");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_mainSystem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainSystem");
}

id objc_msgSend_mainView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainView");
}

id objc_msgSend_mainViewControllerCanChangeSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainViewControllerCanChangeSelectedDate");
}

id objc_msgSend_mainViewControllerCanChangeSelectedEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainViewControllerCanChangeSelectedEvent");
}

id objc_msgSend_makeDayCircleForDate_isToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeDayCircleForDate:isToday:");
}

id objc_msgSend_makeKeyAndVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeKeyAndVisible");
}

id objc_msgSend_managedNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedNavigationController");
}

id objc_msgSend_managedNavigationControllerType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedNavigationControllerType");
}

id objc_msgSend_managedNavigationControllerWillBeInvalidated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedNavigationControllerWillBeInvalidated");
}

id objc_msgSend_mapsURLForLocation_onEvent_hasMapItemLaunchOptionFromTimeToLeaveNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsURLForLocation:onEvent:hasMapItemLaunchOptionFromTimeToLeaveNotification:");
}

id objc_msgSend_mask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mask");
}

id objc_msgSend_maskImageForImage_atPoint_withSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maskImageForImage:atPoint:withSize:");
}

id objc_msgSend_matchesMonthView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesMonthView");
}

id objc_msgSend_maxBufferViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxBufferViews");
}

id objc_msgSend_maxNarrowOccurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNarrowOccurrenceHeight");
}

id objc_msgSend_maxOccurrencesWithoutScroller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxOccurrencesWithoutScroller");
}

id objc_msgSend_maximumCachedReusableViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumCachedReusableViews");
}

id objc_msgSend_maximumHourScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumHourScale");
}

id objc_msgSend_maximumNumberOfMonths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumNumberOfMonths");
}

id objc_msgSend_maximumWeekScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumWeekScale");
}

id objc_msgSend_menuAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuAppearance");
}

id objc_msgSend_menuForEvents_presentationController_isEditMenu_overrideActionBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuForEvents:presentationController:isEditMenu:overrideActionBlock:completionBlock:");
}

id objc_msgSend_menuWithChildren_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuWithChildren:");
}

id objc_msgSend_menuWithTitle_children_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuWithTitle:children:");
}

id objc_msgSend_menuWithTitle_image_identifier_options_children_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuWithTitle:image:identifier:options:children:");
}

id objc_msgSend_messageCell_committedComment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageCell:committedComment:");
}

id objc_msgSend_messageSendingManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageSendingManager");
}

id objc_msgSend_metricsForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForTextStyle:");
}

id objc_msgSend_middleHeightForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "middleHeightForWindowSize:");
}

id objc_msgSend_minNarrowOccurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minNarrowOccurrenceHeight");
}

id objc_msgSend_minimalMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimalMode");
}

id objc_msgSend_minimumHeightForSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumHeightForSizeClass:orientation:");
}

id objc_msgSend_minimumHeightForSizeClass_orientation_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumHeightForSizeClass:orientation:isAllDay:");
}

id objc_msgSend_minimumHeightForSizeClass_orientation_isAllDay_usesSmallText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumHeightForSizeClass:orientation:isAllDay:usesSmallText:");
}

id objc_msgSend_minimumHourScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumHourScale");
}

id objc_msgSend_minimumStandardWindowWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumStandardWindowWidth");
}

id objc_msgSend_minimumWeekScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumWeekScale");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minute");
}

id objc_msgSend_mobileCalWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mobileCalWindow");
}

id objc_msgSend_modalPresentationDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modalPresentationDelegate");
}

id objc_msgSend_modalPresentationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modalPresentationStyle");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelSelectedEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelSelectedEvent");
}

id objc_msgSend_modelSelectedEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelSelectedEvents");
}

id objc_msgSend_modifiedEndDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifiedEndDate");
}

id objc_msgSend_modifiedStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifiedStartDate");
}

id objc_msgSend_modifierFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifierFlags");
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "month");
}

id objc_msgSend_monthAnimationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthAnimationState");
}

id objc_msgSend_monthBreakIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthBreakIndex");
}

id objc_msgSend_monthCellFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthCellFrames");
}

id objc_msgSend_monthClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthClass");
}

id objc_msgSend_monthDayNavigationTransitionViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthDayNavigationTransitionViewClass");
}

id objc_msgSend_monthDayStringForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthDayStringForDate:inCalendar:");
}

id objc_msgSend_monthDayTransitionViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthDayTransitionViewClass");
}

id objc_msgSend_monthFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthFrame");
}

id objc_msgSend_monthFrameForCalendarDate_adjustHeightUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthFrameForCalendarDate:adjustHeightUp:");
}

id objc_msgSend_monthFrameInMonthView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthFrameInMonthView");
}

id objc_msgSend_monthHeaderLocationForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthHeaderLocationForCalendarDate:");
}

id objc_msgSend_monthLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthLabel");
}

id objc_msgSend_monthLabelFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthLabelFrame");
}

id objc_msgSend_monthLabelText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthLabelText");
}

id objc_msgSend_monthMultiDayTransitionViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthMultiDayTransitionViewClass");
}

id objc_msgSend_monthNameFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthNameFont");
}

id objc_msgSend_monthNameLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthNameLabel");
}

id objc_msgSend_monthOccurrencesFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthOccurrencesFrame");
}

id objc_msgSend_monthOccurrencesSnapshot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthOccurrencesSnapshot");
}

id objc_msgSend_monthScrubberFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthScrubberFrame");
}

id objc_msgSend_monthSplittingCutOutArea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthSplittingCutOutArea");
}

id objc_msgSend_monthString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthString");
}

id objc_msgSend_monthSummaryFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthSummaryFrames");
}

id objc_msgSend_monthSummarySnapshots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthSummarySnapshots");
}

id objc_msgSend_monthTitleView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthTitleView");
}

id objc_msgSend_monthView_gestureBegan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthView:gestureBegan:");
}

id objc_msgSend_monthView_gestureCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthView:gestureCancelled:");
}

id objc_msgSend_monthView_gestureChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthView:gestureChanged:");
}

id objc_msgSend_monthView_gestureEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthView:gestureEnded:");
}

id objc_msgSend_monthViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewController");
}

id objc_msgSend_monthViewEventScaleSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewEventScaleSize");
}

id objc_msgSend_monthViewForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewForCalendarDate:");
}

id objc_msgSend_monthViewScaleIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewScaleIcon");
}

id objc_msgSend_monthViewScaleSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewScaleSize");
}

id objc_msgSend_monthViewScaleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewScaleText");
}

id objc_msgSend_monthViewScaleTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewScaleTitle");
}

id objc_msgSend_monthViewSplittingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewSplittingLocation");
}

id objc_msgSend_monthViewSubviewSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthViewSubviewSize");
}

id objc_msgSend_monthWeekOccurrencesView_selectedEvent_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthWeekOccurrencesView:selectedEvent:userInitiated:");
}

id objc_msgSend_monthWeekScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthWeekScale");
}

id objc_msgSend_monthWeekSubviewForScrollPoint_pointInWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthWeekSubviewForScrollPoint:pointInWeek:");
}

id objc_msgSend_monthWeekViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthWeekViewClass");
}

id objc_msgSend_monthWeekViewForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthWeekViewForCalendarDate:");
}

id objc_msgSend_monthsPerRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monthsPerRow");
}

id objc_msgSend_movePreloadedItemsToVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movePreloadedItemsToVisible");
}

id objc_msgSend_moveRowAtIndexPath_toIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveRowAtIndexPath:toIndexPath:");
}

id objc_msgSend_multiDayViewVisibleHeightWithUserVisibleEarliestDate_latestDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiDayViewVisibleHeightWithUserVisibleEarliestDate:latestDate:");
}

id objc_msgSend_multipleMonthViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multipleMonthViewClass");
}

id objc_msgSend_mustAcknowledgeMasterEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mustAcknowledgeMasterEvent");
}

id objc_msgSend_mustDisplaySplashScreenToUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mustDisplaySplashScreenToUser");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_myFullName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "myFullName");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_narrowScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "narrowScale");
}

id objc_msgSend_naturalHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "naturalHeight");
}

id objc_msgSend_navDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navDelegate");
}

id objc_msgSend_navigateToEventDetails_fromController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToEventDetails:fromController:");
}

id objc_msgSend_navigateToNextDateComponentUnitAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToNextDateComponentUnitAnimated:");
}

id objc_msgSend_navigateToNextSelectableItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToNextSelectableItem");
}

id objc_msgSend_navigateToPreviousDateComponentUnitAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToPreviousDateComponentUnitAnimated:");
}

id objc_msgSend_navigateToPreviousSelectableItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToPreviousSelectableItem");
}

id objc_msgSend_navigateToScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToScrollView");
}

id objc_msgSend_navigationBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBar");
}

id objc_msgSend_navigationBarDisplayedDateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarDisplayedDateString");
}

id objc_msgSend_navigationBarTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarTintColor");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationController_willShowViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController:willShowViewController:animated:");
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationItem");
}

id objc_msgSend_navigationThrottleOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationThrottleOperation");
}

id objc_msgSend_nearestMajorBoundaryForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestMajorBoundaryForPoint:");
}

id objc_msgSend_nearestMajorBoundaryForPoint_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestMajorBoundaryForPoint:date:");
}

id objc_msgSend_nearestSnapBoundaryForScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestSnapBoundaryForScale:");
}

id objc_msgSend_newBottomViewBelowViewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newBottomViewBelowViewWithCalendarDate:");
}

id objc_msgSend_newDateLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDateLabel");
}

id objc_msgSend_newEventBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newEventBarButtonItem");
}

id objc_msgSend_newFeedbackViewForDraggingOccurrence_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFeedbackViewForDraggingOccurrence:atPoint:");
}

id objc_msgSend_newItemBackButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newItemBackButtonTitle");
}

id objc_msgSend_newItemTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newItemTitle");
}

id objc_msgSend_newTopViewAboveViewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTopViewAboveViewWithCalendarDate:");
}

id objc_msgSend_next(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "next");
}

id objc_msgSend_nextAvailableOccurrenceViewYOriginForDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextAvailableOccurrenceViewYOriginForDay:");
}

id objc_msgSend_nextJournaledViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextJournaledViewController");
}

id objc_msgSend_nextLevelWeekViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextLevelWeekViewController");
}

id objc_msgSend_nextLevelWeekViewControllerWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextLevelWeekViewControllerWithDate:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextOccurrence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextOccurrence");
}

id objc_msgSend_nextOccurrenceOrDetachmentAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextOccurrenceOrDetachmentAfter:");
}

id objc_msgSend_noContentStringForInboxTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noContentStringForInboxTableView:");
}

id objc_msgSend_nonTodayCircleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonTodayCircleColor");
}

id objc_msgSend_nonTodayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonTodayColor");
}

id objc_msgSend_normalFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalFontForSize:");
}

id objc_msgSend_normalPlatterBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalPlatterBackgroundColor");
}

id objc_msgSend_normalPrimaryTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalPrimaryTextColor");
}

id objc_msgSend_notPredicateWithSubpredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notPredicateWithSubpredicate:");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notification");
}

id objc_msgSend_notificationIsCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationIsCancelled");
}

id objc_msgSend_notificationIsInvite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationIsInvite");
}

id objc_msgSend_notificationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationName");
}

id objc_msgSend_notificationResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationResponse");
}

id objc_msgSend_notifyWhenInteractionChangesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyWhenInteractionChangesUsingBlock:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numAttendees(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numAttendees");
}

id objc_msgSend_numDaysToShow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numDaysToShow");
}

id objc_msgSend_numMultiDays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numMultiDays");
}

id objc_msgSend_numberFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFrame");
}

id objc_msgSend_numberOfCachedOccurrencesInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfCachedOccurrencesInSection:");
}

id objc_msgSend_numberOfCachedOccurrencesInSection_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfCachedOccurrencesInSection:usingFilter:");
}

id objc_msgSend_numberOfDaysWithCachedOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfDaysWithCachedOccurrences");
}

id objc_msgSend_numberOfDaysWithCachedOccurrencesUsingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfDaysWithCachedOccurrencesUsingFilter:");
}

id objc_msgSend_numberOfEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfEvents");
}

id objc_msgSend_numberOfEventsToPaste(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfEventsToPaste");
}

id objc_msgSend_numberOfLinesForBodyLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfLinesForBodyLabels");
}

id objc_msgSend_numberOfLinesForTitleLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfLinesForTitleLabels");
}

id objc_msgSend_numberOfLinesInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfLinesInString:");
}

id objc_msgSend_numberOfMatchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfMatchesInString:options:range:");
}

id objc_msgSend_numberOfMonthsPerRowForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfMonthsPerRowForWindowSize:");
}

id objc_msgSend_numberOfNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfNotifications");
}

id objc_msgSend_numberOfRows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfRows");
}

id objc_msgSend_numberOfSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSections");
}

id objc_msgSend_numberOfSectionsInTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSectionsInTableView:");
}

id objc_msgSend_numberOfTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfTouches");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectID");
}

id objc_msgSend_objectIDWithEntityType_rowID_databaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDWithEntityType:rowID:databaseID:");
}

id objc_msgSend_occAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occAlpha");
}

id objc_msgSend_occFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occFrame");
}

id objc_msgSend_occurrence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrence");
}

id objc_msgSend_occurrence_hasSymbolAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrence:hasSymbolAtPoint:");
}

id objc_msgSend_occurrenceAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceAtPoint:");
}

id objc_msgSend_occurrenceBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceBlocks");
}

id objc_msgSend_occurrenceContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceContainer");
}

id objc_msgSend_occurrenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceDate");
}

id objc_msgSend_occurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceHeight");
}

id objc_msgSend_occurrenceInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceInfo");
}

id objc_msgSend_occurrenceInsetIntoScroller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceInsetIntoScroller");
}

id objc_msgSend_occurrenceString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceString");
}

id objc_msgSend_occurrenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceView");
}

id objc_msgSend_occurrenceViewAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewAtPoint:");
}

id objc_msgSend_occurrenceViewAtPoint_ignoreSelectedCopyView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewAtPoint:ignoreSelectedCopyView:");
}

id objc_msgSend_occurrenceViewForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewForEvent:");
}

id objc_msgSend_occurrenceViewForEvent_includeNextAndPreviousDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewForEvent:includeNextAndPreviousDays:");
}

id objc_msgSend_occurrenceViewForEvent_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewForEvent:occurrenceDate:");
}

id objc_msgSend_occurrenceViewForOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewForOccurrence:");
}

id objc_msgSend_occurrenceViewForOccurrence_onDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewForOccurrence:onDay:");
}

id objc_msgSend_occurrenceViewSuperviewForEventGestureController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewSuperviewForEventGestureController:");
}

id objc_msgSend_occurrenceViewWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViewWithFrame:");
}

id objc_msgSend_occurrenceViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrenceViews");
}

id objc_msgSend_occurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrences");
}

id objc_msgSend_occurrencesForStartDate_endDate_preSorted_waitForLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrencesForStartDate:endDate:preSorted:waitForLoad:");
}

id objc_msgSend_occurrencesForStartDate_endDate_waitForLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrencesForStartDate:endDate:waitForLoad:");
}

id objc_msgSend_occurrencesView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "occurrencesView");
}

id objc_msgSend_on(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "on");
}

id objc_msgSend_openAttendeesDetailItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAttendeesDetailItem");
}

id objc_msgSend_openSensitiveURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:error:");
}

id objc_msgSend_openSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSessions");
}

id objc_msgSend_openURL_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:options:completionHandler:");
}

id objc_msgSend_operationCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationCount");
}

id objc_msgSend_operationWithTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWithTimeInterval:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operations");
}

id objc_msgSend_optionKeyIsDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionKeyIsDown");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_ordinalityOfUnit_inUnit_forDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ordinalityOfUnit:inUnit:forDate:");
}

id objc_msgSend_organizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "organizer");
}

id objc_msgSend_organizerCanBeMessaged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "organizerCanBeMessaged");
}

id objc_msgSend_orientationForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationForSize:");
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "origin");
}

id objc_msgSend_originDescriptionStringWithAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originDescriptionStringWithAppName:");
}

id objc_msgSend_overlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlay");
}

id objc_msgSend_overlayCalendarDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayCalendarDidChange");
}

id objc_msgSend_overlayCircleDiameterForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayCircleDiameterForSizeClass:");
}

id objc_msgSend_overlayFirstDayOfLunarMonthLocalizedStringInCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayFirstDayOfLunarMonthLocalizedStringInCalendar:");
}

id objc_msgSend_overlayFontForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayFontForSize:");
}

id objc_msgSend_overlayFontSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayFontSize");
}

id objc_msgSend_overlayLegendFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendFont");
}

id objc_msgSend_overlayLegendLineLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendLineLength");
}

id objc_msgSend_overlayLegendMonthBaseline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendMonthBaseline");
}

id objc_msgSend_overlayLegendMonthLineThickness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendMonthLineThickness");
}

id objc_msgSend_overlayLegendRightInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendRightInset");
}

id objc_msgSend_overlayLegendSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendSpacing");
}

id objc_msgSend_overlayLegendYearBaseline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendYearBaseline");
}

id objc_msgSend_overlayLegendYearLineThickness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayLegendYearLineThickness");
}

id objc_msgSend_overlayMediumStringForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayMediumStringForDate:inCalendar:");
}

id objc_msgSend_overlayShortStringForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayShortStringForDate:inCalendar:");
}

id objc_msgSend_overlayString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayString");
}

id objc_msgSend_overlayText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayText");
}

id objc_msgSend_overlayYearStringForDate_inCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overlayYearStringForDate:inCalendar:");
}

id objc_msgSend_overrideExtendedEdges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideExtendedEdges");
}

id objc_msgSend_overrideLocaleWeekends(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideLocaleWeekends");
}

id objc_msgSend_overrideTraitCollectionForChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideTraitCollectionForChildViewController:");
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "owner");
}

id objc_msgSend_ownerAddresses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerAddresses");
}

id objc_msgSend_pairWithValue_size_layoutShift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairWithValue:size:layoutShift:");
}

id objc_msgSend_palette_identitySwitcherTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "palette:identitySwitcherTapped:");
}

id objc_msgSend_paletteAvatarViewTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteAvatarViewTapped:");
}

id objc_msgSend_paletteSafeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteSafeAreaInsets");
}

id objc_msgSend_paletteShouldShowAvatarView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteShouldShowAvatarView");
}

id objc_msgSend_paletteTodayButtonTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteTodayButtonTapped:");
}

id objc_msgSend_paletteTopMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteTopMargin");
}

id objc_msgSend_paletteView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paletteView");
}

id objc_msgSend_palleteViewXOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "palleteViewXOffset");
}

id objc_msgSend_panGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panGestureRecognizer");
}

id objc_msgSend_parentOfShownViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentOfShownViewController");
}

id objc_msgSend_parentTableViewControllerForGroupController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentTableViewControllerForGroupController:");
}

id objc_msgSend_parentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentViewController");
}

id objc_msgSend_participantType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participantType");
}

id objc_msgSend_participantWithName_emailAddress_phoneNumber_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participantWithName:emailAddress:phoneNumber:url:");
}

id objc_msgSend_participationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participationStatus");
}

id objc_msgSend_passthroughViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passthroughViews");
}

id objc_msgSend_pastMajorBoundaryCalendarDateForCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pastMajorBoundaryCalendarDateForCalendarDate:");
}

id objc_msgSend_pasteEventsWithDateMode_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pasteEventsWithDateMode:delegate:");
}

id objc_msgSend_pasteboardManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pasteboardManager");
}

id objc_msgSend_performAction_forCell_appliesToAll_ifCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:forCell:appliesToAll:ifCancelled:");
}

id objc_msgSend_performAsCurrentTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsCurrentTraitCollection:");
}

id objc_msgSend_performBatchUpdates_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBatchUpdates:completion:");
}

id objc_msgSend_performModalDialogsIfNeededWithContinue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performModalDialogsIfNeededWithContinue:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performSelector_withObject_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:withObject:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_performUIAction_block_cancelBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUIAction:block:cancelBlock:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_permittedArrowDirections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permittedArrowDirections");
}

id objc_msgSend_persistedSceneState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistedSceneState");
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneNumber");
}

id objc_msgSend_pillImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pillImage");
}

id objc_msgSend_pinchRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinchRecognizer");
}

id objc_msgSend_pinchToZoomAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinchToZoomAllowed");
}

id objc_msgSend_plainButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "plainButtonConfiguration");
}

id objc_msgSend_pointAtDate_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointAtDate:isAllDay:");
}

id objc_msgSend_pointIsAboveMonthNameBaseline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointIsAboveMonthNameBaseline:");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_popToRootViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popToRootViewControllerAnimated:");
}

id objc_msgSend_popToViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popToViewController:animated:");
}

id objc_msgSend_popViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popViewControllerAnimated:");
}

id objc_msgSend_popViewControllersAfterAndIncluding_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popViewControllersAfterAndIncluding:animated:");
}

id objc_msgSend_popoverPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popoverPresentationController");
}

id objc_msgSend_positionOfCircleInCellWithWidth_circleSize_compressed_containsFirstDayOfMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "positionOfCircleInCellWithWidth:circleSize:compressed:containsFirstDayOfMonth:");
}

id objc_msgSend_positionOfSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "positionOfSecond:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_preActionBodyStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preActionBodyStrings");
}

id objc_msgSend_predicateForEventsWithStartDate_endDate_calendars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsWithStartDate:endDate:calendars:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithValue:");
}

id objc_msgSend_preferredBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredBackgroundColor");
}

id objc_msgSend_preferredContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSize");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSizeCategory");
}

id objc_msgSend_preferredEventsToSelectOnDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredEventsToSelectOnDate:");
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontDescriptorWithTextStyle:");
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_addingSymbolicTraits_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:");
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredFontForTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:compatibleWithTraitCollection:");
}

id objc_msgSend_preferredOwnerAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredOwnerAddress");
}

id objc_msgSend_preferredPointerShape(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredPointerShape");
}

id objc_msgSend_preferredPreSizeClassTransitionSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredPreSizeClassTransitionSelectedDate");
}

id objc_msgSend_prefersForcedModalShowViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersForcedModalShowViewController");
}

id objc_msgSend_prefersPushForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersPushForSizeClass:");
}

id objc_msgSend_prefersShowingViewControllersOnNavigationStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersShowingViewControllersOnNavigationStack");
}

id objc_msgSend_prefersToBePresentedFromApplicationRootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersToBePresentedFromApplicationRootViewController");
}

id objc_msgSend_prefersToBePresentedFromUINavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersToBePresentedFromUINavigationController");
}

id objc_msgSend_prefetchConflictInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchConflictInfo");
}

id objc_msgSend_prefetchRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchRow:");
}

id objc_msgSend_prepareForReuse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForReuse");
}

id objc_msgSend_prepareForReuseIsReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForReuseIsReload:");
}

id objc_msgSend_prepareToChangeScaleFromPinch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareToChangeScaleFromPinch:");
}

id objc_msgSend_prepareTransitionScrubberWithSelectedDate_todayDate_dayViewController_monthViewController_paletteView_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareTransitionScrubberWithSelectedDate:todayDate:dayViewController:monthViewController:paletteView:reverse:");
}

id objc_msgSend_prepareTransitionWithTopView_bottomView_allDayView_topLabelsContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareTransitionWithTopView:bottomView:allDayView:topLabelsContainer:");
}

id objc_msgSend_prepareWithYearViewController_monthViewController_selectedDate_calendar_yearToMonth_paletteView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithYearViewController:monthViewController:selectedDate:calendar:yearToMonth:paletteView:");
}

id objc_msgSend_presentAdaptiveModalViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAdaptiveModalViewController:animated:completion:");
}

id objc_msgSend_presentAlertForOfflineErrorUsingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAlertForOfflineErrorUsingViewController:");
}

id objc_msgSend_presentAvailabilityViewControllerForEvent_fromViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAvailabilityViewControllerForEvent:fromViewController:");
}

id objc_msgSend_presentDeleteAlertWithOptions_viewController_barButtonItem_forEvent_stringForDeleteButton_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentDeleteAlertWithOptions:viewController:barButtonItem:forEvent:stringForDeleteButton:withCompletionHandler:");
}

id objc_msgSend_presentDetachAlertWithOptions_viewController_sourceView_sourceRect_forEvent_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentDetachAlertWithOptions:viewController:sourceView:sourceRect:forEvent:withCompletionHandler:");
}

id objc_msgSend_presentDetailsForEvents_animated_showComments_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentDetailsForEvents:animated:showComments:context:");
}

id objc_msgSend_presentFromSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentFromSource:");
}

id objc_msgSend_presentModalViewController_withTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentModalViewController:withTransition:");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationController");
}

id objc_msgSend_presentationControllerDidAttemptToDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationControllerDidAttemptToDismiss");
}

id objc_msgSend_presentationControllerDidDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationControllerDidDismiss");
}

id objc_msgSend_presentationControllerDidDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationControllerDidDismiss:");
}

id objc_msgSend_presentationControllerForEditMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationControllerForEditMenu");
}

id objc_msgSend_presentationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationStyle");
}

id objc_msgSend_presentationStyleOverrideForChildViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationStyleOverrideForChildViewControllers");
}

id objc_msgSend_presentedOverWholeApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedOverWholeApp");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_presentedViewControllersState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewControllersState");
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewController");
}

id objc_msgSend_preservedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preservedState");
}

id objc_msgSend_preservesSuperviewLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preservesSuperviewLayoutMargins");
}

id objc_msgSend_preventScrollingForNextViewAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preventScrollingForNextViewAppear");
}

id objc_msgSend_preview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preview");
}

id objc_msgSend_previewViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previewViewController");
}

id objc_msgSend_previous(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previous");
}

id objc_msgSend_previousOccurrence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousOccurrence");
}

id objc_msgSend_primaryNumberFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryNumberFrame");
}

id objc_msgSend_primaryTextLabelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryTextLabelFont");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processName");
}

id objc_msgSend_processedEventData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processedEventData");
}

id objc_msgSend_prominentInsetGroupedHeaderConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prominentInsetGroupedHeaderConfiguration");
}

id objc_msgSend_promptForCommentWhenDeclining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptForCommentWhenDeclining");
}

id objc_msgSend_promptUserForRecurrenceActionOnOccurrence_whenFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptUserForRecurrenceActionOnOccurrence:whenFinished:");
}

id objc_msgSend_proposedStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStartDate");
}

id objc_msgSend_proposedStartDateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStartDateChanged");
}

id objc_msgSend_proposedStartDateDeclined(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStartDateDeclined");
}

id objc_msgSend_proposedStartDateForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStartDateForEvent:");
}

id objc_msgSend_proposedTimeAttendee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedTimeAttendee");
}

id objc_msgSend_provideAuthorView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideAuthorView");
}

id objc_msgSend_pulse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pulse:");
}

id objc_msgSend_pulseToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pulseToday");
}

id objc_msgSend_pulseTodayCircle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pulseTodayCircle");
}

id objc_msgSend_pushCalendarViewControllerWithViewType_andDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushCalendarViewControllerWithViewType:andDate:");
}

id objc_msgSend_pushContentViewOfType_date_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushContentViewOfType:date:animated:");
}

id objc_msgSend_pushNextLevelMainViewControllerContainerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushNextLevelMainViewControllerContainerWithDate:animated:");
}

id objc_msgSend_pushViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:");
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:animated:");
}

id objc_msgSend_pushedDayViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedDayViewControllerWithDate:animated:");
}

id objc_msgSend_pushedListViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedListViewControllerWithDate:animated:");
}

id objc_msgSend_pushedMonthViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedMonthViewControllerWithDate:animated:");
}

id objc_msgSend_pushedMultiDayViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedMultiDayViewControllerWithDate:animated:");
}

id objc_msgSend_pushedNextLevelMainViewControllerContainerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedNextLevelMainViewControllerContainerAnimated:");
}

id objc_msgSend_pushedViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedViewControllers");
}

id objc_msgSend_pushedWeekViewControllerWithDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushedWeekViewControllerWithDate:animated:");
}

id objc_msgSend_quaternarySystemFillColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternarySystemFillColor");
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "query");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_radius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radius");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeEnd");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfUnit_inUnit_forDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfUnit:inUnit:forDate:");
}

id objc_msgSend_rangeStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeStart");
}

id objc_msgSend_rangeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeValue");
}

id objc_msgSend_receiveTapsInHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveTapsInHeader");
}

id objc_msgSend_receivedTapAtLocation_usingDate_precise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedTapAtLocation:usingDate:precise:");
}

id objc_msgSend_reconfigureViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconfigureViewController:");
}

id objc_msgSend_recordRecentForContactWithName_emailAddress_phoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordRecentForContactWithName:emailAddress:phoneNumber:");
}

id objc_msgSend_rect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rect");
}

id objc_msgSend_rectBecameVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectBecameVisible:");
}

id objc_msgSend_rectForCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectForCells");
}

id objc_msgSend_rectForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectForSection:");
}

id objc_msgSend_recurrenceEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recurrenceEnd");
}

id objc_msgSend_recurrenceEndWithEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recurrenceEndWithEndDate:");
}

id objc_msgSend_recursiveAnimationRemove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursiveAnimationRemove:");
}

id objc_msgSend_recursiveAnimationRemoveForSmallLayers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursiveAnimationRemoveForSmallLayers:");
}

id objc_msgSend_recursiveBuildJournal_ofViewControllerSubtree_stopCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursiveBuildJournal:ofViewControllerSubtree:stopCondition:");
}

id objc_msgSend_redComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redComponent");
}

id objc_msgSend_redisplayEditor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redisplayEditor:completion:");
}

id objc_msgSend_referenceWeekStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceWeekStart");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refresh");
}

id objc_msgSend_refreshControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshControl");
}

id objc_msgSend_refreshDateWidgets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshDateWidgets");
}

id objc_msgSend_refreshEventWidgets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshEventWidgets");
}

id objc_msgSend_refreshEverythingIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshEverythingIfNecessary:");
}

id objc_msgSend_refreshIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshIfNeeded");
}

id objc_msgSend_refreshIfRefreshableAndNotify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshIfRefreshableAndNotify:");
}

id objc_msgSend_refreshStartAndEndDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshStartAndEndDates");
}

id objc_msgSend_regionWithRect_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionWithRect:identifier:");
}

id objc_msgSend_registerAppIntentsDependencies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAppIntentsDependencies");
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellReuseIdentifier:");
}

id objc_msgSend_registerClass_forHeaderFooterViewReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forHeaderFooterViewReuseIdentifier:");
}

id objc_msgSend_registerClassesOnTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClassesOnTableView:");
}

id objc_msgSend_registerForStateCapture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForStateCapture");
}

id objc_msgSend_registerForTraitChanges_withAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTraitChanges:withAction:");
}

id objc_msgSend_registerForTraitChanges_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTraitChanges:withHandler:");
}

id objc_msgSend_registerIntegrationEditViewControllerCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerIntegrationEditViewControllerCreator:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_reinitializeAllViewsWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reinitializeAllViewsWithCalendarDate:");
}

id objc_msgSend_relayoutPinchView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relayoutPinchView");
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadData");
}

id objc_msgSend_reloadDataForAllViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadDataForAllViews");
}

id objc_msgSend_reloadDataForOccurrenceChangeWithGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadDataForOccurrenceChangeWithGeneration:");
}

id objc_msgSend_reloadDataForViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadDataForViews:");
}

id objc_msgSend_reloadEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadEvents:");
}

id objc_msgSend_reloadRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_reminderCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderCalendar");
}

id objc_msgSend_reminderDetailDismissedWithDeletedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderDetailDismissedWithDeletedEvent:");
}

id objc_msgSend_reminderIntegrationIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIntegrationIcon");
}

id objc_msgSend_reminderIntegrationText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIntegrationText");
}

id objc_msgSend_reminderIntegrationTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIntegrationTitle");
}

id objc_msgSend_reminderOccurrenceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderOccurrenceType");
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllAnimations");
}

id objc_msgSend_removeAllContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllContent");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllWeekHighlights(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllWeekHighlights");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeDraggingOccurrenceAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDraggingOccurrenceAnimated:");
}

id objc_msgSend_removeEvent_span_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEvent:span:error:");
}

id objc_msgSend_removeEvent_withSpan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEvent:withSpan:error:");
}

id objc_msgSend_removeEventFromSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventFromSelection:");
}

id objc_msgSend_removeEventFromSelection_inWeek_updateModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventFromSelection:inWeek:updateModel:");
}

id objc_msgSend_removeFromParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromParentViewController");
}

id objc_msgSend_removeFromSuperlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperlayer");
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperview");
}

id objc_msgSend_removeGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGestureRecognizer:");
}

id objc_msgSend_removeInteraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInteraction:");
}

id objc_msgSend_removeInviteReplyNotification_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInviteReplyNotification:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeResourceChange_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeResourceChange:error:");
}

id objc_msgSend_removeViewFromQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeViewFromQueue:");
}

id objc_msgSend_renderLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderLayer");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceChildrenOfMenuForIdentifier:fromChildrenBlock:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_reportProblemNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportProblemNavigationController");
}

id objc_msgSend_representsActualDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representsActualDate");
}

id objc_msgSend_representsDayInViewHierarchy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representsDayInViewHierarchy");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "request");
}

id objc_msgSend_requestAuthorizationWithOptions_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAuthorizationWithOptions:completionHandler:");
}

id objc_msgSend_requestContactsAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestContactsAuthorization");
}

id objc_msgSend_requestContentIfNeeded_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestContentIfNeeded:completion:");
}

id objc_msgSend_requestIntegrationCatchupSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestIntegrationCatchupSync");
}

id objc_msgSend_requestLocationAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocationAuthorization");
}

id objc_msgSend_requestNotificationAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestNotificationAuthorization");
}

id objc_msgSend_requestSyncOnApplicationLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSyncOnApplicationLaunch");
}

id objc_msgSend_requireGestureRecognizerToFail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requireGestureRecognizerToFail:");
}

id objc_msgSend_requiresLanguageAwarePadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresLanguageAwarePadding");
}

id objc_msgSend_requiresSelfAsEventEditorDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresSelfAsEventEditorDelegate");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetSearchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSearchBar");
}

id objc_msgSend_resetSegments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSegments");
}

id objc_msgSend_resetTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTimeZone:");
}

id objc_msgSend_resetTimersAndWarnings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTimersAndWarnings");
}

id objc_msgSend_resetToDayView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetToDayView");
}

id objc_msgSend_resetToMonthView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetToMonthView");
}

id objc_msgSend_resetToMonthViewSplit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetToMonthViewSplit:");
}

id objc_msgSend_resetToWeekView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetToWeekView");
}

id objc_msgSend_resetToYearView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetToYearView");
}

id objc_msgSend_resetTodayBits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTodayBits");
}

id objc_msgSend_resignFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resignFirstResponder");
}

id objc_msgSend_resizableImageWithCapInsets_resizingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resizableImageWithCapInsets:resizingMode:");
}

id objc_msgSend_resizeAllViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resizeAllViews");
}

id objc_msgSend_resizeWeekGroupsIfNeededForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resizeWeekGroupsIfNeededForOrientation:");
}

id objc_msgSend_resourceChangeFromEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceChangeFromEventStore:");
}

id objc_msgSend_resourceSpecifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceSpecifier");
}

id objc_msgSend_respondToSharedCalendarInvite_forCalendarWithID_accountID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "respondToSharedCalendarInvite:forCalendarWithID:accountID:queue:completionBlock:");
}

id objc_msgSend_responseComment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseComment");
}

id objc_msgSend_restorePresentedViewControllers_startIndex_presenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePresentedViewControllers:startIndex:presenter:");
}

id objc_msgSend_restorePreservedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restorePreservedState:");
}

id objc_msgSend_reusableViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reusableViews");
}

id objc_msgSend_reuseIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reuseIdentifier");
}

id objc_msgSend_reverse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverse");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_revert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revert");
}

id objc_msgSend_rightBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightBarButtonItem");
}

id objc_msgSend_rightBarButtonItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightBarButtonItems");
}

id objc_msgSend_rightMarginAdjustment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightMarginAdjustment");
}

id objc_msgSend_rightMarginForWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightMarginForWindowSize:");
}

id objc_msgSend_rightSplitViewSideInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightSplitViewSideInset");
}

id objc_msgSend_rightStringForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rightStringForDate:");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "role");
}

id objc_msgSend_rollback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollback");
}

id objc_msgSend_rootNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootNavigationController");
}

id objc_msgSend_rootNavigationControllerRequestsLayoutOfViewSwitcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootNavigationControllerRequestsLayoutOfViewSwitcher:");
}

id objc_msgSend_rootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootViewController");
}

id objc_msgSend_rotateIfNeeded_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateIfNeeded:completion:");
}

id objc_msgSend_rotating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotating");
}

id objc_msgSend_rotationAnimationCompleteNotificationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotationAnimationCompleteNotificationName");
}

id objc_msgSend_rotationAnimationStartedNotificationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotationAnimationStartedNotificationName");
}

id objc_msgSend_roundedDateForDate_dateMode_calendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedDateForDate:dateMode:calendar:");
}

id objc_msgSend_roundedRectBaselineOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectBaselineOffset");
}

id objc_msgSend_roundedRectDayNumberBaselineOffsetWithOverlay_fontSize_overlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectDayNumberBaselineOffsetWithOverlay:fontSize:overlayFontSize:");
}

id objc_msgSend_roundedRectHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectHeight");
}

id objc_msgSend_roundedRectHeightWithOverlay_fontSize_overlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectHeightWithOverlay:fontSize:overlayFontSize:");
}

id objc_msgSend_roundedRectHorizontalPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectHorizontalPadding");
}

id objc_msgSend_roundedRectSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectSize");
}

id objc_msgSend_roundedRectSizeForNumberString_overlayString_fontSize_overlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectSizeForNumberString:overlayString:fontSize:overlayFontSize:");
}

id objc_msgSend_roundedRectVerticalPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectVerticalPadding");
}

id objc_msgSend_roundingType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundingType");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_rowIndexOfOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rowIndexOfOccurrence:");
}

id objc_msgSend_rowSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rowSelected:");
}

id objc_msgSend_runRecapTestIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runRecapTestIfNeeded:");
}

id objc_msgSend_runTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTest");
}

id objc_msgSend_runTestWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTestWithParameters:");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaInsets");
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaLayoutGuide");
}

id objc_msgSend_sanitizeCalSubCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sanitizeCalSubCal:");
}

id objc_msgSend_saveEvent_span_commit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveEvent:span:commit:error:");
}

id objc_msgSend_saveEvent_span_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveEvent:span:error:");
}

id objc_msgSend_saveTemporaryViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveTemporaryViews");
}

id objc_msgSend_savedFirstVisibleSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedFirstVisibleSecond");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scaleForDragging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaleForDragging");
}

id objc_msgSend_scaleForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaleForSize:");
}

id objc_msgSend_scaledValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledValueForValue:");
}

id objc_msgSend_scanEventsForDiscoveredConferencesIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanEventsForDiscoveredConferencesIfNeeded:");
}

id objc_msgSend_scanForConflicts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForConflicts");
}

id objc_msgSend_scene_openURLContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scene:openURLContexts:");
}

id objc_msgSend_sceneIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneIdentifier");
}

id objc_msgSend_sceneTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneTitle");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_screen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screen");
}

id objc_msgSend_scrollEventIntoView_animateWithDuration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollEventIntoView:animateWithDuration:completion:");
}

id objc_msgSend_scrollEventIntoView_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollEventIntoView:animated:");
}

id objc_msgSend_scrollEventIntoView_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollEventIntoView:animated:completion:");
}

id objc_msgSend_scrollRectToVisible_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollRectToVisible:animated:");
}

id objc_msgSend_scrollToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToDate:");
}

id objc_msgSend_scrollToDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToDate:animated:");
}

id objc_msgSend_scrollToDisplayedDateAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToDisplayedDateAnimated:");
}

id objc_msgSend_scrollToEvent_animateWithDuration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToEvent:animateWithDuration:completion:");
}

id objc_msgSend_scrollToEvent_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToEvent:animated:completion:");
}

id objc_msgSend_scrollToNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToNow:");
}

id objc_msgSend_scrollToRowAtIndexPath_atScrollPosition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToRowAtIndexPath:atScrollPosition:animated:");
}

id objc_msgSend_scrollToSecond_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToSecond:animated:completion:");
}

id objc_msgSend_scrollToSelectedDateAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToSelectedDateAnimated:");
}

id objc_msgSend_scrollToTodayAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToTodayAnimated:");
}

id objc_msgSend_scrollTowardPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollTowardPoint:");
}

id objc_msgSend_scrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollView");
}

id objc_msgSend_scrollView_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollView:completionBlock:");
}

id objc_msgSend_scrollViewDidEndScrollingAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewDidEndScrollingAnimation:");
}

id objc_msgSend_scrollViewDidLayoutSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewDidLayoutSubviews");
}

id objc_msgSend_scrollViewDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewDidScroll:");
}

id objc_msgSend_scrollViewSafeAreasDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewSafeAreasDidChange");
}

id objc_msgSend_scrollerIsParentOfView_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollerIsParentOfView:isAllDay:");
}

id objc_msgSend_scrubber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubber");
}

id objc_msgSend_scrubberCellSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubberCellSize");
}

id objc_msgSend_scrubberDidChangeSelectedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubberDidChangeSelectedDate:");
}

id objc_msgSend_scrubbingMinimumPressDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubbingMinimumPressDuration");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBar");
}

id objc_msgSend_searchBar_textDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBar:textDidChange:");
}

id objc_msgSend_searchBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarButtonItem");
}

id objc_msgSend_searchBarCancelButtonClicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarCancelButtonClicked:");
}

id objc_msgSend_searchBarHeightDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarHeightDidChange");
}

id objc_msgSend_searchBegan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBegan");
}

id objc_msgSend_searchButtonTappedCreateAndAddSearchBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchButtonTappedCreateAndAddSearchBar:");
}

id objc_msgSend_searchConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchConfiguration");
}

id objc_msgSend_searchEnded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchEnded");
}

id objc_msgSend_searchEnding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchEnding");
}

id objc_msgSend_searchField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchField");
}

id objc_msgSend_searchFieldWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchFieldWidth");
}

id objc_msgSend_searchResultIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultIdentifier");
}

id objc_msgSend_searchResultsDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultsDelegate");
}

id objc_msgSend_searchResultsUpdater(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultsUpdater");
}

id objc_msgSend_searchResultsViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultsViewController");
}

id objc_msgSend_searchResultsViewController_didSelectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultsViewController:didSelectEvent:");
}

id objc_msgSend_searchString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchString");
}

id objc_msgSend_searchTapped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchTapped");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "second");
}

id objc_msgSend_secondAndThirdOccurrencesForEachDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondAndThirdOccurrencesForEachDay");
}

id objc_msgSend_secondAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondAtPosition:");
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelColor");
}

id objc_msgSend_secondarySystemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondarySystemBackgroundColor");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_sectionForCachedOccurrencesOnDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForCachedOccurrencesOnDate:");
}

id objc_msgSend_sectionForCachedOccurrencesOnDate_sectionExistsForDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForCachedOccurrencesOnDate:sectionExistsForDay:");
}

id objc_msgSend_sectionForCachedOccurrencesOnDate_usingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForCachedOccurrencesOnDate:usingFilter:");
}

id objc_msgSend_sectionForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForEvent:");
}

id objc_msgSend_segmentedControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "segmentedControl");
}

id objc_msgSend_selectDate_andTime_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectDate:andTime:animated:");
}

id objc_msgSend_selectDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectDate:animated:");
}

id objc_msgSend_selectEvent_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectEvent:animated:");
}

id objc_msgSend_selectOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectOccurrence:");
}

id objc_msgSend_selectOccurrence_inWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectOccurrence:inWeek:");
}

id objc_msgSend_selectOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectOccurrences:");
}

id objc_msgSend_selectRowAtIndexPath_animated_scrollPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectRowAtIndexPath:animated:scrollPosition:");
}

id objc_msgSend_selectSegmentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectSegmentIndex:");
}

id objc_msgSend_selectTodayWithTrigger_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectTodayWithTrigger:animated:");
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selected");
}

id objc_msgSend_selectedCalendars(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedCalendars");
}

id objc_msgSend_selectedCalendarsIgnoringFocus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedCalendarsIgnoringFocus");
}

id objc_msgSend_selectedCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedCopy");
}

id objc_msgSend_selectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedDate");
}

id objc_msgSend_selectedDateAfterScrollingToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedDateAfterScrollingToPoint:");
}

id objc_msgSend_selectedDateOccurrences_loadIsComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedDateOccurrences:loadIsComplete:");
}

id objc_msgSend_selectedDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedDay");
}

id objc_msgSend_selectedEventWasAutoSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedEventWasAutoSelected");
}

id objc_msgSend_selectedEventsForEditMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedEventsForEditMenu");
}

id objc_msgSend_selectedIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedIndex");
}

id objc_msgSend_selectedOccurrence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedOccurrence");
}

id objc_msgSend_selectedOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedOccurrences");
}

id objc_msgSend_selectedResponseButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedResponseButton");
}

id objc_msgSend_selectedSegmentIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedSegmentIndex");
}

id objc_msgSend_selfAttendee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selfAttendee");
}

id objc_msgSend_sendSubviewToBack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSubviewToBack:");
}

id objc_msgSend_separator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "separator");
}

id objc_msgSend_separatorColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "separatorColor");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAccessibilityElementsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityElementsHidden:");
}

id objc_msgSend_setAccessibilityIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIdentifier:");
}

id objc_msgSend_setAccessibilityLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityLabel:");
}

id objc_msgSend_setAccessibilityTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityTraits:");
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryType:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActivationConditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivationConditions:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAddItemViewControllerManagerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAddItemViewControllerManagerDelegate:");
}

id objc_msgSend_setAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAddress:");
}

id objc_msgSend_setAdjustsFontSizeToFitWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontSizeToFitWidth:");
}

id objc_msgSend_setAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignment:");
}

id objc_msgSend_setAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDay:");
}

id objc_msgSend_setAllDayAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDayAlpha:");
}

id objc_msgSend_setAllDayDrawingStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDayDrawingStyle:");
}

id objc_msgSend_setAllDayHighlighted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDayHighlighted:");
}

id objc_msgSend_setAllowEventLocationPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowEventLocationPrediction:");
}

id objc_msgSend_setAllowExtendedHeightCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowExtendedHeightCells:");
}

id objc_msgSend_setAllowableMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowableMovement:");
}

id objc_msgSend_setAllowedTouchTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedTouchTypes:");
}

id objc_msgSend_setAllowsCalendarPreview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCalendarPreview:");
}

id objc_msgSend_setAllowsEditing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsEditing:");
}

id objc_msgSend_setAllowsEnqueuedDismissal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsEnqueuedDismissal:");
}

id objc_msgSend_setAllowsFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsFocus:");
}

id objc_msgSend_setAllowsMultipleSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsMultipleSelection:");
}

id objc_msgSend_setAllowsPullToRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsPullToRefresh:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlwaysAnimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysAnimate:");
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnchorPoint:");
}

id objc_msgSend_setAnimateAllDayAreaHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimateAllDayAreaHeight:");
}

id objc_msgSend_setAnimating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimating:");
}

id objc_msgSend_setAnimatingViewTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimatingViewTransition:");
}

id objc_msgSend_setAnyCalendarsHiddenByFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnyCalendarsHiddenByFocus:");
}

id objc_msgSend_setApplicationLastActiveTimeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationLastActiveTimeProvider:");
}

id objc_msgSend_setApplicationRequestDelayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationRequestDelayer:");
}

id objc_msgSend_setApplyMonthAnimationStateAdjustments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplyMonthAnimationStateAdjustments:");
}

id objc_msgSend_setApportionsSegmentWidthsByContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApportionsSegmentWidthsByContent:");
}

id objc_msgSend_setArrowDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArrowDirection:");
}

id objc_msgSend_setAsyncLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAsyncLoading:");
}

id objc_msgSend_setAttachedTodayCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachedTodayCircle:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAttributedTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedTitle:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setAttributes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:range:");
}

id objc_msgSend_setAutoStartNotificationMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoStartNotificationMonitor:");
}

id objc_msgSend_setAutoresizesSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizesSubviews:");
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizingMask:");
}

id objc_msgSend_setAvatarContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvatarContact:");
}

id objc_msgSend_setAvatarViewVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvatarViewVisible:");
}

id objc_msgSend_setBackButtonTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackButtonTitle:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundConfiguration:");
}

id objc_msgSend_setBackgroundEffects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundEffects:");
}

id objc_msgSend_setBackgroundView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundView:");
}

id objc_msgSend_setBadgeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadgeColor:");
}

id objc_msgSend_setBadgeLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadgeLocale:");
}

id objc_msgSend_setBadgeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadgeType:");
}

id objc_msgSend_setBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarButtonItem:");
}

id objc_msgSend_setBarTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarTintColor:");
}

id objc_msgSend_setBorderStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderStyle:");
}

id objc_msgSend_setBottomPinningProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBottomPinningProximity:");
}

id objc_msgSend_setBottomView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBottomView:");
}

id objc_msgSend_setBounces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounces:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setButtonsTouchInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonsTouchInsets:");
}

id objc_msgSend_setCalculationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalculationType:");
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendar:");
}

id objc_msgSend_setCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarDate:");
}

id objc_msgSend_setCalendarForPaste_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarForPaste:");
}

id objc_msgSend_setCalendarPreviewIsInlineDayView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarPreviewIsInlineDayView:");
}

id objc_msgSend_setCalendarsBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendarsBarButtonItem:");
}

id objc_msgSend_setCanActivateForTargetContentIdentifierPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanActivateForTargetContentIdentifierPredicate:");
}

id objc_msgSend_setCellFactory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellFactory:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setCenteredCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenteredCalendar:");
}

id objc_msgSend_setChangedFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangedFields:");
}

id objc_msgSend_setCircleDiameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircleDiameter:");
}

id objc_msgSend_setCircleDiameter_overlayDiameter_largeOverlayDiameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircleDiameter:overlayDiameter:largeOverlayDiameter:");
}

id objc_msgSend_setCircleShouldFillFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircleShouldFillFrame:");
}

id objc_msgSend_setCircled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircled:");
}

id objc_msgSend_setCircled_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCircled:animated:");
}

id objc_msgSend_setClearButtonMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClearButtonMode:");
}

id objc_msgSend_setClearsContextBeforeDrawing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClearsContextBeforeDrawing:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setCollapsedSectionIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollapsedSectionIdentifiers:");
}

id objc_msgSend_setColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColor:");
}

id objc_msgSend_setColorBarConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColorBarConstraints:");
}

id objc_msgSend_setColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColors:");
}

id objc_msgSend_setCommentChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommentChanged:");
}

id objc_msgSend_setCommentPromptRelatedConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommentPromptRelatedConstraints:");
}

id objc_msgSend_setCompactMonthListViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompactMonthListViewDelegate:");
}

id objc_msgSend_setCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompleted:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setComponentForExpandingPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponentForExpandingPadding:");
}

id objc_msgSend_setCompressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompressed:");
}

id objc_msgSend_setCompressedVerticalMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompressedVerticalMode:");
}

id objc_msgSend_setConfigurationUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationUpdateHandler:");
}

id objc_msgSend_setConflictDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConflictDict:");
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstant:");
}

id objc_msgSend_setContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContact:");
}

id objc_msgSend_setContactStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactStore:");
}

id objc_msgSend_setContentAttributeSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentAttributeSet:");
}

id objc_msgSend_setContentCompressionResistancePriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCompressionResistancePriority:forAxis:");
}

id objc_msgSend_setContentDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentDescription:");
}

id objc_msgSend_setContentHuggingPriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentHuggingPriority:forAxis:");
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInset:");
}

id objc_msgSend_setContentInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInsetAdjustmentBehavior:");
}

id objc_msgSend_setContentInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInsets:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContentOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:animated:");
}

id objc_msgSend_setContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentSize:");
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContents:");
}

id objc_msgSend_setController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setController:");
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerRadius:");
}

id objc_msgSend_setCreationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationMethod:");
}

id objc_msgSend_setCurrentEditor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentEditor:");
}

id objc_msgSend_setCurrentSelectedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSelectedEvent:");
}

id objc_msgSend_setCurrentSidebarState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSidebarState:");
}

id objc_msgSend_setCurrentSidebarState_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSidebarState:completion:");
}

id objc_msgSend_setCurrentTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentTraitCollection:");
}

id objc_msgSend_setData_date_calendar_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:date:calendar:delegate:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:");
}

id objc_msgSend_setDate_forceStringUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:forceStringUpdate:");
}

id objc_msgSend_setDateForPaste_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateForPaste:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateString:");
}

id objc_msgSend_setDateStringVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStringVisible:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDateTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateTemplate:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDayBadgeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayBadgeColor:");
}

id objc_msgSend_setDayBadgeLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayBadgeLocale:");
}

id objc_msgSend_setDayBadgeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayBadgeType:");
}

id objc_msgSend_setDayCellSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayCellSize:");
}

id objc_msgSend_setDayCellsScrubbingGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayCellsScrubbingGestureRecognizer:");
}

id objc_msgSend_setDayCellsTapGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayCellsTapGestureRecognizer:");
}

id objc_msgSend_setDayFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayFrame:");
}

id objc_msgSend_setDayFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayFrames:");
}

id objc_msgSend_setDayHeaderFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayHeaderFrames:");
}

id objc_msgSend_setDayScrubberController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayScrubberController:");
}

id objc_msgSend_setDayScrubberFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayScrubberFrame:");
}

id objc_msgSend_setDayTimeViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayTimeViewDelegate:");
}

id objc_msgSend_setDayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayType:");
}

id objc_msgSend_setDayTypeBadgeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayTypeBadgeColor:");
}

id objc_msgSend_setDayTypeBadgeLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayTypeBadgeLocale:");
}

id objc_msgSend_setDayTypes_badgeColors_badgeLocales_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayTypes:badgeColors:badgeLocales:");
}

id objc_msgSend_setDayViewFirstVisibleSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayViewFirstVisibleSecond:");
}

id objc_msgSend_setDayViewHourScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayViewHourScale:");
}

id objc_msgSend_setDebug_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebug:");
}

id objc_msgSend_setDebugMenuHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugMenuHandler:");
}

id objc_msgSend_setDecelerationRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecelerationRate:");
}

id objc_msgSend_setDefinesPresentationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinesPresentationContext:");
}

id objc_msgSend_setDelaysContentTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelaysContentTouches:");
}

id objc_msgSend_setDelaysTouchesBegan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelaysTouchesBegan:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateClass:");
}

id objc_msgSend_setDeselectedCalendars_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeselectedCalendars:reason:");
}

id objc_msgSend_setDesiredPaddingDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredPaddingDays:");
}

id objc_msgSend_setDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestination:");
}

id objc_msgSend_setDiagnosticsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiagnosticsViewController:");
}

id objc_msgSend_setDimmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimmed:");
}

id objc_msgSend_setDimmedOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimmedOccurrence:");
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirection:");
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableActions:");
}

id objc_msgSend_setDisableGestureDayChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableGestureDayChange:");
}

id objc_msgSend_setDisableNotifyDateChangeDuringTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableNotifyDateChangeDuringTracking:");
}

id objc_msgSend_setDisableRotationTimings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableRotationTimings:");
}

id objc_msgSend_setDisableTodayPulse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableTodayPulse:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisclosureConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisclosureConstraints:");
}

id objc_msgSend_setDisplayDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDate:");
}

id objc_msgSend_setDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayMode:");
}

id objc_msgSend_setDisplayType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayType:");
}

id objc_msgSend_setDisplayedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedDate:");
}

id objc_msgSend_setDisplayedDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedDate:animated:");
}

id objc_msgSend_setDisplayedDate_forceScroll_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedDate:forceScroll:animated:");
}

id objc_msgSend_setDisplayedEditor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedEditor:");
}

id objc_msgSend_setDisplayedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayedString:");
}

id objc_msgSend_setDisplaysDatesSnappedToWeekBoundaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplaysDatesSnappedToWeekBoundaries:");
}

id objc_msgSend_setDividedListMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDividedListMode:");
}

id objc_msgSend_setDividerLineVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDividerLineVisible:");
}

id objc_msgSend_setDoesRelativeDateFormatting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoesRelativeDateFormatting:");
}

id objc_msgSend_setDoneBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoneBlock:");
}

id objc_msgSend_setDrawBackgroundWithLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawBackgroundWithLayer:");
}

id objc_msgSend_setDrawCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawCircle:");
}

id objc_msgSend_setDrawWithViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawWithViews:");
}

id objc_msgSend_setDrawsBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawsBackground:");
}

id objc_msgSend_setDrawsOwnRowSeparators_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawsOwnRowSeparators:");
}

id objc_msgSend_setDrawsResizeHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawsResizeHandles:");
}

id objc_msgSend_setDrawsStrikethrough_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawsStrikethrough:");
}

id objc_msgSend_setDrawsTimeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawsTimeString:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEKExpandedReminderStackViewControllerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEKExpandedReminderStackViewControllerDelegate:");
}

id objc_msgSend_setEdgesForExtendedLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdgesForExtendedLayout:");
}

id objc_msgSend_setEditViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditViewDelegate:");
}

id objc_msgSend_setEditorBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditorBackgroundColor:");
}

id objc_msgSend_setEditorHideTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditorHideTransition:");
}

id objc_msgSend_setEditorShowTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditorShowTransition:");
}

id objc_msgSend_setEkui_futureTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEkui_futureTraitCollection:");
}

id objc_msgSend_setEligibleForSearch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForSearch:");
}

id objc_msgSend_setEnableLayerAnimationsDuringLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableLayerAnimationsDuringLayout:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setEndDateUnadjustedForLegacyClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDateUnadjustedForLegacyClients:");
}

id objc_msgSend_setEstimatedRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedRowHeight:");
}

id objc_msgSend_setEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvent:");
}

id objc_msgSend_setEventCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventCount:");
}

id objc_msgSend_setEventCreationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventCreationMethod:");
}

id objc_msgSend_setEventData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventData:");
}

id objc_msgSend_setEventData_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventData:animated:");
}

id objc_msgSend_setEventHorizontalInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHorizontalInset:");
}

id objc_msgSend_setEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventID:");
}

id objc_msgSend_setEventIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventIdentifier:");
}

id objc_msgSend_setEventSpringLoadingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventSpringLoadingEnabled:");
}

id objc_msgSend_setEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventStore:");
}

id objc_msgSend_setEventSummaryData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventSummaryData:");
}

id objc_msgSend_setEventsFillGrid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventsFillGrid:");
}

id objc_msgSend_setExactEventStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExactEventStartDate:");
}

id objc_msgSend_setExplicitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplicitTime:");
}

id objc_msgSend_setExtendedLaunchComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtendedLaunchComplete:");
}

id objc_msgSend_setExtraPaletteHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraPaletteHeight:");
}

id objc_msgSend_setFadeLeftEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFadeLeftEdge:");
}

id objc_msgSend_setFadeRightEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFadeRightEdge:");
}

id objc_msgSend_setFamilyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyName:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFill");
}

id objc_msgSend_setFirstDayCellIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstDayCellIndex:");
}

id objc_msgSend_setFirstDayCellInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstDayCellInset:");
}

id objc_msgSend_setFirstLineHeadIndent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstLineHeadIndent:");
}

id objc_msgSend_setFirstMonthCellIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstMonthCellIndex:");
}

id objc_msgSend_setFirstName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstName:");
}

id objc_msgSend_setFirstVisibleSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstVisibleSecond:");
}

id objc_msgSend_setFirstWeekday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstWeekday:");
}

id objc_msgSend_setFixedDayHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFixedDayHeight:");
}

id objc_msgSend_setFixedDayWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFixedDayWidth:");
}

id objc_msgSend_setFocusBannerPlacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusBannerPlacement:");
}

id objc_msgSend_setFocusFilterMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusFilterMode:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFontSize:");
}

id objc_msgSend_setForceCanBeDirectlyManagedToNo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceCanBeDirectlyManagedToNo:");
}

id objc_msgSend_setForceFullHeightInLandscape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceFullHeightInLandscape:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setFrame_gutterWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:gutterWidth:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setGeoLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeoLocation:");
}

id objc_msgSend_setGestureOccurrenceSuperview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGestureOccurrenceSuperview:");
}

id objc_msgSend_setGivenName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGivenName:");
}

id objc_msgSend_setGridHeightScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGridHeightScale:");
}

id objc_msgSend_setGutterWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGutterWidth:");
}

id objc_msgSend_setHasDisclosure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasDisclosure:");
}

id objc_msgSend_setHasDrawnBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasDrawnBefore:");
}

id objc_msgSend_setHasEverCompletedFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasEverCompletedFetch:");
}

id objc_msgSend_setHasPrecedingDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPrecedingDuration:");
}

id objc_msgSend_setHasTrailingDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasTrailingDuration:");
}

id objc_msgSend_setHasValidOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasValidOrigin:");
}

id objc_msgSend_setHeaderHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeaderHeight:");
}

id objc_msgSend_setHeaderText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeaderText:");
}

id objc_msgSend_setHeightObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeightObserver:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHideText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideText:");
}

id objc_msgSend_setHideText_animate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideText:animate:");
}

id objc_msgSend_setHidesBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesBackButton:");
}

id objc_msgSend_setHidesNavigationBarDuringPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesNavigationBarDuringPresentation:");
}

id objc_msgSend_setHighlightedDateComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedDateComponents:");
}

id objc_msgSend_setHighlightedDayIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedDayIndex:");
}

id objc_msgSend_setHighlightedDayRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedDayRange:");
}

id objc_msgSend_setHighlightedHour_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedHour:");
}

id objc_msgSend_setHighlightedTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedTextColor:");
}

id objc_msgSend_setHorizontalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalSizeClass:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setHourHeightScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHourHeightScale:");
}

id objc_msgSend_setHyphenationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHyphenationFactor:");
}

id objc_msgSend_setIgnoreUnsavedChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreUnsavedChanges:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImage_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:forState:");
}

id objc_msgSend_setImage_warningString_emphasizedRangeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:warningString:emphasizedRangeValue:");
}

id objc_msgSend_setImageColorTransformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageColorTransformer:");
}

id objc_msgSend_setImagePadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImagePadding:");
}

id objc_msgSend_setInboxBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInboxBarButtonItem:");
}

id objc_msgSend_setInboxNewSectionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInboxNewSectionDelegate:");
}

id objc_msgSend_setInboxRepliedSectionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInboxRepliedSectionDelegate:");
}

id objc_msgSend_setInitialPresentationHasCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialPresentationHasCompleted:");
}

id objc_msgSend_setInitialVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialVelocity:");
}

id objc_msgSend_setInlineDayViewRespectsSelectedCalendarsFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInlineDayViewRespectsSelectedCalendarsFilter:");
}

id objc_msgSend_setInputEventData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputEventData:");
}

id objc_msgSend_setInternalEditViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternalEditViewDelegate:");
}

id objc_msgSend_setInvitationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvitationStatus:");
}

id objc_msgSend_setIsAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccessibilityElement:");
}

id objc_msgSend_setIsAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAllDay:");
}

id objc_msgSend_setIsCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCompact:");
}

id objc_msgSend_setIsInUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInUse:");
}

id objc_msgSend_setIsJunk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsJunk:");
}

id objc_msgSend_setIsLargeDayView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsLargeDayView:");
}

id objc_msgSend_setIsPortraitOrientationTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPortraitOrientationTo:");
}

id objc_msgSend_setIsSelectedCopyView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSelectedCopyView:");
}

id objc_msgSend_setIsSelectedDateFiveDaysAwayFromTodayTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSelectedDateFiveDaysAwayFromTodayTo:");
}

id objc_msgSend_setIsToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsToday:");
}

id objc_msgSend_setIsUserFingerDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUserFingerDown:");
}

id objc_msgSend_setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWaitingForBackgroundLoadingOfSelectedEventOccurrenceView:");
}

id objc_msgSend_setIsWeekend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWeekend:");
}

id objc_msgSend_setItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItems:");
}

id objc_msgSend_setIterationDurationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIterationDurationFactor:");
}

id objc_msgSend_setKey_withBoolean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:withBoolean:");
}

id objc_msgSend_setKey_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:withObject:");
}

id objc_msgSend_setKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyPath:");
}

id objc_msgSend_setLabelElementsVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabelElementsVisible:");
}

id objc_msgSend_setLabelRelatedConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabelRelatedConstraints:");
}

id objc_msgSend_setLargeListViewDisclosingEventDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeListViewDisclosingEventDetails:");
}

id objc_msgSend_setLastConfirmedSplashScreenVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConfirmedSplashScreenVersion:");
}

id objc_msgSend_setLastName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastName:");
}

id objc_msgSend_setLastSidebarMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSidebarMode:");
}

id objc_msgSend_setLastSuspendTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSuspendTime:");
}

id objc_msgSend_setLastUsedNonYearView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUsedNonYearView:");
}

id objc_msgSend_setLastViewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewMode:");
}

id objc_msgSend_setLastViewedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewedDate:");
}

id objc_msgSend_setLastViewedOccurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewedOccurrenceDate:");
}

id objc_msgSend_setLastViewedOccurrenceUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewedOccurrenceUID:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayout:");
}

id objc_msgSend_setLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayoutMargins:");
}

id objc_msgSend_setLeftBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftBarButtonItem:");
}

id objc_msgSend_setLeftBarButtonItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftBarButtonItems:");
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakMode:");
}

id objc_msgSend_setLineSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineSpacing:");
}

id objc_msgSend_setListViewDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListViewDelegate:");
}

id objc_msgSend_setLoadContactsAsynchronously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoadContactsAsynchronously:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocations:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setMainView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainView:");
}

id objc_msgSend_setMargin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMargin:");
}

id objc_msgSend_setMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMask:");
}

id objc_msgSend_setMaskedCorners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaskedCorners:");
}

id objc_msgSend_setMasksToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasksToBounds:");
}

id objc_msgSend_setMatchesMonthView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatchesMonthView:");
}

id objc_msgSend_setMaxCachedDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxCachedDays:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaximumPrimaryColumnWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumPrimaryColumnWidth:");
}

id objc_msgSend_setMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenu:");
}

id objc_msgSend_setMessageSendingComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSendingComplete:");
}

id objc_msgSend_setMessageSendingManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSendingManager:");
}

id objc_msgSend_setMinimalMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimalMode:");
}

id objc_msgSend_setMinimumPressDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumPressDuration:");
}

id objc_msgSend_setMinimumPrimaryColumnWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumPrimaryColumnWidth:");
}

id objc_msgSend_setMinimumScaleFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumScaleFactor:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setModalPresentationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalPresentationDelegate:");
}

id objc_msgSend_setModalPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalPresentationStyle:");
}

id objc_msgSend_setModalTransitionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalTransitionStyle:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setModelSelectedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModelSelectedEvent:");
}

id objc_msgSend_setModelSelectedEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModelSelectedEvents:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setMonthAnimationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthAnimationState:");
}

id objc_msgSend_setMonthBreakIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthBreakIndex:");
}

id objc_msgSend_setMonthCellFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthCellFrames:");
}

id objc_msgSend_setMonthFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthFrame:");
}

id objc_msgSend_setMonthLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthLabel:");
}

id objc_msgSend_setMonthOccurrencesFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthOccurrencesFrame:");
}

id objc_msgSend_setMonthOccurrencesSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthOccurrencesSnapshot:");
}

id objc_msgSend_setMonthRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthRowHeight:");
}

id objc_msgSend_setMonthScrubberFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthScrubberFrame:");
}

id objc_msgSend_setMonthSummaryFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthSummaryFrames:");
}

id objc_msgSend_setMonthSummarySnapshots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthSummarySnapshots:");
}

id objc_msgSend_setMonthText_isCurrentMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthText:isCurrentMonth:");
}

id objc_msgSend_setMonthTextBaselineOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthTextBaselineOffset:");
}

id objc_msgSend_setMonthViewEventScaleSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthViewEventScaleSize:");
}

id objc_msgSend_setMonthViewScaleSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthViewScaleSize:");
}

id objc_msgSend_setMonthWeekScaleSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonthWeekScaleSize:");
}

id objc_msgSend_setMultiAllDayRoundCorners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiAllDayRoundCorners:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNamedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNamedLocation:");
}

id objc_msgSend_setNanosecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNanosecond:");
}

id objc_msgSend_setNavBarStringFromDate_includeMonth_includeYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavBarStringFromDate:includeMonth:includeYear:");
}

id objc_msgSend_setNavDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavDelegate:");
}

id objc_msgSend_setNavigationBarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarHidden:");
}

id objc_msgSend_setNavigationBarHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarHidden:animated:");
}

id objc_msgSend_setNavigationThrottleOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationThrottleOperation:");
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDisplay");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNeedsRebuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsRebuild");
}

id objc_msgSend_setNeedsRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsRefresh:");
}

id objc_msgSend_setNeedsReload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsReload");
}

id objc_msgSend_setNeedsSave_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsSave:");
}

id objc_msgSend_setNeedsUpdateConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateConfiguration");
}

id objc_msgSend_setNeedsUpdateOfSupportedInterfaceOrientations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateOfSupportedInterfaceOrientations");
}

id objc_msgSend_setNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotes:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setNotifyWhenTapOtherEventDuringDragging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyWhenTapOtherEventDuringDragging:");
}

id objc_msgSend_setNumDaysToShow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumDaysToShow:");
}

id objc_msgSend_setNumberOfEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfEvents:");
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfLines:");
}

id objc_msgSend_setNumberOfNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfNotifications:");
}

id objc_msgSend_setNumberOfTapsRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfTapsRequired:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObscuresBackgroundDuringPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObscuresBackgroundDuringPresentation:");
}

id objc_msgSend_setOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrence:");
}

id objc_msgSend_setOccurrenceContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrenceContainer:");
}

id objc_msgSend_setOccurrenceDateIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrenceDateIndex:");
}

id objc_msgSend_setOccurrencePadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrencePadding:");
}

id objc_msgSend_setOccurrenceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrenceView:");
}

id objc_msgSend_setOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrences:");
}

id objc_msgSend_setOccurrences_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOccurrences:animated:");
}

id objc_msgSend_setOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOn:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setOpaqueBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaqueBackground:");
}

id objc_msgSend_setOrganizerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrganizerName:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOverlayFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayFont:");
}

id objc_msgSend_setOverlayFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayFontSize:");
}

id objc_msgSend_setOverlayMonthText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayMonthText:");
}

id objc_msgSend_setOverlayShowsMonth_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayShowsMonth:animated:");
}

id objc_msgSend_setOverlaySignificantDatesProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlaySignificantDatesProvider:");
}

id objc_msgSend_setOverlayString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayString:");
}

id objc_msgSend_setOverlayText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverlayText:");
}

id objc_msgSend_setOverrideExtendedEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideExtendedEdges:");
}

id objc_msgSend_setOverrideTraitCollection_forChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideTraitCollection:forChildViewController:");
}

id objc_msgSend_setPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPadding:");
}

id objc_msgSend_setPaddingCellEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaddingCellEnabled:");
}

id objc_msgSend_setPagingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPagingEnabled:");
}

id objc_msgSend_setPaletteSafeAreaInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaletteSafeAreaInsets:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setParticipationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipationStatus:");
}

id objc_msgSend_setPassthroughViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassthroughViews:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPendingReminderTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingReminderTracker:");
}

id objc_msgSend_setPermittedArrowDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPermittedArrowDirections:");
}

id objc_msgSend_setPhoneNumbers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumbers:");
}

id objc_msgSend_setPinchRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchRecognizer:");
}

id objc_msgSend_setPlaceholder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholder:");
}

id objc_msgSend_setPointerInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerInteractionEnabled:");
}

id objc_msgSend_setPointerStyleProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerStyleProvider:");
}

id objc_msgSend_setPredicatePropertyLoadMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicatePropertyLoadMode:");
}

id objc_msgSend_setPreferModalPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferModalPresentation:");
}

id objc_msgSend_setPreferredBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredBackgroundColor:");
}

id objc_msgSend_setPreferredContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredContentSize:");
}

id objc_msgSend_setPreferredDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredDisplayMode:");
}

id objc_msgSend_setPreferredFrameRateRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredFrameRateRange:");
}

id objc_msgSend_setPreferredHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredHeight:");
}

id objc_msgSend_setPreferredRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredRange:");
}

id objc_msgSend_setPreferredReloadStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredReloadStartDate:endDate:");
}

id objc_msgSend_setPreferredSymbolConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredSymbolConfiguration:");
}

id objc_msgSend_setPreferredTintMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredTintMode:");
}

id objc_msgSend_setPrefersScaledContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersScaledContent:");
}

id objc_msgSend_setPrefersShadow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersShadow:");
}

id objc_msgSend_setPrefersToActivateForTargetContentIdentifierPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersToActivateForTargetContentIdentifierPredicate:");
}

id objc_msgSend_setPrefetchDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefetchDataSource:");
}

id objc_msgSend_setPreloadExtraDays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreloadExtraDays:");
}

id objc_msgSend_setPresentedOverWholeApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentedOverWholeApp:");
}

id objc_msgSend_setPresentedViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentedViewController:");
}

id objc_msgSend_setPresentedViewControllersState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentedViewControllersState:");
}

id objc_msgSend_setPresentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentingViewController:");
}

id objc_msgSend_setPresentsWithGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentsWithGesture:");
}

id objc_msgSend_setPreservesSuperviewLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreservesSuperviewLayoutMargins:");
}

id objc_msgSend_setPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressed:");
}

id objc_msgSend_setPreventScrollingForNextViewAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreventScrollingForNextViewAppear:");
}

id objc_msgSend_setPrimaryEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryEdge:");
}

id objc_msgSend_setProcessedEventData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessedEventData:");
}

id objc_msgSend_setProposedStartDateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProposedStartDateChanged:");
}

id objc_msgSend_setProposedStartDateStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProposedStartDateStatus:");
}

id objc_msgSend_setProposedTimeAttendee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProposedTimeAttendee:");
}

id objc_msgSend_setPushDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushDelegate:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setReceiveTapsInHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceiveTapsInHeader:");
}

id objc_msgSend_setRecurrenceEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecurrenceEnd:");
}

id objc_msgSend_setReduceLayoutProcessingForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReduceLayoutProcessingForAnimation:");
}

id objc_msgSend_setRefreshControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshControl:");
}

id objc_msgSend_setReportProblemDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportProblemDelegate:");
}

id objc_msgSend_setReportProblemNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportProblemNavigationController:");
}

id objc_msgSend_setResponseComment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseComment:");
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItem:");
}

id objc_msgSend_setRightBarButtonItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItems:");
}

id objc_msgSend_setRightBarButtonItems_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItems:animated:");
}

id objc_msgSend_setRightBorderInsetsOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBorderInsetsOccurrences:");
}

id objc_msgSend_setRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootViewController:");
}

id objc_msgSend_setRotating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotating:");
}

id objc_msgSend_setRoundedRectSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoundedRectSize:");
}

id objc_msgSend_setRoundingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoundingType:");
}

id objc_msgSend_setRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowHeight:");
}

id objc_msgSend_setSaveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveBlock:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setSceneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSceneIdentifier:");
}

id objc_msgSend_setSceneTitleNeedsUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSceneTitleNeedsUpdate");
}

id objc_msgSend_setScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEdgeAppearance:");
}

id objc_msgSend_setScrollEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEnabled:");
}

id objc_msgSend_setScrollerContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollerContentOffset:");
}

id objc_msgSend_setScrollingBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollingBounds:");
}

id objc_msgSend_setScrollingContentLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollingContentLength:");
}

id objc_msgSend_setScrollsToTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollsToTop:");
}

id objc_msgSend_setScrubber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrubber:");
}

id objc_msgSend_setSearchBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchBar:");
}

id objc_msgSend_setSearchResultsDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsDelegate:");
}

id objc_msgSend_setSearchResultsUpdater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsUpdater:");
}

id objc_msgSend_setSearchResultsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResultsViewController:");
}

id objc_msgSend_setSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchString:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSectionHeaderHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionHeaderHeight:");
}

id objc_msgSend_setSectionHeaderTopPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionHeaderTopPadding:");
}

id objc_msgSend_setSectionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionTitle:");
}

id objc_msgSend_setSegmentedControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSegmentedControl:");
}

id objc_msgSend_setSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelected:");
}

id objc_msgSend_setSelectedAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedAction:");
}

id objc_msgSend_setSelectedCalendars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedCalendars:");
}

id objc_msgSend_setSelectedCalendarsAndRequestPreferenceSave_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedCalendarsAndRequestPreferenceSave:reason:");
}

id objc_msgSend_setSelectedCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedCopy:");
}

id objc_msgSend_setSelectedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDate:");
}

id objc_msgSend_setSelectedDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDate:animated:");
}

id objc_msgSend_setSelectedDateAndFirstVisibleHeaderDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDateAndFirstVisibleHeaderDate:");
}

id objc_msgSend_setSelectedDateChangesDelayedUntilAfterTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDateChangesDelayedUntilAfterTransition:");
}

id objc_msgSend_setSelectedDateWithoutScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDateWithoutScrolling:");
}

id objc_msgSend_setSelectedDay_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedDay:animated:");
}

id objc_msgSend_setSelectedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedIndex:");
}

id objc_msgSend_setSelectedOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedOccurrence:");
}

id objc_msgSend_setSelectedOccurrence_forceChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedOccurrence:forceChange:");
}

id objc_msgSend_setSelectedOccurrences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedOccurrences:");
}

id objc_msgSend_setSelectedOccurrences_forceChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedOccurrences:forceChange:");
}

id objc_msgSend_setSelectedSegmentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedSegmentIndex:");
}

id objc_msgSend_setSelectionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionStyle:");
}

id objc_msgSend_setSeparatorEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorEdges:");
}

id objc_msgSend_setSeparatorInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorInset:");
}

id objc_msgSend_setSeparatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorStyle:");
}

id objc_msgSend_setShadowBlur_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowBlur:");
}

id objc_msgSend_setShadowColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowColor:");
}

id objc_msgSend_setShadowOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowOffset:");
}

id objc_msgSend_setShadowOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowOpacity:");
}

id objc_msgSend_setShadowRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowRadius:");
}

id objc_msgSend_setShouldAnnotateAppEntities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAnnotateAppEntities:");
}

id objc_msgSend_setShouldAutoscrollAfterAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAutoscrollAfterAppearance:");
}

id objc_msgSend_setShouldDisplayJumpToTodayTipTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDisplayJumpToTodayTipTo:");
}

id objc_msgSend_setShouldHideInlineFocusBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldHideInlineFocusBanner:");
}

id objc_msgSend_setShouldLeaveSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldLeaveSearchString:");
}

id objc_msgSend_setShouldLogVisibleEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldLogVisibleEvents:");
}

id objc_msgSend_setShouldRespondToApplicationDidBecomeActiveStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRespondToApplicationDidBecomeActiveStateChange:");
}

id objc_msgSend_setShouldShowLinkedContacts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowLinkedContacts:");
}

id objc_msgSend_setShouldShowMonthTitleHUDWhenScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowMonthTitleHUDWhenScrolling:");
}

id objc_msgSend_setShouldShowOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowOverlay:");
}

id objc_msgSend_setShouldUseVerticalLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseVerticalLayout:");
}

id objc_msgSend_setShowDayAsList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowDayAsList:");
}

id objc_msgSend_setShowDayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowDayName:");
}

id objc_msgSend_setShowDetailAccessories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowDetailAccessories:");
}

id objc_msgSend_setShowDividers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowDividers:");
}

id objc_msgSend_setShowEventDetailsOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowEventDetailsOperationQueue:");
}

id objc_msgSend_setShowEventWhenAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowEventWhenAdded:");
}

id objc_msgSend_setShowFilteredData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowFilteredData:");
}

id objc_msgSend_setShowIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowIdentity:");
}

id objc_msgSend_setShowListView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowListView:");
}

id objc_msgSend_setShowMonthAsDivided_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowMonthAsDivided:");
}

id objc_msgSend_setShowNoContentString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowNoContentString:");
}

id objc_msgSend_setShowOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowOverlay:");
}

id objc_msgSend_setShowSeparatorLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowSeparatorLines:");
}

id objc_msgSend_setShowViewControllersWhenReadyQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowViewControllersWhenReadyQueue:");
}

id objc_msgSend_setShowWeekNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowWeekNumber:");
}

id objc_msgSend_setShowWeekdayLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowWeekdayLabel:");
}

id objc_msgSend_setShowingOverriddenToolbarItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowingOverriddenToolbarItems:");
}

id objc_msgSend_setShowingTomorrowSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowingTomorrowSection:");
}

id objc_msgSend_setShowsActivityIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsActivityIndicator:");
}

id objc_msgSend_setShowsBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsBanner:");
}

id objc_msgSend_setShowsCancelButton_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsCancelButton:animated:");
}

id objc_msgSend_setShowsCommentPrompt_animated_initialValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsCommentPrompt:animated:initialValue:");
}

id objc_msgSend_setShowsCompletedRemindersSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsCompletedRemindersSetting:");
}

id objc_msgSend_setShowsDeclinedEventsSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsDeclinedEventsSetting:");
}

id objc_msgSend_setShowsDetectedConferenceItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsDetectedConferenceItem:");
}

id objc_msgSend_setShowsDoneButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsDoneButton:");
}

id objc_msgSend_setShowsFirstDayOfMonthLabel_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsFirstDayOfMonthLabel:animated:");
}

id objc_msgSend_setShowsHalfOfScrolledEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsHalfOfScrolledEvents:");
}

id objc_msgSend_setShowsHorizontalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsHorizontalScrollIndicator:");
}

id objc_msgSend_setShowsLargeContentViewer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsLargeContentViewer:");
}

id objc_msgSend_setShowsLeftBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsLeftBorder:");
}

id objc_msgSend_setShowsRightBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsRightBorder:");
}

id objc_msgSend_setShowsTimeLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsTimeLine:");
}

id objc_msgSend_setShowsTimeMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsTimeMarker:");
}

id objc_msgSend_setShowsTimeMarkerExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsTimeMarkerExtension:");
}

id objc_msgSend_setShowsVerticalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsVerticalScrollIndicator:");
}

id objc_msgSend_setShowsWeekNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsWeekNumber:");
}

id objc_msgSend_setSignificantDatesChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignificantDatesChangedHandler:");
}

id objc_msgSend_setSourceRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRect:");
}

id objc_msgSend_setSourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceView:");
}

id objc_msgSend_setSourceViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceViewController:");
}

id objc_msgSend_setSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeed:");
}

id objc_msgSend_setSplashScreenCompletionAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplashScreenCompletionAction:");
}

id objc_msgSend_setSplitLeftEdge_splitRightEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitLeftEdge:splitRightEdge:");
}

id objc_msgSend_setSplitStateOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitStateOpen:");
}

id objc_msgSend_setSpringLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpringLoaded:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartDate_endDate_dayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:endDate:dayCount:");
}

id objc_msgSend_setStartDate_endDate_dayCount_todayDay_reload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:endDate:dayCount:todayDay:reload:");
}

id objc_msgSend_setStartDateWithDateComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDateWithDateComponents:");
}

id objc_msgSend_setStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartPoint:");
}

id objc_msgSend_setStartingFirstVisibleSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingFirstVisibleSecond:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatusChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusChanged:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setStrings_overlayStrings_weekNumberString_todayInWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrings:overlayStrings:weekNumberString:todayInWeek:");
}

id objc_msgSend_setStructuredLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStructuredLocation:");
}

id objc_msgSend_setSuggestionKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestionKey:");
}

id objc_msgSend_setSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummary:");
}

id objc_msgSend_setSummaryData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummaryData:");
}

id objc_msgSend_setSupportsNavigation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsNavigation:");
}

id objc_msgSend_setSupportsPhoneCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsPhoneCall:");
}

id objc_msgSend_setSuppressLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressLayout:");
}

id objc_msgSend_setSuppressViewAdjustments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressViewAdjustments:");
}

id objc_msgSend_setSuspendEventLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspendEventLoading:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setSwitcherDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitcherDelegate:");
}

id objc_msgSend_setTableHeaderView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableHeaderView:");
}

id objc_msgSend_setTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableView:");
}

id objc_msgSend_setTemporarilyHideWeekNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporarilyHideWeekNumber:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextFrameWidthAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextFrameWidthAdjustment:");
}

id objc_msgSend_setTextOffsetFromCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextOffsetFromCircle:");
}

id objc_msgSend_setTextYOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextYOffset:");
}

id objc_msgSend_setTimeImplicitlySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeImplicitlySet:");
}

id objc_msgSend_setTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeInterval:");
}

id objc_msgSend_setTimeMarkerExtensionColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeMarkerExtensionColor:");
}

id objc_msgSend_setTimeMarkerTodayDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeMarkerTodayDay:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimer:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitle_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:forState:");
}

id objc_msgSend_setTitleAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleAlignment:");
}

id objc_msgSend_setTitleColor_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleColor:forState:");
}

id objc_msgSend_setTitleLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleLineBreakMode:");
}

id objc_msgSend_setTitleTextAttributes_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleTextAttributes:forState:");
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleView:");
}

id objc_msgSend_setToEndState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToEndState");
}

id objc_msgSend_setToStartState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToStartState");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setTodayBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayBarButtonItem:");
}

id objc_msgSend_setTodayButtonVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayButtonVisible:");
}

id objc_msgSend_setTodayIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayIndex:");
}

id objc_msgSend_setToolbarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarHidden:");
}

id objc_msgSend_setToolbarHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarHidden:animated:");
}

id objc_msgSend_setToolbarItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarItems:");
}

id objc_msgSend_setToolbarItems_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarItems:animated:");
}

id objc_msgSend_setTopInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopInset:");
}

id objc_msgSend_setTopPinningProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopPinningProximity:");
}

id objc_msgSend_setTopView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopView:");
}

id objc_msgSend_setTotalEventUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalEventUnits:");
}

id objc_msgSend_setTotalRowCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalRowCount:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransitioningDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitioningDelegate:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setTravelTimeSubviewHeightInPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTravelTimeSubviewHeightInPoints:");
}

id objc_msgSend_setUnderlineThickness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlineThickness:");
}

id objc_msgSend_setUnderlineThickness_forOverlayStringAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlineThickness:forOverlayStringAtIndex:");
}

id objc_msgSend_setUndoableEditor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUndoableEditor:");
}

id objc_msgSend_setUnselectedCalendars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnselectedCalendars:");
}

id objc_msgSend_setUntimedDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUntimedDelegate:");
}

id objc_msgSend_setUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUp");
}

id objc_msgSend_setUpViewConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpViewConstraints");
}

id objc_msgSend_setUseCustomDayFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseCustomDayFrames:");
}

id objc_msgSend_setUseLayoutMargins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseLayoutMargins:");
}

id objc_msgSend_setUseMultiDayHeaderStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMultiDayHeaderStyle:");
}

id objc_msgSend_setUseMultiDayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMultiDayStyle:");
}

id objc_msgSend_setUseTodayColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseTodayColors:");
}

id objc_msgSend_setUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActivity:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setUserNotificationCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserNotificationCenter:");
}

id objc_msgSend_setUsesHorizontalDragLocking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesHorizontalDragLocking:");
}

id objc_msgSend_setUsesRoundedRectInsteadOfCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesRoundedRectInsteadOfCircle:");
}

id objc_msgSend_setUsesSmallText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesSmallText:");
}

id objc_msgSend_setUsesTextYOffsetWithoutAdjustmentForOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesTextYOffsetWithoutAdjustmentForOverlay:");
}

id objc_msgSend_setUsesXDragOffsetInCancelRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesXDragOffsetInCancelRegion:");
}

id objc_msgSend_setValue_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKeyPath:");
}

id objc_msgSend_setVerticallyCompressedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticallyCompressedState:");
}

id objc_msgSend_setView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setView:");
}

id objc_msgSend_setViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewController:");
}

id objc_msgSend_setViewController_forColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewController:forColumn:");
}

id objc_msgSend_setViewControllerTitleForSelectedEventInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllerTitleForSelectedEventInSection:");
}

id objc_msgSend_setViewControllers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllers:");
}

id objc_msgSend_setViewControllers_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllers:animated:");
}

id objc_msgSend_setViewIsVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewIsVisible:");
}

id objc_msgSend_setViewSwitcherLayoutHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewSwitcherLayoutHandler:");
}

id objc_msgSend_setViewsDimmed_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewsDimmed:forEvent:");
}

id objc_msgSend_setVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisible:");
}

id objc_msgSend_setVisibleGroups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleGroups:");
}

id objc_msgSend_setWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeek:");
}

id objc_msgSend_setWeekAllDayBaselineForLargeFormatWeekView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekAllDayBaselineForLargeFormatWeekView:");
}

id objc_msgSend_setWeekAllDayOccurrenceHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekAllDayOccurrenceHeight:");
}

id objc_msgSend_setWeekAllDayOccurrenceHeightSmallText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekAllDayOccurrenceHeightSmallText:");
}

id objc_msgSend_setWeekDayInitialsDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekDayInitialsDay:");
}

id objc_msgSend_setWeekDayInitialsMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekDayInitialsMonth:");
}

id objc_msgSend_setWeekDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekDelegate:");
}

id objc_msgSend_setWeekNumberText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekNumberText:");
}

id objc_msgSend_setWeekStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekStartDate:");
}

id objc_msgSend_setWeekViewFirstVisibleSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekViewFirstVisibleSecond:");
}

id objc_msgSend_setWeekViewHourScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekViewHourScale:");
}

id objc_msgSend_setWeekViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekViews:");
}

id objc_msgSend_setWeekday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekday:");
}

id objc_msgSend_setWeekdayHeaderFillsHalfWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekdayHeaderFillsHalfWidth:");
}

id objc_msgSend_setWeekdayHeaderMovedBeyondLeftEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekdayHeaderMovedBeyondLeftEdge:");
}

id objc_msgSend_setWeekdayHeaderVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekdayHeaderVisible:");
}

id objc_msgSend_setWeekendColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekendColor:");
}

id objc_msgSend_setWeekendIndices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekendIndices:");
}

id objc_msgSend_setWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidth:");
}

id objc_msgSend_setWidth_forSegmentAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidth:forSegmentAtIndex:");
}

id objc_msgSend_setWindowScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindowScene:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setupCommentPromptConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCommentPromptConstraintsIfNeeded");
}

id objc_msgSend_setupData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupData");
}

id objc_msgSend_setupDisclosureConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDisclosureConstraintsIfNeeded");
}

id objc_msgSend_setupEntityProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupEntityProvider");
}

id objc_msgSend_setupForViewAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupForViewAppearance");
}

id objc_msgSend_setupLabelConstraintsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupLabelConstraintsIfNeeded");
}

id objc_msgSend_setupManagers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupManagers");
}

id objc_msgSend_setupPresentationControllerIfStyleIsPopover_barButtonItem_passThroughViews_permittedArrowDirections_sourceRect_sourceView_viewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupPresentationControllerIfStyleIsPopover:barButtonItem:passThroughViews:permittedArrowDirections:sourceRect:sourceView:viewController:");
}

id objc_msgSend_setupSearch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearch:");
}

id objc_msgSend_setupSearchControlForTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearchControlForTraitCollection:");
}

id objc_msgSend_setupSearchNavBarHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearchNavBarHeight");
}

id objc_msgSend_setupUIForTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupUIForTraitCollection:");
}

id objc_msgSend_shapeWithRoundedRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shapeWithRoundedRect:");
}

id objc_msgSend_shapeWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shapeWithRoundedRect:cornerRadius:");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedFactory");
}

id objc_msgSend_sharedGenerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedGenerator");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedOwnerEmail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOwnerEmail");
}

id objc_msgSend_sharedOwnerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOwnerName");
}

id objc_msgSend_sharedOwnerPhoneNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOwnerPhoneNumber");
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedPreferences");
}

id objc_msgSend_sharingInvitationResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharingInvitationResponse");
}

id objc_msgSend_sharingStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharingStatus");
}

id objc_msgSend_shortcutItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortcutItem");
}

id objc_msgSend_shouldAdaptEventViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAdaptEventViewControllers");
}

id objc_msgSend_shouldAllowLongPress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowLongPress");
}

id objc_msgSend_shouldAnimateScrollToDate_fromClosestDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnimateScrollToDate:fromClosestDate:");
}

id objc_msgSend_shouldAnimateTransitionToDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnimateTransitionToDay");
}

id objc_msgSend_shouldAnimateTransitionsToMonthView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnimateTransitionsToMonthView");
}

id objc_msgSend_shouldAnnotateAppEntitiesChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnnotateAppEntitiesChanged");
}

id objc_msgSend_shouldAutoScrollToSelectedDateAfterFirstRefresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAutoScrollToSelectedDateAfterFirstRefresh");
}

id objc_msgSend_shouldBeModal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBeModal");
}

id objc_msgSend_shouldDonateTomorrowActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDonateTomorrowActivity");
}

id objc_msgSend_shouldHandleCanPerformActionForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleCanPerformActionForSelector:");
}

id objc_msgSend_shouldHideInlineFocusBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHideInlineFocusBanner");
}

id objc_msgSend_shouldHideInlineFocusBannerForSidebarState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHideInlineFocusBannerForSidebarState:");
}

id objc_msgSend_shouldInvalidateManagedNavigationControllerOnPresentationDismissal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldInvalidateManagedNavigationControllerOnPresentationDismissal");
}

id objc_msgSend_shouldJournalMainViewControllerParent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldJournalMainViewControllerParent");
}

id objc_msgSend_shouldLeaveSearchString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldLeaveSearchString");
}

id objc_msgSend_shouldModallyPresentFirstShownViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldModallyPresentFirstShownViewController");
}

id objc_msgSend_shouldPreserveDateAcrossRefresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPreserveDateAcrossRefresh");
}

id objc_msgSend_shouldPushNextLevelViewControllerWhenTodayIsVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPushNextLevelViewControllerWhenTodayIsVisible");
}

id objc_msgSend_shouldRecordExtendedLaunchTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRecordExtendedLaunchTime");
}

id objc_msgSend_shouldRemoveSelfFromNavigationStackIfTraitCollectionIsUnsupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRemoveSelfFromNavigationStackIfTraitCollectionIsUnsupported");
}

id objc_msgSend_shouldRespondToApplicationDidBecomeActiveStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRespondToApplicationDidBecomeActiveStateChange");
}

id objc_msgSend_shouldSaveSelectedEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSaveSelectedEvent");
}

id objc_msgSend_shouldShowFocusBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowFocusBanner");
}

id objc_msgSend_shouldShowIdentityChooser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowIdentityChooser");
}

id objc_msgSend_shouldShowOverlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowOverlay");
}

id objc_msgSend_shouldShowWithAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowWithAnimation");
}

id objc_msgSend_shouldUpdateModelSelectedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateModelSelectedDate");
}

id objc_msgSend_shouldUpdateOwnBackButtonWhenTopViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateOwnBackButtonWhenTopViewController");
}

id objc_msgSend_shouldUpdatePreferredReloadDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdatePreferredReloadDates");
}

id objc_msgSend_shouldUpdateSelectedDateWithCentralView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateSelectedDateWithCentralView");
}

id objc_msgSend_shouldUseVerticalLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseVerticalLayout");
}

id objc_msgSend_shouldWaitForAttendeeLoad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldWaitForAttendeeLoad");
}

id objc_msgSend_shouldWaitForAttendeeLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldWaitForAttendeeLoading");
}

id objc_msgSend_show_occurrenceView_atRow_numRows_drawTimeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "show:occurrenceView:atRow:numRows:drawTimeString:");
}

id objc_msgSend_showAddEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddEvent");
}

id objc_msgSend_showAddEventAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddEventAnimated:completion:");
}

id objc_msgSend_showAddEventAnimated_fromBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddEventAnimated:fromBarButtonItem:");
}

id objc_msgSend_showAddEventAnimated_fromBarButtonItem_withTitle_startDate_exactStartDate_endDate_location_suggestionKey_allDay_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddEventAnimated:fromBarButtonItem:withTitle:startDate:exactStartDate:endDate:location:suggestionKey:allDay:completion:");
}

id objc_msgSend_showAddEventWithTitle_startDate_endDate_location_suggestionsKey_allDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddEventWithTitle:startDate:endDate:location:suggestionsKey:allDay:");
}

id objc_msgSend_showAddSubscribedCalendarWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAddSubscribedCalendarWithURL:");
}

id objc_msgSend_showAsCancelledOrDeclined(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAsCancelledOrDeclined");
}

id objc_msgSend_showCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCalendar:");
}

id objc_msgSend_showCalendar_enableDoneInitially_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCalendar:enableDoneInitially:");
}

id objc_msgSend_showCalendarsAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCalendarsAnimated:completion:");
}

id objc_msgSend_showCalendarsSideBarWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCalendarsSideBarWithCompletion:");
}

id objc_msgSend_showCalendarsViewWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCalendarsViewWithCompletion:");
}

id objc_msgSend_showColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showColumn:");
}

id objc_msgSend_showContactWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showContactWithIdentifier:");
}

id objc_msgSend_showDate_andTime_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDate:andTime:animated:");
}

id objc_msgSend_showDate_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDate:animated:");
}

id objc_msgSend_showDate_animated_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDate:animated:completionBlock:");
}

id objc_msgSend_showDate_animated_toMonthStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDate:animated:toMonthStart:");
}

id objc_msgSend_showDateVerticalOffsetForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDateVerticalOffsetForDate:");
}

id objc_msgSend_showDayAsList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDayAsList");
}

id objc_msgSend_showDayName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDayName");
}

id objc_msgSend_showDeclinedEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDeclinedEvents");
}

id objc_msgSend_showDetailViewControllerForEvent_context_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDetailViewControllerForEvent:context:animated:");
}

id objc_msgSend_showDetailViewControllerForEvents_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDetailViewControllerForEvents:animated:");
}

id objc_msgSend_showDetailsForDraggedOccurrence_inWeekView_onDay_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDetailsForDraggedOccurrence:inWeekView:onDay:creationMethod:");
}

id objc_msgSend_showEditViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEditViewController:");
}

id objc_msgSend_showEditorForNewDraggedEvent_inWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEditorForNewDraggedEvent:inWeek:");
}

id objc_msgSend_showEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEvent:");
}

id objc_msgSend_showEvent_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEvent:animated:");
}

id objc_msgSend_showEvent_animated_showMode_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEvent:animated:showMode:context:");
}

id objc_msgSend_showEvent_animated_showMode_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEvent:animated:showMode:context:completion:");
}

id objc_msgSend_showEventAndCloseSidebarIfNeeded_animated_showMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEventAndCloseSidebarIfNeeded:animated:showMode:");
}

id objc_msgSend_showEventDetailsOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEventDetailsOperationQueue");
}

id objc_msgSend_showEventDetailsWhenNewEventAdded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEventDetailsWhenNewEventAdded");
}

id objc_msgSend_showEventWhenAdded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEventWhenAdded");
}

id objc_msgSend_showEventWithIdentifier_isSearchResult_date_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEventWithIdentifier:isSearchResult:date:context:");
}

id objc_msgSend_showEvents_animated_showMode_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEvents:animated:showMode:context:");
}

id objc_msgSend_showExperimentalUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showExperimentalUI");
}

id objc_msgSend_showFilteredData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showFilteredData");
}

id objc_msgSend_showIdentitySwitcherFromSourceView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showIdentitySwitcherFromSourceView:");
}

id objc_msgSend_showInboxAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showInboxAnimated:");
}

id objc_msgSend_showInboxAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showInboxAnimated:completion:");
}

id objc_msgSend_showMonthAsDivided(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showMonthAsDivided");
}

id objc_msgSend_showNewEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNewEvent:");
}

id objc_msgSend_showNewSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNewSection");
}

id objc_msgSend_showNextOccurrenceOfSelectableItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNextOccurrenceOfSelectableItem");
}

id objc_msgSend_showNowAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNowAnimated:");
}

id objc_msgSend_showOverlayCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showOverlayCalendar");
}

id objc_msgSend_showOverlayMonthInCellAtOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showOverlayMonthInCellAtOffset:animated:");
}

id objc_msgSend_showPreviousOccurrenceOfSelectableItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPreviousOccurrenceOfSelectableItem");
}

id objc_msgSend_showRepliedSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showRepliedSection");
}

id objc_msgSend_showScrubber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showScrubber");
}

id objc_msgSend_showSearchAnimated_becomeFirstResponder_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSearchAnimated:becomeFirstResponder:completion:");
}

id objc_msgSend_showSelectedDateIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSelectedDateIfNeeded");
}

id objc_msgSend_showTimelineHighlightForTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTimelineHighlightForTime:");
}

id objc_msgSend_showTodayAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTodayAnimated:");
}

id objc_msgSend_showViewController_sender_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showViewController:sender:animated:completion:");
}

id objc_msgSend_showViewControllerOperationClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showViewControllerOperationClass");
}

id objc_msgSend_showViewControllersWhenReadyQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showViewControllersWhenReadyQueue");
}

id objc_msgSend_showWeekNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showWeekNumber");
}

id objc_msgSend_showWeekNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showWeekNumbers");
}

id objc_msgSend_showWeekdayLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showWeekdayLabel");
}

id objc_msgSend_showYearNumberAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showYearNumberAnimated:");
}

id objc_msgSend_showingOverriddenToolbarItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showingOverriddenToolbarItems");
}

id objc_msgSend_showingSplashScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showingSplashScreen");
}

id objc_msgSend_showingTomorrowSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showingTomorrowSection");
}

id objc_msgSend_shownContactViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shownContactViewController");
}

id objc_msgSend_shownEventEditViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shownEventEditViewController");
}

id objc_msgSend_shownEventViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shownEventViewController");
}

id objc_msgSend_shownExpandedReminderStackViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shownExpandedReminderStackViewController");
}

id objc_msgSend_shownViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shownViewController");
}

id objc_msgSend_showsActivityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsActivityIndicator");
}

id objc_msgSend_showsAllDayDividerLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsAllDayDividerLine");
}

id objc_msgSend_showsHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsHeader");
}

id objc_msgSend_showsSearchBarForTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsSearchBarForTraitCollection:");
}

id objc_msgSend_showsThumb(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsThumb");
}

id objc_msgSend_showsTimeLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsTimeLine");
}

id objc_msgSend_showsTimeMarker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsTimeMarker");
}

id objc_msgSend_showsYearInMonthLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showsYearInMonthLabel");
}

id objc_msgSend_sideViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sideViews");
}

id objc_msgSend_sidebarWidthForViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sidebarWidthForViewHierarchy:");
}

id objc_msgSend_significantTimeChangeOccurred(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "significantTimeChangeOccurred");
}

id objc_msgSend_simulateFirstLoadFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateFirstLoadFinished");
}

id objc_msgSend_singleRecurrenceRule(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleRecurrenceRule");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:");
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeToFit");
}

id objc_msgSend_sizeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeValue");
}

id objc_msgSend_sizeWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeWithAttributes:");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshotViewAfterScreenUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotViewAfterScreenUpdates:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingFunction_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingFunction:context:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedEnabledDelegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedEnabledDelegates");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "source");
}

id objc_msgSend_sourceForSelectedIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceForSelectedIdentity");
}

id objc_msgSend_sourceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceIdentifier");
}

id objc_msgSend_sourceRect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceRect");
}

id objc_msgSend_sourceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceType");
}

id objc_msgSend_sourceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceView");
}

id objc_msgSend_sourceViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceViewController");
}

id objc_msgSend_sourceViewController_notifiesReadinessForPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceViewController:notifiesReadinessForPresentation:");
}

id objc_msgSend_sources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sources");
}

id objc_msgSend_spaceGapFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spaceGapFor:");
}

id objc_msgSend_spacer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spacer");
}

id objc_msgSend_spacerWidthForWindowWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spacerWidthForWindowWidth:");
}

id objc_msgSend_specialDayType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "specialDayType");
}

id objc_msgSend_splashScreenCompletionAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splashScreenCompletionAction");
}

id objc_msgSend_splitBehavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitBehavior");
}

id objc_msgSend_splitMultiDayEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitMultiDayEvents");
}

id objc_msgSend_splitterSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitterSpace");
}

id objc_msgSend_standardAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardAppearance");
}

id objc_msgSend_standardCircleDiameterForSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardCircleDiameterForSizeClass:");
}

id objc_msgSend_standardHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardHeight");
}

id objc_msgSend_standardRegularController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardRegularController");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_standardWidthForOrientation_withViewInViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardWidthForOrientation:withViewInViewHierarchy:");
}

id objc_msgSend_starkCardControllerForCalendarEventWithContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "starkCardControllerForCalendarEventWithContact:");
}

id objc_msgSend_startCalendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startCalendarDate");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startDateForNextOccurrence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateForNextOccurrence");
}

id objc_msgSend_startDateOfSelectedWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateOfSelectedWeek");
}

id objc_msgSend_startNotificationMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNotificationMonitor");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startOfMonthForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfMonthForPoint:");
}

id objc_msgSend_startRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRange");
}

id objc_msgSend_startSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSearch");
}

id objc_msgSend_startedSubTest_forTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedSubTest:forTest:");
}

id objc_msgSend_startedTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedTest:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateRestorationActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateRestorationActivity");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusBarManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusBarManager");
}

id objc_msgSend_statusButtonsActionFromContextMenuAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusButtonsActionFromContextMenuAction:");
}

id objc_msgSend_stopPulsing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopPulsing");
}

id objc_msgSend_stopScrollingAndZooming(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScrollingAndZooming");
}

id objc_msgSend_strikethroughTitleColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strikethroughTitleColor:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringAttributes");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingPercentEncoding");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromContact_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromContact:style:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDate_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:toDate:");
}

id objc_msgSend_stringFromPersonNameComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromPersonNameComponents:");
}

id objc_msgSend_stringRemovingMailto(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringRemovingMailto");
}

id objc_msgSend_stringRemovingTel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringRemovingTel");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithAutoCommentRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithAutoCommentRemoved:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCharacters:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_structuredLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "structuredLocation");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "style");
}

id objc_msgSend_styleWithEffect_shape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "styleWithEffect:shape:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_sublayers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sublayers");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subviewBufferExtensionMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviewBufferExtensionMultiplier");
}

id objc_msgSend_subviewCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviewCount");
}

id objc_msgSend_subviewForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviewForDate:");
}

id objc_msgSend_subviewForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviewForPoint:");
}

id objc_msgSend_subviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviews");
}

id objc_msgSend_suggestedEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedEvent");
}

id objc_msgSend_suggestedEventsFeatureText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedEventsFeatureText");
}

id objc_msgSend_suggestedEventsIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedEventsIcon");
}

id objc_msgSend_suggestedEventsTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedEventsTitleText");
}

id objc_msgSend_suggestionInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestionInfo");
}

id objc_msgSend_suggestionKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestionKey");
}

id objc_msgSend_summary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summary");
}

id objc_msgSend_summaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summaryData");
}

id objc_msgSend_superlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superlayer");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_supportedInterfaceOrientations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedInterfaceOrientations");
}

id objc_msgSend_supportedToggleMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedToggleMode");
}

id objc_msgSend_supportsAvailabilityRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAvailabilityRequests");
}

id objc_msgSend_suppressInitialScrollToCurrentTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressInitialScrollToCurrentTime");
}

id objc_msgSend_suppressLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressLayout");
}

id objc_msgSend_suppressViewAdjustments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressViewAdjustments");
}

id objc_msgSend_suspendEventLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendEventLoading");
}

id objc_msgSend_swipeToDeleteEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "swipeToDeleteEnabled");
}

id objc_msgSend_switcherViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "switcherViewController");
}

id objc_msgSend_symbolImage_forFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "symbolImage:forFont:");
}

id objc_msgSend_synchronizeWeekGroupScrollingToWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeWeekGroupScrollingToWeek:");
}

id objc_msgSend_system(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "system");
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBackgroundColor");
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:");
}

id objc_msgSend_systemGray2Color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGray2Color");
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGrayColor");
}

id objc_msgSend_systemGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGroupedBackgroundColor");
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:");
}

id objc_msgSend_systemImageNamed_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:withConfiguration:");
}

id objc_msgSend_systemIndigoColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemIndigoColor");
}

id objc_msgSend_systemLayoutSizeFittingSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemLayoutSizeFittingSize:");
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRedColor");
}

id objc_msgSend_systemWhiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemWhiteColor");
}

id objc_msgSend_tableBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableBackgroundColor");
}

id objc_msgSend_tableCellGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableCellGroupedBackgroundColor");
}

id objc_msgSend_tableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView");
}

id objc_msgSend_tableView_cellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:cellForRowAtIndexPath:");
}

id objc_msgSend_tableView_didSelectRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:didSelectRowAtIndexPath:");
}

id objc_msgSend_tableView_numberOfRowsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:numberOfRowsInSection:");
}

id objc_msgSend_tableViewBackgroundColorOpaque(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewBackgroundColorOpaque");
}

id objc_msgSend_tableViewForTesting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewForTesting");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tag");
}

id objc_msgSend_tappedOnDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tappedOnDate:");
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "target");
}

id objc_msgSend_targetCalendarDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetCalendarDate");
}

id objc_msgSend_targetTransform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetTransform");
}

id objc_msgSend_targetViewControllerForAction_sender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetViewControllerForAction:sender:");
}

id objc_msgSend_teardownSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownSearch");
}

id objc_msgSend_tertiaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tertiaryLabelColor");
}

id objc_msgSend_testName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testName");
}

id objc_msgSend_tester(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tester");
}

id objc_msgSend_testingRotationDidEndNotificationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testingRotationDidEndNotificationName");
}

id objc_msgSend_testingRotationWillStartNotificationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testingRotationWillStartNotificationName");
}

id objc_msgSend_testingSessionStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testingSessionStarted");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textColor");
}

id objc_msgSend_textFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textFont");
}

id objc_msgSend_textFrameForFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textFrameForFrame:");
}

id objc_msgSend_textLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLabel");
}

id objc_msgSend_textProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textProperties");
}

id objc_msgSend_textWraps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textWraps");
}

id objc_msgSend_timeBaselineToDateBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeBaselineToDateBaselineConstraint");
}

id objc_msgSend_timeBaselineToLocationBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeBaselineToLocationBaselineConstraint");
}

id objc_msgSend_timeBaselineToTitleBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeBaselineToTitleBaselineConstraint");
}

id objc_msgSend_timeChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeChanged");
}

id objc_msgSend_timeFrameForFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeFrameForFrame:");
}

id objc_msgSend_timeInsetForSizeClass_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeInsetForSizeClass:orientation:");
}

id objc_msgSend_timeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeInterval");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeMarker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeMarker");
}

id objc_msgSend_timeString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeString");
}

id objc_msgSend_timeToLeaveAndAutomaticGeocodingFeatureText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToLeaveAndAutomaticGeocodingFeatureText");
}

id objc_msgSend_timeToLeaveAndAutomaticGeocodingIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToLeaveAndAutomaticGeocodingIcon");
}

id objc_msgSend_timeToLeaveAndAutomaticGeocodingTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToLeaveAndAutomaticGeocodingTitleText");
}

id objc_msgSend_timeView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeView");
}

id objc_msgSend_timeWidthForOrientation_inViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeWidthForOrientation:inViewHierarchy:");
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZone");
}

id objc_msgSend_timeZoneDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneDidChange");
}

id objc_msgSend_timeZoneWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithName:");
}

id objc_msgSend_timedDayViewContentGridSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timedDayViewContentGridSubviews");
}

id objc_msgSend_timedOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timedOccurrences");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timer");
}

id objc_msgSend_timerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_tintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tintColor");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_titleChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleChanged");
}

id objc_msgSend_titleForHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForHeader");
}

id objc_msgSend_titleForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForState:");
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabel");
}

id objc_msgSend_titleStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleStrings");
}

id objc_msgSend_toISO8601String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toISO8601String");
}

id objc_msgSend_today(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "today");
}

id objc_msgSend_todayBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayBarButtonItem");
}

id objc_msgSend_todayButtonFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayButtonFont");
}

id objc_msgSend_todayButtonVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayButtonVisible");
}

id objc_msgSend_todayIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayIndex");
}

id objc_msgSend_todayPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayPressed");
}

id objc_msgSend_todayTextSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayTextSize");
}

id objc_msgSend_toggleDayViewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleDayViewMode:");
}

id objc_msgSend_toggleDividedListView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleDividedListView");
}

id objc_msgSend_tomorrowLoadedEventCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tomorrowLoadedEventCollection");
}

id objc_msgSend_toolBarTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolBarTintColor");
}

id objc_msgSend_toolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolbar");
}

id objc_msgSend_toolbarItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolbarItems");
}

id objc_msgSend_toolbarVisibleInSplitBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toolbarVisibleInSplitBehavior:");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_topInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topInset");
}

id objc_msgSend_topInsetForSubviewWithCalendarDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topInsetForSubviewWithCalendarDate:");
}

id objc_msgSend_topLabelsContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topLabelsContainer");
}

id objc_msgSend_topMainViewControllerContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topMainViewControllerContainer");
}

id objc_msgSend_topOfMonthNameLabelToGrayLineDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topOfMonthNameLabelToGrayLineDistance");
}

id objc_msgSend_topOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topOffset");
}

id objc_msgSend_topPinningProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topPinningProximity");
}

id objc_msgSend_topView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topView");
}

id objc_msgSend_topViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topViewController");
}

id objc_msgSend_totalConflictsInSeries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalConflictsInSeries");
}

id objc_msgSend_totalEventUnits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalEventUnits");
}

id objc_msgSend_totalLanguageAwareHeightPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalLanguageAwareHeightPadding");
}

id objc_msgSend_totalOccurrencesInSeries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalOccurrencesInSeries");
}

id objc_msgSend_totalRowCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalRowCount");
}

id objc_msgSend_touchOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchOffset");
}

id objc_msgSend_touchTrackingViewForEventGestureController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchTrackingViewForEventGestureController:");
}

id objc_msgSend_touches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touches");
}

id objc_msgSend_trackRootUIInteractedWithError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackRootUIInteractedWithError");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_trailingButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingButton");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_traitCollectionByModifyingTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionByModifyingTraits:");
}

id objc_msgSend_traitCollectionDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionDidChange:");
}

id objc_msgSend_traitCollectionToUseWhileLoadingViewsDuringTransitioningToTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionToUseWhileLoadingViewsDuringTransitioningToTraitCollection:");
}

id objc_msgSend_traitOverrides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitOverrides");
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transform");
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionCoordinator");
}

id objc_msgSend_transitionFromView_toView_duration_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionFromView:toView:duration:options:completion:");
}

id objc_msgSend_transitionToSizeWillStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionToSizeWillStart");
}

id objc_msgSend_transitionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionView");
}

id objc_msgSend_transitionWithView_duration_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionWithView:duration:options:animations:completion:");
}

id objc_msgSend_travelTimeSubviewHeightInPoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "travelTimeSubviewHeightInPoints");
}

id objc_msgSend_twoDigitWeekNumberWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "twoDigitWeekNumberWidth");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_typeDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeDescription:");
}

id objc_msgSend_undimOccurrence_occurrenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undimOccurrence:occurrenceDate:");
}

id objc_msgSend_undoManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoManager");
}

id objc_msgSend_undoableEditor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoableEditor");
}

id objc_msgSend_unifiedContactWithIdentifier_keysToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unifiedContactWithIdentifier:keysToFetch:");
}

id objc_msgSend_unifiedMeContact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unifiedMeContact");
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueID");
}

id objc_msgSend_uniqueId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueId");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_uniqueKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueKey");
}

id objc_msgSend_unobstructedScrollViewHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unobstructedScrollViewHeight");
}

id objc_msgSend_unselectedCalendarIdentifiersForFocusMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unselectedCalendarIdentifiersForFocusMode");
}

id objc_msgSend_unselectedCalendarsForFocusMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unselectedCalendarsForFocusMode");
}

id objc_msgSend_unselectedCalendarsForFocusModeInEventStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unselectedCalendarsForFocusModeInEventStore:");
}

id objc_msgSend_unselectedCalendarsIgnoringFocus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unselectedCalendarsIgnoringFocus");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_update(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "update");
}

id objc_msgSend_updateActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateActivity:");
}

id objc_msgSend_updateAfterAppResume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAfterAppResume");
}

id objc_msgSend_updateAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthor");
}

id objc_msgSend_updateBackButtonToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBackButtonToDate:");
}

id objc_msgSend_updateBackButtonWhileTopViewControllerToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBackButtonWhileTopViewControllerToDate:");
}

id objc_msgSend_updateBackgroundWithEdgeInsets_color_alpha_cornerMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBackgroundWithEdgeInsets:color:alpha:cornerMask:");
}

id objc_msgSend_updateBannerDateStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBannerDateStrings");
}

id objc_msgSend_updateButtonStateForSidebar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateButtonStateForSidebar:");
}

id objc_msgSend_updateCompactMonthMenu(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCompactMonthMenu");
}

id objc_msgSend_updateCurrentIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCurrentIdentity");
}

id objc_msgSend_updateDayBadges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDayBadges");
}

id objc_msgSend_updateDayNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDayNumber");
}

id objc_msgSend_updateDayViewModeContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDayViewModeContainer");
}

id objc_msgSend_updateDayWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDayWidth");
}

id objc_msgSend_updateDisplayedDateForCurrentScrollOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDisplayedDateForCurrentScrollOffset");
}

id objc_msgSend_updateDividedMonthBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDividedMonthBarButtonItem");
}

id objc_msgSend_updateDraggedOccurrenceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDraggedOccurrenceView");
}

id objc_msgSend_updateDraggingOccurrenceForced_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDraggingOccurrenceForced:animated:");
}

id objc_msgSend_updateDraggingOccurrenceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDraggingOccurrenceFrame");
}

id objc_msgSend_updateDraggingOccurrenceFrameFromSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDraggingOccurrenceFrameFromSource");
}

id objc_msgSend_updateDraggingOccurrenceOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDraggingOccurrenceOrigin");
}

id objc_msgSend_updateErrorState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateErrorState");
}

id objc_msgSend_updateFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFonts");
}

id objc_msgSend_updateForChangeToTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForChangeToTraitCollection:");
}

id objc_msgSend_updateHeaderText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHeaderText:");
}

id objc_msgSend_updateHighlightIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHighlightIfNeeded");
}

id objc_msgSend_updateIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIdentity:");
}

id objc_msgSend_updateInboxCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInboxCount");
}

id objc_msgSend_updateMarkerPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMarkerPosition");
}

id objc_msgSend_updateMonthLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMonthLabel");
}

id objc_msgSend_updateNavigationBarButtonItemsWithViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNavigationBarButtonItemsWithViewController:");
}

id objc_msgSend_updateNavigationBarDisplayedDateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNavigationBarDisplayedDateString");
}

id objc_msgSend_updateNavigationBarDisplayedDateStringWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNavigationBarDisplayedDateStringWithDate:");
}

id objc_msgSend_updateNewEventButtonEnabledness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNewEventButtonEnabledness");
}

id objc_msgSend_updateNoContentConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNoContentConfiguration");
}

id objc_msgSend_updateOverlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOverlay");
}

id objc_msgSend_updatePalette_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePalette:");
}

id objc_msgSend_updatePreferredReloadRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePreferredReloadRange");
}

id objc_msgSend_updatePresentedController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePresentedController:");
}

id objc_msgSend_updatePresentedControllerTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePresentedControllerTo:");
}

id objc_msgSend_updatePrimaryViewControllerNavBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrimaryViewControllerNavBar");
}

id objc_msgSend_updatePrimaryViewControllerToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrimaryViewControllerToolbar");
}

id objc_msgSend_updateSearchViewControllerToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSearchViewControllerToolbar");
}

id objc_msgSend_updateSelectedDateForJumpToTodayTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSelectedDateForJumpToTodayTip");
}

id objc_msgSend_updateSelectedDateTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSelectedDateTimeZone");
}

id objc_msgSend_updateSelectedResponseButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSelectedResponseButton");
}

id objc_msgSend_updateSeparatorVisibiltyForSelectionChangeForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSeparatorVisibiltyForSelectionChangeForRowAtIndexPath:");
}

id objc_msgSend_updateShouldDisplayJumpToTodayTip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShouldDisplayJumpToTodayTip");
}

id objc_msgSend_updateShowWeekNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShowWeekNumber");
}

id objc_msgSend_updateSourceForSelectedIdentity_selectedCalendars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSourceForSelectedIdentity:selectedCalendars:");
}

id objc_msgSend_updateStateFromUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStateFromUI:");
}

id objc_msgSend_updateTimeMarkerForDayChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimeMarkerForDayChange");
}

id objc_msgSend_updateTimeViewBaseline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimeViewBaseline");
}

id objc_msgSend_updateToolbarItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToolbarItems");
}

id objc_msgSend_updateToolbarItemsWithViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToolbarItemsWithViewController:");
}

id objc_msgSend_updateTotalRowCountWithContainerRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTotalRowCountWithContainerRect:");
}

id objc_msgSend_updateUIFromState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUIFromState:");
}

id objc_msgSend_updateUIToTopHeaderDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUIToTopHeaderDate");
}

id objc_msgSend_updateVisibleRects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisibleRects");
}

id objc_msgSend_updateWeekNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWeekNumber");
}

id objc_msgSend_updateWithAddress_fullName_firstName_lastName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithAddress:fullName:firstName:lastName:");
}

id objc_msgSend_updateWithContacts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithContacts:");
}

id objc_msgSend_updateWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEvent:");
}

id objc_msgSend_updateWithEvent_dimmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEvent:dimmed:");
}

id objc_msgSend_updateWithEvent_isMultiday_occurrenceStartDate_dimmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEvent:isMultiday:occurrenceStartDate:dimmed:");
}

id objc_msgSend_updateWithEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEvents:");
}

id objc_msgSend_updatedConfigurationForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedConfigurationForState:");
}

id objc_msgSend_usableSpaceForOccurrencesWithHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usableSpaceForOccurrencesWithHeight:");
}

id objc_msgSend_useCustomBackButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useCustomBackButton");
}

id objc_msgSend_useLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useLayoutMargins");
}

id objc_msgSend_useMultiDayHeaderStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useMultiDayHeaderStyle");
}

id objc_msgSend_useMultiDayStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useMultiDayStyle");
}

id objc_msgSend_usePortraitLayoutForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usePortraitLayoutForSize:");
}

id objc_msgSend_useTodayColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useTodayColors");
}

id objc_msgSend_useUIKitLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useUIKitLayoutMargins");
}

id objc_msgSend_userActivities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userActivities");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInitiatedScroll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInitiatedScroll");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceStyle");
}

id objc_msgSend_userIsScrolling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userIsScrolling");
}

id objc_msgSend_userNotificationCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userNotificationCenter");
}

id objc_msgSend_usesMultiDayWeekView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usesMultiDayWeekView");
}

id objc_msgSend_usesRoundedRectInsteadOfCircle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usesRoundedRectInsteadOfCircle");
}

id objc_msgSend_usesSmallTextForIsCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usesSmallTextForIsCompact:");
}

id objc_msgSend_validateInterfaceOrientationWithFutureOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateInterfaceOrientationWithFutureOrientation:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForSize:");
}

id objc_msgSend_valueWithCGRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGRect:");
}

id objc_msgSend_valueWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithSize:");
}

id objc_msgSend_verticalEventPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalEventPadding:");
}

id objc_msgSend_verticalScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalScrollView");
}

id objc_msgSend_verticalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalSizeClass");
}

id objc_msgSend_verticalSpaceBetweenOccurrences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalSpaceBetweenOccurrences");
}

id objc_msgSend_verticallyCompressedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticallyCompressedState");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewController");
}

id objc_msgSend_viewControllerForContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerForContact:");
}

id objc_msgSend_viewControllerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerForKey:");
}

id objc_msgSend_viewControllerForSidebarState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerForSidebarState:");
}

id objc_msgSend_viewControllerToShowFrom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerToShowFrom");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_viewDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewDidAppear:");
}

id objc_msgSend_viewDidLayoutSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewDidLayoutSubviews");
}

id objc_msgSend_viewInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewInterfaceOrientation");
}

id objc_msgSend_viewIsVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewIsVisible");
}

id objc_msgSend_viewSwitcher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewSwitcher");
}

id objc_msgSend_viewSwitcherLayoutHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewSwitcherLayoutHandler");
}

id objc_msgSend_viewSwitcherSwitchedToViewWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewSwitcherSwitchedToViewWithDate:");
}

id objc_msgSend_viewWidthForSizing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWidthForSizing");
}

id objc_msgSend_viewWillAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillAppear:");
}

id objc_msgSend_viewWillLayoutSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillLayoutSubviews");
}

id objc_msgSend_viewWillTransitionToSize_withTransitionCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillTransitionToSize:withTransitionCoordinator:");
}

id objc_msgSend_virtualConference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "virtualConference");
}

id objc_msgSend_visible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visible");
}

id objc_msgSend_visibleCalendars(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCalendars");
}

id objc_msgSend_visibleCalendarsForAllIdentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCalendarsForAllIdentities");
}

id objc_msgSend_visibleCellBadgeColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCellBadgeColors");
}

id objc_msgSend_visibleCellBadgeLocales(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCellBadgeLocales");
}

id objc_msgSend_visibleCellDayTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCellDayTypes");
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCells");
}

id objc_msgSend_visibleDaySummaryViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleDaySummaryViews");
}

id objc_msgSend_visibleGroups(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleGroups");
}

id objc_msgSend_visibleRangeForOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleRangeForOffset:");
}

id objc_msgSend_visibleViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleViewController");
}

id objc_msgSend_visibleWeeks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleWeeks");
}

id objc_msgSend_wantsCommentPromptWhenDeclining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantsCommentPromptWhenDeclining");
}

id objc_msgSend_wantsManagement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantsManagement");
}

id objc_msgSend_wantsScrollingMessagesOnEveryFrameFromListViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wantsScrollingMessagesOnEveryFrameFromListViewController:");
}

id objc_msgSend_wasAllowedToChangeDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasAllowedToChangeDate");
}

id objc_msgSend_week(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "week");
}

id objc_msgSend_weekAllDayBaselineForLargeFormatWeekView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayBaselineForLargeFormatWeekView");
}

id objc_msgSend_weekAllDayBaselineForSmallFormatWeekView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayBaselineForSmallFormatWeekView");
}

id objc_msgSend_weekAllDayLabelFontCompact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayLabelFontCompact");
}

id objc_msgSend_weekAllDayLabelFontRegular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayLabelFontRegular");
}

id objc_msgSend_weekAllDayOccurrenceHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayOccurrenceHeight");
}

id objc_msgSend_weekAllDayOccurrenceHeightSmallText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayOccurrenceHeightSmallText");
}

id objc_msgSend_weekAllDayTodayLabelFontCompact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayTodayLabelFontCompact");
}

id objc_msgSend_weekAllDayTodayLabelFontRegular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayTodayLabelFontRegular");
}

id objc_msgSend_weekAllDayView_didCreateOccurrenceViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayView:didCreateOccurrenceViews:");
}

id objc_msgSend_weekAllDayView_didFinishScrollingToOccurrence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayView:didFinishScrollingToOccurrence:");
}

id objc_msgSend_weekAllDayView_didSelectEvent_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayView:didSelectEvent:userInitiated:");
}

id objc_msgSend_weekAllDayViewDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewDidScroll:");
}

id objc_msgSend_weekAllDayViewEmptySpaceClick_onDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewEmptySpaceClick:onDay:");
}

id objc_msgSend_weekAllDayViewForTimeframeAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewForTimeframeAfter:");
}

id objc_msgSend_weekAllDayViewForTimeframeBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewForTimeframeBefore:");
}

id objc_msgSend_weekAllDayViewShouldAnnotateAppEntities_onDayStarting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewShouldAnnotateAppEntities:onDayStarting:");
}

id objc_msgSend_weekAllDayViewStartDrag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekAllDayViewStartDrag:");
}

id objc_msgSend_weekDayInitialsDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekDayInitialsDay");
}

id objc_msgSend_weekDayInitialsMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekDayInitialsMonth");
}

id objc_msgSend_weekDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekDelegate");
}

id objc_msgSend_weekGroup_didReceiveTapForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroup:didReceiveTapForDate:");
}

id objc_msgSend_weekGroup_didSelectEvent_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroup:didSelectEvent:userInitiated:");
}

id objc_msgSend_weekGroup_didSelectEvents_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroup:didSelectEvents:userInitiated:");
}

id objc_msgSend_weekGroupAllDaySectionDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupAllDaySectionDidScroll:");
}

id objc_msgSend_weekGroupDidBeginDragging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupDidBeginDragging:");
}

id objc_msgSend_weekGroupDidEndDecelerating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupDidEndDecelerating:");
}

id objc_msgSend_weekGroupDidEndDragging_willDecelerate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupDidEndDragging:willDecelerate:");
}

id objc_msgSend_weekGroupDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupDidScroll:");
}

id objc_msgSend_weekGroupForWeekAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupForWeekAfter:");
}

id objc_msgSend_weekGroupForWeekBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupForWeekBefore:");
}

id objc_msgSend_weekGroupViewDidLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupViewDidLayout:");
}

id objc_msgSend_weekGroupViewFirstVisibleSecondChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupViewFirstVisibleSecondChanged:");
}

id objc_msgSend_weekGroupViewOccurrenceLayoutDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupViewOccurrenceLayoutDidChange:");
}

id objc_msgSend_weekGroupViewShouldAnnotateAppEntities_onDayStarting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekGroupViewShouldAnnotateAppEntities:onDayStarting:");
}

id objc_msgSend_weekNumberColorForThisWeek_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekNumberColorForThisWeek:");
}

id objc_msgSend_weekNumberDistanceFromGrayLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekNumberDistanceFromGrayLine");
}

id objc_msgSend_weekNumberFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekNumberFont");
}

id objc_msgSend_weekOfMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekOfMonth");
}

id objc_msgSend_weekOfYear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekOfYear");
}

id objc_msgSend_weekScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekScrollView");
}

id objc_msgSend_weekScroller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekScroller");
}

id objc_msgSend_weekSeparatorColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekSeparatorColor");
}

id objc_msgSend_weekStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekStartDate");
}

id objc_msgSend_weekView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekView");
}

id objc_msgSend_weekView_allEventsForStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekView:allEventsForStartDate:endDate:");
}

id objc_msgSend_weekView_didSelectEvent_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekView:didSelectEvent:userInitiated:");
}

id objc_msgSend_weekView_didSelectEvents_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekView:didSelectEvents:userInitiated:");
}

id objc_msgSend_weekView_receivedTapInAllDayAreaOnDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekView:receivedTapInAllDayAreaOnDate:");
}

id objc_msgSend_weekViewAllDaySectionDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewAllDaySectionDidScroll:");
}

id objc_msgSend_weekViewClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewClass");
}

id objc_msgSend_weekViewController_didEditEvent_creationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewController:didEditEvent:creationMethod:");
}

id objc_msgSend_weekViewDidBeginDragging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewDidBeginDragging:");
}

id objc_msgSend_weekViewDidEndDecelerating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewDidEndDecelerating:");
}

id objc_msgSend_weekViewDidEndDragging_willDecelerate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewDidEndDragging:willDecelerate:");
}

id objc_msgSend_weekViewDidLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewDidLayout:");
}

id objc_msgSend_weekViewDidScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewDidScroll:");
}

id objc_msgSend_weekViewFirstVisibleSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewFirstVisibleSecond");
}

id objc_msgSend_weekViewFirstVisibleSecondChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewFirstVisibleSecondChanged:");
}

id objc_msgSend_weekViewForWeekAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewForWeekAfter:");
}

id objc_msgSend_weekViewForWeekBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewForWeekBefore:");
}

id objc_msgSend_weekViewHourScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewHourScale");
}

id objc_msgSend_weekViewOccurrenceLayoutDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewOccurrenceLayoutDidChange:");
}

id objc_msgSend_weekViewShouldAnnotateAppEntities_onDayStarting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewShouldAnnotateAppEntities:onDayStarting:");
}

id objc_msgSend_weekViewStartsOnToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViewStartsOnToday");
}

id objc_msgSend_weekViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekViews");
}

id objc_msgSend_weekWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekWidth");
}

id objc_msgSend_weekWidthForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekWidthForOrientation:");
}

id objc_msgSend_weekday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekday");
}

id objc_msgSend_weekdayAbbreviations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekdayAbbreviations");
}

id objc_msgSend_weekdayHeaderFillsHalfWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekdayHeaderFillsHalfWidth");
}

id objc_msgSend_weekdayHeaderMovedBeyondLeftEdge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekdayHeaderMovedBeyondLeftEdge");
}

id objc_msgSend_weekdayHeaderVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekdayHeaderVisible");
}

id objc_msgSend_weekendColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekendColor");
}

id objc_msgSend_weekendIndices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weekendIndices");
}

id objc_msgSend_weeksInMonth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weeksInMonth");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "width");
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthAnchor");
}

id objc_msgSend_widthDrawingTime_textRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthDrawingTime:textRect:");
}

id objc_msgSend_widthForOrientation_inViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthForOrientation:inViewHierarchy:");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_willCommitPreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willCommitPreview");
}

id objc_msgSend_willEnterForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willEnterForeground");
}

id objc_msgSend_willMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willMoveToParentViewController:");
}

id objc_msgSend_willPresentDialogOnSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willPresentDialogOnSave");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene");
}

id objc_msgSend_windowScene_performActionForShortcutItem_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene:performActionForShortcutItem:completionHandler:");
}

id objc_msgSend_windowSpaceForOrientation_withViewInViewHierarchy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowSpaceForOrientation:withViewInViewHierarchy:");
}

id objc_msgSend_windows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windows");
}

id objc_msgSend_xSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xSpacing");
}

id objc_msgSend_yCenterForDayNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yCenterForDayNumbers");
}

id objc_msgSend_yInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yInset");
}

id objc_msgSend_yPositionPerhapsMatchingAllDayOccurrence_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yPositionPerhapsMatchingAllDayOccurrence:atPoint:");
}

id objc_msgSend_ySpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ySpacing");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "year");
}

id objc_msgSend_yearNumberFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yearNumberFont");
}

id objc_msgSend_yearNumberKerning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "yearNumberKerning");
}
