uint64_t sub_100003410()
{
  uint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  sub_100003474(v2, qword_10008AA48);
  sub_1000034E4(v2, (uint64_t)qword_10008AA48);
  v0 = type metadata accessor for AvailabilityQueue(0);
  return sub_100014544(v0, v0);
}

uint64_t sub_100003474(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc(*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64), *(_DWORD *)(*(_QWORD *)(a1 - 8) + 80));
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t sub_1000034E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

uint64_t type metadata accessor for AvailabilityQueue(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008AB80;
  if (!qword_10008AB80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AvailabilityQueue);
  return v2;
}

uint64_t sub_100003588()
{
  uint64_t v0;

  if (qword_10008AA40 != -1)
    ((void (*)(uint64_t *, uint64_t (*)()))swift_once)(&qword_10008AA40, sub_100003410);
  v0 = type metadata accessor for Logger(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008AA48);
}

uint64_t sub_1000035E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  return sub_100003650(a1, a2, a3, a4, a5);
}

uint64_t sub_100003650(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;

  v10 = OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state;
  v6 = type metadata accessor for AvailabilityQueue.State(0);
  swift_storeEnumTagMultiPayload(v5 + v10, v6, 2);
  v11 = OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_pendingTasks;
  v7 = type metadata accessor for DispatchWorkItem(0);
  *(_QWORD *)(v5 + v11) = _allocateUninitializedArray<A>(_:)(0, v7);
  *(_QWORD *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a4;
  *(double *)(v5 + 32) = a5;
  swift_retain();
  v8 = (_QWORD *)(v5 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_availabilityHandler);
  *v8 = a2;
  v8[1] = a3;
  swift_release();
  return v17;
}

uint64_t type metadata accessor for AvailabilityQueue.State(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008ACA0;
  if (!qword_10008ACA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AvailabilityQueue.State);
  return v2;
}

void sub_1000037BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  _BYTE v22[1032];
  const void *v23;
  char *v24;
  uint64_t EnumCaseMultiPayload;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;

  v46 = a1;
  v27 = "Assertion failed";
  v28 = "MailWidgetExtension/AvailabilityQueue.swift";
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v66 = 0;
  v29 = 0;
  v60 = 0;
  v42 = 0;
  v30 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v33 = &v22[-v32];
  v34 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v2);
  v35 = &v22[-v34];
  v36 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v37 = &v22[-v36];
  v38 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v39 = &v22[-v38];
  v40 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v8);
  v41 = &v22[-v40];
  v43 = type metadata accessor for AvailabilityQueue.State(v10);
  v44 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __chkstk_darwin(v42);
  v45 = &v22[-v44];
  v47 = type metadata accessor for Date(v11);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(_QWORD *)(v48 + 64);
  v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = __chkstk_darwin(v46);
  v51 = &v22[-v50];
  v52 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = __chkstk_darwin(v12);
  v53 = &v22[-v52];
  v66 = &v22[-v52];
  v54 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = __chkstk_darwin(v14);
  v55 = &v22[-v54];
  v65 = &v22[-v54];
  v56 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = __chkstk_darwin(v16);
  v57 = &v22[-v56];
  v64 = &v22[-v56];
  v58 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = __chkstk_darwin(v18);
  v59 = &v22[-v58];
  v63 = v20;
  v62 = v1;
  if ((objc_msgSend((id)objc_opt_self(NSThread), "isMainThread") & 1) == 0)
  {
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("enqueue() has to be called from the main thread", 0x2FuLL, 1);
    _assertionFailure(_:_:file:line:flags:)(v27, 16, 2, v21._countAndFlagsBits, v21._object, v28, 43);
    __break(1u);
  }
  v23 = (const void *)(v26 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  v24 = &v61;
  swift_beginAccess(v26 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  sub_100005040(v23, v45);
  swift_endAccess(v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v45, v43);
  __asm { BR              X8 }
}

uint64_t sub_100003B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[6];
  _BYTE v28[48];

  v1 = *(_QWORD *)(v0 + 1176);
  v2 = sub_100003588();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1096) + 16))(v1, v2, *(_QWORD *)(v0 + 1088));
  *(_QWORD *)(v0 + 1016) = Logger.logObject.getter(v3);
  *(_DWORD *)(v0 + 1012) = static os_log_type_t.default.getter();
  *(_QWORD *)(v0 + 1000) = v0 + 1392;
  *(_QWORD *)(v0 + 1392) = 2;
  *(_QWORD *)(v0 + 984) = sub_1000079AC();
  *(_QWORD *)(v0 + 992) = sub_100007A14();
  v4 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)((_QWORD *)(v0 + 1404), *(_QWORD *)(v0 + 1000), &type metadata for UInt32, &type metadata for Int, *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), v4);
  *(_DWORD *)(v0 + 1008) = *(_DWORD *)(v0 + 1404);
  v5 = sub_100008AC0(&qword_10008AB20);
  v6 = _allocateUninitializedArray<A>(_:)(0, v5);
  v7 = *(_DWORD *)(v0 + 1012);
  v8 = v6;
  v9 = *(NSObject **)(v0 + 1016);
  *(_QWORD *)(v0 + 1024) = v8;
  if (os_log_type_enabled(v9, (os_log_type_t)v7))
  {
    v10 = *(_QWORD *)(v0 + 1080);
    *(_QWORD *)(v0 + 904) = static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
    v11 = sub_100008AC0(&qword_10008AB30);
    *(_QWORD *)(v0 + 888) = v11;
    *(_QWORD *)(v0 + 896) = 0;
    v12 = sub_1000076F4(0, v11, v11);
    v13 = *(_QWORD *)(v0 + 896);
    *(_QWORD *)(v0 + 912) = v12;
    v14 = sub_1000076F4(v13, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v15 = *(_QWORD *)(v0 + 904);
    v16 = *(_QWORD *)(v0 + 912);
    *(_QWORD *)(v0 + 920) = v14;
    *(_QWORD *)(v0 + 952) = v0 + 1352;
    *(_QWORD *)(v0 + 1352) = v15;
    *(_QWORD *)(v0 + 960) = v0 + 1344;
    *(_QWORD *)(v0 + 1344) = v16;
    *(_QWORD *)(v0 + 936) = v0 + 1336;
    *(_QWORD *)(v0 + 1336) = v14;
    *(_DWORD *)(v0 + 932) = 0;
    sub_10000774C(0, (_BYTE **)(v0 + 1352));
    sub_10000774C(*(unsigned int *)(v0 + 932), *(_BYTE ***)(v0 + 952));
    *(_QWORD *)(v0 + 1328) = *(_QWORD *)(v0 + 1024);
    *(_QWORD *)(v0 + 944) = v28;
    __chkstk_darwin(v28);
    v17 = *(_QWORD *)(v0 + 952);
    v18 = *(_QWORD *)(v0 + 960);
    *(_QWORD *)(v0 + 968) = v27;
    v27[2] = v17;
    v27[3] = v18;
    v27[4] = v19;
    *(_QWORD *)(v0 + 976) = sub_100008AC0((uint64_t *)&unk_10008B4F0);
    v20 = sub_100008D80();
    Sequence.forEach(_:)(sub_100008D54, *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), v20);
    if (v10)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl((void *)&_mh_execute_header, *(os_log_t *)(v0 + 1016), (os_log_type_t)*(_DWORD *)(v0 + 1012), "State is undefined, adding pending task", *(uint8_t **)(v0 + 904), *(_DWORD *)(v0 + 1008));
      v21 = *(_QWORD *)(v0 + 912);
      *(_QWORD *)(v0 + 880) = 0;
      sub_1000077A4(v21, 0);
      sub_1000077A4(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 880));
      UnsafeMutablePointer.deallocate()();
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    }
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
  }

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1096) + 8))(*(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1088));
  swift_retain();
  v22 = *(_QWORD *)(v0 + 1216);
  v23 = *(_QWORD *)(v0 + 1056);
  *(_QWORD *)(v0 + 864) = v0 + 1384;
  *(_QWORD *)(v0 + 1384) = v22;
  v24 = v23 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_pendingTasks;
  *(_QWORD *)(v0 + 872) = v0 + 1360;
  swift_beginAccess(v24);
  v25 = sub_100008AC0(&qword_10008AB28);
  ((void (*)(_QWORD, uint64_t))Array.append(_:))(*(_QWORD *)(v0 + 864), v25);
  swift_endAccess(*(_QWORD *)(v0 + 872));
  return sub_100005128();
}

void *sub_100005040(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  int EnumCaseMultiPayload;

  v7 = type metadata accessor for AvailabilityQueue.State(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v7);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v3 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 16))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v7, 1);
    }
    else
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  else
  {
    v2 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v7, 0);
  }
  return a2;
}

uint64_t sub_100005128()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;

  v14 = *v0;
  v19 = 0;
  v15 = 0;
  v1 = type metadata accessor for AvailabilityQueue.State(0);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v9 = (char *)&v8 - v8;
  v19 = v0;
  swift_storeEnumTagMultiPayload((char *)&v8 - v8, v2, 3);
  v10 = (char *)v0 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state;
  v11 = &v18;
  swift_beginAccess((char *)v0 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  sub_100008E64(v9, v10);
  swift_endAccess(v11);
  v13 = 7;
  v17 = swift_allocObject(&unk_100081530, 24, 7);
  swift_retain();
  v12 = v0;
  swift_weakInit(v17 + 16);
  swift_release();
  swift_retain();
  v3 = swift_allocObject(&unk_100081558, 32, v13);
  v4 = v14;
  v5 = v3;
  v6 = v15;
  v16 = v5;
  *(_QWORD *)(v5 + 16) = v17;
  *(_QWORD *)(v5 + 24) = v4;
  sub_100005F28(v6, (uint64_t)sub_10000907C, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_10000528C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

uint64_t sub_1000052CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v6 = v3 + *(_QWORD *)(v1 + 64);
  v7 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v5, v6, v7);
}

uint64_t sub_10000533C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_10000528C(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_10000537C()
{
  return 0;
}

uint64_t sub_100005394@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  const void *v3;
  _BYTE v5[24];

  v3 = (const void *)(a1 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  sub_100005040(v3, a2);
  return swift_endAccess(v5);
}

uint64_t sub_1000053EC(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void **v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  void **v59;
  _BYTE **v60;
  uint64_t *v61;
  void **v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint32_t v67;
  int v68;
  NSObject *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE **v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t *v93;
  char *v94;
  __objc2_class_ro *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint32_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t Strong;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  _QWORD v144[2];
  _QWORD v145[2];
  uint64_t v146;
  _QWORD v147[3];
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  char v155;
  uint64_t v156;
  uint32_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;

  v131 = a1;
  v130 = a2;
  v161 = 0;
  v160 = 0;
  v158 = 0;
  v129 = 0;
  v121 = 0;
  v148 = 0;
  v145[0] = 0;
  v145[1] = 0;
  v143 = 0;
  v122 = 0;
  v123 = type metadata accessor for Logger(0);
  v124 = *(_QWORD *)(v123 - 8);
  v125 = (*(_QWORD *)(v124 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v126 = (char *)&v49 - v125;
  v127 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v2);
  v128 = (char *)&v49 - v127;
  v132 = type metadata accessor for AvailabilityQueue.State(v4);
  v133 = (*(_QWORD *)(*(_QWORD *)(v132 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v131);
  v134 = (char *)&v49 - v133;
  v161 = v5 & 1;
  v135 = v6 + 16;
  v160 = v6 + 16;
  v136 = &v159;
  swift_beginAccess(v6 + 16);
  Strong = swift_weakLoadStrong(v135);
  swift_endAccess(v136);
  result = Strong;
  if (Strong)
  {
    v120 = Strong;
    v119 = v120;
    v158 = v120;
    if ((v131 & 1) != 0)
    {
      Date.init()(Strong);
      swift_storeEnumTagMultiPayload(v134, v132, 0);
      v91 = (void *)(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
      v92 = &v150;
      v96 = 33;
      v97 = 0;
      swift_beginAccess(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
      sub_100008E64(v134, v91);
      swift_endAccess(v92);
      v95 = &MailStatusDataSource;
      v93 = (uint64_t *)(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_pendingTasks);
      v94 = &v149;
      v107 = 32;
      swift_beginAccess(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_pendingTasks);
      v101 = *v93;
      swift_bridgeObjectRetain(v101);
      swift_endAccess(v94);
      v148 = v101;
      v8 = (char *)v95[38].base_props + v119;
      v100 = (char *)v147 + 4;
      swift_beginAccess(v8);
      type metadata accessor for DispatchWorkItem(0);
      v98 = sub_10000537C();
      v99 = sub_100008AC0(&qword_10008AB28);
      Array.removeAll(keepingCapacity:)(v98 & 1);
      v9 = v128;
      swift_endAccess(v100);
      v10 = sub_100003588();
      (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v9, v10, v123);
      swift_bridgeObjectRetain(v101);
      v108 = 7;
      v11 = swift_allocObject(&unk_1000817C8, 24, 7);
      v109 = v11;
      *(_QWORD *)(v11 + 16) = v101;
      v117 = Logger.logObject.getter(v11);
      v118 = static os_log_type_t.default.getter();
      v104 = &v146;
      v146 = 12;
      v102 = sub_1000079AC();
      v103 = sub_100007A14();
      v12 = sub_100007A7C();
      UnsignedInteger<>.init<A>(_:)(v147, v104, &type metadata for UInt32, &type metadata for Int, v102, v103, v12);
      v105 = v147[0];
      v106 = 17;
      v13 = swift_allocObject(&unk_1000817F0, 17, v108);
      v14 = v106;
      v15 = v108;
      v111 = v13;
      *(_BYTE *)(v13 + 16) = 0;
      v16 = swift_allocObject(&unk_100081818, v14, v15);
      v17 = v107;
      v18 = v108;
      v112 = v16;
      *(_BYTE *)(v16 + 16) = 8;
      v19 = swift_allocObject(&unk_100081840, v17, v18);
      v20 = v107;
      v21 = v108;
      v22 = v19;
      v23 = v109;
      v110 = v22;
      *(_QWORD *)(v22 + 16) = sub_10000A1FC;
      *(_QWORD *)(v22 + 24) = v23;
      v24 = swift_allocObject(&unk_100081868, v20, v21);
      v25 = v110;
      v114 = v24;
      *(_QWORD *)(v24 + 16) = sub_10000A290;
      *(_QWORD *)(v24 + 24) = v25;
      v116 = sub_100008AC0(&qword_10008AB20);
      v113 = _allocateUninitializedArray<A>(_:)(3, v116);
      v115 = v26;
      swift_retain();
      v27 = v111;
      v28 = v115;
      *v115 = sub_100008A00;
      v28[1] = v27;
      swift_retain();
      v29 = v112;
      v30 = v115;
      v115[2] = sub_100008A00;
      v30[3] = v29;
      swift_retain();
      v31 = v113;
      v32 = v114;
      v33 = v115;
      v115[4] = sub_10000A2D8;
      v33[5] = v32;
      sub_1000073C4();
      swift_bridgeObjectRelease(v31);
      if (os_log_type_enabled(v117, (os_log_type_t)v118))
      {
        v34 = v121;
        v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
        v82 = sub_100008AC0(&qword_10008AB30);
        v83 = 0;
        v85 = sub_1000076F4(0, v82, v82);
        v86 = sub_1000076F4(v83, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
        v87 = &v142;
        v142 = v84;
        v88 = &v141;
        v141 = v85;
        v89 = &v140;
        v140 = v86;
        sub_10000774C(0, &v142);
        sub_10000774C(1, v87);
        v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v139 = v111;
        sub_100007760(&v138, (uint64_t)v87, (uint64_t)v88, (uint64_t)v89);
        v90 = v34;
        if (v34)
        {
          __break(1u);
        }
        else
        {
          v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
          v139 = v112;
          sub_100007760(&v138, (uint64_t)&v142, (uint64_t)&v141, (uint64_t)&v140);
          v80 = 0;
          v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
          v139 = v114;
          sub_100007760(&v138, (uint64_t)&v142, (uint64_t)&v141, (uint64_t)&v140);
          v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "Availability check succeeded, executing %ld tasks", v84, v105);
          v78 = 0;
          sub_1000077A4(v85, 0);
          sub_1000077A4(v86, v78);
          UnsafeMutablePointer.deallocate()();
          swift_release();
          swift_release();
          swift_release();
          v81 = v79;
        }
      }
      else
      {
        v35 = v121;
        swift_release();
        swift_release();
        swift_release();
        v81 = v35;
      }
      v76 = v81;

      (*(void (**)(char *, uint64_t))(v124 + 8))(v128, v123);
      swift_bridgeObjectRetain(v101);
      v144[1] = v101;
      v36 = sub_10000A3A0();
      Collection<>.makeIterator()(v145, v99, v36);
      for (i = v76; ; i = v74)
      {
        v74 = i;
        v37 = sub_100008AC0(&qword_10008ADA0);
        IndexingIterator.next()(v144, v37);
        v75 = v144[0];
        if (!v144[0])
          break;
        v73 = v75;
        v72 = v75;
        v143 = v75;
        sub_100008CF0();
        v71 = (id)static OS_dispatch_queue.main.getter();
        OS_dispatch_queue.async(execute:)(v72);

        swift_release();
      }
      sub_10000A004(v145);
      swift_bridgeObjectRelease(v101);
    }
    else
    {
      v38 = v126;
      v39 = sub_100003588();
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 16))(v38, v39, v123);
      v69 = Logger.logObject.getter(v40);
      v68 = static os_log_type_t.default.getter();
      v66 = &v156;
      v156 = 2;
      v64 = sub_1000079AC();
      v65 = sub_100007A14();
      v41 = sub_100007A7C();
      UnsignedInteger<>.init<A>(_:)(&v157, v66, &type metadata for UInt32, &type metadata for Int, v64, v65, v41);
      v67 = v157;
      v42 = sub_100008AC0(&qword_10008AB20);
      v70 = _allocateUninitializedArray<A>(_:)(0, v42);
      if (os_log_type_enabled(v69, (os_log_type_t)v68))
      {
        v43 = v121;
        v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
        v52 = sub_100008AC0(&qword_10008AB30);
        v53 = 0;
        v55 = sub_1000076F4(0, v52, v52);
        v56 = sub_1000076F4(v53, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
        v60 = &v154;
        v154 = v54;
        v61 = &v153;
        v153 = v55;
        v58 = &v152;
        v152 = v56;
        v57 = 0;
        sub_10000774C(0, &v154);
        sub_10000774C(v57, v60);
        v151 = v70;
        v59 = &v49;
        __chkstk_darwin(&v49);
        v44 = v61;
        v45 = &v49 - 6;
        v62 = &v49 - 6;
        v45[2] = v60;
        v45[3] = v44;
        v45[4] = v46;
        v63 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
        v47 = sub_100008D80();
        Sequence.forEach(_:)(sub_100008D54, v62, v63, v47);
        if (v43)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v68, "Availability check failed", v54, v67);
          v51 = 0;
          sub_1000077A4(v55, 0);
          sub_1000077A4(v56, v51);
          UnsafeMutablePointer.deallocate()();
          swift_bridgeObjectRelease(v70);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v70);
      }

      v48 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v126, v123);
      Date.init()(v48);
      swift_storeEnumTagMultiPayload(v134, v132, 1);
      v49 = (void *)(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
      v50 = &v155;
      swift_beginAccess(v119 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
      sub_100008E64(v134, v49);
      swift_endAccess(v50);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100005EF8(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for DispatchWorkItem(0);
  return Array.count.getter(a1, v1);
}

uint64_t sub_100005F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void (**v5)(uint64_t (*)(char));
  uint64_t v8;
  void (*v9)(uint64_t (*)(char));
  _QWORD *v11;
  uint64_t v12;
  _BYTE v13[24];
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = *v3;
  v17 = a1;
  v15 = a2;
  v16 = a3;
  v14 = v3;
  v5 = (void (**)(uint64_t (*)(char)))((char *)v3
                                                          + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_availabilityHandler);
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_availabilityHandler);
  v9 = *v5;
  swift_retain();
  swift_endAccess(v13);
  v12 = swift_allocObject(&unk_100081530, 24, 7);
  swift_retain();
  swift_weakInit(v12 + 16);
  swift_release();
  swift_retain();
  swift_retain();
  v11 = (_QWORD *)swift_allocObject(&unk_100081580, 56, 7);
  v11[2] = v12;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = v8;
  v9(sub_1000090D0);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000060A4(unsigned int a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t result;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  _BYTE **v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint32_t v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  void *v81;
  void (*v82)(char *, uint64_t);
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t *v92;
  _BYTE **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint32_t v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t *v113;
  _BYTE **v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint32_t v121;
  int v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t Strong;
  const char *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  void (*v148)(uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint32_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  void **aBlock;
  int v172;
  int v173;
  uint64_t (*v174)(uint64_t);
  void *v175;
  uint64_t (*v176)();
  _QWORD *v177;
  uint64_t v178;
  uint32_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  uint32_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;

  v152 = a1;
  v151 = a2;
  v148 = a3;
  v149 = a4;
  v150 = a5;
  v130 = "Assertion failed";
  v131 = "MailWidgetExtension/AvailabilityQueue.swift";
  v192 = 0;
  v191 = 0;
  v189 = 0;
  v190 = 0;
  v188 = 0;
  v186 = 0;
  v132 = 0;
  v141 = 0;
  v133 = type metadata accessor for DispatchWorkItemFlags(0);
  v134 = *(_QWORD *)(v133 - 8);
  v135 = (*(_QWORD *)(v134 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v136 = (char *)&v61 - v135;
  v137 = type metadata accessor for DispatchQoS(v5);
  v138 = *(_QWORD *)(v137 - 8);
  v139 = (*(_QWORD *)(v138 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v141);
  v140 = (char *)&v61 - v139;
  v142 = type metadata accessor for DispatchTime(v6);
  v143 = *(_QWORD *)(v142 - 8);
  v144 = (*(_QWORD *)(v143 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v141);
  v145 = (char *)&v61 - v144;
  v146 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v7);
  v147 = (char *)&v61 - v146;
  v153 = type metadata accessor for Logger(v9);
  v154 = *(_QWORD *)(v153 - 8);
  v155 = (*(_QWORD *)(v154 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v152);
  v156 = (char *)&v61 - v155;
  v157 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = __chkstk_darwin(v10);
  v158 = (char *)&v61 - v157;
  v159 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = __chkstk_darwin(v12);
  v160 = (char *)&v61 - v159;
  v192 = v14 & 1;
  v191 = v15 + 16;
  v189 = v16;
  v190 = v17;
  v188 = v18;
  if ((objc_msgSend((id)objc_opt_self(NSThread), "isMainThread") & 1) == 0)
  {
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("availabilityHandler has to complete on the main thread", 0x36uLL, 1);
    v59 = 101;
    v60 = 0;
    _assertionFailure(_:_:file:line:flags:)(v130, 16, 2, v19._countAndFlagsBits, v19._object, v131, 43);
    __break(1u);
  }
  v127 = v151 + 16;
  v128 = &v187;
  swift_beginAccess(v151 + 16);
  Strong = swift_weakLoadStrong(v127);
  swift_endAccess(v128);
  result = Strong;
  if (Strong)
  {
    v126 = Strong;
    v125 = v126;
    v186 = v126;
    if ((v152 & 1) != 0)
    {
      v21 = v160;
      v22 = sub_100003588();
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v21, v22, v153);
      v123 = Logger.logObject.getter(v23);
      v122 = static os_log_type_t.info.getter();
      v120 = &v165;
      v165 = 2;
      v118 = sub_1000079AC();
      v119 = sub_100007A14();
      v24 = sub_100007A7C();
      UnsignedInteger<>.init<A>(_:)(&v166, v120, &type metadata for UInt32, &type metadata for Int, v118, v119, v24);
      v121 = v166;
      v25 = sub_100008AC0(&qword_10008AB20);
      v124 = _allocateUninitializedArray<A>(_:)(0, v25);
      if (os_log_type_enabled(v123, (os_log_type_t)v122))
      {
        v26 = v132;
        v108 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
        v106 = sub_100008AC0(&qword_10008AB30);
        v107 = 0;
        v109 = sub_1000076F4(0, v106, v106);
        v110 = sub_1000076F4(v107, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
        v114 = &v164;
        v164 = v108;
        v115 = &v163;
        v163 = v109;
        v112 = &v162;
        v162 = v110;
        v111 = 0;
        sub_10000774C(0, &v164);
        sub_10000774C(v111, v114);
        v161 = v124;
        v113 = &v61;
        __chkstk_darwin(&v61);
        v27 = v115;
        v28 = &v61 - 6;
        v116 = &v61 - 6;
        v28[2] = (uint64_t)v114;
        v28[3] = (uint64_t)v27;
        v28[4] = v29;
        v117 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
        v30 = sub_100008D80();
        Sequence.forEach(_:)(sub_100008D54, v116, v117, v30);
        if (v26)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v122, "Data is accessible", v108, v121);
          v105 = 0;
          sub_1000077A4(v109, 0);
          sub_1000077A4(v110, v105);
          UnsafeMutablePointer.deallocate()();
          swift_bridgeObjectRelease(v124);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v124);
      }
      v31 = v149;

      (*(void (**)(char *, uint64_t))(v154 + 8))(v160, v153);
      swift_retain(v31);
      v148(1);
      swift_release(v149);
      return swift_release(v125);
    }
    v32 = *(_QWORD *)(v125 + 16);
    v104 = v32 - 1;
    if (!__OFSUB__(v32, 1))
    {
      if (v150 >= v104)
      {
        v48 = v156;
        v49 = sub_100003588();
        v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v48, v49, v153);
        v79 = Logger.logObject.getter(v50);
        v78 = static os_log_type_t.error.getter();
        v76 = &v184;
        v184 = 2;
        v74 = sub_1000079AC();
        v75 = sub_100007A14();
        v51 = sub_100007A7C();
        UnsignedInteger<>.init<A>(_:)(&v185, v76, &type metadata for UInt32, &type metadata for Int, v74, v75, v51);
        v77 = v185;
        v52 = sub_100008AC0(&qword_10008AB20);
        v80 = _allocateUninitializedArray<A>(_:)(0, v52);
        if (os_log_type_enabled(v79, (os_log_type_t)v78))
        {
          v53 = v132;
          v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
          v62 = sub_100008AC0(&qword_10008AB30);
          v63 = 0;
          v65 = sub_1000076F4(0, v62, v62);
          v66 = sub_1000076F4(v63, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
          v70 = &v183;
          v183 = v64;
          v71 = &v182;
          v182 = v65;
          v68 = &v181;
          v181 = v66;
          v67 = 0;
          sub_10000774C(0, &v183);
          sub_10000774C(v67, v70);
          v180 = v80;
          v69 = &v61;
          __chkstk_darwin(&v61);
          v54 = v71;
          v55 = &v61 - 6;
          v72 = &v61 - 6;
          v55[2] = (uint64_t)v70;
          v55[3] = (uint64_t)v54;
          v55[4] = v56;
          v73 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
          v57 = sub_100008D80();
          Sequence.forEach(_:)(sub_100008D54, v72, v73, v57);
          if (v53)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v78, "Data is not accessible, retry count exceeded", v64, v77);
            v61 = 0;
            sub_1000077A4(v65, 0);
            sub_1000077A4(v66, v61);
            UnsafeMutablePointer.deallocate()();
            swift_bridgeObjectRelease(v80);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v80);
        }
        v58 = v149;

        (*(void (**)(char *, uint64_t))(v154 + 8))(v156, v153);
        swift_retain(v58);
        v148(0);
        swift_release(v149);
      }
      else
      {
        v34 = v158;
        v35 = sub_100003588();
        v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v34, v35, v153);
        v102 = Logger.logObject.getter(v36);
        v101 = static os_log_type_t.error.getter();
        v99 = &v178;
        v178 = 2;
        v97 = sub_1000079AC();
        v98 = sub_100007A14();
        v37 = sub_100007A7C();
        UnsignedInteger<>.init<A>(_:)(&v179, v99, &type metadata for UInt32, &type metadata for Int, v97, v98, v37);
        v100 = v179;
        v38 = sub_100008AC0(&qword_10008AB20);
        v103 = _allocateUninitializedArray<A>(_:)(0, v38);
        if (os_log_type_enabled(v102, (os_log_type_t)v101))
        {
          v39 = v132;
          v87 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
          v85 = sub_100008AC0(&qword_10008AB30);
          v86 = 0;
          v88 = sub_1000076F4(0, v85, v85);
          v89 = sub_1000076F4(v86, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
          v93 = &v170;
          v170 = v87;
          v94 = &v169;
          v169 = v88;
          v91 = &v168;
          v168 = v89;
          v90 = 0;
          sub_10000774C(0, &v170);
          sub_10000774C(v90, v93);
          v167 = v103;
          v92 = &v61;
          __chkstk_darwin(&v61);
          v40 = v94;
          v41 = &v61 - 6;
          v95 = &v61 - 6;
          v41[2] = (uint64_t)v93;
          v41[3] = (uint64_t)v40;
          v41[4] = v42;
          v96 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
          v43 = sub_100008D80();
          Sequence.forEach(_:)(sub_100008D54, v95, v96, v43);
          if (v39)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v101, "Data is not accessible, retry…", v87, v100);
            v84 = 0;
            sub_1000077A4(v88, 0);
            sub_1000077A4(v89, v84);
            UnsafeMutablePointer.deallocate()();
            swift_bridgeObjectRelease(v103);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v103);
        }

        (*(void (**)(char *, uint64_t))(v154 + 8))(v158, v153);
        sub_100008CF0();
        v83 = (id)static OS_dispatch_queue.main.getter();
        static DispatchTime.now()();
        + infix(_:_:)(v145, *(double *)(v125 + 32));
        v82 = *(void (**)(char *, uint64_t))(v143 + 8);
        v82(v145, v142);
        swift_retain(v125);
        swift_retain(v149);
        v44 = (_QWORD *)swift_allocObject(&unk_100081778, 48, 7);
        v45 = v150;
        v46 = v148;
        v47 = v149;
        v44[2] = v125;
        v44[3] = v45;
        v44[4] = v46;
        v44[5] = v47;
        v176 = sub_10000A070;
        v177 = v44;
        aBlock = _NSConcreteStackBlock;
        v172 = 1107296256;
        v173 = 0;
        v174 = sub_10000A4EC;
        v175 = &unk_100081790;
        v81 = _Block_copy(&aBlock);
        swift_release(v177);
        sub_100006E48();
        sub_100006E5C();
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v147, v140, v136, v81);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v136, v133);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v140, v137);
        _Block_release(v81);
        v82(v147, v142);

      }
      return swift_release(v125);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100006DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!__OFADD__(a2, 1))
    return sub_100005F28(a2 + 1, a3, a4);
  __break(1u);
  return result;
}

uint64_t sub_100006E48()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_100006E5C()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10004FD04(0);
  type metadata accessor for DispatchWorkItemFlags(0);
  v4 = v2;
  sub_10000A0E0();
  v3 = sub_100008AC0(&qword_10008AD80);
  v0 = sub_10000A150();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v4, v3, v0);
}

uint64_t sub_100006EF0()
{
  uint64_t v0;
  uint64_t v2;

  sub_100008F68(v0 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_state);
  sub_10000A004((_QWORD *)(v0 + OBJC_IVAR____TtC19MailWidgetExtension17AvailabilityQueue_pendingTasks));
  swift_release();
  return v2;
}

uint64_t sub_100006F4C()
{
  sub_100006EF0();
  return swift_deallocClassInstance();
}

void sub_100006F8C()
{
  uint64_t v0;
  const void *v1;
  _QWORD v2[22];
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v12;
  const void *v13;
  char *v14;

  v13 = 0;
  v12 = 0;
  v14 = 0;
  v2[21] = 0;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0 = __chkstk_darwin(0);
  v6 = (char *)v2 - v5;
  v14 = (char *)v2 - v5;
  v9 = type metadata accessor for AvailabilityQueue.State(v0);
  v8 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (const void *)__chkstk_darwin(v7);
  v10 = (char *)v2 - v8;
  v13 = v1;
  sub_100005040(v1, (char *)v2 - v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v9);
  __asm { BR              X8 }
}

uint64_t sub_100007094()
{
  uint64_t v0;

  *(Swift::String *)(v0 - 168) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Undefined", 9uLL, 1);
  return *(_QWORD *)(v0 - 168);
}

void sub_100007390()
{
  sub_100006F8C();
}

uint64_t sub_1000073A4(uint64_t a1)
{
  return sub_100069324(a1, (uint64_t)&off_100081758);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1000073C4()
{
  type metadata accessor for Array(0);
  sub_100007AE4();
}

uint64_t variable initialization expression of MFGetAccountsIntentResponse.code()
{
  return 0;
}

uint64_t sub_10000740C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;

  v3 = sub_100009EBC();
  v1 = sub_100009F2C();
  return _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(a1, v3, v1);
}

uint64_t sub_100007444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;

  v7 = sub_100009EBC();
  v3 = sub_100009F2C();
  return static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, v7, v3);
}

uint64_t sub_10000748C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;

  v7 = sub_100009EBC();
  v3 = sub_100009F2C();
  return static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, a3, v7, v3) & 1;
}

uint64_t sub_1000074D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;

  v5 = sub_100009EBC();
  v2 = sub_100009F2C();
  return static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)(a1, a2, v5, v2);
}

uint64_t sub_100007520@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = nullsub_1(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100007560@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10000758C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;

  v3 = sub_100009F94();
  v1 = sub_100009EBC();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v1, &protocol witness table for Int);
}

uint64_t sub_1000075E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_100009EBC();
  return _SwiftNewtypeWrapper<>.hashValue.getter(a1, a2, v2, &protocol witness table for Int);
}

uint64_t sub_100007624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_100009EBC();
  return _SwiftNewtypeWrapper<>.hash(into:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_100007668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_100009EBC();
  return _SwiftNewtypeWrapper<>._rawHashValue(seed:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_1000076AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_100009D44();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for Int) & 1;
}

uint64_t sub_1000076F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    return static UnsafeMutablePointer.allocate(capacity:)(a1, a3);
  else
    return 0;
}

uint64_t sub_10000774C(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100007760(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_1000077A4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    UnsafeMutablePointer.deinitialize(count:)(a2);
    UnsafeMutablePointer.deallocate()();
  }
}

uint64_t sub_100007810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v8 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void (*)(void))__chkstk_darwin();
  v11 = (char *)&v7 - v8;
  v4();
  v13 = dispatch thunk of CustomStringConvertible.description.getter(v12, v9);
  v14 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t sub_1000078B8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000078F4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for Date(0);
  v1 = sub_10000793C();
  return sub_100007810(v5, v3, v4, v1);
}

unint64_t sub_10000793C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = qword_10008AB00;
  if (!qword_10008AB00)
  {
    v0 = type metadata accessor for Date(255);
    v1 = ((uint64_t (*)(void *, uint64_t))swift_getWitnessTable)(&protocol conformance descriptor for Date, v0);
    atomic_store(v1, (unint64_t *)&qword_10008AB00);
    return v1;
  }
  return v3;
}

unint64_t sub_1000079AC()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B4C0;
  if (!qword_10008B4C0)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B4C0);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100007A14()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008AB10;
  if (!qword_10008AB10)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AB10);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100007A7C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B4D0;
  if (!qword_10008B4D0)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B4D0);
    return WitnessTable;
  }
  return v2;
}

void sub_100007AE4()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t sub_100007AF0(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *sub_100007B10(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a4();
  v10 = v5;
  v6 = sub_100007B8C(v4, v5, a3);
  v11 = *a1;
  v7 = *a1 + 8;
  v13 = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11, v7);
  swift_bridgeObjectRelease(v10);
  result = a1;
  *a1 = v11 + 8;
  return result;
}

uint64_t sub_100007B8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v14 = sub_100007CFC((uint64_t)&v17, 0, 0, 1, a1, a2);
  v15 = v3;
  v16 = v4;
  v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType(v14);
    v12[0] = v14;
    v6 = *a3;
    if (*a3)
    {
      sub_10000A478((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    sub_10000A410(v12);
  }
  else
  {
    v13[3] = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v7 = *a3;
    if (*a3)
    {
      sub_10000A478((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain(a2);
    sub_10000A410(v13);
  }
  return v11;
}

uint64_t sub_100007CFC(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD v22[4];
  char v23;
  char v24;
  uint64_t v25;

  v17 = (_QWORD *)result;
  v25 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3)
          __break(1u);
        v16 = a3 - (_QWORD)a2;
      }
      else
      {
        v16 = 0;
      }
      v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v22[0] = a5;
          v22[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          sub_100008070(v22, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter(0, v15, a2, a3);
          *v17 = a2;
          v11 = 0;
          v12 = v15;
          v13 = 1;
          v14 = 0;
LABEL_26:
          v22[2] = v11;
          v22[3] = v12;
          v23 = v13 & 1;
          v24 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    v6 = sub_1000080AC(a5, a6);
    *v17 = v7;
    v11 = v6;
    v12 = v8;
    v13 = 0;
    v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  result = _StringObject.sharedUTF8.getter(a5, a6);
  if (!result)
    goto LABEL_29;
  v10 = result;
LABEL_21:
  *v17 = v10;
  if (a6 < 0)
  {
    v9 = 0;
LABEL_25:
    v11 = (_QWORD *)v9;
    v12 = a5 & 0xFFFFFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
    v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100008070(const void *a1, size_t a2, void *__dst)
{
  memcpy(__dst, a1, a2);
  return __dst;
}

_QWORD *sub_1000080AC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = sub_10000815C(a1, a2);
  sub_1000082D4();
  v4 = v6[2];
  sub_100008348(v4);
  sub_1000083C8(v4, 0);
  sub_100007AE4();
  swift_retain();
  v5 = sub_100008434((uint64_t)v6);
  swift_bridgeObjectRelease(v6);
  result = (_QWORD *)v5;
  if (!__OFSUB__(v5, 1))
    return v6;
  __break(1u);
  return result;
}

_QWORD *sub_10000815C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD v10[3];

  v10[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
    return sub_1000085B0();
  v5 = sub_100008448(v7, 0);
  swift_retain();
  swift_release();
  result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v7, a1, a2);
  v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(0xE000000000000000);
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    result = (_QWORD *)sub_1000090EC((uint64_t)v10);
    if (v6 == (void *)v7)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000082D4()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v4;
  if ((result & 1) == 0)
  {
    v2 = sub_100008434(*v3);
    result = sub_1000085DC(0, v2 + 1, 1, *v3);
    *v3 = result;
  }
  return result;
}

uint64_t sub_100008348(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 < result + 1)
  {
    result = sub_1000085DC(*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *v2 = result;
  }
  return result;
}

uint64_t sub_1000083C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v5;
  swift_release(v4);
  v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release(v6);
}

uint64_t sub_100008434(uint64_t a1)
{
  return sub_1000088D8(a1);
}

_QWORD *sub_100008448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a1)
    v7 = a1;
  else
    v7 = a2;
  if (v7)
  {
    v2 = sub_100008AC0(&qword_10008ADA8);
    v6 = (_QWORD *)swift_allocObject(v2, v7 + 32, 7);
    if ((sub_10000A4BC() & 1) != 0)
    {
      v4 = (size_t)v6 + sub_10000A4C8(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (_QWORD)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    swift_retain();
    return &_swiftEmptyArrayStorage;
  }
}

void *sub_1000085B0()
{
  swift_retain();
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000085DC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v16;

  swift_retain();
  result = swift_retain();
  v16 = *(_QWORD *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2)
        v11 = a2;
      else
        v11 = 2 * v16;
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 24) >> 1;
    }
  }
  else
  {
    v11 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v11 < v10)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v11;
  if (v9)
  {
    v5 = sub_100008AC0(&qword_10008ADA8);
    v8 = (_QWORD *)swift_allocObject(v5, v9 + 32, 7);
    if ((sub_10000A4BC() & 1) != 0)
    {
      v6 = (size_t)v8 + sub_10000A4C8(v8);
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * (v6 - (_QWORD)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * v9;
    }
    swift_release();
    v7 = (char *)v8;
  }
  else
  {
    swift_retain();
    v7 = (char *)&_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease(a4);
    sub_100008914((char *)(a4 + 32), v10, v7 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease(a4);
    swift_release();
    swift_retain();
    swift_release();
    sub_1000088E0((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease(a4);
  }
  return (uint64_t)v7;
}

uint64_t sub_1000088D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_1000088E0(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *sub_100008914(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result)
    return (char *)memmove(a3, result, a2);
  return result;
}

_BYTE **sub_1000089C4(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_1000089D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

_BYTE **sub_100008A00(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000089C4(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_100008A08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100008A30()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100008A6C()
{
  uint64_t v0;

  return sub_100007AF0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100008A78()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

_QWORD *sub_100008AB4(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_100007B10(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100008AC0(uint64_t *a1)
{
  uint64_t TypeByMangledNameInContext2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

uint64_t sub_100008B2C@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_100005394(v1, a1);
}

uint64_t sub_100008B34()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100008B70()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for AvailabilityQueue.State(0);
  v1 = sub_100008BB8();
  return sub_100007810(v5, v3, v4, v1);
}

unint64_t sub_100008BB8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AB38;
  if (!qword_10008AB38)
  {
    v0 = type metadata accessor for AvailabilityQueue.State(255);
    WitnessTable = swift_getWitnessTable(&unk_100073954, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AB38);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100008C28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100008C50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100008C78()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100008CB4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

unint64_t sub_100008CF0()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008AB40;
  if (!qword_10008AB40)
  {
    v0 = objc_opt_self(OS_dispatch_queue);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008AB40);
    return ObjCClassMetadata;
  }
  return v3;
}

uint64_t sub_100008D54(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return sub_100007760(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_100008D80()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AB50;
  if (!qword_10008AB50)
  {
    v0 = sub_100008DF0((uint64_t *)&unk_10008B4F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AB50);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100008DF0(uint64_t *a1)
{
  uint64_t TypeByMangledNameInContextInMetadataState2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

void *sub_100008E64(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int EnumCaseMultiPayload;

  if (a2 != a1)
  {
    sub_100008F68((uint64_t)a2);
    v5 = type metadata accessor for AvailabilityQueue.State(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v5);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v3 = type metadata accessor for Date(0);
        (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a2, a1);
        swift_storeEnumTagMultiPayload(a2, v5, 1);
      }
      else
      {
        memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
      }
    }
    else
    {
      v2 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v5, 0);
    }
  }
  return a2;
}

uint64_t sub_100008F68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for AvailabilityQueue.State(0);
  if (swift_getEnumCaseMultiPayload(a1, v1) < 2)
  {
    v2 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t sub_100009004()
{
  uint64_t v0;
  uint64_t v2;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v2, 24);
}

uint64_t sub_100009040()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10000907C(char a1)
{
  uint64_t v1;

  return sub_1000053EC(a1 & 1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000908C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v2, 56);
}

uint64_t sub_1000090D0(char a1)
{
  uint64_t v1;

  return sub_1000060A4(a1 & 1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000090EC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100009114()
{
  return type metadata accessor for AvailabilityQueue(0);
}

uint64_t sub_10000912C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t updated;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v1 = type metadata accessor for AvailabilityQueue.State(319);
  updated = v1;
  if (v2 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v1 - 8) + 64;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[5] = (char *)&value witness table for () + 64;
    updated = swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    if (!updated)
      return 0;
  }
  return updated;
}

unint64_t sub_100009224(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v12;
  int v13;

  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  if ((v13 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v13 + 16) & ~(unint64_t)v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(v12 + 64));
      }
    }
    else
    {
      v3 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
    return (unint64_t)a1;
  }
}

uint64_t sub_100009368(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result < 2)
  {
    v3 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
  }
  return result;
}

void *sub_1000093F0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  else
  {
    v3 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_1000094D0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;

  if (a1 != a2)
  {
    sub_100008F68((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = type metadata accessor for Date(0);
        (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      }
    }
    else
    {
      v3 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_1000095CC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  else
  {
    v3 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_1000096AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;

  if (a1 != a2)
  {
    sub_100008F68((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v4 = type metadata accessor for Date(0);
        (*(void (**)(void *, const void *))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      }
    }
    else
    {
      v3 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1000097A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000097C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000097E0(uint64_t a1, uint64_t a2)
{
  return swift_getEnumCaseMultiPayload(a1, a2);
}

uint64_t sub_1000097F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10000981C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v5 = type metadata accessor for Date(319);
  v6 = v5;
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(v5 - 8);
    v7[0] = v2 + 64;
    v7[1] = v2 + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v7);
    return 0;
  }
  return v6;
}

__n128 sub_1000098CC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000098DC(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 16))
      v3 = *(_OWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_100009A08(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)result = (a2 - 1);
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 16) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CGSize(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  v5 = qword_10008AD38;
  if (!qword_10008AD38)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, &unk_100081718);
    v5 = ForeignTypeMetadata;
    if (!v1)
    {
      v2 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10008AD38);
      return v2;
    }
  }
  return v5;
}

uint64_t type metadata accessor for ECMailboxType(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  v5 = qword_10008AD40;
  if (!qword_10008AD40)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, &unk_100081740);
    v5 = ForeignTypeMetadata;
    if (!v1)
    {
      v2 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10008AD40);
      return v2;
    }
  }
  return v5;
}

unint64_t sub_100009D30()
{
  return sub_100009D44();
}

unint64_t sub_100009D44()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD48;
  if (!qword_10008AD48)
  {
    v0 = type metadata accessor for ECMailboxType(255);
    WitnessTable = swift_getWitnessTable(&unk_100073818, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD48);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100009DB4()
{
  return sub_100009DC8();
}

unint64_t sub_100009DC8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD50;
  if (!qword_10008AD50)
  {
    v0 = type metadata accessor for ECMailboxType(255);
    WitnessTable = swift_getWitnessTable(&unk_1000737EC, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD50);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100009E38()
{
  return sub_100009E4C();
}

unint64_t sub_100009E4C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD58;
  if (!qword_10008AD58)
  {
    v0 = type metadata accessor for ECMailboxType(255);
    WitnessTable = swift_getWitnessTable(&unk_100073888, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD58);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100009EBC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD60;
  if (!qword_10008AD60)
  {
    v0 = type metadata accessor for ECMailboxType(255);
    WitnessTable = swift_getWitnessTable(&unk_100073854, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD60);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100009F2C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008AD68;
  if (!qword_10008AD68)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD68);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100009F94()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD70;
  if (!qword_10008AD70)
  {
    v0 = type metadata accessor for ECMailboxType(255);
    WitnessTable = swift_getWitnessTable(&unk_1000738B4, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD70);
    return WitnessTable;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10000A004(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
}

uint64_t sub_10000A02C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v2, 48);
}

uint64_t sub_10000A070()
{
  uint64_t *v0;

  return sub_100006DD0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10000A084(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10000A0C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000A0E0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD78;
  if (!qword_10008AD78)
  {
    v0 = type metadata accessor for DispatchWorkItemFlags(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD78);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10000A150()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD88;
  if (!qword_10008AD88)
  {
    v0 = sub_100008DF0(&qword_10008AD80);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD88);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10000A1C0()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10000A1FC()
{
  uint64_t v0;

  return sub_100005EF8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000A204()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10000A22C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10000A254()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10000A290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10004FE0C(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10000A29C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10000A2D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = sub_10000A338();
  return sub_100029DEC(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

unint64_t sub_10000A338()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008AD90;
  if (!qword_10008AD90)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD90);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_10000A3A0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008AD98;
  if (!qword_10008AD98)
  {
    v0 = sub_100008DF0(&qword_10008AB28);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008AD98);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10000A410(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[3];
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t sub_10000A478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t sub_10000A4BC()
{
  return 1;
}

size_t sub_10000A4C8(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_10000A4EC(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v1 = swift_retain(v4);
  v3(v1);
  return swift_release(v4);
}

void sub_10000A534(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_10000A578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_10000A5D0
                                                                                       + *((int *)qword_10000A648 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_10000A5E0()
{
  uint64_t v1;

  return v1 == 0;
}

void sub_10000A65C(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_10000A6AC()
{
  _QWORD v1[8];

  v1[1] = 0;
  v1[0] = 0;
  return ((uint64_t (*)(_QWORD *, void *, void *))Hasher.combine<A>(_:))(v1, &type metadata for Int, &protocol witness table for Int);
}

uint64_t sub_10000A72C(char a1)
{
  unint64_t v1;
  _BYTE v3[9];

  v3[1] = a1;
  v3[0] = a1;
  v1 = sub_10000A774();
  return _hashValue<A>(for:)(v3, &unk_100081B08, v1);
}

unint64_t sub_10000A774()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B068;
  if (!qword_10008B068)
  {
    WitnessTable = swift_getWitnessTable(&unk_100073A30, &unk_100081B08);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B068);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_10000A7E0(char *a1)
{
  char v1;

  sub_10000A534(*a1);
  return v1 & 1;
}

uint64_t sub_10000A800()
{
  char *v0;

  return sub_10000A72C(*v0);
}

void sub_10000A818(uint64_t a1)
{
  char *v1;

  sub_10000A65C(a1, *v1);
}

Swift::Int sub_10000A830(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t sub_10000A844()
{
  return Error._domain.getter();
}

uint64_t sub_10000A858()
{
  return Error._code.getter();
}

uint64_t sub_10000A86C()
{
  return Error._userInfo.getter();
}

uint64_t sub_10000A880()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_10000A894()
{
  uint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  sub_100003474(v2, qword_10008B050);
  sub_1000034E4(v2, (uint64_t)qword_10008B050);
  v0 = type metadata accessor for DaemonDataSource();
  return sub_100014544(v0, v0);
}

uint64_t type metadata accessor for DaemonDataSource()
{
  return objc_opt_self(_TtC19MailWidgetExtension16DaemonDataSource);
}

uint64_t sub_10000A91C()
{
  uint64_t v0;

  if (qword_10008AA60 != -1)
    swift_once(&qword_10008AA60, sub_10000A894);
  v0 = type metadata accessor for Logger(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008B050);
}

void *sub_10000A97C()
{
  return &unk_100073980;
}

uint64_t sub_10000A988()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  id v7;
  uint64_t ObjectType;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *object;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  void *v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = v0;
  v25 = *(void **)(v0 + OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_daemon);
  v1 = v25;
  v26 = objc_msgSend(v25, "vipManager");

  v2 = objc_opt_self(EMVIPManager);
  v27 = swift_dynamicCastObjCClass(v26, v2);
  if (v27)
  {
    v23 = (void *)v27;
  }
  else
  {
    swift_unknownObjectRelease(v26);
    v23 = 0;
  }
  if (v23)
  {
    v22 = objc_msgSend(v23, "allVIPWaitForResult");
    v18 = sub_10000AC64();
    v19 = sub_10000ACC8();
    v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v18);
    v21 = Set.isEmpty.getter(v20, v18, v19);
    swift_bridgeObjectRelease(v20);

    return (v21 ^ 1) & 1;
  }
  else
  {
    v4 = v24;
    v28 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(35);
    v29 = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unexpected class for VIP manager (", 0x22uLL, 1);
    object = v6._object;
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease(object);
    v13 = *(id *)&v24[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_daemon];
    v7 = v13;
    v14 = objc_msgSend(v13, "vipManager");

    ObjectType = swift_getObjectType(v14);
    sub_100014668(ObjectType);
    swift_unknownObjectRelease(v14);
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
    v15 = v9._object;
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease(v15);
    v17 = v28;
    v16 = v29;
    swift_bridgeObjectRetain(v29);
    sub_1000090EC((uint64_t)&v28);
    v10 = String.init(stringInterpolation:)(v17, v16);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, "MailWidgetExtension/DataSource.swift", 36);
    __break(1u);
  }
  return result;
}

unint64_t sub_10000AC64()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B078;
  if (!qword_10008B078)
  {
    v0 = objc_opt_self(EMVIP);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B078);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_10000ACC8()
{
  unint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B080;
  if (!qword_10008B080)
  {
    v0 = sub_10000AC64();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B080);
    return WitnessTable;
  }
  return v3;
}

id sub_10000AD38(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return sub_10000AD70(a1);
}

id sub_10000AD70(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  char *v13;
  objc_class *ObjectType;
  id v16;
  objc_super v17;
  void *v18;
  id v19;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v18 = a1;
  v2 = v1;
  v3 = v1;
  v4 = v1;
  v5 = v1;
  v6 = v1;
  v7 = v1;
  v19 = v1;
  v8 = a1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_daemon] = a1;

  type metadata accessor for MessagesDataSource();
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_messagesDataSource] = sub_100049438(objc_msgSend(a1, "messageRepository"));

  type metadata accessor for MailboxDataSource();
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_mailboxDataSource] = sub_1000198C4(objc_msgSend(a1, "mailboxRepository"));

  type metadata accessor for MailStatusDataSource();
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_statusDataSource] = sub_10001E8F8(objc_msgSend(a1, "messageRepository"));

  sub_10000AFB4();
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_focusController] = sub_10000B018();

  type metadata accessor for AvailabilityQueue(0);
  v9 = a1;
  v10 = swift_allocObject(&unk_100081958, 24, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_queue] = sub_1000035E8(3, (uint64_t)sub_10000B3F4, v10, 20.0, 1.0);

  v17.receiver = v19;
  v17.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v17, "init");
  v11 = v16;
  v19 = v16;

  return v16;
}

unint64_t sub_10000AFB4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B0A0;
  if (!qword_10008B0A0)
  {
    v0 = objc_opt_self(EMFocusController);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B0A0);
    return ObjCClassMetadata;
  }
  return v3;
}

id sub_10000B018()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1000117B4();
}

uint64_t sub_10000B044(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  void **v41;
  int v42;
  int v43;
  uint64_t (*v44)(uint64_t, char);
  void *v45;
  void (*v46)(char);
  _QWORD *v47;
  uint64_t v48;
  void **aBlock;
  int v50;
  int v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v37 = a1;
  v34 = a2;
  v32 = a3;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v48 = 0;
  v25 = 0;
  v29 = type metadata accessor for DispatchTime(0);
  v26 = *(_QWORD *)(v29 - 8);
  v20 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v27 = (char *)&v19 - v20;
  v21 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v28 = (char *)&v19 - v21;
  v22 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchWorkItemFlags(v5) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v25);
  v23 = (char *)&v19 - v22;
  v57 = v6;
  v58 = v7;
  v56 = v8;
  type metadata accessor for DispatchWorkItem(v9);
  swift_retain();
  v33 = 7;
  v10 = swift_allocObject(&unk_100082618, 32, 7);
  v11 = v34;
  *(_QWORD *)(v10 + 16) = v37;
  *(_QWORD *)(v10 + 24) = v11;
  v54 = sub_100012F1C;
  v55 = v10;
  v35 = _NSConcreteStackBlock;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v50 = 1107296256;
  v51 = 0;
  v52 = sub_10000A4EC;
  v53 = &unk_100082630;
  v24 = _Block_copy(&aBlock);
  sub_100006E5C();
  v40 = DispatchWorkItem.__allocating_init(flags:block:)(v23, v24);
  swift_release();
  v48 = v40;
  sub_100008CF0();
  v31 = (id)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v27, 2.0);
  v30 = *(void (**)(char *, uint64_t))(v26 + 8);
  v30(v27, v29);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v28, v40);
  v30(v28, v29);

  v39 = objc_msgSend(v32, "messageRepository");
  swift_retain();
  swift_retain();
  v12 = swift_allocObject(&unk_100082668, 40, v33);
  v13 = v34;
  v14 = v35;
  v15 = v36;
  v16 = (_QWORD *)v12;
  v17 = v37;
  v16[2] = v40;
  v16[3] = v17;
  v16[4] = v13;
  v46 = sub_100012FC8;
  v47 = v16;
  v41 = v14;
  v42 = v15;
  v43 = 0;
  v44 = sub_10000B6F4;
  v45 = &unk_100082680;
  v38 = _Block_copy(&v41);
  swift_release();
  objc_msgSend(v39, "isDataAccessible:", v38);
  _Block_release(v38);

  return swift_release();
}

uint64_t sub_10000B3B8()
{
  uint64_t v0;
  uint64_t v2;

  return swift_deallocObject(v2, 24);
}

uint64_t sub_10000B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000B044(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10000B3FC(void (*a1)(_QWORD), uint64_t a2)
{
  swift_retain(a2);
  a1(0);
  return swift_release(a2);
}

void sub_10000B45C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void **aBlock;
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v18 = a1;
  v15 = a3;
  v16 = a4;
  v38 = 0;
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v19 = 0;
  v22 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v22 - 8);
  v13 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v21 = (char *)&v13 - v13;
  v25 = type metadata accessor for DispatchQoS(v5);
  v23 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v18);
  v24 = (char *)&v13 - v14;
  v17 = 1;
  v38 = v6 & 1;
  v37 = a2;
  v35 = v7;
  v36 = v8;
  dispatch thunk of DispatchWorkItem.cancel()(v6);
  sub_100008CF0();
  v27 = (id)static OS_dispatch_queue.main.getter();
  swift_retain();
  v9 = swift_allocObject(&unk_1000826B8, 33, 7);
  v10 = v16;
  v11 = v17;
  v12 = v9;
  LOBYTE(v9) = v18;
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(v12 + 24) = v10;
  *(_BYTE *)(v12 + 32) = v9 & v11;
  v33 = sub_100013074;
  v34 = v12;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = 0;
  v31 = sub_10000A4EC;
  v32 = &unk_1000826D0;
  v26 = _Block_copy(&aBlock);
  swift_release();
  sub_100006E48();
  sub_100006E5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v19, v24, v21, v26);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  _Block_release(v26);

}

uint64_t sub_10000B680(void (*a1)(_QWORD), uint64_t a2, char a3)
{
  swift_retain(a2);
  a1(a3 & 1);
  return swift_release(a2);
}

uint64_t sub_10000B6F4(uint64_t a1, char a2)
{
  void (*v4)(_QWORD);
  uint64_t v5;

  v4 = *(void (**)(_QWORD))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v4(a2 & 1);
  return swift_release(v5);
}

uint64_t sub_10000B748(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  char *v45;
  void *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void **aBlock;
  int v56;
  int v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  void (*v60)();
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v31 = a1;
  v36 = a2;
  v40 = a3;
  v41 = a4;
  ObjectType = swift_getObjectType(v4);
  v66 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v54 = 0;
  v29 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchWorkItemFlags(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v45 = (char *)&v27 - v28;
  v32 = *(_QWORD *)(type metadata accessor for Mailbox(v5) - 8);
  v33 = *(_QWORD *)(v32 + 64);
  v30 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v29);
  v38 = (uint64_t)&v27 - v30;
  v66 = v7;
  v35 = 1;
  v65 = v8 & 1;
  v63 = v9;
  v64 = v10;
  v62 = v4;
  type metadata accessor for DispatchWorkItem(v6);
  v34 = 7;
  v48 = swift_allocObject(&unk_100081980, 24, 7);
  v11 = v47;
  swift_unknownObjectWeakInit(v48 + 16);

  swift_retain();
  sub_10000D0CC(v31, v38);
  swift_retain();
  v12 = *(unsigned __int8 *)(v32 + 80);
  v37 = (v12 + 25) & ~v12;
  v39 = (v37 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000819A8, v42 + 8, v34 | v12 | 7);
  v14 = v35;
  v15 = v36;
  v16 = v37;
  v17 = v13;
  v18 = v38;
  v43 = v17;
  *(_QWORD *)(v17 + 16) = v48;
  *(_BYTE *)(v17 + 24) = v15 & v14;
  sub_10000D3B8(v18, v17 + v16);
  v19 = v41;
  v20 = v42;
  v21 = v43;
  v22 = ObjectType;
  v23 = (_QWORD *)(v43 + v39);
  *v23 = v40;
  v23[1] = v19;
  *(_QWORD *)(v21 + v20) = v22;
  v60 = sub_10000D4F4;
  v61 = v21;
  aBlock = _NSConcreteStackBlock;
  v56 = 1107296256;
  v57 = 0;
  v58 = sub_10000A4EC;
  v59 = &unk_1000819C0;
  v46 = _Block_copy(&aBlock);
  sub_100006E5C();
  v24 = DispatchWorkItem.__allocating_init(flags:block:)(v45, v46);
  v25 = v47;
  v52 = v24;
  swift_release();
  swift_release();
  v54 = v52;
  v49 = &v25[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_queue];
  v50 = &v53;
  swift_beginAccess(&v25[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_queue]);
  v51 = *(_QWORD *)v49;
  swift_retain();
  swift_endAccess(v50);
  sub_1000037BC(v52);
  swift_release();
  return swift_release();
}

uint64_t sub_10000BAD0()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v2, 24);
}

void sub_10000BB0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  id v165;
  NSObject *v166;
  uint64_t v167;
  NSObject *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  void **v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[2];
  id v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  void **v183;
  int v184;
  void *v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE **v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint32_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  NSObject *v207;
  int v208;
  _QWORD *v209;
  id v210;
  uint64_t v211;
  void (*v212)(char *, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE **v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  char *v230;
  NSObject *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(char *, uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t *v244;
  unint64_t v245;
  uint32_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  NSObject *v272;
  int v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  char *Strong;
  uint64_t (*v309)(uint64_t, uint64_t, uint64_t);
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  uint64_t (*v314)(uint64_t, uint64_t, uint64_t);
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  void **v319;
  int v320;
  int v321;
  uint64_t (*v322)(uint64_t);
  void *v323;
  uint64_t (*v324)();
  _QWORD *v325;
  void **aBlock;
  int v327;
  int v328;
  uint64_t (*v329)(uint64_t, void *);
  void *v330;
  void (*v331)(uint64_t);
  uint64_t v332;
  uint64_t v333;
  uint32_t v334;
  uint64_t v335;
  uint32_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  NSObject *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char v349;
  uint64_t v350;

  v301 = a1;
  v300 = a2;
  v296 = a3;
  v297 = a4;
  v298 = a5;
  v275 = a6;
  v350 = 0;
  v349 = 0;
  v348 = 0;
  v346 = 0;
  v347 = 0;
  v344 = 0;
  v342 = 0;
  v343 = 0;
  v341 = 0;
  v340 = 0;
  v339 = 0;
  v338 = 0;
  v337 = 0;
  v299 = 0;
  v276 = 0;
  v289 = 0;
  v277 = type metadata accessor for DispatchWorkItemFlags(0);
  v278 = *(_QWORD *)(v277 - 8);
  v279 = (*(_QWORD *)(v278 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(0);
  v280 = (char *)v177 - v279;
  v281 = type metadata accessor for DispatchQoS(v6);
  v282 = *(_QWORD *)(v281 - 8);
  v283 = (*(_QWORD *)(v282 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v289);
  v284 = (char *)v177 - v283;
  v285 = *(_QWORD *)(type metadata accessor for Mailbox(v7) - 8);
  v286 = *(_QWORD *)(v285 + 64);
  v287 = (v286 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v289);
  v288 = (uint64_t)v177 - v287;
  v290 = type metadata accessor for Logger(v8);
  v291 = *(_QWORD **)(v290 - 8);
  v292 = (v291[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v289);
  v293 = (char *)v177 - v292;
  v294 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __chkstk_darwin(v9);
  v295 = (char *)v177 - v294;
  v302 = type metadata accessor for UUID(v11);
  v303 = *(_QWORD *)(v302 - 8);
  v304 = (*(_QWORD *)(v303 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = __chkstk_darwin(v301);
  v305 = (char *)v177 - v304;
  v306 = v12 + 16;
  v350 = v12 + 16;
  v349 = v13 & 1;
  v348 = v14;
  v346 = v15;
  v347 = v16;
  v307 = &v345;
  swift_beginAccess(v12 + 16);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v306);
  swift_endAccess(v307);
  if (Strong)
  {
    v274 = Strong;
    v230 = Strong;
    v344 = Strong;
    v17 = UUID.init()();
    v18 = UUID.uuidString.getter(v17);
    v19 = v295;
    v238 = v18;
    v239 = v20;
    v342 = v18;
    v343 = v20;
    (*(void (**)(char *, uint64_t))(v303 + 8))(v305, v302);
    v231 = dispatch_group_create();
    v341 = v231;
    v256 = 32;
    v257 = 7;
    v21 = swift_allocObject(&unk_100081C68, 32, 7);
    v22 = v257;
    v232 = v21;
    v340 = v21 + 16;
    *(_QWORD *)(v21 + 16) = 0;
    v240 = 1;
    *(_BYTE *)(v21 + 24) = 1;
    v234 = 24;
    v23 = swift_allocObject(&unk_100081C90, 24, v22);
    v24 = v257;
    v233 = v23;
    v339 = v23 + 16;
    *(_QWORD *)(v23 + 16) = 0;
    v254 = 17;
    v25 = swift_allocObject(&unk_100081CB8, 17, v24);
    v26 = v234;
    v27 = v257;
    v235 = v25;
    v338 = v25 + 16;
    *(_BYTE *)(v25 + 16) = 2;
    v236 = swift_allocObject(&unk_100081CE0, v26, v27);
    v337 = v236 + 16;
    *(_QWORD *)(v236 + 16) = 0;
    v28 = sub_10000A91C();
    v237 = (void (*)(char *, uint64_t, uint64_t))v291[2];
    v237(v19, v28, v290);
    swift_bridgeObjectRetain(v239);
    v29 = swift_allocObject(&unk_100081D08, v256, v257);
    v30 = v239;
    v31 = v254;
    v32 = v257;
    v247 = v29;
    *(_QWORD *)(v29 + 16) = v238;
    *(_QWORD *)(v29 + 24) = v30;
    v33 = swift_allocObject(&unk_100081D30, v31, v32);
    v34 = v288;
    v35 = v33;
    v36 = v296;
    v249 = v35;
    *(_BYTE *)(v35 + 16) = v300 & v240;
    sub_10000D0CC(v36, v34);
    v37 = *(unsigned __int8 *)(v285 + 80);
    v241 = (v37 + 16) & ~v37;
    v258 = swift_allocObject(&unk_100081D58, v241 + v286, v257 | v37);
    v38 = sub_10000D3B8(v288, v258 + v241);
    v272 = Logger.logObject.getter(v38);
    v273 = static os_log_type_t.default.getter();
    v244 = &v335;
    v335 = 28;
    v242 = sub_1000079AC();
    v243 = sub_100007A14();
    v245 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v336, v244, &type metadata for UInt32, &type metadata for Int, v242, v243, v245);
    v246 = v336;
    v39 = swift_allocObject(&unk_100081D80, v254, v257);
    v40 = v254;
    v41 = v257;
    v260 = v39;
    v253 = 34;
    *(_BYTE *)(v39 + 16) = 34;
    v42 = swift_allocObject(&unk_100081DA8, v40, v41);
    v43 = v256;
    v44 = v257;
    v261 = v42;
    v255 = 8;
    *(_BYTE *)(v42 + 16) = 8;
    v45 = swift_allocObject(&unk_100081DD0, v43, v44);
    v46 = v256;
    v47 = v257;
    v48 = v45;
    v49 = v247;
    v248 = v48;
    *(_QWORD *)(v48 + 16) = sub_100011AFC;
    *(_QWORD *)(v48 + 24) = v49;
    v50 = swift_allocObject(&unk_100081DF8, v46, v47);
    v51 = v254;
    v52 = v257;
    v53 = v50;
    v54 = v248;
    v262 = v53;
    *(_QWORD *)(v53 + 16) = sub_100008A6C;
    *(_QWORD *)(v53 + 24) = v54;
    v55 = swift_allocObject(&unk_100081E20, v51, v52);
    v56 = v254;
    v57 = v257;
    v263 = v55;
    *(_BYTE *)(v55 + 16) = 0;
    v58 = swift_allocObject(&unk_100081E48, v56, v57);
    v59 = v256;
    v60 = v257;
    v264 = v58;
    *(_BYTE *)(v58 + 16) = 4;
    v61 = swift_allocObject(&unk_100081E70, v59, v60);
    v62 = v256;
    v63 = v257;
    v64 = v61;
    v65 = v249;
    v250 = v64;
    *(_QWORD *)(v64 + 16) = sub_100011B30;
    *(_QWORD *)(v64 + 24) = v65;
    v66 = swift_allocObject(&unk_100081E98, v62, v63);
    v67 = v256;
    v68 = v257;
    v69 = v66;
    v70 = v250;
    v251 = v69;
    *(_QWORD *)(v69 + 16) = sub_100011DE4;
    *(_QWORD *)(v69 + 24) = v70;
    v71 = swift_allocObject(&unk_100081EC0, v67, v68);
    v72 = v256;
    v73 = v257;
    v74 = v71;
    v75 = v251;
    v252 = v74;
    *(_QWORD *)(v74 + 16) = sub_100008A6C;
    *(_QWORD *)(v74 + 24) = v75;
    v76 = swift_allocObject(&unk_100081EE8, v72, v73);
    v77 = v254;
    v78 = v257;
    v79 = v76;
    v80 = v252;
    v265 = v79;
    *(_QWORD *)(v79 + 16) = sub_100011E68;
    *(_QWORD *)(v79 + 24) = v80;
    v81 = swift_allocObject(&unk_100081F10, v77, v78);
    v82 = v254;
    v83 = v257;
    v266 = v81;
    *(_BYTE *)(v81 + 16) = v253;
    v84 = swift_allocObject(&unk_100081F38, v82, v83);
    v85 = v256;
    v86 = v257;
    v267 = v84;
    *(_BYTE *)(v84 + 16) = v255;
    v87 = swift_allocObject(&unk_100081F60, v85, v86);
    v88 = v256;
    v89 = v257;
    v90 = v87;
    v91 = v258;
    v259 = v90;
    *(_QWORD *)(v90 + 16) = sub_100011C60;
    *(_QWORD *)(v90 + 24) = v91;
    v92 = swift_allocObject(&unk_100081F88, v88, v89);
    v93 = v259;
    v269 = v92;
    *(_QWORD *)(v92 + 16) = sub_100008A6C;
    *(_QWORD *)(v92 + 24) = v93;
    v271 = sub_100008AC0(&qword_10008AB20);
    v268 = _allocateUninitializedArray<A>(_:)(9, v271);
    v270 = v94;
    swift_retain();
    v95 = v260;
    v96 = v270;
    *v270 = sub_100008A00;
    v96[1] = v95;
    swift_retain();
    v97 = v261;
    v98 = v270;
    v270[2] = sub_100008A00;
    v98[3] = v97;
    swift_retain();
    v99 = v262;
    v100 = v270;
    v270[4] = sub_100008AB4;
    v100[5] = v99;
    swift_retain();
    v101 = v263;
    v102 = v270;
    v270[6] = sub_100008A00;
    v102[7] = v101;
    swift_retain();
    v103 = v264;
    v104 = v270;
    v270[8] = sub_100008A00;
    v104[9] = v103;
    swift_retain();
    v105 = v265;
    v106 = v270;
    v270[10] = sub_100011EB0;
    v106[11] = v105;
    swift_retain();
    v107 = v266;
    v108 = v270;
    v270[12] = sub_100008A00;
    v108[13] = v107;
    swift_retain();
    v109 = v267;
    v110 = v270;
    v270[14] = sub_100008A00;
    v110[15] = v109;
    swift_retain();
    v111 = v268;
    v112 = v269;
    v113 = v270;
    v270[16] = sub_100008AB4;
    v113[17] = v112;
    sub_1000073C4();
    swift_bridgeObjectRelease(v111);
    if (os_log_type_enabled(v272, (os_log_type_t)v273))
    {
      v114 = v276;
      v223 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(28, &type metadata for UInt8);
      v222 = sub_100008AC0(&qword_10008AB30);
      v224 = sub_1000076F4(0, v222, v222);
      v225 = sub_1000076F4(2, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v226 = &v313;
      v313 = v223;
      v227 = &v312;
      v312 = v224;
      v228 = &v311;
      v311 = v225;
      sub_10000774C(2, &v313);
      sub_10000774C(3, v226);
      v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v310 = v260;
      sub_100007760(&v309, (uint64_t)v226, (uint64_t)v227, (uint64_t)v228);
      v229 = v114;
      if (v114)
      {
        __break(1u);
      }
      else
      {
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v310 = v261;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v220 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v310 = v262;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v219 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v310 = v263;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v218 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v310 = v264;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v217 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100011EB0;
        v310 = v265;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v216 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v310 = v266;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v215 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v310 = v267;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v214 = 0;
        v309 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v310 = v269;
        sub_100007760(&v309, (uint64_t)&v313, (uint64_t)&v312, (uint64_t)&v311);
        v213 = 0;
        _os_log_impl((void *)&_mh_execute_header, v272, (os_log_type_t)v273, "[%{public}s] Fetch messages & count (threaded: %{BOOL}d) for mailbox: %{public}s", v223, v246);
        sub_1000077A4(v224, 0);
        sub_1000077A4(v225, 2);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v221 = v213;
      }
    }
    else
    {
      v115 = v276;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v221 = v115;
    }
    v211 = v221;

    v212 = (void (*)(char *, uint64_t))v291[1];
    v212(v295, v290);
    if ((sub_100016B18() & 1) != 0)
    {
      dispatch_group_enter(v231);
      v210 = *(id *)&v230[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_statusDataSource];
      v116 = v210;
      swift_bridgeObjectRetain(v239);
      swift_retain();
      v117 = v231;
      v118 = swift_allocObject(&unk_100082140, 56, 7);
      v119 = v239;
      v120 = v232;
      v121 = v231;
      v122 = v275;
      v123 = (_QWORD *)v118;
      v124 = v296;
      v209 = v123;
      v123[2] = v238;
      v123[3] = v119;
      v123[4] = v120;
      v123[5] = v121;
      v123[6] = v122;
      sub_10001E930(v124, 10, (uint64_t)sub_100012384, (uint64_t)v123);
      swift_release();

    }
    else
    {
      v125 = v293;
      v126 = sub_10000A91C();
      v237(v125, v126, v290);
      swift_bridgeObjectRetain(v239);
      v198 = 32;
      v199 = 7;
      v127 = swift_allocObject(&unk_100081FB0, 32, 7);
      v128 = v239;
      v200 = v127;
      *(_QWORD *)(v127 + 16) = v238;
      *(_QWORD *)(v127 + 24) = v128;
      v207 = Logger.logObject.getter(v127);
      v208 = static os_log_type_t.error.getter();
      v333 = 12;
      UnsignedInteger<>.init<A>(_:)(&v334, &v333, &type metadata for UInt32, &type metadata for Int, v242, v243, v245);
      v196 = v334;
      v197 = 17;
      v129 = swift_allocObject(&unk_100081FD8, 17, v199);
      v130 = v197;
      v131 = v199;
      v202 = v129;
      *(_BYTE *)(v129 + 16) = 34;
      v132 = swift_allocObject(&unk_100082000, v130, v131);
      v133 = v198;
      v134 = v199;
      v203 = v132;
      *(_BYTE *)(v132 + 16) = 8;
      v135 = swift_allocObject(&unk_100082028, v133, v134);
      v136 = v198;
      v137 = v199;
      v138 = v135;
      v139 = v200;
      v201 = v138;
      *(_QWORD *)(v138 + 16) = sub_100011AFC;
      *(_QWORD *)(v138 + 24) = v139;
      v140 = swift_allocObject(&unk_100082050, v136, v137);
      v141 = v271;
      v142 = v140;
      v143 = v201;
      v205 = v142;
      *(_QWORD *)(v142 + 16) = sub_100008A6C;
      *(_QWORD *)(v142 + 24) = v143;
      v204 = _allocateUninitializedArray<A>(_:)(3, v141);
      v206 = v144;
      swift_retain();
      v145 = v202;
      v146 = v206;
      *v206 = sub_100008A00;
      v146[1] = v145;
      swift_retain();
      v147 = v203;
      v148 = v206;
      v206[2] = sub_100008A00;
      v148[3] = v147;
      swift_retain();
      v149 = v204;
      v150 = v205;
      v151 = v206;
      v206[4] = sub_100008AB4;
      v151[5] = v150;
      sub_1000073C4();
      swift_bridgeObjectRelease(v149);
      if (os_log_type_enabled(v207, (os_log_type_t)v208))
      {
        v152 = v211;
        v189 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
        v188 = sub_100008AC0(&qword_10008AB30);
        v190 = sub_1000076F4(0, v188, v188);
        v191 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
        v192 = &v318;
        v318 = v189;
        v193 = &v317;
        v317 = v190;
        v194 = &v316;
        v316 = v191;
        sub_10000774C(2, &v318);
        sub_10000774C(1, v192);
        v314 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v315 = v202;
        sub_100007760(&v314, (uint64_t)v192, (uint64_t)v193, (uint64_t)v194);
        v195 = v152;
        if (v152)
        {
          __break(1u);
        }
        else
        {
          v314 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
          v315 = v203;
          sub_100007760(&v314, (uint64_t)&v318, (uint64_t)&v317, (uint64_t)&v316);
          v187 = 0;
          v314 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
          v315 = v205;
          sub_100007760(&v314, (uint64_t)&v318, (uint64_t)&v317, (uint64_t)&v316);
          _os_log_impl((void *)&_mh_execute_header, v207, (os_log_type_t)v208, "[%{public}s] Cannot fetch unread count. Mailbox is invalid.", v189, v196);
          sub_1000077A4(v190, 0);
          sub_1000077A4(v191, 1);
          UnsafeMutablePointer.deallocate()();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      v212(v293, v290);
      v153 = v232;
      *(_QWORD *)(v232 + 16) = 0;
      *(_BYTE *)(v153 + 24) = 0;
    }
    dispatch_group_enter(v231);
    v178 = *(id *)&v230[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_messagesDataSource];
    v154 = v178;
    swift_bridgeObjectRetain(v239);
    swift_retain();
    swift_retain();
    v155 = v231;
    v181 = 64;
    v182 = 7;
    v156 = swift_allocObject(&unk_100082078, 64, 7);
    v157 = v275;
    v158 = v300;
    v159 = v236;
    v160 = v233;
    v161 = v231;
    v162 = v239;
    v163 = (_QWORD *)v156;
    v164 = v296;
    v177[1] = v163;
    v163[2] = v238;
    v163[3] = v162;
    v163[4] = v160;
    v163[5] = v159;
    v163[6] = v161;
    v163[7] = v157;
    sub_100049470(v164, v158 & 1, (uint64_t)sub_100012198, (uint64_t)v163);
    swift_release();

    dispatch_group_enter(v231);
    v180 = *(id *)&v230[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_focusController];
    v165 = v180;
    swift_retain();
    v166 = v231;
    v167 = swift_allocObject(&unk_1000820A0, 32, v182);
    v168 = v231;
    *(_QWORD *)(v167 + 16) = v235;
    *(_QWORD *)(v167 + 24) = v168;
    v331 = sub_1000121FC;
    v332 = v167;
    v183 = _NSConcreteStackBlock;
    aBlock = _NSConcreteStackBlock;
    v184 = 1107296256;
    v327 = 1107296256;
    v328 = 0;
    v329 = sub_10000F898;
    v330 = &unk_1000820B8;
    v179 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v180, "getCurrentFocus:", v179);
    _Block_release(v179);

    sub_100008CF0();
    v186 = (id)static OS_dispatch_queue.main.getter();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v169 = (_QWORD *)swift_allocObject(&unk_1000820F0, v181, v182);
    v170 = v297;
    v171 = v298;
    v172 = v183;
    v173 = v184;
    v174 = v236;
    v175 = v235;
    v176 = v232;
    v169[2] = v233;
    v169[3] = v176;
    v169[4] = v175;
    v169[5] = v174;
    v169[6] = v170;
    v169[7] = v171;
    v324 = sub_1000122C0;
    v325 = v169;
    v319 = v172;
    v320 = v173;
    v321 = 0;
    v322 = sub_10000A4EC;
    v323 = &unk_100082108;
    v185 = _Block_copy(&v319);
    sub_100006E48();
    sub_100006E5C();
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v284, v280, v186, v185);
    (*(void (**)(char *, uint64_t))(v278 + 8))(v280, v277);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v284, v281);
    _Block_release(v185);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease(v239);
  }
}

uint64_t sub_10000D0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__dst;
  void *__src;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v10);
  *(_QWORD *)(a2 + 8) = v10;
  v13 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v13);
  *(_QWORD *)(a2 + 16) = v13;
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(a2 + 32) = v9;
  }
  v2 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a2 + *(int *)(v2 + 28));
  __src = (void *)(a1 + *(int *)(v2 + 28));
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v8 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(__dst, __src, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
  }
  return a2;
}

uint64_t sub_10000D250()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = ((((v9 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();
  return swift_deallocObject(v6, v8);
}

uint64_t sub_10000D3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__dst;
  void *__src;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v2 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a2 + *(int *)(v2 + 28));
  __src = (void *)(a1 + *(int *)(v2 + 28));
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v8 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(__dst, __src, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
  }
  return a2;
}

void sub_10000D4F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000BB0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24) & 1, v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10000D560(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10000D5A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10000D5BC()
{
  swift_bridgeObjectRetain();
}

uint64_t sub_10000D5EC(char a1)
{
  return a1 & 1;
}

uint64_t sub_10000D5F4()
{
  return sub_10001682C();
}

void sub_10000D614(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  _BYTE **v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  dispatch_group_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint32_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  NSObject *v116;
  int v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  char v123;
  uint64_t v124;
  uint32_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;

  v92 = a1;
  v93 = a2;
  v90 = a3;
  v91 = a4;
  v84 = a5;
  v85 = a6;
  v130 = 0;
  v131 = 0;
  v128 = 0;
  v129 = 0;
  v127 = 0;
  v126 = 0;
  v83 = 0;
  v89 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v89 - 8);
  v86 = (*(_QWORD *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (char *)&v68 - v86;
  v87 = (char *)&v68 - v86;
  v130 = __chkstk_darwin(v92);
  v94 = 1;
  v131 = v7 & 1;
  v128 = v8;
  v129 = v9;
  v127 = v10 + 16;
  v126 = v11;
  v12 = sub_10000A91C();
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v6, v12, v89);
  swift_bridgeObjectRetain(v91);
  v103 = 32;
  v104 = 7;
  v13 = swift_allocObject(&unk_100082168, 32, 7);
  v14 = v91;
  v15 = v104;
  v99 = v13;
  *(_QWORD *)(v13 + 16) = v90;
  *(_QWORD *)(v13 + 24) = v14;
  v16 = swift_allocObject(&unk_100082190, 25, v15);
  v17 = v93;
  v18 = v94;
  v105 = v16;
  *(_QWORD *)(v16 + 16) = v92;
  *(_BYTE *)(v16 + 24) = v17 & 1 & v18;
  v116 = Logger.logObject.getter(v16);
  v117 = static os_log_type_t.default.getter();
  v97 = &v124;
  v124 = 22;
  v95 = sub_1000079AC();
  v96 = sub_100007A14();
  v19 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v125, v97, &type metadata for UInt32, &type metadata for Int, v95, v96, v19);
  v98 = v125;
  v101 = 17;
  v20 = swift_allocObject(&unk_1000821B8, 17, v104);
  v21 = v101;
  v22 = v104;
  v107 = v20;
  *(_BYTE *)(v20 + 16) = 34;
  v23 = swift_allocObject(&unk_1000821E0, v21, v22);
  v24 = v103;
  v25 = v104;
  v108 = v23;
  v102 = 8;
  *(_BYTE *)(v23 + 16) = 8;
  v26 = swift_allocObject(&unk_100082208, v24, v25);
  v27 = v103;
  v28 = v104;
  v29 = v26;
  v30 = v99;
  v100 = v29;
  *(_QWORD *)(v29 + 16) = sub_100011AFC;
  *(_QWORD *)(v29 + 24) = v30;
  v31 = swift_allocObject(&unk_100082230, v27, v28);
  v32 = v101;
  v33 = v104;
  v34 = v31;
  v35 = v100;
  v109 = v34;
  *(_QWORD *)(v34 + 16) = sub_100008A6C;
  *(_QWORD *)(v34 + 24) = v35;
  v36 = swift_allocObject(&unk_100082258, v32, v33);
  v37 = v101;
  v38 = v104;
  v110 = v36;
  *(_BYTE *)(v36 + 16) = 0;
  v39 = swift_allocObject(&unk_100082280, v37, v38);
  v40 = v103;
  v41 = v104;
  v111 = v39;
  *(_BYTE *)(v39 + 16) = v102;
  v42 = swift_allocObject(&unk_1000822A8, v40, v41);
  v43 = v103;
  v44 = v104;
  v45 = v42;
  v46 = v105;
  v106 = v45;
  *(_QWORD *)(v45 + 16) = sub_100012404;
  *(_QWORD *)(v45 + 24) = v46;
  v47 = swift_allocObject(&unk_1000822D0, v43, v44);
  v48 = v106;
  v113 = v47;
  *(_QWORD *)(v47 + 16) = sub_10000A290;
  *(_QWORD *)(v47 + 24) = v48;
  v115 = sub_100008AC0(&qword_10008AB20);
  v112 = _allocateUninitializedArray<A>(_:)(6, v115);
  v114 = v49;
  swift_retain();
  v50 = v107;
  v51 = v114;
  *v114 = sub_100008A00;
  v51[1] = v50;
  swift_retain();
  v52 = v108;
  v53 = v114;
  v114[2] = sub_100008A00;
  v53[3] = v52;
  swift_retain();
  v54 = v109;
  v55 = v114;
  v114[4] = sub_100008AB4;
  v55[5] = v54;
  swift_retain();
  v56 = v110;
  v57 = v114;
  v114[6] = sub_100008A00;
  v57[7] = v56;
  swift_retain();
  v58 = v111;
  v59 = v114;
  v114[8] = sub_100008A00;
  v59[9] = v58;
  swift_retain();
  v60 = v112;
  v61 = v113;
  v62 = v114;
  v114[10] = sub_10000A2D8;
  v62[11] = v61;
  sub_1000073C4();
  swift_bridgeObjectRelease(v60);
  if (os_log_type_enabled(v116, (os_log_type_t)v117))
  {
    v63 = v83;
    v75 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
    v74 = sub_100008AC0(&qword_10008AB30);
    v76 = sub_1000076F4(0, v74, v74);
    v77 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v79 = &v122;
    v122 = v75;
    v80 = &v121;
    v121 = v76;
    v81 = &v120;
    v120 = v77;
    v78 = 2;
    sub_10000774C(2, &v122);
    sub_10000774C(v78, v79);
    v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v119 = v107;
    sub_100007760(&v118, (uint64_t)v79, (uint64_t)v80, (uint64_t)v81);
    v82 = v63;
    if (v63)
    {
      __break(1u);
    }
    else
    {
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v119 = v108;
      sub_100007760(&v118, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120);
      v73 = 0;
      v64 = v73;
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v119 = v109;
      sub_100007760(&v118, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120);
      v72 = v64;
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v119 = v110;
      sub_100007760(&v118, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120);
      v71 = 0;
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v119 = v111;
      sub_100007760(&v118, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120);
      v70 = 0;
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
      v119 = v113;
      sub_100007760(&v118, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120);
      _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v117, "[%{public}s] Received count:%ld", v75, v98);
      sub_1000077A4(v76, 0);
      sub_1000077A4(v77, 1);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v89);
  v69 = &v123;
  swift_beginAccess(v84 + 16);
  v65 = v93;
  v66 = v84;
  v67 = v69;
  *(_QWORD *)(v84 + 16) = v92;
  *(_BYTE *)(v66 + 24) = v65 & 1;
  swift_endAccess(v67);
  dispatch_group_leave(v85);
}

uint64_t sub_10000DFBC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return -1;
  return a1;
}

void sub_10000E000(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[4];
  uint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  _BYTE **v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint32_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  NSObject *v157;
  int v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  _BYTE **v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint32_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  NSObject *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  dispatch_group_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  char v218;
  uint64_t v219;
  uint32_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  char v227;
  uint64_t v228;
  uint32_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;

  v206 = a1;
  v205 = a2;
  v200 = a3;
  v201 = a4;
  v202 = a5;
  v203 = a6;
  v204 = a7;
  v236 = 0;
  v237 = 0;
  v234 = 0;
  v235 = 0;
  v233 = 0;
  v232 = 0;
  v231 = 0;
  v230 = 0;
  v199 = 0;
  v221 = 0;
  v207 = type metadata accessor for Logger(0);
  v208 = *(_QWORD *)(v207 - 8);
  v209 = (*(_QWORD *)(v208 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v206);
  v210 = (char *)v124 - v209;
  v211 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v7);
  v212 = (char *)v124 - v211;
  v236 = v9;
  v237 = v10 & 1;
  v234 = v11;
  v235 = v12;
  v233 = v13 + 16;
  v232 = v14 + 16;
  v231 = v15;
  if ((v10 & 1) != 0)
  {
    v197 = v206;
    v70 = v210;
    v135 = v206;
    swift_errorRetain(v206);
    v230 = v135;
    v71 = sub_10000A91C();
    (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v70, v71, v207);
    swift_bridgeObjectRetain(v201);
    v144 = 32;
    v145 = 7;
    v72 = swift_allocObject(&unk_1000822F8, 32, 7);
    v73 = v201;
    v74 = v72;
    v75 = v135;
    v140 = v74;
    *(_QWORD *)(v74 + 16) = v200;
    *(_QWORD *)(v74 + 24) = v73;
    swift_errorRetain(v75);
    v76 = swift_allocObject(&unk_100082320, 24, v145);
    v146 = v76;
    *(_QWORD *)(v76 + 16) = v135;
    v157 = Logger.logObject.getter(v76);
    v158 = static os_log_type_t.error.getter();
    v138 = &v228;
    v228 = 22;
    v136 = sub_1000079AC();
    v137 = sub_100007A14();
    v77 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v229, v138, &type metadata for UInt32, &type metadata for Int, v136, v137, v77);
    v139 = v229;
    v142 = 17;
    v78 = swift_allocObject(&unk_100082348, 17, v145);
    v79 = v142;
    v80 = v145;
    v148 = v78;
    *(_BYTE *)(v78 + 16) = 34;
    v81 = swift_allocObject(&unk_100082370, v79, v80);
    v82 = v144;
    v83 = v145;
    v149 = v81;
    v143 = 8;
    *(_BYTE *)(v81 + 16) = 8;
    v84 = swift_allocObject(&unk_100082398, v82, v83);
    v85 = v144;
    v86 = v145;
    v87 = v84;
    v88 = v140;
    v141 = v87;
    *(_QWORD *)(v87 + 16) = sub_100011AFC;
    *(_QWORD *)(v87 + 24) = v88;
    v89 = swift_allocObject(&unk_1000823C0, v85, v86);
    v90 = v142;
    v91 = v145;
    v92 = v89;
    v93 = v141;
    v150 = v92;
    *(_QWORD *)(v92 + 16) = sub_100008A6C;
    *(_QWORD *)(v92 + 24) = v93;
    v94 = swift_allocObject(&unk_1000823E8, v90, v91);
    v95 = v142;
    v96 = v145;
    v151 = v94;
    *(_BYTE *)(v94 + 16) = 32;
    v97 = swift_allocObject(&unk_100082410, v95, v96);
    v98 = v144;
    v99 = v145;
    v152 = v97;
    *(_BYTE *)(v97 + 16) = v143;
    v100 = swift_allocObject(&unk_100082438, v98, v99);
    v101 = v144;
    v102 = v145;
    v103 = v100;
    v104 = v146;
    v147 = v103;
    *(_QWORD *)(v103 + 16) = sub_1000126C4;
    *(_QWORD *)(v103 + 24) = v104;
    v105 = swift_allocObject(&unk_100082460, v101, v102);
    v106 = v147;
    v154 = v105;
    *(_QWORD *)(v105 + 16) = sub_100008A6C;
    *(_QWORD *)(v105 + 24) = v106;
    v156 = sub_100008AC0(&qword_10008AB20);
    v153 = _allocateUninitializedArray<A>(_:)(6, v156);
    v155 = v107;
    swift_retain();
    v108 = v148;
    v109 = v155;
    *v155 = sub_100008A00;
    v109[1] = v108;
    swift_retain();
    v110 = v149;
    v111 = v155;
    v155[2] = sub_100008A00;
    v111[3] = v110;
    swift_retain();
    v112 = v150;
    v113 = v155;
    v155[4] = sub_100008AB4;
    v113[5] = v112;
    swift_retain();
    v114 = v151;
    v115 = v155;
    v155[6] = sub_100008A00;
    v115[7] = v114;
    swift_retain();
    v116 = v152;
    v117 = v155;
    v155[8] = sub_100008A00;
    v117[9] = v116;
    swift_retain();
    v118 = v153;
    v119 = v154;
    v120 = v155;
    v155[10] = sub_100008AB4;
    v120[11] = v119;
    sub_1000073C4();
    swift_bridgeObjectRelease(v118);
    if (os_log_type_enabled(v157, (os_log_type_t)v158))
    {
      v121 = v199;
      v127 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
      v126 = sub_100008AC0(&qword_10008AB30);
      v128 = sub_1000076F4(0, v126, v126);
      v129 = sub_1000076F4(2, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v131 = &v226;
      v226 = v127;
      v132 = &v225;
      v225 = v128;
      v133 = &v224;
      v224 = v129;
      v130 = 2;
      sub_10000774C(2, &v226);
      sub_10000774C(v130, v131);
      v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v223 = v148;
      sub_100007760(&v222, (uint64_t)v131, (uint64_t)v132, (uint64_t)v133);
      v134 = v121;
      if (v121)
      {
        __break(1u);
      }
      else
      {
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v223 = v149;
        sub_100007760(&v222, (uint64_t)&v226, (uint64_t)&v225, (uint64_t)&v224);
        v125 = 0;
        v122 = v125;
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v223 = v150;
        sub_100007760(&v222, (uint64_t)&v226, (uint64_t)&v225, (uint64_t)&v224);
        v124[3] = v122;
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v223 = v151;
        sub_100007760(&v222, (uint64_t)&v226, (uint64_t)&v225, (uint64_t)&v224);
        v124[2] = 0;
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v223 = v152;
        sub_100007760(&v222, (uint64_t)&v226, (uint64_t)&v225, (uint64_t)&v224);
        v124[1] = 0;
        v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v223 = v154;
        sub_100007760(&v222, (uint64_t)&v226, (uint64_t)&v225, (uint64_t)&v224);
        _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v158, "[%{public}s] Fetching messages failed with error: %s", v127, v139);
        sub_1000077A4(v128, 0);
        sub_1000077A4(v129, 2);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v208 + 8))(v210, v207);
    swift_errorRetain(v135);
    v124[0] = &v227;
    swift_beginAccess(v203 + 16);
    v123 = *(_QWORD *)(v203 + 16);
    *(_QWORD *)(v203 + 16) = v135;
    swift_errorRelease(v123);
    swift_endAccess(v124[0]);
    swift_errorRelease(v135);
  }
  else
  {
    v198 = v206;
    v16 = v212;
    v173 = v206;
    swift_bridgeObjectRetain(v206);
    v221 = v173;
    v17 = sub_10000A91C();
    (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v16, v17, v207);
    swift_bridgeObjectRetain(v201);
    v182 = 32;
    v183 = 7;
    v18 = swift_allocObject(&unk_100082488, 32, 7);
    v19 = v201;
    v20 = v18;
    v21 = v173;
    v178 = v20;
    *(_QWORD *)(v20 + 16) = v200;
    *(_QWORD *)(v20 + 24) = v19;
    swift_bridgeObjectRetain(v21);
    v22 = swift_allocObject(&unk_1000824B0, 24, v183);
    v184 = v22;
    *(_QWORD *)(v22 + 16) = v173;
    v195 = Logger.logObject.getter(v22);
    v196 = static os_log_type_t.default.getter();
    v176 = &v219;
    v219 = 22;
    v174 = sub_1000079AC();
    v175 = sub_100007A14();
    v23 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v220, v176, &type metadata for UInt32, &type metadata for Int, v174, v175, v23);
    v177 = v220;
    v180 = 17;
    v24 = swift_allocObject(&unk_1000824D8, 17, v183);
    v25 = v180;
    v26 = v183;
    v186 = v24;
    *(_BYTE *)(v24 + 16) = 34;
    v27 = swift_allocObject(&unk_100082500, v25, v26);
    v28 = v182;
    v29 = v183;
    v187 = v27;
    v181 = 8;
    *(_BYTE *)(v27 + 16) = 8;
    v30 = swift_allocObject(&unk_100082528, v28, v29);
    v31 = v182;
    v32 = v183;
    v33 = v30;
    v34 = v178;
    v179 = v33;
    *(_QWORD *)(v33 + 16) = sub_100011AFC;
    *(_QWORD *)(v33 + 24) = v34;
    v35 = swift_allocObject(&unk_100082550, v31, v32);
    v36 = v180;
    v37 = v183;
    v38 = v35;
    v39 = v179;
    v188 = v38;
    *(_QWORD *)(v38 + 16) = sub_100008A6C;
    *(_QWORD *)(v38 + 24) = v39;
    v40 = swift_allocObject(&unk_100082578, v36, v37);
    v41 = v180;
    v42 = v183;
    v189 = v40;
    *(_BYTE *)(v40 + 16) = 32;
    v43 = swift_allocObject(&unk_1000825A0, v41, v42);
    v44 = v182;
    v45 = v183;
    v190 = v43;
    *(_BYTE *)(v43 + 16) = v181;
    v46 = swift_allocObject(&unk_1000825C8, v44, v45);
    v47 = v182;
    v48 = v183;
    v49 = v46;
    v50 = v184;
    v185 = v49;
    *(_QWORD *)(v49 + 16) = sub_1000128D4;
    *(_QWORD *)(v49 + 24) = v50;
    v51 = swift_allocObject(&unk_1000825F0, v47, v48);
    v52 = v185;
    v192 = v51;
    *(_QWORD *)(v51 + 16) = sub_100008A6C;
    *(_QWORD *)(v51 + 24) = v52;
    v194 = sub_100008AC0(&qword_10008AB20);
    v191 = _allocateUninitializedArray<A>(_:)(6, v194);
    v193 = v53;
    swift_retain();
    v54 = v186;
    v55 = v193;
    *v193 = sub_100008A00;
    v55[1] = v54;
    swift_retain();
    v56 = v187;
    v57 = v193;
    v193[2] = sub_100008A00;
    v57[3] = v56;
    swift_retain();
    v58 = v188;
    v59 = v193;
    v193[4] = sub_100008AB4;
    v59[5] = v58;
    swift_retain();
    v60 = v189;
    v61 = v193;
    v193[6] = sub_100008A00;
    v61[7] = v60;
    swift_retain();
    v62 = v190;
    v63 = v193;
    v193[8] = sub_100008A00;
    v63[9] = v62;
    swift_retain();
    v64 = v191;
    v65 = v192;
    v66 = v193;
    v193[10] = sub_100008AB4;
    v66[11] = v65;
    sub_1000073C4();
    swift_bridgeObjectRelease(v64);
    if (os_log_type_enabled(v195, (os_log_type_t)v196))
    {
      v67 = v199;
      v165 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
      v164 = sub_100008AC0(&qword_10008AB30);
      v166 = sub_1000076F4(0, v164, v164);
      v167 = sub_1000076F4(2, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v169 = &v217;
      v217 = v165;
      v170 = &v216;
      v216 = v166;
      v171 = &v215;
      v215 = v167;
      v168 = 2;
      sub_10000774C(2, &v217);
      sub_10000774C(v168, v169);
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v214 = v186;
      sub_100007760(&v213, (uint64_t)v169, (uint64_t)v170, (uint64_t)v171);
      v172 = v67;
      if (v67)
      {
        __break(1u);
      }
      else
      {
        v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v214 = v187;
        sub_100007760(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
        v163 = 0;
        v68 = v163;
        v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v214 = v188;
        sub_100007760(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
        v162 = v68;
        v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v214 = v189;
        sub_100007760(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
        v161 = 0;
        v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v214 = v190;
        sub_100007760(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
        v160 = 0;
        v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v214 = v192;
        sub_100007760(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
        _os_log_impl((void *)&_mh_execute_header, v195, (os_log_type_t)v196, "[%{public}s] Received messages:\n\t%s", v165, v177);
        sub_1000077A4(v166, 0);
        sub_1000077A4(v167, 2);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v208 + 8))(v212, v207);
    swift_bridgeObjectRetain(v173);
    v159 = &v218;
    swift_beginAccess(v202 + 16);
    v69 = *(_QWORD *)(v202 + 16);
    *(_QWORD *)(v202 + 16) = v173;
    swift_bridgeObjectRelease(v69);
    swift_endAccess(v159);
    swift_bridgeObjectRelease(v173);
  }
  dispatch_group_leave(v204);
}

uint64_t sub_10000F4C4(uint64_t a1)
{
  unint64_t v1;
  Swift::String v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = a1;
  KeyPath = swift_getKeyPath(&unk_100073A70);
  swift_retain();
  v8 = sub_100008AC0(&qword_10008B0F0);
  v1 = sub_100012AB0();
  v10 = sub_10001990C((void (*)(char *, char *))sub_100012A80, KeyPath, v8, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v1, (uint64_t)&protocol witness table for Never, v9);
  swift_release();
  swift_release();
  v11[0] = v10;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\t", 2uLL, 1);
  v5 = sub_100008AC0(&qword_10008B100);
  v3 = sub_100012B20();
  v6 = BidirectionalCollection<>.joined(separator:)(v2._countAndFlagsBits, v2._object, v5, v3);
  swift_bridgeObjectRelease(v2._object);
  sub_10000A004(v11);
  return v6;
}

char *sub_10000F604@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;

  v11 = a2;
  v9 = a1;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)__chkstk_darwin(v9);
  v12 = (char *)&v9 - v10;
  sub_100012B90(v2, (char *)&v9 - v10);
  v3 = sub_10002D4A4();
  v4 = v11;
  v5 = v3;
  v6 = v12;
  *v11 = v5;
  v4[1] = v7;
  return sub_100012DE8(v6);
}

char *sub_10000F698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = a3;
  v5 = a1;
  v8 = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (char *)__chkstk_darwin(v5);
  v9 = (char *)&v5 - v6;
  sub_100012B90(v3, (char *)&v5 - v6);
  swift_retain();
  swift_getAtKeyPath(v9, v8);
  swift_release();
  return sub_100012DE8(v9);
}

uint64_t sub_10000F738(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v5;

  swift_errorRetain();
  v2 = (id)_convertErrorToNSError(_:)(a1);
  v3 = objc_msgSend(v2, "ef_publicDescription");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  swift_errorRelease(a1);
  return v5;
}

void sub_10000F7AC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v5[24];
  _BYTE v6[24];
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2 + 16;
  v8 = a3;
  v7 = a1;
  if (a1)
  {
    swift_beginAccess(a2 + 16);
    *(_BYTE *)(a2 + 16) = 1;
    swift_endAccess(v5);
  }
  else
  {
    swift_beginAccess(a2 + 16);
    *(_BYTE *)(a2 + 16) = 0;
    swift_endAccess(v6);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10000F898(uint64_t a1, void *a2)
{
  id v2;
  void (*v4)(void *);
  uint64_t v6;

  v4 = *(void (**)(void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  swift_retain(v6);
  v2 = a2;
  v4(a2);

  return swift_release(v6);
}

uint64_t sub_10000F8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  int v6;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1 + 16;
  v14 = a2 + 16;
  v36 = a2 + 16;
  v18 = a3 + 16;
  v35 = a3 + 16;
  v21 = a4 + 16;
  v34 = a4 + 16;
  v32 = a5;
  v33 = a6;
  swift_beginAccess(a1 + 16);
  v24 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v24);
  swift_endAccess(v31);
  swift_beginAccess(v14);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_BYTE *)(a2 + 24);
  swift_endAccess(v30);
  swift_beginAccess(v18);
  v20 = *(unsigned __int8 *)(a3 + 16);
  swift_endAccess(v29);
  swift_beginAccess(v21);
  v23 = *(_QWORD *)(a4 + 16);
  swift_errorRetain(v23);
  swift_endAccess(v28);
  if (!v24 || v20 == 2)
  {
    if (v23)
    {
      swift_errorRetain(v23);
      swift_retain();
      swift_errorRetain(v23);
      LOWORD(v26) = 0;
      BYTE2(v26) = 1;
      a5(v23, 0, v26);
      sub_100012610(v23, 0, 0, 1);
      swift_release();
      swift_errorRelease(v23);
      swift_bridgeObjectRelease(v24);
      return swift_errorRelease(v23);
    }
    else
    {
      swift_retain();
      v8 = sub_1000125A4();
      v10 = swift_allocError(&unk_100081B08, v8, 0, 0);
      *v9 = 0;
      LOWORD(v27) = 0;
      BYTE2(v27) = 1;
      a5(v10, 0, v27);
      sub_100012610(v10, 0, 0, 1);
      swift_release();
      swift_bridgeObjectRelease(v24);
      return swift_errorRelease(0);
    }
  }
  else
  {
    swift_bridgeObjectRetain(v24);
    swift_retain();
    swift_bridgeObjectRetain(v24);
    v6 = v20 & 1;
    v11 = v17 & 1 | (v6 << 8);
    LOWORD(v25) = v17 & 1 | ((_WORD)v6 << 8);
    BYTE2(v25) = 0;
    a5(v24, v16, v25);
    sub_100012610(v24, v16, v11, 0);
    swift_release();
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v24);
    return swift_errorRelease(v23);
  }
}

uint64_t sub_10000FD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void **aBlock;
  int v51;
  int v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v28 = a1;
  v34 = a2;
  v37 = a3;
  v38 = a4;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v49 = 0;
  v26 = 0;
  v25 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchWorkItemFlags(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v40 = (char *)&v25 - v25;
  v29 = *(_QWORD *)(type metadata accessor for Mailbox(v5) - 8);
  v30 = *(_QWORD *)(v29 + 64);
  v27 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v26);
  v33 = (uint64_t)&v25 - v27;
  v61 = v7;
  v60 = v8;
  v58 = v9;
  v59 = v10;
  v57 = v4;
  type metadata accessor for DispatchWorkItem(v6);
  v31 = 7;
  v43 = swift_allocObject(&unk_100081980, 24, 7);
  v11 = v42;
  swift_unknownObjectWeakInit(v43 + 16);

  swift_retain();
  sub_10000D0CC(v28, v33);
  swift_bridgeObjectRetain(v34);
  swift_retain();
  v12 = *(unsigned __int8 *)(v29 + 80);
  v32 = (v12 + 24) & ~v12;
  v35 = (v32 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_1000819F8, v36 + 16, v31 | v12 | 7);
  v14 = v32;
  v15 = v13;
  v16 = v33;
  v39 = v15;
  *(_QWORD *)(v15 + 16) = v43;
  sub_10000D3B8(v16, v15 + v14);
  v17 = v36;
  v18 = v37;
  v19 = v38;
  v20 = v39;
  *(_QWORD *)(v39 + v35) = v34;
  v21 = (_QWORD *)(v20 + v17);
  *v21 = v18;
  v21[1] = v19;
  v55 = sub_1000102F0;
  v56 = v20;
  aBlock = _NSConcreteStackBlock;
  v51 = 1107296256;
  v52 = 0;
  v53 = sub_10000A4EC;
  v54 = &unk_100081A10;
  v41 = _Block_copy(&aBlock);
  sub_100006E5C();
  v22 = DispatchWorkItem.__allocating_init(flags:block:)(v40, v41);
  v23 = v42;
  v47 = v22;
  swift_release();
  swift_release();
  v49 = v47;
  v44 = &v23[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_queue];
  v45 = &v48;
  swift_beginAccess(&v23[OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_queue]);
  v46 = *(_QWORD *)v44;
  swift_retain();
  swift_endAccess(v45);
  sub_1000037BC(v47);
  swift_release();
  return swift_release();
}

uint64_t sub_100010060(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  id v6;
  id v7;
  uint64_t v12;
  id Strong;
  _BYTE v14[24];
  void (*v15)(uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = a1 + 16;
  v19 = a1 + 16;
  v18 = a2;
  v17 = a3;
  v15 = a4;
  v16 = a5;
  swift_beginAccess(a1 + 16);
  Strong = (id)swift_unknownObjectWeakLoadStrong(v12);
  if (Strong)
  {
    v7 = Strong;
    v6 = Strong;
    sub_1000119D0(&Strong);
    swift_endAccess(v14);
    swift_retain();

    sub_10001A0F8(a2, a3, a4, a5);
    return swift_release();
  }
  else
  {
    sub_1000119D0(&Strong);
    return swift_endAccess(v14);
  }
}

uint64_t sub_100010174()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = (v9 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8));
  swift_release();
  return swift_deallocObject(v6, ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
}

uint64_t sub_1000102F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100010060(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(uint64_t *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100010354(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100010398(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000103B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t ObjectType;
  const void *v8;
  id v9;
  void **aBlock;
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, void *);
  void *v14;
  void (*v15)(void *);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  ObjectType = swift_getObjectType(v2);
  v18 = a1;
  v19 = a2;
  v17 = v2;
  v9 = *(id *)(v2 + OBJC_IVAR____TtC19MailWidgetExtension16DaemonDataSource_focusController);
  v3 = v9;
  swift_retain();
  v4 = (_QWORD *)swift_allocObject(&unk_100081A48, 40, 7);
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = ObjectType;
  v15 = sub_10001071C;
  v16 = v4;
  aBlock = _NSConcreteStackBlock;
  v11 = 1107296256;
  v12 = 0;
  v13 = sub_10000F898;
  v14 = &unk_100081A60;
  v8 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v9, "getCurrentFocus:", v8);
  _Block_release(v8);

}

void sub_1000104D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void **aBlock;
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  uint64_t (*v33)();
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v19 = 0;
  v22 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v22 - 8);
  v13 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(0);
  v21 = (char *)&v13 - v13;
  v25 = type metadata accessor for DispatchQoS(v4);
  v23 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v19);
  v24 = (char *)&v13 - v14;
  v37 = v5;
  v35 = v6;
  v36 = v7;
  sub_100008CF0();
  v27 = (id)static OS_dispatch_queue.main.getter();
  v8 = v18;
  swift_retain();
  v9 = (_QWORD *)swift_allocObject(&unk_100081B50, 48, 7);
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v9[2] = v18;
  v9[3] = v10;
  v9[4] = v11;
  v9[5] = v12;
  v33 = sub_100011818;
  v34 = v9;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = 0;
  v31 = sub_10000A4EC;
  v32 = &unk_100081B68;
  v26 = _Block_copy(&aBlock);
  swift_release();
  sub_100006E48();
  sub_100006E5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v19, v24, v21, v26);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  _Block_release(v26);

}

uint64_t sub_1000106E0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 40);
}

void sub_10001071C(void *a1)
{
  uint64_t *v1;

  sub_1000104D4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001072C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100010770(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100010788(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint32_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  id v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint32_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;

  v82 = a1;
  v77 = a2;
  v76 = a3;
  v95 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v75 = 0;
  v78 = type metadata accessor for Logger(0);
  v79 = *(_QWORD *)(v78 - 8);
  v80 = (*(_QWORD *)(v79 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v81 = (char *)&v33 - v80;
  v95 = (id)__chkstk_darwin(v82);
  v93 = v3;
  v94 = v4;
  v5 = v95;
  if (v82)
  {
    v74 = v82;
    v71 = v82;
    v72 = objc_msgSend(v82, "focusedAccountIdentifiers");
    if (v72)
    {
      v70 = v72;
      v67 = v72;
      v68 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v72, &type metadata for String);

      v69 = v68;
    }
    else
    {
      v69 = 0;
    }
    v66 = v69;

    v73 = v66;
  }
  else
  {
    v73 = 0;
  }
  v6 = v81;
  v48 = v73;
  v92 = v73;
  v7 = sub_10000A91C();
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v6, v7, v78);
  swift_bridgeObjectRetain(v48);
  v55 = 7;
  v8 = swift_allocObject(&unk_100081BA0, 24, 7);
  v56 = v8;
  *(_QWORD *)(v8 + 16) = v48;
  v64 = Logger.logObject.getter(v8);
  v65 = static os_log_type_t.default.getter();
  v51 = &v90;
  v90 = 12;
  v49 = sub_1000079AC();
  v50 = sub_100007A14();
  v9 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v91, v51, &type metadata for UInt32, &type metadata for Int, v49, v50, v9);
  v52 = v91;
  v53 = 17;
  v10 = swift_allocObject(&unk_100081BC8, 17, v55);
  v11 = v53;
  v12 = v55;
  v58 = v10;
  *(_BYTE *)(v10 + 16) = 0;
  v13 = swift_allocObject(&unk_100081BF0, v11, v12);
  v14 = v55;
  v59 = v13;
  *(_BYTE *)(v13 + 16) = 8;
  v54 = 32;
  v15 = swift_allocObject(&unk_100081C18, 32, v14);
  v16 = v54;
  v17 = v55;
  v18 = v15;
  v19 = v56;
  v57 = v18;
  *(_QWORD *)(v18 + 16) = sub_1000118C4;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = swift_allocObject(&unk_100081C40, v16, v17);
  v21 = v57;
  v61 = v20;
  *(_QWORD *)(v20 + 16) = sub_10000A290;
  *(_QWORD *)(v20 + 24) = v21;
  v63 = sub_100008AC0(&qword_10008AB20);
  v60 = _allocateUninitializedArray<A>(_:)(3, v63);
  v62 = v22;
  swift_retain();
  v23 = v58;
  v24 = v62;
  *v62 = sub_100008A00;
  v24[1] = v23;
  swift_retain();
  v25 = v59;
  v26 = v62;
  v62[2] = sub_100008A00;
  v26[3] = v25;
  swift_retain();
  v27 = v60;
  v28 = v61;
  v29 = v62;
  v62[4] = sub_10000A2D8;
  v29[5] = v28;
  sub_1000073C4();
  swift_bridgeObjectRelease(v27);
  if (os_log_type_enabled(v64, (os_log_type_t)v65))
  {
    v30 = v75;
    v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
    v39 = sub_100008AC0(&qword_10008AB30);
    v40 = 0;
    v42 = sub_1000076F4(0, v39, v39);
    v43 = sub_1000076F4(v40, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v44 = &v87;
    v87 = v41;
    v45 = &v86;
    v86 = v42;
    v46 = &v85;
    v85 = v43;
    sub_10000774C(0, &v87);
    sub_10000774C(1, v44);
    v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v84 = v58;
    sub_100007760(&v83, (uint64_t)v44, (uint64_t)v45, (uint64_t)v46);
    v47 = v30;
    if (v30)
    {
      __break(1u);
    }
    else
    {
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v84 = v59;
      sub_100007760(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      v38 = 0;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
      v84 = v61;
      sub_100007760(&v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85);
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v65, "Received %ld focused account identifiers", v41, v52);
      v37 = 0;
      sub_1000077A4(v42, 0);
      sub_1000077A4(v43, v37);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
  swift_retain();
  swift_bridgeObjectRetain(v48);
  v88 = v48;
  if (v48)
  {
    v89 = v88;
  }
  else
  {
    v36 = &type metadata for String;
    v31 = _allocateUninitializedArray<A>(_:)(0, &type metadata for String);
    v89 = Set.init(arrayLiteral:)(v31, v36, &protocol witness table for String);
    sub_10000A004(&v88);
  }
  v34 = v89;
  v35 = 0;
  v77();
  sub_100011994(v34, v35 & 1);
  swift_release();
  return swift_bridgeObjectRelease(v48);
}

uint64_t sub_100010FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  swift_bridgeObjectRetain();
  if (a1)
  {
    v2 = Set.count.getter();
    swift_bridgeObjectRelease(a1);
    v3 = v2;
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 1;
  }
  if ((v4 & 1) != 0)
    return -1;
  else
    return v3;
}

uint64_t sub_100011078()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  if (!"MailWidgetExtension.DaemonDataSource")
  {
    v1 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v1, 136, 0);
    __break(1u);
  }
  result = sub_10004F064((uint64_t)"MailWidgetExtension.DaemonDataSource", 36, (unint64_t)"init()", 6, 2, (unint64_t)"MailWidgetExtension/DataSource.swift", 36, 2, v2, 0x16uLL, 0xDuLL);
  __break(1u);
  return result;
}

id sub_1000111A4()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100011288()
{
  return sub_10000A988() & 1;
}

uint64_t sub_1000112AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_10000B748(a1, a2 & 1, a3, a4);
}

uint64_t sub_1000112D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000FD10(a1, a2, a3, a4);
}

void sub_1000112F0(uint64_t a1, uint64_t a2)
{
  sub_1000103B0(a1, a2);
}

_BYTE *sub_100011310(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10001131C(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *sub_1000114CC(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t sub_100011710(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100011718(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for DaemonDataSource.Error()
{
  return &unk_100081B08;
}

unint64_t sub_100011734()
{
  return sub_100011748();
}

unint64_t sub_100011748()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B0E0;
  if (!qword_10008B0E0)
  {
    WitnessTable = swift_getWitnessTable(&unk_1000739B8, &unk_100081B08);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B0E0);
    return WitnessTable;
  }
  return v2;
}

id sub_1000117B4()
{
  void *v0;

  return objc_msgSend(v0, "init");
}

uint64_t sub_1000117D4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v2, 48);
}

uint64_t sub_100011818()
{
  uint64_t v0;

  return sub_100010788(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10001182C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100011870(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011888()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_1000118C4()
{
  uint64_t v0;

  return sub_100010FA4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000118CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000118F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10001191C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011958()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011994(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1000119D0(id *a1)
{

}

uint64_t sub_1000119F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32);
}

uint64_t sub_100011A20()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_100011A5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011A84()
{
  uint64_t v0;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_100011AC0()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011AFC()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  sub_10000D5BC();
  return result;
}

uint64_t sub_100011B08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011B30()
{
  uint64_t v0;

  return sub_10000D5EC(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t sub_100011B3C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = v8 + *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 16));
  if (*(_QWORD *)(v0 + v8 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8 + 32));
  v3 = v6 + v8 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v9);
}

uint64_t sub_100011C60()
{
  type metadata accessor for Mailbox(0);
  return sub_10000D5F4();
}

uint64_t sub_100011C90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011CB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011CE0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011D1C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011D58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011D80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011DA8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

BOOL sub_100011DE4()
{
  uint64_t v0;

  return sub_10002A010(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100011DF0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011E2C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011E68@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002A0D4(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_100011E74()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100011EB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = sub_100011F10();
  return sub_100029DEC(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int32, v4);
}

unint64_t sub_100011F10()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008BF80;
  if (!qword_10008BF80)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BF80);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_100011F78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011FA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100011FC8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012004()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012040()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10001207C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000120A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000120CC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012108()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012144()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v2, 64);
}

void sub_100012198(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10000E000(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(NSObject **)(v2 + 48));
}

uint64_t sub_1000121B8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v2, 32);
}

void sub_1000121FC(uint64_t a1)
{
  uint64_t v1;

  sub_10000F7AC(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100012208(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10001224C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012264()
{
  _QWORD *v0;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v2, 64);
}

uint64_t sub_1000122C0()
{
  uint64_t v0;

  return sub_10000F8F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000122DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100012320(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012338()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v2, 56);
}

void sub_100012384(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10000D614(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(NSObject **)(v2 + 40));
}

uint64_t sub_1000123A0()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000123DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25);
}

uint64_t sub_100012404()
{
  uint64_t v0;

  return sub_10000DFBC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24) & 1);
}

uint64_t sub_100012414()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10001243C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100012464()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000124A0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000124DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100012504()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10001252C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012568()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

unint64_t sub_1000125A4()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B0E8;
  if (!qword_10008B0E8)
  {
    WitnessTable = swift_getWitnessTable(&unk_1000739F0, &unk_100081B08);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B0E8);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_100012610(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10001264C()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012688()
{
  uint64_t v0;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_1000126C4()
{
  uint64_t v0;

  return sub_10000F738(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000126CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000126F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10001271C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012758()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012794()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000127BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000127E4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012820()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10001285C()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012898()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_1000128D4()
{
  uint64_t v0;

  return sub_10000F4C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000128DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100012904()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10001292C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012968()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000129A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000129CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000129F4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012A30()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

char *sub_100012A6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10000F604(a1, a2);
}

char *sub_100012A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  return sub_10000F698(a1, v3, a2);
}

unint64_t sub_100012AB0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B0F8;
  if (!qword_10008B0F8)
  {
    v0 = sub_100008DF0(&qword_10008B0F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B0F8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100012B20()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B108;
  if (!qword_10008B108)
  {
    v0 = sub_100008DF0(&qword_10008B100);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B108);
    return WitnessTable;
  }
  return v3;
}

char *sub_100012B90(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 1);
  swift_bridgeObjectRetain(v5);
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  swift_bridgeObjectRetain(v6);
  *((_QWORD *)a2 + 3) = v6;
  *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRetain(v7);
  *((_QWORD *)a2 + 5) = v7;
  *((_QWORD *)a2 + 6) = *((_QWORD *)a1 + 6);
  v8 = *((_QWORD *)a1 + 7);
  swift_bridgeObjectRetain(v8);
  *((_QWORD *)a2 + 7) = v8;
  v11 = (int *)type metadata accessor for Message(0);
  v9 = v11[8];
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v9], &a1[v9]);
  a2[v11[9]] = a1[v11[9]];
  a2[v11[10]] = a1[v11[10]];
  a2[v11[11]] = a1[v11[11]];
  a2[v11[12]] = a1[v11[12]];
  v12 = v11[13];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(&a1[v12], 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a2[v12], &a1[v12], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v15 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(&a2[v12], 0, 1, v14);
  }
  return a2;
}

char *sub_100012DE8(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*((_QWORD *)a1 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 7));
  v4 = type metadata accessor for Message(0);
  v3 = *(int *)(v4 + 32);
  v1 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v1 - 8) + 8))(&a1[v3]);
  v5 = *(int *)(v4 + 52);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(&a1[v5], 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(&a1[v5], v7);
  return a1;
}

uint64_t sub_100012EE0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100012F1C()
{
  uint64_t v0;

  return sub_10000B3FC(*(void (**)(_QWORD))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100012F28(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100012F6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012F84()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v2, 40);
}

void sub_100012FC8(char a1)
{
  uint64_t *v1;

  sub_10000B45C(a1 & 1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100012FDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100013020(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013038()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 33);
}

uint64_t sub_100013074()
{
  uint64_t v0;

  return sub_10000B680(*(void (**)(_QWORD))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32) & 1);
}

uint64_t sub_100013088(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_1000130CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000130E4(_QWORD *a1)
{
  unint64_t v1;
  id v2;
  id v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;

  v18 = 0;
  v19 = a1;
  v15 = a1[3];
  v16 = a1[4];
  sub_10001335C(v15, v16);
  if (v16 <= 5)
    __asm { BR              X8 }
  sub_100013398(v15, v16);
  v13 = a1[2];
  swift_bridgeObjectRetain(v13);
  if (v13)
  {
    v18 = v13;
    v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    swift_bridgeObjectRetain(v13);
    v17 = v13;
    v7 = sub_1000134A4();
    v6 = sub_100008AC0(&qword_10008B118);
    v8 = sub_100013508();
    v1 = sub_100013578();
    v9 = Set.init<A>(_:)(&v17, v7, v6, v8, v1);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v12 = objc_msgSend(v10, "initWithMailboxTypes:excludeTypes:mailboxObjectIDs:excludeMailboxes:", 0, 0, isa, 0);

    v20 = v12;
    swift_bridgeObjectRelease(v13);
    v4 = v20;
    v2 = v20;
    sub_1000133D4(a1);

    return v4;
  }
  else
  {
    sub_1000133D4(a1);
    return 0;
  }
}

uint64_t sub_10001335C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 5)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100013398(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 > 5)
    return swift_bridgeObjectRelease(a2);
  return result;
}

_QWORD *sub_1000133D4(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v2 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v4 + 48))(v2, 1))
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
  return a1;
}

unint64_t sub_1000134A4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B110;
  if (!qword_10008B110)
  {
    v0 = objc_opt_self(EMMailboxObjectID);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B110);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_100013508()
{
  unint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B120;
  if (!qword_10008B120)
  {
    v0 = sub_1000134A4();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B120);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100013578()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B128;
  if (!qword_10008B128)
  {
    v0 = sub_100008DF0(&qword_10008B118);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B128);
    return WitnessTable;
  }
  return v3;
}

void sub_1000135E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  Class isa;
  uint64_t v9;
  id v10;
  id v11;
  Class v12;
  const void *v13;
  id v14;
  const void *v15;
  const void *v18;
  id v19;
  void **v20;
  int v21;
  int v22;
  uint64_t (*v23)(uint64_t, void *);
  void *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  void **v27;
  int v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  id v34;
  void **aBlock;
  int v36;
  int v37;
  id (*v38)(uint64_t, void *);
  void *v39;
  id (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = sub_100008AC0((uint64_t *)&unk_10008B190);
  v45 = a1;
  v43 = a2;
  v44 = a3;
  v42 = v3;
  v11 = (id)objc_opt_self(EFFuture);
  swift_bridgeObjectRetain(a1);
  sub_100008AC0(&qword_10008BF20);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v10 = objc_msgSend(v7, "messageListItemsForItemIDs:", isa);

  sub_100008AC0((uint64_t *)&unk_10008B1A0);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);

  v14 = objc_msgSend(v11, "join:", v12);
  v40 = sub_100013920;
  v41 = 0;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = 0;
  v38 = sub_100013C1C;
  v39 = &unk_100082758;
  v13 = _Block_copy(&aBlock);
  v19 = objc_msgSend(v14, "then:");
  _Block_release(v13);

  v34 = v19;
  swift_retain();
  v4 = swift_allocObject(&unk_100082790, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  v32 = sub_100013E68;
  v33 = v4;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = 0;
  v30 = sub_100013E74;
  v31 = &unk_1000827A8;
  v15 = _Block_copy(&v27);
  swift_release();
  objc_msgSend(v19, "addSuccessBlock:", v15);
  _Block_release(v15);
  swift_retain();
  v5 = swift_allocObject(&unk_1000827E0, 32, 7);
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v25 = sub_100013FE8;
  v26 = v5;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = 0;
  v23 = sub_100013FF4;
  v24 = &unk_1000827F8;
  v18 = _Block_copy(&v20);
  swift_release();
  objc_msgSend(v19, "addFailureBlock:", v18);
  _Block_release(v18);

}

id sub_100013920(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  Class isa;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[3];

  v15[2] = a1;
  v12 = (id)objc_opt_self(EFFuture);
  v15[1] = a1;
  v13 = sub_10001434C();
  v14 = sub_1000143B0();
  v1 = sub_100014414();
  v15[0] = Sequence.compactMap<A>(_:)(sub_100013AD8, 0, v13, v14, v1);
  KeyPath = swift_getKeyPath(&unk_100073AC0);
  swift_retain();
  v7 = sub_100008AC0(&qword_10008B1D0);
  v8 = sub_100008AC0((uint64_t *)&unk_10008B1A0);
  v2 = sub_1000144D4();
  v10 = sub_10001990C((void (*)(char *, char *))sub_1000144A4, KeyPath, v7, v8, (uint64_t)&type metadata for Never, v2, (uint64_t)&protocol witness table for Never, v9);
  swift_release();
  swift_release();
  sub_10000A004(v15);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  v5 = objc_msgSend(v12, "join:", isa);

  return v5;
}

uint64_t sub_100013AD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  uint64_t result;
  _BYTE v5[32];
  uint64_t v6;

  v6 = a1;
  sub_10000A478(a1, (uint64_t)v5);
  v2 = sub_1000143B0();
  result = swift_dynamicCast(a2, v5, (char *)&type metadata for Any + 8, v2, 6);
  if ((result & 1) == 0)
    *a2 = 0;
  return result;
}

void sub_100013B58(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, "displayMessage");

}

uint64_t sub_100013BB8(id *a1, uint64_t a2)
{
  id v2;
  id v4;
  id v6;

  v4 = *a1;
  v2 = *a1;
  swift_retain(a2);
  v6 = v4;
  swift_getAtKeyPath(&v6, a2);

  return swift_release(a2);
}

id sub_100013C1C(uint64_t a1, void *a2)
{
  id v2;
  uint64_t (*v4)(void *);
  uint64_t v6;
  id v7;

  v4 = *(uint64_t (**)(void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  swift_retain(v6);
  v2 = a2;
  v7 = (id)v4(a2);

  swift_release(v6);
  return v7;
}

uint64_t sub_100013C88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100013CCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013CE4(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  _QWORD v9[4];

  v9[3] = a1;
  v9[1] = a2;
  v9[2] = a3;
  swift_unknownObjectRetain(a1);
  v9[0] = a1;
  v3 = sub_100008AC0(&qword_10008B1B0);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Swift.AnyObject + 8, v3, 6) & 1) != 0)
    v5 = v8;
  else
    v5 = 0;
  swift_retain();
  if (v5)
  {
    swift_bridgeObjectRetain(v5);
    ((void (*)(uint64_t, _QWORD))a2)(v5, 0);
    swift_bridgeObjectRelease(v5);
    swift_release();
    return swift_bridgeObjectRelease(v5);
  }
  else
  {
    a2(0);
    return swift_release();
  }
}

uint64_t sub_100013E2C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100013E68(uint64_t a1)
{
  uint64_t v1;

  return sub_100013CE4(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100013E74(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);
  uint64_t v5;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v3(a2);
  swift_unknownObjectRelease(a2);
  return swift_release(v5);
}

uint64_t sub_100013ED4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100013F18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013F30(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  swift_retain(a3);
  swift_errorRetain(a1);
  a2(0, a1);
  swift_errorRelease(a1);
  return swift_release(a3);
}

uint64_t sub_100013FAC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100013FE8(uint64_t a1)
{
  uint64_t v1;

  return sub_100013F30(a1, *(void (**)(_QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100013FF4(uint64_t a1, void *a2)
{
  id v2;
  void (*v4)(void *);
  uint64_t v6;

  v4 = *(void (**)(void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  swift_retain(v6);
  v2 = a2;
  v4(a2);
  swift_errorRelease(a2);
  return swift_release(v6);
}

uint64_t sub_100014054(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100014098(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10001418C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  Class isa;
  Class v6;

  swift_bridgeObjectRetain(a1);
  if (a1)
  {
    sub_1000142E8();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v6 = isa;
  }
  else
  {
    v6 = 0;
  }
  swift_errorRetain(a2);
  if (a2)
  {
    v3 = _convertErrorToNSError(_:)(a2);
    swift_errorRelease(a2);
    v4 = (void *)v3;
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v6);

}

uint64_t sub_1000142A4()
{
  uint64_t v0;
  uint64_t v2;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

void sub_1000142E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10001418C(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_1000142E8()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B460;
  if (!qword_10008B460)
  {
    v0 = objc_opt_self(EMMessage);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B460);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_10001434C()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B1B8;
  if (!qword_10008B1B8)
  {
    v0 = objc_opt_self(NSArray);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B1B8);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_1000143B0()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B1C0;
  if (!qword_10008B1C0)
  {
    v0 = objc_opt_self(EMThread);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B1C0);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_100014414()
{
  unint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B1C8;
  if (!qword_10008B1C8)
  {
    v0 = sub_10001434C();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSArray, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B1C8);
    return WitnessTable;
  }
  return v3;
}

const char *sub_100014484()
{
  return "displayMessage";
}

void sub_100014490(id *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100013B58(a1, a2);
}

uint64_t sub_1000144A4(id *a1)
{
  uint64_t v2;

  return sub_100013BB8(a1, v2);
}

unint64_t sub_1000144D4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B1D8;
  if (!qword_10008B1D8)
  {
    v0 = sub_100008DF0(&qword_10008B1D0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B1D8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100014544(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *object;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v16 = a1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.mobilemail.mailwidgetextension", 0x28uLL, 1);
  v14 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v15 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease(object);
  sub_100014668(a1);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v11 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease(v11);
  v13 = v14;
  v12 = v15;
  swift_bridgeObjectRetain(v15);
  sub_1000090EC((uint64_t)&v14);
  v6 = String.init(stringInterpolation:)(v13, v12);
  return Logger.init(subsystem:category:)(v2._countAndFlagsBits, v2._object, v6, v7);
}

uint64_t sub_100014668(uint64_t a1)
{
  Swift::String v1;
  void *object;

  v1._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = v1._object;
  String.append(_:)(v1);
  return swift_bridgeObjectRelease(object);
}

BOOL sub_10001469C(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t sub_100014770(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  if (a2)
  {
    if (a2 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  v3 = v4;
  return Hasher.combine<A>(_:)(&v3, &type metadata for Int, &protocol witness table for Int);
}

uint64_t sub_100014818(char a1)
{
  unint64_t v1;
  _BYTE v3[9];

  v3[1] = a1;
  v3[0] = a1;
  v1 = sub_100014860();
  return _hashValue<A>(for:)(v3, &unk_1000828C8, v1);
}

unint64_t sub_100014860()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B1E0;
  if (!qword_10008B1E0)
  {
    WitnessTable = swift_getWitnessTable(&unk_100073B94, &unk_1000828C8);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B1E0);
    return WitnessTable;
  }
  return v2;
}

BOOL sub_1000148CC(char *a1, char *a2)
{
  return sub_10001469C(*a1, *a2);
}

uint64_t sub_1000148EC()
{
  char *v0;

  return sub_100014818(*v0);
}

uint64_t sub_100014904(uint64_t a1)
{
  char *v1;

  return sub_100014770(a1, *v1);
}

void sub_10001491C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  _BYTE *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  id v17;
  _QWORD v18[2];
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  char *v74;

  v53 = a2;
  v61 = a1;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v70 = 0;
  v71 = 0;
  v68 = 0;
  v69 = 0;
  v58 = 0;
  v54 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v54);
  v57 = (char *)v18 - v56;
  v59 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B6D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v58);
  v60 = (uint64_t)v18 - v59;
  v62 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v2) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(v61);
  v63 = (uint64_t)v18 - v62;
  v64 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (void *)__chkstk_darwin(v3);
  v65 = (_QWORD *)((char *)v18 - v64);
  v74 = (char *)v18 - v64;
  v73 = v5;
  v66 = objc_msgSend(v5, "mailbox");
  if (!v66)
  {
    v6 = sub_100014FA0();
    v50 = swift_allocError(&unk_1000828C8, v6, 0, 0);
    *v7 = 1;
    swift_willThrow();
    v51 = v50;
LABEL_20:
    v18[1] = v51;

    return;
  }
  v52 = v66;
  v48 = v66;
  v72 = v66;
  v8 = v66;
  v49 = objc_msgSend(v48, "identifier");
  if (v49)
  {
    v47 = v49;
    v42 = v49;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v44 = v9;

    v45 = v43;
    v46 = v44;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  v40 = v46;
  v41 = v45;
  if (!v46)
  {

    v10 = sub_100014FA0();
    v37 = swift_allocError(&unk_1000828C8, v10, 0, 0);
    *v11 = 0;
    swift_willThrow();

    v51 = v37;
    goto LABEL_20;
  }
  v38 = v41;
  v39 = v40;
  v33 = v40;
  v34 = v41;
  v70 = v41;
  v71 = v40;

  v12 = v48;
  sub_10001500C(v48);
  v35 = v14;
  v36 = v13;
  if (v13 == 6)
  {
    v15 = sub_100014FA0();
    v30 = swift_allocError(&unk_1000828C8, v15, 0, 0);
    *v16 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease(v33);

    v51 = v30;
    goto LABEL_20;
  }
  v31 = v35;
  v32 = v36;
  v28 = v36;
  v29 = v35;
  v68 = v35;
  v69 = v36;
  swift_bridgeObjectRetain(v33);
  v67 = objc_msgSend(v61, "mailbox");
  if (v67)
  {
    v23 = &v67;
    v24 = v67;
    v17 = v67;
    sub_1000119D0(v23);
    v25 = sub_100067F94();

    v27 = v25;
  }
  else
  {
    v26 = 0;
    sub_1000119D0(&v67);
    v27 = v26;
  }
  v21 = v27;
  v22 = objc_msgSend(v48, "url");
  if (v22)
  {
    v20 = v22;
    v19 = v22;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v60, v57, v54);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v60, 0, 1, v54);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v60, 1, 1, v54);
  }
  sub_100016CD8(v34, v33, v21, v29, v28, v60, v63);
  sub_10000D3B8(v63, (uint64_t)v65);
  swift_bridgeObjectRelease(v33);

  sub_10000D0CC((uint64_t)v65, v53);
  sub_1000133D4(v65);
}

unint64_t sub_100014FA0()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B1E8;
  if (!qword_10008B1E8)
  {
    WitnessTable = swift_getWitnessTable(&unk_100073B54, &unk_1000828C8);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B1E8);
    return WitnessTable;
  }
  return v2;
}

void sub_10001500C(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v3 = a1;
  v2 = objc_msgSend(a1, "kind");
  if ((unint64_t)v2 <= 7)
    __asm { BR              X8 }
  v1 = v2;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for MFIntentMailboxKind, &v1, &type metadata for MFIntentMailboxKind, &type metadata for Int);
  __break(1u);
  JUMPOUT(0x100015250);
}

uint64_t sub_1000152C4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_10001530C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t KeyPath;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;

  v79 = a4;
  v96 = a1;
  v95 = a2;
  v94 = a3;
  v113 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v85 = 0;
  v81 = type metadata accessor for URL(0);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = (*(_QWORD *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v81);
  v84 = (char *)v35 - v83;
  v86 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B6D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v85);
  v87 = (uint64_t)v35 - v86;
  v88 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v89 = (char *)v35 - v88;
  v90 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v91 = (char *)v35 - v90;
  v92 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v8);
  v93 = (uint64_t)v35 - v92;
  v97 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v10) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __chkstk_darwin(v96);
  v98 = (uint64_t)v35 - v97;
  v99 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = __chkstk_darwin(v11);
  v100 = (uint64_t)v35 - v99;
  v101 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = __chkstk_darwin(v13);
  v102 = (_QWORD *)((char *)v35 - v101);
  v113 = (char *)v35 - v101;
  v112 = v15;
  v110 = v16;
  v111 = v17;
  if (!v17)
  {
    v70 = (id)NSStringFromEMSmartMailboxType(8, 7);
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v72 = v18;
    v103 = v96;
    KeyPath = swift_getKeyPath(&unk_100073B00);
    swift_retain();
    v74 = sub_100008AC0(&qword_10008B1F0);
    v75 = sub_1000134A4();
    v19 = sub_100015E04();
    v20 = v80;
    v21 = sub_10001990C((void (*)(char *, char *))sub_1000144A4, KeyPath, v74, v75, (uint64_t)&type metadata for Never, v19, (uint64_t)&protocol witness table for Never, v76);
    v77 = v20;
    v78 = v21;
    if (!v20)
    {
      v68 = v78;
      swift_release();
      swift_release();
      sub_10001335C(v95, v94);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v93, 1, 1, v81);
      sub_100016CD8(v71, v72, v68, v95, v94, v93, v100);

      sub_10000D3B8(v100, (uint64_t)v102);
      v69 = v77;
LABEL_28:
      v35[1] = v69;
      sub_10000D0CC((uint64_t)v102, v79);
      sub_100013398(v95, v94);
      swift_bridgeObjectRelease(v96);
      return sub_1000133D4(v102);
    }
    __break(1u);
    goto LABEL_30;
  }
  if (v94 != 1 && v94 - 2 <= 3)
  {
    v32 = sub_1000125A4();
    v36 = swift_allocError(&unk_100081B08, v32, 0, 0);
    *v33 = 3;
    swift_willThrow();
    v48 = v36;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain(v96);
  v66 = &v108;
  v108 = v96;
  v64 = sub_100008AC0(&qword_10008B1F0);
  v65 = sub_100015E04();
  Collection.first.getter(&v109, v64, v65);
  sub_10000A004(v66);
  v67 = v109;
  if (!v109)
    goto LABEL_26;
  v63 = v67;
  v62 = v67;
  v107 = v67;
  v22 = sub_100015E74();
  if (Array.count.getter(v96, v22) != 1)
  {

LABEL_26:
    v30 = sub_1000125A4();
    v37 = swift_allocError(&unk_100081B08, v30, 0, 0);
    *v31 = 4;
    swift_willThrow();
    v48 = v37;
    goto LABEL_31;
  }
  v60 = objc_msgSend(v62, "objectID");
  v61 = objc_msgSend(v60, "url");
  if (v61)
  {
    v59 = v61;
    v58 = v61;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v89, v84, v81);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v89, 0, 1, v81);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v89, 1, 1, v81);
  }
  sub_100015ED8(v89, v91);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v91, 1, v81) == 1)
  {
    v55 = 0;
    sub_100015F94((uint64_t)v91);
    v56 = v55;
    v57 = v55;
  }
  else
  {
    v53 = URL.absoluteString.getter();
    v54 = v24;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v81);
    v56 = v53;
    v57 = v54;
  }
  v51 = v57;
  v52 = v56;
  if (v57)
  {
    v49 = v52;
    v50 = v51;
    v42 = v51;
    v43 = v52;
    v105 = v52;
    v106 = v51;
    v104 = v96;
    v44 = swift_getKeyPath(&unk_100073B00);
    swift_retain();
    v27 = sub_1000134A4();
    v28 = v80;
    v29 = sub_10001990C((void (*)(char *, char *))sub_1000144A4, v44, v64, v27, (uint64_t)&type metadata for Never, v65, (uint64_t)&protocol witness table for Never, v76);
    v45 = v28;
    v46 = v29;
    if (!v28)
    {
      v40 = v46;
      swift_release();
      swift_release();
      sub_10001335C(v95, v94);
      v41 = objc_msgSend(v62, "externalURL");
      if (v41)
      {
        v39 = v41;
        v38 = v41;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v87, v84, v81);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v87, 0, 1, v81);

      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v87, 1, 1, v81);
      }
      sub_100016CD8(v43, v42, v40, v95, v94, v87, v98);
      sub_10000D3B8(v98, (uint64_t)v102);

      v69 = v45;
      goto LABEL_28;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v25 = sub_1000125A4();
  v47 = swift_allocError(&unk_100081B08, v25, 0, 0);
  *v26 = 3;
  swift_willThrow();

  v48 = v47;
LABEL_31:
  v35[0] = v48;
  sub_100013398(v95, v94);
  return (_QWORD *)swift_bridgeObjectRelease(v96);
}

unint64_t sub_100015E04()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B1F8;
  if (!qword_10008B1F8)
  {
    v0 = sub_100008DF0(&qword_10008B1F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B1F8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100015E74()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B200;
  if (!qword_10008B200)
  {
    v0 = objc_opt_self(EMMailbox);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B200);
    return ObjCClassMetadata;
  }
  return v3;
}

void *sub_100015ED8(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B6D0);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_100015F94(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

const char *sub_100016004()
{
  return "objectID";
}

void sub_100016010(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, "objectID");

}

void sub_100016070(id *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100016010(a1, a2);
}

id *sub_100016084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id *result;
  void (*v13)(char *, uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;

  v22 = a3;
  v24 = a1;
  v23 = a2;
  v35 = 0;
  v33 = 0;
  v34 = 0;
  v25 = type metadata accessor for URLComponents(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(v24);
  v28 = (char *)&v13 - v27;
  v29 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v3);
  v30 = (char *)&v13 - v29;
  v35 = (char *)&v13 - v29;
  v33 = v5;
  v34 = v6;
  v31 = v6;
  if (v6 <= 5)
    __asm { BR              X8 }
  v32 = 0;
  URLComponents.init()();
  v19 = (void *)EMAppleMailboxURLScheme;
  v7 = EMAppleMailboxURLScheme;
  v20 = sub_100016358(v19);
  v21 = v8;

  URLComponents.scheme.setter(v20, v21);
  if (v32)
  {
    v14 = v32;
    v9 = v32;
    v15 = sub_100016358(v14);
    v16 = v10;

    v17 = v15;
    v18 = v16;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  URLComponents.host.setter(v17, v18);
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v28, v30, v25);
  URLComponents.url.getter(v11);
  v13 = *(void (**)(char *, uint64_t))(v26 + 8);
  v13(v28, v25);
  v13(v30, v25);
  result = &v32;
  sub_1000119D0(&v32);
  return result;
}

uint64_t sub_100016358(void *a1)
{
  id v1;
  uint64_t v4;

  v1 = a1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);

  return v4;
}

uint64_t sub_1000163A4(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *sub_100016554(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

void *_s14descr1000828D9V5ErrorOMa()
{
  return &unk_1000828C8;
}

unint64_t sub_1000167AC()
{
  return sub_1000167C0();
}

unint64_t sub_1000167C0()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B208;
  if (!qword_10008B208)
  {
    WitnessTable = swift_getWitnessTable(&unk_100073B2C, &unk_1000828C8);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B208);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_10001682C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *v8;
  uint64_t countAndFlagsBits;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *object;
  uint64_t v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;

  v29 = (Swift::String)0;
  v32 = v0;
  v24 = (void *)sub_1000173B4();
  if (v24)
  {
    v20 = objc_msgSend(v24, "ef_publicDescription");
    v21._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v21._object = v1;

    v22 = v21;
  }
  else
  {
    v22 = (Swift::String)0;
  }
  v30 = v22;
  if (v22._object)
  {
    v31 = v30;
  }
  else
  {
    v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<nil>", 5uLL, 1);
    sub_1000090EC((uint64_t)&v30);
  }
  countAndFlagsBits = v31._countAndFlagsBits;
  object = v31._object;
  v29 = v31;
  v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(10);
  v28 = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("id:", 3uLL, 1);
  v8 = v3._object;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease(v8);
  v26[0] = countAndFlagsBits;
  v26[1] = object;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v26);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", name:", 7uLL, 1);
  v10 = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v23 + 24);
  v12 = *(_QWORD *)(v23 + 32);
  sub_10001335C(v11, v12);
  v13 = sub_100017EBC(v11, v12);
  v14 = v5;
  sub_100013398(v11, v12);
  v25[0] = v13;
  v25[1] = v14;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v25);
  sub_1000090EC((uint64_t)v25);
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v15 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease(v15);
  v17 = v27;
  v16 = v28;
  swift_bridgeObjectRetain(v28);
  sub_1000090EC((uint64_t)&v27);
  v19 = String.init(stringInterpolation:)(v17, v16);
  swift_bridgeObjectRelease(object);
  return v19;
}

uint64_t sub_100016B18()
{
  uint64_t v0;
  unint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = v0;
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  sub_10001335C(v9, v10);
  if (v10)
  {
    if (v10 == 1)
    {
      sub_100013398(v9, 1uLL);
    }
    else
    {
      if (v10 - 2 <= 3)
      {
        sub_100013398(v9, v10);
        v3 = 1;
        return v3 & 1;
      }
      sub_100013398(v9, v10);
    }
  }
  else
  {
    sub_100013398(v9, 0);
  }
  v7 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain(v7);
  if (v7)
  {
    swift_bridgeObjectRetain(v7);
    v11 = v7;
    v4 = sub_100008AC0(&qword_10008B118);
    v1 = sub_100018214();
    v5 = Collection.isEmpty.getter(v4, v1);
    sub_10000A004(&v11);
    swift_bridgeObjectRelease(v7);
    v6 = v5 & 1;
  }
  else
  {
    v6 = 2;
  }
  v12 = v6;
  if (v6 == 2)
    v13 = 1;
  else
    v13 = v12 & 1;
  v3 = v13 ^ 1;
  return v3 & 1;
}

_QWORD *sub_100016CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  const void *v21;
  unint64_t v22;
  char *v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  const void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v25 = a7;
  v31 = a1;
  v32 = a2;
  v33 = a3;
  v37 = a4;
  v36 = a5;
  v35 = (const void *)a6;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v7 = sub_100008AC0(&qword_10008B6D0);
  v26 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v7);
  v39 = (char *)&v25 - v26;
  v27 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v25 - v26);
  v28 = (char *)&v25 - v27;
  v38 = 0;
  v29 = type metadata accessor for Mailbox(0);
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v25 - v30);
  v48 = (char *)&v25 - v30;
  v46 = v10;
  v47 = v9;
  v45 = v11;
  v43 = v12;
  v44 = v13;
  v42 = v14;
  swift_bridgeObjectRetain(v9);
  v15 = v33;
  v16 = v32;
  v17 = v34;
  *v34 = v31;
  v17[1] = v16;
  swift_bridgeObjectRetain(v15);
  v18 = v37;
  v19 = v36;
  v34[2] = v33;
  sub_10001335C(v18, v19);
  v20 = v34;
  v21 = v35;
  v22 = v36;
  v23 = v39;
  v34[3] = v37;
  v20[4] = v22;
  sub_1000182E8(v21, v23);
  sub_10001335C(v37, v36);
  v40 = type metadata accessor for URL(v38);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v41 + 48))(v39, 1) == 1)
  {
    sub_100016084(v37, v36, (uint64_t)v28);
    sub_100015F94((uint64_t)v39);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v28, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v28, 0, 1, v40);
  }
  sub_100013398(v37, v36);
  sub_100015ED8(v28, (char *)v34 + *(int *)(v29 + 28));
  sub_10000D0CC((uint64_t)v34, v25);
  sub_100015F94((uint64_t)v35);
  sub_100013398(v37, v36);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v32);
  return sub_1000133D4(v34);
}

uint64_t sub_100016F6C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  char v5;

  sub_10001335C(a1, a2);
  sub_10001335C(a3, a4);
  if (a2 <= 5)
    __asm { BR              X8 }
  if (a4 <= 5)
  {
    sub_100013398(a1, a2);
    sub_100013398(a3, a4);
    v5 = 0;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    if ((static String.== infix(_:_:)(a1, a2, a3, a4) & 1) != 0)
    {
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a2);
      sub_100013398(a1, a2);
      sub_100013398(a3, a4);
      v5 = 1;
    }
    else
    {
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a2);
      sub_100013398(a1, a2);
      sub_100013398(a3, a4);
      v5 = 0;
    }
  }
  return v5 & 1;
}

uint64_t sub_100017384(uint64_t a1, uint64_t a2)
{
  return sub_100016F6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) & 1;
}

uint64_t sub_1000173B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v0;
  v6 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v6);
  if (!v6)
    return 0;
  swift_bridgeObjectRetain(v6);
  v7 = v6;
  v3 = sub_100008AC0(&qword_10008B118);
  v1 = sub_100018214();
  Collection.first.getter(&v8, v3, v1);
  sub_10000A004(&v7);
  v4 = v8;
  swift_bridgeObjectRelease(v6);
  return v4;
}

_QWORD *sub_100017480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v28 = a7;
  v26 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v29 = a6;
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v7 = sub_100008AC0(&qword_10008B6D0);
  v17 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v7);
  v25 = (uint64_t)&v16 - v17;
  v19 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64);
  v18 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v29);
  v27 = (uint64_t)&v16 - v18;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (const void *)__chkstk_darwin(v8);
  v30 = (uint64_t *)((char *)&v16 - v20);
  v37 = (char *)&v16 - v20;
  v35 = v26;
  v36 = v10;
  v34 = v11;
  v32 = v12;
  v33 = v13;
  v31 = v9;
  sub_1000182E8(v9, v14);
  sub_100016CD8(v26, v21, v22, v23, v24, v25, v27);
  sub_10000D3B8(v27, (uint64_t)v30);
  sub_10000D0CC((uint64_t)v30, v28);
  sub_100015F94(v29);
  return sub_1000133D4(v30);
}

_QWORD *sub_100017618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  v0 = sub_100008AC0(&qword_10008B6D0);
  v4 = (*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v0);
  v11 = (uint64_t)&v3 - v4;
  v10 = 0;
  v6 = type metadata accessor for Mailbox(0);
  v5 = qword_10008DEC0;
  sub_100003474(v6, qword_10008DEC0);
  v8 = sub_1000034E4(v6, (uint64_t)v5);
  v7 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VIP", 3uLL, 1);
  v1 = type metadata accessor for URL(v10);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 56))(v11, v7);
  return sub_100016CD8(v9._countAndFlagsBits, (uint64_t)v9._object, v10, v10, 4uLL, v11, v8);
}

uint64_t sub_100017718()
{
  uint64_t v0;

  if (qword_10008AA70 != -1)
    swift_once(&qword_10008AA70, sub_100017618);
  v0 = type metadata accessor for Mailbox(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008DEC0);
}

_QWORD *sub_100017778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  Swift::String v9;
  unint64_t v10;
  uint64_t v11;

  v0 = sub_100008AC0(&qword_10008B6D0);
  v4 = (*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v0);
  v11 = (uint64_t)&v3 - v4;
  v10 = 0;
  v6 = type metadata accessor for Mailbox(0);
  v5 = qword_10008DED8;
  sub_100003474(v6, qword_10008DED8);
  v8 = sub_1000034E4(v6, (uint64_t)v5);
  v7 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ALL_INBOXES", 0xBuLL, 1);
  v1 = type metadata accessor for URL(v10);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 56))(v11, v7);
  return sub_100016CD8(v9._countAndFlagsBits, (uint64_t)v9._object, v10, v10, v10, v11, v8);
}

uint64_t sub_100017874()
{
  uint64_t v0;

  if (qword_10008AA78 != -1)
    swift_once(&qword_10008AA78, sub_100017778);
  v0 = type metadata accessor for Mailbox(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008DED8);
}

uint64_t sub_1000178D4()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  sub_10001335C(v2, v3);
  if (v3 <= 5)
    __asm { BR              X8 }
  return v2;
}

id sub_100017E68()
{
  return objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
}

uint64_t sub_100017E94()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t sub_100017EBC(uint64_t a1, unint64_t a2)
{
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unsigned __int8 v13;

  if (a2 <= 5)
    __asm { BR              X8 }
  swift_bridgeObjectRetain(a2);
  v12 = objc_msgSend((id)objc_opt_self(EFDevice), "currentDevice");
  v13 = objc_msgSend(v12, "isInternal");

  if ((v13 & 1) != 0)
  {
    v7 = (id)objc_opt_self(EFPrivacy);
    swift_bridgeObjectRetain(a2);
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v9 = objc_msgSend(v7, "partiallyRedactedStringForString:", v8);

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;
  }
  else
  {
    v3 = (id)objc_opt_self(EFPrivacy);
    swift_bridgeObjectRetain(a2);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v5 = objc_msgSend(v3, "fullyRedactedStringForString:", v4);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v11 = v6;
  }
  swift_bridgeObjectRelease(a2);
  return v11;
}

unint64_t sub_100018214()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B210;
  if (!qword_10008B210)
  {
    v0 = sub_100008DF0(&qword_10008B118);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B210);
    return WitnessTable;
  }
  return v3;
}

uint64_t type metadata accessor for Mailbox(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008B270;
  if (!qword_10008B270)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Mailbox);
  return v2;
}

void *sub_1000182E8(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B6D0);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_1000183A4()
{
  return sub_10001682C();
}

uint64_t sub_1000183B8(uint64_t a1)
{
  return sub_100069324(a1, (uint64_t)&off_1000829E0);
}

uint64_t sub_1000183D8()
{
  uint64_t v0;

  return sub_100017EBC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1000183F4(uint64_t a1)
{
  return sub_100069324(a1, (uint64_t)&off_1000829D0);
}

unint64_t sub_100018414(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  void *__dst;
  char *__src;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v17;

  v17 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v17 & 0x20000) != 0)
  {
    v12 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v12;
    return *(_QWORD *)a1 + ((v17 + 16) & ~(unint64_t)v17);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v10 = a2[1];
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(a1 + 8) = v10;
    v11 = a2[2];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(a1 + 16) = v11;
    if ((unint64_t)a2[4] <= 5)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = a2[3];
      v9 = a2[4];
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)(a1 + 32) = v9;
    }
    __dst = (void *)(a1 + *(int *)(a3 + 28));
    __src = (char *)a2 + *(int *)(a3 + 28);
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(__src, 1))
    {
      v3 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v8 + 16))(__dst, __src, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
    }
    return a1;
  }
}

uint64_t sub_1000185FC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v3 = (char *)a1 + *(int *)(a2 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 48))(v3, 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  return result;
}

uint64_t sub_1000186C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *__dst;
  void *__src;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v11);
  *(_QWORD *)(a1 + 8) = v11;
  v13 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v13);
  *(_QWORD *)(a1 + 16) = v13;
  if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(a1 + 32) = v9;
  }
  __dst = (void *)(a1 + *(int *)(a3 + 28));
  __src = (void *)(a2 + *(int *)(a3 + 28));
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v8 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(__dst, __src, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10001883C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__src;
  void *__dst;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v16);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v16;
  swift_bridgeObjectRelease(v3);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v19);
  *(_QWORD *)(a1 + 16) = v19;
  swift_bridgeObjectRelease(v18);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 32) <= 5uLL)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(a1 + 32) = v13;
    }
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v14);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v14;
    swift_bridgeObjectRelease(v4);
  }
  __dst = (void *)(a1 + *(int *)(a3 + 28));
  __src = (void *)(a2 + *(int *)(a3 + 28));
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  if (((unsigned int (*)(void *, uint64_t))v12)(__dst, 1))
  {
    if (v12(__src, 1, v10))
    {
      v6 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(__dst, __src, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
  }
  else if (v12(__src, 1, v10))
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(__dst, v10);
    v5 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 24))(__dst, __src, v10);
  }
  return a1;
}

uint64_t sub_100018B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *__dst;
  void *__src;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  __dst = (void *)(a1 + *(int *)(a3 + 28));
  __src = (void *)(a2 + *(int *)(a3 + 28));
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v8 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(__dst, __src, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100018C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__src;
  void *__dst;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(void *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRelease(v6);
  }
  __dst = (void *)(a1 + *(int *)(a3 + 28));
  __src = (void *)(a2 + *(int *)(a3 + 28));
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
  if (((unsigned int (*)(void *, uint64_t))v14)(__dst, 1))
  {
    if (v14(__src, 1, v12))
    {
      v8 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(__dst, __src, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
  }
  else if (v14(__src, 1, v12))
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(__dst, v12);
    v7 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 40))(__dst, __src, v12);
  }
  return a1;
}

uint64_t sub_100018EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018ED0);
}

uint64_t sub_100018ED0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)&_mh_execute_header)
      v7 = *(_QWORD *)(a1 + 8);
    return (v7 + 1);
  }
  else
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 28), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t sub_100018FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018FCC);
}

uint64_t sub_100018FCC(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = a2 - 1;
  }
  else
  {
    result = sub_100008AC0(&qword_10008B6D0);
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t sub_100019080(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_100073BE0;
  v6[1] = &unk_100073BF8;
  v6[2] = &unk_100073C10;
  v4 = sub_100019150(319);
  v5 = v4;
  if (v1 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v4 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    return 0;
  }
  return v5;
}

uint64_t sub_100019150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008B280;
  if (!qword_10008B280)
  {
    v1 = type metadata accessor for URL(255);
    v5 = type metadata accessor for Optional(a1, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008B280);
      return v3;
    }
  }
  return v7;
}

uint64_t sub_1000191F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)(a2 + 8) <= 5uLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain(v3);
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_100019270(uint64_t result)
{
  if (*(_QWORD *)(result + 8) > 5uLL)
    return swift_bridgeObjectRelease(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_1000192B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 8) <= 5uLL)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v4 = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain(v4);
      *(_QWORD *)(a1 + 8) = v4;
    }
  }
  else if (*(_QWORD *)(a2 + 8) <= 5uLL)
  {
    sub_1000090EC(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain(v5);
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    swift_bridgeObjectRelease(v2);
  }
  return a1;
}

uint64_t sub_1000193B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 8) <= 5uLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else if (*(_QWORD *)(a2 + 8) <= 5uLL)
  {
    sub_1000090EC(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRelease(v2);
  }
  return a1;
}

uint64_t sub_100019494(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16))
    {
      v5 = *(_OWORD *)a1 + 2147483641;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 8) < (unint64_t)&_mh_execute_header)
        v4 = *(_QWORD *)(a1 + 8);
      v2 = v4 - 6;
      if (v4 - 6 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100019614(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFF9;
  if (a2 > 0x7FFFFFF9)
  {
    *(_OWORD *)result = a2 - 2147483642;
    if (a3 > 0x7FFFFFF9)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFF9)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

uint64_t sub_100019828(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008B2B8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 6);
}

uint64_t sub_100019868(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = sub_100008AC0(&qword_10008B2B8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, a2, 6);
}

void *type metadata accessor for Mailbox.Configuration()
{
  return &unk_1000829C0;
}

uint64_t sub_1000198C4(void *a1)
{
  uint64_t v1;

  swift_allocObject(v1, 24, 7);
  return sub_10001A784(a1);
}

uint64_t sub_10001990C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  void (*v19)(char *, _QWORD);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t AssociatedTypeWitness;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  Swift::Int v64;
  char v65;
  uint64_t v66;
  char v67;
  _QWORD v68[4];

  v33 = a1;
  v34 = a2;
  v57 = a3;
  v48 = a4;
  v35 = a5;
  v56 = a6;
  v38 = a8;
  v39 = "Fatal error";
  v40 = "Index out of bounds";
  v41 = "Swift/Collection.swift";
  v42 = "Range requires lowerBound <= upperBound";
  v43 = "Swift/Range.swift";
  v44 = "Index out of range";
  v68[3] = a3;
  v68[2] = a4;
  v68[1] = a5;
  v45 = *(_QWORD *)(a5 - 8);
  v46 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(a1);
  v47 = (char *)v18 - v46;
  v49 = 0;
  v50 = ((uint64_t (*)(void))swift_getAssociatedTypeWitness)();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v49);
  v53 = (char *)v18 - v52;
  v54 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v8);
  v55 = (char *)v18 - v54;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(v10);
  v59 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v60 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __chkstk_darwin(v57);
  v61 = (char *)v18 - v60;
  v62 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = __chkstk_darwin(v11);
  v63 = (char *)v18 - v62;
  v64 = dispatch thunk of Collection.count.getter(v13);
  if (v64)
  {
    v68[0] = ContiguousArray.init()(v48);
    v32 = type metadata accessor for ContiguousArray(0, v48);
    ContiguousArray.reserveCapacity(_:)(v64);
    result = dispatch thunk of Collection.startIndex.getter(v57, v56);
    if (v64 >= 0)
    {
      v30 = 0;
      for (i = v37; ; i = v21)
      {
        v28 = i;
        v29 = v30;
        if (v30 == v64)
          goto LABEL_17;
        if (v29 < 0 || v29 >= v64)
          goto LABEL_16;
        v66 = v29;
        if (v64 < 0)
          goto LABEL_15;
        if (v29 >= v64)
          break;
        v27 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          return result;
        }
        v67 = 0;
        v26 = v27;
LABEL_18:
        v25 = v26;
        if ((v67 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v61, v63, AssociatedTypeWitness);
          _expectEnd<A>(of:is:)(v36, v61, v57, v56);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v61, AssociatedTypeWitness);
          v22 = v68[0];
          swift_retain();
          swift_release();
          v23 = v22;
          v24 = v28;
          return v23;
        }
        v20 = &v65;
        v19 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v51 + 16))(v53);
        v19(v20, 0);
        v16 = v28;
        v33(v53, v47);
        v21 = v16;
        if (v16)
        {
          (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v63, AssociatedTypeWitness);
          sub_10001B7F0(v68);
          (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v38, v47, v35);
          return v18[1];
        }
        (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
        ContiguousArray.append(_:)(v55, v32);
        dispatch thunk of Collection.formIndex(after:)(v63, v57, v56);
        result = v21;
        v30 = v25;
      }
      LOBYTE(v17) = 2;
      _assertionFailure(_:_:file:line:flags:)(v39, 11, 2, v40, 19, 2, v41, 22, v17, 714, 0);
      __break(1u);
LABEL_15:
      LOBYTE(v17) = 2;
      _assertionFailure(_:_:file:line:flags:)(v39, 11, 2, v42, 39, 2, v43, 17, v17, 754, 0);
      __break(1u);
LABEL_16:
      LOBYTE(v17) = 2;
      _fatalErrorMessage(_:_:file:line:flags:)(v39, 11, 2, v44, 18, 2, v43, 17, v17, 305, 0);
      __break(1u);
LABEL_17:
      v66 = 0;
      v67 = 1;
      v26 = v29;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)(v39, 11, 2, v42, 39, 2, v43, 17, 2, 754, 0);
    __break(1u);
  }
  v23 = static Array._allocateUninitialized(_:)(0, v48);
  v24 = v37;
  return v23;
}

void sub_10001A0F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  Swift::String v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[12];
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  id v64;
  int v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  void (*v72)(uint64_t *);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  _QWORD *v81;
  id v82;
  id v83;
  uint64_t v84;
  void **aBlock;
  int v86;
  int v87;
  uint64_t (*v88)(uint64_t, void *, void *);
  void *v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v75 = a1;
  v74 = a2;
  v72 = a3;
  v73 = a4;
  v98 = 0;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v93 = 0;
  v92 = 0;
  v68 = 0;
  v83 = 0;
  v69 = sub_100008AC0(&qword_10008B2C0);
  v70 = (*(_QWORD *)(*(_QWORD *)(v69 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v69);
  v71 = (uint64_t *)&v39[-v70];
  v76 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v77 = *(_QWORD *)(v76 + 64);
  v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v75);
  v79 = &v39[-v78];
  v80 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v5);
  v81 = &v39[-v80];
  v98 = v7;
  v97 = v8;
  v95 = v9;
  v96 = v10;
  v94 = v4;
  v82 = sub_10001A7D4(v7);
  if (v82)
  {
    v66 = v82;
    v64 = v82;
    v11 = v82;
    v93 = v64;
    v65 = Set.isEmpty.getter(v74, &type metadata for String, &protocol witness table for String);
    sub_10000D0CC(v75, (uint64_t)v81);
    if ((v65 & 1) != 0)
    {
      v63 = 0;
    }
    else
    {
      v61 = v81[3];
      v60 = v81[4];
      sub_10001335C(v61, v60);
      v62 = sub_100016F6C(v61, v60, 0, 0);
      sub_100013398(v61, v60);
      v63 = v62;
    }
    v59 = v63;
    sub_1000133D4(v81);
    if ((v59 & 1) == 0)
    {

      goto LABEL_9;
    }
    v12 = v68;
    v54 = 0;
    v53 = sub_10001B624();
    v84 = v74;
    v55 = sub_100008AC0(&qword_10008B2D0);
    v56 = sub_10001B688();
    v13 = sub_10001B6EC();
    v58 = sub_10001990C((void (*)(char *, char *))sub_10001AB9C, 0, v55, v56, (uint64_t)&type metadata for Never, v13, (uint64_t)&protocol witness table for Never, v57);
    if (!v12)
    {
      v52 = sub_10001AC58(v58);
      v83 = v52;
      v14 = _allocateUninitializedArray<A>(_:)(2, v56);
      v15 = v52;
      v51 = v14;
      v50 = v16;
      *v16 = v64;
      v17 = v15;
      v18 = v51;
      v50[1] = v52;
      sub_1000073C4();
      v19 = sub_10001F604(v18);
      v20 = v93;
      v93 = v19;

LABEL_9:
      sub_100008AC0((uint64_t *)&unk_10008BF30);
      v41 = 0;
      v43 = sub_100015E74();
      v44 = v93;
      v21 = v93;
      v22 = sub_10001AB38();
      v42 = _allocateUninitializedArray<A>(_:)(v41, v22);
      v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Widget.DaemonDataSource.Mailboxes", 0x21uLL, 1);
      v49 = sub_10001F67C(v43, v44, v42, 8, v23._countAndFlagsBits, (uint64_t)v23._object);
      v92 = v49;
      v48 = *(id *)(v67 + 16);
      v24 = v48;
      swift_retain();
      sub_10000D0CC(v75, (uint64_t)v79);
      v25 = *(unsigned __int8 *)(v76 + 80);
      v45 = (v25 + 32) & ~v25;
      v26 = swift_allocObject(&unk_100082A28, v45 + v77, v25 | 7);
      v27 = v73;
      v28 = v45;
      v29 = v26;
      v30 = v79;
      v46 = v29;
      *(_QWORD *)(v29 + 16) = v72;
      *(_QWORD *)(v29 + 24) = v27;
      sub_10000D3B8((uint64_t)v30, v29 + v28);
      v90 = sub_10001B0D0;
      v91 = v46;
      aBlock = _NSConcreteStackBlock;
      v86 = 1107296256;
      v87 = 0;
      v88 = sub_10001B4A8;
      v89 = &unk_100082A40;
      v47 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v48, "performQuery:completionHandler:", v49, v47);
      _Block_release(v47);

      return;
    }
    __break(1u);
  }
  else
  {
    swift_retain();
    v31 = sub_1000125A4();
    v40 = 1;
    v32 = swift_allocError(&unk_100081B08, v31, 0, 0);
    v33 = v40;
    v34 = v32;
    v35 = v71;
    v37 = v36;
    v38 = v69;
    *v37 = 3;
    *v35 = v34;
    swift_storeEnumTagMultiPayload(v35, v38, v33);
    v72(v71);
    sub_10001AA28(v71);
    swift_release();
  }
}

uint64_t sub_10001A784(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v5;

  v2 = a1;
  *(_QWORD *)(v1 + 16) = a1;

  return v5;
}

id sub_10001A7D4(uint64_t a1)
{
  _QWORD *v1;
  id v3;
  NSString v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v11;
  unint64_t v12;

  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  sub_10001335C(v11, v12);
  if (!v12)
  {
    sub_100013398(v11, 0);
    return objc_msgSend((id)objc_opt_self(EMMailbox), "predicateForMailboxType:", 7);
  }
  if (v12 == 1)
  {
    sub_100013398(v11, 1uLL);
    return objc_msgSend((id)objc_opt_self(EMMailbox), "predicateForMailboxType:", 7);
  }
  if (v12 - 2 <= 3)
  {
    sub_100013398(v11, v12);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain(v12);
    sub_10001B624();
    v8 = sub_10001B688();
    v7 = _allocateUninitializedArray<A>(_:)(2, v8);
    v6 = v1;
    *v1 = objc_msgSend((id)objc_opt_self(EMMailbox), "predicateForMailboxType:", 0);
    v3 = (id)objc_opt_self(EMMailbox);
    swift_bridgeObjectRetain(v12);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    v5 = objc_msgSend(v3, "predicateForMailboxName:", v4);

    v6[1] = v5;
    sub_1000073C4();
    v9 = sub_10001F604(v7);
    swift_bridgeObjectRelease(v12);
    sub_100013398(v11, v12);
    return v9;
  }
}

_QWORD *sub_10001AA28(_QWORD *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_100008AC0(&qword_10008B2C0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    swift_errorRelease(*a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    if (a1[4] > 5uLL)
      swift_bridgeObjectRelease(a1[4]);
    v3 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
    v4 = type metadata accessor for URL(0);
    v5 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t))(v5 + 48))(v3, 1))
      (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  }
  return a1;
}

unint64_t sub_10001AB38()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B2C8;
  if (!qword_10008B2C8)
  {
    v0 = objc_opt_self(NSSortDescriptor);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B2C8);
    return ObjCClassMetadata;
  }
  return v3;
}

id sub_10001AB9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (id)objc_opt_self(EMMailbox);
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "predicateForMailboxAccountIdentifier:topLevelOnly:", v5, 0);

  result = v6;
  *a2 = v6;
  return result;
}

id sub_10001AC58(uint64_t a1)
{
  Class isa;
  id v4;

  sub_10001B688();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "orPredicateWithSubpredicates:", isa);

  swift_bridgeObjectRelease(a1);
  return v4;
}

void sub_10001ACD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void **aBlock;
  int v44;
  int v45;
  uint64_t (*v46)(uint64_t);
  void *v47;
  uint64_t (*v48)();
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v30 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v24 = a5;
  v54 = 0;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v34 = 0;
  v37 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v37 - 8);
  v21 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v36 = (char *)&v20 - v21;
  v40 = type metadata accessor for DispatchQoS(v5);
  v38 = *(_QWORD *)(v40 - 8);
  v22 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v34);
  v39 = (char *)&v20 - v22;
  v25 = *(_QWORD *)(type metadata accessor for Mailbox(v6) - 8);
  v26 = *(_QWORD *)(v25 + 64);
  v23 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v34);
  v32 = (uint64_t)&v20 - v23;
  v54 = v7;
  v53 = v8;
  v51 = v9;
  v52 = v10;
  v50 = v11;
  sub_100008CF0();
  v42 = (id)static OS_dispatch_queue.main.getter();
  swift_errorRetain(v27);
  swift_retain();
  swift_bridgeObjectRetain(v30);
  sub_10000D0CC(v24, v32);
  v12 = *(unsigned __int8 *)(v25 + 80);
  v31 = (v12 + 48) & ~v12;
  v13 = swift_allocObject(&unk_100082A78, v31 + v26, v12 | 7);
  v14 = v28;
  v15 = v29;
  v16 = v30;
  v17 = v31;
  v18 = (_QWORD *)v13;
  v19 = v32;
  v33 = v18;
  v18[2] = v27;
  v18[3] = v14;
  v18[4] = v15;
  v18[5] = v16;
  sub_10000D3B8(v19, (uint64_t)v18 + v17);
  v48 = sub_10001B958;
  v49 = v33;
  aBlock = _NSConcreteStackBlock;
  v44 = 1107296256;
  v45 = 0;
  v46 = sub_10000A4EC;
  v47 = &unk_100082A90;
  v41 = _Block_copy(&aBlock);
  swift_release();
  sub_100006E48();
  sub_100006E5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v34, v39, v36, v41);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  _Block_release(v41);

}

uint64_t sub_10001AFA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = v9 + *(_QWORD *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v8);
}

void sub_10001B0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 80);
  sub_10001ACD0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v3 + 32) & ~v3));
}

uint64_t sub_10001B124(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void (*v37)(_QWORD *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v44 = a1;
  v37 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v34 = 0;
  v46 = 0;
  v45 = 0;
  v5 = type metadata accessor for Mailbox(0);
  v35 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v36 = (_QWORD *)((char *)v25 - v35);
  v53 = (char *)v25 - v35;
  v41 = sub_100008AC0(&qword_10008B2C0);
  v42 = (*(_QWORD *)(*(_QWORD *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v44);
  v43 = (_QWORD *)((char *)v25 - v42);
  v52 = v6;
  v50 = v7;
  v51 = v8;
  v49 = v9;
  v48 = v10;
  swift_errorRetain(v6);
  if (v44)
  {
    v33 = v44;
    v31 = v44;
    v45 = v44;
    swift_retain();
    swift_errorRetain(v31);
    v11 = v41;
    v12 = v43;
    *v43 = v31;
    swift_storeEnumTagMultiPayload(v12, v11, 1);
    v37(v43);
    sub_10001AA28(v43);
    swift_release();
    return swift_errorRelease(v31);
  }
  else
  {
    swift_bridgeObjectRetain(v39);
    if (v39)
    {
      v32 = v39;
      v22 = v34;
      v26 = v39;
      v47 = v39;
      swift_bridgeObjectRetain(v39);
      v27 = *(_QWORD *)(v40 + 24);
      v28 = *(_QWORD *)(v40 + 32);
      sub_10001335C(v27, v28);
      sub_10001530C(v26, v27, v28, (uint64_t)v36);
      v29 = v22;
      if (v22)
      {
        v25[0] = v29;
        swift_errorRetain(v29);
        v46 = v25[0];
        swift_retain();
        swift_errorRetain(v25[0]);
        v23 = v41;
        v24 = v43;
        *v43 = v25[0];
        swift_storeEnumTagMultiPayload(v24, v23, 1);
        v37(v43);
        sub_10001AA28(v43);
        swift_release();
        swift_errorRelease(v25[0]);
        swift_errorRelease(v25[0]);
      }
      else
      {
        swift_retain();
        sub_10000D0CC((uint64_t)v36, (uint64_t)v43);
        swift_storeEnumTagMultiPayload(v43, v41, 0);
        v37(v43);
        sub_10001AA28(v43);
        swift_release();
        sub_1000133D4(v36);
      }
      return swift_bridgeObjectRelease(v26);
    }
    else
    {
      swift_retain();
      v14 = sub_1000125A4();
      v30 = 1;
      v15 = swift_allocError(&unk_100081B08, v14, 0, 0);
      v16 = v30;
      v17 = v15;
      v18 = v43;
      v20 = v19;
      v21 = v41;
      *v20 = 0;
      *v18 = v17;
      swift_storeEnumTagMultiPayload(v18, v21, v16);
      v37(v43);
      sub_10001AA28(v43);
      return swift_release();
    }
  }
}

uint64_t sub_10001B4A8(uint64_t a1, void *a2, void *a3)
{
  id v3;
  id v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t);

  v10 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3 = a2;
  if (a2)
  {
    sub_100015E74();
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2);

    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v4 = a3;
  if (a3)
    v6 = a3;
  else
    v6 = 0;
  v10(v8);
  swift_errorRelease(v6);
  swift_bridgeObjectRelease(v8);
  return swift_release();
}

uint64_t sub_10001B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10001B60C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10001B624()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B450;
  if (!qword_10008B450)
  {
    v0 = objc_opt_self(NSCompoundPredicate);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B450);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_10001B688()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008BF40;
  if (!qword_10008BF40)
  {
    v0 = objc_opt_self(NSPredicate);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008BF40);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_10001B6EC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B2D8;
  if (!qword_10008B2D8)
  {
    v0 = sub_100008DF0(&qword_10008B2D0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B2D8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10001B75C()
{
  uint64_t v0;
  uint64_t v2;

  return v2;
}

uint64_t sub_10001B790()
{
  uint64_t v0;

  v0 = sub_10001B75C();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for MailboxDataSource()
{
  return objc_opt_self(_TtC19MailWidgetExtension17MailboxDataSource);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10001B7F0(_QWORD *a1)
{
  swift_release(*a1);
}

uint64_t sub_10001B818()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = v9 + *(_QWORD *)(v1 + 64);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v8);
}

uint64_t sub_10001B958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 80);
  return sub_10001B124(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_10001B998(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10001B9DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void *sub_10001B9F4@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for MailEntry(0);
  return sub_10001BA8C((const void *)(v1 + *(int *)(v2 + 20)), a1);
}

uint64_t type metadata accessor for MailEntry(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008B3E0;
  if (!qword_10008B3E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MailEntry);
  return v2;
}

void *sub_10001BA8C(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B380);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_10001BB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for MailEntry(0) + 24);
  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t sub_10001BBA0()
{
  return Date.init()();
}

_QWORD *sub_10001BBB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v20 = a4;
  v27 = a1;
  v25 = a2;
  v23 = a3;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v16 = 0;
  v22 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v22 - 8);
  v11 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v22);
  v18 = (char *)&v11 - v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B380) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v16);
  v17 = (char *)&v11 - v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v4) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v16);
  v15 = (uint64_t)&v11 - v13;
  v19 = type metadata accessor for MailEntry(v5);
  v14 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v27);
  v28 = (char *)&v11 - v14;
  v32 = (char *)&v11 - v14;
  v31 = v6;
  v30 = v7;
  v29 = v8;
  sub_10001BE1C(v6, v9);
  sub_10001C04C(v15, (uint64_t)v28);
  v26 = type metadata accessor for TimelineEntryRelevance(v16);
  v24 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t))(v24 + 16))(v17, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v17, 0, 1, v26);
  sub_10001C214(v17, &v28[*(int *)(v19 + 20)]);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v23, v22);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v28[*(int *)(v19 + 24)], v18, v22);
  sub_10001C2D0((uint64_t)v28, v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  sub_10001C610(v27);
  return sub_10001C734(v28);
}

uint64_t sub_10001BE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *__dst;
  void *__src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v14);
  *(_QWORD *)(a2 + 8) = v14;
  v17 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v17);
  *(_QWORD *)(a2 + 16) = v17;
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(a2 + 32) = v13;
  }
  v2 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a2 + *(int *)(v2 + 28));
  __src = (void *)(a1 + *(int *)(v2 + 28));
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v12 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 16))(__dst, __src, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v4 = type metadata accessor for Snapshot(0);
  v7 = a2 + *(int *)(v4 + 20);
  v8 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  if ((unint64_t)*v8 < 2)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
  }
  else
  {
    v6 = *v8;
    swift_bridgeObjectRetain(*v8);
    *(_QWORD *)v7 = v6;
    *(_QWORD *)(v7 + 8) = v8[1];
    *(_BYTE *)(v7 + 16) = *((_BYTE *)v8 + 16);
    *(_BYTE *)(v7 + 17) = *((_BYTE *)v8 + 17);
  }
  return a2;
}

uint64_t sub_10001C04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *__dst;
  void *__src;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v2 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a2 + *(int *)(v2 + 28));
  __src = (void *)(a1 + *(int *)(v2 + 28));
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v11 + 48))(__src, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 32))(__dst, __src, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  v4 = type metadata accessor for Snapshot(0);
  v6 = a2 + *(int *)(v4 + 20);
  v7 = a1 + *(int *)(v4 + 20);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_WORD *)(v6 + 16) = *(_WORD *)(v7 + 16);
  return a2;
}

void *sub_10001C214(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B380);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t sub_10001C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  void *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v23);
  *(_QWORD *)(a2 + 8) = v23;
  v26 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v26);
  *(_QWORD *)(a2 + 16) = v26;
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(a2 + 32) = v22;
  }
  v2 = type metadata accessor for Mailbox(0);
  v18 = (void *)(a2 + *(int *)(v2 + 28));
  v19 = (const void *)(a1 + *(int *)(v2 + 28));
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v21 + 48))(v19, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v4 = type metadata accessor for Snapshot(0);
  v16 = a2 + *(int *)(v4 + 20);
  v17 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  if ((unint64_t)*v17 < 2)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
  }
  else
  {
    v15 = *v17;
    swift_bridgeObjectRetain(*v17);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v17[1];
    *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
    *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
  }
  v10 = type metadata accessor for MailEntry(0);
  __dst = (void *)(a2 + *(int *)(v10 + 20));
  __src = (void *)(a1 + *(int *)(v10 + 20));
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(__src, 1))
  {
    v5 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 16))(__dst, __src, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v9 = a2 + *(int *)(v10 + 24);
  v8 = a1 + *(int *)(v10 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v8);
  return a2;
}

_QWORD *sub_10001C610(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v3 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  v2 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v2 >= 2uLL)
    swift_bridgeObjectRelease(*v2);
  return a1;
}

_QWORD *sub_10001C734(_QWORD *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v9 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v11 + 48))(v9, 1))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v8 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v8 >= 2uLL)
    swift_bridgeObjectRelease(*v8);
  v4 = type metadata accessor for MailEntry(0);
  v5 = (char *)a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v3 = (char *)a1 + *(int *)(v4 + 24);
  v1 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v1 - 8) + 8))(v3);
  return a1;
}

_QWORD *sub_10001C8FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;

  v21 = a2;
  v22 = a1;
  v25 = 0;
  v24 = 0;
  v13 = 0;
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(0);
  v19 = (uint64_t)&v10 - v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for TimelineEntryRelevance(v3) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v13);
  v18 = (uint64_t)&v10 - v12;
  v14 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v4) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v10 - v14);
  v6 = type metadata accessor for MailEntry(v5);
  v15 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v20 = (uint64_t)&v10 - v15;
  v16 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v10 - v15);
  v23 = (uint64_t *)((char *)&v10 - v16);
  v25 = (char *)&v10 - v16;
  v24 = a1;
  sub_10001BE1C((uint64_t)a1, v8);
  sub_100069358(v18);
  sub_10001BBA0();
  sub_10001BBB4(v17, v18, v19, v20);
  sub_10001CAD4(v20, (uint64_t)v23);
  sub_10001C2D0((uint64_t)v23, v21);
  sub_10001C610(v22);
  return sub_10001C734(v23);
}

uint64_t sub_10001CAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  void *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v2 = type metadata accessor for Mailbox(0);
  v17 = (void *)(a2 + *(int *)(v2 + 28));
  v18 = (const void *)(a1 + *(int *)(v2 + 28));
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v20 + 48))(v18, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v4 = type metadata accessor for Snapshot(0);
  v15 = a2 + *(int *)(v4 + 20);
  v16 = a1 + *(int *)(v4 + 20);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_WORD *)(v15 + 16) = *(_WORD *)(v16 + 16);
  v10 = type metadata accessor for MailEntry(0);
  __dst = (void *)(a2 + *(int *)(v10 + 20));
  __src = (void *)(a1 + *(int *)(v10 + 20));
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(__src, 1))
  {
    v5 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 32))(__dst, __src, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v9 = a2 + *(int *)(v10 + 24);
  v8 = a1 + *(int *)(v10 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v9, v8);
  return a2;
}

uint64_t sub_10001CDAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BB48(a1);
}

void *sub_10001CDC0@<X0>(void *a1@<X8>)
{
  return sub_10001B9F4(a1);
}

unint64_t sub_10001CDD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *__dst;
  char *__src;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v30;

  v30 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v30 & 0x20000) != 0)
  {
    v25 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v25;
    return *(_QWORD *)a1 + ((v30 + 16) & ~(unint64_t)v30);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v23 = a2[1];
    swift_bridgeObjectRetain(v23);
    *(_QWORD *)(a1 + 8) = v23;
    v24 = a2[2];
    swift_bridgeObjectRetain(v24);
    *(_QWORD *)(a1 + 16) = v24;
    if ((unint64_t)a2[4] <= 5)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = a2[3];
      v22 = a2[4];
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)(a1 + 32) = v22;
    }
    v3 = type metadata accessor for Mailbox(0);
    __dst = (void *)(a1 + *(int *)(v3 + 28));
    __src = (char *)a2 + *(int *)(v3 + 28);
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(__src, 1))
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(__dst, __src, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v5 = type metadata accessor for Snapshot(0);
    v16 = a1 + *(int *)(v5 + 20);
    v17 = (uint64_t *)((char *)a2 + *(int *)(v5 + 20));
    if ((unint64_t)*v17 < 2)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
    }
    else
    {
      v15 = *v17;
      swift_bridgeObjectRetain(*v17);
      *(_QWORD *)v16 = v15;
      *(_QWORD *)(v16 + 8) = v17[1];
      *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
      *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
    }
    v11 = (void *)(a1 + *(int *)(a3 + 20));
    v12 = (char *)a2 + *(int *)(a3 + 20);
    v13 = type metadata accessor for TimelineEntryRelevance(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(v12, 1))
    {
      v6 = sub_100008AC0(&qword_10008B380);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v10 = a1 + *(int *)(a3 + 24);
    v9 = (uint64_t)a2 + *(int *)(a3 + 24);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, v9);
    return a1;
  }
}

uint64_t sub_10001D174(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v9 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v11 + 48))(v9, 1))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v8 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v8 >= 2uLL)
    swift_bridgeObjectRelease(*v8);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v2 - 8) + 8))(v4);
}

uint64_t sub_10001D32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  void *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v24 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v24);
  *(_QWORD *)(a1 + 8) = v24;
  v26 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v26);
  *(_QWORD *)(a1 + 16) = v26;
  if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(a1 + 32) = v22;
  }
  v3 = type metadata accessor for Mailbox(0);
  v18 = (void *)(a1 + *(int *)(v3 + 28));
  v19 = (const void *)(a2 + *(int *)(v3 + 28));
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v21 + 48))(v19, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v5 = type metadata accessor for Snapshot(0);
  v16 = a1 + *(int *)(v5 + 20);
  v17 = (uint64_t *)(a2 + *(int *)(v5 + 20));
  if ((unint64_t)*v17 < 2)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
  }
  else
  {
    v15 = *v17;
    swift_bridgeObjectRetain(*v17);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v17[1];
    *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
    *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
  }
  __dst = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 16))(__dst, __src, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v10 = a1 + *(int *)(a3 + 24);
  v9 = a2 + *(int *)(a3 + 24);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, v9);
  return a1;
}

uint64_t sub_10001D660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *__src;
  void *__dst;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v33 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v33);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v33;
  swift_bridgeObjectRelease(v3);
  v35 = *(_QWORD *)(a1 + 16);
  v36 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v36);
  *(_QWORD *)(a1 + 16) = v36;
  swift_bridgeObjectRelease(v35);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 32) <= 5uLL)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v30 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v30);
      *(_QWORD *)(a1 + 32) = v30;
    }
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v31 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v31);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v31;
    swift_bridgeObjectRelease(v4);
  }
  v5 = type metadata accessor for Mailbox(0);
  v26 = (void *)(a1 + *(int *)(v5 + 28));
  v25 = (const void *)(a2 + *(int *)(v5 + 28));
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (((unsigned int (*)(void *, uint64_t))v29)(v26, 1))
  {
    if (v29(v25, 1, v27))
    {
      v7 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v26, v25, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v26, v25, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v27);
    }
  }
  else if (v29(v25, 1, v27))
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v26, v27);
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v26, v25, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 24))(v26, v25, v27);
  }
  v8 = type metadata accessor for Snapshot(0);
  v23 = (uint64_t *)(a1 + *(int *)(v8 + 20));
  v24 = (uint64_t *)(a2 + *(int *)(v8 + 20));
  if ((unint64_t)*v23 < 2)
  {
    if ((unint64_t)*v24 < 2)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_WORD *)v23 + 8) = *((_WORD *)v24 + 8);
    }
    else
    {
      v21 = *v24;
      swift_bridgeObjectRetain(*v24);
      *v23 = v21;
      v23[1] = v24[1];
      *((_BYTE *)v23 + 16) = *((_BYTE *)v24 + 16);
      *((_BYTE *)v23 + 17) = *((_BYTE *)v24 + 17);
    }
  }
  else if ((unint64_t)*v24 < 2)
  {
    sub_10000A004(v23);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_WORD *)v23 + 8) = *((_WORD *)v24 + 8);
  }
  else
  {
    v22 = *v24;
    swift_bridgeObjectRetain(*v24);
    v9 = *v23;
    *v23 = v22;
    swift_bridgeObjectRelease(v9);
    v23[1] = v24[1];
    *((_BYTE *)v23 + 16) = *((_BYTE *)v24 + 16);
    *((_BYTE *)v23 + 17) = *((_BYTE *)v24 + 17) & 1;
  }
  __dst = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  v18 = type metadata accessor for TimelineEntryRelevance(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48);
  if (((unsigned int (*)(void *, uint64_t))v20)(__dst, 1))
  {
    if (v20(__src, 1, v18))
    {
      v11 = sub_100008AC0(&qword_10008B380);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(__dst, __src, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
  }
  else if (v20(__src, 1, v18))
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(__dst, v18);
    v10 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v19 + 24))(__dst, __src, v18);
  }
  v15 = a1 + *(int *)(a3 + 24);
  v14 = a2 + *(int *)(a3 + 24);
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v15, v14);
  return a1;
}

uint64_t sub_10001DC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  void *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = type metadata accessor for Mailbox(0);
  v17 = (void *)(a1 + *(int *)(v3 + 28));
  v18 = (const void *)(a2 + *(int *)(v3 + 28));
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v20 + 48))(v18, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v5 = type metadata accessor for Snapshot(0);
  v15 = a1 + *(int *)(v5 + 20);
  v16 = a2 + *(int *)(v5 + 20);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_WORD *)(v15 + 16) = *(_WORD *)(v16 + 16);
  __dst = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v14 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 32))(__dst, __src, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v10 = a1 + *(int *)(a3 + 24);
  v9 = a2 + *(int *)(a3 + 24);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v10, v9);
  return a1;
}

uint64_t sub_10001DF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *__src;
  void *__dst;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(void *, uint64_t, uint64_t);
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  v26 = (void *)(a1 + *(int *)(v7 + 28));
  v25 = (const void *)(a2 + *(int *)(v7 + 28));
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (((unsigned int (*)(void *, uint64_t))v29)(v26, 1))
  {
    if (v29(v25, 1, v27))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v26, v25, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v26, v25, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v27);
    }
  }
  else if (v29(v25, 1, v27))
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v26, v27);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v26, v25, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 40))(v26, v25, v27);
  }
  v10 = type metadata accessor for Snapshot(0);
  v23 = (uint64_t *)(a1 + *(int *)(v10 + 20));
  v24 = (uint64_t *)(a2 + *(int *)(v10 + 20));
  if ((unint64_t)*v23 < 2)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_WORD *)v23 + 8) = *((_WORD *)v24 + 8);
  }
  else if ((unint64_t)*v24 < 2)
  {
    sub_10000A004(v23);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_WORD *)v23 + 8) = *((_WORD *)v24 + 8);
  }
  else
  {
    v11 = *v23;
    *v23 = *v24;
    swift_bridgeObjectRelease(v11);
    v23[1] = v24[1];
    *((_BYTE *)v23 + 16) = *((_BYTE *)v24 + 16);
    *((_BYTE *)v23 + 17) = *((_BYTE *)v24 + 17) & 1;
  }
  __dst = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48);
  if (((unsigned int (*)(void *, uint64_t))v22)(__dst, 1))
  {
    if (v22(__src, 1, v20))
    {
      v13 = sub_100008AC0(&qword_10008B380);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 32))(__dst, __src, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
  }
  else if (v22(__src, 1, v20))
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(__dst, v20);
    v12 = sub_100008AC0(&qword_10008B380);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v21 + 40))(__dst, __src, v20);
  }
  v17 = a1 + *(int *)(a3 + 24);
  v16 = a2 + *(int *)(a3 + 24);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v17, v16);
  return a1;
}

uint64_t sub_10001E49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E4B8);
}

uint64_t sub_10001E4B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for Snapshot(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (a2 == *(_DWORD *)(v13 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))(a1, a2, v12);
  }
  else
  {
    v6 = sub_100008AC0(&qword_10008B380);
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
    }
    else
    {
      v4 = type metadata accessor for Date(0);
      v5 = *(_QWORD *)(v4 - 8);
      if (a2 == *(_DWORD *)(v5 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 24), a2, v4);
      else
        __break(1u);
    }
  }
  return v8;
}

uint64_t sub_10001E5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E600);
}

uint64_t sub_10001E600(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for Snapshot(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (a3 == *(_DWORD *)(v13 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v13 + 56))(a1, a2, a2, v12);
  v6 = sub_100008AC0(&qword_10008B380);
  v7 = *(_QWORD *)(v6 - 8);
  if (a3 == *(_DWORD *)(v7 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v7 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v6);
  result = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  __break(1u);
  return result;
}

uint64_t sub_10001E72C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  v8 = type metadata accessor for Snapshot(319);
  v9 = v8;
  if (v1 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v8 - 8) + 64;
    v2 = sub_10001E854(319);
    v9 = v2;
    if (v3 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v2 - 8) + 64;
      v4 = type metadata accessor for Date(319);
      v9 = v4;
      if (v5 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v4 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v10, a1 + 16);
        return 0;
      }
    }
  }
  return v9;
}

uint64_t sub_10001E854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008B3F0;
  if (!qword_10008B3F0)
  {
    v1 = type metadata accessor for TimelineEntryRelevance(255);
    v5 = type metadata accessor for Optional(a1, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008B3F0);
      return v3;
    }
  }
  return v7;
}

id sub_10001E8F8(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return sub_10001F9E8(a1);
}

uint64_t *sub_10001E930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  Swift::String v22;
  id v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *result;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  id *v74;
  id *v75;
  char *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  id v86;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *v101;
  _BYTE **v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint32_t v110;
  int v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  id v118;
  char *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id *v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t ObjectType;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  _QWORD v160[2];
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  _QWORD v165[2];
  uint64_t v166;
  uint32_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char v174;
  id v175;
  id v176;
  id v177;
  uint64_t v178;
  void **aBlock;
  int v180;
  int v181;
  uint64_t (*v182)(uint64_t);
  void *v183;
  void (*v184)();
  _QWORD *v185;
  id v186;
  uint64_t v187;
  _BYTE v188[24];
  id v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v155 = a1;
  v147 = a2;
  v145 = a3;
  v146 = a4;
  ObjectType = swift_getObjectType(v4);
  v196 = 0;
  v195 = 0;
  v193 = 0;
  v194 = 0;
  v192 = 0;
  v191 = 0;
  v190 = 0;
  v189 = 0;
  v178 = 0;
  v177 = 0;
  v173 = 0;
  v172 = 0;
  v168 = 0;
  v130 = 0;
  v156 = 0;
  v131 = type metadata accessor for DispatchTimeInterval();
  v132 = *(_QWORD *)(v131 - 8);
  v133 = (*(_QWORD *)(v132 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v134 = (uint64_t *)((char *)&v61 - v133);
  v135 = type metadata accessor for DispatchTime(v5);
  v136 = *(_QWORD *)(v135 - 8);
  v137 = (*(_QWORD *)(v136 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v156);
  v138 = (char *)&v61 - v137;
  v139 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v140 = (char *)&v61 - v139;
  v141 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v156);
  v142 = (uint64_t *)((char *)&v61 - v141);
  v143 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchWorkItemFlags(v9) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v156);
  v144 = (char *)&v61 - v143;
  v148 = type metadata accessor for Logger(v10);
  v149 = *(_QWORD *)(v148 - 8);
  v150 = (*(_QWORD *)(v149 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v156);
  v151 = (char *)&v61 - v150;
  v196 = v11;
  v195 = v12;
  v193 = v13;
  v194 = v14;
  v192 = v4;
  v153 = sub_10001B688();
  v154 = _allocateUninitializedArray<A>(_:)(1, v153);
  v152 = v15;
  v16 = sub_1000684D0(v155);
  v17 = v154;
  *v152 = v16;
  sub_1000073C4();
  v191 = v17;
  v157 = *(_QWORD *)(v155 + 24);
  v158 = *(_QWORD *)(v155 + 32);
  sub_10001335C(v157, v158);
  sub_10001335C(v157, v158);
  v159 = sub_100016F6C(v157, v158, v156, 3uLL);
  sub_100013398(v157, v158);
  sub_100013398(v157, v158);
  if ((v159 & 1) == 0)
  {
    v18 = objc_msgSend((id)objc_opt_self(EMMessageListItemPredicates), "predicateForUnreadMessages");
    v127 = v160;
    v160[0] = v18;
    v19 = sub_100008AC0(&qword_10008B500);
    Array.append(_:)(v127, v19);
  }
  v121 = 0;
  sub_10001B624();
  v115 = v191;
  swift_bridgeObjectRetain(v191);
  v118 = sub_10001F604(v115);
  v190 = v118;
  v123 = sub_100008AC0((uint64_t *)&unk_10008BF30);
  v117 = sub_1000142E8();
  v20 = v118;
  v21 = sub_10001AB38();
  v116 = _allocateUninitializedArray<A>(_:)(v121, v21);
  v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Widget.DaemonDataSource.UnreadCount", 0x23uLL, 1);
  v120 = sub_10001F67C(v117, v118, v116, 8, v22._countAndFlagsBits, (uint64_t)v22._object);
  v189 = v120;
  v23 = v120;
  v119 = &v128[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state];
  swift_beginAccess(&v128[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state]);
  v122 = *(_QWORD *)v119;
  v125 = &v186;
  v186 = v120;
  v124 = type metadata accessor for MailStatusDataSource.State();
  v24 = sub_10001FBA4();
  Dictionary.subscript.getter(&v187, v125, v122, v123, v124, v24);

  v126 = v187;
  if (v187)
  {
    v114 = v126;
    v25 = v151;
    v106 = v126;
    v168 = v126;
    swift_endAccess(v188);
    v26 = sub_10001F988();
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 16))(v25, v26, v148);
    v112 = Logger.logObject.getter(v27);
    v111 = static os_log_type_t.default.getter();
    v109 = &v166;
    v166 = 2;
    v107 = sub_1000079AC();
    v108 = sub_100007A14();
    v28 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v167, v109, &type metadata for UInt32, &type metadata for Int, v107, v108, v28);
    v110 = v167;
    v29 = sub_100008AC0(&qword_10008AB20);
    v113 = _allocateUninitializedArray<A>(_:)(0, v29);
    if (os_log_type_enabled(v112, (os_log_type_t)v111))
    {
      v30 = v130;
      v96 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v94 = sub_100008AC0(&qword_10008AB30);
      v95 = 0;
      v97 = sub_1000076F4(0, v94, v94);
      v98 = sub_1000076F4(v95, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v102 = &v163;
      v163 = v96;
      v103 = &v162;
      v162 = v97;
      v100 = &v161;
      v161 = v98;
      v99 = 0;
      sub_10000774C(0, &v163);
      sub_10000774C(v99, v102);
      v160[1] = v113;
      v101 = &v61;
      __chkstk_darwin(&v61);
      v31 = v103;
      v32 = &v61 - 6;
      v104 = &v61 - 6;
      v32[2] = (uint64_t)v102;
      v32[3] = (uint64_t)v31;
      v32[4] = v33;
      v105 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v34 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v104, v105, v34);
      if (v30)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v111, "Query in progress. Appending completion handler", v96, v110);
        v93 = 0;
        sub_1000077A4(v97, 0);
        sub_1000077A4(v98, v93);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v113);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v113);
    }

    (*(void (**)(char *, uint64_t))(v149 + 8))(v151, v148);
    swift_retain();
    v35 = swift_allocObject(&unk_100082B80, 32, 7);
    v36 = v146;
    v37 = v106;
    *(_QWORD *)(v35 + 16) = v145;
    *(_QWORD *)(v35 + 24) = v36;
    v91 = v165;
    v165[0] = sub_1000227FC;
    v165[1] = v35;
    v92 = &v164;
    swift_beginAccess(v37 + 32);
    v38 = sub_100008AC0((uint64_t *)&unk_10008B4E0);
    Array.append(_:)(v91, v38);
    swift_endAccess(v92);
    swift_release();
  }
  else
  {
    swift_endAccess(v188);
    v84 = 0;
    type metadata accessor for DispatchWorkItem(0);
    v67 = &unk_100082AE0;
    v66 = 24;
    v71 = 7;
    v65 = swift_allocObject(&unk_100082AE0, 24, 7);
    v62 = v65 + 16;
    v39 = v128;
    v63 = v128;
    swift_unknownObjectWeakInit(v62);

    swift_retain();
    v40 = v120;
    v70 = 40;
    v41 = (_QWORD *)swift_allocObject(&unk_100082B08, 40, v71);
    v42 = ObjectType;
    v43 = v120;
    v41[2] = v65;
    v41[3] = v43;
    v41[4] = v42;
    v184 = sub_1000207EC;
    v185 = v41;
    aBlock = _NSConcreteStackBlock;
    v180 = 1107296256;
    v181 = 0;
    v182 = sub_10000A4EC;
    v183 = &unk_100082B20;
    v64 = _Block_copy(&aBlock);
    sub_100006E5C();
    v90 = DispatchWorkItem.__allocating_init(flags:block:)(v144, v64);
    swift_release();
    swift_release();
    v178 = v90;
    sub_100020858();
    v72 = objc_msgSend((id)objc_opt_self(EFScheduler), "mainThreadScheduler");
    v73 = swift_allocObject(v67, v66, v71);
    v68 = v73 + 16;
    v44 = v128;
    v69 = v128;
    swift_unknownObjectWeakInit(v68);

    swift_retain();
    v45 = v120;
    v46 = swift_allocObject(&unk_100082B58, v70, v71);
    v47 = ObjectType;
    v48 = v120;
    v49 = v84;
    v50 = (_QWORD *)v46;
    v51 = (uint64_t)v72;
    v50[2] = v73;
    v50[3] = v48;
    v50[4] = v47;
    v89 = sub_100021A68(v51, v49, (uint64_t)sub_100021298, (uint64_t)v50, 0.5);
    swift_release();
    v177 = v89;
    v52 = v120;
    v53 = v89;
    v75 = &v176;
    v176 = v89;
    v74 = &v175;
    v175 = v120;
    v76 = &v174;
    v79 = 33;
    v80 = 0;
    swift_beginAccess(&v128[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers]);
    v54 = sub_100008AC0(&qword_10008B490);
    Dictionary.subscript.setter(v75, v74, v54);
    swift_endAccess(v76);
    v78 = *(id *)&v128[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_messageRepository];
    v55 = v78;
    sub_100021AC4();
    sub_10000D0CC(v155, (uint64_t)v142);
    v77 = sub_1000130E4(v142);
    v56 = v128;
    v88 = objc_msgSend(v78, "startCountingQuery:includingServerCountsForMailboxScope:withObserver:", v120, v77, v128);
    swift_unknownObjectRelease(v128);

    v173 = v88;
    swift_unknownObjectRetain(v88);
    swift_retain();
    swift_retain();
    v87 = sub_10001F6EC((uint64_t)v88, v90, v145, v146);
    v172 = v87;
    v57 = v120;
    swift_retain();
    v82 = &v171;
    v171 = v87;
    v81 = &v170;
    v170 = v120;
    v83 = &v169;
    swift_beginAccess(&v128[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state]);
    v58 = sub_100008AC0((uint64_t *)&unk_10008B4B0);
    Dictionary.subscript.setter(v82, v81, v58);
    swift_endAccess(v83);
    sub_100008CF0();
    v86 = (id)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    v59 = v132;
    *v134 = v147;
    (*(void (**)(void))(v59 + 104))();
    + infix(_:_:)(v138, v134);
    (*(void (**)(_QWORD *, uint64_t))(v132 + 8))(v134, v131);
    v85 = *(void (**)(char *, uint64_t))(v136 + 8);
    v85(v138, v135);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v140, v90);
    v85(v140, v135);

    swift_release();
    swift_unknownObjectRelease(v88);

    swift_release();
  }

  result = &v191;
  sub_10000A004(&v191);
  return result;
}

id sub_10001F604(uint64_t a1)
{
  Class isa;
  id v4;

  sub_10001B688();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "andPredicateWithSubpredicates:", isa);

  swift_bridgeObjectRelease(a1);
  return v4;
}

id sub_10001F67C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_100022544(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10001F6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_allocObject(v4, 40, 7);
  return sub_10001F74C(a1, a2, a3, a4);
}

uint64_t sub_10001F74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;

  swift_unknownObjectRetain(a1);
  v4[2] = a1;
  swift_retain();
  v4[3] = a2;
  v10 = sub_100008AC0(&qword_10008B508);
  v11 = _allocateUninitializedArray<A>(_:)(1, v10);
  v9 = v5;
  swift_retain();
  v6 = swift_allocObject(&unk_100082BA8, 32, 7);
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *v9 = sub_1000227FC;
  v9[1] = (uint64_t (*)(uint64_t))v6;
  sub_1000073C4();
  v4[4] = v11;
  swift_release();
  swift_release();
  swift_unknownObjectRelease(a1);
  return v15;
}

uint64_t sub_10001F870(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  return a2(*(_QWORD *)a1, *(_BYTE *)(a1 + 8) & 1);
}

uint64_t sub_10001F8A4()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_release();
  sub_10000A004((_QWORD *)(v0 + 32));
  return v2;
}

uint64_t sub_10001F8E8()
{
  uint64_t v0;

  v0 = sub_10001F8A4();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10001F924()
{
  uint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  sub_100003474(v2, qword_10008B430);
  sub_1000034E4(v2, (uint64_t)qword_10008B430);
  v0 = type metadata accessor for MailStatusDataSource();
  return sub_100014544(v0, v0);
}

uint64_t sub_10001F988()
{
  uint64_t v0;

  if (qword_10008AA80 != -1)
    swift_once(&qword_10008AA80, sub_10001F924);
  v0 = type metadata accessor for Logger(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008B430);
}

id sub_10001F9E8(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  objc_class *ObjectType;
  id v20;
  objc_super v21;
  void *v22;
  id v23;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v22 = a1;
  v2 = v1;
  v3 = v1;
  v4 = v1;
  v23 = v1;
  v13 = OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state;
  v5 = sub_100008AC0(&qword_10008B510);
  v12 = _allocateUninitializedArray<A>(_:)(0, v5);
  v14 = sub_100008AC0((uint64_t *)&unk_10008BF30);
  v11 = type metadata accessor for MailStatusDataSource.State();
  sub_10001FBA4();
  *(_QWORD *)&v17[v13] = Dictionary.init(dictionaryLiteral:)(v12, v14, v11);

  v16 = OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers;
  v6 = sub_100008AC0(&qword_10008B518);
  v15 = _allocateUninitializedArray<A>(_:)(0, v6);
  v7 = sub_100020858();
  *(_QWORD *)&v17[v16] = Dictionary.init(dictionaryLiteral:)(v15, v14, v7);

  v8 = a1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_messageRepository] = a1;

  v21.receiver = v23;
  v21.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v21, "init");
  v9 = v20;
  v23 = v20;

  return v20;
}

uint64_t type metadata accessor for MailStatusDataSource.State()
{
  return objc_opt_self(_TtCC19MailWidgetExtension20MailStatusDataSourceP33_1689F1013684430CC577E86BF174B8245State);
}

unint64_t sub_10001FBA4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B478;
  if (!qword_10008B478)
  {
    v0 = sub_100008DF0((uint64_t *)&unk_10008BF30);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B478);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10001FC14()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v2, 24);
}

void sub_10001FC50(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  _BYTE **v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  _BYTE **v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint32_t v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint32_t v68;
  int v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id *p_Strong;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id *v79;
  char *v80;
  char *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  void *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102[5];
  uint64_t v103;
  uint32_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint32_t v111;
  char *Strong;
  char v113[8];
  uint64_t v114;
  uint64_t v115;

  v88 = a1;
  v87 = a2;
  v115 = 0;
  v114 = 0;
  v86 = 0;
  v85 = 0;
  v105 = 0;
  v89 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v89 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v88);
  v92 = (char *)&v29 - v91;
  v93 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v2);
  v94 = (char *)&v29 - v93;
  v95 = v4 + 16;
  v115 = v4 + 16;
  v114 = v5;
  swift_beginAccess(v4 + 16);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v95);
  if (Strong)
  {
    p_Strong = (id *)&Strong;
    v81 = Strong;
    v6 = Strong;
    sub_1000119D0(p_Strong);
    swift_endAccess(v113);
    v7 = v87;
    v75 = &v81[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers];
    v80 = &v98;
    swift_beginAccess(&v81[OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers]);
    v76 = *(_QWORD *)v75;
    v79 = &v96;
    v96 = v87;
    v77 = sub_100008AC0((uint64_t *)&unk_10008BF30);
    v78 = sub_100020858();
    v8 = sub_10001FBA4();
    Dictionary.subscript.getter(&v97, v79, v76, v77, v78, v8);

    v82 = v97;
    swift_endAccess(v80);

    v84 = v82;
  }
  else
  {
    v83 = 0;
    sub_1000119D0((id *)&Strong);
    swift_endAccess(v113);
    v84 = v83;
  }
  v73 = v84;
  if (v84)
  {
    v72 = v73;
    v14 = v92;
    v57 = v73;
    v105 = v73;
    v15 = sub_10001F988();
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 16))(v14, v15, v89);
    v63 = Logger.logObject.getter(v16);
    v62 = static os_log_type_t.error.getter();
    v60 = &v103;
    v103 = 2;
    v58 = sub_1000079AC();
    v59 = sub_100007A14();
    v17 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v104, v60, &type metadata for UInt32, &type metadata for Int, v58, v59, v17);
    v61 = v104;
    v18 = sub_100008AC0(&qword_10008AB20);
    v64 = _allocateUninitializedArray<A>(_:)(0, v18);
    if (os_log_type_enabled(v63, (os_log_type_t)v62))
    {
      v19 = v85;
      v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v45 = sub_100008AC0(&qword_10008AB30);
      v46 = 0;
      v48 = sub_1000076F4(0, v45, v45);
      v49 = sub_1000076F4(v46, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v53 = v102;
      v102[0] = v47;
      v54 = &v101;
      v101 = v48;
      v51 = &v100;
      v100 = v49;
      v50 = 0;
      sub_10000774C(0, v102);
      sub_10000774C(v50, v53);
      v99 = v64;
      v52 = &v29;
      __chkstk_darwin(&v29);
      v20 = v54;
      v21 = &v29 - 6;
      v55 = &v29 - 6;
      v21[2] = (uint64_t)v53;
      v21[3] = (uint64_t)v20;
      v21[4] = v22;
      v56 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v23 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v55, v56, v23);
      if (v19)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v62, "Timeout! No count received", v47, v61);
        v44 = 0;
        sub_1000077A4(v48, 0);
        sub_1000077A4(v49, v44);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v64);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v64);
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
    memset(&v102[1], 0, 32);
    v43 = 0;
    v42 = 0;
    objc_msgSend(v57, "debounceResult:");
    swift_unknownObjectRelease(v42);

  }
  else
  {
    v9 = v94;
    v10 = sub_10001F988();
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 16))(v9, v10, v89);
    v70 = Logger.logObject.getter(v11);
    v69 = static os_log_type_t.debug.getter();
    v67 = &v110;
    v110 = 2;
    v65 = sub_1000079AC();
    v66 = sub_100007A14();
    v12 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v111, v67, &type metadata for UInt32, &type metadata for Int, v65, v66, v12);
    v68 = v111;
    v13 = sub_100008AC0(&qword_10008AB20);
    v71 = _allocateUninitializedArray<A>(_:)(0, v13);
    if (os_log_type_enabled(v70, (os_log_type_t)v69))
    {
      v24 = v85;
      v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v30 = sub_100008AC0(&qword_10008AB30);
      v31 = 0;
      v33 = sub_1000076F4(0, v30, v30);
      v34 = sub_1000076F4(v31, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v38 = &v109;
      v109 = v32;
      v39 = &v108;
      v108 = v33;
      v36 = &v107;
      v107 = v34;
      v35 = 0;
      sub_10000774C(0, &v109);
      sub_10000774C(v35, v38);
      v106 = v71;
      v37 = &v29;
      __chkstk_darwin(&v29);
      v25 = v39;
      v26 = &v29 - 6;
      v40 = &v29 - 6;
      v26[2] = (uint64_t)v38;
      v26[3] = (uint64_t)v25;
      v26[4] = v27;
      v41 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v28 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v40, v41, v28);
      if (v24)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "No debouncer for query", v32, v68);
        v29 = 0;
        sub_1000077A4(v33, 0);
        sub_1000077A4(v34, v29);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v71);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v71);
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v94, v89);
  }
}

uint64_t sub_1000207A8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v2, 40);
}

void sub_1000207EC()
{
  uint64_t v0;

  sub_10001FC50(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000207FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100020840(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100020858()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B480;
  if (!qword_10008B480)
  {
    v0 = objc_opt_self(EFDebouncer);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B480);
    return ObjCClassMetadata;
  }
  return v3;
}

void sub_1000208BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  id *p_Strong;
  id v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  id Strong;
  char v93[8];
  uint64_t v94;
  char v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[4];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v86 = a1;
  v85 = a2;
  v84 = a3;
  v106 = 0;
  v105 = 0;
  v104 = 0;
  v83 = 0;
  v94 = 0;
  v95 = 0;
  v87 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = (*(_QWORD *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v90 = (char *)v36 - v89;
  v106 = __chkstk_darwin(v86);
  v105 = v3 + 16;
  v104 = v4;
  sub_100022C5C(v106, (uint64_t)v103);
  if (v103[3])
  {
    if ((swift_dynamicCast(&v91, v103, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v78 = v91;
      v79 = 0;
    }
    else
    {
      v78 = 0;
      v79 = 1;
    }
    v76 = v79;
    v77 = v78;
    if ((v79 & 1) != 0)
    {
      v73 = 0;
      v74 = 0;
      v75 = 1;
      goto LABEL_10;
    }
    v81 = v77;
    v82 = v76;
  }
  else
  {
    v80 = 0;
    sub_100022C00(v103);
    v81 = v80;
    v82 = 1;
  }
  v73 = v81;
  v74 = v82 & 1;
  v75 = 0;
LABEL_10:
  v71 = v74;
  v72 = v73;
  if ((v75 & 1) != 0)
  {
    v5 = v90;
    v6 = sub_10001F988();
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v5, v6, v87);
    v50 = (_OWORD *)((char *)&v102 + 4);
    sub_100022C5C(v86, (uint64_t)&v102 + 4);
    v58 = 7;
    v56 = swift_allocObject(&unk_100082CE8, 48, 7);
    v7 = sub_100022D2C(v50, (_OWORD *)(v56 + 16));
    v67 = Logger.logObject.getter(v7);
    v68 = static os_log_type_t.error.getter();
    v53 = &v101;
    v101 = 12;
    v51 = sub_1000079AC();
    v52 = sub_100007A14();
    v8 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v102, v53, &type metadata for UInt32, &type metadata for Int, v51, v52, v8);
    v54 = v102;
    v55 = 17;
    v9 = swift_allocObject(&unk_100082D10, 17, v58);
    v10 = v55;
    v11 = v58;
    v61 = v9;
    *(_BYTE *)(v9 + 16) = 32;
    v12 = swift_allocObject(&unk_100082D38, v10, v11);
    v13 = v58;
    v62 = v12;
    *(_BYTE *)(v12 + 16) = 8;
    v57 = 32;
    v14 = swift_allocObject(&unk_100082D60, 32, v13);
    v15 = v57;
    v16 = v58;
    v17 = v14;
    v18 = v56;
    v59 = v17;
    *(_QWORD *)(v17 + 16) = sub_100022D90;
    *(_QWORD *)(v17 + 24) = v18;
    v19 = swift_allocObject(&unk_100082D88, v15, v16);
    v20 = v57;
    v21 = v58;
    v22 = v19;
    v23 = v59;
    v60 = v22;
    *(_QWORD *)(v22 + 16) = sub_100022E24;
    *(_QWORD *)(v22 + 24) = v23;
    v24 = swift_allocObject(&unk_100082DB0, v20, v21);
    v25 = v60;
    v64 = v24;
    *(_QWORD *)(v24 + 16) = sub_100008A6C;
    *(_QWORD *)(v24 + 24) = v25;
    v66 = sub_100008AC0(&qword_10008AB20);
    v63 = _allocateUninitializedArray<A>(_:)(3, v66);
    v65 = v26;
    swift_retain();
    v27 = v61;
    v28 = v65;
    *v65 = sub_100008A00;
    v28[1] = v27;
    swift_retain();
    v29 = v62;
    v30 = v65;
    v65[2] = sub_100008A00;
    v30[3] = v29;
    swift_retain();
    v31 = v63;
    v32 = v64;
    v33 = v65;
    v65[4] = sub_100008AB4;
    v33[5] = v32;
    sub_1000073C4();
    swift_bridgeObjectRelease(v31);
    if (os_log_type_enabled(v67, (os_log_type_t)v68))
    {
      v35 = v83;
      v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v37 = sub_100008AC0(&qword_10008AB30);
      v39 = sub_1000076F4(0, v37, v37);
      v40 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v41 = &v100;
      v100 = v38;
      v42 = &v99;
      v99 = v39;
      v43 = &v98;
      v98 = v40;
      sub_10000774C(2, &v100);
      sub_10000774C(1, v41);
      v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v97 = v61;
      sub_100007760(&v96, (uint64_t)v41, (uint64_t)v42, (uint64_t)v43);
      v44 = v35;
      if (v35)
      {
        __break(1u);
      }
      else
      {
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v97 = v62;
        sub_100007760(&v96, (uint64_t)&v100, (uint64_t)&v99, (uint64_t)&v98);
        v36[1] = 0;
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v97 = v64;
        sub_100007760(&v96, (uint64_t)&v100, (uint64_t)&v99, (uint64_t)&v98);
        _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "Debouncer received unexpected result. Expected Optional<Int> received %s", v38, v54);
        sub_1000077A4(v39, 0);
        sub_1000077A4(v40, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v87);
  }
  else
  {
    v69 = v72;
    v70 = v71;
    v47 = v71;
    v48 = v72;
    v94 = v72;
    v95 = v71 & 1;
    v49 = v85 + 16;
    swift_beginAccess(v85 + 16);
    Strong = (id)swift_unknownObjectWeakLoadStrong(v49);
    if (Strong)
    {
      p_Strong = &Strong;
      v46 = Strong;
      v34 = Strong;
      sub_1000119D0(p_Strong);
      swift_endAccess(v93);
      sub_1000212C4(v84, v48, v47 & 1);

    }
    else
    {
      sub_1000119D0(&Strong);
      swift_endAccess(v93);
    }
  }
}

uint64_t sub_100021254()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v2, 40);
}

void sub_100021298(uint64_t a1)
{
  uint64_t v1;

  sub_1000208BC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000212A8()
{
  return sub_100008AC0(&qword_10008B668);
}

uint64_t sub_1000212C4(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, char);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  _BYTE **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint32_t v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, char);
  uint64_t v51;
  uint64_t (*v52)(uint64_t, char);
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, char);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, char);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  id *v69;
  uint64_t *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  _QWORD *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, char);
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id *v100;
  _QWORD *v101;
  uint64_t (*v102)(uint64_t, char);
  uint64_t v103;
  _QWORD v104[3];
  uint64_t v105;
  _QWORD v106[2];
  uint64_t v107;
  uint64_t v108;
  char v109;
  id v110;
  uint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint32_t v121;
  id v122;
  _QWORD *v123;
  _BYTE v124[24];
  uint64_t v125;
  uint64_t v126;
  char v127;
  id v128;

  v95 = a1;
  v88 = a2;
  v87 = a3;
  v85 = sub_100022914;
  v128 = 0;
  v126 = 0;
  v127 = 0;
  v125 = 0;
  v93 = 0;
  v86 = 0;
  v115 = 0;
  v106[0] = 0;
  v106[1] = 0;
  v102 = 0;
  v103 = 0;
  v96 = 0;
  v89 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v89 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v92 = (char *)&v29 - v91;
  v128 = (id)__chkstk_darwin(v95);
  v126 = v4;
  v127 = v5 & 1;
  v125 = v3;
  v6 = v128;
  v94 = (uint64_t *)(v3 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state);
  swift_beginAccess(v3 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state);
  v97 = *v94;
  v100 = &v122;
  v122 = v95;
  v98 = sub_100008AC0((uint64_t *)&unk_10008BF30);
  v99 = type metadata accessor for MailStatusDataSource.State();
  v7 = sub_10001FBA4();
  Dictionary.subscript.getter(&v123, v100, v97, v98, v99, v7);

  v101 = v123;
  if (v123)
  {
    v83 = v101;
    v78 = v101;
    v115 = v101;
    swift_endAccess(v124);
    v8 = v95;
    v66 = &v114;
    v114 = 0;
    v65 = &v113;
    v113 = v95;
    v67 = &v112;
    v68 = 33;
    v77 = 0;
    swift_beginAccess(v84 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_state);
    v9 = sub_100008AC0((uint64_t *)&unk_10008B4B0);
    Dictionary.subscript.setter(v66, v65, v9);
    swift_endAccess(v67);
    v10 = v95;
    v70 = &v111;
    v111 = 0;
    v69 = &v110;
    v110 = v95;
    v71 = &v109;
    swift_beginAccess(v84 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers);
    v11 = sub_100008AC0(&qword_10008B490);
    Dictionary.subscript.setter(v70, v69, v11);
    swift_endAccess(v71);
    v72 = &v108;
    v76 = 32;
    swift_beginAccess(v78 + 3);
    v73 = v78[3];
    swift_retain();
    v12 = swift_endAccess(v72);
    dispatch thunk of DispatchWorkItem.cancel()(v12);
    swift_release();
    v74 = &v107;
    swift_beginAccess(v78 + 2);
    v75 = (id)v78[2];
    swift_unknownObjectRetain(v75);
    swift_endAccess(v74);
    swift_getObjectType(v75);
    objc_msgSend(v75, "cancel");
    swift_unknownObjectRelease(v75);
    v79 = &v105;
    swift_beginAccess(v78 + 4);
    v80 = v78[4];
    swift_bridgeObjectRetain(v80);
    swift_endAccess(v79);
    v104[2] = v80;
    v81 = sub_100008AC0((uint64_t *)&unk_10008B4E0);
    v13 = sub_100022868();
    Collection<>.makeIterator()(v106, v81, v13);
    for (i = v86; ; i = v62)
    {
      v62 = i;
      v14 = sub_100008AC0(&qword_10008B528);
      IndexingIterator.next()(v104, v14);
      v63 = v104[0];
      v64 = v104[1];
      if (v104[0])
      {
        v60 = v63;
        v61 = v64;
        v57 = v64;
        v56 = v63;
        v15 = swift_allocObject(&unk_100082BD0, 32, 7);
        v16 = v57;
        v17 = v85;
        *(_QWORD *)(v15 + 16) = v56;
        *(_QWORD *)(v15 + 24) = v16;
        v58 = v17;
        v59 = v15;
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      v54 = v59;
      v55 = v58;
      if (!v58)
        break;
      v52 = v55;
      v53 = v54;
      v51 = v54;
      v50 = v55;
      v102 = v55;
      v103 = v54;
      swift_retain();
      v50(v88, v87 & 1);
      swift_release();
      swift_release();
    }
    sub_10000A004(v106);
    return swift_release();
  }
  else
  {
    v19 = v92;
    swift_endAccess(v124);
    v20 = sub_10001F988();
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 16))(v19, v20, v89);
    v48 = Logger.logObject.getter(v21);
    v47 = static os_log_type_t.error.getter();
    v45 = &v120;
    v120 = 2;
    v43 = sub_1000079AC();
    v44 = sub_100007A14();
    v22 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v121, v45, &type metadata for UInt32, &type metadata for Int, v43, v44, v22);
    v46 = v121;
    v23 = sub_100008AC0(&qword_10008AB20);
    v49 = _allocateUninitializedArray<A>(_:)(0, v23);
    if (os_log_type_enabled(v48, (os_log_type_t)v47))
    {
      v24 = v86;
      v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v31 = sub_100008AC0(&qword_10008AB30);
      v32 = 0;
      v34 = sub_1000076F4(0, v31, v31);
      v35 = sub_1000076F4(v32, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v39 = &v119;
      v119 = v33;
      v40 = &v118;
      v118 = v34;
      v37 = &v117;
      v117 = v35;
      v36 = 0;
      sub_10000774C(0, &v119);
      sub_10000774C(v36, v39);
      v116 = v49;
      v38 = &v29;
      __chkstk_darwin(&v29);
      v25 = v40;
      v26 = &v29 - 6;
      v41 = &v29 - 6;
      v26[2] = (uint64_t)v39;
      v26[3] = (uint64_t)v25;
      v26[4] = v27;
      v42 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v28 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v41, v42, v28);
      if (v24)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v47, "Query completed but there is no state…", v33, v46);
        v30 = 0;
        sub_1000077A4(v34, 0);
        sub_1000077A4(v35, v30);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v49);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v49);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v92, v89);
  }
}

id sub_100021A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  id v5;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_10002264C(a1, a2, a3, a4, a5);
}

unint64_t sub_100021AC4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B4A0;
  if (!qword_10008B4A0)
  {
    v0 = objc_opt_self(EMMailboxScope);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B4A0);
    return ObjCClassMetadata;
  }
  return v3;
}

uint64_t sub_100021B28()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  if (!"MailWidgetExtension.MailStatusDataSource")
  {
    v1 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v1, 136, 0);
    __break(1u);
  }
  result = sub_10004F064((uint64_t)"MailWidgetExtension.MailStatusDataSource", 40, (unint64_t)"init()", 6, 2, (unint64_t)"MailWidgetExtension/MailStatusDataSource.swift", 46, 2, v2, 0xAuLL, 0xDuLL);
  __break(1u);
  return result;
}

uint64_t sub_100021C38(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = a2 & 1;
  return a3(&v4);
}

void sub_100021CF8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  NSObject *v59;
  int v60;
  Class isa;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id *v78;
  void *v79;
  void *v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint32_t v87;
  id v88;
  void *v89;
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;

  v65 = a1;
  v73 = a2;
  v66 = a3;
  v94 = 0;
  v93 = 0;
  v92 = 0;
  v91 = 0;
  v71 = 0;
  v64 = 0;
  v80 = 0;
  v74 = 0;
  v67 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void *)__chkstk_darwin(v73);
  v70 = (char *)v35 - v69;
  v94 = v5;
  v93 = v4;
  v92 = v6;
  v91 = v3;
  v7 = v4;
  v72 = (uint64_t *)(v3 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers);
  swift_beginAccess(v3 + OBJC_IVAR____TtC19MailWidgetExtension20MailStatusDataSource_debouncers);
  v75 = *v72;
  v78 = &v88;
  v88 = v73;
  v76 = sub_100008AC0((uint64_t *)&unk_10008BF30);
  v77 = sub_100020858();
  v8 = sub_10001FBA4();
  Dictionary.subscript.getter(&v89, v78, v75, v76, v77, v8);

  v79 = v89;
  if (v89)
  {
    v63 = v79;
    v62 = v79;
    v80 = v79;
    swift_endAccess(v90);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v62, "debounceResult:");
    swift_unknownObjectRelease();

  }
  else
  {
    v9 = v70;
    swift_endAccess(v90);
    v10 = sub_10001F988();
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v9, v10, v67);
    v11 = v73;
    v50 = 7;
    v12 = swift_allocObject(&unk_100082BF8, 24, 7);
    v51 = v12;
    *(_QWORD *)(v12 + 16) = v73;
    v59 = Logger.logObject.getter(v12);
    v60 = static os_log_type_t.error.getter();
    v46 = &v86;
    v86 = 12;
    v44 = sub_1000079AC();
    v45 = sub_100007A14();
    v13 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v87, v46, &type metadata for UInt32, &type metadata for Int, v44, v45, v13);
    v47 = v87;
    v48 = 17;
    v14 = swift_allocObject(&unk_100082C20, 17, v50);
    v15 = v48;
    v16 = v50;
    v53 = v14;
    *(_BYTE *)(v14 + 16) = 64;
    v17 = swift_allocObject(&unk_100082C48, v15, v16);
    v18 = v50;
    v54 = v17;
    *(_BYTE *)(v17 + 16) = 8;
    v49 = 32;
    v19 = swift_allocObject(&unk_100082C70, 32, v18);
    v20 = v49;
    v21 = v50;
    v22 = v19;
    v23 = v51;
    v52 = v22;
    *(_QWORD *)(v22 + 16) = sub_100022960;
    *(_QWORD *)(v22 + 24) = v23;
    v24 = swift_allocObject(&unk_100082C98, v20, v21);
    v25 = v52;
    v56 = v24;
    *(_QWORD *)(v24 + 16) = sub_100008A6C;
    *(_QWORD *)(v24 + 24) = v25;
    v58 = sub_100008AC0(&qword_10008AB20);
    v55 = _allocateUninitializedArray<A>(_:)(3, v58);
    v57 = v26;
    swift_retain();
    v27 = v53;
    v28 = v57;
    *v57 = sub_100008A00;
    v28[1] = v27;
    swift_retain();
    v29 = v54;
    v30 = v57;
    v57[2] = sub_100008A00;
    v30[3] = v29;
    swift_retain();
    v31 = v55;
    v32 = v56;
    v33 = v57;
    v57[4] = sub_100022B98;
    v33[5] = v32;
    sub_1000073C4();
    swift_bridgeObjectRelease(v31);
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      v34 = v64;
      v37 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v36 = sub_100008AC0(&qword_10008AB30);
      v38 = sub_1000076F4(1, v36, v36);
      v39 = sub_1000076F4(0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v40 = &v85;
      v85 = v37;
      v41 = &v84;
      v84 = v38;
      v42 = &v83;
      v83 = v39;
      sub_10000774C(2, &v85);
      sub_10000774C(1, v40);
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v82 = v53;
      sub_100007760(&v81, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
      v43 = v34;
      if (v34)
      {
        __break(1u);
      }
      else
      {
        v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v82 = v54;
        sub_100007760(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
        v35[1] = 0;
        v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100022B98;
        v82 = v56;
        sub_100007760(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v60, "Missing debouncer for query:%@", v37, v47);
        sub_1000077A4(v38, 1);
        sub_1000077A4(v39, 0);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v67);
  }
}

void *sub_1000224AC(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

id sub_100022544(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  id v8;
  id v9;
  NSString v10;
  void *v13;
  uint64_t ObjCClassFromMetadata;
  NSArray v17;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  sub_10001AB38();
  v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a6)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v6 = objc_msgSend(v13, "initWithTargetClass:predicate:sortDescriptors:queryOptions:label:", ObjCClassFromMetadata, a2, v17.super.isa, a4, v10);
  }
  else
  {
    v6 = objc_msgSend(v13, "initWithTargetClass:predicate:sortDescriptors:queryOptions:label:", ObjCClassFromMetadata, a2, v17.super.isa, a4, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease(a3);
  return v9;
}

id sub_10002264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  id v8;
  const void *v9;
  id v11;
  void **aBlock;
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a3;
  v18 = a4;
  aBlock = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = 0;
  v15 = sub_1000226FC;
  v16 = &unk_100082CB0;
  v9 = _Block_copy(&aBlock);
  v11 = objc_msgSend(v8, "initWithTimeInterval:scheduler:startAfter:block:", a1, a2, a5);
  _Block_release(v9);
  swift_release();
  swift_unknownObjectRelease(a1);
  return v11;
}

uint64_t sub_1000226FC(uint64_t a1, uint64_t a2)
{
  __n128 v2;
  void (*v4)(__n128);
  _QWORD v6[4];
  _QWORD v7[4];

  v4 = *(void (**)(__n128))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain(a2);
  if (a2)
  {
    v6[3] = swift_getObjectType(a2);
    v6[0] = a2;
    v2 = sub_100022C40((uint64_t)v6, (uint64_t)v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  v4(v2);
  sub_100022C00(v7);
  return swift_release();
}

uint64_t sub_1000227C0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000227FC(uint64_t a1)
{
  uint64_t v1;

  return sub_10001F870(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_100022808()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t type metadata accessor for MailStatusDataSource()
{
  return objc_opt_self(_TtC19MailWidgetExtension20MailStatusDataSource);
}

unint64_t sub_100022868()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B520;
  if (!qword_10008B520)
  {
    v0 = sub_100008DF0((uint64_t *)&unk_10008B4E0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B520);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_1000228D8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100022914(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100021C38(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_100022924()
{
  uint64_t v0;
  uint64_t v2;

  return swift_deallocObject(v2, 24);
}

void *sub_100022960()
{
  uint64_t v0;

  return sub_1000224AC(*(void **)(v0 + 16));
}

uint64_t sub_100022968()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100022990()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000229B8(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _typeName(_:qualified:)(v1, 0);
}

uint64_t sub_1000229E4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

void sub_100022A20(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD *v4;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v7 = (id)a4();
  v8 = *a1;
  v9 = *a1 + 8;
  if (v7)
  {
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8, v9);
  }
  else
  {
    v11 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  }
  *a1 = v8 + 8;
  v4 = *a2;
  if (*a2)
  {
    *v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {

  }
}

uint64_t sub_100022B5C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

void sub_100022B98(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  sub_100022A20(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100022BA4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100022BE8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100022C00(_QWORD *a1)
{
  if (a1[3])
    sub_10000A410(a1);
  return a1;
}

__n128 sub_100022C40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_100022C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t sub_100022CD4()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 40))
    sub_10000A410((_QWORD *)(v2 + 16));
  return swift_deallocObject(v2, 48);
}

_OWORD *sub_100022D2C(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

uint64_t sub_100022D90()
{
  return sub_1000212A8();
}

uint64_t sub_100022D98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100022DC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100022DE8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100022E24()
{
  uint64_t v0;

  return sub_1000229B8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100022E30()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100022E6C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

_QWORD *sub_100022EA8(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t sub_100022EFC()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger(0);
  sub_100003474(v1, qword_10008B670);
  sub_1000034E4(v1, (uint64_t)qword_10008B670);
  return sub_100014544((uint64_t)&unk_100083498, (uint64_t)&unk_100083498);
}

uint64_t sub_100022F54()
{
  uint64_t v0;

  if (qword_10008AA88 != -1)
    swift_once(&qword_10008AA88, sub_100022EFC);
  v0 = type metadata accessor for Logger(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008B670);
}

_QWORD *sub_100022FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a2;
  v10 = a1;
  v16 = 0;
  v15 = 0;
  v12 = 0;
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(0);
  v11 = (uint64_t)&v7 - v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v3) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void *)__chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v7 - v9);
  v16 = v10;
  v15 = v2;
  sub_1000230AC(v4, v5);
  sub_100069ADC(v11, 1, v12, 0, (uint64_t)v14);
  return sub_10001C8FC(v14, v13);
}

_QWORD *sub_1000230AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *result;
  Swift::String v6;
  uint64_t v9;
  void *v10;
  _QWORD __dst[5];
  _BYTE v12[40];
  uint64_t v13;
  void *v14;

  v10 = 0;
  v9 = 0;
  v14 = a1;
  v13 = v2;
  sub_100026C84(v2, (uint64_t)v12);
  memcpy(__dst, v12, sizeof(__dst));
  v3 = a1;
  if (a1)
  {
    v10 = a1;
    v4 = a1;
    sub_10001491C(a1, a2);

  }
  else
  {
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Intent is nil", 0xDuLL, 1);
    sub_1000262E0(v6._countAndFlagsBits, (uint64_t)v6._object, (uint64_t)__dst, a2);
    swift_bridgeObjectRelease(v6._object);
  }
  result = __dst;
  sub_100026CD0(__dst);
  return result;
}

uint64_t sub_10002330C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _QWORD v77[5];
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  _BYTE **v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(unint64_t, char *, uint64_t);
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint32_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  NSObject *v131;
  int v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint32_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v93 = a1;
  v101 = a2;
  v91 = a3;
  v92 = a4;
  v144 = 0;
  v143 = 0;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v88 = 0;
  v89 = 0;
  v107 = type metadata accessor for TimelineProviderContext(0);
  v98 = *(_QWORD *)(v107 - 8);
  v104 = *(_QWORD *)(v98 + 64);
  v90 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(0);
  v106 = (char *)v77 - v90;
  v97 = type metadata accessor for Logger(v4);
  v96 = *(_QWORD *)(v97 - 8);
  v94 = (*(_QWORD *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v93);
  v6 = (char *)v77 - v94;
  v95 = (char *)v77 - v94;
  v144 = v5;
  v143 = v7;
  v141 = v8;
  v142 = v9;
  v140 = v10;
  v11 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v6, v11, v97);
  v102 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  v102(v106, v101, v107);
  v103 = *(unsigned int *)(v98 + 80);
  v99 = (v103 + 16) & ~(unint64_t)v103;
  v119 = 7;
  v100 = swift_allocObject(&unk_100082DD8, v99 + v104, v103 | 7);
  v108 = *(void (**)(unint64_t, char *, uint64_t))(v98 + 32);
  v108(v100 + v99, v106, v107);
  swift_retain();
  v118 = 32;
  v12 = swift_allocObject(&unk_100082E00, 32, v119);
  v13 = v100;
  v113 = v12;
  *(_QWORD *)(v12 + 16) = sub_100026D64;
  *(_QWORD *)(v12 + 24) = v13;
  swift_release();
  v102(v106, v101, v107);
  v105 = (v103 + 16) & ~(unint64_t)v103;
  v116 = swift_allocObject(&unk_100082E28, v105 + v104, v119 | v103);
  v14 = ((uint64_t (*)(unint64_t, char *, uint64_t))v108)(v116 + v105, v106, v107);
  v131 = Logger.logObject.getter(v14);
  v132 = static os_log_type_t.default.getter();
  v111 = &v138;
  v138 = 18;
  v109 = sub_1000079AC();
  v110 = sub_100007A14();
  v15 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v139, v111, &type metadata for UInt32, &type metadata for Int, v109, v110, v15);
  v112 = v139;
  v115 = 17;
  v16 = swift_allocObject(&unk_100082E50, 17, v119);
  v17 = v115;
  v18 = v119;
  v122 = v16;
  *(_BYTE *)(v16 + 16) = 32;
  v19 = swift_allocObject(&unk_100082E78, v17, v18);
  v20 = v118;
  v21 = v119;
  v123 = v19;
  *(_BYTE *)(v19 + 16) = 8;
  v22 = swift_allocObject(&unk_100082EA0, v20, v21);
  v23 = v118;
  v24 = v119;
  v25 = v22;
  v26 = v113;
  v114 = v25;
  *(_QWORD *)(v25 + 16) = sub_100029B7C;
  *(_QWORD *)(v25 + 24) = v26;
  v27 = swift_allocObject(&unk_100082EC8, v23, v24);
  v28 = v115;
  v29 = v119;
  v30 = v27;
  v31 = v114;
  v124 = v30;
  *(_QWORD *)(v30 + 16) = sub_100008A6C;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = swift_allocObject(&unk_100082EF0, v28, v29);
  v33 = v115;
  v34 = v119;
  v125 = v32;
  *(_BYTE *)(v32 + 16) = 0;
  v35 = swift_allocObject(&unk_100082F18, v33, v34);
  v36 = v118;
  v37 = v119;
  v126 = v35;
  *(_BYTE *)(v35 + 16) = 4;
  v38 = swift_allocObject(&unk_100082F40, v36, v37);
  v39 = v118;
  v40 = v119;
  v41 = v38;
  v42 = v116;
  v117 = v41;
  *(_QWORD *)(v41 + 16) = sub_100029CA4;
  *(_QWORD *)(v41 + 24) = v42;
  v43 = swift_allocObject(&unk_100082F68, v39, v40);
  v44 = v118;
  v45 = v119;
  v46 = v43;
  v47 = v117;
  v120 = v46;
  *(_QWORD *)(v46 + 16) = sub_100011DE4;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = swift_allocObject(&unk_100082F90, v44, v45);
  v49 = v118;
  v50 = v119;
  v51 = v48;
  v52 = v120;
  v121 = v51;
  *(_QWORD *)(v51 + 16) = sub_100008A6C;
  *(_QWORD *)(v51 + 24) = v52;
  v53 = swift_allocObject(&unk_100082FB8, v49, v50);
  v54 = v121;
  v128 = v53;
  *(_QWORD *)(v53 + 16) = sub_100011E68;
  *(_QWORD *)(v53 + 24) = v54;
  v130 = sub_100008AC0(&qword_10008AB20);
  v127 = _allocateUninitializedArray<A>(_:)(6, v130);
  v129 = v55;
  swift_retain();
  v56 = v122;
  v57 = v129;
  *v129 = sub_100008A00;
  v57[1] = v56;
  swift_retain();
  v58 = v123;
  v59 = v129;
  v129[2] = sub_100008A00;
  v59[3] = v58;
  swift_retain();
  v60 = v124;
  v61 = v129;
  v129[4] = sub_100008AB4;
  v61[5] = v60;
  swift_retain();
  v62 = v125;
  v63 = v129;
  v129[6] = sub_100008A00;
  v63[7] = v62;
  swift_retain();
  v64 = v126;
  v65 = v129;
  v129[8] = sub_100008A00;
  v65[9] = v64;
  swift_retain();
  v66 = v127;
  v67 = v128;
  v68 = v129;
  v129[10] = sub_100011EB0;
  v68[11] = v67;
  sub_1000073C4();
  swift_bridgeObjectRelease(v66);
  if (os_log_type_enabled(v131, (os_log_type_t)v132))
  {
    v69 = v88;
    v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(18, &type metadata for UInt8);
    v79 = sub_100008AC0(&qword_10008AB30);
    v81 = sub_1000076F4(0, v79, v79);
    v82 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v84 = &v137;
    v137 = v80;
    v85 = &v136;
    v136 = v81;
    v86 = &v135;
    v135 = v82;
    v83 = 2;
    sub_10000774C(2, &v137);
    sub_10000774C(v83, v84);
    v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v134 = v122;
    sub_100007760(&v133, (uint64_t)v84, (uint64_t)v85, (uint64_t)v86);
    v87 = v69;
    if (v69)
    {
      __break(1u);
    }
    else
    {
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v123;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v78 = 0;
      v70 = v78;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v134 = v124;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[4] = v70;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v125;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[3] = 0;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v126;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[2] = 0;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100011EB0;
      v134 = v128;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v132, "Get snapshot for family: %s, is preview: %{BOOL}d", v80, v112);
      sub_1000077A4(v81, 0);
      sub_1000077A4(v82, 1);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  swift_retain();
  v71 = swift_allocObject(&unk_100082FE0, 32, 7);
  v72 = v92;
  v73 = v101;
  v74 = v71;
  v75 = v93;
  v77[1] = v74;
  *(_QWORD *)(v74 + 16) = v91;
  *(_QWORD *)(v74 + 24) = v72;
  sub_10002469C(v75, v73, (uint64_t)sub_10002A1BC, v74);
  return swift_release();
}

uint64_t sub_100023E34()
{
  return TimelineProviderContext.family.getter();
}

uint64_t sub_100023E54()
{
  return TimelineProviderContext.isPreview.getter() & 1;
}

uint64_t sub_100023E78(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v34[3];
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint32_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint32_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v52 = a1;
  v47 = a2;
  v46 = a3;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  v43 = 0;
  v44 = 0;
  v53 = *(_QWORD *)(type metadata accessor for MailEntry(0) - 8);
  v54 = *(_QWORD *)(v53 + 64);
  v45 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(0);
  v56 = (uint64_t)v34 - v45;
  v51 = type metadata accessor for Logger(v3);
  v50 = *(_QWORD *)(v51 - 8);
  v48 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v52);
  v5 = (char *)v34 - v48;
  v49 = (char *)v34 - v48;
  v83 = v4;
  v81 = v6;
  v82 = v7;
  v8 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v5, v8, v51);
  sub_10001C2D0(v52, v56);
  v9 = *(unsigned __int8 *)(v53 + 80);
  v55 = (v9 + 16) & ~v9;
  v63 = 7;
  v64 = swift_allocObject(&unk_1000838D0, v55 + v54, v9 | 7);
  v10 = sub_10001CAD4(v56, v64 + v55);
  v72 = Logger.logObject.getter(v10);
  v73 = static os_log_type_t.default.getter();
  v59 = &v79;
  v79 = 12;
  v57 = sub_1000079AC();
  v58 = sub_100007A14();
  v11 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v80, v59, &type metadata for UInt32, &type metadata for Int, v57, v58, v11);
  v60 = v80;
  v61 = 17;
  v12 = swift_allocObject(&unk_1000838F8, 17, v63);
  v13 = v61;
  v14 = v63;
  v66 = v12;
  *(_BYTE *)(v12 + 16) = 34;
  v15 = swift_allocObject(&unk_100083920, v13, v14);
  v16 = v63;
  v67 = v15;
  *(_BYTE *)(v15 + 16) = 8;
  v62 = 32;
  v17 = swift_allocObject(&unk_100083948, 32, v16);
  v18 = v62;
  v19 = v63;
  v20 = v17;
  v21 = v64;
  v65 = v20;
  *(_QWORD *)(v20 + 16) = sub_10002BC08;
  *(_QWORD *)(v20 + 24) = v21;
  v22 = swift_allocObject(&unk_100083970, v18, v19);
  v23 = v65;
  v69 = v22;
  *(_QWORD *)(v22 + 16) = sub_100008A6C;
  *(_QWORD *)(v22 + 24) = v23;
  v71 = sub_100008AC0(&qword_10008AB20);
  v68 = _allocateUninitializedArray<A>(_:)(3, v71);
  v70 = v24;
  swift_retain();
  v25 = v66;
  v26 = v70;
  *v70 = sub_100008A00;
  v26[1] = v25;
  swift_retain();
  v27 = v67;
  v28 = v70;
  v70[2] = sub_100008A00;
  v28[3] = v27;
  swift_retain();
  v29 = v68;
  v30 = v69;
  v31 = v70;
  v70[4] = sub_100008AB4;
  v31[5] = v30;
  sub_1000073C4();
  swift_bridgeObjectRelease(v29);
  if (os_log_type_enabled(v72, (os_log_type_t)v73))
  {
    v32 = v43;
    v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
    v35 = sub_100008AC0(&qword_10008AB30);
    v37 = sub_1000076F4(0, v35, v35);
    v38 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v39 = &v78;
    v78 = v36;
    v40 = &v77;
    v77 = v37;
    v41 = &v76;
    v76 = v38;
    sub_10000774C(2, &v78);
    sub_10000774C(1, v39);
    v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v75 = v66;
    sub_100007760(&v74, (uint64_t)v39, (uint64_t)v40, (uint64_t)v41);
    v42 = v32;
    if (v32)
    {
      __break(1u);
    }
    else
    {
      v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v75 = v67;
      sub_100007760(&v74, (uint64_t)&v78, (uint64_t)&v77, (uint64_t)&v76);
      v34[1] = 0;
      v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v75 = v69;
      sub_100007760(&v74, (uint64_t)&v78, (uint64_t)&v77, (uint64_t)&v76);
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v73, "Get snapshot completed with relvance: %{public}s", v36, v60);
      sub_1000077A4(v37, 0);
      sub_1000077A4(v38, 1);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  swift_retain();
  v47(v52);
  return swift_release();
}

uint64_t sub_100024500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;

  v15 = a1;
  v1 = sub_100008AC0(&qword_10008B380);
  v11 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v18 = (char *)&v6 - v11;
  v12 = 0;
  v17 = type metadata accessor for TimelineEntryRelevance(0);
  v16 = *(_QWORD *)(v17 - 8);
  v13 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v12);
  v14 = (char *)&v6 - v13;
  v3 = type metadata accessor for MailEntry(v2);
  sub_10001BA8C((const void *)(v15 + *(int *)(v3 + 20)), v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v18, 1, v17) == 1)
  {
    v9 = sub_10006C450();
    v10 = &v19;
    swift_beginAccess(v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, v9, v17);
    swift_endAccess(v10);
    sub_10002BD00((uint64_t)v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v18, v17);
  }
  v7 = sub_10006C4B0();
  v8 = v4;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v17);
  return v7;
}

void sub_10002469C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;
  unsigned __int8 v6;
  uint64_t v9;
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v16 = a1;
  v15 = a2;
  v13 = a3;
  v14 = a4;
  v12 = v4;
  v6 = objc_msgSend((id)objc_opt_self(EMInternalPreferences), "preferenceEnabled:", 17);
  v11[40] = v6 & 1;
  v5 = a1;
  sub_100026C84(v4, (uint64_t)v11);
  swift_retain();
  v9 = swift_allocObject(&unk_100083008, 80, 7);
  memcpy((void *)(v9 + 16), v11, 0x28uLL);
  *(_BYTE *)(v9 + 56) = v6 & 1;
  *(_QWORD *)(v9 + 64) = a3;
  *(_QWORD *)(v9 + 72) = a4;
  sub_100026098((uint64_t)a1, (uint64_t)sub_10002A20C, v9);
  swift_release();

}

uint64_t sub_1000247C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _QWORD v77[5];
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  _BYTE **v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(unint64_t, char *, uint64_t);
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint32_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  NSObject *v131;
  int v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint32_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v93 = a1;
  v101 = a2;
  v91 = a3;
  v92 = a4;
  v144 = 0;
  v143 = 0;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v88 = 0;
  v89 = 0;
  v107 = type metadata accessor for TimelineProviderContext(0);
  v98 = *(_QWORD *)(v107 - 8);
  v104 = *(_QWORD *)(v98 + 64);
  v90 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(0);
  v106 = (char *)v77 - v90;
  v97 = type metadata accessor for Logger(v4);
  v96 = *(_QWORD *)(v97 - 8);
  v94 = (*(_QWORD *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v93);
  v6 = (char *)v77 - v94;
  v95 = (char *)v77 - v94;
  v144 = v5;
  v143 = v7;
  v141 = v8;
  v142 = v9;
  v140 = v10;
  v11 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v6, v11, v97);
  v102 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  v102(v106, v101, v107);
  v103 = *(unsigned int *)(v98 + 80);
  v99 = (v103 + 16) & ~(unint64_t)v103;
  v119 = 7;
  v100 = swift_allocObject(&unk_100083030, v99 + v104, v103 | 7);
  v108 = *(void (**)(unint64_t, char *, uint64_t))(v98 + 32);
  v108(v100 + v99, v106, v107);
  swift_retain();
  v118 = 32;
  v12 = swift_allocObject(&unk_100083058, 32, v119);
  v13 = v100;
  v113 = v12;
  *(_QWORD *)(v12 + 16) = sub_100026D64;
  *(_QWORD *)(v12 + 24) = v13;
  swift_release();
  v102(v106, v101, v107);
  v105 = (v103 + 16) & ~(unint64_t)v103;
  v116 = swift_allocObject(&unk_100083080, v105 + v104, v119 | v103);
  v14 = ((uint64_t (*)(unint64_t, char *, uint64_t))v108)(v116 + v105, v106, v107);
  v131 = Logger.logObject.getter(v14);
  v132 = static os_log_type_t.default.getter();
  v111 = &v138;
  v138 = 18;
  v109 = sub_1000079AC();
  v110 = sub_100007A14();
  v15 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v139, v111, &type metadata for UInt32, &type metadata for Int, v109, v110, v15);
  v112 = v139;
  v115 = 17;
  v16 = swift_allocObject(&unk_1000830A8, 17, v119);
  v17 = v115;
  v18 = v119;
  v122 = v16;
  *(_BYTE *)(v16 + 16) = 32;
  v19 = swift_allocObject(&unk_1000830D0, v17, v18);
  v20 = v118;
  v21 = v119;
  v123 = v19;
  *(_BYTE *)(v19 + 16) = 8;
  v22 = swift_allocObject(&unk_1000830F8, v20, v21);
  v23 = v118;
  v24 = v119;
  v25 = v22;
  v26 = v113;
  v114 = v25;
  *(_QWORD *)(v25 + 16) = sub_100029B7C;
  *(_QWORD *)(v25 + 24) = v26;
  v27 = swift_allocObject(&unk_100083120, v23, v24);
  v28 = v115;
  v29 = v119;
  v30 = v27;
  v31 = v114;
  v124 = v30;
  *(_QWORD *)(v30 + 16) = sub_100008A6C;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = swift_allocObject(&unk_100083148, v28, v29);
  v33 = v115;
  v34 = v119;
  v125 = v32;
  *(_BYTE *)(v32 + 16) = 0;
  v35 = swift_allocObject(&unk_100083170, v33, v34);
  v36 = v118;
  v37 = v119;
  v126 = v35;
  *(_BYTE *)(v35 + 16) = 4;
  v38 = swift_allocObject(&unk_100083198, v36, v37);
  v39 = v118;
  v40 = v119;
  v41 = v38;
  v42 = v116;
  v117 = v41;
  *(_QWORD *)(v41 + 16) = sub_100029CA4;
  *(_QWORD *)(v41 + 24) = v42;
  v43 = swift_allocObject(&unk_1000831C0, v39, v40);
  v44 = v118;
  v45 = v119;
  v46 = v43;
  v47 = v117;
  v120 = v46;
  *(_QWORD *)(v46 + 16) = sub_100011DE4;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = swift_allocObject(&unk_1000831E8, v44, v45);
  v49 = v118;
  v50 = v119;
  v51 = v48;
  v52 = v120;
  v121 = v51;
  *(_QWORD *)(v51 + 16) = sub_100008A6C;
  *(_QWORD *)(v51 + 24) = v52;
  v53 = swift_allocObject(&unk_100083210, v49, v50);
  v54 = v121;
  v128 = v53;
  *(_QWORD *)(v53 + 16) = sub_100011E68;
  *(_QWORD *)(v53 + 24) = v54;
  v130 = sub_100008AC0(&qword_10008AB20);
  v127 = _allocateUninitializedArray<A>(_:)(6, v130);
  v129 = v55;
  swift_retain();
  v56 = v122;
  v57 = v129;
  *v129 = sub_100008A00;
  v57[1] = v56;
  swift_retain();
  v58 = v123;
  v59 = v129;
  v129[2] = sub_100008A00;
  v59[3] = v58;
  swift_retain();
  v60 = v124;
  v61 = v129;
  v129[4] = sub_100008AB4;
  v61[5] = v60;
  swift_retain();
  v62 = v125;
  v63 = v129;
  v129[6] = sub_100008A00;
  v63[7] = v62;
  swift_retain();
  v64 = v126;
  v65 = v129;
  v129[8] = sub_100008A00;
  v65[9] = v64;
  swift_retain();
  v66 = v127;
  v67 = v128;
  v68 = v129;
  v129[10] = sub_100011EB0;
  v68[11] = v67;
  sub_1000073C4();
  swift_bridgeObjectRelease(v66);
  if (os_log_type_enabled(v131, (os_log_type_t)v132))
  {
    v69 = v88;
    v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(18, &type metadata for UInt8);
    v79 = sub_100008AC0(&qword_10008AB30);
    v81 = sub_1000076F4(0, v79, v79);
    v82 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v84 = &v137;
    v137 = v80;
    v85 = &v136;
    v136 = v81;
    v86 = &v135;
    v135 = v82;
    v83 = 2;
    sub_10000774C(2, &v137);
    sub_10000774C(v83, v84);
    v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v134 = v122;
    sub_100007760(&v133, (uint64_t)v84, (uint64_t)v85, (uint64_t)v86);
    v87 = v69;
    if (v69)
    {
      __break(1u);
    }
    else
    {
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v123;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v78 = 0;
      v70 = v78;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v134 = v124;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[4] = v70;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v125;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[3] = 0;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v134 = v126;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      v77[2] = 0;
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100011EB0;
      v134 = v128;
      sub_100007760(&v133, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135);
      _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v132, "Get timeline for family: %s, is preview: %{BOOL}d", v80, v112);
      sub_1000077A4(v81, 0);
      sub_1000077A4(v82, 1);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  swift_retain();
  v71 = swift_allocObject(&unk_100083238, 32, 7);
  v72 = v92;
  v73 = v101;
  v74 = v71;
  v75 = v93;
  v77[1] = v74;
  *(_QWORD *)(v74 + 16) = v91;
  *(_QWORD *)(v74 + 24) = v72;
  sub_10002469C(v75, v73, (uint64_t)sub_10002A584, v74);
  return swift_release();
}

uint64_t sub_1000252F0(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(char *);
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint32_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  NSObject *v86;
  int v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint32_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v66 = a1;
  v61 = a2;
  v60 = a3;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  v50 = 0;
  v57 = 0;
  v3 = type metadata accessor for TimelineReloadPolicy();
  v51 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v3);
  v52 = (char *)&v39 - v51;
  v53 = sub_100008AC0((uint64_t *)&unk_10008B6B0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v57);
  v56 = (char *)&v39 - v55;
  v58 = type metadata accessor for MailEntry(v4);
  v67 = *(_QWORD *)(v58 - 8);
  v68 = *(_QWORD *)(v67 + 64);
  v59 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v57);
  v70 = (uint64_t)&v39 - v59;
  v65 = type metadata accessor for Logger(v5);
  v64 = *(_QWORD *)(v65 - 8);
  v62 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v66);
  v7 = (char *)&v39 - v62;
  v63 = (char *)&v39 - v62;
  v97 = v6;
  v95 = v8;
  v96 = v9;
  v10 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v7, v10, v65);
  sub_10001C2D0(v66, v70);
  v11 = *(unsigned __int8 *)(v67 + 80);
  v69 = (v11 + 16) & ~v11;
  v77 = 7;
  v78 = swift_allocObject(&unk_1000837E0, v69 + v68, v11 | 7);
  v12 = sub_10001CAD4(v70, v78 + v69);
  v86 = Logger.logObject.getter(v12);
  v87 = static os_log_type_t.default.getter();
  v73 = &v93;
  v93 = 12;
  v71 = sub_1000079AC();
  v72 = sub_100007A14();
  v13 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v94, v73, &type metadata for UInt32, &type metadata for Int, v71, v72, v13);
  v74 = v94;
  v75 = 17;
  v14 = swift_allocObject(&unk_100083808, 17, v77);
  v15 = v75;
  v16 = v77;
  v80 = v14;
  *(_BYTE *)(v14 + 16) = 34;
  v17 = swift_allocObject(&unk_100083830, v15, v16);
  v18 = v77;
  v81 = v17;
  *(_BYTE *)(v17 + 16) = 8;
  v76 = 32;
  v19 = swift_allocObject(&unk_100083858, 32, v18);
  v20 = v76;
  v21 = v77;
  v22 = v19;
  v23 = v78;
  v79 = v22;
  *(_QWORD *)(v22 + 16) = sub_10002BC08;
  *(_QWORD *)(v22 + 24) = v23;
  v24 = swift_allocObject(&unk_100083880, v20, v21);
  v25 = v79;
  v83 = v24;
  *(_QWORD *)(v24 + 16) = sub_100008A6C;
  *(_QWORD *)(v24 + 24) = v25;
  v85 = sub_100008AC0(&qword_10008AB20);
  v82 = _allocateUninitializedArray<A>(_:)(3, v85);
  v84 = v26;
  swift_retain();
  v27 = v80;
  v28 = v84;
  *v84 = sub_100008A00;
  v28[1] = v27;
  swift_retain();
  v29 = v81;
  v30 = v84;
  v84[2] = sub_100008A00;
  v30[3] = v29;
  swift_retain();
  v31 = v82;
  v32 = v83;
  v33 = v84;
  v84[4] = sub_100008AB4;
  v33[5] = v32;
  sub_1000073C4();
  swift_bridgeObjectRelease(v31);
  if (os_log_type_enabled(v86, (os_log_type_t)v87))
  {
    v34 = v50;
    v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
    v42 = sub_100008AC0(&qword_10008AB30);
    v44 = sub_1000076F4(0, v42, v42);
    v45 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v46 = &v92;
    v92 = v43;
    v47 = &v91;
    v91 = v44;
    v48 = &v90;
    v90 = v45;
    sub_10000774C(2, &v92);
    sub_10000774C(1, v46);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v89 = v80;
    sub_100007760(&v88, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
    v49 = v34;
    if (v34)
    {
      __break(1u);
    }
    else
    {
      v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v89 = v81;
      sub_100007760(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
      v41 = 0;
      v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v89 = v83;
      sub_100007760(&v88, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
      _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v87, "Get timeline completed with relvance: %{public}s", v43, v74);
      sub_1000077A4(v44, 0);
      sub_1000077A4(v45, 1);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  swift_retain();
  v39 = _allocateUninitializedArray<A>(_:)(1, v58);
  sub_10001C2D0(v66, v35);
  v36 = v39;
  sub_1000073C4();
  v40 = v36;
  static TimelineReloadPolicy.never.getter();
  v37 = sub_10002B238();
  Timeline.init(entries:policy:)(v40, v52, v58, v37);
  v61(v56);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  return swift_release();
}

uint64_t sub_100025AD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a1;
  v17 = a2;
  v25 = a3;
  v21 = a4;
  v22 = a5;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v19 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v18 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v17);
  v24 = (uint64_t)&v17 - v18;
  v38 = v6;
  v37 = v5;
  v36 = v7 & 1;
  v34 = v8;
  v35 = v9;
  v30 = v31;
  sub_100026C84(v5, (uint64_t)v31);
  v26 = v32;
  v27 = v33;
  sub_100022EA8(v30, v32);
  swift_retain();
  sub_10000D0CC(v28, v24);
  v10 = *(unsigned __int8 *)(v19 + 80);
  v23 = (v10 + 32) & ~v10;
  v11 = swift_allocObject(&unk_1000838A8, v23 + v20, v10 | 7);
  v12 = v22;
  v13 = v23;
  v14 = v11;
  v15 = v24;
  v29 = v14;
  *(_QWORD *)(v14 + 16) = v21;
  *(_QWORD *)(v14 + 24) = v12;
  sub_10000D3B8(v15, v14 + v13);
  (*(void (**)(uint64_t, _QWORD, _QWORD *(*)(unint64_t, uint64_t, int), uint64_t, uint64_t))(v27 + 16))(v28, v25 & 1, sub_10002BEA0, v29, v26);
  swift_release();
  return sub_10000A410(v30);
}

_QWORD *sub_100025C70(unint64_t a1, uint64_t a2, int a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void (*v39)(_QWORD *);
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[4];
  int v60;

  v39 = a4;
  v40 = a5;
  v41 = a6;
  v58 = 0;
  memset(v59, 0, 11);
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v59[2] = a1;
  v59[3] = a2;
  v60 = a3;
  v43 = a1;
  v44 = a2;
  v45 = (unsigned __int16)a3;
  v42 = BYTE2(a3);
  v36 = 0;
  v34 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(0);
  v35 = (uint64_t)&v16 - v34;
  v37 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v6) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v36);
  v38 = (uint64_t *)((char *)&v16 - v37);
  v8 = type metadata accessor for MailEntry(v7);
  __chkstk_darwin(v8);
  v46 = (uint64_t *)((char *)&v16 - v9);
  v58 = v43;
  v59[0] = v44;
  LOWORD(v59[1]) = v45;
  BYTE2(v59[1]) = v10 & 1;
  v56 = v11;
  v57 = v12;
  v55 = v13;
  if ((v10 & 1) != 0)
  {
    v52 = 1;
    v53 = 0;
    v54 = 0;
  }
  else
  {
    v30 = v43;
    v31 = v44;
    v32 = v45;
    v33 = v45 >> 8;
    v25 = v45 >> 8;
    v24 = v45;
    v23 = v44;
    v26 = v43;
    swift_bridgeObjectRetain(v43);
    v51 = v26;
    v49 = v23;
    v50 = v24 & 1;
    v48 = v25 & 1;
    swift_bridgeObjectRetain(v26);
    v28 = &v47;
    v47 = v26;
    v27 = sub_100008AC0(&qword_10008B0F0);
    v14 = sub_100012AB0();
    v29 = Collection.isEmpty.getter(v27, v14);
    sub_10000A004(v28);
    if ((v29 & 1) != 0)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      swift_bridgeObjectRetain(v26);
      v20 = v26;
      v21 = v23;
      v22 = v24 & 1 | ((v25 & 1) << 8);
    }
    v52 = v20;
    v53 = v21;
    v54 = v22;
    swift_bridgeObjectRelease(v26);
  }
  swift_retain();
  sub_10000D0CC(v41, v35);
  v19 = (unint64_t *)&v52;
  v16 = v52;
  v17 = v53;
  v18 = v54;
  sub_10002BF3C(v52);
  sub_100069ADC(v35, v16, v17, v18, (uint64_t)v38);
  sub_10001C8FC(v38, (uint64_t)v46);
  v39(v46);
  sub_10001C734(v46);
  swift_release();
  return sub_10002BF88(v19);
}

_QWORD *sub_100026098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _BYTE v36[40];
  _BYTE v37[24];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;

  v17 = a1;
  v26 = a2;
  v27 = a3;
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v21 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v18 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v17);
  v24 = (uint64_t)&v17 - v18;
  v19 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (void *)__chkstk_darwin(v4);
  v35 = (uint64_t *)((char *)&v17 - v19);
  v44 = (char *)&v17 - v19;
  v43 = v6;
  v41 = v7;
  v42 = v8;
  v40 = v3;
  sub_1000230AC(v6, (uint64_t)&v17 - v19);
  v34 = v37;
  sub_100026C84(v20, (uint64_t)v37);
  v31 = v38;
  v32 = v39;
  sub_100022EA8(v34, v38);
  sub_10000D0CC((uint64_t)v35, v24);
  swift_retain();
  v29 = v36;
  sub_100026C84(v20, (uint64_t)v36);
  v9 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v9 + 16) & ~v9;
  v25 = (v23 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = 40;
  v33 = swift_allocObject(&unk_100083260, v28 + 40, v9 | 7);
  sub_10000D3B8(v24, v33 + v23);
  v10 = v27;
  v11 = v28;
  v12 = v29;
  v13 = v30;
  v14 = v33;
  v15 = (_QWORD *)(v33 + v25);
  *v15 = v26;
  v15[1] = v10;
  memcpy((void *)(v14 + v11), v12, v13);
  (*(void (**)(uint64_t (*)(uint64_t, char), uint64_t, uint64_t))(v32 + 32))(sub_10002A700, v33, v31);
  swift_release();
  sub_10000A410(v34);
  return sub_1000133D4(v35);
}

uint64_t sub_1000262E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  _BYTE **v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint32_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  NSObject *v108;
  int v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[4];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v73 = a4;
  v83 = a1;
  v84 = a2;
  v75 = a3;
  v121 = 0;
  v122 = 0;
  v120 = 0;
  BYTE4(v116) = 0;
  v74 = 0;
  v82 = type metadata accessor for Logger(0);
  v81 = *(_QWORD *)(v82 - 8);
  v76 = (*(_QWORD *)(v81 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v75);
  v79 = (char *)v62 - v76;
  v121 = v5;
  v122 = v6;
  v120 = v4;
  v80 = v117;
  sub_100026C84(v4, (uint64_t)v117);
  v78 = v118;
  v77 = v119;
  sub_100022EA8(v80, v118);
  v7 = (*(uint64_t (**)(uint64_t))(v77 + 8))(v78);
  v8 = v79;
  v86 = v7;
  v85 = 1;
  BYTE4(v116) = v7 & 1;
  sub_10000A410(v80);
  v9 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v8, v9, v82);
  swift_bridgeObjectRetain(v84);
  v95 = 32;
  v96 = 7;
  v10 = swift_allocObject(&unk_100083998, 32, 7);
  v11 = v84;
  v12 = v96;
  v91 = v10;
  *(_QWORD *)(v10 + 16) = v83;
  *(_QWORD *)(v10 + 24) = v11;
  v93 = 17;
  v13 = swift_allocObject(&unk_1000839C0, 17, v12);
  v97 = v13;
  *(_BYTE *)(v13 + 16) = v86 & v85;
  v108 = Logger.logObject.getter(v13);
  v109 = static os_log_type_t.error.getter();
  v89 = &v115;
  v115 = 22;
  v87 = sub_1000079AC();
  v88 = sub_100007A14();
  v14 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v116, v89, &type metadata for UInt32, &type metadata for Int, v87, v88, v14);
  v90 = v116;
  v15 = swift_allocObject(&unk_1000839E8, v93, v96);
  v16 = v93;
  v17 = v96;
  v99 = v15;
  *(_BYTE *)(v15 + 16) = 34;
  v18 = swift_allocObject(&unk_100083A10, v16, v17);
  v19 = v95;
  v20 = v96;
  v100 = v18;
  v94 = 8;
  *(_BYTE *)(v18 + 16) = 8;
  v21 = swift_allocObject(&unk_100083A38, v19, v20);
  v22 = v95;
  v23 = v96;
  v24 = v21;
  v25 = v91;
  v92 = v24;
  *(_QWORD *)(v24 + 16) = sub_100011AFC;
  *(_QWORD *)(v24 + 24) = v25;
  v26 = swift_allocObject(&unk_100083A60, v22, v23);
  v27 = v93;
  v28 = v96;
  v29 = v26;
  v30 = v92;
  v101 = v29;
  *(_QWORD *)(v29 + 16) = sub_100008A6C;
  *(_QWORD *)(v29 + 24) = v30;
  v31 = swift_allocObject(&unk_100083A88, v27, v28);
  v32 = v93;
  v33 = v96;
  v102 = v31;
  *(_BYTE *)(v31 + 16) = 32;
  v34 = swift_allocObject(&unk_100083AB0, v32, v33);
  v35 = v95;
  v36 = v96;
  v103 = v34;
  *(_BYTE *)(v34 + 16) = v94;
  v37 = swift_allocObject(&unk_100083AD8, v35, v36);
  v38 = v95;
  v39 = v96;
  v40 = v37;
  v41 = v97;
  v98 = v40;
  *(_QWORD *)(v40 + 16) = sub_10002C36C;
  *(_QWORD *)(v40 + 24) = v41;
  v42 = swift_allocObject(&unk_100083B00, v38, v39);
  v43 = v98;
  v105 = v42;
  *(_QWORD *)(v42 + 16) = sub_100008A6C;
  *(_QWORD *)(v42 + 24) = v43;
  v107 = sub_100008AC0(&qword_10008AB20);
  v104 = _allocateUninitializedArray<A>(_:)(6, v107);
  v106 = v44;
  swift_retain();
  v45 = v99;
  v46 = v106;
  *v106 = sub_100008A00;
  v46[1] = v45;
  swift_retain();
  v47 = v100;
  v48 = v106;
  v106[2] = sub_100008A00;
  v48[3] = v47;
  swift_retain();
  v49 = v101;
  v50 = v106;
  v106[4] = sub_100008AB4;
  v50[5] = v49;
  swift_retain();
  v51 = v102;
  v52 = v106;
  v106[6] = sub_100008A00;
  v52[7] = v51;
  swift_retain();
  v53 = v103;
  v54 = v106;
  v106[8] = sub_100008A00;
  v54[9] = v53;
  swift_retain();
  v55 = v104;
  v56 = v105;
  v57 = v106;
  v106[10] = sub_100008AB4;
  v57[11] = v56;
  sub_1000073C4();
  swift_bridgeObjectRelease(v55);
  if (os_log_type_enabled(v108, (os_log_type_t)v109))
  {
    v58 = v74;
    v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
    v64 = sub_100008AC0(&qword_10008AB30);
    v66 = sub_1000076F4(0, v64, v64);
    v67 = sub_1000076F4(2, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v69 = &v114;
    v114 = v65;
    v70 = &v113;
    v113 = v66;
    v71 = &v112;
    v112 = v67;
    v68 = 2;
    sub_10000774C(2, &v114);
    sub_10000774C(v68, v69);
    v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v111 = v99;
    sub_100007760(&v110, (uint64_t)v69, (uint64_t)v70, (uint64_t)v71);
    v72 = v58;
    if (v58)
    {
      __break(1u);
    }
    else
    {
      v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v111 = v100;
      sub_100007760(&v110, (uint64_t)&v114, (uint64_t)&v113, (uint64_t)&v112);
      v63 = 0;
      v59 = v63;
      v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v111 = v101;
      sub_100007760(&v110, (uint64_t)&v114, (uint64_t)&v113, (uint64_t)&v112);
      v62[2] = v59;
      v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v111 = v102;
      sub_100007760(&v110, (uint64_t)&v114, (uint64_t)&v113, (uint64_t)&v112);
      v62[1] = 0;
      v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v111 = v103;
      sub_100007760(&v110, (uint64_t)&v114, (uint64_t)&v113, (uint64_t)&v112);
      v62[0] = 0;
      v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v111 = v105;
      sub_100007760(&v110, (uint64_t)&v114, (uint64_t)&v113, (uint64_t)&v112);
      _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v109, "%{public}s, fallback to %s", v65, v90);
      sub_1000077A4(v66, 0);
      sub_1000077A4(v67, 2);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v82);
  if ((v86 & 1) != 0)
    v60 = sub_100017718();
  else
    v60 = sub_100017874();
  return sub_10000D0CC(v60, v73);
}

uint64_t sub_100026C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100026CD0(_QWORD *a1)
{
  sub_10000A410(a1);
}

uint64_t sub_100026CF4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v5 = v2 + *(_QWORD *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t sub_100026D64()
{
  type metadata accessor for TimelineProviderContext(0);
  return sub_100023E34();
}

uint64_t sub_100026DA4(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("'VIP'", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("'All Inboxes'", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t sub_100026E1C(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE **v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint32_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  NSObject *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint32_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  NSObject *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  void (*v135)(uint64_t);
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint32_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint32_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;

  v139 = a1;
  v138 = a2;
  v134 = a3;
  v135 = a4;
  v136 = a5;
  v137 = a6;
  v166 = 0;
  v167 = 0;
  v165 = 0;
  v163 = 0;
  v164 = 0;
  v162 = 0;
  v161 = 0;
  v130 = 0;
  v153 = 0;
  v131 = 0;
  v132 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(0);
  v133 = (void **)((char *)&v67 - v132);
  v140 = type metadata accessor for Logger(v6);
  v141 = *(_QWORD *)(v140 - 8);
  v142 = (*(_QWORD *)(v141 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v139);
  v143 = (char *)&v67 - v142;
  v144 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v7);
  v145 = (char *)&v67 - v144;
  v166 = v9;
  v167 = v10 & 1;
  v165 = v11;
  v163 = v12;
  v164 = v13;
  v162 = v14;
  if ((v10 & 1) != 0)
  {
    v128 = v139;
    v41 = v143;
    v78 = v139;
    swift_errorRetain(v139);
    v161 = v78;
    v42 = sub_100022F54();
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v41, v42, v140);
    swift_errorRetain(v78);
    v85 = 7;
    v43 = swift_allocObject(&unk_100083650, 24, 7);
    v86 = v43;
    *(_QWORD *)(v43 + 16) = v78;
    v94 = Logger.logObject.getter(v43);
    v95 = static os_log_type_t.error.getter();
    v81 = &v159;
    v159 = 12;
    v79 = sub_1000079AC();
    v80 = sub_100007A14();
    v44 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v160, v81, &type metadata for UInt32, &type metadata for Int, v79, v80, v44);
    v82 = v160;
    v83 = 17;
    v45 = swift_allocObject(&unk_100083678, 17, v85);
    v46 = v83;
    v47 = v85;
    v88 = v45;
    *(_BYTE *)(v45 + 16) = 32;
    v48 = swift_allocObject(&unk_1000836A0, v46, v47);
    v49 = v85;
    v89 = v48;
    *(_BYTE *)(v48 + 16) = 8;
    v84 = 32;
    v50 = swift_allocObject(&unk_1000836C8, 32, v49);
    v51 = v84;
    v52 = v85;
    v53 = v50;
    v54 = v86;
    v87 = v53;
    *(_QWORD *)(v53 + 16) = sub_1000126C4;
    *(_QWORD *)(v53 + 24) = v54;
    v55 = swift_allocObject(&unk_1000836F0, v51, v52);
    v56 = v87;
    v91 = v55;
    *(_QWORD *)(v55 + 16) = sub_100008A6C;
    *(_QWORD *)(v55 + 24) = v56;
    v93 = sub_100008AC0(&qword_10008AB20);
    v90 = _allocateUninitializedArray<A>(_:)(3, v93);
    v92 = v57;
    swift_retain();
    v58 = v88;
    v59 = v92;
    *v92 = sub_100008A00;
    v59[1] = v58;
    swift_retain();
    v60 = v89;
    v61 = v92;
    v92[2] = sub_100008A00;
    v61[3] = v60;
    swift_retain();
    v62 = v90;
    v63 = v91;
    v64 = v92;
    v92[4] = sub_100008AB4;
    v64[5] = v63;
    sub_1000073C4();
    swift_bridgeObjectRelease(v62);
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      v65 = v130;
      v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v70 = sub_100008AC0(&qword_10008AB30);
      v72 = sub_1000076F4(0, v70, v70);
      v73 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v74 = &v158;
      v158 = v71;
      v75 = &v157;
      v157 = v72;
      v76 = &v156;
      v156 = v73;
      sub_10000774C(2, &v158);
      sub_10000774C(1, v74);
      v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v155 = v88;
      sub_100007760(&v154, (uint64_t)v74, (uint64_t)v75, (uint64_t)v76);
      v77 = v65;
      if (v65)
      {
        __break(1u);
      }
      else
      {
        v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v155 = v89;
        sub_100007760(&v154, (uint64_t)&v158, (uint64_t)&v157, (uint64_t)&v156);
        v69 = 0;
        v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v155 = v91;
        sub_100007760(&v154, (uint64_t)&v158, (uint64_t)&v157, (uint64_t)&v156);
        _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "Failed to get excluded accounts. %s", v71, v82);
        sub_1000077A4(v72, 0);
        sub_1000077A4(v73, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v141 + 8))(v143, v140);
    v67 = &type metadata for String;
    v66 = _allocateUninitializedArray<A>(_:)(0, &type metadata for String);
    v68 = Set.init(arrayLiteral:)(v66, v67, &protocol witness table for String);
    sub_100027D48(v134, v68, (uint64_t)v135, v136);
    swift_bridgeObjectRelease(v68);
    return swift_errorRelease(v78);
  }
  else
  {
    v129 = v139;
    v15 = v145;
    v110 = v139;
    swift_bridgeObjectRetain(v139);
    v153 = v110;
    v16 = sub_100022F54();
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v15, v16, v140);
    swift_bridgeObjectRetain(v110);
    v117 = 7;
    v17 = swift_allocObject(&unk_100083718, 24, 7);
    v118 = v17;
    *(_QWORD *)(v17 + 16) = v110;
    v126 = Logger.logObject.getter(v17);
    v127 = static os_log_type_t.default.getter();
    v113 = &v151;
    v151 = 12;
    v111 = sub_1000079AC();
    v112 = sub_100007A14();
    v18 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v152, v113, &type metadata for UInt32, &type metadata for Int, v111, v112, v18);
    v114 = v152;
    v115 = 17;
    v19 = swift_allocObject(&unk_100083740, 17, v117);
    v20 = v115;
    v21 = v117;
    v120 = v19;
    *(_BYTE *)(v19 + 16) = 0;
    v22 = swift_allocObject(&unk_100083768, v20, v21);
    v23 = v117;
    v121 = v22;
    *(_BYTE *)(v22 + 16) = 8;
    v116 = 32;
    v24 = swift_allocObject(&unk_100083790, 32, v23);
    v25 = v116;
    v26 = v117;
    v27 = v24;
    v28 = v118;
    v119 = v27;
    *(_QWORD *)(v27 + 16) = sub_10002B908;
    *(_QWORD *)(v27 + 24) = v28;
    v29 = swift_allocObject(&unk_1000837B8, v25, v26);
    v30 = v119;
    v123 = v29;
    *(_QWORD *)(v29 + 16) = sub_10000A290;
    *(_QWORD *)(v29 + 24) = v30;
    v125 = sub_100008AC0(&qword_10008AB20);
    v122 = _allocateUninitializedArray<A>(_:)(3, v125);
    v124 = v31;
    swift_retain();
    v32 = v120;
    v33 = v124;
    *v124 = sub_100008A00;
    v33[1] = v32;
    swift_retain();
    v34 = v121;
    v35 = v124;
    v124[2] = sub_100008A00;
    v35[3] = v34;
    swift_retain();
    v36 = v122;
    v37 = v123;
    v38 = v124;
    v124[4] = sub_10000A2D8;
    v38[5] = v37;
    sub_1000073C4();
    swift_bridgeObjectRelease(v36);
    if (os_log_type_enabled(v126, (os_log_type_t)v127))
    {
      v39 = v130;
      v103 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v101 = sub_100008AC0(&qword_10008AB30);
      v102 = 0;
      v104 = sub_1000076F4(0, v101, v101);
      v105 = sub_1000076F4(v102, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v106 = &v150;
      v150 = v103;
      v107 = &v149;
      v149 = v104;
      v108 = &v148;
      v148 = v105;
      sub_10000774C(0, &v150);
      sub_10000774C(1, v106);
      v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v147 = v120;
      sub_100007760(&v146, (uint64_t)v106, (uint64_t)v107, (uint64_t)v108);
      v109 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v147 = v121;
        sub_100007760(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v100 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
        v147 = v123;
        sub_100007760(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v127, "Received %ld focused accounts", v103, v114);
        v99 = 0;
        sub_1000077A4(v104, 0);
        sub_1000077A4(v105, v99);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v141 + 8))(v145, v140);
    v98 = Set.isEmpty.getter(v110, &type metadata for String, &protocol witness table for String);
    sub_10000D0CC(v134, (uint64_t)v133);
    if ((v98 & 1) != 0)
      v97 = sub_100016B18();
    else
      v97 = 0;
    v96 = v97;
    sub_1000133D4(v133);
    if ((v96 & 1) != 0)
    {
      swift_retain();
      v135(v134);
      swift_release();
    }
    else
    {
      sub_100027D48(v134, v110, (uint64_t)v135, v136);
    }
    return swift_bridgeObjectRelease(v110);
  }
}

uint64_t sub_100027D24(uint64_t a1)
{
  return Set.count.getter(a1, &type metadata for String, &protocol witness table for String);
}

uint64_t sub_100027D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _BYTE **v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint32_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  NSObject *v120;
  int v121;
  void *v122;
  int v123;
  void *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t countAndFlagsBits;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  char v150[8];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint32_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v137 = a1;
  v140 = a2;
  v138 = a3;
  v139 = a4;
  v164 = 0;
  v163 = 0;
  v161 = 0;
  v162 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v131 = 0;
  v132 = 0;
  v133 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v134 = *(_QWORD *)(v133 + 64);
  v135 = (v134 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v136 = (uint64_t)&v76 - v135;
  v141 = type metadata accessor for Logger(v5);
  v142 = *(_QWORD *)(v141 - 8);
  v143 = (*(_QWORD *)(v142 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v140);
  v144 = (char *)&v76 - v143;
  v164 = v7;
  v163 = v6;
  v161 = v8;
  v162 = v9;
  v160 = v4;
  if ((Set.isEmpty.getter(v6, &type metadata for String, &protocol witness table for String) & 1) != 0)
  {
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Mailbox is invalid", 0x12uLL, 1);
    object = v11._object;
    countAndFlagsBits = v11._countAndFlagsBits;
  }
  else
  {
    v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(36);
    v125 = &v158;
    v158 = v12;
    v159 = v13;
    v123 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update mailbox for ", 0x13uLL, 1);
    v122 = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease(v122);
    v157 = Set.count.getter(v140, &type metadata for String, &protocol witness table for String);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v157, &type metadata for Int, &protocol witness table for Int);
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" focused accounts", 0x11uLL, v123 & 1);
    v124 = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease(v124);
    v127 = v158;
    v126 = v159;
    swift_bridgeObjectRetain(v159);
    sub_1000090EC((uint64_t)v125);
    countAndFlagsBits = String.init(stringInterpolation:)(v127, v126);
  }
  v129 = object;
  v16 = v144;
  v95 = object;
  v94 = countAndFlagsBits;
  v155 = countAndFlagsBits;
  v156 = object;
  v17 = sub_100022F54();
  (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v16, v17, v141);
  swift_bridgeObjectRetain(v95);
  v107 = 32;
  v108 = 7;
  v18 = swift_allocObject(&unk_100083288, 32, 7);
  v19 = v95;
  v20 = v136;
  v21 = v18;
  v22 = v137;
  v102 = v21;
  *(_QWORD *)(v21 + 16) = v94;
  *(_QWORD *)(v21 + 24) = v19;
  sub_10000D0CC(v22, v20);
  v96 = *(unsigned int *)(v133 + 80);
  v97 = (v96 + 16) & ~(unint64_t)v96;
  v109 = swift_allocObject(&unk_1000832B0, v97 + v134, v108 | v96);
  v23 = sub_10000D3B8(v136, v109 + v97);
  v120 = Logger.logObject.getter(v23);
  v121 = static os_log_type_t.default.getter();
  v100 = &v153;
  v153 = 22;
  v98 = sub_1000079AC();
  v99 = sub_100007A14();
  v24 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v154, v100, &type metadata for UInt32, &type metadata for Int, v98, v99, v24);
  v101 = v154;
  v105 = 17;
  v25 = swift_allocObject(&unk_1000832D8, 17, v108);
  v26 = v105;
  v27 = v108;
  v111 = v25;
  v104 = 34;
  *(_BYTE *)(v25 + 16) = 34;
  v28 = swift_allocObject(&unk_100083300, v26, v27);
  v29 = v107;
  v30 = v108;
  v112 = v28;
  v106 = 8;
  *(_BYTE *)(v28 + 16) = 8;
  v31 = swift_allocObject(&unk_100083328, v29, v30);
  v32 = v107;
  v33 = v108;
  v34 = v31;
  v35 = v102;
  v103 = v34;
  *(_QWORD *)(v34 + 16) = sub_100011AFC;
  *(_QWORD *)(v34 + 24) = v35;
  v36 = swift_allocObject(&unk_100083350, v32, v33);
  v37 = v105;
  v38 = v108;
  v39 = v36;
  v40 = v103;
  v113 = v39;
  *(_QWORD *)(v39 + 16) = sub_100008A6C;
  *(_QWORD *)(v39 + 24) = v40;
  v41 = swift_allocObject(&unk_100083378, v37, v38);
  v42 = v105;
  v43 = v108;
  v114 = v41;
  *(_BYTE *)(v41 + 16) = v104;
  v44 = swift_allocObject(&unk_1000833A0, v42, v43);
  v45 = v107;
  v46 = v108;
  v115 = v44;
  *(_BYTE *)(v44 + 16) = v106;
  v47 = swift_allocObject(&unk_1000833C8, v45, v46);
  v48 = v107;
  v49 = v108;
  v50 = v47;
  v51 = v109;
  v110 = v50;
  *(_QWORD *)(v50 + 16) = sub_100011C60;
  *(_QWORD *)(v50 + 24) = v51;
  v52 = swift_allocObject(&unk_1000833F0, v48, v49);
  v53 = v110;
  v117 = v52;
  *(_QWORD *)(v52 + 16) = sub_100008A6C;
  *(_QWORD *)(v52 + 24) = v53;
  v119 = sub_100008AC0(&qword_10008AB20);
  v116 = _allocateUninitializedArray<A>(_:)(6, v119);
  v118 = v54;
  swift_retain();
  v55 = v111;
  v56 = v118;
  *v118 = sub_100008A00;
  v56[1] = v55;
  swift_retain();
  v57 = v112;
  v58 = v118;
  v118[2] = sub_100008A00;
  v58[3] = v57;
  swift_retain();
  v59 = v113;
  v60 = v118;
  v118[4] = sub_100008AB4;
  v60[5] = v59;
  swift_retain();
  v61 = v114;
  v62 = v118;
  v118[6] = sub_100008A00;
  v62[7] = v61;
  swift_retain();
  v63 = v115;
  v64 = v118;
  v118[8] = sub_100008A00;
  v64[9] = v63;
  swift_retain();
  v65 = v116;
  v66 = v117;
  v67 = v118;
  v118[10] = sub_100008AB4;
  v67[11] = v66;
  sub_1000073C4();
  swift_bridgeObjectRelease(v65);
  if (os_log_type_enabled(v120, (os_log_type_t)v121))
  {
    v68 = v131;
    v86 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
    v85 = sub_100008AC0(&qword_10008AB30);
    v87 = sub_1000076F4(0, v85, v85);
    v88 = sub_1000076F4(2, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v90 = &v149;
    v149 = v86;
    v91 = &v148;
    v148 = v87;
    v92 = &v147;
    v147 = v88;
    v89 = 2;
    sub_10000774C(2, &v149);
    sub_10000774C(v89, v90);
    v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
    v146 = v111;
    sub_100007760(&v145, (uint64_t)v90, (uint64_t)v91, (uint64_t)v92);
    v93 = v68;
    if (v68)
    {
      __break(1u);
    }
    else
    {
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v146 = v112;
      sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
      v84 = 0;
      v69 = v84;
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v146 = v113;
      sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
      v83 = v69;
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v146 = v114;
      sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
      v82 = 0;
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v146 = v115;
      sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
      v81 = 0;
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
      v146 = v117;
      sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
      _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v121, "%{public}s, mailbox: %{public}s", v86, v101);
      sub_1000077A4(v87, 0);
      sub_1000077A4(v88, 2);
      UnsafeMutablePointer.deallocate()();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
  v80 = v150;
  sub_100026C84(v130, (uint64_t)v150);
  v77 = v151;
  v78 = v152;
  sub_100022EA8(v80, v151);
  swift_retain();
  sub_10000D0CC(v137, v136);
  v76 = (v96 + 32) & ~(unint64_t)v96;
  v70 = swift_allocObject(&unk_100083418, v76 + v134, v96 | 7);
  v71 = v139;
  v72 = v76;
  v73 = v70;
  v74 = v136;
  v79 = v73;
  *(_QWORD *)(v73 + 16) = v138;
  *(_QWORD *)(v73 + 24) = v71;
  sub_10000D3B8(v74, v73 + v72);
  (*(void (**)(uint64_t, uint64_t, _QWORD *(*)(uint64_t), uint64_t, uint64_t))(v78 + 24))(v137, v140, sub_10002AB9C, v79, v77);
  swift_release();
  sub_10000A410(v80);
  return swift_bridgeObjectRelease(v95);
}

_QWORD *sub_100028A94(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE **v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint32_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE **v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint32_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  NSObject *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  void (*v133)(uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint32_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint32_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char *v159;

  v136 = a1;
  v133 = a2;
  v134 = a3;
  v135 = a4;
  v158 = 0;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  v154 = 0;
  v119 = 0;
  v159 = 0;
  v120 = 0;
  v121 = type metadata accessor for Logger(0);
  v122 = *(_QWORD *)(v121 - 8);
  v123 = (*(_QWORD *)(v122 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(0);
  v124 = (char *)&v65 - v123;
  v125 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v126 = (char *)&v65 - v125;
  v7 = type metadata accessor for Mailbox(v6);
  v127 = *(_QWORD *)(v7 - 8);
  v128 = *(_QWORD *)(v127 + 64);
  v129 = (v128 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v7);
  v130 = (uint64_t)&v65 - v129;
  v131 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v65 - v129);
  v132 = (char *)&v65 - v131;
  v159 = (char *)&v65 - v131;
  v138 = sub_100008AC0(&qword_10008B2C0);
  v137 = (*(_QWORD *)(*(_QWORD *)(v138 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t *)__chkstk_darwin(v136);
  v139 = (uint64_t *)((char *)&v65 - v137);
  v158 = v9;
  v156 = v10;
  v157 = v11;
  v155 = v12;
  sub_10002B2E0(v9, (uint64_t)&v65 - v137);
  if (swift_getEnumCaseMultiPayload(v139, v138) == 1)
  {
    v40 = v124;
    v74 = *v139;
    v154 = v74;
    v41 = sub_100022F54();
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v40, v41, v121);
    swift_errorRetain(v74);
    v81 = 7;
    v42 = swift_allocObject(&unk_1000834C0, 24, 7);
    v82 = v42;
    *(_QWORD *)(v42 + 16) = v74;
    v90 = Logger.logObject.getter(v42);
    v91 = static os_log_type_t.error.getter();
    v77 = &v152;
    v152 = 12;
    v75 = sub_1000079AC();
    v76 = sub_100007A14();
    v43 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v153, v77, &type metadata for UInt32, &type metadata for Int, v75, v76, v43);
    v78 = v153;
    v79 = 17;
    v44 = swift_allocObject(&unk_1000834E8, 17, v81);
    v45 = v79;
    v46 = v81;
    v84 = v44;
    *(_BYTE *)(v44 + 16) = 34;
    v47 = swift_allocObject(&unk_100083510, v45, v46);
    v48 = v81;
    v85 = v47;
    *(_BYTE *)(v47 + 16) = 8;
    v80 = 32;
    v49 = swift_allocObject(&unk_100083538, 32, v48);
    v50 = v80;
    v51 = v81;
    v52 = v49;
    v53 = v82;
    v83 = v52;
    *(_QWORD *)(v52 + 16) = sub_1000126C4;
    *(_QWORD *)(v52 + 24) = v53;
    v54 = swift_allocObject(&unk_100083560, v50, v51);
    v55 = v83;
    v87 = v54;
    *(_QWORD *)(v54 + 16) = sub_100008A6C;
    *(_QWORD *)(v54 + 24) = v55;
    v89 = sub_100008AC0(&qword_10008AB20);
    v86 = _allocateUninitializedArray<A>(_:)(3, v89);
    v88 = v56;
    swift_retain();
    v57 = v84;
    v58 = v88;
    *v88 = sub_100008A00;
    v58[1] = v57;
    swift_retain();
    v59 = v85;
    v60 = v88;
    v88[2] = sub_100008A00;
    v60[3] = v59;
    swift_retain();
    v61 = v86;
    v62 = v87;
    v63 = v88;
    v88[4] = sub_100008AB4;
    v63[5] = v62;
    sub_1000073C4();
    swift_bridgeObjectRelease(v61);
    if (os_log_type_enabled(v90, (os_log_type_t)v91))
    {
      v64 = v119;
      v67 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v66 = sub_100008AC0(&qword_10008AB30);
      v68 = sub_1000076F4(0, v66, v66);
      v69 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v70 = &v151;
      v151 = v67;
      v71 = &v150;
      v150 = v68;
      v72 = &v149;
      v149 = v69;
      sub_10000774C(2, &v151);
      sub_10000774C(1, v70);
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v148 = v84;
      sub_100007760(&v147, (uint64_t)v70, (uint64_t)v71, (uint64_t)v72);
      v73 = v64;
      if (v64)
      {
        __break(1u);
      }
      else
      {
        v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v148 = v85;
        sub_100007760(&v147, (uint64_t)&v151, (uint64_t)&v150, (uint64_t)&v149);
        v65 = 0;
        v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v148 = v87;
        sub_100007760(&v147, (uint64_t)&v151, (uint64_t)&v150, (uint64_t)&v149);
        _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v91, "Failed to update mailbox: %{public}s", v67, v78);
        sub_1000077A4(v68, 0);
        sub_1000077A4(v69, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v121);
    swift_retain();
    v133(v135);
    swift_release();
    return (_QWORD *)swift_errorRelease(v74);
  }
  else
  {
    v13 = v126;
    sub_10000D3B8((uint64_t)v139, (uint64_t)v132);
    v159 = v132;
    v14 = sub_100022F54();
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v13, v14, v121);
    sub_10000D0CC((uint64_t)v132, v130);
    v15 = *(unsigned __int8 *)(v127 + 80);
    v101 = (v15 + 16) & ~v15;
    v108 = 7;
    v109 = swift_allocObject(&unk_100083588, v101 + v128, v15 | 7);
    v16 = sub_10000D3B8(v130, v109 + v101);
    v117 = Logger.logObject.getter(v16);
    v118 = static os_log_type_t.default.getter();
    v104 = &v145;
    v145 = 12;
    v102 = sub_1000079AC();
    v103 = sub_100007A14();
    v17 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v146, v104, &type metadata for UInt32, &type metadata for Int, v102, v103, v17);
    v105 = v146;
    v106 = 17;
    v18 = swift_allocObject(&unk_1000835B0, 17, v108);
    v19 = v106;
    v20 = v108;
    v111 = v18;
    *(_BYTE *)(v18 + 16) = 34;
    v21 = swift_allocObject(&unk_1000835D8, v19, v20);
    v22 = v108;
    v112 = v21;
    *(_BYTE *)(v21 + 16) = 8;
    v107 = 32;
    v23 = swift_allocObject(&unk_100083600, 32, v22);
    v24 = v107;
    v25 = v108;
    v26 = v23;
    v27 = v109;
    v110 = v26;
    *(_QWORD *)(v26 + 16) = sub_100011C60;
    *(_QWORD *)(v26 + 24) = v27;
    v28 = swift_allocObject(&unk_100083628, v24, v25);
    v29 = v110;
    v114 = v28;
    *(_QWORD *)(v28 + 16) = sub_100008A6C;
    *(_QWORD *)(v28 + 24) = v29;
    v116 = sub_100008AC0(&qword_10008AB20);
    v113 = _allocateUninitializedArray<A>(_:)(3, v116);
    v115 = v30;
    swift_retain();
    v31 = v111;
    v32 = v115;
    *v115 = sub_100008A00;
    v32[1] = v31;
    swift_retain();
    v33 = v112;
    v34 = v115;
    v115[2] = sub_100008A00;
    v34[3] = v33;
    swift_retain();
    v35 = v113;
    v36 = v114;
    v37 = v115;
    v115[4] = sub_100008AB4;
    v37[5] = v36;
    sub_1000073C4();
    swift_bridgeObjectRelease(v35);
    if (os_log_type_enabled(v117, (os_log_type_t)v118))
    {
      v38 = v119;
      v94 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
      v93 = sub_100008AC0(&qword_10008AB30);
      v95 = sub_1000076F4(0, v93, v93);
      v96 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v97 = &v144;
      v144 = v94;
      v98 = &v143;
      v143 = v95;
      v99 = &v142;
      v142 = v96;
      sub_10000774C(2, &v144);
      sub_10000774C(1, v97);
      v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v141 = v111;
      sub_100007760(&v140, (uint64_t)v97, (uint64_t)v98, (uint64_t)v99);
      v100 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v141 = v112;
        sub_100007760(&v140, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v142);
        v92 = 0;
        v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v141 = v114;
        sub_100007760(&v140, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v142);
        _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "Successfully updated mailbox: %{public}s", v94, v105);
        sub_1000077A4(v95, 0);
        sub_1000077A4(v96, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v122 + 8))(v126, v121);
    swift_retain();
    v133((uint64_t)v132);
    swift_release();
    return sub_1000133D4(v132);
  }
}

void *sub_100029900@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return sub_10002B2A8(a1, a2);
}

uint64_t sub_100029918()
{
  return IntentTimelineProvider.recommendations()();
}

_QWORD *sub_10002992C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100022FB4(a1, a2);
}

uint64_t sub_100029940(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_10002330C(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_10002998C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_1000247C8(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_1000299D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = sub_100029A5C;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100029A5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *(_QWORD *)(*v0 + 24);
  *(_QWORD *)(v3 + 16) = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 16) + 8))();
}

uint64_t sub_100029ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = sub_100029A5C;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100029B40()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100029B7C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for WidgetFamily(0);
  v1 = sub_100029BC4();
  return sub_100007810(v5, v3, v4, v1);
}

unint64_t sub_100029BC4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B690[0];
  if (!qword_10008B690[0])
  {
    v0 = type metadata accessor for WidgetFamily(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v0);
    atomic_store(WitnessTable, qword_10008B690);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100029C34()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v5 = v2 + *(_QWORD *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t sub_100029CA4()
{
  type metadata accessor for TimelineProviderContext(0);
  return sub_100023E54();
}

uint64_t sub_100029CD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100029CFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100029D24()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100029D60()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100029D9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100029DC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100029DEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = a1;
  v18 = a6;
  v13[1] = a7;
  v22 = a6;
  v16 = *(_QWORD *)(a6 - 8);
  v13[0] = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(a1);
  v17 = (uint64_t)v13 - v13[0];
  v8(v7);
  v14 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  v20 = *v15;
  v21 = v20 + v14;
  sub_100029F2C(v17, (uint64_t (*)(void))sub_10002C2DC, (uint64_t)v19, v18, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v13[2]);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  *v15 += v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t sub_100029F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, a4);
}

uint64_t sub_100029F2C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a2;
  v13 = a5;
  v14 = a8;
  v23 = a4;
  v22 = a5;
  v21 = a6;
  v15 = *(_QWORD *)(a5 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin();
  v18 = (char *)&v12 - v16;
  v20 = v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  result = v17();
  v19 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v18, v13);
  return result;
}

BOOL sub_10002A010(uint64_t (*a1)(void))
{
  return (a1() & 1) != 0;
}

uint64_t sub_10002A05C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A098()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A0D4@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10002A108()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A144()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A180()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A1BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100023E78(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002A1C8()
{
  uint64_t v0;
  uint64_t v2;

  sub_10000A410((_QWORD *)(v0 + 16));
  swift_release();
  return swift_deallocObject(v2, 80);
}

uint64_t sub_10002A20C(uint64_t a1)
{
  uint64_t v1;

  return sub_100025AD4(a1, v1 + 16, *(_BYTE *)(v1 + 56) & 1, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10002A224()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v5 = v2 + *(_QWORD *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t sub_10002A294()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A2D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v5 = v2 + *(_QWORD *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t sub_10002A340()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A368()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A390()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A3CC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A408()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A430()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A458()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A494()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A4D0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A50C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A548()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A584(uint64_t a1)
{
  uint64_t v1;

  return sub_1000252F0(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002A590()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = (((v8 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 16));
  if (*(_QWORD *)(v0 + v8 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8 + 32));
  v3 = v6 + v8 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();
  sub_10000A410((_QWORD *)(v6 + v9));
  return swift_deallocObject(v6, v9 + 40);
}

uint64_t sub_10002A700(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100026E1C(a1, a2 & 1, v2 + v4, *(void (**)(uint64_t))(v2 + v5), *(_QWORD *)(v2 + v5 + 8), v2 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_10002A77C()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A7B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = v8 + *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 16));
  if (*(_QWORD *)(v0 + v8 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8 + 32));
  v3 = v6 + v8 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v9);
}

uint64_t sub_10002A8DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A904()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A92C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A968()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002A9A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A9CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002A9F4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002AA30()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002AA6C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = v9 + *(_QWORD *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v8);
}

_QWORD *sub_10002AB9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 80);
  return sub_100028A94(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_10002ABE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain(*a2);
  *a1 = v4;
  return *a1 + 16;
}

uint64_t sub_10002AC24(_QWORD *a1)
{
  return sub_10000A410(a1);
}

uint64_t sub_10002AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10002AC78(_QWORD *a1, _QWORD *a2)
{
  sub_10002AC9C(a1, a2);
}

_QWORD *sub_10002AC9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v12[24];

  v10 = result;
  if (result != a2)
  {
    v8 = result[3];
    v9 = a2[3];
    if (v8 == v9)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v8 - 8) + 80) & 0x20000) != 0)
      {
        v6 = *result;
        v7 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v6);
        *v10 = v7;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v8 - 8) + 24))(result, a2);
      }
    }
    else
    {
      result[3] = v9;
      result[4] = a2[4];
      v5 = (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(_QWORD *)(v8 - 8) + 80) & 0x20000) != 0)
      {
        v3 = *result;
        if ((*(_DWORD *)(*(_QWORD *)(v9 - 8) + 80) & 0x20000) != 0)
        {
          v2 = *a2;
          swift_retain(*a2);
          *v10 = v2;
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v9 - 8) + 16))(result, a2);
        }
        return (_QWORD *)swift_release(v3);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)(v8 - 8) + 32))(v12, result);
        if (v5)
        {
          (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v9 - 8) + 16))(v10, a2);
        }
        else
        {
          v4 = *a2;
          swift_retain(*a2);
          *v10 = v4;
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)(v8 - 8) + 8))(v12);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10002AE84(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x28uLL);
}

_QWORD *sub_10002AEB0(_QWORD *a1, const void *a2)
{
  sub_10000A410(a1);
  memcpy(a1, a2, 0x28uLL);
  return a1;
}

uint64_t sub_10002AEEC(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_10002B004(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

void *type metadata accessor for MailTimelineProvider()
{
  return &unk_100083498;
}

unint64_t sub_10002B224()
{
  return sub_10002B238();
}

unint64_t sub_10002B238()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B6A8;
  if (!qword_10008B6A8)
  {
    v0 = type metadata accessor for MailEntry(255);
    WitnessTable = swift_getWitnessTable(&unk_100073D20, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B6A8);
    return WitnessTable;
  }
  return v3;
}

void *sub_10002B2A8(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t sub_10002B2E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *__dst;
  char *__src;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v15 = sub_100008AC0(&qword_10008B2C0);
  if (swift_getEnumCaseMultiPayload(a1, v15) == 1)
  {
    v5 = *a1;
    swift_errorRetain(*a1);
    *(_QWORD *)a2 = v5;
    swift_storeEnumTagMultiPayload(a2, v15, 1);
  }
  else
  {
    *(_QWORD *)a2 = *a1;
    v11 = a1[1];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(a2 + 8) = v11;
    v12 = a1[2];
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(a2 + 16) = v12;
    if ((unint64_t)a1[4] <= 5)
    {
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
    }
    else
    {
      *(_QWORD *)(a2 + 24) = a1[3];
      v10 = a1[4];
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(a2 + 32) = v10;
    }
    v2 = type metadata accessor for Mailbox(0);
    __dst = (void *)(a2 + *(int *)(v2 + 28));
    __src = (char *)a1 + *(int *)(v2 + 28);
    v8 = type metadata accessor for URL(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(__src, 1))
    {
      v3 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v9 + 16))(__dst, __src, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(a2, v15, 0);
  }
  return a2;
}

uint64_t sub_10002B4D8()
{
  uint64_t v0;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10002B514()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B53C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B564()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B5A0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B5DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = v8 + *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 16));
  if (*(_QWORD *)(v0 + v8 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8 + 32));
  v3 = v6 + v8 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v9);
}

uint64_t sub_10002B700()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B728()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B750()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B78C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B7C8()
{
  uint64_t v0;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10002B804()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B82C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B854()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B890()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B8CC()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10002B908()
{
  uint64_t v0;

  return sub_100027D24(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002B910()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002B960()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B99C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002B9D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v13 = type metadata accessor for MailEntry(0);
  v1 = *(_QWORD *)(v13 - 8);
  v14 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v15 = v14 + *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 16));
  if (*(_QWORD *)(v0 + v14 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v14 + 32));
  v9 = v12 + v14 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v11 + 48))(v9, 1))
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v9, v10);
  v8 = (_QWORD *)(v12 + v14 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v8 >= 2uLL)
    swift_bridgeObjectRelease(*v8);
  v5 = v12 + v14 + *(int *)(v13 + 20);
  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  v4 = v12 + v14 + *(int *)(v13 + 24);
  v2 = type metadata accessor for Date(0);
  (*(void (**)(unint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  return swift_deallocObject(v12, v15);
}

uint64_t sub_10002BC08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MailEntry(0) - 8) + 80);
  return sub_100024500(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10002BC38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002BC60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002BC88()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002BCC4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002BD00(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TimelineEntryRelevance(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002BD70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = v9 + *(_QWORD *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_deallocObject(v6, v8);
}

_QWORD *sub_10002BEA0(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;

  LOWORD(v8) = a3;
  BYTE2(v8) = BYTE2(a3) & 1;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 80);
  return sub_100025C70(a1, a2, v8, *(void (**)(_QWORD *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v4 + 32) & ~v4));
}

unint64_t sub_10002BF3C(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain(result);
  return result;
}

_QWORD *sub_10002BF88(_QWORD *a1)
{
  if (*a1 >= 2uLL)
    swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10002BFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v13 = type metadata accessor for MailEntry(0);
  v1 = *(_QWORD *)(v13 - 8);
  v14 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v15 = v14 + *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 16));
  if (*(_QWORD *)(v0 + v14 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + v14 + 32));
  v9 = v12 + v14 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v11 + 48))(v9, 1))
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v9, v10);
  v8 = (_QWORD *)(v12 + v14 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v8 >= 2uLL)
    swift_bridgeObjectRelease(*v8);
  v5 = v12 + v14 + *(int *)(v13 + 20);
  v6 = type metadata accessor for TimelineEntryRelevance(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v5, v6);
  v4 = v12 + v14 + *(int *)(v13 + 24);
  v2 = type metadata accessor for Date(0);
  (*(void (**)(unint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  return swift_deallocObject(v12, v15);
}

uint64_t sub_10002C214()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C23C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C264()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C2A0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100029F08(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10002C308()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C344()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C36C()
{
  uint64_t v0;

  return sub_100026DA4(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t sub_10002C378()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C3A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C3C8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C404()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C440()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C468()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10002C490()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10002C4CC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

id sub_10002C508()
{
  id result;
  void *v1;
  id v2;
  id v3;

  sub_10002C620();
  v2 = objc_msgSend((id)objc_opt_self(MFUserProfileProvider_iOS), "defaultProvider");
  v3 = objc_msgSend((id)objc_opt_self(MFAddressBookManager), "sharedManager");
  if (v3)
  {
    v1 = v3;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while implicitly unwrapping an Optional value", 68, 2, "MailWidgetExtension/Message+EMMessage.swift", 43, 2, 17, 0);
    __break(1u);
  }
  result = sub_10002C684((uint64_t)v2, v1);
  qword_10008B6C0 = (uint64_t)result;
  return result;
}

unint64_t sub_10002C620()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B6C8;
  if (!qword_10008B6C8)
  {
    v0 = objc_opt_self(MUIAddressListFormatter);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B6C8);
    return ObjCClassMetadata;
  }
  return v3;
}

id sub_10002C684(uint64_t a1, void *a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_10002D40C(a1, a2);
}

uint64_t *sub_10002C6C8()
{
  if (qword_10008AA90 != -1)
    swift_once(&qword_10008AA90, sub_10002C508);
  return &qword_10008B6C0;
}

char *sub_10002C71C@<X0>(void *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v28;
  id v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unsigned int v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  Class isa;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  void *v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;

  v80 = a3;
  v102 = a1;
  v93 = a2;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  v106 = 0;
  v94 = 0;
  v81 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(0);
  v82 = (uint64_t)&v28 - v81;
  v83 = type metadata accessor for URL(v3);
  v84 = *(_QWORD *)(v83 - 8);
  v85 = (*(_QWORD *)(v84 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v83);
  v86 = (char *)&v28 - v85;
  v87 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B6D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v94);
  v88 = (char *)&v28 - v87;
  v89 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v90 = (char *)&v28 - v89;
  v91 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v92 = (char *)&v28 - v91;
  v111 = (char *)&v28 - v91;
  v95 = type metadata accessor for Message(v8);
  v96 = *(_QWORD *)(v95 - 8);
  v98 = *(_QWORD *)(v96 + 64);
  v97 = (v98 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = __chkstk_darwin(v94);
  v99 = (char *)&v28 - v97;
  v100 = (v98 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v9);
  v101 = (char *)&v28 - v100;
  v110 = (char *)&v28 - v100;
  v109 = v10;
  v108 = v11;
  sub_10002D180();
  v12 = v102;
  v103 = sub_10002D1E4(v102);
  v107 = v103;
  v104 = objc_msgSend(v103, "waitForResult");
  v106 = v104;
  v13 = v104;
  if (v104)
  {
    v79 = v104;
    v77 = v104;
    v78 = objc_msgSend(v104, "publicMessageURL");
    if (v78)
    {
      v76 = v78;
      v75 = v78;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v90, v86, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v90, 0, 1, v83);

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v90, 1, 1, v83);
    }
    sub_100015ED8(v90, v92);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v92, 1, 1, v83);
  }
  v65 = objc_msgSend(v102, "objectID");
  v66 = objc_msgSend(v65, "globalMessageID");

  v105 = v66;
  v67 = String.init<A>(_:)(&v105, &type metadata for Int64, &protocol witness table for Int64);
  v68 = v14;
  v73 = (id)*sub_10002C6C8();
  v15 = v73;
  v16 = v102;
  v71 = objc_msgSend(v102, "senderList");
  v69 = sub_100008AC0((uint64_t *)&unk_10008B740);
  v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71);
  isa = Array._bridgeToObjectiveC()().super.isa;

  swift_bridgeObjectRelease(v70);
  v74 = objc_msgSend(v73, "stringFromEmailAddressList:preferFullDisplayName:", isa, 0);

  if (v74)
  {
    v64 = v74;
    v59 = v74;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v61 = v17;

    v62 = v60;
    v63 = v61;
  }
  else
  {
    v62 = 0;
    v63 = 0;
  }
  v54 = v63;
  v55 = v62;
  v56 = (id)objc_opt_self(ECSubjectFormatter);
  v18 = v102;
  v57 = objc_msgSend(v102, "subject");

  v58 = objc_msgSend(v56, "subjectStringForDisplayForSubject:", v57);
  if (v58)
  {
    v53 = v58;
    v48 = v58;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v50 = v19;

    v51 = v49;
    v52 = v50;
  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
  v45 = v52;
  v46 = v51;
  v20 = v102;
  v47 = objc_msgSend(v102, "summary");
  if (v47)
  {
    v44 = v47;
    v39 = v47;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v41 = v21;

    v42 = v40;
    v43 = v41;
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v36 = v43;
  v35 = v42;

  v22 = v102;
  v37 = objc_msgSend(v102, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = v102;
  v31 = objc_msgSend(v102, "isVIP");

  v24 = v102;
  v29 = objc_msgSend(v102, "flags");

  v30 = objc_msgSend(v29, "read");
  v38 = 1;
  v32 = v30 ^ 1;
  v25 = v102;
  v33 = objc_msgSend(v102, "hasAttachments");

  v26 = v102;
  v34 = objc_msgSend(v102, "isBlocked");

  sub_1000182E8(v92, v88);
  sub_10002DB78(v67, v68, v55, v54, v46, v45, v35, v36, v99, v82, v31 & v38, v32 & v38, v33 & v38, v34 & v38, v88);

  sub_10002D220(v99, v101);
  sub_100015F94((uint64_t)v92);

  sub_100012B90(v101, v80);
  (*(void (**)(char *, _QWORD, _QWORD, uint64_t))(v96 + 56))(v80, 0, v38, v95);
  sub_1000133D4(v93);

  return sub_100012DE8(v101);
}

unint64_t sub_10002D180()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B6D8;
  if (!qword_10008B6D8)
  {
    v0 = objc_opt_self(MessageContentRepresentationRequest);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B6D8);
    return ObjCClassMetadata;
  }
  return v3;
}

id sub_10002D1E4(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_10002D460(a1);
}

char *sub_10002D220(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a2 + 2) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a2 + 3) = *((_OWORD *)a1 + 3);
  v7 = (int *)type metadata accessor for Message(0);
  v5 = v7[8];
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v5], &a1[v5]);
  a2[v7[9]] = a1[v7[9]];
  a2[v7[10]] = a1[v7[10]];
  a2[v7[11]] = a1[v7[11]];
  a2[v7[12]] = a1[v7[12]];
  v8 = v7[13];
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(&a1[v8], 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a2[v8], &a1[v8], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(&a2[v8], 0, 1, v10);
  }
  return a2;
}

id sub_10002D40C(uint64_t a1, void *a2)
{
  void *v2;
  id v6;

  v6 = objc_msgSend(v2, "initWithUserProfileProvider:addressBookManager:");

  swift_unknownObjectRelease(a1);
  return v6;
}

id sub_10002D460(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, "initWithMessage:");

  return v4;
}

uint64_t sub_10002D4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  _QWORD *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  Builtin::Word v30;
  void *object;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t *v61;
  Builtin::Word v62;
  char *v63;
  void *v64;
  int *v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  BOOL v69;
  char v70;
  char v71;
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = 0;
  v77 = 0;
  v1 = sub_100008AC0(&qword_10008B6D0);
  v27 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v68 = (char *)&v19 - v27;
  v66 = 0;
  v56 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v56 - 8);
  v28 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v56);
  v55 = (char *)&v19 - v28;
  v78 = v0;
  v29 = objc_msgSend((id)objc_opt_self(EFDevice), "currentDevice");
  v45 = objc_msgSend(v29, "isInternal");
  v67 = 1;
  v77 = v45 & 1;

  v30 = 7;
  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(74);
  v61 = &v75;
  v75 = v2;
  v76 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sender:", v30, v67 & 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease(object);
  v32 = *((_QWORD *)v63 + 2);
  v33 = *((_QWORD *)v63 + 3);
  swift_bridgeObjectRetain(v33);
  v34 = sub_10002F018(v32, v33, v45 & 1);
  v35 = v5;
  swift_bridgeObjectRelease(v33);
  v36 = v74;
  v74[0] = v34;
  v74[1] = v35;
  v49 = &type metadata for String;
  v50 = &protocol witness table for String;
  v51 = &protocol witness table for String;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v74);
  sub_1000090EC((uint64_t)v36);
  v62 = 10;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", subject:", 0xAuLL, v67 & 1);
  v37 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease(v37);
  v38 = *((_QWORD *)v63 + 4);
  v39 = *((_QWORD *)v63 + 5);
  swift_bridgeObjectRetain(v39);
  v40 = sub_10002F018(v38, v39, v45 & 1);
  v41 = v7;
  swift_bridgeObjectRelease(v39);
  v42 = v73;
  v73[0] = v40;
  v73[1] = v41;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v73);
  sub_1000090EC((uint64_t)v42);
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", summary:", v62, v67 & 1);
  v43 = v8._object;
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease(v43);
  v44 = *((_QWORD *)v63 + 6);
  v46 = *((_QWORD *)v63 + 7);
  swift_bridgeObjectRetain(v46);
  v47 = sub_10002F018(v44, v46, v45 & 1);
  v48 = v9;
  swift_bridgeObjectRelease(v46);
  v52 = v72;
  v72[0] = v47;
  v72[1] = v48;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v72);
  sub_1000090EC((uint64_t)v52);
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", dateReceived: ", 0x10uLL, v67 & 1);
  v53 = v10._object;
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease(v53);
  v65 = (int *)type metadata accessor for Message(v66);
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v55, &v63[v65[8]], v56);
  v11 = sub_10000793C();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v55, v56, v11);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", isVIP: ", 9uLL, v67 & 1);
  v57 = v12._object;
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease(v57);
  v71 = v63[v65[9]] & v67;
  v59 = &type metadata for Bool;
  v60 = &protocol witness table for Bool;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v71, &type metadata for Bool, &protocol witness table for Bool);
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", isUnread: ", 0xCuLL, v67 & 1);
  v58 = v13._object;
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease(v58);
  v70 = v63[v65[10]] & v67;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v70, v59, v60);
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", hasURL: ", v62, v67 & 1);
  v64 = v14._object;
  DefaultStringInterpolation.appendLiteral(_:)(v14);
  v15 = v63;
  swift_bridgeObjectRelease(v64);
  sub_1000182E8((char *)v15 + v65[13], v68);
  v16 = type metadata accessor for URL(v66);
  v26 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)(v16 - 8) + 48))(v68, v67) != 1;
  v20 = v26;
  sub_100015F94((uint64_t)v68);
  v21 = 1;
  v69 = v20;
  v23 = &v75;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v69, &type metadata for Bool, &protocol witness table for Bool);
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v21 & 1);
  v22 = v17._object;
  DefaultStringInterpolation.appendLiteral(_:)(v17);
  swift_bridgeObjectRelease(v22);
  v25 = v75;
  v24 = v76;
  swift_bridgeObjectRetain(v76);
  sub_1000090EC((uint64_t)v23);
  return String.init(stringInterpolation:)(v25, v24);
}

void *sub_10002DB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, const void *a15)
{
  uint64_t v15;
  uint64_t v17;
  int *v18;

  *(_QWORD *)a9 = a1;
  *((_QWORD *)a9 + 1) = a2;
  *((_QWORD *)a9 + 2) = a3;
  *((_QWORD *)a9 + 3) = a4;
  *((_QWORD *)a9 + 4) = a5;
  *((_QWORD *)a9 + 5) = a6;
  *((_QWORD *)a9 + 6) = a7;
  *((_QWORD *)a9 + 7) = a8;
  v18 = (int *)type metadata accessor for Message(0);
  v17 = v18[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(&a9[v17], a10);
  a9[v18[9]] = a11 & 1;
  a9[v18[10]] = a12 & 1;
  a9[v18[11]] = a13 & 1;
  a9[v18[12]] = a14 & 1;
  return sub_100015ED8(a15, &a9[v18[13]]);
}

uint64_t sub_10002DC84()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v2;
}

uint64_t sub_10002DCB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = sub_10002DC84();
  *a1 = result;
  a1[1] = v2;
  return result;
}

id sub_10002DCE4()
{
  id result;

  result = sub_10002DD00();
  qword_10008B750 = (uint64_t)result;
  return result;
}

id sub_10002DD00()
{
  id v1;

  sub_100030668();
  v1 = sub_10000B018();
  objc_msgSend(v1, "setDateStyle:", 1);
  objc_msgSend(v1, "setTimeStyle:", 0);
  objc_msgSend(v1, "setDoesRelativeDateFormatting:", 1);
  return v1;
}

uint64_t *sub_10002DD88()
{
  if (qword_10008AA98 != -1)
    swift_once(&qword_10008AA98, sub_10002DCE4);
  return &qword_10008B750;
}

id sub_10002DDDC()
{
  id result;

  result = sub_10002DDF8();
  qword_10008B758 = (uint64_t)result;
  return result;
}

id sub_10002DDF8()
{
  id v1;

  sub_100030668();
  v1 = sub_10000B018();
  objc_msgSend(v1, "setDateStyle:", 0);
  objc_msgSend(v1, "setTimeStyle:", 1);
  return v1;
}

uint64_t *sub_10002DE68()
{
  if (qword_10008AAA0 != -1)
    swift_once(&qword_10008AAA0, sub_10002DDDC);
  return &qword_10008B758;
}

uint64_t sub_10002DEBC()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  Class v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = 0;
  v25 = 0;
  v30 = type metadata accessor for Date(0);
  v29 = *(_QWORD **)(v30 - 8);
  v23 = (v29[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v31 = (char *)&v10 - v23;
  v35 = type metadata accessor for Calendar(v0);
  v33 = *(_QWORD *)(v35 - 8);
  v24 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = __chkstk_darwin(v35);
  v34 = (char *)&v10 - v24;
  v37 = v2;
  static Calendar.current.getter(v1);
  v27 = type metadata accessor for Message(v25);
  v3 = *(int *)(v27 + 32);
  v28 = (void (*)(char *, uint64_t, uint64_t))v29[2];
  v28(v31, v26 + v3, v30);
  v36 = Calendar.isDateInToday(_:)(v31);
  v32 = (void (*)(char *, uint64_t))v29[1];
  v32(v31, v30);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  v4 = v31;
  if ((v36 & 1) != 0)
  {
    v17 = (id)*sub_10002DE68();
    v5 = v17;
    v28(v4, v26 + *(int *)(v27 + 32), v30);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v32(v31, v30);
    v18 = objc_msgSend(v17, "stringFromDate:", isa);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v20 = v6;

    v21 = v19;
    v22 = v20;
  }
  else
  {
    v12 = (id)*sub_10002DD88();
    v7 = v12;
    v28(v4, v26 + *(int *)(v27 + 32), v30);
    v11 = Date._bridgeToObjectiveC()().super.isa;
    v32(v31, v30);
    v13 = objc_msgSend(v12, "stringFromDate:", v11);

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v8;

    v21 = v14;
    v22 = v15;
  }
  return v21;
}

BOOL sub_10002E178(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  int v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  int v19;
  int v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  int *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;

  v79 = a1;
  v86 = a2;
  v108 = 0;
  v107 = 0;
  v72 = 0;
  v63 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v66 = (char *)&v14 - v65;
  v67 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v14 - v65);
  v68 = (char *)&v14 - v67;
  v69 = sub_100008AC0(&qword_10008B810);
  v70 = (*(_QWORD *)(*(_QWORD *)(v69 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v69);
  v71 = (char *)&v14 - v70;
  v73 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B6D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(v72);
  v74 = (char *)&v14 - v73;
  v75 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v3);
  v76 = (char *)&v14 - v75;
  v77 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v5);
  v78 = (char *)&v14 - v77;
  v80 = type metadata accessor for Date(v7);
  v81 = *(_QWORD **)(v80 - 8);
  v82 = (v81[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v79);
  v83 = (char *)&v14 - v82;
  v84 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (_QWORD *)__chkstk_darwin(v8);
  v85 = (char *)&v14 - v84;
  v108 = v10;
  v107 = v11;
  v87 = *v10;
  v90 = v10[1];
  swift_bridgeObjectRetain(v90);
  v88 = *(_QWORD *)v86;
  v89 = *((_QWORD *)v86 + 1);
  swift_bridgeObjectRetain(v89);
  v91 = static String.== infix(_:_:)(v87, v90, v88, v89);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v90);
  if ((v91 & 1) == 0)
    return 0;
  v59 = v79[2];
  v60 = v79[3];
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v60);
  v61 = *((_QWORD *)v86 + 2);
  v62 = *((_QWORD *)v86 + 3);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v62);
  v104[0] = v59;
  v104[1] = v60;
  v105 = v61;
  v106 = v62;
  if (v60)
  {
    sub_10003062C(v104, &v92);
    if (v106)
    {
      v52 = v92;
      v55 = v93;
      swift_bridgeObjectRetain(v93);
      v53 = v105;
      v56 = v104;
      v54 = v106;
      swift_bridgeObjectRetain(v106);
      v57 = static String.== infix(_:_:)(v52, v55, v53, v54);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v55);
      sub_1000090EC((uint64_t)v56);
      v58 = v57;
      goto LABEL_8;
    }
    sub_1000090EC((uint64_t)&v92);
    goto LABEL_10;
  }
  if (v106)
  {
LABEL_10:
    sub_1000304C0((uint64_t)v104);
    v58 = 0;
    goto LABEL_8;
  }
  sub_1000090EC((uint64_t)v104);
  v58 = 1;
LABEL_8:
  v51 = v58;
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v60);
  if ((v51 & 1) != 0)
  {
    v47 = v79[4];
    v48 = v79[5];
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v48);
    v49 = *((_QWORD *)v86 + 4);
    v50 = *((_QWORD *)v86 + 5);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v50);
    v101[0] = v47;
    v101[1] = v48;
    v102 = v49;
    v103 = v50;
    if (v48)
    {
      sub_10003062C(v101, &v94);
      if (v103)
      {
        v40 = v94;
        v43 = v95;
        swift_bridgeObjectRetain(v95);
        v41 = v102;
        v44 = v101;
        v42 = v103;
        swift_bridgeObjectRetain(v103);
        v45 = static String.== infix(_:_:)(v40, v43, v41, v42);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v43);
        sub_1000090EC((uint64_t)v44);
        v46 = v45;
        goto LABEL_18;
      }
      sub_1000090EC((uint64_t)&v94);
    }
    else if (!v103)
    {
      sub_1000090EC((uint64_t)v101);
      v46 = 1;
LABEL_18:
      v39 = v46;
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v48);
      if ((v39 & 1) == 0)
        return 0;
      v35 = v79[6];
      v36 = v79[7];
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v36);
      v37 = *((_QWORD *)v86 + 6);
      v38 = *((_QWORD *)v86 + 7);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v38);
      v98[0] = v35;
      v98[1] = v36;
      v99 = v37;
      v100 = v38;
      if (v36)
      {
        sub_10003062C(v98, &v96);
        if (v100)
        {
          v28 = v96;
          v31 = v97;
          swift_bridgeObjectRetain(v97);
          v29 = v99;
          v32 = v98;
          v30 = v100;
          swift_bridgeObjectRetain(v100);
          v33 = static String.== infix(_:_:)(v28, v31, v29, v30);
          swift_bridgeObjectRelease(v30);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v30);
          swift_bridgeObjectRelease(v31);
          sub_1000090EC((uint64_t)v32);
          v34 = v33;
          goto LABEL_28;
        }
        sub_1000090EC((uint64_t)&v96);
      }
      else if (!v100)
      {
        sub_1000090EC((uint64_t)v98);
        v34 = 1;
LABEL_28:
        v27 = v34;
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v36);
        if ((v27 & 1) == 0)
          return 0;
        v23 = (int *)type metadata accessor for Message(0);
        v12 = (char *)v79 + v23[8];
        v24 = (void (*)(char *, char *, uint64_t))v81[2];
        v24(v85, v12, v80);
        v24(v83, &v86[v23[8]], v80);
        v26 = static Date.== infix(_:_:)(v85, v83);
        v25 = (void (*)(char *, uint64_t))v81[1];
        v25(v83, v80);
        v25(v85, v80);
        if ((v26 & 1) == 0)
          return 0;
        if ((*((_BYTE *)v79 + v23[9]) & 1) != (v86[v23[9]] & 1))
          return 0;
        if ((*((_BYTE *)v79 + v23[10]) & 1) != (v86[v23[10]] & 1))
          return 0;
        if ((*((_BYTE *)v79 + v23[11]) & 1) != (v86[v23[11]] & 1))
          return 0;
        if ((*((_BYTE *)v79 + v23[12]) & 1) != (v86[v23[12]] & 1))
          return 0;
        sub_1000182E8((char *)v79 + v23[13], v78);
        sub_1000182E8(&v86[v23[13]], v76);
        v21 = &v71[*(int *)(v69 + 48)];
        sub_1000182E8(v78, v71);
        sub_1000182E8(v76, v21);
        v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
        if (v22(v71, 1, v63) == 1)
        {
          if (v22(v21, 1, v63) != 1)
            goto LABEL_44;
          sub_100015F94((uint64_t)v71);
          v20 = 1;
        }
        else
        {
          sub_1000182E8(v71, v74);
          if (v22(v21, 1, v63) == 1)
          {
            (*(void (**)(char *, uint64_t))(v64 + 8))(v74, v63);
LABEL_44:
            sub_1000304F4((uint64_t)v71);
            v20 = 0;
            goto LABEL_43;
          }
          v17 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
          v17(v68, v74, v63);
          v17(v66, v21, v63);
          sub_1000305BC();
          v19 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v66);
          v18 = *(void (**)(char *, uint64_t))(v64 + 8);
          v18(v66, v63);
          v18(v68, v63);
          sub_100015F94((uint64_t)v71);
          v20 = v19;
        }
LABEL_43:
        v16 = v20;
        sub_100015F94((uint64_t)v76);
        sub_100015F94((uint64_t)v78);
        return (v16 & 1) != 0;
      }
      sub_1000304C0((uint64_t)v98);
      v34 = 0;
      goto LABEL_28;
    }
    sub_1000304C0((uint64_t)v101);
    v46 = 0;
    goto LABEL_18;
  }
  return 0;
}

BOOL sub_10002F000(_QWORD *a1, char *a2)
{
  return sub_10002E178(a1, a2);
}

uint64_t sub_10002F018(uint64_t a1, uint64_t a2, char a3)
{
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRetain(a2);
  if (!a2)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<nil>", 5uLL, 1)._countAndFlagsBits;
  if ((a3 & 1) != 0)
  {
    v8 = (id)objc_opt_self(EFPrivacy);
    swift_bridgeObjectRetain(a2);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v10 = objc_msgSend(v8, "partiallyRedactedStringForString:maximumUnredactedLength:", v9, 3);

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;
  }
  else
  {
    v4 = (id)objc_opt_self(EFPrivacy);
    swift_bridgeObjectRetain(a2);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v6 = objc_msgSend(v4, "fullyRedactedStringForString:", v5);

    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v12 = v7;
  }
  swift_bridgeObjectRelease(a2);
  return v12;
}

uint64_t type metadata accessor for Message(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008B7B8;
  if (!qword_10008B7B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Message);
  return v2;
}

uint64_t sub_10002F2AC()
{
  return sub_10002D4A4();
}

uint64_t sub_10002F2C0(uint64_t a1)
{
  return sub_100069324(a1, (uint64_t)&off_100083B68);
}

unint64_t sub_10002F2E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *__dst;
  char *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v21;

  v21 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v21 & 0x20000) != 0)
  {
    v16 = *a2;
    swift_retain();
    *a1 = v16;
    return *a1 + ((v21 + 16) & ~(unint64_t)v21);
  }
  else
  {
    *a1 = *a2;
    v6 = a2[1];
    swift_bridgeObjectRetain(v6);
    a1[1] = v6;
    a1[2] = a2[2];
    v7 = a2[3];
    swift_bridgeObjectRetain(v7);
    a1[3] = v7;
    a1[4] = a2[4];
    v8 = a2[5];
    swift_bridgeObjectRetain(v8);
    a1[5] = v8;
    a1[6] = a2[6];
    v9 = a2[7];
    swift_bridgeObjectRetain(v9);
    a1[7] = v9;
    v11 = (char *)a1 + a3[8];
    v10 = (char *)a2 + a3[8];
    v3 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v11, v10);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    __dst = (char *)a1 + a3[13];
    __src = (char *)a2 + a3[13];
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(__src, 1))
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, __src, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    return (unint64_t)a1;
  }
}

uint64_t sub_10002F580(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*((_QWORD *)a1 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)a1 + 7));
  v4 = *(int *)(a2 + 32);
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v2 - 8) + 8))(&a1[v4]);
  v6 = *(int *)(a2 + 52);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 48))(&a1[v6], 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(&a1[v6], v8);
  return result;
}

char *sub_10002F66C(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain(v6);
  *((_QWORD *)a1 + 1) = v6;
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain(v7);
  *((_QWORD *)a1 + 3) = v7;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain(v8);
  *((_QWORD *)a1 + 5) = v8;
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain(v9);
  *((_QWORD *)a1 + 7) = v9;
  v10 = a3[8];
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v10], &a2[v10]);
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  v13 = a3[13];
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(&a2[v13], 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a1[v13], &a2[v13], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v16 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(&a1[v13], 0, 1, v15);
  }
  return a1;
}

char *sub_10002F8BC(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v11 = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain(v11);
  v3 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v11;
  swift_bridgeObjectRelease(v3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v12 = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain(v12);
  v4 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v12;
  swift_bridgeObjectRelease(v4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain(v13);
  v5 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v13;
  swift_bridgeObjectRelease(v5);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  v14 = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain(v14);
  v6 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = v14;
  swift_bridgeObjectRelease(v6);
  v15 = a3[8];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))(&a1[v15], &a2[v15]);
  a1[a3[9]] = a2[a3[9]] & 1;
  a1[a3[10]] = a2[a3[10]] & 1;
  a1[a3[11]] = a2[a3[11]] & 1;
  a1[a3[12]] = a2[a3[12]] & 1;
  v18 = a3[13];
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (((unsigned int (*)(char *, uint64_t))v22)(&a1[v18], 1))
  {
    if (v22(&a2[v18], 1, v20))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(&a1[v18], &a2[v18], *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v21 + 16))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(&a1[v18], 0, 1, v20);
    }
  }
  else if (v22(&a2[v18], 1, v20))
  {
    (*(void (**)(void))(v21 + 8))();
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a1[v18], &a2[v18], *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 24))(&a1[v18], &a2[v18], v20);
  }
  return a1;
}

char *sub_10002FC0C(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v6 = a3[8];
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v6], &a2[v6]);
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  v9 = a3[13];
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 48))(&a2[v9], 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a1[v9], &a2[v9], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(&a1[v9], 0, 1, v11);
  }
  return a1;
}

char *sub_10002FDEC(char *a1, char *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRelease(v4);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRelease(v5);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRelease(v6);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  v7 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRelease(v7);
  v12 = a3[8];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 40))(&a1[v12], &a2[v12]);
  a1[a3[9]] = a2[a3[9]] & 1;
  a1[a3[10]] = a2[a3[10]] & 1;
  a1[a3[11]] = a2[a3[11]] & 1;
  a1[a3[12]] = a2[a3[12]] & 1;
  v15 = a3[13];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t))v19)(&a1[v15], 1))
  {
    if (v19(&a2[v15], 1, v17))
    {
      v10 = sub_100008AC0(&qword_10008B6D0);
      memcpy(&a1[v15], &a2[v15], *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v18 + 32))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(&a1[v15], 0, 1, v17);
    }
  }
  else if (v19(&a2[v15], 1, v17))
  {
    (*(void (**)(void))(v18 + 8))();
    v9 = sub_100008AC0(&qword_10008B6D0);
    memcpy(&a1[v15], &a2[v15], *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 40))(&a1[v15], &a2[v15], v17);
  }
  return a1;
}

uint64_t sub_100030100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003011C);
}

uint64_t sub_10003011C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (a2 == 0x7FFFFFFF)
  {
    v9 = -1;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)&_mh_execute_header)
      v9 = *(_QWORD *)(a1 + 8);
    return (v9 + 1);
  }
  else
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
    }
    else
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      v5 = *(_QWORD *)(v4 - 8);
      if (a2 == *(_DWORD *)(v5 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 52), a2, v4);
      else
        __break(1u);
    }
  }
  return v8;
}

uint64_t sub_100030254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030270);
}

uint64_t sub_100030270(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = a2 - 1;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (a3 == *(_DWORD *)(v6 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(v7 + *(int *)(a4 + 32), a2, a2, v5);
    }
    else
    {
      result = sub_100008AC0(&qword_10008B6D0);
      v4 = *(_QWORD *)(result - 8);
      if (a3 == *(_DWORD *)(v4 + 84))
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v7 + *(int *)(a4 + 52), a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t sub_10003037C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[10];

  v8[0] = &unk_100073EB0;
  v8[1] = &unk_100073EC8;
  v8[2] = &unk_100073EC8;
  v8[3] = &unk_100073EC8;
  v6 = type metadata accessor for Date(319);
  v7 = v6;
  if (v1 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(v6 - 8) + 64;
    v8[5] = &unk_100073EE0;
    v8[6] = &unk_100073EE0;
    v8[7] = &unk_100073EE0;
    v8[8] = &unk_100073EE0;
    v2 = sub_100019150(319);
    v7 = v2;
    if (v3 <= 0x3F)
    {
      v8[9] = *(_QWORD *)(v2 - 8) + 64;
      swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      return 0;
    }
  }
  return v7;
}

void *sub_1000304B4()
{
  return &protocol witness table for String;
}

uint64_t sub_1000304C0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1000304F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1 + *(int *)(sub_100008AC0(&qword_10008B810) + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

unint64_t sub_1000305BC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B818;
  if (!qword_10008B818)
  {
    v0 = type metadata accessor for URL(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for URL, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B818);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_10003062C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain(v4);
  result = a2;
  a2[1] = v4;
  return result;
}

unint64_t sub_100030668()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008B820;
  if (!qword_10008B820)
  {
    v0 = objc_opt_self(NSDateFormatter);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008B820);
    return ObjCClassMetadata;
  }
  return v3;
}

uint64_t sub_1000306CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = a1;
  v7 = 0;
  v5 = sub_100008AC0(&qword_10008B830);
  v3 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (uint64_t)&v2 - v3;
  v7 = (uint64_t *)__chkstk_darwin(v2);
  sub_10003076C(v7, (uint64_t *)((char *)&v2 - v3));
  Environment.wrappedValue.getter(v5);
  return sub_10003081C(v6);
}

_QWORD *sub_10003076C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v7;

  v7 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v7) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v7, 1);
  }
  else
  {
    v4 = *a1;
    swift_retain();
    *a2 = v4;
    swift_storeEnumTagMultiPayload(a2, v7, 0);
  }
  return a2;
}

uint64_t sub_10003081C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  return a1;
}

id sub_100030894()
{
  id result;

  result = sub_1000308B0();
  qword_10008B828 = (uint64_t)result;
  return result;
}

id sub_1000308B0()
{
  id v1;

  sub_10003AEB4();
  v1 = sub_10000B018();
  objc_msgSend(v1, "setNumberStyle:", 1);
  objc_msgSend(v1, "setUsesSignificantDigits:", 0);
  return v1;
}

uint64_t *sub_100030920()
{
  if (qword_10008AAA8 != -1)
    swift_once(&qword_10008AAA8, sub_100030894);
  return &qword_10008B828;
}

uint64_t sub_100030974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v16 = 0;
  v10 = 0;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = __chkstk_darwin(0);
  v13 = (unint64_t *)((char *)&v6 - v9);
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v1) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v10);
  v12 = (unint64_t *)((char *)&v6 - v11);
  v16 = v0;
  v3 = type metadata accessor for MessageListHeaderView(v2);
  sub_10001BE1C(v0 + *(int *)(v3 + 20), (uint64_t)v12);
  sub_10000D0CC((uint64_t)v12, (uint64_t)v13);
  sub_10001C610(v12);
  v4 = v13[3];
  v14 = v13[4];
  sub_10001335C(v4, v14);
  sub_1000133D4(v13);
  v15 = v14;
  if (v14 <= 5)
    __asm { BR              X8 }
  v8 = v14;
  v6 = v14;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("folder", 6uLL, 1);
  swift_bridgeObjectRelease(v6);
  return v7._countAndFlagsBits;
}

uint64_t type metadata accessor for MessageListHeaderView(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008B990;
  if (!qword_10008B990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageListHeaderView);
  return v2;
}

uint64_t sub_100030C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = 0;
  v10 = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = __chkstk_darwin(0);
  v9 = (uint64_t *)((char *)&v5 - v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v1) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v10);
  v8 = (uint64_t *)((char *)&v5 - v7);
  v14 = v0;
  v3 = type metadata accessor for MessageListHeaderView(v2);
  sub_10001BE1C(v0 + *(int *)(v3 + 20), (uint64_t)v8);
  sub_10000D0CC((uint64_t)v8, (uint64_t)v9);
  sub_10001C610(v8);
  v12 = v9[3];
  v11 = v9[4];
  sub_10001335C(v12, v11);
  sub_1000133D4(v9);
  v13 = sub_100016F6C(v12, v11, v10, 4uLL);
  sub_100013398(v12, v11);
  if ((v13 & 1) != 0)
    return static Color.yellow.getter();
  else
    return static Color.accentColor.getter();
}

uint64_t sub_100030DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)@<X0>(uint64_t@<X8>);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;

  v24 = a1;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v60 = 0;
  v26 = sub_100008AC0(&qword_10008B840);
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v26);
  v28 = (uint64_t)&v17 - v27;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v17 - v27);
  v30 = (uint64_t)&v17 - v29;
  v31 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v17 - v29);
  v32 = (uint64_t)&v17 - v31;
  v64 = (char *)&v17 - v31;
  v33 = sub_100008AC0(&qword_10008B848);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v33);
  v36 = (uint64_t)&v17 - v35;
  v37 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v17 - v35);
  v38 = (uint64_t)&v17 - v37;
  v39 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v17 - v37);
  v40 = (uint64_t)&v17 - v39;
  v63 = (char *)&v17 - v39;
  v6 = sub_100008AC0(&qword_10008B6D0);
  v41 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v59 = (char *)&v17 - v41;
  v48 = 0;
  v55 = type metadata accessor for Mailbox(0);
  v42 = (*(_QWORD *)(*(_QWORD *)(v55 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v48);
  v56 = (uint64_t *)((char *)&v17 - v42);
  v43 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v7) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v48);
  v54 = (uint64_t *)((char *)&v17 - v43);
  v58 = type metadata accessor for URL(v8);
  v57 = *(_QWORD *)(v58 - 8);
  v44 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v58);
  v45 = (char *)&v17 - v44;
  v46 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v17 - v44);
  v47 = (char *)&v17 - v46;
  v62 = (char *)&v17 - v46;
  v49 = sub_100008AC0(&qword_10008B850);
  v50 = (*(_QWORD *)(*(_QWORD *)(v49 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = __chkstk_darwin(v48);
  v51 = (uint64_t)&v17 - v50;
  v52 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = __chkstk_darwin(v10);
  v53 = (uint64_t)&v17 - v52;
  v61 = (char *)&v17 - v52;
  v60 = v1;
  v13 = type metadata accessor for MessageListHeaderView(v12);
  sub_10001BE1C(v1 + *(int *)(v13 + 20), (uint64_t)v54);
  sub_10000D0CC((uint64_t)v54, (uint64_t)v56);
  sub_10001C610(v54);
  sub_1000182E8((char *)v56 + *(int *)(v55 + 28), v59);
  sub_1000133D4(v56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v59, 1, v58) == 1)
  {
    sub_100015F94((uint64_t)v59);
    sub_1000315BC(v30);
    v18 = sub_1000317A8();
    sub_100031764(v30, v26, v32);
    sub_100031818(v30);
    sub_100031C20(v32, v28);
    sub_100031764(v28, v26, v30);
    sub_100031818(v28);
    v15 = sub_100032554();
    sub_100032490(v30, v33, v26, v15, v18, v51);
    sub_100031818(v30);
    sub_1000325C4(v51, v53);
    sub_100031818(v32);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v47, v59, v58);
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v45, v47, v58);
    v19 = sub_1000314B0(v25);
    v20 = v14;
    swift_retain();
    v22 = sub_1000317A8();
    Link.init(destination:label:)(v45, v19, v20, v26);
    swift_release();
    swift_release();
    v21 = sub_100032554();
    sub_100031764(v38, v33, v40);
    v23 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v23(v38, v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v36, v40, v33);
    sub_100031764(v36, v33, v38);
    v23(v36, v33);
    sub_1000323CC(v38, v33, v26, v21, v22, v51);
    v23(v38, v33);
    sub_1000325C4(v51, v53);
    v23(v40, v33);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v58);
  }
  sub_100032BD8(v53, v51);
  sub_100033374();
  sub_100031764(v51, v49, v24);
  sub_100033400(v51);
  return sub_100033400(v53);
}

uint64_t (*sub_1000314B0(uint64_t a1))@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = a1;
  v10 = 0;
  v5 = *(_QWORD *)(type metadata accessor for MessageListHeaderView(0) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v4 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v3 - v4;
  v10 = (uint64_t *)__chkstk_darwin(v3);
  sub_10003517C(v10, (uint64_t *)((char *)&v3 - v4));
  v1 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v1 + 16) & ~v1;
  v9 = swift_allocObject(&unk_100083BF0, v7 + v6, v1 | 7);
  sub_10003ABEC(v8, (char *)(v9 + v7));
  return sub_10003AE74;
}

uint64_t sub_100031588@<X0>(uint64_t a1@<X8>)
{
  return sub_1000315BC(a1);
}

uint64_t sub_1000315BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;

  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = type metadata accessor for MessageListHeaderView(0);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v15 = (uint64_t *)((char *)&v7 - v8);
  v17 = sub_100008AC0(&qword_10008B840);
  v9 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v17);
  v19 = (uint64_t)&v7 - v9;
  v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin((char *)&v7 - v9);
  v20 = (uint64_t)&v7 - v10;
  v24 = (char *)&v7 - v10;
  v23 = v1;
  v14 = static VerticalAlignment.firstTextBaseline.getter(v4);
  sub_10003517C(v11, v15);
  v12 = &v21;
  v22 = v15;
  v13 = sub_100008AC0(&qword_10008B8F0);
  v5 = sub_100035498();
  HStack.init(alignment:spacing:content:)(v14, 0x4018000000000000, 0, sub_100035490, v12, v13, v5);
  sub_100035508((uint64_t)v15);
  v18 = sub_1000317A8();
  sub_100031764(v19, v17, v20);
  sub_100031818(v19);
  sub_100031C20(v20, v19);
  sub_100031764(v19, v17, v16);
  sub_100031818(v19);
  return sub_100031818(v20);
}

uint64_t sub_100031764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

unint64_t sub_1000317A8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B858;
  if (!qword_10008B858)
  {
    v0 = sub_100008DF0(&qword_10008B840);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B858);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100031818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(void);

  v14 = *(int *)(sub_100008AC0(&qword_10008B860) + 44);
  swift_release();
  v15 = sub_100008AC0(&qword_10008B868);
  v17 = a1 + v14 + *(int *)(v15 + 36);
  swift_release();
  v16 = sub_100008AC0(&qword_10008B870);
  v18 = *(int *)(v16 + 28);
  v19 = type metadata accessor for Image.Scale();
  v20 = *(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v17 + v18);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B880);
  swift_release();
  swift_release();
  v21 = *(int *)(sub_100008AC0(&qword_10008B888) + 36);
  swift_release();
  v22 = sub_100008AC0(&qword_10008B890);
  v23 = *(int *)(v22 + 28);
  v24 = type metadata accessor for SymbolRenderingMode(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(void))(v25 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v26)(a1 + v14 + v21 + v23, 1))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a1 + v14 + v21 + v23, v24);
  v10 = (int *)sub_100008AC0(&qword_10008B898);
  v9 = a1 + v14 + v10[12];
  v1 = sub_100008AC0(&qword_10008B8A0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9);
  v11 = a1 + v14 + v10[20];
  v12 = sub_100008AC0(&qword_10008B8A8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1))
  {
    swift_release();
    v6 = v11 + *(int *)(v15 + 36);
    swift_release();
    ((void (*)(uint64_t, uint64_t))v20)(v6 + *(int *)(v16 + 28), v19);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B8B0);
    swift_release();
    v7 = v11 + *(int *)(v12 + 36);
    swift_release();
    v8 = v7 + *(int *)(v22 + 28);
    if (!v26())
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v8, v24);
  }
  v3 = a1 + v14 + v10[24];
  v4 = sub_100008AC0(&qword_10008B8B8);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return a1;
}

uint64_t sub_100031C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  char *__dst;
  char *__src;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  void (*v51)(uint64_t, char *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(void);

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v42 = *(int *)(sub_100008AC0(&qword_10008B860) + 44);
  v43 = *(_QWORD *)(a1 + v42);
  swift_retain();
  v63 = a2 + v42;
  *(_QWORD *)(a2 + v42) = v43;
  v44 = sub_100008AC0(&qword_10008B868);
  v45 = *(int *)(v44 + 36);
  v49 = (uint64_t *)(a1 + v42 + v45);
  v46 = *v49;
  swift_retain();
  *(_QWORD *)(v63 + v45) = v46;
  v47 = sub_100008AC0(&qword_10008B870);
  v48 = *(int *)(v47 + 28);
  v50 = type metadata accessor for Image.Scale();
  v51 = *(void (**)(uint64_t, char *))(*(_QWORD *)(v50 - 8) + 16);
  v51(a2 + v42 + v45 + v48, (char *)v49 + v48);
  v52 = sub_100008AC0(&qword_10008B878);
  v53 = *(int *)(v52 + 36);
  v55 = (uint64_t *)(a1 + v42 + v53);
  v54 = *v55;
  swift_retain();
  *(_QWORD *)(v63 + v53) = v54;
  v56 = v55[1];
  swift_retain();
  *(_QWORD *)(a2 + v42 + v53 + 8) = v56;
  v57 = sub_100008AC0(&qword_10008B880);
  v58 = *(int *)(v57 + 36);
  v60 = (uint64_t *)(a1 + v42 + v58);
  v59 = *v60;
  swift_retain();
  *(_QWORD *)(v63 + v58) = v59;
  v61 = v60[1];
  swift_retain();
  *(_QWORD *)(a2 + v42 + v58 + 8) = v61;
  v62 = *(int *)(sub_100008AC0(&qword_10008B888) + 36);
  v67 = (uint64_t *)(a1 + v42 + v62);
  v64 = *v67;
  swift_retain();
  *(_QWORD *)(v63 + v62) = v64;
  v65 = sub_100008AC0(&qword_10008B890);
  v66 = *(int *)(v65 + 28);
  v68 = type metadata accessor for SymbolRenderingMode(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned int (**)(void))(v69 + 48);
  if (((unsigned int (*)(char *, uint64_t))v70)((char *)v67 + v66, 1))
  {
    v2 = sub_100008AC0(&qword_10008B8C0);
    memcpy((void *)(a2 + v42 + v62 + v66), (const void *)(a1 + v42 + v62 + v66), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v69 + 16))();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(a2 + v42 + v62 + v66, 0, 1, v68);
  }
  v35 = (int *)sub_100008AC0(&qword_10008B898);
  v34 = a2 + v42 + v35[12];
  v33 = a1 + v42 + v35[12];
  v3 = sub_100008AC0(&qword_10008B8A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v34, v33);
  v4 = a2 + v42 + v35[16];
  v5 = a1 + v42 + v35[16];
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  v36 = (_QWORD *)(a2 + v42 + v35[20]);
  v37 = (uint64_t *)(a1 + v42 + v35[20]);
  v38 = sub_100008AC0(&qword_10008B8A8);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v39 + 48))(v37, 1))
  {
    v7 = sub_100008AC0(&qword_10008B8C8);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v14 = *v37;
    swift_retain();
    *v36 = v14;
    v16 = (_QWORD *)((char *)v36 + *(int *)(v44 + 36));
    v17 = (uint64_t *)((char *)v37 + *(int *)(v44 + 36));
    v15 = *v17;
    swift_retain();
    *v16 = v15;
    ((void (*)(char *, char *, uint64_t))v51)((char *)v16 + *(int *)(v47 + 28), (char *)v17 + *(int *)(v47 + 28), v50);
    v20 = (_QWORD *)((char *)v36 + *(int *)(v52 + 36));
    v19 = (uint64_t *)((char *)v37 + *(int *)(v52 + 36));
    v18 = *v19;
    swift_retain();
    *v20 = v18;
    v21 = v19[1];
    swift_retain();
    v20[1] = v21;
    v24 = (_QWORD *)((char *)v36 + *(int *)(v57 + 36));
    v23 = (uint64_t *)((char *)v37 + *(int *)(v57 + 36));
    v22 = *v23;
    swift_retain();
    *v24 = v22;
    v25 = v23[1];
    swift_retain();
    v24[1] = v25;
    v26 = *(int *)(sub_100008AC0(&qword_10008B8B0) + 36);
    v27 = *(uint64_t *)((char *)v37 + v26);
    swift_retain();
    *(_QWORD *)((char *)v36 + v26) = v27;
    v29 = (_QWORD *)((char *)v36 + *(int *)(v38 + 36));
    v30 = (uint64_t *)((char *)v37 + *(int *)(v38 + 36));
    v28 = *v30;
    swift_retain();
    *v29 = v28;
    __dst = (char *)v29 + *(int *)(v65 + 28);
    __src = (char *)v30 + *(int *)(v65 + 28);
    if (v70())
    {
      v6 = sub_100008AC0(&qword_10008B8C0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(__dst, __src, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v68);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v10 = (void *)(a2 + v42 + v35[24]);
  v11 = (void *)(a1 + v42 + v35[24]);
  v12 = sub_100008AC0(&qword_10008B8B8);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v13 + 48))(v11, 1))
  {
    v8 = sub_100008AC0(&qword_10008B8D0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a2;
}

uint64_t sub_1000323CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = a6;
  v8[1] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v18 = a2;
  v17 = a3;
  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin();
  v12 = (char *)v8 - v9;
  (*(void (**)(void))(*(_QWORD *)(v6 - 8) + 16))();
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, v13, v14, v15, v16);
}

uint64_t sub_100032490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = a6;
  v8[1] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v18 = a2;
  v17 = a3;
  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin();
  v12 = (char *)v8 - v9;
  (*(void (**)(void))(*(_QWORD *)(v6 - 8) + 16))();
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, v13, v14, v15, v16);
}

unint64_t sub_100032554()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B8D8;
  if (!qword_10008B8D8)
  {
    v0 = sub_100008DF0(&qword_10008B848);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Link<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B8D8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_1000325C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *__dst;
  char *__src;
  char *v22;
  char *v23;
  int *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(void);
  uint64_t v51;

  v51 = sub_100008AC0(&qword_10008B8E0);
  if (swift_getEnumCaseMultiPayload(a1, v51) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
    v3 = sub_100008AC0(&qword_10008B860);
    v39 = (_QWORD *)(a2 + *(int *)(v3 + 44));
    v40 = (_QWORD *)(a1 + *(int *)(v3 + 44));
    *v39 = *v40;
    v29 = sub_100008AC0(&qword_10008B868);
    v30 = (_QWORD *)((char *)v39 + *(int *)(v29 + 36));
    v31 = (_QWORD *)((char *)v40 + *(int *)(v29 + 36));
    *v30 = *v31;
    v32 = sub_100008AC0(&qword_10008B870);
    v34 = (char *)v30 + *(int *)(v32 + 28);
    v33 = (char *)v31 + *(int *)(v32 + 28);
    v35 = type metadata accessor for Image.Scale(0);
    v36 = *(void (**)(char *, char *))(*(_QWORD *)(v35 - 8) + 32);
    v36(v34, v33);
    v37 = sub_100008AC0(&qword_10008B878);
    *(_OWORD *)((char *)v39 + *(int *)(v37 + 36)) = *(_OWORD *)((char *)v40 + *(int *)(v37 + 36));
    v38 = sub_100008AC0(&qword_10008B880);
    *(_OWORD *)((char *)v39 + *(int *)(v38 + 36)) = *(_OWORD *)((char *)v40 + *(int *)(v38 + 36));
    v4 = sub_100008AC0(&qword_10008B888);
    v41 = (_QWORD *)((char *)v39 + *(int *)(v4 + 36));
    v42 = (_QWORD *)((char *)v40 + *(int *)(v4 + 36));
    *v41 = *v42;
    v43 = sub_100008AC0(&qword_10008B890);
    v44 = (char *)v41 + *(int *)(v43 + 28);
    v45 = (char *)v42 + *(int *)(v43 + 28);
    v46 = type metadata accessor for SymbolRenderingMode(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(unsigned int (**)(void))(v47 + 48);
    if (((unsigned int (*)(char *, uint64_t))v48)(v45, 1))
    {
      v5 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v24 = (int *)sub_100008AC0(&qword_10008B898);
    v23 = (char *)v39 + v24[12];
    v22 = (char *)v40 + v24[12];
    v6 = sub_100008AC0(&qword_10008B8A0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(v23, v22);
    v7 = (char *)v39 + v24[16];
    v8 = (char *)v40 + v24[16];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v8[8];
    v25 = (_QWORD *)((char *)v39 + v24[20]);
    v26 = (_QWORD *)((char *)v40 + v24[20]);
    v27 = sub_100008AC0(&qword_10008B8A8);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v28 + 48))(v26, 1))
    {
      v13 = sub_100008AC0(&qword_10008B8C8);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v25 = *v26;
      v9 = *(int *)(v29 + 36);
      *(_QWORD *)((char *)v25 + v9) = *(_QWORD *)((char *)v26 + v9);
      ((void (*)(char *, char *, uint64_t))v36)((char *)v25 + v9 + *(int *)(v32 + 28), (char *)v26 + v9 + *(int *)(v32 + 28), v35);
      *(_OWORD *)((char *)v25 + *(int *)(v37 + 36)) = *(_OWORD *)((char *)v26 + *(int *)(v37 + 36));
      *(_OWORD *)((char *)v25 + *(int *)(v38 + 36)) = *(_OWORD *)((char *)v26 + *(int *)(v38 + 36));
      v10 = sub_100008AC0(&qword_10008B8B0);
      *(_QWORD *)((char *)v25 + *(int *)(v10 + 36)) = *(_QWORD *)((char *)v26 + *(int *)(v10 + 36));
      v11 = *(int *)(v27 + 36);
      *(_QWORD *)((char *)v25 + v11) = *(_QWORD *)((char *)v26 + v11);
      __dst = (char *)v25 + v11 + *(int *)(v43 + 28);
      __src = (char *)v26 + v11 + *(int *)(v43 + 28);
      if (v48())
      {
        v12 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(__dst, __src, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v16 = (char *)v39 + v24[24];
    v17 = (char *)v40 + v24[24];
    v18 = sub_100008AC0(&qword_10008B8B8);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))(v17, 1))
    {
      v14 = sub_100008AC0(&qword_10008B8D0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload(a2, v51, 1);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008B848);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v51, 0);
  }
  return a2;
}

uint64_t sub_100032BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  char *__dst;
  char *__src;
  char *v36;
  char *v37;
  int *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *);
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(void);
  uint64_t v76;

  v76 = sub_100008AC0(&qword_10008B8E0);
  if (swift_getEnumCaseMultiPayload(a1, v76) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
    v3 = sub_100008AC0(&qword_10008B860);
    v63 = (_QWORD *)(a2 + *(int *)(v3 + 44));
    v64 = (uint64_t *)(a1 + *(int *)(v3 + 44));
    v43 = *v64;
    swift_retain();
    *v63 = v43;
    v44 = sub_100008AC0(&qword_10008B868);
    v46 = (_QWORD *)((char *)v63 + *(int *)(v44 + 36));
    v47 = (uint64_t *)((char *)v64 + *(int *)(v44 + 36));
    v45 = *v47;
    swift_retain();
    *v46 = v45;
    v48 = sub_100008AC0(&qword_10008B870);
    v50 = (char *)v46 + *(int *)(v48 + 28);
    v49 = (char *)v47 + *(int *)(v48 + 28);
    v51 = type metadata accessor for Image.Scale(0);
    v52 = *(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 16);
    v52(v50, v49);
    v53 = sub_100008AC0(&qword_10008B878);
    v56 = (_QWORD *)((char *)v63 + *(int *)(v53 + 36));
    v55 = (uint64_t *)((char *)v64 + *(int *)(v53 + 36));
    v54 = *v55;
    swift_retain();
    *v56 = v54;
    v57 = v55[1];
    swift_retain();
    v56[1] = v57;
    v58 = sub_100008AC0(&qword_10008B880);
    v61 = (_QWORD *)((char *)v63 + *(int *)(v58 + 36));
    v60 = (uint64_t *)((char *)v64 + *(int *)(v58 + 36));
    v59 = *v60;
    swift_retain();
    *v61 = v59;
    v62 = v60[1];
    swift_retain();
    v61[1] = v62;
    v4 = sub_100008AC0(&qword_10008B888);
    v66 = (_QWORD *)((char *)v63 + *(int *)(v4 + 36));
    v67 = (uint64_t *)((char *)v64 + *(int *)(v4 + 36));
    v65 = *v67;
    swift_retain();
    *v66 = v65;
    v68 = sub_100008AC0(&qword_10008B890);
    v69 = (char *)v66 + *(int *)(v68 + 28);
    v70 = (char *)v67 + *(int *)(v68 + 28);
    v71 = type metadata accessor for SymbolRenderingMode(0);
    v72 = *(_QWORD *)(v71 - 8);
    v73 = *(unsigned int (**)(void))(v72 + 48);
    if (((unsigned int (*)(char *, uint64_t))v73)(v70, 1))
    {
      v5 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
    }
    v38 = (int *)sub_100008AC0(&qword_10008B898);
    v37 = (char *)v63 + v38[12];
    v36 = (char *)v64 + v38[12];
    v6 = sub_100008AC0(&qword_10008B8A0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 16))(v37, v36);
    v7 = (char *)v63 + v38[16];
    v8 = (char *)v64 + v38[16];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v8[8];
    v39 = (_QWORD *)((char *)v63 + v38[20]);
    v40 = (uint64_t *)((char *)v64 + v38[20]);
    v41 = sub_100008AC0(&qword_10008B8A8);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v42 + 48))(v40, 1))
    {
      v10 = sub_100008AC0(&qword_10008B8C8);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v17 = *v40;
      swift_retain();
      *v39 = v17;
      v19 = (_QWORD *)((char *)v39 + *(int *)(v44 + 36));
      v20 = (uint64_t *)((char *)v40 + *(int *)(v44 + 36));
      v18 = *v20;
      swift_retain();
      *v19 = v18;
      ((void (*)(char *, char *, uint64_t))v52)((char *)v19 + *(int *)(v48 + 28), (char *)v20 + *(int *)(v48 + 28), v51);
      v23 = (_QWORD *)((char *)v39 + *(int *)(v53 + 36));
      v22 = (uint64_t *)((char *)v40 + *(int *)(v53 + 36));
      v21 = *v22;
      swift_retain();
      *v23 = v21;
      v24 = v22[1];
      swift_retain();
      v23[1] = v24;
      v27 = (_QWORD *)((char *)v39 + *(int *)(v58 + 36));
      v26 = (uint64_t *)((char *)v40 + *(int *)(v58 + 36));
      v25 = *v26;
      swift_retain();
      *v27 = v25;
      v28 = v26[1];
      swift_retain();
      v27[1] = v28;
      v29 = *(int *)(sub_100008AC0(&qword_10008B8B0) + 36);
      v30 = *(uint64_t *)((char *)v40 + v29);
      swift_retain();
      *(_QWORD *)((char *)v39 + v29) = v30;
      v32 = (_QWORD *)((char *)v39 + *(int *)(v41 + 36));
      v33 = (uint64_t *)((char *)v40 + *(int *)(v41 + 36));
      v31 = *v33;
      swift_retain();
      *v32 = v31;
      __dst = (char *)v32 + *(int *)(v68 + 28);
      __src = (char *)v33 + *(int *)(v68 + 28);
      if (v73())
      {
        v9 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, __src, v71);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v13 = (char *)v63 + v38[24];
    v14 = (char *)v64 + v38[24];
    v15 = sub_100008AC0(&qword_10008B8B8);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v14, 1))
    {
      v11 = sub_100008AC0(&qword_10008B8D0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    swift_storeEnumTagMultiPayload(a2, v76, 1);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008B848);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v76, 0);
  }
  return a2;
}

unint64_t sub_100033374()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008B8E8;
  if (!qword_10008B8E8)
  {
    v2 = sub_100008DF0(&qword_10008B850);
    sub_100032554();
    sub_1000317A8();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B8E8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100033400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(void);

  v1 = sub_100008AC0(&qword_10008B8E0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v21 = a1 + *(int *)(sub_100008AC0(&qword_10008B860) + 44);
    swift_release();
    v15 = sub_100008AC0(&qword_10008B868);
    v16 = v21 + *(int *)(v15 + 36);
    swift_release();
    v17 = sub_100008AC0(&qword_10008B870);
    v18 = v16 + *(int *)(v17 + 28);
    v19 = type metadata accessor for Image.Scale(0);
    v20 = *(void (**)(uint64_t))(*(_QWORD *)(v19 - 8) + 8);
    v20(v18);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v22 = v21 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
    swift_release();
    v23 = sub_100008AC0(&qword_10008B890);
    v24 = v22 + *(int *)(v23 + 28);
    v25 = type metadata accessor for SymbolRenderingMode(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(void))(v26 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t))v27)(v24, 1))
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    v12 = (int *)sub_100008AC0(&qword_10008B898);
    v11 = v21 + v12[12];
    v3 = sub_100008AC0(&qword_10008B8A0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v11);
    v13 = v21 + v12[20];
    v14 = sub_100008AC0(&qword_10008B8A8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1))
    {
      swift_release();
      v8 = v13 + *(int *)(v15 + 36);
      swift_release();
      ((void (*)(uint64_t, uint64_t))v20)(v8 + *(int *)(v17 + 28), v19);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B8B0);
      swift_release();
      v9 = v13 + *(int *)(v14 + 36);
      swift_release();
      v10 = v9 + *(int *)(v23 + 28);
      if (!v27())
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v10, v25);
    }
    v5 = v21 + v12[24];
    v6 = sub_100008AC0(&qword_10008B8B8);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v7 + 48))(v5, 1))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008B848);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t sub_100033820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t countAndFlagsBits;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v65;
  char v66;
  unint64_t v67;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Class isa;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t OpaqueTypeConformance2;
  void (*v137)(uint64_t, uint64_t);
  unsigned int v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  void (*v222)(char *, _QWORD, uint64_t);
  _QWORD *v223;
  char *v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t);
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  void (*v230)(char *, _QWORD, uint64_t);
  _QWORD *v231;
  uint64_t v232;
  char *v233;
  void (*v234)(char *, uint64_t);
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  int v251;
  uint64_t v252;
  _QWORD v253[2];
  _QWORD v254[2];
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned __int8 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned __int8 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 v275;
  uint64_t v276;
  _QWORD v277[2];
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD v281[5];
  _QWORD v282[5];
  uint64_t v283;
  char v284;
  _QWORD v285[5];
  _QWORD v286[2];
  uint64_t v287;
  char v288;
  uint64_t v289;
  char v290;
  _QWORD v291[2];
  _QWORD v292[2];
  char v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD v300[2];
  char v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  _QWORD v306[2];
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  _QWORD v313[2];
  _QWORD v314[2];
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;

  v143 = a2;
  v243 = a1;
  v336 = 0;
  v335 = 0;
  v334 = 0;
  v333 = 0;
  v332 = 0;
  v331 = 0;
  v330 = 0;
  v289 = 0;
  v290 = 0;
  v280 = 0;
  v278 = 0;
  v279 = 0;
  v228 = 0;
  v144 = type metadata accessor for ContentTransition(0);
  v145 = *(_QWORD *)(v144 - 8);
  v146 = (*(_QWORD *)(v145 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v144);
  v147 = (uint64_t)&v69 - v146;
  v148 = sub_100008AC0(&qword_10008B9F0);
  v149 = (*(_QWORD *)(*(_QWORD *)(v148 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v148);
  v150 = (uint64_t)&v69 - v149;
  v151 = sub_100008AC0(&qword_10008B8B8);
  v152 = *(_QWORD *)(v151 - 8);
  v153 = (*(_QWORD *)(v152 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v151);
  v154 = (uint64_t)&v69 - v153;
  v155 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v153);
  v156 = (uint64_t)&v69 - v155;
  v336 = (char *)&v69 - v155;
  v157 = sub_100008AC0(&qword_10008B8D0);
  v158 = (*(_QWORD *)(*(_QWORD *)(v157 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v228);
  v159 = (char *)&v69 - v158;
  v160 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v161 = (char *)&v69 - v160;
  v162 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v163 = (char *)&v69 - v162;
  v335 = (char *)&v69 - v162;
  v164 = type metadata accessor for PushTransition(v8);
  v165 = *(_QWORD *)(v164 - 8);
  v166 = (*(_QWORD *)(v165 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v164);
  v167 = (uint64_t)&v69 - v166;
  v168 = sub_100008AC0(&qword_10008B8B0);
  v169 = (*(_QWORD *)(*(_QWORD *)(v168 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v168);
  v170 = (uint64_t)&v69 - v169;
  v171 = sub_100008AC0(&qword_10008B8A8);
  v172 = *(_QWORD *)(v171 - 8);
  v173 = (*(_QWORD *)(v172 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v171);
  v174 = (char *)&v69 - v173;
  v175 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v173);
  v176 = (uint64_t)&v69 - v175;
  v177 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v175);
  v178 = (char *)&v69 - v177;
  v334 = (char *)&v69 - v177;
  v179 = sub_100008AC0(&qword_10008B8C8);
  v180 = (*(_QWORD *)(*(_QWORD *)(v179 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = __chkstk_darwin(v228);
  v181 = (char *)&v69 - v180;
  v182 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = __chkstk_darwin(v11);
  v183 = (uint64_t *)((char *)&v69 - v182);
  v184 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = __chkstk_darwin(v13);
  v185 = (uint64_t *)((char *)&v69 - v184);
  v333 = (char *)&v69 - v184;
  v186 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v15) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = __chkstk_darwin(v228);
  v187 = (uint64_t *)((char *)&v69 - v186);
  v188 = type metadata accessor for Snapshot(v16);
  v189 = (*(_QWORD *)(*(_QWORD *)(v188 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = __chkstk_darwin(v188);
  v190 = (uint64_t *)((char *)&v69 - v189);
  v191 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v17);
  v192 = (uint64_t *)((char *)&v69 - v191);
  v193 = sub_100008AC0(&qword_10008B8A0);
  v194 = *(_QWORD *)(v193 - 8);
  v195 = (*(_QWORD *)(v194 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = __chkstk_darwin(v228);
  v196 = (uint64_t)&v69 - v195;
  v197 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = __chkstk_darwin(v19);
  v198 = (uint64_t)&v69 - v197;
  v332 = (char *)&v69 - v197;
  v249 = type metadata accessor for WidgetRenderingMode(v21);
  v246 = *(_QWORD *)(v249 - 8);
  v199 = (*(_QWORD *)(v246 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v249);
  v247 = (char *)&v69 - v199;
  v200 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v199);
  v248 = (char *)&v69 - v200;
  v201 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B8C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = __chkstk_darwin(v228);
  v202 = (uint64_t)&v69 - v201;
  v203 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = __chkstk_darwin(v23);
  v204 = (uint64_t)&v69 - v203;
  v232 = type metadata accessor for Font.Leading(v25);
  v231 = *(_QWORD **)(v232 - 8);
  v205 = (v231[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = __chkstk_darwin(v228);
  v233 = (char *)&v69 - v205;
  v225 = type metadata accessor for Image.Scale(v26);
  v223 = *(_QWORD **)(v225 - 8);
  v206 = (v223[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v225);
  v224 = (char *)&v69 - v206;
  v236 = sub_100008AC0(&qword_10008B868);
  v207 = (*(_QWORD *)(*(_QWORD *)(v236 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v236);
  v239 = (uint64_t)&v69 - v207;
  v241 = sub_100008AC0(&qword_10008B878);
  v208 = (*(_QWORD *)(*(_QWORD *)(v241 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v241);
  v209 = (uint64_t)&v69 - v208;
  v210 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v208);
  v245 = (uint64_t)&v69 - v210;
  v211 = sub_100008AC0(&qword_10008B880);
  v212 = (*(_QWORD *)(*(_QWORD *)(v211 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v211);
  v213 = (uint64_t)&v69 - v212;
  v214 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v212);
  v240 = (uint64_t)&v69 - v214;
  v215 = sub_100008AC0(&qword_10008B888);
  v216 = (*(_QWORD *)(*(_QWORD *)(v215 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v215);
  v217 = (char *)&v69 - v216;
  v218 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v216);
  v219 = (uint64_t)&v69 - v218;
  v220 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v69 - v218);
  v221 = (char *)&v69 - v220;
  v331 = (char *)&v69 - v220;
  v330 = a1;
  v31 = sub_100030974();
  v32 = Image.init(systemName:)(v31);
  v227 = &v329;
  v329 = v32;
  v222 = (void (*)(char *, _QWORD, uint64_t))v223[13];
  v222(v224, enum case for Image.Scale.medium(_:), v225);
  View.imageScale(_:)(v224, &type metadata for Image, &protocol witness table for Image);
  v226 = (void (*)(char *, uint64_t))v223[1];
  v226(v224, v225);
  sub_10001B7F0(v227);
  v229 = type metadata accessor for MessageListHeaderView(v228);
  v235 = *(_QWORD *)(v243 + *(int *)(v229 + 24));
  swift_retain();
  v230 = (void (*)(char *, _QWORD, uint64_t))v231[13];
  v230(v233, enum case for Font.Leading.tight(_:), v232);
  v238 = Font.leading(_:)(v233, v235);
  v234 = (void (*)(char *, uint64_t))v231[1];
  v234(v233, v232);
  swift_release();
  v237 = sub_10003860C();
  View.font(_:)(v238, v236);
  swift_release();
  sub_100038704(v239);
  v244 = sub_100030C68();
  v242 = sub_10003878C();
  View.foregroundColor(_:)(v244, v241);
  swift_release();
  sub_100038888(v245);
  v33 = sub_1000306CC((uint64_t)v248);
  static WidgetRenderingMode.fullColor.getter(v33);
  v251 = static WidgetRenderingMode.== infix(_:_:)(v248, v247);
  v250 = *(void (**)(char *, uint64_t))(v246 + 8);
  v250(v247, v249);
  v250(v248, v249);
  if ((v251 & 1) != 0)
    static SymbolRenderingMode.palette.getter();
  else
    static SymbolRenderingMode.monochrome.getter();
  v34 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v204, 0, 1);
  v121 = sub_100038944();
  View.symbolRenderingMode(_:)(v204, v211);
  v35 = v187;
  sub_100038A40(v204);
  sub_100038AB0(v240);
  v122 = sub_100038BA0();
  sub_100031764(v219, v215, (uint64_t)v221);
  sub_100038C9C(v219);
  sub_10001BE1C(v243 + *(int *)(v229 + 20), (uint64_t)v192);
  sub_10000D0CC((uint64_t)v192, (uint64_t)v35);
  sub_10001C610(v192);
  v124 = sub_1000178D4();
  v123 = v36;
  sub_1000133D4(v187);
  v125 = v313;
  v313[0] = v124;
  v313[1] = v123;
  v126 = sub_100038E3C();
  v309 = Text.init<A>(_:)(v125, &type metadata for String);
  v310 = v37;
  v311 = v38;
  v312 = v39;
  v127 = v306;
  v306[0] = v309;
  v306[1] = v37;
  v138 = 1;
  v307 = v38 & 1;
  v308 = v39;
  v135 = 1;
  View.lineLimit(_:)(v314);
  sub_100038EA4((uint64_t)v127);
  v131 = v300;
  v300[0] = v314[0];
  v300[1] = v314[1];
  v301 = v315 & 1 & v138;
  v302 = v316;
  v303 = v317;
  v304 = v318;
  v305 = v319 & 1 & v138;
  v128 = *(_QWORD *)(v243 + *(int *)(v229 + 24));
  v40 = swift_retain();
  static Font.Weight.semibold.getter(v40);
  v130 = Font.weight(_:)(v128);
  swift_release();
  v129 = sub_100008AC0(&qword_10008BA50);
  sub_100038F28();
  View.font(_:)(v130, v129);
  swift_release();
  sub_100039020((uint64_t)v131);
  v132 = v292;
  v292[0] = v320;
  v292[1] = v321;
  v293 = v322 & 1 & v138;
  v294 = v323;
  v295 = v324;
  v296 = v325;
  v297 = v326 & 1 & v138;
  v298 = v327;
  v299 = v328;
  v133 = sub_100008AC0(&qword_10008BA70);
  v134 = sub_100039070();
  v41 = sub_10003AF18();
  View.widgetAccentable(_:)(v41 & 1, v133, v134);
  sub_1000390FC((uint64_t)v132);
  v291[0] = v133;
  v291[1] = v134;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v291, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, v135);
  sub_100031764(v196, v193, v198);
  v137 = *(void (**)(uint64_t, uint64_t))(v194 + 8);
  v137(v196, v193);
  v287 = Spacer.init(minLength:)(0, v138);
  v288 = v42 & 1 & v138;
  sub_100031764((uint64_t)&v287, (uint64_t)&type metadata for Spacer, (uint64_t)&v289);
  sub_10001BE1C(v243 + *(int *)(v229 + 20), (uint64_t)v192);
  v43 = (char *)v192 + *(int *)(v188 + 20);
  v141 = *(_QWORD *)v43;
  v139 = *((_QWORD *)v43 + 1);
  v140 = *((unsigned __int16 *)v43 + 8);
  sub_10002BF3C(v141);
  sub_10001C610(v192);
  v142 = sub_100069B3C(v141, v139, v140);
  sub_100039164(v141);
  if ((v142 & 1) != 0)
  {
    countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("moon.fill", 9uLL, 1)._countAndFlagsBits;
    v45 = Image.init(systemName:)(countAndFlagsBits);
    v117 = &v252;
    v252 = v45;
    v222(v224, enum case for Image.Scale.medium(_:), v225);
    View.imageScale(_:)(v224, &type metadata for Image, &protocol witness table for Image);
    v226(v224, v225);
    sub_10001B7F0(v117);
    v118 = *(_QWORD *)(v243 + *(int *)(v229 + 24));
    swift_retain();
    v230(v233, enum case for Font.Leading.tight(_:), v232);
    v119 = Font.leading(_:)(v233, v118);
    v234(v233, v232);
    swift_release();
    View.font(_:)(v119, v236);
    swift_release();
    sub_100038704(v239);
    v46 = sub_1000306CC((uint64_t)v248);
    static WidgetRenderingMode.fullColor.getter(v46);
    v120 = static WidgetRenderingMode.== infix(_:_:)(v248, v247);
    v250(v247, v249);
    v250(v248, v249);
    if ((v120 & 1) != 0)
    {
      v47 = objc_msgSend((id)objc_opt_self(UIColor), "systemIndigoColor");
      v116 = Color.init(_:)(v47);
    }
    else
    {
      v116 = static Color.primary.getter();
    }
    v114 = v116;
    View.foregroundColor(_:)(v116, v241);
    swift_release();
    sub_100038888(v209);
    sub_10003AF30();
    v48 = sub_10003A2A4();
    sub_10003AF44(v167, v211, v164, v121, v48, v170);
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v167, v164);
    sub_100038AB0(v213);
    v49 = sub_1000306CC((uint64_t)v248);
    static WidgetRenderingMode.fullColor.getter(v49);
    v115 = static WidgetRenderingMode.== infix(_:_:)(v248, v247);
    v250(v247, v249);
    v250(v248, v249);
    if ((v115 & 1) != 0)
      static SymbolRenderingMode.palette.getter();
    else
      static SymbolRenderingMode.monochrome.getter();
    v50 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v202, 0, 1);
    sub_10003923C();
    View.symbolRenderingMode(_:)(v202, v168);
    sub_100038A40(v202);
    sub_10003A314(v170);
    v113 = sub_1000391B0();
    sub_100031764(v176, v171, (uint64_t)v178);
    sub_10003A424(v176);
    sub_10003A5E4(v178, v174);
    sub_100031764((uint64_t)v174, v171, (uint64_t)v181);
    sub_10003A424((uint64_t)v174);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v181, 0, 1, v171);
    sub_100055058(v181, v171, v183);
    sub_100039338((uint64_t)v181);
    sub_100039508(v183, v185);
    sub_10003A424((uint64_t)v178);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v181, 1, 1, v171);
    sub_1000391B0();
    sub_100055058(v181, v171, v183);
    sub_100039338((uint64_t)v181);
    sub_100039508(v183, v185);
  }
  sub_10001BE1C(v243 + *(int *)(v229 + 20), (uint64_t)v190);
  v51 = (char *)v190 + *(int *)(v188 + 20);
  v111 = *(_QWORD *)v51;
  v109 = *((_QWORD *)v51 + 1);
  v110 = *((unsigned __int16 *)v51 + 8);
  sub_10002BF3C(v111);
  sub_10001C610(v190);
  v112 = sub_100069BD0(v111, v109);
  if ((v52 & 1) != 0)
  {
    sub_100039164(v111);
LABEL_22:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56))(v159, 1, 1, v151);
    v67 = sub_10003979C();
    v286[0] = v148;
    v286[1] = v67;
    swift_getOpaqueTypeConformance2(v286, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_100055058(v159, v151, v161);
    sub_100039894((uint64_t)v159);
    sub_100039908(v161, v163);
    goto LABEL_23;
  }
  v108 = v112;
  v107 = v112;
  v280 = v112;
  sub_100039164(v111);
  if (v107 <= 0)
    goto LABEL_22;
  v105 = (id)*sub_100030920();
  v53 = v105;
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v106 = objc_msgSend(v105, "stringForObjectValue:");
  swift_unknownObjectRelease();

  if (v106)
  {
    v103 = v106;
    v98 = v106;
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v100 = v54;

    v101 = v99;
    v102 = v100;
  }
  else
  {
    v101 = 0;
    v102 = 0;
  }
  v96 = v102;
  v97 = v101;
  if (!v102)
    goto LABEL_22;
  v94 = v97;
  v95 = v96;
  v93 = v96;
  v73 = v97;
  v278 = v97;
  v279 = v96;
  swift_bridgeObjectRetain(v96);
  v277[0] = v73;
  v277[1] = v93;
  v273 = Text.init<A>(_:)(v277, &type metadata for String);
  v274 = v55;
  v275 = v56;
  v276 = v57;
  v75 = v273;
  v76 = v55;
  v77 = v56;
  v78 = v57;
  v74 = *(_QWORD *)(v243 + *(int *)(v229 + 24));
  swift_retain();
  v269 = v75;
  v270 = v76;
  v90 = 1;
  v271 = v77 & 1;
  v272 = v78;
  v265 = Text.font(_:)(v74, v75, v76, v77 & 1, v78);
  v266 = v58;
  v267 = v59;
  v268 = v60;
  v80 = v265;
  v81 = v58;
  v82 = v59;
  v83 = v60;
  swift_release();
  sub_100038EE8(v75, v76, v77 & 1);
  v61 = swift_bridgeObjectRelease(v78);
  v79 = static Color.secondary.getter(v61);
  v261 = v80;
  v262 = v81;
  v263 = v82 & 1 & v90;
  v264 = v83;
  v257 = Text.foregroundColor(_:)(v79, v80, v81, v263, v83);
  v258 = v62;
  v259 = v63;
  v260 = v64;
  v84 = v257;
  v85 = v62;
  v86 = v63;
  v87 = v64;
  swift_release();
  sub_100038EE8(v80, v81, v82 & 1);
  swift_bridgeObjectRelease(v83);
  v88 = v254;
  v254[0] = v84;
  v254[1] = v85;
  v255 = v86 & 1 & v90;
  v256 = v87;
  v65 = sub_1000356B4();
  static ContentTransition.numericText(countsDown:)(v65 & 1);
  sub_1000356C0(v147, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v147, v144);
  sub_100038EA4((uint64_t)v88);
  v89 = sub_10003979C();
  v66 = sub_10003AF18();
  View.widgetAccentable(_:)(v66 & 1, v148, v89);
  sub_10003A200(v150);
  v253[0] = v148;
  v253[1] = v89;
  v91 = swift_getOpaqueTypeConformance2(v253, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  sub_100031764(v154, v151, v156);
  v92 = *(void (**)(uint64_t, uint64_t))(v152 + 8);
  v92(v154, v151);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16))(v154, v156, v151);
  sub_100031764(v154, v151, (uint64_t)v159);
  v92(v154, v151);
  (*(void (**)(char *, _QWORD, _QWORD, uint64_t))(v152 + 56))(v159, 0, v90, v151);
  sub_100055058(v159, v151, v161);
  sub_100039894((uint64_t)v159);
  sub_100039908(v161, v163);
  v92(v156, v151);
  swift_bridgeObjectRelease(v93);
LABEL_23:
  sub_1000399C8(v221, v217);
  v72 = v285;
  v285[0] = v217;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 16))(v196, v198, v193);
  v285[1] = v196;
  v283 = v289;
  v284 = v290;
  v285[2] = &v283;
  sub_100039CC0(v185, v183);
  v285[3] = v183;
  sub_10003A010(v163, v161);
  v285[4] = v161;
  v70 = v282;
  v282[0] = v215;
  v282[1] = v193;
  v282[2] = &type metadata for Spacer;
  v282[3] = v179;
  v282[4] = v157;
  v71 = v281;
  v281[0] = v122;
  v281[1] = OpaqueTypeConformance2;
  v281[2] = &protocol witness table for Spacer;
  v281[3] = sub_10003A0D0();
  v281[4] = sub_10003A14C();
  sub_10003571C((uint64_t)v72, 5uLL, (uint64_t)v70, v143);
  sub_100039894((uint64_t)v161);
  sub_100039338((uint64_t)v183);
  v137(v196, v193);
  sub_100038C9C((uint64_t)v217);
  sub_100039894((uint64_t)v163);
  sub_100039338((uint64_t)v185);
  v137(v198, v193);
  return sub_100038C9C((uint64_t)v221);
}

_QWORD *sub_10003517C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *__dst;
  char *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v25;

  v25 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v25) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v25, 1);
  }
  else
  {
    v22 = *a1;
    swift_retain();
    *a2 = v22;
    swift_storeEnumTagMultiPayload(a2, v25, 0);
  }
  v17 = type metadata accessor for MessageListHeaderView(0);
  v19 = (char *)a2 + *(int *)(v17 + 20);
  v21 = (char *)a1 + *(int *)(v17 + 20);
  *(_QWORD *)v19 = *(_QWORD *)v21;
  v18 = *((_QWORD *)v21 + 1);
  swift_bridgeObjectRetain(v18);
  *((_QWORD *)v19 + 1) = v18;
  v20 = *((_QWORD *)v21 + 2);
  swift_bridgeObjectRetain(v20);
  *((_QWORD *)v19 + 2) = v20;
  if (*((_QWORD *)v21 + 4) <= 5uLL)
  {
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v21 + 24);
  }
  else
  {
    *((_QWORD *)v19 + 3) = *((_QWORD *)v21 + 3);
    v16 = *((_QWORD *)v21 + 4);
    swift_bridgeObjectRetain(v16);
    *((_QWORD *)v19 + 4) = v16;
  }
  v3 = type metadata accessor for Mailbox(0);
  __dst = &v19[*(int *)(v3 + 28)];
  __src = &v21[*(int *)(v3 + 28)];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, __src, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  v5 = type metadata accessor for Snapshot(0);
  v10 = &v19[*(int *)(v5 + 20)];
  v11 = &v21[*(int *)(v5 + 20)];
  if (*(_QWORD *)v11 < 2uLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
  }
  else
  {
    v9 = *(_QWORD *)v11;
    swift_bridgeObjectRetain(*(_QWORD *)v11);
    *(_QWORD *)v10 = v9;
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    v10[16] = v11[16];
    v10[17] = v11[17];
  }
  v7 = *(int *)(v17 + 24);
  v8 = *(uint64_t *)((char *)a1 + v7);
  swift_retain();
  result = a2;
  *(_QWORD *)((char *)a2 + v7) = v8;
  return result;
}

uint64_t sub_100035490@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033820(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100035498()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B8F8;
  if (!qword_10008B8F8)
  {
    v0 = sub_100008DF0(&qword_10008B8F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B8F8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100035508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v8 = (_QWORD *)(a1 + *(int *)(type metadata accessor for MessageListHeaderView(0) + 20));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[2]);
  if (v8[4] > 5uLL)
    swift_bridgeObjectRelease(v8[4]);
  v5 = (char *)v8 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v4 = (_QWORD *)((char *)v8 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v4 >= 2uLL)
    swift_bridgeObjectRelease(*v4);
  swift_release();
  return a1;
}

uint64_t sub_1000356B4()
{
  return 0;
}

uint64_t sub_1000356C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1000741C0);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

uint64_t *sub_10003571C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  char *v21;
  unint64_t i;
  uint64_t TupleTypeMetadata;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v24 = a4;
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (a2 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    v19 = &v9;
    v20 = (8 * v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    __chkstk_darwin();
    v21 = (char *)&v9 - v20;
    for (i = v4; ; i = v5 + 1)
    {
      v18 = i;
      if (i >= v26)
        break;
      v5 = v18;
      *(_QWORD *)&v21[8 * v18] = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8 * v18);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata(0, v26, v21, 0);
  }
  v14 = TupleTypeMetadata;
  v6 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata - 8) + 64);
  v15 = &v9;
  v16 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin();
  v17 = (char *)&v9 - v16;
  if (v7)
  {
    for (j = 0; ; j = v9)
    {
      v11 = j;
      v12 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8 * j);
      v10 = v26 == 1 ? 0 : *(_DWORD *)(v14 + 24 + 16 * v11 + 8);
      (*(void (**)(char *, _QWORD))(*(_QWORD *)(v12 - 8) + 16))(&v17[v10], *(_QWORD *)(v25 + 8 * v11));
      v9 = v11 + 1;
      if (v11 + 1 == v26)
        break;
    }
  }
  TupleView.init(_:)(v17, v14);
  return v15;
}

uint64_t sub_100035954()
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100073F90);
  return Environment.init(_:)(KeyPath);
}

uint64_t sub_100035984@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  sub_10003856C(a1, a3);
  v5 = type metadata accessor for MessageListHeaderView(0);
  sub_10001C04C(a2, (uint64_t)&a3[*(int *)(v5 + 20)]);
  v6 = *(int *)(v5 + 24);
  result = static Font.footnote.getter();
  *(_QWORD *)&a3[v6] = result;
  return result;
}

uint64_t sub_1000359F0()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_100035A04()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_100035A18()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100035A30@<X0>(uint64_t a1@<X8>)
{
  return sub_100030DB4(a1);
}

uint64_t sub_100035A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Builtin::Word v16;
  unsigned int v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  uint64_t *v62;
  char *v63;

  v22 = a1;
  v63 = 0;
  v62 = 0;
  v1 = sub_100008AC0(&qword_10008B6D0);
  v23 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v24 = (uint64_t)&v16 - v23;
  v37 = 0;
  v43 = type metadata accessor for WidgetFamily(0);
  v42 = *(_QWORD *)(v43 - 8);
  v25 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v37);
  v45 = (char *)&v16 - v25;
  v51 = type metadata accessor for WidgetPreviewContext(v2);
  v49 = *(_QWORD *)(v51 - 8);
  v26 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v51);
  v50 = (char *)&v16 - v26;
  v27 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(v37);
  v40 = (char *)&v16 - v27;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v3) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v37);
  v39 = (uint64_t)&v16 - v28;
  v29 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v4) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(v37);
  v41 = (uint64_t)&v16 - v29;
  v46 = type metadata accessor for MessageListHeaderView(v5);
  v30 = (*(_QWORD *)(*(_QWORD *)(v46 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v46);
  v6 = (char *)&v16 - v30;
  v53 = (char *)&v16 - v30;
  v55 = sub_100008AC0(&qword_10008B900);
  v31 = (*(_QWORD *)(*(_QWORD *)(v55 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v55);
  v32 = (Builtin::Word *)((char *)&v16 - v31);
  v33 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v16 - v31);
  v34 = (Builtin::Word *)((char *)&v16 - v33);
  v35 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v16 - v33);
  v57 = (uint64_t *)((char *)&v16 - v35);
  v36 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v16 - v35);
  v54 = (uint64_t *)((char *)&v16 - v36);
  v63 = (char *)&v16 - v36;
  v10 = sub_100017718();
  sub_10000D0CC(v10, v39);
  v38 = type metadata accessor for Message(v37);
  v11 = _allocateUninitializedArray<A>(_:)(v37, v38);
  sub_100069ADC(v39, v11, 8, 0, v41);
  sub_100035954();
  sub_100035984(v40, v41, v6);
  v44 = *(void (**)(char *, _QWORD, uint64_t))(v42 + 104);
  v44(v45, enum case for WidgetFamily.systemSmall(_:), v43);
  WidgetPreviewContext.init(family:)(v45);
  v47 = sub_100036338();
  v48 = sub_1000363A8();
  View.previewContext<A>(_:)(v50, v46, v51, v47);
  v52 = *(void (**)(char *, uint64_t))(v49 + 8);
  v52(v50, v51);
  sub_100035508((uint64_t)v53);
  v56 = sub_100036418();
  sub_100031764((uint64_t)v57, v55, (uint64_t)v54);
  sub_100036514((uint64_t)v57);
  v62 = v57;
  v12 = v53;
  v16 = 5;
  v17 = 1;
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("INBOX", 5uLL, 1);
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Inbox", v16, v17 & 1);
  v20 = 0;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v13 - 8) + 56))(v24, v17);
  sub_100017480(v18._countAndFlagsBits, (uint64_t)v18._object, v20, v19._countAndFlagsBits, (unint64_t)v19._object, v24, v39);
  v14 = _allocateUninitializedArray<A>(_:)(v20, v38);
  sub_100069ADC(v39, v14, 8, 256, v41);
  sub_100035954();
  sub_100035984(v40, v41, v12);
  v44(v45, enum case for WidgetFamily.systemSmall(_:), v43);
  WidgetPreviewContext.init(family:)(v45);
  View.previewContext<A>(_:)(v50, v46, v51, v47);
  v52(v50, v51);
  sub_100035508((uint64_t)v53);
  sub_100031764((uint64_t)v34, v55, (uint64_t)v57);
  sub_100036514((uint64_t)v34);
  sub_1000366FC(v54, v34);
  v21 = v61;
  v61[0] = v34;
  sub_1000366FC(v57, v32);
  v61[1] = v32;
  v60[0] = v55;
  v60[1] = v55;
  v58 = v56;
  v59 = v56;
  sub_10003571C((uint64_t)v21, 2uLL, (uint64_t)v60, v22);
  sub_100036514((uint64_t)v32);
  sub_100036514((uint64_t)v34);
  sub_100036514((uint64_t)v57);
  return sub_100036514((uint64_t)v54);
}

uint64_t sub_1000360F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100035A44(a1);
}

uint64_t sub_10003610C()
{
  return static PreviewProvider.platform.getter();
}

uint64_t sub_100036120(uint64_t a1)
{
  unint64_t v1;

  v1 = sub_100036A98();
  return static PreviewProvider._previews.getter(a1, v1);
}

uint64_t sub_100036154(uint64_t a1)
{
  unint64_t v1;

  v1 = sub_100036A98();
  return static PreviewProvider._platform.getter(a1, v1);
}

uint64_t sub_100036188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v11 = a2;
  v8 = a1;
  v6[1] = 0;
  v13 = type metadata accessor for WidgetRenderingMode();
  v10 = *(_QWORD *)(v13 - 8);
  v7 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v12 = (char *)v6 - v7;
  v15 = type metadata accessor for EnvironmentValues(v2);
  v14 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v15);
  v16 = (char *)v6 - v9;
  v4 = (*(uint64_t (**)(char *))(v3 + 16))((char *)v6 - v9);
  EnvironmentValues.widgetRenderingMode.getter(v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v11, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v15);
}

uint64_t sub_100036290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100036188(a1, a2);
}

uint64_t sub_1000362A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  char *v6;

  v4[1] = a1;
  v1 = type metadata accessor for WidgetRenderingMode(0);
  v5 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v6 = (char *)v4 - v5;
  (*(void (**)(void))(v2 + 16))();
  return EnvironmentValues.widgetRenderingMode.setter(v6);
}

uint64_t sub_100036324(uint64_t a1)
{
  return sub_1000362A4(a1);
}

unint64_t sub_100036338()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B908;
  if (!qword_10008B908)
  {
    v0 = type metadata accessor for MessageListHeaderView(255);
    WitnessTable = swift_getWitnessTable(&unk_10007416C, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B908);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000363A8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B910;
  if (!qword_10008B910)
  {
    v0 = type metadata accessor for WidgetPreviewContext(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WidgetPreviewContext, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B910);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100036418()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008B918;
  if (!qword_10008B918)
  {
    v2 = sub_100008DF0(&qword_10008B900);
    sub_100036338();
    sub_1000364A4();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B918);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000364A4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B920;
  if (!qword_10008B920)
  {
    v0 = sub_100008DF0(&qword_10008B928);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B920);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100036514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v9 = (_QWORD *)(a1 + *(int *)(type metadata accessor for MessageListHeaderView(0) + 20));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  if (v9[4] > 5uLL)
    swift_bridgeObjectRelease(v9[4]);
  v6 = (char *)v9 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(v6, 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v5 = (_QWORD *)((char *)v9 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v5 >= 2uLL)
    swift_bridgeObjectRelease(*v5);
  swift_release();
  v4 = (_QWORD *)(a1 + *(int *)(sub_100008AC0(&qword_10008B900) + 36));
  if (v4[3])
    sub_10000A410(v4);
  return a1;
}

_QWORD *sub_1000366FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *__dst;
  char *__src;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v29;

  v29 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v29) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v29, 1);
  }
  else
  {
    v26 = *a1;
    swift_retain();
    *a2 = v26;
    swift_storeEnumTagMultiPayload(a2, v29, 0);
  }
  v21 = type metadata accessor for MessageListHeaderView(0);
  v23 = (char *)a2 + *(int *)(v21 + 20);
  v25 = (char *)a1 + *(int *)(v21 + 20);
  *(_QWORD *)v23 = *(_QWORD *)v25;
  v22 = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain(v22);
  *((_QWORD *)v23 + 1) = v22;
  v24 = *((_QWORD *)v25 + 2);
  swift_bridgeObjectRetain(v24);
  *((_QWORD *)v23 + 2) = v24;
  if (*((_QWORD *)v25 + 4) <= 5uLL)
  {
    *(_OWORD *)(v23 + 24) = *(_OWORD *)(v25 + 24);
  }
  else
  {
    *((_QWORD *)v23 + 3) = *((_QWORD *)v25 + 3);
    v20 = *((_QWORD *)v25 + 4);
    swift_bridgeObjectRetain(v20);
    *((_QWORD *)v23 + 4) = v20;
  }
  v3 = type metadata accessor for Mailbox(0);
  __dst = &v23[*(int *)(v3 + 28)];
  __src = &v25[*(int *)(v3 + 28)];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, __src, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  v5 = type metadata accessor for Snapshot(0);
  v14 = &v23[*(int *)(v5 + 20)];
  v15 = &v25[*(int *)(v5 + 20)];
  if (*(_QWORD *)v15 < 2uLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
  }
  else
  {
    v13 = *(_QWORD *)v15;
    swift_bridgeObjectRetain(*(_QWORD *)v15);
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    v14[16] = v15[16];
    v14[17] = v15[17];
  }
  v9 = *(int *)(v21 + 24);
  v10 = *(uint64_t *)((char *)a1 + v9);
  swift_retain();
  *(_QWORD *)((char *)a2 + v9) = v10;
  v6 = sub_100008AC0(&qword_10008B900);
  v11 = (_QWORD *)((char *)a2 + *(int *)(v6 + 36));
  v12 = (uint64_t *)((char *)a1 + *(int *)(v6 + 36));
  if (v12[3])
  {
    v7 = v12[3];
    v11[3] = v7;
    v11[4] = v12[4];
    (**(void (***)(void))(v7 - 8))();
  }
  else
  {
    memcpy(v11, v12, 0x28uLL);
  }
  return a2;
}

unint64_t sub_100036A98()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B930;
  if (!qword_10008B930)
  {
    WitnessTable = swift_getWitnessTable(&unk_100074124, &unk_100083BD0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B930);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100036B04(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *__dst;
  char *__src;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v30;

  v30 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v30 & 0x20000) != 0)
  {
    v25 = *a2;
    swift_retain();
    *a1 = v25;
    return *a1 + ((v30 + 16) & ~(unint64_t)v30);
  }
  else
  {
    v24 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v24) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v24, 1);
    }
    else
    {
      v23 = *a2;
      swift_retain();
      *a1 = v23;
      swift_storeEnumTagMultiPayload(a1, v24, 0);
    }
    v4 = *(int *)(a3 + 20);
    v20 = (char *)a1 + v4;
    v22 = (char *)a2 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v19 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain(v19);
    *((_QWORD *)v20 + 1) = v19;
    v21 = *((_QWORD *)v22 + 2);
    swift_bridgeObjectRetain(v21);
    *((_QWORD *)v20 + 2) = v21;
    if (*((_QWORD *)v22 + 4) <= 5uLL)
    {
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v22 + 24);
    }
    else
    {
      *((_QWORD *)v20 + 3) = *((_QWORD *)v22 + 3);
      v18 = *((_QWORD *)v22 + 4);
      swift_bridgeObjectRetain(v18);
      *((_QWORD *)v20 + 4) = v18;
    }
    v5 = type metadata accessor for Mailbox(0);
    __dst = &v20[*(int *)(v5 + 28)];
    __src = &v22[*(int *)(v5 + 28)];
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 48))(__src, 1))
    {
      v6 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, __src, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v7 = type metadata accessor for Snapshot(0);
    v12 = &v20[*(int *)(v7 + 20)];
    v13 = &v22[*(int *)(v7 + 20)];
    if (*(_QWORD *)v13 < 2uLL)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    }
    else
    {
      v11 = *(_QWORD *)v13;
      swift_bridgeObjectRetain(*(_QWORD *)v13);
      *(_QWORD *)v12 = v11;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      v12[16] = v13[16];
      v12[17] = v13[17];
    }
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v9);
    swift_retain();
    *(_QWORD *)((char *)a1 + v9) = v10;
    return (unint64_t)a1;
  }
}

uint64_t sub_100036E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  if (v9[4] > 5uLL)
    swift_bridgeObjectRelease(v9[4]);
  v6 = (char *)v9 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(v6, 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v5 = (_QWORD *)((char *)v9 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v5 >= 2uLL)
    swift_bridgeObjectRelease(*v5);
  return swift_release();
}

_QWORD *sub_10003701C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *__dst;
  char *__src;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v27;

  v27 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a2, v27) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v27, 1);
  }
  else
  {
    v23 = *a2;
    swift_retain();
    *a1 = v23;
    swift_storeEnumTagMultiPayload(a1, v27, 0);
  }
  v4 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v4;
  v22 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
  v19 = *(uint64_t *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v19);
  *((_QWORD *)v20 + 1) = v19;
  v21 = *((_QWORD *)v22 + 2);
  swift_bridgeObjectRetain(v21);
  *((_QWORD *)v20 + 2) = v21;
  if (*((_QWORD *)v22 + 4) <= 5uLL)
  {
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v22 + 24);
  }
  else
  {
    *((_QWORD *)v20 + 3) = *((_QWORD *)v22 + 3);
    v18 = *((_QWORD *)v22 + 4);
    swift_bridgeObjectRetain(v18);
    *((_QWORD *)v20 + 4) = v18;
  }
  v5 = type metadata accessor for Mailbox(0);
  __dst = &v20[*(int *)(v5 + 28)];
  __src = &v22[*(int *)(v5 + 28)];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v17 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, __src, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  v7 = type metadata accessor for Snapshot(0);
  v12 = &v20[*(int *)(v7 + 20)];
  v13 = &v22[*(int *)(v7 + 20)];
  if (*(_QWORD *)v13 < 2uLL)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  }
  else
  {
    v11 = *(_QWORD *)v13;
    swift_bridgeObjectRetain(*(_QWORD *)v13);
    *(_QWORD *)v12 = v11;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    v12[16] = v13[16];
    v12[17] = v13[17];
  }
  v9 = *(int *)(a3 + 24);
  v10 = *(uint64_t *)((char *)a2 + v9);
  swift_retain();
  result = a1;
  *(_QWORD *)((char *)a1 + v9) = v10;
  return result;
}

uint64_t *sub_10003732C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *__src;
  char *__dst;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_10003081C((uint64_t)a1);
    v32 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v32) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v32, 1);
    }
    else
    {
      v31 = *a2;
      swift_retain();
      *a1 = v31;
      swift_storeEnumTagMultiPayload(a1, v32, 0);
    }
  }
  v4 = *(int *)(a3 + 20);
  v30 = (char *)a1 + v4;
  v27 = (char *)a2 + v4;
  *(uint64_t *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
  v26 = *(uint64_t *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v26);
  v5 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v26;
  swift_bridgeObjectRelease(v5);
  v28 = *((_QWORD *)v30 + 2);
  v29 = *((_QWORD *)v27 + 2);
  swift_bridgeObjectRetain(v29);
  *((_QWORD *)v30 + 2) = v29;
  swift_bridgeObjectRelease(v28);
  if (*((_QWORD *)v30 + 4) <= 5uLL)
  {
    if (*((_QWORD *)v27 + 4) <= 5uLL)
    {
      *(_OWORD *)(v30 + 24) = *(_OWORD *)(v27 + 24);
    }
    else
    {
      *((_QWORD *)v30 + 3) = *((_QWORD *)v27 + 3);
      v24 = *((_QWORD *)v27 + 4);
      swift_bridgeObjectRetain(v24);
      *((_QWORD *)v30 + 4) = v24;
    }
  }
  else if (*((_QWORD *)v27 + 4) <= 5uLL)
  {
    sub_1000090EC((uint64_t)(v30 + 24));
    *(_OWORD *)(v30 + 24) = *(_OWORD *)(v27 + 24);
  }
  else
  {
    *((_QWORD *)v30 + 3) = *((_QWORD *)v27 + 3);
    v25 = *((_QWORD *)v27 + 4);
    swift_bridgeObjectRetain(v25);
    v6 = *((_QWORD *)v30 + 4);
    *((_QWORD *)v30 + 4) = v25;
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  __dst = &v30[*(int *)(v7 + 28)];
  __src = &v27[*(int *)(v7 + 28)];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (((unsigned int (*)(char *, uint64_t))v23)(__dst, 1))
  {
    if (v23(__src, 1, v21))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, __src, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
  }
  else if (v23(__src, 1, v21))
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(__dst, v21);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 24))(__dst, __src, v21);
  }
  v10 = type metadata accessor for Snapshot(0);
  v17 = &v30[*(int *)(v10 + 20)];
  v18 = &v27[*(int *)(v10 + 20)];
  if (*(_QWORD *)v17 < 2uLL)
  {
    if (*(_QWORD *)v18 < 2uLL)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
    }
    else
    {
      v15 = *(_QWORD *)v18;
      swift_bridgeObjectRetain(*(_QWORD *)v18);
      *(_QWORD *)v17 = v15;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
      v17[16] = v18[16];
      v17[17] = v18[17];
    }
  }
  else if (*(_QWORD *)v18 < 2uLL)
  {
    sub_10000A004(v17);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
  }
  else
  {
    v16 = *(_QWORD *)v18;
    swift_bridgeObjectRetain(*(_QWORD *)v18);
    v11 = *(_QWORD *)v17;
    *(_QWORD *)v17 = v16;
    swift_bridgeObjectRelease(v11);
    *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
    v17[16] = v18[16];
    v17[17] = v18[17] & 1;
  }
  v13 = (uint64_t *)((char *)a1 + *(int *)(a3 + 24));
  v14 = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  *v13 = v14;
  swift_release();
  return a1;
}

char *sub_100037888(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  char *v9;
  char *v10;
  char *__dst;
  char *__src;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v20;

  v20 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a2, v20) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v20, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  v4 = *(int *)(a3 + 20);
  v15 = &a1[v4];
  v16 = &a2[v4];
  *(_OWORD *)v15 = *(_OWORD *)&a2[v4];
  *((_QWORD *)v15 + 2) = *(_QWORD *)&a2[v4 + 16];
  *(_OWORD *)(v15 + 24) = *(_OWORD *)&a2[v4 + 24];
  v5 = type metadata accessor for Mailbox(0);
  __dst = &v15[*(int *)(v5 + 28)];
  __src = &v16[*(int *)(v5 + 28)];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(__dst, __src, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v7 = type metadata accessor for Snapshot(0);
  v9 = &v15[*(int *)(v7 + 20)];
  v10 = &v16[*(int *)(v7 + 20)];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_WORD *)v9 + 8) = *((_WORD *)v10 + 8);
  result = a1;
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return result;
}

char *sub_100037B0C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *__src;
  char *__dst;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_10003081C((uint64_t)a1);
    v23 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v23) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v23, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v4 = *(int *)(a3 + 20);
  v22 = &a1[v4];
  v21 = &a2[v4];
  *(_QWORD *)v22 = *(_QWORD *)&a2[v4];
  v5 = *(_QWORD *)&a1[v4 + 8];
  *((_QWORD *)v22 + 1) = *(_QWORD *)&a2[v4 + 8];
  swift_bridgeObjectRelease(v5);
  v6 = *((_QWORD *)v22 + 2);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v21 + 2);
  swift_bridgeObjectRelease(v6);
  if (*((_QWORD *)v22 + 4) <= 5uLL)
  {
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
  }
  else if (*((_QWORD *)v21 + 4) <= 5uLL)
  {
    sub_1000090EC((uint64_t)(v22 + 24));
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
  }
  else
  {
    *((_QWORD *)v22 + 3) = *((_QWORD *)v21 + 3);
    v7 = *((_QWORD *)v22 + 4);
    *((_QWORD *)v22 + 4) = *((_QWORD *)v21 + 4);
    swift_bridgeObjectRelease(v7);
  }
  v8 = type metadata accessor for Mailbox(0);
  __dst = &v22[*(int *)(v8 + 28)];
  __src = &v21[*(int *)(v8 + 28)];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (((unsigned int (*)(char *, uint64_t))v20)(__dst, 1))
  {
    if (v20(__src, 1, v18))
    {
      v10 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, __src, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
  }
  else if (v20(__src, 1, v18))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(__dst, v18);
    v9 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 40))(__dst, __src, v18);
  }
  v11 = type metadata accessor for Snapshot(0);
  v14 = &v22[*(int *)(v11 + 20)];
  v15 = &v21[*(int *)(v11 + 20)];
  if (*(_QWORD *)v14 < 2uLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
  }
  else if (*(_QWORD *)v15 < 2uLL)
  {
    sub_10000A004(v14);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
  }
  else
  {
    v12 = *(_QWORD *)v14;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    swift_bridgeObjectRelease(v12);
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    v14[16] = v15[16];
    v14[17] = v15[17] & 1;
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_100037FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037FE4);
}

uint64_t sub_100037FE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v11;
  uint64_t v12;

  v11 = sub_100008AC0(&qword_10008B830);
  v12 = *(_QWORD *)(v11 - 8);
  if (a2 == *(_DWORD *)(v12 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v12 + 48))(a1, a2, v11);
  }
  else
  {
    v5 = type metadata accessor for Snapshot(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (a2 == *(_DWORD *)(v6 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    }
    else if (a2 == 0x7FFFFFFF)
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 24)) < (unint64_t)&_mh_execute_header)
        v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
      return (v4 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v7;
}

uint64_t sub_10003811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100038138);
}

uint64_t sub_100038138(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = sub_100008AC0(&qword_10008B830);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = type metadata accessor for Snapshot(0);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t sub_100038244(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  v6 = sub_100038340(319);
  v7 = v6;
  if (v1 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v6 - 8) + 64;
    v2 = type metadata accessor for Snapshot(319);
    v7 = v2;
    if (v3 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v2 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      return 0;
    }
  }
  return v7;
}

uint64_t sub_100038340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008B9A0;
  if (!qword_10008B9A0)
  {
    v1 = type metadata accessor for WidgetRenderingMode(255);
    v5 = type metadata accessor for Environment.Content(a1, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008B9A0);
      return v3;
    }
  }
  return v7;
}

void *type metadata accessor for MessageListHeader_Previews()
{
  return &unk_100083BD0;
}

unint64_t sub_1000383F8()
{
  return sub_100033374();
}

unint64_t sub_10003840C()
{
  return sub_1000317A8();
}

unint64_t sub_100038420()
{
  return sub_100038434();
}

unint64_t sub_100038434()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008B9D8;
  if (!qword_10008B9D8)
  {
    v0 = sub_100008DF0(&qword_10008B9E0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B9D8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000384A4()
{
  return sub_1000384B8();
}

unint64_t sub_1000384B8()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008B9E8;
  if (!qword_10008B9E8)
  {
    WitnessTable = swift_getWitnessTable(&unk_1000740F4, &unk_100083BD0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B9E8);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_100038524(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D370, 1);
}

uint64_t sub_100038548(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D308, 1);
}

void *sub_10003856C(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v6) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v6, 1);
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  return a2;
}

unint64_t sub_10003860C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008B9F8;
  if (!qword_10008B9F8)
  {
    v2 = sub_100008DF0(&qword_10008B868);
    sub_100038694();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008B9F8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100038694()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA00;
  if (!qword_10008BA00)
  {
    v0 = sub_100008DF0(&qword_10008B870);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA00);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100038704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  return a1;
}

unint64_t sub_10003878C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA08;
  if (!qword_10008BA08)
  {
    v2 = sub_100008DF0(&qword_10008B878);
    sub_10003860C();
    sub_100038818();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA08);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100038818()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA10;
  if (!qword_10008BA10)
  {
    v0 = sub_100008DF0(&qword_10008BA18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA10);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100038888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_100038944()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA20;
  if (!qword_10008BA20)
  {
    v2 = sub_100008DF0(&qword_10008B880);
    sub_10003878C();
    sub_1000389D0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA20);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000389D0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA28;
  if (!qword_10008BA28)
  {
    v0 = sub_100008DF0(&qword_10008BA30);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA28);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100038A40(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for SymbolRenderingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_100038AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B880);
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_100038BA0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA38;
  if (!qword_10008BA38)
  {
    v2 = sub_100008DF0(&qword_10008B888);
    sub_100038944();
    sub_100038C2C();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA38);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100038C2C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA40;
  if (!qword_10008BA40)
  {
    v0 = sub_100008DF0(&qword_10008B890);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA40);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100038C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B880);
  swift_release();
  swift_release();
  v6 = *(int *)(sub_100008AC0(&qword_10008B888) + 36);
  swift_release();
  v7 = *(int *)(sub_100008AC0(&qword_10008B890) + 28);
  v8 = type metadata accessor for SymbolRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v9 + 48))(a1 + v6 + v7, 1))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1 + v6 + v7, v8);
  return a1;
}

unint64_t sub_100038E3C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008BA48;
  if (!qword_10008BA48)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA48);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_100038EA4(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_100038EE8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

unint64_t sub_100038F28()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA58;
  if (!qword_10008BA58)
  {
    v2 = sub_100008DF0(&qword_10008BA50);
    sub_100038FB0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA58);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100038FB0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA60;
  if (!qword_10008BA60)
  {
    v0 = sub_100008DF0(&qword_10008BA68);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA60);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100039020(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  return a1;
}

unint64_t sub_100039070()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA78;
  if (!qword_10008BA78)
  {
    v2 = sub_100008DF0(&qword_10008BA70);
    sub_100038F28();
    sub_100038818();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA78);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_1000390FC(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_100039164(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_1000391B0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA80;
  if (!qword_10008BA80)
  {
    v2 = sub_100008DF0(&qword_10008B8A8);
    sub_10003923C();
    sub_100038C2C();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA80);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10003923C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BA88;
  if (!qword_10008BA88)
  {
    v2 = sub_100008DF0(&qword_10008B8B0);
    sub_100038944();
    sub_1000392C8();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA88);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000392C8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BA90;
  if (!qword_10008BA90)
  {
    v0 = sub_100008DF0(&qword_10008BA98);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BA90);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100039338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = sub_100008AC0(&qword_10008B8A8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1, 1))
  {
    swift_release();
    v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v4 = v3 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v1 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B8B0);
    swift_release();
    v5 = a1 + *(int *)(v10 + 36);
    swift_release();
    v6 = v5 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v7 = type metadata accessor for SymbolRenderingMode(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v6, 1))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return a1;
}

_QWORD *sub_100039508(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *__dst;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;

  v24 = sub_100008AC0(&qword_10008B8A8);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v25 + 48))(a1, 1))
  {
    v10 = sub_100008AC0(&qword_10008B8C8);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = sub_100008AC0(&qword_10008B868);
    v12 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v13 = (_QWORD *)((char *)a1 + *(int *)(v2 + 36));
    *v12 = *v13;
    v3 = sub_100008AC0(&qword_10008B870);
    v15 = (char *)v12 + *(int *)(v3 + 28);
    v14 = (char *)v13 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v15, v14);
    v5 = sub_100008AC0(&qword_10008B878);
    *(_OWORD *)((char *)a2 + *(int *)(v5 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v5 + 36));
    v6 = sub_100008AC0(&qword_10008B880);
    *(_OWORD *)((char *)a2 + *(int *)(v6 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v6 + 36));
    v7 = sub_100008AC0(&qword_10008B8B0);
    *(_QWORD *)((char *)a2 + *(int *)(v7 + 36)) = *(_QWORD *)((char *)a1 + *(int *)(v7 + 36));
    v16 = (_QWORD *)((char *)a2 + *(int *)(v24 + 36));
    v17 = (_QWORD *)((char *)a1 + *(int *)(v24 + 36));
    *v16 = *v17;
    v8 = sub_100008AC0(&qword_10008B890);
    __dst = (char *)v16 + *(int *)(v8 + 28);
    v19 = (char *)v17 + *(int *)(v8 + 28);
    v20 = type metadata accessor for SymbolRenderingMode(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(v19, 1))
    {
      v9 = sub_100008AC0(&qword_10008B8C0);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(a2, 0, 1, v24);
  }
  return a2;
}

unint64_t sub_10003979C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BAA0;
  if (!qword_10008BAA0)
  {
    v2 = sub_100008DF0(&qword_10008B9F0);
    sub_100039824();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BAA0);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100039824()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BAA8;
  if (!qword_10008BAA8)
  {
    v0 = sub_100008DF0(&qword_10008BAB0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BAA8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100039894(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100008AC0(&qword_10008B8B8);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void *sub_100039908(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100008AC0(&qword_10008B8B8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B8D0);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

char *sub_1000399C8(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)a1;
  swift_retain();
  *(_QWORD *)a2 = v5;
  v6 = *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  v7 = *(_QWORD *)&a1[v6];
  swift_retain();
  *(_QWORD *)&a2[v6] = v7;
  v8 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v2 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v6 + v8], &a1[v6 + v8]);
  v9 = *(int *)(sub_100008AC0(&qword_10008B878) + 36);
  v10 = *(_QWORD *)&a1[v9];
  swift_retain();
  *(_QWORD *)&a2[v9] = v10;
  v11 = *(_QWORD *)&a1[v9 + 8];
  swift_retain();
  *(_QWORD *)&a2[v9 + 8] = v11;
  v12 = *(int *)(sub_100008AC0(&qword_10008B880) + 36);
  v13 = *(_QWORD *)&a1[v12];
  swift_retain();
  *(_QWORD *)&a2[v12] = v13;
  v14 = *(_QWORD *)&a1[v12 + 8];
  swift_retain();
  *(_QWORD *)&a2[v12 + 8] = v14;
  v16 = *(int *)(sub_100008AC0(&qword_10008B888) + 36);
  v18 = *(_QWORD *)&a1[v16];
  swift_retain();
  *(_QWORD *)&a2[v16] = v18;
  v19 = *(int *)(sub_100008AC0(&qword_10008B890) + 28);
  v20 = type metadata accessor for SymbolRenderingMode(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(&a1[v16 + v19], 1))
  {
    v3 = sub_100008AC0(&qword_10008B8C0);
    memcpy(&a2[v16 + v19], &a1[v16 + v19], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v21 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(&a2[v16 + v19], 0, 1, v20);
  }
  return a2;
}

_QWORD *sub_100039CC0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;

  v36 = sub_100008AC0(&qword_10008B8A8);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v37 + 48))(a1, 1))
  {
    v9 = sub_100008AC0(&qword_10008B8C8);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v11 = *a1;
    swift_retain();
    *a2 = v11;
    v2 = sub_100008AC0(&qword_10008B868);
    v13 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v14 = (uint64_t *)((char *)a1 + *(int *)(v2 + 36));
    v12 = *v14;
    swift_retain();
    *v13 = v12;
    v3 = sub_100008AC0(&qword_10008B870);
    v16 = (char *)v13 + *(int *)(v3 + 28);
    v15 = (char *)v14 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v16, v15);
    v5 = sub_100008AC0(&qword_10008B878);
    v19 = (_QWORD *)((char *)a2 + *(int *)(v5 + 36));
    v18 = (uint64_t *)((char *)a1 + *(int *)(v5 + 36));
    v17 = *v18;
    swift_retain();
    *v19 = v17;
    v20 = v18[1];
    swift_retain();
    v19[1] = v20;
    v6 = sub_100008AC0(&qword_10008B880);
    v23 = (_QWORD *)((char *)a2 + *(int *)(v6 + 36));
    v22 = (uint64_t *)((char *)a1 + *(int *)(v6 + 36));
    v21 = *v22;
    swift_retain();
    *v23 = v21;
    v24 = v22[1];
    swift_retain();
    v23[1] = v24;
    v25 = *(int *)(sub_100008AC0(&qword_10008B8B0) + 36);
    v26 = *(uint64_t *)((char *)a1 + v25);
    swift_retain();
    *(_QWORD *)((char *)a2 + v25) = v26;
    v28 = (_QWORD *)((char *)a2 + *(int *)(v36 + 36));
    v29 = (uint64_t *)((char *)a1 + *(int *)(v36 + 36));
    v27 = *v29;
    swift_retain();
    *v28 = v27;
    v7 = sub_100008AC0(&qword_10008B890);
    v30 = (char *)v28 + *(int *)(v7 + 28);
    v31 = (char *)v29 + *(int *)(v7 + 28);
    v32 = type metadata accessor for SymbolRenderingMode(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v33 + 48))(v31, 1))
    {
      v8 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(a2, 0, 1, v36);
  }
  return a2;
}

void *sub_10003A010(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100008AC0(&qword_10008B8B8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008B8D0);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

unint64_t sub_10003A0D0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BAB8;
  if (!qword_10008BAB8)
  {
    v2 = sub_100008DF0(&qword_10008B8C8);
    sub_1000391B0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BAB8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10003A14C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008BAC0;
  if (!qword_10008BAC0)
  {
    v2 = sub_100008DF0(&qword_10008B8D0);
    v4[0] = sub_100008DF0(&qword_10008B9F0);
    v4[1] = sub_10003979C();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BAC0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003A200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B9F0) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008BAB0) + 28);
  v1 = type metadata accessor for ContentTransition(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  return a1;
}

unint64_t sub_10003A2A4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BAC8;
  if (!qword_10008BAC8)
  {
    v0 = type metadata accessor for PushTransition(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PushTransition, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BAC8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003A314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B880);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B8B0);
  swift_release();
  return a1;
}

uint64_t sub_10003A424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  swift_release();
  v4 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v1 = type metadata accessor for Image.Scale(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  sub_100008AC0(&qword_10008B878);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B880);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008B8B0);
  swift_release();
  v6 = *(int *)(sub_100008AC0(&qword_10008B8A8) + 36);
  swift_release();
  v7 = *(int *)(sub_100008AC0(&qword_10008B890) + 28);
  v8 = type metadata accessor for SymbolRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v9 + 48))(a1 + v6 + v7, 1))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1 + v6 + v7, v8);
  return a1;
}

char *sub_10003A5E4(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)a1;
  swift_retain();
  *(_QWORD *)a2 = v5;
  v6 = *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  v7 = *(_QWORD *)&a1[v6];
  swift_retain();
  *(_QWORD *)&a2[v6] = v7;
  v8 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v2 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v6 + v8], &a1[v6 + v8]);
  v9 = *(int *)(sub_100008AC0(&qword_10008B878) + 36);
  v10 = *(_QWORD *)&a1[v9];
  swift_retain();
  *(_QWORD *)&a2[v9] = v10;
  v11 = *(_QWORD *)&a1[v9 + 8];
  swift_retain();
  *(_QWORD *)&a2[v9 + 8] = v11;
  v12 = *(int *)(sub_100008AC0(&qword_10008B880) + 36);
  v13 = *(_QWORD *)&a1[v12];
  swift_retain();
  *(_QWORD *)&a2[v12] = v13;
  v14 = *(_QWORD *)&a1[v12 + 8];
  swift_retain();
  *(_QWORD *)&a2[v12 + 8] = v14;
  v15 = *(int *)(sub_100008AC0(&qword_10008B8B0) + 36);
  v16 = *(_QWORD *)&a1[v15];
  swift_retain();
  *(_QWORD *)&a2[v15] = v16;
  v18 = *(int *)(sub_100008AC0(&qword_10008B8A8) + 36);
  v20 = *(_QWORD *)&a1[v18];
  swift_retain();
  *(_QWORD *)&a2[v18] = v20;
  v21 = *(int *)(sub_100008AC0(&qword_10008B890) + 28);
  v22 = type metadata accessor for SymbolRenderingMode(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v23 + 48))(&a1[v18 + v21], 1))
  {
    v3 = sub_100008AC0(&qword_10008B8C0);
    memcpy(&a2[v18 + v21], &a1[v18 + v21], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v23 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(&a2[v18 + v21], 0, 1, v22);
  }
  return a2;
}

uint64_t sub_10003A918()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10003A938()
{
  return sub_10003A918();
}

uint64_t sub_10003A94C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  char *v6;

  v4[1] = a1;
  v1 = type metadata accessor for ContentTransition(0);
  v5 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v6 = (char *)v4 - v5;
  (*(void (**)(void))(v2 + 16))();
  return EnvironmentValues.contentTransition.setter(v6);
}

uint64_t sub_10003A9CC(uint64_t a1)
{
  return sub_10003A94C(a1);
}

uint64_t sub_10003A9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v11 = type metadata accessor for MessageListHeaderView(0);
  v1 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v12 = v13 + *(_QWORD *)(v1 + 64);
  v2 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(v0 + v13, v2) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(unint64_t))(*(_QWORD *)(v3 - 8) + 8))(v10 + v13);
  }
  else
  {
    swift_release();
  }
  v9 = (_QWORD *)(v10 + v13 + *(int *)(v11 + 20));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  if (v9[4] > 5uLL)
    swift_bridgeObjectRelease(v9[4]);
  v6 = (char *)v9 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(v6, 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v5 = (_QWORD *)((char *)v9 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v5 >= 2uLL)
    swift_bridgeObjectRelease(*v5);
  swift_release();
  return swift_deallocObject(v10, v12);
}

char *sub_10003ABEC(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  char *v7;
  char *v8;
  char *__dst;
  char *__src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v18;

  v18 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v18) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v18, 1);
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v13 = type metadata accessor for MessageListHeaderView(0);
  v14 = &a2[*(int *)(v13 + 20)];
  v15 = &a1[*(int *)(v13 + 20)];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  v3 = type metadata accessor for Mailbox(0);
  __dst = &v14[*(int *)(v3 + 28)];
  __src = &v15[*(int *)(v3 + 28)];
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(__dst, __src, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v5 = type metadata accessor for Snapshot(0);
  v7 = &v14[*(int *)(v5 + 20)];
  v8 = &v15[*(int *)(v5 + 20)];
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
  result = a2;
  *(_QWORD *)&a2[*(int *)(v13 + 24)] = *(_QWORD *)&a1[*(int *)(v13 + 24)];
  return result;
}

uint64_t sub_10003AE74@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MessageListHeaderView(0);
  return sub_100031588(a1);
}

unint64_t sub_10003AEB4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008BAD0;
  if (!qword_10008BAD0)
  {
    v0 = objc_opt_self(NSNumberFormatter);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008BAD0);
    return ObjCClassMetadata;
  }
  return v3;
}

uint64_t sub_10003AF18()
{
  return 1;
}

uint64_t sub_10003AF30()
{
  return PushTransition.init(edge:)();
}

uint64_t sub_10003AF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD v8[2];
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = a6;
  v8[1] = a1;
  v14 = a2;
  v10 = a3;
  v15 = a4;
  v11 = a5;
  v18 = a2;
  v17 = a3;
  v9 = (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(a1);
  v12 = (char *)v8 - v9;
  (*(void (**)(void))(v6 + 16))();
  v16 = AnyTransition.init<A>(_:)(v12, v10, v11);
  View.transition(_:)(v16, v14, v15);
  return swift_release(v16);
}

uint64_t sub_10003AFF4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sub_100008AC0(&qword_10008BAD8);
  v5 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8);
  v1 = (uint64_t *)((char *)&v4 - v5);
  v9 = (uint64_t)&v4 - v5;
  v2 = type metadata accessor for MessageListView(0);
  sub_10003B0F8((uint64_t *)(v6 + *(int *)(v2 + 20)), v1);
  Environment.wrappedValue.getter(v8);
  return sub_10003B1A8(v9);
}

uint64_t type metadata accessor for MessageListView(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008BC58;
  if (!qword_10008BC58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageListView);
  return v2;
}

_QWORD *sub_10003B0F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v7;

  v7 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v7) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v7, 1);
  }
  else
  {
    v4 = *a1;
    swift_retain();
    *a2 = v4;
    swift_storeEnumTagMultiPayload(a2, v7, 0);
  }
  return a2;
}

uint64_t sub_10003B1A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  return a1;
}

uint64_t sub_10003B220(double a1)
{
  double v2;
  _QWORD v3[3];

  *(double *)&v3[2] = a1;
  v2 = a1;
  State.init(wrappedValue:)(v3, &v2, &type metadata for CGFloat);
  return v3[1];
}

double sub_10003B260()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  double v8;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageListView(0) + 24));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = v8;
  swift_release();
  return v6;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10003B2F4(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
}

double sub_10003B31C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageListView(0) + 24));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.projectedValue.getter(v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = *(double *)&v8[2];
  swift_release();
  return v6;
}

uint64_t sub_10003B3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::Double v21;
  uint64_t v22;
  Swift::Double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  char v29;
  Swift::Double v30;
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  Swift::Double v42;
  Swift::Double v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  char *v114;
  char *v115;

  v63 = a1;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v111 = 0;
  v109 = 0;
  v110 = 0;
  v64 = sub_100008AC0(&qword_10008BAF0);
  v65 = (*(_QWORD *)(*(_QWORD *)(v64 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v64);
  v66 = (uint64_t)&v35 - v65;
  v67 = sub_100008AC0(&qword_10008BAF8);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v67);
  v70 = (char *)&v35 - v69;
  v71 = sub_100008AC0(&qword_10008BB00);
  v72 = (*(_QWORD *)(*(_QWORD *)(v71 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v71);
  v73 = (uint64_t)&v35 - v72;
  v74 = sub_100008AC0(&qword_10008BB08);
  v75 = (*(_QWORD *)(*(_QWORD *)(v74 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v74);
  v76 = (uint64_t)&v35 - v75;
  v77 = sub_100008AC0(&qword_10008BB10);
  v78 = (*(_QWORD *)(*(_QWORD *)(v77 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v77);
  v79 = (uint64_t)&v35 - v78;
  v80 = sub_100008AC0(&qword_10008BB18);
  v81 = (*(_QWORD *)(*(_QWORD *)(v80 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v80);
  v82 = (uint64_t)&v35 - v81;
  v83 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v35 - v81);
  v84 = (uint64_t)&v35 - v83;
  v85 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v35 - v83);
  v86 = (uint64_t)&v35 - v85;
  v115 = (char *)&v35 - v85;
  v87 = 0;
  v88 = *(_QWORD *)(type metadata accessor for MessageListView(0) - 8);
  v89 = *(_QWORD *)(v88 + 64);
  v90 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v87);
  v91 = (_QWORD **)((char *)&v35 - v90);
  v99 = type metadata accessor for Snapshot(v3);
  v92 = (*(_QWORD *)(*(_QWORD *)(v99 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v99);
  v100 = (_QWORD **)((char *)&v35 - v92);
  v94 = sub_100008AC0(&qword_10008BB20);
  v95 = (*(_QWORD *)(*(_QWORD *)(v94 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v93);
  v96 = (char *)&v35 - v95;
  v97 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v98 = (char *)&v35 - v97;
  v114 = (char *)&v35 - v97;
  v113 = v6;
  sub_10001BE1C(v6, v7);
  v8 = (char *)v100 + *(int *)(v99 + 20);
  v103 = *(_QWORD *)v8;
  v101 = *((_QWORD *)v8 + 1);
  v102 = *((unsigned __int16 *)v8 + 8);
  sub_10002BF3C(v103);
  sub_10001C610(v100);
  v104 = sub_100069C84(v103);
  if (v104)
  {
    v62 = v104;
    v61 = v104;
    v111 = v104;
    sub_100039164(v103);
    sub_10003ED94(v93, (uint64_t)v91);
    swift_bridgeObjectRetain(v61);
    v9 = *(unsigned __int8 *)(v88 + 80);
    v49 = (v9 + 16) & ~v9;
    v50 = (v49 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_100083CA8, v50 + 8, v9 | 7);
    sub_100040844((uint64_t)v91, v51 + v49);
    *(_QWORD *)(v51 + v50) = v61;
    v52 = sub_100008AC0(&qword_10008BBB0);
    v10 = sub_100040B2C();
    v11 = GeometryReader.init(content:)(sub_100040ACC, v51, v52, v10);
    v53 = v108;
    v108[0] = v11;
    v108[1] = v12;
    v57 = sub_100008AC0(&qword_10008BB90);
    v58 = sub_1000400B0();
    v60 = &v109;
    sub_100031764((uint64_t)v53, v57, (uint64_t)&v109);
    sub_10003B2F4((uint64_t)v53);
    v54 = v109;
    v55 = v110;
    swift_retain();
    v56 = v106;
    v106[0] = v54;
    v106[1] = v55;
    sub_100031764((uint64_t)v106, v57, (uint64_t)v107);
    sub_10003B2F4((uint64_t)v56);
    v59 = v105;
    v105[0] = v107[0];
    v105[1] = v107[1];
    v13 = sub_10003FE88();
    sub_1000323CC((uint64_t)v59, v57, v80, v58, v13, (uint64_t)v96);
    sub_10003B2F4((uint64_t)v59);
    sub_100040120(v96, v98);
    sub_10003B2F4((uint64_t)v60);
    swift_bridgeObjectRelease(v61);
  }
  else
  {
    sub_100039164(v103);
    sub_10003ED94(v93, (uint64_t)v91);
    v37 = &v35;
    __chkstk_darwin(&v35);
    v35 = v32;
    v33 = v14;
    v36 = sub_100008AC0(&qword_10008BB28);
    v15 = sub_10003F0C4();
    Group<A>.init(content:)(sub_10003F0BC, v35, v36, v15);
    sub_10003F1F4(v91);
    v38 = sub_10003F3A4();
    v16 = sub_10003AF18();
    v44 = 1;
    View.widgetAccentable(_:)(v16 & 1, v64, v38);
    v17 = sub_10003F420(v66);
    v39 = static Color.secondary.getter(v17);
    v112[0] = v64;
    v112[1] = v38;
    swift_getOpaqueTypeConformance2(v112, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    View.foregroundColor(_:)(v39, v67);
    swift_release();
    v18 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v70, v67);
    v40 = static Font.subheadline.getter(v18);
    sub_10003F4EC();
    View.font(_:)(v40, v71);
    swift_release();
    sub_10003F5B0(v73);
    v19 = sub_10003F624();
    v41 = 1;
    View.multilineTextAlignment(_:)(v44, v74, v19);
    v20 = sub_10003F6B0(v76);
    v21 = static Double.infinity.getter(v20);
    v43 = Double.init(_:)(v21);
    v23 = static Double.infinity.getter(v22);
    v42 = Double.init(_:)(v23);
    v45 = sub_10003FCC4();
    v24 = sub_10003FB18();
    v46 = &v28;
    v28 = 0;
    v29 = v41;
    v30 = v42;
    v31 = 0;
    v32[0] = v24;
    v32[1] = v25;
    v33 = v77;
    v34 = v45;
    View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, v44, 0, v44, *(_QWORD *)&v43, 0);
    sub_10003FDC0(v79);
    v48 = sub_10003FE88();
    sub_100031764(v84, v80, v86);
    sub_10003FDC0(v84);
    sub_10003FF10(v86, v82);
    sub_100031764(v82, v80, v84);
    sub_10003FDC0(v82);
    v47 = sub_100008AC0(&qword_10008BB90);
    v26 = sub_1000400B0();
    sub_100032490(v84, v47, v80, v26, v48, (uint64_t)v96);
    sub_10003FDC0(v84);
    sub_100040120(v96, v98);
    sub_10003FDC0(v86);
  }
  sub_100040274((uint64_t *)v98, v96);
  sub_10004047C();
  sub_100031764((uint64_t)v96, v94, v63);
  sub_100040508((uint64_t)v96);
  return sub_100040508((uint64_t)v98);
}

uint64_t sub_10003BEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v30 = a4;
  v20 = a1;
  v16 = a2;
  v29 = a3;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v21 = 0;
  v27 = type metadata accessor for GeometryProxy(0);
  v26 = *(_QWORD *)(v27 - 8);
  v14 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v28 = (char *)&v13 - v14;
  v5 = type metadata accessor for MessageListView(v4);
  v15 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v25 = (uint64_t *)((char *)&v13 - v15);
  v31 = sub_100008AC0(&qword_10008BBB0);
  v18 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
  v17 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v16);
  v33 = (uint64_t)&v13 - v17;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v34 = (uint64_t)&v13 - v19;
  v42 = (char *)&v13 - v19;
  v41 = v7;
  v40 = v8;
  v39 = v9;
  sub_10003ED94(v8, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v20, v27);
  swift_bridgeObjectRetain(v29);
  v22 = &v35;
  v36 = v25;
  v37 = v28;
  v38 = v29;
  v23 = sub_100008AC0(&qword_10008BCA0);
  v24 = sub_100043A40();
  v11 = sub_10003E658();
  VStack.init(alignment:spacing:content:)(v11, v21, 0, sub_100043A30, v22, v23, v24);
  sub_10003F1F4(v25);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v27);
  swift_bridgeObjectRelease(v29);
  v32 = sub_100040B2C();
  sub_100031764(v33, v31, v34);
  sub_100043BB8(v33);
  sub_100043C34(v34, v33);
  sub_100031764(v33, v31, v30);
  sub_100043BB8(v33);
  return sub_100043BB8(v34);
}

uint64_t sub_10003C144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  double v70;
  double v71;
  double v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  int v120;
  uint64_t v121;
  _QWORD v122[4];
  _QWORD v123[5];
  _QWORD v124[4];
  _QWORD v125[4];
  double v126;
  double v127;
  uint64_t v128;
  double v129;
  _QWORD v130[2];
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;

  v75 = a4;
  v109 = a1;
  v108 = a2;
  v106 = a3;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v129 = 0.0;
  v126 = 0.0;
  v104 = 0;
  v76 = type metadata accessor for PushTransition(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = (*(_QWORD *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v79 = (uint64_t)&v39 - v78;
  v80 = type metadata accessor for GeometryProxy(v4);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(_QWORD *)(v81 + 64);
  v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v104);
  v84 = (char *)&v39 - v83;
  v107 = type metadata accessor for MessageListView(v5);
  v85 = *(_QWORD *)(v107 - 8);
  v86 = *(_QWORD *)(v85 + 64);
  v87 = (v86 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v107);
  v88 = (uint64_t)&v39 - v87;
  v89 = sub_100008AC0(&qword_10008BCB8);
  v90 = *(_QWORD *)(v89 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v89);
  v92 = (char *)&v39 - v91;
  v93 = sub_100008AC0(&qword_10008BCA0);
  v94 = (*(_QWORD *)(*(_QWORD *)(v93 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v104);
  v95 = (uint64_t)&v39 - v94;
  v96 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v7);
  v97 = (uint64_t)&v39 - v96;
  v137 = (char *)&v39 - v96;
  v98 = type metadata accessor for FloatingPointRoundingRule(v8);
  v99 = *(_QWORD *)(v98 - 8);
  v100 = (*(_QWORD *)(v99 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v98);
  v101 = (char *)&v39 - v100;
  v102 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v39 - v100);
  v103 = (char *)&v39 - v102;
  v113 = sub_100008AC0(&qword_10008BAD8);
  v105 = (*(_QWORD *)(*(_QWORD *)(v113 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v104);
  v10 = (uint64_t *)((char *)&v39 - v105);
  v114 = (uint64_t)&v39 - v105;
  v118 = type metadata accessor for WidgetFamily(v11);
  v115 = *(_QWORD *)(v118 - 8);
  v111 = *(_QWORD *)(v115 + 64);
  v110 = (v111 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v109);
  v116 = (char *)&v39 - v110;
  v112 = (v111 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v12);
  v117 = (char *)&v39 - v112;
  v136 = v13;
  v135 = v14;
  v134 = v15;
  sub_10003B0F8((uint64_t *)(v13 + *(int *)(v16 + 20)), v10);
  Environment.wrappedValue.getter(v113);
  sub_10003B1A8(v114);
  (*(void (**)(char *, _QWORD, uint64_t))(v115 + 104))(v116, enum case for WidgetFamily.systemLarge(_:), v118);
  v17 = sub_100043CF8();
  v120 = == infix<A>(_:_:)(v117, v116, v118, v17, &protocol witness table for Int);
  v119 = *(void (**)(char *, uint64_t))(v115 + 8);
  v119(v116, v118);
  v119(v117, v118);
  if ((v120 & 1) != 0)
    v74 = 4;
  else
    v74 = 2;
  v67 = v74;
  v133 = v74;
  v61 = &v132;
  v132 = v74;
  v69 = sub_100007A7C();
  v68 = &type metadata for Int;
  v66 = sub_10003CF88((uint64_t)v61, (uint64_t)&type metadata for Int, v69) - 1.0;
  v18 = (uint64_t *)(v109 + *(int *)(v107 + 24));
  v62 = *v18;
  v64 = v18[1];
  swift_retain();
  swift_retain();
  v63 = v130;
  v130[0] = v62;
  v130[1] = v64;
  v19 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v131, v19);
  sub_10003B2F4((uint64_t)v63);
  v65 = v131;
  v20 = swift_release();
  v70 = v66 * v65;
  v129 = v66 * v65;
  GeometryProxy.size.getter(v20);
  v71 = v21 - v70;
  v128 = v67;
  v22 = sub_10003CF88((uint64_t)&v128, (uint64_t)v68, v69);
  v72 = v71 / v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v103, enum case for FloatingPointRoundingRule.down(_:), v98);
  v127 = v72;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v101, v103, v98);
  result = (*(uint64_t (**)(char *, uint64_t))(v99 + 88))(v101, v98);
  v73 = result;
  if ((_DWORD)result == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v127 = round(v72);
    goto LABEL_18;
  }
  if (v73 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v127 = rint(v72);
    goto LABEL_18;
  }
  if (v73 == enum case for FloatingPointRoundingRule.up(_:))
    goto LABEL_16;
  if (v73 == enum case for FloatingPointRoundingRule.down(_:))
  {
LABEL_17:
    v127 = floor(v72);
    goto LABEL_18;
  }
  if (v73 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    v127 = trunc(v72);
    goto LABEL_18;
  }
  if (v73 != enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    Double._roundSlowPath(_:)(v103);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
LABEL_18:
    v48 = v127;
    (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v98);
    v126 = v48;
    swift_bridgeObjectRetain(v106);
    v123[4] = v106;
    v39 = sub_100008AC0(&qword_10008B0F0);
    v24 = sub_100012AB0();
    Collection.prefix(_:)(v124, v67, v39, v24);
    v41 = v123;
    v123[0] = v124[0];
    v123[1] = v124[1];
    v123[2] = v124[2];
    v123[3] = v124[3];
    v40 = sub_100008AC0(&qword_10008BCE0);
    v25 = sub_100043D68();
    Sequence.enumerated()(v125, v40, v25);
    sub_100043DD8(v41);
    v44 = v122;
    v122[0] = v125[0];
    v122[1] = v125[1];
    v122[2] = v125[2];
    v122[3] = v125[3];
    v42 = sub_100008AC0(&qword_10008BCF0);
    v43 = sub_100008AC0(&qword_10008BCF8);
    v26 = sub_100043E00();
    v27 = Array.init<A>(_:)(v44, v42, v43, v26);
    v57 = &v121;
    v121 = v27;
    KeyPath = swift_getKeyPath(&unk_100074368);
    sub_10003ED94(v109, v88);
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v84, v108, v80);
    v28 = *(unsigned __int8 *)(v85 + 80);
    v45 = (v28 + 16) & ~v28;
    v50 = 7;
    v29 = *(unsigned __int8 *)(v81 + 80);
    v46 = (v45 + v86 + v29) & ~v29;
    v47 = (v46 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_100083CD0, v49 + 8, v28 | 7 | v29 | 7);
    v30 = sub_100040844(v88, v51 + v45);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v81 + 32))(v51 + v46, v84, v80, v30);
    v31 = v49;
    v32 = v67;
    v33 = v50;
    v34 = v51;
    *(double *)(v51 + v47) = v48;
    *(_QWORD *)(v34 + v31) = v32;
    v35 = swift_allocObject(&unk_100083CF8, 32, v33);
    v36 = v51;
    v53 = v35;
    *(_QWORD *)(v35 + 16) = sub_100044118;
    *(_QWORD *)(v35 + 24) = v36;
    v54 = sub_100008AC0(&qword_10008BD08);
    v55 = sub_100008AC0(&qword_10008BCC8);
    v56 = sub_100044218();
    v37 = sub_100043B48();
    ForEach<>.init(_:id:content:)(v57, KeyPath, sub_10004420C, v53, v54, v55, v56, &protocol witness table for String, v37);
    sub_10003AF30();
    v58 = sub_100043ACC();
    v38 = sub_10003A2A4();
    sub_10003AF44(v79, v89, v76, v58, v38, v95);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v76);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
    v59 = sub_100043A40();
    sub_100031764(v95, v93, v97);
    sub_100044288(v95);
    sub_1000442E8(v97, v95);
    sub_100031764(v95, v93, v75);
    sub_100044288(v95);
    return sub_100044288(v97);
  }
  v60 = *(_QWORD *)&v72 >> 63;
  if (v72 >= 0.0)
  {
LABEL_16:
    v127 = ceil(v72);
    goto LABEL_18;
  }
  if (v60 == 1)
    goto LABEL_17;
  __break(1u);
  return result;
}

double sub_10003CF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v12 = a1;
  v17 = a2;
  v16 = a3;
  v18[1] = a2;
  v13 = *(_QWORD *)(a2 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(a3);
  v15 = (char *)&v6 - v14;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v14);
  if (dispatch thunk of BinaryInteger.bitWidth.getter(v17, v16) > 64)
  {
    v8 = sub_100044FDC();
    v4 = sub_100045044();
    static BinaryFloatingPoint<>._convert<A>(from:)(v18, v15, &type metadata for Double, v17, v8, v16, v4);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v17);
    v11 = *(double *)v18;
  }
  else if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v9 = dispatch thunk of BinaryInteger._lowWord.getter(v17, v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v17);
    v11 = (double)v9;
  }
  else
  {
    v10 = dispatch thunk of BinaryInteger._lowWord.getter(v17, v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v17);
    v11 = (double)v10;
  }
  v7 = v11;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v17);
  return v7;
}

uint64_t sub_10003D138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  unsigned int v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  int v102;
  _QWORD v103[2];
  _QWORD v104[2];
  _QWORD v105[3];
  _QWORD v106[2];
  _QWORD v107[2];
  _QWORD v108[2];
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;

  v51 = a6;
  v79 = a1;
  v80 = a2;
  v93 = a3;
  v81 = a4;
  v82 = a7;
  v83 = a5;
  v117 = 0;
  v116 = 0;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0.0;
  v109 = 0;
  v84 = 0;
  v52 = type metadata accessor for Divider(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v52);
  v55 = (char *)&v32 - v54;
  v56 = sub_100008AC0(&qword_10008BD18);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v56);
  v59 = (char *)&v32 - v58;
  v60 = sub_100008AC0(&qword_10008BD20);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = (*(_QWORD *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v60);
  v63 = (uint64_t)&v32 - v62;
  v64 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v32 - v62);
  v65 = (uint64_t)&v32 - v64;
  v117 = (char *)&v32 - v64;
  v66 = sub_100008AC0(&qword_10008BD28);
  v67 = (*(_QWORD *)(*(_QWORD *)(v66 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v66);
  v68 = (char *)&v32 - v67;
  v69 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v32 - v67);
  v70 = (char *)&v32 - v69;
  v71 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v32 - v69);
  v72 = (char *)&v32 - v71;
  v116 = (char *)&v32 - v71;
  v95 = sub_100008AC0(&qword_10008BAD8);
  v73 = (*(_QWORD *)(*(_QWORD *)(v95 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v84);
  v10 = (uint64_t *)((char *)&v32 - v73);
  v96 = (uint64_t)&v32 - v73;
  v100 = type metadata accessor for WidgetFamily(v11);
  v97 = *(_QWORD *)(v100 - 8);
  v74 = (*(_QWORD *)(v97 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v100);
  v98 = (char *)&v32 - v74;
  v75 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v32 - v74);
  v99 = (char *)&v32 - v75;
  v76 = sub_100008AC0(&qword_10008BBC8);
  v77 = (*(_QWORD *)(*(_QWORD *)(v76 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v32 - v77;
  v85 = sub_100008AC0(&qword_10008BD30);
  v89 = *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64);
  v86 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v84);
  v87 = (uint64_t *)((char *)&v32 - v86);
  v88 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v13);
  v90 = (uint64_t)&v32 - v88;
  v91 = (v89 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = __chkstk_darwin(v14);
  v92 = (uint64_t *)((char *)&v32 - v91);
  v115 = (char *)&v32 - v91;
  v114 = v16;
  v113 = v17;
  v112 = v18;
  v111 = v19;
  v110 = v15;
  v109 = v20;
  v94 = type metadata accessor for MessageListView(v21);
  sub_10003B0F8((uint64_t *)(v93 + *(int *)(v94 + 20)), v10);
  Environment.wrappedValue.getter(v95);
  sub_10003B1A8(v96);
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v98, enum case for WidgetFamily.systemLarge(_:), v100);
  v22 = sub_100043CF8();
  v102 = == infix<A>(_:_:)(v99, v98, v100, v22, &protocol witness table for Int);
  v101 = *(void (**)(char *, uint64_t))(v97 + 8);
  v101(v98, v100);
  v101(v99, v100);
  v50 = (v102 & 1) != 0;
  v23 = sub_10003DCB8(v80, v50, v78);
  v46 = GeometryProxy.size.getter(v23);
  v47 = sub_100041D50();
  v24 = sub_10003FB18();
  View.frame(width:height:alignment:)(*(_QWORD *)&v46, 0, *(_QWORD *)&v82, 0, v24, v25, v76, v47);
  sub_100041DDC(v78);
  v48 = sub_100044368();
  sub_100031764(v90, v85, (uint64_t)v92);
  result = sub_100041DDC(v90);
  v49 = v83 - 1;
  if (__OFSUB__(v83, 1))
  {
    __break(1u);
  }
  else
  {
    if (v79 >= v49)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v68, 1, 1, v60);
      sub_1000443F0();
      sub_100055058(v68, v60, v70);
      sub_100044594((uint64_t)v68);
      sub_100044638(v70, v72);
    }
    else
    {
      Divider.init()(result);
      v39 = sub_1000444B4();
      v28 = sub_10003AF18();
      v44 = 1;
      View.widgetAccentable(_:)(v28 & 1, v52, v39);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v52);
      KeyPath = swift_getKeyPath(&unk_100074390);
      v29 = (uint64_t *)(v93 + *(int *)(v94 + 24));
      v36 = *v29;
      v38 = v29[1];
      swift_retain();
      swift_retain();
      v37 = v104;
      v104[0] = v36;
      v104[1] = v38;
      v30 = sub_100008AC0(&qword_10008BAE8);
      State.projectedValue.getter(v105, v30);
      sub_10003B2F4((uint64_t)v37);
      v41 = v105[0];
      v42 = v105[1];
      v40 = *(double *)&v105[2];
      swift_release();
      v103[0] = v52;
      v103[1] = v39;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v103, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      sub_10006C790(KeyPath, v41, v42, v56, OpaqueTypeConformance2, v40);
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
      v45 = sub_1000443F0();
      sub_100031764(v63, v60, v65);
      sub_100044E8C(v63);
      sub_100044F00(v65, v63);
      sub_100031764(v63, v60, (uint64_t)v68);
      sub_100044E8C(v63);
      (*(void (**)(char *, _QWORD, _QWORD, uint64_t))(v61 + 56))(v68, 0, v44, v60);
      sub_100055058(v68, v60, v70);
      sub_100044594((uint64_t)v68);
      sub_100044638(v70, v72);
      sub_100044E8C(v65);
    }
    sub_10004472C(v92, v87);
    v35 = v108;
    v108[0] = v87;
    sub_100044CC0(v72, v70);
    v108[1] = v70;
    v33 = v107;
    v107[0] = v85;
    v107[1] = v66;
    v34 = v106;
    v106[0] = v48;
    v106[1] = sub_100044E10();
    sub_10003571C((uint64_t)v35, 2uLL, (uint64_t)v33, v51);
    sub_100044594((uint64_t)v70);
    sub_100041DDC((uint64_t)v87);
    sub_100044594((uint64_t)v72);
    return sub_100041DDC((uint64_t)v92);
  }
  return result;
}

uint64_t sub_10003DCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22[2];
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;

  v28 = a3;
  v72 = a1;
  v69 = a2;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  v29 = sub_100008AC0(&qword_10008BBC0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v29);
  v32 = (uint64_t)v22 - v31;
  v33 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v22 - v31);
  v34 = (uint64_t)v22 - v33;
  v35 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v22 - v33);
  v36 = (uint64_t)v22 - v35;
  v84 = (char *)v22 - v35;
  v6 = sub_100008AC0(&qword_10008B6D0);
  v37 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v76 = (char *)v22 - v37;
  v63 = 0;
  v75 = type metadata accessor for URL(0);
  v73 = *(_QWORD *)(v75 - 8);
  v38 = (*(_QWORD *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v75);
  v39 = (char *)v22 - v38;
  v40 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v22 - v38);
  v41 = (char *)v22 - v40;
  v83 = (char *)v22 - v40;
  v42 = sub_100008AC0(&qword_10008BBC8);
  v43 = (*(_QWORD *)(*(_QWORD *)(v42 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v42);
  v44 = (char *)v22 - v43;
  v45 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v22 - v43);
  v46 = (char *)v22 - v45;
  v82 = (char *)v22 - v45;
  v47 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v67 = (uint64_t)v22 - v47;
  v48 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(v9) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v62 = (uint64_t *)((char *)v22 - v48);
  v49 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v10) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v61 = (uint64_t *)((char *)v22 - v49);
  v71 = type metadata accessor for Message(v11);
  v50 = (*(_QWORD *)(*(_QWORD *)(v71 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v68 = (char *)v22 - v50;
  v51 = type metadata accessor for MessageView(v12);
  v57 = *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64);
  v52 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v72);
  v53 = (uint64_t *)((char *)v22 - v52);
  v54 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v13);
  v55 = (uint64_t)v22 - v54;
  v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v14);
  v58 = (uint64_t *)((char *)v22 - v56);
  v59 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v15);
  v66 = (uint64_t *)((char *)v22 - v59);
  v81 = (char *)v22 - v59;
  v80 = v16;
  v79 = v17;
  v78 = v3;
  sub_100012B90(v16, v18);
  sub_10001BE1C(v60, (uint64_t)v61);
  sub_10000D0CC((uint64_t)v61, (uint64_t)v62);
  sub_10001C610(v61);
  v65 = v62[3];
  v64 = v62[4];
  sub_10001335C(v65, v64);
  sub_1000133D4(v62);
  v70 = sub_100016F6C(v65, v64, v63, 4uLL);
  sub_100013398(v65, v64);
  sub_1000550A0();
  v74 = 1;
  sub_1000550D0(v67, v68, v69, v70 & 1, (uint64_t)v66);
  sub_1000182E8((const void *)(v72 + *(int *)(v71 + 52)), v76);
  if ((*(unsigned int (**)(char *, _QWORD, uint64_t))(v73 + 48))(v76, v74, v75) == 1)
  {
    sub_100015F94((uint64_t)v76);
    v77 = v58;
    v22[0] = sub_100040B9C();
    sub_100031764((uint64_t)v66, v51, (uint64_t)v58);
    sub_100040C0C(v58, v53);
    sub_100031764((uint64_t)v53, v51, v55);
    sub_1000410F4((uint64_t)v53);
    v20 = sub_100041340();
    sub_100032490(v55, v29, v51, v20, v22[0], (uint64_t)v44);
    sub_1000410F4(v55);
    sub_1000413B0(v44, v46);
    sub_1000410F4((uint64_t)v58);
  }
  else
  {
    v22[1] = 32;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v41, v76, v75);
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v39, v41, v75);
    sub_100040C0C(v66, v58);
    v24 = v22;
    __chkstk_darwin(v22);
    v23 = &v22[-4];
    v22[-2] = v19;
    v26 = sub_100040B9C();
    Link.init(destination:label:)(v39, sub_100042078, v23, v51);
    sub_1000410F4((uint64_t)v58);
    v25 = sub_100041340();
    sub_100031764(v34, v29, v36);
    v27 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v27(v34, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v36, v29);
    sub_100031764(v32, v29, v34);
    v27(v32, v29);
    sub_1000323CC(v34, v29, v51, v25, v26, (uint64_t)v44);
    v27(v34, v29);
    sub_1000413B0(v44, v46);
    v27(v36, v29);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v75);
  }
  sub_1000417F0(v46, v44);
  sub_100041D50();
  sub_100031764((uint64_t)v44, v42, v28);
  sub_100041DDC((uint64_t)v44);
  sub_100041DDC((uint64_t)v46);
  return sub_1000410F4((uint64_t)v66);
}

uint64_t sub_10003E5F4(char *a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t v2;
  uint64_t v6;

  v6 = *(_QWORD *)a1;
  v2 = sub_100008AC0(&qword_10008BCF0);
  return a2(v6, &a1[*(int *)(v2 + 48)]);
}

uint64_t sub_10003E658()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t sub_10003E678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int128 *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  _QWORD v74[2];
  char v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  _QWORD v80[2];
  char v81;
  uint64_t v82;
  __int128 v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[2];
  __int128 v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;

  v49 = a2;
  v50 = a1;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v94 = 0u;
  v95 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v51 = type metadata accessor for RedactionReasons(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v51);
  v54 = (char *)&v15 - v53;
  v55 = sub_100008AC0(&qword_10008BB58);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v55);
  v58 = (uint64_t)&v15 - v57;
  v59 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v15 - v57);
  v60 = (uint64_t)&v15 - v59;
  v61 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v15 - v59);
  v62 = (uint64_t)&v15 - v61;
  v98 = (char *)&v15 - v61;
  v63 = sub_100008AC0(&qword_10008BB28);
  v64 = (*(_QWORD *)(*(_QWORD *)(v63 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v63);
  v65 = (char *)&v15 - v64;
  v66 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v15 - v64);
  v67 = (char *)&v15 - v66;
  v68 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v15 - v66);
  v69 = (char *)&v15 - v68;
  v97 = (char *)&v15 - v68;
  v96 = a1;
  *(_QWORD *)&v70 = sub_10003F758();
  *((_QWORD *)&v70 + 1) = v7;
  v71 = v8;
  v72 = v9;
  if (v9)
  {
    v46 = v70;
    v47 = v71;
    v48 = v72;
    v39 = v72;
    v37 = v71;
    v36 = *((_QWORD *)&v70 + 1);
    v38 = v70;
    v88 = v70;
    v33 = 1;
    LOBYTE(v89) = v71 & 1;
    *((_QWORD *)&v89 + 1) = v72;
    v83 = v70;
    v84 = v71 & 1;
    v85 = v72;
    v35 = &v86;
    v30 = &type metadata for Text;
    v31 = &protocol witness table for Text;
    sub_100031764((uint64_t)&v83, (uint64_t)&type metadata for Text, (uint64_t)&v86);
    v26 = v86;
    v27 = v87;
    v28 = *((_QWORD *)&v87 + 1);
    sub_100045354(v86, *((uint64_t *)&v86 + 1), v87 & 1);
    swift_bridgeObjectRetain(v28);
    v29 = &v77;
    v77 = v26;
    v78 = v27 & 1 & v33;
    v79 = v28;
    sub_100031764((uint64_t)&v77, (uint64_t)v30, (uint64_t)v80);
    sub_100038EA4((uint64_t)v29);
    v32 = v74;
    v74[0] = v80[0];
    v74[1] = v80[1];
    v75 = v81 & 1 & v33;
    v76 = v82;
    v73[0] = v30;
    v73[1] = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v73, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_1000323CC((uint64_t)v32, (uint64_t)v30, v55, (uint64_t)v31, OpaqueTypeConformance2, (uint64_t)v65);
    sub_100038EA4((uint64_t)v32);
    v34 = sub_100008AC0(&qword_10008BB40);
    (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v34 - 8) + 56))(v65, 0, v33);
    sub_10003F140();
    sub_100055058(v65, v34, v67);
    sub_10003F420((uint64_t)v65);
    sub_1000450AC(v67, v69);
    sub_100038EA4((uint64_t)v35);
    sub_100038EE8(v38, v36, v37 & 1);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    *(_QWORD *)&v43 = sub_10003F938();
    *((_QWORD *)&v43 + 1) = v10;
    v44 = v11;
    v45 = v12;
    if (v12)
    {
      v40 = v43;
      v41 = v44;
      v42 = v45;
      v24 = v45;
      v23 = v44;
      v22 = v43;
      v94 = v43;
      v19 = 1;
      LOBYTE(v95) = v44 & 1;
      *((_QWORD *)&v95 + 1) = v45;
      v91 = v43;
      v92 = v44 & 1;
      v93 = v45;
      static RedactionReasons.placeholder.getter();
      v16 = &type metadata for Text;
      v17 = &protocol witness table for Text;
      View.redacted(reason:)(v54);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
      v90[0] = v16;
      v90[1] = v17;
      v18 = swift_getOpaqueTypeConformance2(v90, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
      sub_100031764(v60, v55, v62);
      v21 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v21(v60, v55);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v58, v62, v55);
      sub_100031764(v58, v55, v60);
      v21(v58, v55);
      sub_100032490(v60, (uint64_t)v16, v55, (uint64_t)v17, v18, (uint64_t)v65);
      v21(v60, v55);
      v20 = sub_100008AC0(&qword_10008BB40);
      (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v20 - 8) + 56))(v65, 0, v19);
      sub_10003F140();
      sub_100055058(v65, v20, v67);
      sub_10003F420((uint64_t)v65);
      sub_1000450AC(v67, v69);
      v21(v62, v55);
      sub_100038EE8(v22, *((uint64_t *)&v22 + 1), v23 & 1);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v25 = sub_100008AC0(&qword_10008BB40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v65, 1);
      sub_10003F140();
      sub_100055058(v65, v25, v67);
      sub_10003F420((uint64_t)v65);
      sub_1000450AC(v67, v69);
    }
  }
  sub_1000451D4((uint64_t *)v69, v67);
  sub_10003F0C4();
  sub_100031764((uint64_t)v67, v63, v49);
  sub_10003F420((uint64_t)v67);
  return sub_10003F420((uint64_t)v69);
}

uint64_t sub_10003ED94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v23);
  *(_QWORD *)(a2 + 8) = v23;
  v26 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v26);
  *(_QWORD *)(a2 + 16) = v26;
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(a2 + 32) = v22;
  }
  v2 = type metadata accessor for Mailbox(0);
  v18 = (void *)(a2 + *(int *)(v2 + 28));
  v19 = (const void *)(a1 + *(int *)(v2 + 28));
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v21 + 48))(v19, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v4 = type metadata accessor for Snapshot(0);
  v16 = a2 + *(int *)(v4 + 20);
  v17 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  if ((unint64_t)*v17 < 2)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
  }
  else
  {
    v15 = *v17;
    swift_bridgeObjectRetain(*v17);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v17[1];
    *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
    *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
  }
  v11 = type metadata accessor for MessageListView(0);
  v12 = (_QWORD *)(a2 + *(int *)(v11 + 20));
  v13 = (uint64_t *)(a1 + *(int *)(v11 + 20));
  v14 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(v12, v13);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    v10 = *v13;
    swift_retain();
    *v12 = v10;
    swift_storeEnumTagMultiPayload(v12, v14, 0);
  }
  v8 = (_QWORD *)(a2 + *(int *)(v11 + 24));
  v6 = (_QWORD *)(a1 + *(int *)(v11 + 24));
  *v8 = *v6;
  v9 = v6[1];
  swift_retain();
  result = a2;
  v8[1] = v9;
  return result;
}

uint64_t sub_10003F0BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003E678(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10003F0C4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BB30;
  if (!qword_10008BB30)
  {
    v2 = sub_100008DF0(&qword_10008BB28);
    sub_10003F140();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB30);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10003F140()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008BB38;
  if (!qword_10008BB38)
  {
    v2 = sub_100008DF0(&qword_10008BB40);
    v4[0] = &type metadata for Text;
    v4[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB38);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_10003F1F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v6 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(v6, 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v5 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v5 >= 2uLL)
    swift_bridgeObjectRelease(*v5);
  v4 = (char *)a1 + *(int *)(type metadata accessor for MessageListView(0) + 20);
  v1 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v4, v1) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return a1;
}

unint64_t sub_10003F3A4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BB48;
  if (!qword_10008BB48)
  {
    v2 = sub_100008DF0(&qword_10008BAF0);
    sub_10003F0C4();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB48);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003F420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100008AC0(&qword_10008BB40);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008BB50);
    if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
    {
      v3 = sub_100008AC0(&qword_10008BB58);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
    }
    else
    {
      sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
    }
  }
  return a1;
}

unint64_t sub_10003F4EC()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008BB60;
  if (!qword_10008BB60)
  {
    v2 = sub_100008DF0(&qword_10008BB00);
    v4[0] = sub_100008DF0(&qword_10008BAF0);
    v4[1] = sub_10003F3A4();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_1000389D0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB60);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003F5B0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BAF8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008BB00);
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_10003F624()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BB68;
  if (!qword_10008BB68)
  {
    v2 = sub_100008DF0(&qword_10008BB08);
    sub_10003F4EC();
    sub_100038818();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB68);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003F6B0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BAF8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008BB00);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008BB08);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10003F758()
{
  char *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v12 = "Placeholder when the selected mailbox is empty";
  v28 = 0;
  v15 = type metadata accessor for Snapshot(0);
  v14 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (uint64_t *)((char *)&v7 - v14);
  v28 = __chkstk_darwin(v13);
  sub_10001BE1C(v28, (uint64_t)&v7 - v14);
  v0 = (char *)v16 + *(int *)(v15 + 20);
  v19 = *(_QWORD *)v0;
  v17 = *((_QWORD *)v0 + 1);
  v18 = *((unsigned __int16 *)v0 + 8);
  sub_10002BF3C(v19);
  sub_10001C610(v16);
  v20 = sub_100069D18(v19, v17, v18);
  sub_100039164(v19);
  if (v20)
  {
    v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_MESSAGES", 0xBuLL, 1);
    v2 = LocalizedStringKey.init(stringLiteral:)(v1._countAndFlagsBits, v1._object);
    v25 = v12;
    v26 = 46;
    v27 = 2;
    v21 = Text.init(_:tableName:bundle:comment:)(v2);
    v22 = v3;
    v23 = v4;
    v24 = v5;
    v8 = v21;
    v9 = v3;
    v10 = v4 & 1;
    v11 = v5;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  return v8;
}

uint64_t sub_10003F938()
{
  char *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v12 = "Placeholder when widget failed to load messages";
  v28 = 0;
  v15 = type metadata accessor for Snapshot(0);
  v14 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (uint64_t *)((char *)&v7 - v14);
  v28 = __chkstk_darwin(v13);
  sub_10001BE1C(v28, (uint64_t)&v7 - v14);
  v0 = (char *)v16 + *(int *)(v15 + 20);
  v19 = *(_QWORD *)v0;
  v17 = *((_QWORD *)v0 + 1);
  v18 = *((unsigned __int16 *)v0 + 8);
  sub_10002BF3C(v19);
  sub_10001C610(v16);
  v20 = sub_100069D5C(v19, v17, v18);
  sub_100039164(v19);
  if (v20)
  {
    v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MESSAGE_ERROR", 0xDuLL, 1);
    v2 = LocalizedStringKey.init(stringLiteral:)(v1._countAndFlagsBits, v1._object);
    v25 = v12;
    v26 = 47;
    v27 = 2;
    v21 = Text.init(_:tableName:bundle:comment:)(v2);
    v22 = v3;
    v23 = v4;
    v24 = v5;
    v8 = v21;
    v9 = v3;
    v10 = v4 & 1;
    v11 = v5;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  return v8;
}

uint64_t sub_10003FB18()
{
  return static Alignment.center.getter();
}

uint64_t sub_10003FB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;

  v9 = a2;
  v8 = a1;
  v15 = 0;
  v14 = 0;
  v10 = type metadata accessor for MessageView(0);
  v6 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(v8);
  v12 = (unint64_t *)((char *)&v6 - v6);
  v7 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v2);
  v13 = (unint64_t *)((char *)&v6 - v7);
  v15 = (char *)&v6 - v7;
  v14 = v4;
  v11 = sub_100040B9C();
  sub_100031764(v8, v10, (uint64_t)v13);
  sub_100040C0C(v13, v12);
  sub_100031764((uint64_t)v12, v10, v9);
  sub_1000410F4((uint64_t)v12);
  return sub_1000410F4((uint64_t)v13);
}

uint64_t sub_10003FC30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001C04C(a1, a2);
  v6 = type metadata accessor for MessageListView(0);
  KeyPath = swift_getKeyPath(&unk_100074338);
  Environment.init(_:)(KeyPath);
  v7 = *(int *)(v6 + 24);
  result = sub_10003B220(0.0);
  v4 = (_QWORD *)(a2 + v7);
  *v4 = v5;
  v4[1] = result;
  return result;
}

uint64_t sub_10003FCB0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B3C8(a1);
}

unint64_t sub_10003FCC4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BB70;
  if (!qword_10008BB70)
  {
    v2 = sub_100008DF0(&qword_10008BB10);
    sub_10003F624();
    sub_10003FD50();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB70);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10003FD50()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BB78;
  if (!qword_10008BB78)
  {
    v0 = sub_100008DF0(&qword_10008BB80);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB78);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003FDC0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BAF8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008BB00);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008BB08);
  swift_release();
  swift_release();
  sub_100008AC0(&qword_10008BB10);
  swift_release();
  return a1;
}

unint64_t sub_10003FE88()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BB88;
  if (!qword_10008BB88)
  {
    v2 = sub_100008DF0(&qword_10008BB18);
    sub_10003FCC4();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB88);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10003FF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_100008AC0(&qword_10008BAF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(sub_100008AC0(&qword_10008BB00) + 36);
  v7 = *(_QWORD *)(a1 + v6);
  swift_retain();
  *(_QWORD *)(a2 + v6) = v7;
  v8 = *(_QWORD *)(a1 + v6 + 8);
  swift_retain();
  *(_QWORD *)(a2 + v6 + 8) = v8;
  v9 = *(int *)(sub_100008AC0(&qword_10008BB08) + 36);
  v10 = *(_QWORD *)(a1 + v9);
  swift_retain();
  *(_QWORD *)(a2 + v9) = v10;
  v11 = *(_QWORD *)(a1 + v9 + 8);
  swift_retain();
  *(_QWORD *)(a2 + v9 + 8) = v11;
  v12 = *(int *)(sub_100008AC0(&qword_10008BB10) + 36);
  v13 = *(_QWORD *)(a1 + v12);
  swift_retain();
  v3 = a2 + v12;
  *(_QWORD *)v3 = v13;
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(a1 + v12 + 8);
  v4 = sub_100008AC0(&qword_10008BB18);
  memcpy((void *)(a2 + *(int *)(v4 + 36)), (const void *)(a1 + *(int *)(v4 + 36)), 0x70uLL);
  return a2;
}

unint64_t sub_1000400B0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BB98;
  if (!qword_10008BB98)
  {
    v0 = sub_100008DF0(&qword_10008BB90);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BB98);
    return WitnessTable;
  }
  return v3;
}

char *sub_100040120(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v12;

  v12 = sub_100008AC0(&qword_10008BBA0);
  if (swift_getEnumCaseMultiPayload(a1, v12) == 1)
  {
    v2 = sub_100008AC0(&qword_10008BAF8);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    v3 = sub_100008AC0(&qword_10008BB00);
    *(_OWORD *)&a2[*(int *)(v3 + 36)] = *(_OWORD *)&a1[*(int *)(v3 + 36)];
    v4 = sub_100008AC0(&qword_10008BB08);
    *(_OWORD *)&a2[*(int *)(v4 + 36)] = *(_OWORD *)&a1[*(int *)(v4 + 36)];
    v5 = sub_100008AC0(&qword_10008BB10);
    v6 = &a2[*(int *)(v5 + 36)];
    v7 = &a1[*(int *)(v5 + 36)];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[8] = v7[8];
    v8 = sub_100008AC0(&qword_10008BB18);
    memcpy(&a2[*(int *)(v8 + 36)], &a1[*(int *)(v8 + 36)], 0x70uLL);
    swift_storeEnumTagMultiPayload(a2, v12, 1);
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  return a2;
}

_QWORD *sub_100040274(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;

  v23 = sub_100008AC0(&qword_10008BBA0);
  if (swift_getEnumCaseMultiPayload(a1, v23) == 1)
  {
    v2 = sub_100008AC0(&qword_10008BAF8);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v3 = sub_100008AC0(&qword_10008BB00);
    v10 = (_QWORD *)((char *)a2 + *(int *)(v3 + 36));
    v9 = (uint64_t *)((char *)a1 + *(int *)(v3 + 36));
    v8 = *v9;
    swift_retain();
    *v10 = v8;
    v11 = v9[1];
    swift_retain();
    v10[1] = v11;
    v4 = sub_100008AC0(&qword_10008BB08);
    v14 = (_QWORD *)((char *)a2 + *(int *)(v4 + 36));
    v13 = (uint64_t *)((char *)a1 + *(int *)(v4 + 36));
    v12 = *v13;
    swift_retain();
    *v14 = v12;
    v15 = v13[1];
    swift_retain();
    v14[1] = v15;
    v5 = sub_100008AC0(&qword_10008BB10);
    v18 = (char *)a2 + *(int *)(v5 + 36);
    v17 = (char *)a1 + *(int *)(v5 + 36);
    v16 = *(_QWORD *)v17;
    swift_retain();
    *(_QWORD *)v18 = v16;
    v18[8] = v17[8];
    v6 = sub_100008AC0(&qword_10008BB18);
    memcpy((char *)a2 + *(int *)(v6 + 36), (char *)a1 + *(int *)(v6 + 36), 0x70uLL);
    swift_storeEnumTagMultiPayload(a2, v23, 1);
  }
  else
  {
    v19 = *a1;
    v20 = a1[1];
    swift_retain();
    *a2 = v19;
    a2[1] = v20;
    swift_storeEnumTagMultiPayload(a2, v23, 0);
  }
  return a2;
}

unint64_t sub_10004047C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BBA8;
  if (!qword_10008BBA8)
  {
    v2 = sub_100008DF0(&qword_10008BB20);
    sub_1000400B0();
    sub_10003FE88();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BBA8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100040508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100008AC0(&qword_10008BBA0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = sub_100008AC0(&qword_10008BAF8);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
    sub_100008AC0(&qword_10008BB00);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008BB08);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008BB10);
  }
  swift_release();
  return a1;
}

uint64_t sub_100040600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v11 = type metadata accessor for MessageListView(0);
  v1 = *(_QWORD *)(v11 - 8);
  v12 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v13 = (v12 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12 + 16));
  if (*(_QWORD *)(v0 + v12 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v12 + 32));
  v7 = v10 + v12 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v9 + 48))(v7, 1))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  v6 = (_QWORD *)(v10 + v12 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v6 >= 2uLL)
    swift_bridgeObjectRelease(*v6);
  v5 = v10 + v12 + *(int *)(v11 + 20);
  v2 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(unint64_t))(*(_QWORD *)(v3 - 8) + 8))(v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + v13));
  return swift_deallocObject(v10, v13 + 8);
}

__n128 sub_100040844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  void *__dst;
  void *__src;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v2 = type metadata accessor for Mailbox(0);
  v13 = (void *)(a2 + *(int *)(v2 + 28));
  v14 = (const void *)(a1 + *(int *)(v2 + 28));
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v16 + 48))(v14, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v4 = type metadata accessor for Snapshot(0);
  v11 = a2 + *(int *)(v4 + 20);
  v12 = a1 + *(int *)(v4 + 20);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_WORD *)(v11 + 16) = *(_WORD *)(v12 + 16);
  v7 = type metadata accessor for MessageListView(0);
  __dst = (void *)(a2 + *(int *)(v7 + 20));
  __src = (void *)(a1 + *(int *)(v7 + 20));
  v10 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(__src, v10) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, void *))(*(_QWORD *)(v5 - 8) + 32))(__dst, __src);
    swift_storeEnumTagMultiPayload(__dst, v10, 1);
  }
  else
  {
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  result = *(__n128 *)(a1 + *(int *)(v7 + 24));
  *(__n128 *)(a2 + *(int *)(v7 + 24)) = result;
  return result;
}

uint64_t sub_100040ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for MessageListView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10003BEC0(a1, v2 + v4, *(_QWORD *)(v2 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), a2);
}

unint64_t sub_100040B2C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BBB8;
  if (!qword_10008BBB8)
  {
    v0 = sub_100008DF0(&qword_10008BBB0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BBB8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100040B9C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BBD0;
  if (!qword_10008BBD0)
  {
    v0 = type metadata accessor for MessageView(255);
    WitnessTable = swift_getWitnessTable(&unk_100074AC4, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BBD0);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_100040C0C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  int *v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;

  v40 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v40) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v40, 1);
  }
  else
  {
    v37 = *a1;
    swift_retain();
    *a2 = v37;
    swift_storeEnumTagMultiPayload(a2, v40, 0);
  }
  v23 = (int *)type metadata accessor for MessageView(0);
  v30 = (_QWORD *)((char *)a2 + v23[5]);
  v32 = (_QWORD *)((char *)a1 + v23[5]);
  *v30 = *v32;
  v24 = v32[1];
  swift_bridgeObjectRetain(v24);
  v30[1] = v24;
  v30[2] = v32[2];
  v25 = v32[3];
  swift_bridgeObjectRetain(v25);
  v30[3] = v25;
  v30[4] = v32[4];
  v26 = v32[5];
  swift_bridgeObjectRetain(v26);
  v30[5] = v26;
  v30[6] = v32[6];
  v27 = v32[7];
  swift_bridgeObjectRetain(v27);
  v30[7] = v27;
  v31 = (int *)type metadata accessor for Message(0);
  v29 = (char *)v30 + v31[8];
  v28 = (char *)v32 + v31[8];
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v29, v28);
  *((_BYTE *)v30 + v31[9]) = *((_BYTE *)v32 + v31[9]);
  *((_BYTE *)v30 + v31[10]) = *((_BYTE *)v32 + v31[10]);
  *((_BYTE *)v30 + v31[11]) = *((_BYTE *)v32 + v31[11]);
  *((_BYTE *)v30 + v31[12]) = *((_BYTE *)v32 + v31[12]);
  v33 = (char *)v30 + v31[13];
  v34 = (char *)v32 + v31[13];
  v35 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v36 + 48))(v34, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  *(_QWORD *)((char *)a2 + v23[6]) = *(_QWORD *)((char *)a1 + v23[6]);
  *((_BYTE *)a2 + v23[7]) = *((_BYTE *)a1 + v23[7]);
  v13 = (char *)a2 + v23[8];
  v12 = (char *)a1 + v23[8];
  v5 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v13, v12);
  v14 = (_QWORD *)((char *)a2 + v23[9]);
  v6 = (_QWORD *)((char *)a1 + v23[9]);
  *v14 = *v6;
  v15 = v6[1];
  swift_retain();
  v14[1] = v15;
  v7 = v23[10];
  v16 = (char *)a2 + v7;
  *(_QWORD *)((char *)a2 + v7) = *(_QWORD *)((char *)a1 + v7);
  v17 = *(_QWORD *)((char *)a1 + v7 + 8);
  swift_retain();
  *((_QWORD *)v16 + 1) = v17;
  v8 = v23[11];
  v18 = (char *)a2 + v8;
  *(_QWORD *)((char *)a2 + v8) = *(_QWORD *)((char *)a1 + v8);
  v19 = *(_QWORD *)((char *)a1 + v8 + 8);
  swift_retain();
  *((_QWORD *)v18 + 1) = v19;
  v20 = (_QWORD *)((char *)a2 + v23[12]);
  v21 = (_QWORD *)((char *)a1 + v23[12]);
  v22 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v9 - 8) + 16))(v20, v21);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    v11 = *v21;
    swift_retain();
    *v20 = v11;
    swift_storeEnumTagMultiPayload(v20, v22, 0);
  }
  return a2;
}

uint64_t sub_1000410F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v10 = (int *)type metadata accessor for MessageView(0);
  v13 = (_QWORD *)(a1 + v10[5]);
  swift_bridgeObjectRelease(v13[1]);
  swift_bridgeObjectRelease(v13[3]);
  swift_bridgeObjectRelease(v13[5]);
  swift_bridgeObjectRelease(v13[7]);
  v12 = type metadata accessor for Message(0);
  v11 = (char *)v13 + *(int *)(v12 + 32);
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v3 - 8) + 8))(v11);
  v14 = (char *)v13 + *(int *)(v12 + 52);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v14, 1))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  v8 = a1 + v10[8];
  v4 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8);
  swift_release();
  swift_release();
  swift_release();
  v9 = a1 + v10[12];
  v5 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(v9, v5) == 1)
  {
    v6 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9);
  }
  else
  {
    swift_release();
  }
  return a1;
}

unint64_t sub_100041340()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BBE8;
  if (!qword_10008BBE8)
  {
    v0 = sub_100008DF0(&qword_10008BBC0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Link<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BBE8);
    return WitnessTable;
  }
  return v3;
}

char *sub_1000413B0(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  char *__dst;
  char *__src;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  char *v17;
  int *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;

  v27 = sub_100008AC0(&qword_10008BBF0);
  if (swift_getEnumCaseMultiPayload(a1, v27) == 1)
  {
    v24 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a1, v24) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v24, 1);
    }
    else
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v14 = (int *)type metadata accessor for MessageView(0);
    v17 = &a2[v14[5]];
    v19 = &a1[v14[5]];
    *(_OWORD *)v17 = *(_OWORD *)v19;
    *((_OWORD *)v17 + 1) = *((_OWORD *)v19 + 1);
    *((_OWORD *)v17 + 2) = *((_OWORD *)v19 + 2);
    *((_OWORD *)v17 + 3) = *((_OWORD *)v19 + 3);
    v18 = (int *)type metadata accessor for Message(0);
    v16 = &v17[v18[8]];
    v15 = &v19[v18[8]];
    v4 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v16, v15);
    v17[v18[9]] = v19[v18[9]];
    v17[v18[10]] = v19[v18[10]];
    v17[v18[11]] = v19[v18[11]];
    v17[v18[12]] = v19[v18[12]];
    v20 = &v17[v18[13]];
    v21 = &v19[v18[13]];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v23 + 48))(v21, 1))
    {
      v5 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_QWORD *)&a2[v14[6]] = *(_QWORD *)&a1[v14[6]];
    a2[v14[7]] = a1[v14[7]];
    v10 = &a2[v14[8]];
    v9 = &a1[v14[8]];
    v6 = sub_100008AC0(&qword_10008BBD8);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(v10, v9);
    *(_OWORD *)&a2[v14[9]] = *(_OWORD *)&a1[v14[9]];
    *(_OWORD *)&a2[v14[10]] = *(_OWORD *)&a1[v14[10]];
    *(_OWORD *)&a2[v14[11]] = *(_OWORD *)&a1[v14[11]];
    __dst = &a2[v14[12]];
    __src = &a1[v14[12]];
    v13 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(__src, v13) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32))(__dst, __src);
      swift_storeEnumTagMultiPayload(__dst, v13, 1);
    }
    else
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload(a2, v27, 1);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BBC0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v27, 0);
  }
  return a2;
}

_QWORD *sub_1000417F0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  int *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v42;

  v42 = sub_100008AC0(&qword_10008BBF0);
  if (swift_getEnumCaseMultiPayload(a1, v42) == 1)
  {
    v39 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a1, v39) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v39, 1);
    }
    else
    {
      v38 = *a1;
      swift_retain();
      *a2 = v38;
      swift_storeEnumTagMultiPayload(a2, v39, 0);
    }
    v24 = (int *)type metadata accessor for MessageView(0);
    v31 = (_QWORD *)((char *)a2 + v24[5]);
    v33 = (_QWORD *)((char *)a1 + v24[5]);
    *v31 = *v33;
    v25 = v33[1];
    swift_bridgeObjectRetain(v25);
    v31[1] = v25;
    v31[2] = v33[2];
    v26 = v33[3];
    swift_bridgeObjectRetain(v26);
    v31[3] = v26;
    v31[4] = v33[4];
    v27 = v33[5];
    swift_bridgeObjectRetain(v27);
    v31[5] = v27;
    v31[6] = v33[6];
    v28 = v33[7];
    swift_bridgeObjectRetain(v28);
    v31[7] = v28;
    v32 = (int *)type metadata accessor for Message(0);
    v30 = (char *)v31 + v32[8];
    v29 = (char *)v33 + v32[8];
    v4 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v30, v29);
    *((_BYTE *)v31 + v32[9]) = *((_BYTE *)v33 + v32[9]);
    *((_BYTE *)v31 + v32[10]) = *((_BYTE *)v33 + v32[10]);
    *((_BYTE *)v31 + v32[11]) = *((_BYTE *)v33 + v32[11]);
    *((_BYTE *)v31 + v32[12]) = *((_BYTE *)v33 + v32[12]);
    v34 = (char *)v31 + v32[13];
    v35 = (char *)v33 + v32[13];
    v36 = type metadata accessor for URL(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(v35, 1))
    {
      v5 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    *(_QWORD *)((char *)a2 + v24[6]) = *(_QWORD *)((char *)a1 + v24[6]);
    *((_BYTE *)a2 + v24[7]) = *((_BYTE *)a1 + v24[7]);
    v14 = (char *)a2 + v24[8];
    v13 = (char *)a1 + v24[8];
    v6 = sub_100008AC0(&qword_10008BBD8);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 16))(v14, v13);
    v15 = (_QWORD *)((char *)a2 + v24[9]);
    v7 = (_QWORD *)((char *)a1 + v24[9]);
    *v15 = *v7;
    v16 = v7[1];
    swift_retain();
    v15[1] = v16;
    v8 = v24[10];
    v17 = (char *)a2 + v8;
    *(_QWORD *)((char *)a2 + v8) = *(_QWORD *)((char *)a1 + v8);
    v18 = *(_QWORD *)((char *)a1 + v8 + 8);
    swift_retain();
    *((_QWORD *)v17 + 1) = v18;
    v9 = v24[11];
    v19 = (char *)a2 + v9;
    *(_QWORD *)((char *)a2 + v9) = *(_QWORD *)((char *)a1 + v9);
    v20 = *(_QWORD *)((char *)a1 + v9 + 8);
    swift_retain();
    *((_QWORD *)v19 + 1) = v20;
    v21 = (_QWORD *)((char *)a2 + v24[12]);
    v22 = (_QWORD *)((char *)a1 + v24[12]);
    v23 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v10 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v10 - 8) + 16))(v21, v22);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      v12 = *v22;
      swift_retain();
      *v21 = v12;
      swift_storeEnumTagMultiPayload(v21, v23, 0);
    }
    swift_storeEnumTagMultiPayload(a2, v42, 1);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BBC0);
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v42, 0);
  }
  return a2;
}

unint64_t sub_100041D50()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BBF8;
  if (!qword_10008BBF8)
  {
    v2 = sub_100008DF0(&qword_10008BBC8);
    sub_100041340();
    sub_100040B9C();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BBF8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100041DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_100008AC0(&qword_10008BBF0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v3 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a1, v3) == 1)
    {
      v4 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1);
    }
    else
    {
      swift_release();
    }
    v12 = (int *)type metadata accessor for MessageView(0);
    v15 = (_QWORD *)(a1 + v12[5]);
    swift_bridgeObjectRelease(v15[1]);
    swift_bridgeObjectRelease(v15[3]);
    swift_bridgeObjectRelease(v15[5]);
    swift_bridgeObjectRelease(v15[7]);
    v14 = type metadata accessor for Message(0);
    v13 = (char *)v15 + *(int *)(v14 + 32);
    v5 = type metadata accessor for Date(0);
    (*(void (**)(char *))(*(_QWORD *)(v5 - 8) + 8))(v13);
    v16 = (char *)v15 + *(int *)(v14 + 52);
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t))(v18 + 48))(v16, 1))
      (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    v10 = a1 + v12[8];
    v6 = sub_100008AC0(&qword_10008BBD8);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v10);
    swift_release();
    swift_release();
    swift_release();
    v11 = a1 + v12[12];
    v7 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(v11, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v11);
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BBC0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t sub_100042078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003FB38(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100042080(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *__dst;
  char *__src;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v30;

  v30 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v30 & 0x20000) != 0)
  {
    v25 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v25;
    return *(_QWORD *)a1 + ((v30 + 16) & ~(unint64_t)v30);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v23 = a2[1];
    swift_bridgeObjectRetain(v23);
    *(_QWORD *)(a1 + 8) = v23;
    v24 = a2[2];
    swift_bridgeObjectRetain(v24);
    *(_QWORD *)(a1 + 16) = v24;
    if ((unint64_t)a2[4] <= 5)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = a2[3];
      v22 = a2[4];
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)(a1 + 32) = v22;
    }
    v3 = type metadata accessor for Mailbox(0);
    __dst = (void *)(a1 + *(int *)(v3 + 28));
    __src = (char *)a2 + *(int *)(v3 + 28);
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(__src, 1))
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(__dst, __src, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v5 = type metadata accessor for Snapshot(0);
    v16 = a1 + *(int *)(v5 + 20);
    v17 = (uint64_t *)((char *)a2 + *(int *)(v5 + 20));
    if ((unint64_t)*v17 < 2)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
    }
    else
    {
      v15 = *v17;
      swift_bridgeObjectRetain(*v17);
      *(_QWORD *)v16 = v15;
      *(_QWORD *)(v16 + 8) = v17[1];
      *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
      *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
    }
    v12 = (_QWORD *)(a1 + *(int *)(a3 + 20));
    v13 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v14 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v6 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v6 - 8) + 16))(v12, v13);
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      v11 = *v13;
      swift_retain();
      *v12 = v11;
      swift_storeEnumTagMultiPayload(v12, v14, 0);
    }
    v7 = *(int *)(a3 + 24);
    v9 = a1 + v7;
    *(_QWORD *)(a1 + v7) = *(uint64_t *)((char *)a2 + v7);
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    swift_retain();
    *(_QWORD *)(v9 + 8) = v10;
    return a1;
  }
}

uint64_t sub_100042410(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v7 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v9 + 48))(v7, 1))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v6 >= 2uLL)
    swift_bridgeObjectRelease(*v6);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v2 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *))(*(_QWORD *)(v3 - 8) + 8))(v5);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1000425B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v24 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v24);
  *(_QWORD *)(a1 + 8) = v24;
  v26 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v26);
  *(_QWORD *)(a1 + 16) = v26;
  if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(a1 + 32) = v22;
  }
  v3 = type metadata accessor for Mailbox(0);
  v18 = (void *)(a1 + *(int *)(v3 + 28));
  v19 = (const void *)(a2 + *(int *)(v3 + 28));
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v21 + 48))(v19, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v5 = type metadata accessor for Snapshot(0);
  v16 = a1 + *(int *)(v5 + 20);
  v17 = (uint64_t *)(a2 + *(int *)(v5 + 20));
  if ((unint64_t)*v17 < 2)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_WORD *)(v16 + 16) = *((_WORD *)v17 + 8);
  }
  else
  {
    v15 = *v17;
    swift_bridgeObjectRetain(*v17);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v17[1];
    *(_BYTE *)(v16 + 16) = *((_BYTE *)v17 + 16);
    *(_BYTE *)(v16 + 17) = *((_BYTE *)v17 + 17);
  }
  v12 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  v13 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v14 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v6 - 8) + 16))(v12, v13);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    v11 = *v13;
    swift_retain();
    *v12 = v11;
    swift_storeEnumTagMultiPayload(v12, v14, 0);
  }
  v7 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  swift_retain();
  result = a1;
  *(_QWORD *)(v9 + 8) = v10;
  return result;
}

uint64_t sub_1000428DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v31 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v31);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v31;
  swift_bridgeObjectRelease(v3);
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v34);
  *(_QWORD *)(a1 + 16) = v34;
  swift_bridgeObjectRelease(v33);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 32) <= 5uLL)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v28 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(a1 + 32) = v28;
    }
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v29 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v29);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v29;
    swift_bridgeObjectRelease(v4);
  }
  v5 = type metadata accessor for Mailbox(0);
  v24 = (void *)(a1 + *(int *)(v5 + 28));
  v23 = (const void *)(a2 + *(int *)(v5 + 28));
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  if (((unsigned int (*)(void *, uint64_t))v27)(v24, 1))
  {
    if (v27(v23, 1, v25))
    {
      v7 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v24, v23, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v24, v23, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v24, 0, 1, v25);
    }
  }
  else if (v27(v23, 1, v25))
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v24, v25);
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v24, v23, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 24))(v24, v23, v25);
  }
  v8 = type metadata accessor for Snapshot(0);
  v21 = (uint64_t *)(a1 + *(int *)(v8 + 20));
  v22 = (uint64_t *)(a2 + *(int *)(v8 + 20));
  if ((unint64_t)*v21 < 2)
  {
    if ((unint64_t)*v22 < 2)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_WORD *)v21 + 8) = *((_WORD *)v22 + 8);
    }
    else
    {
      v19 = *v22;
      swift_bridgeObjectRetain(*v22);
      *v21 = v19;
      v21[1] = v22[1];
      *((_BYTE *)v21 + 16) = *((_BYTE *)v22 + 16);
      *((_BYTE *)v21 + 17) = *((_BYTE *)v22 + 17);
    }
  }
  else if ((unint64_t)*v22 < 2)
  {
    sub_10000A004(v21);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_WORD *)v21 + 8) = *((_WORD *)v22 + 8);
  }
  else
  {
    v20 = *v22;
    swift_bridgeObjectRetain(*v22);
    v9 = *v21;
    *v21 = v20;
    swift_bridgeObjectRelease(v9);
    v21[1] = v22[1];
    *((_BYTE *)v21 + 16) = *((_BYTE *)v22 + 16);
    *((_BYTE *)v21 + 17) = *((_BYTE *)v22 + 17) & 1;
  }
  v17 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v18 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  if (v17 != v18)
  {
    sub_10003B1A8((uint64_t)v17);
    v16 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
    {
      v10 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v10 - 8) + 16))(v17, v18);
      swift_storeEnumTagMultiPayload(v17, v16, 1);
    }
    else
    {
      v15 = *v18;
      swift_retain();
      *v17 = v15;
      swift_storeEnumTagMultiPayload(v17, v16, 0);
    }
  }
  v13 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  v11 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  *v13 = *v11;
  v14 = v11[1];
  swift_retain();
  v13[1] = v14;
  swift_release();
  return a1;
}

__n128 sub_100042E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  void *v8;
  void *__src;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__dst;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v3 + 28));
  v14 = (const void *)(a2 + *(int *)(v3 + 28));
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v16 + 48))(v14, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(__dst, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v5 = type metadata accessor for Snapshot(0);
  v11 = a1 + *(int *)(v5 + 20);
  v12 = a2 + *(int *)(v5 + 20);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_WORD *)(v11 + 16) = *(_WORD *)(v12 + 16);
  v8 = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  v10 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(__src, v10) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, void *))(*(_QWORD *)(v6 - 8) + 32))(v8, __src);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, __src, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  result = *(__n128 *)(a2 + *(int *)(a3 + 24));
  *(__n128 *)(a1 + *(int *)(a3 + 24)) = result;
  return result;
}

uint64_t sub_1000430CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  void *__dst;
  void *__src;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  v22 = (void *)(a1 + *(int *)(v7 + 28));
  v21 = (const void *)(a2 + *(int *)(v7 + 28));
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  if (((unsigned int (*)(void *, uint64_t))v25)(v22, 1))
  {
    if (v25(v21, 1, v23))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v22, v21, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v22, v21, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v23);
    }
  }
  else if (v25(v21, 1, v23))
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v22, v23);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v22, v21, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 40))(v22, v21, v23);
  }
  v10 = type metadata accessor for Snapshot(0);
  v19 = (uint64_t *)(a1 + *(int *)(v10 + 20));
  v20 = (uint64_t *)(a2 + *(int *)(v10 + 20));
  if ((unint64_t)*v19 < 2)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_WORD *)v19 + 8) = *((_WORD *)v20 + 8);
  }
  else if ((unint64_t)*v20 < 2)
  {
    sub_10000A004(v19);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_WORD *)v19 + 8) = *((_WORD *)v20 + 8);
  }
  else
  {
    v11 = *v19;
    *v19 = *v20;
    swift_bridgeObjectRelease(v11);
    v19[1] = v20[1];
    *((_BYTE *)v19 + 16) = *((_BYTE *)v20 + 16);
    *((_BYTE *)v19 + 17) = *((_BYTE *)v20 + 17) & 1;
  }
  __dst = (void *)(a1 + *(int *)(a3 + 20));
  __src = (void *)(a2 + *(int *)(a3 + 20));
  if (__dst != __src)
  {
    sub_10003B1A8((uint64_t)__dst);
    v16 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(__src, v16) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, void *))(*(_QWORD *)(v12 - 8) + 32))(__dst, __src);
      swift_storeEnumTagMultiPayload(__dst, v16, 1);
    }
    else
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v13 = (_QWORD *)(a1 + *(int *)(a3 + 24));
  v14 = (_QWORD *)(a2 + *(int *)(a3 + 24));
  *v13 = *v14;
  v13[1] = v14[1];
  swift_release();
  return a1;
}

uint64_t sub_100043594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000435B0);
}

uint64_t sub_1000435B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for Snapshot(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (a2 == *(_DWORD *)(v13 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))(a1, a2, v12);
  }
  else
  {
    v6 = sub_100008AC0(&qword_10008BAD8);
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
    }
    else if (a2 == 2147483646)
    {
      v5 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < (unint64_t)&_mh_execute_header)
        v5 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
      v3 = v5 - 1;
      if (v5 - 1 < 0)
        v3 = -1;
      return (v3 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v8;
}

uint64_t sub_100043704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043720);
}

uint64_t sub_100043720(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for Snapshot(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = sub_100008AC0(&qword_10008BAD8);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 2147483646)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  else
    __break(1u);
  return result;
}

uint64_t sub_100043834(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  v6 = type metadata accessor for Snapshot(319);
  v7 = v6;
  if (v1 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v6 - 8) + 64;
    v2 = sub_10004392C(319);
    v7 = v2;
    if (v3 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v2 - 8) + 64;
      v8[2] = &unk_100074208;
      swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      return 0;
    }
  }
  return v7;
}

uint64_t sub_10004392C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008BC68;
  if (!qword_10008BC68)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    v5 = type metadata accessor for Environment.Content(a1, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008BC68);
      return v3;
    }
  }
  return v7;
}

unint64_t sub_1000439D0()
{
  return sub_10004047C();
}

unint64_t sub_1000439E4()
{
  return sub_100041D50();
}

uint64_t sub_1000439F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D3CC, 1);
}

uint64_t sub_100043A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100052630(a1, a2);
}

uint64_t sub_100043A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10003C144(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_100043A40()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BCA8;
  if (!qword_10008BCA8)
  {
    v2 = sub_100008DF0(&qword_10008BCA0);
    sub_100043ACC();
    sub_1000392C8();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BCA8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100043ACC()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BCB0;
  if (!qword_10008BCB0)
  {
    v2 = sub_100008DF0(&qword_10008BCB8);
    sub_100043B48();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BCB0);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100043B48()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BCC0;
  if (!qword_10008BCC0)
  {
    v0 = sub_100008DF0(&qword_10008BCC8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BCC0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100043BB8(uint64_t a1)
{
  uint64_t v1;

  sub_100008AC0(&qword_10008BCD0);
  v1 = sub_100008AC0(&qword_10008BCB8);
  (*(void (**)(void))(*(_QWORD *)(v1 - 8) + 8))();
  sub_100008AC0(&qword_10008BCA0);
  swift_release();
  return a1;
}

uint64_t sub_100043C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v4 = *(int *)(sub_100008AC0(&qword_10008BCD0) + 44);
  v2 = sub_100008AC0(&qword_10008BCB8);
  (*(void (**)(void))(*(_QWORD *)(v2 - 8) + 16))();
  v7 = *(int *)(sub_100008AC0(&qword_10008BCA0) + 36);
  v8 = *(_QWORD *)(a1 + v4 + v7);
  swift_retain();
  result = a2;
  *(_QWORD *)(a2 + v4 + v7) = v8;
  return result;
}

unint64_t sub_100043CF8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BCD8;
  if (!qword_10008BCD8)
  {
    v0 = type metadata accessor for WidgetFamily(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BCD8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100043D68()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BCE8;
  if (!qword_10008BCE8)
  {
    v0 = sub_100008DF0(&qword_10008BCE0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BCE8);
    return WitnessTable;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100043DD8(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
}

unint64_t sub_100043E00()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BD00;
  if (!qword_10008BD00)
  {
    v0 = sub_100008DF0(&qword_10008BCF8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD00);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100043E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v11 = type metadata accessor for MessageListView(0);
  v1 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v12 = v13 + *(_QWORD *)(v1 + 64);
  v14 = type metadata accessor for GeometryProxy(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (v12 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = ((((v16 + *(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 16));
  if (*(_QWORD *)(v0 + v13 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v13 + 32));
  v7 = v10 + v13 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v9 + 48))(v7, 1))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  v6 = (_QWORD *)(v10 + v13 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v6 >= 2uLL)
    swift_bridgeObjectRelease(*v6);
  v5 = v10 + v13 + *(int *)(v11 + 20);
  v2 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(unint64_t))(*(_QWORD *)(v3 - 8) + 8))(v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v10 + v16, v14);
  return swift_deallocObject(v10, v17);
}

uint64_t sub_100044118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;

  v4 = *(_QWORD *)(type metadata accessor for MessageListView(0) - 8);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = v11 + *(_QWORD *)(v4 + 64);
  v5 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v6 = (v9 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003D138(a1, a2, v3 + v11, v3 + v6, *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), a3, *(double *)(v3 + v7));
}

uint64_t sub_1000441D0()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10004420C(char *a1)
{
  uint64_t v1;

  return sub_10003E5F4(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 16));
}

unint64_t sub_100044218()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BD10;
  if (!qword_10008BD10)
  {
    v0 = sub_100008DF0(&qword_10008BD08);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD10);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100044288(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BCB8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008BCA0);
  swift_release();
  return a1;
}

uint64_t sub_1000442E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100008AC0(&qword_10008BCB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(sub_100008AC0(&qword_10008BCA0) + 36);
  v7 = *(_QWORD *)(a1 + v6);
  swift_retain();
  result = a2;
  *(_QWORD *)(a2 + v6) = v7;
  return result;
}

unint64_t sub_100044368()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BD38;
  if (!qword_10008BD38)
  {
    v2 = sub_100008DF0(&qword_10008BD30);
    sub_100041D50();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD38);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000443F0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008BD40;
  if (!qword_10008BD40)
  {
    v2 = sub_100008DF0(&qword_10008BD20);
    v4[0] = type metadata accessor for Divider(255);
    v4[1] = sub_1000444B4();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_100044524();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD40);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000444B4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BD48;
  if (!qword_10008BD48)
  {
    v0 = type metadata accessor for Divider(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Divider, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD48);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100044524()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BD50;
  if (!qword_10008BD50)
  {
    v0 = sub_100008DF0(&qword_10008BD58);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD50);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100044594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v4 = sub_100008AC0(&qword_10008BD20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1))
  {
    v1 = sub_100008AC0(&qword_10008BD18);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_release();
    swift_release();
  }
  return a1;
}

char *sub_100044638(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = sub_100008AC0(&qword_10008BD20);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = sub_100008AC0(&qword_10008BD28);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BD18);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    memcpy(&a2[*(int *)(v7 + 36)], &a1[*(int *)(v7 + 36)], 0x30uLL);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  return a2;
}

_QWORD *sub_10004472C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  int *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;

  v43 = sub_100008AC0(&qword_10008BBF0);
  if (swift_getEnumCaseMultiPayload(a1, v43) == 1)
  {
    v40 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a1, v40) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v40, 1);
    }
    else
    {
      v39 = *a1;
      swift_retain();
      *a2 = v39;
      swift_storeEnumTagMultiPayload(a2, v40, 0);
    }
    v25 = (int *)type metadata accessor for MessageView(0);
    v32 = (_QWORD *)((char *)a2 + v25[5]);
    v34 = (_QWORD *)((char *)a1 + v25[5]);
    *v32 = *v34;
    v26 = v34[1];
    swift_bridgeObjectRetain(v26);
    v32[1] = v26;
    v32[2] = v34[2];
    v27 = v34[3];
    swift_bridgeObjectRetain(v27);
    v32[3] = v27;
    v32[4] = v34[4];
    v28 = v34[5];
    swift_bridgeObjectRetain(v28);
    v32[5] = v28;
    v32[6] = v34[6];
    v29 = v34[7];
    swift_bridgeObjectRetain(v29);
    v32[7] = v29;
    v33 = (int *)type metadata accessor for Message(0);
    v31 = (char *)v32 + v33[8];
    v30 = (char *)v34 + v33[8];
    v4 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v31, v30);
    *((_BYTE *)v32 + v33[9]) = *((_BYTE *)v34 + v33[9]);
    *((_BYTE *)v32 + v33[10]) = *((_BYTE *)v34 + v33[10]);
    *((_BYTE *)v32 + v33[11]) = *((_BYTE *)v34 + v33[11]);
    *((_BYTE *)v32 + v33[12]) = *((_BYTE *)v34 + v33[12]);
    v35 = (char *)v32 + v33[13];
    v36 = (char *)v34 + v33[13];
    v37 = type metadata accessor for URL(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v38 + 48))(v36, 1))
    {
      v5 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    *(_QWORD *)((char *)a2 + v25[6]) = *(_QWORD *)((char *)a1 + v25[6]);
    *((_BYTE *)a2 + v25[7]) = *((_BYTE *)a1 + v25[7]);
    v15 = (char *)a2 + v25[8];
    v14 = (char *)a1 + v25[8];
    v6 = sub_100008AC0(&qword_10008BBD8);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 16))(v15, v14);
    v16 = (_QWORD *)((char *)a2 + v25[9]);
    v7 = (_QWORD *)((char *)a1 + v25[9]);
    *v16 = *v7;
    v17 = v7[1];
    swift_retain();
    v16[1] = v17;
    v8 = v25[10];
    v18 = (char *)a2 + v8;
    *(_QWORD *)((char *)a2 + v8) = *(_QWORD *)((char *)a1 + v8);
    v19 = *(_QWORD *)((char *)a1 + v8 + 8);
    swift_retain();
    *((_QWORD *)v18 + 1) = v19;
    v9 = v25[11];
    v20 = (char *)a2 + v9;
    *(_QWORD *)((char *)a2 + v9) = *(_QWORD *)((char *)a1 + v9);
    v21 = *(_QWORD *)((char *)a1 + v9 + 8);
    swift_retain();
    *((_QWORD *)v20 + 1) = v21;
    v22 = (_QWORD *)((char *)a2 + v25[12]);
    v23 = (_QWORD *)((char *)a1 + v25[12]);
    v24 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v10 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v10 - 8) + 16))(v22, v23);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      v13 = *v23;
      swift_retain();
      *v22 = v13;
      swift_storeEnumTagMultiPayload(v22, v24, 0);
    }
    swift_storeEnumTagMultiPayload(a2, v43, 1);
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BBC0);
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v43, 0);
  }
  v11 = sub_100008AC0(&qword_10008BD30);
  memcpy((char *)a2 + *(int *)(v11 + 36), (char *)a1 + *(int *)(v11 + 36), 0x30uLL);
  return a2;
}

char *sub_100044CC0(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v14;
  uint64_t v15;

  v14 = sub_100008AC0(&qword_10008BD20);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(a1, 1))
  {
    v4 = sub_100008AC0(&qword_10008BD28);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008BD18);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v3 = *(int *)(v14 + 36);
    v11 = &a2[v3];
    v10 = &a1[v3];
    v6 = *(_QWORD *)&a1[v3];
    v7 = *(_QWORD *)&a1[v3 + 8];
    swift_retain();
    *(_QWORD *)v11 = v6;
    *((_QWORD *)v11 + 1) = v7;
    v8 = *((_QWORD *)v10 + 2);
    v9 = *((_QWORD *)v10 + 3);
    swift_retain();
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v9;
    *((_OWORD *)v11 + 2) = *((_OWORD *)v10 + 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  return a2;
}

unint64_t sub_100044E10()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BD60;
  if (!qword_10008BD60)
  {
    v2 = sub_100008DF0(&qword_10008BD28);
    sub_1000443F0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD60);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100044E8C(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BD18);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008BD20);
  swift_release();
  swift_release();
  return a1;
}

__n128 sub_100044F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;

  v2 = sub_100008AC0(&qword_10008BD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(sub_100008AC0(&qword_10008BD20) + 36);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  swift_retain();
  v3 = (_QWORD *)(a2 + v6);
  v12 = (__n128 *)(a2 + v6);
  *v3 = v7;
  v3[1] = v8;
  v10 = *(_QWORD *)(a1 + v6 + 16);
  v11 = *(_QWORD *)(a1 + v6 + 24);
  swift_retain();
  v12[1].n128_u64[0] = v10;
  v12[1].n128_u64[1] = v11;
  result = *(__n128 *)(a1 + v6 + 32);
  v12[2] = result;
  return result;
}

unint64_t sub_100044FDC()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008BD68;
  if (!qword_10008BD68)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD68);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100045044()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008BD70;
  if (!qword_10008BD70)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BD70);
    return WitnessTable;
  }
  return v2;
}

void *sub_1000450AC(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v8 = sub_100008AC0(&qword_10008BB40);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    v3 = sub_100008AC0(&qword_10008BB28);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = sub_100008AC0(&qword_10008BB50);
    if (swift_getEnumCaseMultiPayload(a1, v5) == 1)
    {
      v2 = sub_100008AC0(&qword_10008BB58);
      (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v5, 1);
    }
    else
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  return a2;
}

_QWORD *sub_1000451D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v12 = sub_100008AC0(&qword_10008BB40);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v13 + 48))(a1, 1))
  {
    v3 = sub_100008AC0(&qword_10008BB28);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v9 = sub_100008AC0(&qword_10008BB50);
    if (swift_getEnumCaseMultiPayload(a1, v9) == 1)
    {
      v2 = sub_100008AC0(&qword_10008BB58);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
      swift_storeEnumTagMultiPayload(a2, v9, 1);
    }
    else
    {
      v5 = *a1;
      v6 = a1[1];
      v7 = *((_BYTE *)a1 + 16);
      sub_100045354(*a1, v6, v7 & 1);
      *a2 = v5;
      a2[1] = v6;
      *((_BYTE *)a2 + 16) = v7 & 1;
      v8 = a1[3];
      swift_bridgeObjectRetain(v8);
      a2[3] = v8;
      swift_storeEnumTagMultiPayload(a2, v9, 0);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  return a2;
}

uint64_t sub_100045354(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100045394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = 0;
  v1 = v0 + *(int *)(type metadata accessor for MessagesContentView(0) + 24);
  v5 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  sub_1000454B4(*(_QWORD *)v1, v4 & 1);
  sub_1000454B4(v5, v4 & 1);
  v7 = v5;
  v8 = v4 & 1;
  v2 = sub_100008AC0(&qword_10008BD78);
  Environment.wrappedValue.getter(v2);
  sub_1000454E4((uint64_t)&v7);
  v6 = v9;
  sub_100045518(v5, v4 & 1);
  return v6 & 1;
}

uint64_t type metadata accessor for MessagesContentView(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008BE40;
  if (!qword_10008BE40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessagesContentView);
  return v2;
}

uint64_t sub_1000454B4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1000454E4(uint64_t a1)
{
  sub_100045518(*(_QWORD *)a1, *(_BYTE *)(a1 + 8) & 1);
}

uint64_t sub_100045518(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100045548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;

  v29 = a1;
  v56 = 0;
  v55 = 0;
  v47 = 0;
  v2 = type metadata accessor for MessagesContentView(0);
  v30 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v51 = (uint64_t *)((char *)&v14 - v30);
  v31 = sub_100008AC0(&qword_10008BD80);
  v32 = (*(_QWORD *)(*(_QWORD *)(v31 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v31);
  v46 = (uint64_t)&v14 - v32;
  v33 = sub_100008AC0(&qword_10008BD88);
  v34 = (*(_QWORD *)(*(_QWORD *)(v33 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v33);
  v35 = (uint64_t)&v14 - v34;
  v36 = sub_100008AC0(&qword_10008BD90);
  v37 = (*(_QWORD *)(*(_QWORD *)(v36 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v36);
  v38 = (uint64_t)&v14 - v37;
  v39 = sub_100008AC0(&qword_10008BD98);
  v40 = (*(_QWORD *)(*(_QWORD *)(v39 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v39);
  v41 = (uint64_t)&v14 - v40;
  v42 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v14 - v40);
  v43 = (uint64_t)&v14 - v42;
  v44 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin((char *)&v14 - v42);
  v45 = (uint64_t)&v14 - v44;
  v56 = (char *)&v14 - v44;
  v55 = v1;
  v50 = static HorizontalAlignment.leading.getter(v5);
  sub_100046004(v1, (uint64_t)v51);
  v48 = &v53;
  v54 = v51;
  v49 = sub_100008AC0(&qword_10008BDA0);
  v6 = sub_100046388();
  VStack.init(alignment:spacing:content:)(v50, v47, 0, sub_100046380, v48, v49, v6);
  v7 = sub_1000463F8(v51);
  v52 = static Edge.Set.horizontal.getter(v7);
  if ((sub_100045394() & 1) != 0)
    v27 = 0x4030000000000000;
  else
    v27 = 0;
  v28 = 0;
  v25 = 0;
  v24 = v27;
  v8 = sub_1000465C8();
  View.padding(_:_:)(v52, v24, v25 & 1, v31, v8);
  v9 = sub_100046638(v46);
  v26 = static Edge.Set.top.getter(v9);
  if ((sub_100045394() & 1) != 0)
    v22 = 0x4028000000000000;
  else
    v22 = 0;
  v23 = 0;
  v20 = 0;
  v19 = v22;
  v10 = sub_1000469E8();
  View.padding(_:_:)(v26, v19, v20 & 1, v33, v10);
  v11 = sub_100046638(v35);
  v21 = static Edge.Set.bottom.getter(v11);
  if ((sub_100045394() & 1) != 0)
    v17 = 0x4010000000000000;
  else
    v17 = 0;
  v18 = 0;
  v15 = 0;
  v14 = v17;
  v12 = sub_100046A70();
  View.padding(_:_:)(v21, v14, v15 & 1, v36, v12);
  sub_100046638(v38);
  v16 = sub_100046AF8();
  sub_100031764(v43, v39, v45);
  sub_100046638(v43);
  sub_100046B80(v45, v41);
  sub_100031764(v41, v39, v29);
  sub_100046638(v41);
  return sub_100046638(v45);
}

uint64_t sub_100045A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t OpaqueTypeConformance2;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[2];
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;

  v45 = a2;
  v37 = a1;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v24 = 0;
  v41 = type metadata accessor for MessageListView(0);
  v18 = (*(_QWORD *)(*(_QWORD *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v47 = (unint64_t *)((char *)&v18 - v18);
  v19 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v3);
  v50 = (unint64_t *)((char *)&v18 - v19);
  v64 = (char *)&v18 - v19;
  v35 = type metadata accessor for Divider(v4);
  v33 = *(_QWORD *)(v35 - 8);
  v20 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v35);
  v34 = (char *)&v18 - v20;
  v51 = sub_100008AC0(&qword_10008BD18);
  v39 = *(_QWORD *)(v51 - 8);
  v21 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v51);
  v48 = (uint64_t)&v18 - v21;
  v22 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v18 - v21);
  v53 = (uint64_t)&v18 - v22;
  v63 = (char *)&v18 - v22;
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008B830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v24);
  v29 = (char *)&v18 - v23;
  v25 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v6) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v24);
  v38 = (uint64_t)&v18 - v25;
  v30 = type metadata accessor for MessageListHeaderView(v7);
  v26 = (*(_QWORD *)(*(_QWORD *)(v30 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v30);
  v8 = (char *)&v18 - v26;
  v32 = (uint64_t)&v18 - v26;
  v40 = sub_100008AC0(&qword_10008BDE0);
  v27 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v37);
  v49 = (unint64_t *)((char *)&v18 - v27);
  v28 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v10);
  v54 = (uint64_t *)((char *)&v18 - v28);
  v62 = (char *)&v18 - v28;
  v61 = v11;
  sub_10001BE1C(v11, v12);
  sub_100035954();
  v13 = sub_100035984(v29, v38, v8);
  v31 = static Edge.Set.bottom.getter(v13);
  v14 = sub_100036338();
  View.padding(_:_:)(v31, 0x4018000000000000, 0, v30, v14);
  sub_100035508(v32);
  v42 = sub_100048FF4();
  sub_100031764((uint64_t)v49, v40, (uint64_t)v54);
  v15 = sub_100035508((uint64_t)v49);
  Divider.init()(v15);
  v36 = sub_1000444B4();
  v16 = sub_10003AF18();
  View.widgetAccentable(_:)(v16 & 1, v35, v36);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  v60[0] = v35;
  v60[1] = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v60, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  sub_100031764(v48, v51, v53);
  v52 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v52(v48, v51);
  sub_10001BE1C(v37, v38);
  sub_10003FC30(v38, (uint64_t)v47);
  v44 = sub_10004907C();
  sub_100031764((uint64_t)v47, v41, (uint64_t)v50);
  sub_10003F1F4(v47);
  sub_1000490EC(v54, v49);
  v46 = v59;
  v59[0] = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v48, v53, v51);
  v59[1] = v48;
  sub_10003ED94((uint64_t)v50, (uint64_t)v47);
  v59[2] = v47;
  v58[0] = v40;
  v58[1] = v51;
  v58[2] = v41;
  v55 = v42;
  v56 = OpaqueTypeConformance2;
  v57 = v44;
  sub_10003571C((uint64_t)v46, 3uLL, (uint64_t)v58, v45);
  sub_10003F1F4(v47);
  v52(v48, v51);
  sub_100035508((uint64_t)v49);
  sub_10003F1F4(v50);
  v52(v53, v51);
  return sub_100035508((uint64_t)v54);
}

uint64_t sub_100046004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v27 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v27);
  *(_QWORD *)(a2 + 8) = v27;
  v30 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v30);
  *(_QWORD *)(a2 + 16) = v30;
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    v26 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)(a2 + 32) = v26;
  }
  v2 = type metadata accessor for Mailbox(0);
  v22 = (void *)(a2 + *(int *)(v2 + 28));
  v23 = (const void *)(a1 + *(int *)(v2 + 28));
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v25 + 48))(v23, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v4 = type metadata accessor for Snapshot(0);
  v20 = a2 + *(int *)(v4 + 20);
  v21 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  if ((unint64_t)*v21 < 2)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_WORD *)(v20 + 16) = *((_WORD *)v21 + 8);
  }
  else
  {
    v19 = *v21;
    swift_bridgeObjectRetain(*v21);
    *(_QWORD *)v20 = v19;
    *(_QWORD *)(v20 + 8) = v21[1];
    *(_BYTE *)(v20 + 16) = *((_BYTE *)v21 + 16);
    *(_BYTE *)(v20 + 17) = *((_BYTE *)v21 + 17);
  }
  v15 = (int *)type metadata accessor for MessagesContentView(0);
  v16 = (_QWORD *)(a2 + v15[5]);
  v17 = (uint64_t *)(a1 + v15[5]);
  v18 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(v16, v17);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    v14 = *v17;
    swift_retain();
    *v16 = v14;
    swift_storeEnumTagMultiPayload(v16, v18, 0);
  }
  v11 = a2 + v15[6];
  v6 = a1 + v15[6];
  v9 = *(_QWORD *)v6;
  v10 = *(_BYTE *)(v6 + 8);
  sub_1000454B4(*(_QWORD *)v6, v10 & 1);
  *(_QWORD *)v11 = v9;
  *(_BYTE *)(v11 + 8) = v10 & 1;
  v7 = v15[7];
  v12 = a2 + v7;
  *(_QWORD *)(a2 + v7) = *(_QWORD *)(a1 + v7);
  v13 = *(_QWORD *)(a1 + v7 + 8);
  swift_retain();
  result = a2;
  *(_QWORD *)(v12 + 8) = v13;
  return result;
}

uint64_t sub_100046380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100045A18(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100046388()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BDA8;
  if (!qword_10008BDA8)
  {
    v0 = sub_100008DF0(&qword_10008BDA0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BDA8);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_1000463F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v7 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v9 + 48))(v7, 1))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v6 >= 2uLL)
    swift_bridgeObjectRelease(*v6);
  v4 = type metadata accessor for MessagesContentView(0);
  v5 = (char *)a1 + *(int *)(v4 + 20);
  v1 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v5, v1) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *))(*(_QWORD *)(v2 - 8) + 8))(v5);
  }
  else
  {
    swift_release();
  }
  sub_100045518(*(_QWORD *)((char *)a1 + *(int *)(v4 + 24)), *((_BYTE *)a1 + *(int *)(v4 + 24) + 8) & 1);
  swift_release();
  return a1;
}

unint64_t sub_1000465C8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BDB0;
  if (!qword_10008BDB0)
  {
    v0 = sub_100008DF0(&qword_10008BD80);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BDB0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100046638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(void);
  _QWORD *v20;
  uint64_t v21;

  v21 = *(int *)(sub_100008AC0(&qword_10008BDB8) + 44);
  v1 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1 + v21, v1) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v21);
  }
  else
  {
    swift_release();
  }
  v20 = (_QWORD *)(a1 + v21 + *(int *)(type metadata accessor for MessageListHeaderView(0) + 20));
  swift_bridgeObjectRelease(v20[1]);
  swift_bridgeObjectRelease(v20[2]);
  if (v20[4] > 5uLL)
    swift_bridgeObjectRelease(v20[4]);
  v15 = type metadata accessor for Mailbox(0);
  v16 = (char *)v20 + *(int *)(v15 + 28);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(void))(v18 + 48);
  if (!((unsigned int (*)(char *, uint64_t))v19)(v16, 1))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  v13 = type metadata accessor for Snapshot(0);
  v14 = (_QWORD *)((char *)v20 + *(int *)(v13 + 20));
  if (*v14 >= 2uLL)
    swift_bridgeObjectRelease(*v14);
  swift_release();
  v11 = sub_100008AC0(&qword_10008BDC0);
  v10 = a1 + v21 + *(int *)(v11 + 48);
  v3 = sub_100008AC0(&qword_10008BD18);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v10);
  v12 = (_QWORD *)(a1 + v21 + *(int *)(v11 + 64));
  swift_bridgeObjectRelease(v12[1]);
  swift_bridgeObjectRelease(v12[2]);
  if (v12[4] > 5uLL)
    swift_bridgeObjectRelease(v12[4]);
  v9 = (char *)v12 + *(int *)(v15 + 28);
  if (!v19())
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v17);
  v8 = (_QWORD *)((char *)v12 + *(int *)(v13 + 20));
  if (*v8 >= 2uLL)
    swift_bridgeObjectRelease(*v8);
  v7 = (char *)v12 + *(int *)(type metadata accessor for MessageListView(0) + 20);
  v4 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *))(*(_QWORD *)(v5 - 8) + 8))(v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return a1;
}

unint64_t sub_1000469E8()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BDC8;
  if (!qword_10008BDC8)
  {
    v2 = sub_100008DF0(&qword_10008BD88);
    sub_1000465C8();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BDC8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100046A70()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BDD0;
  if (!qword_10008BDD0)
  {
    v2 = sub_100008DF0(&qword_10008BD90);
    sub_1000469E8();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BDD0);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100046AF8()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BDD8;
  if (!qword_10008BDD8)
  {
    v2 = sub_100008DF0(&qword_10008BD98);
    sub_100046A70();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BDD8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100046B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *__dst;
  void *__src;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v55;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v53 = *(int *)(sub_100008AC0(&qword_10008BDB8) + 44);
  v55 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1 + v53, v55) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void))(*(_QWORD *)(v2 - 8) + 16))();
    swift_storeEnumTagMultiPayload(a2 + v53, v55, 1);
  }
  else
  {
    v51 = *(_QWORD *)(a1 + v53);
    swift_retain();
    *(_QWORD *)(a2 + v53) = v51;
    swift_storeEnumTagMultiPayload(a2 + v53, v55, 0);
  }
  v46 = type metadata accessor for MessageListHeaderView(0);
  v48 = a2 + v53 + *(int *)(v46 + 20);
  v50 = a1 + v53 + *(int *)(v46 + 20);
  *(_QWORD *)v48 = *(_QWORD *)v50;
  v47 = *(_QWORD *)(v50 + 8);
  swift_bridgeObjectRetain(v47);
  *(_QWORD *)(v48 + 8) = v47;
  v49 = *(_QWORD *)(v50 + 16);
  swift_bridgeObjectRetain(v49);
  *(_QWORD *)(v48 + 16) = v49;
  if (*(_QWORD *)(v50 + 32) <= 5uLL)
  {
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v50 + 24);
  }
  else
  {
    *(_QWORD *)(v48 + 24) = *(_QWORD *)(v50 + 24);
    v45 = *(_QWORD *)(v50 + 32);
    swift_bridgeObjectRetain(v45);
    *(_QWORD *)(v48 + 32) = v45;
  }
  v39 = type metadata accessor for Mailbox(0);
  v40 = (void *)(v48 + *(int *)(v39 + 28));
  v41 = (const void *)(v50 + *(int *)(v39 + 28));
  v42 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(void))(v43 + 48);
  if (((unsigned int (*)(const void *, uint64_t))v44)(v41, 1))
  {
    v3 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v36 = type metadata accessor for Snapshot(0);
  v37 = v48 + *(int *)(v36 + 20);
  v38 = (uint64_t *)(v50 + *(int *)(v36 + 20));
  if ((unint64_t)*v38 < 2)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *(_WORD *)(v37 + 16) = *((_WORD *)v38 + 8);
  }
  else
  {
    v35 = *v38;
    swift_bridgeObjectRetain(*v38);
    *(_QWORD *)v37 = v35;
    *(_QWORD *)(v37 + 8) = v38[1];
    *(_BYTE *)(v37 + 16) = *((_BYTE *)v38 + 16);
    *(_BYTE *)(v37 + 17) = *((_BYTE *)v38 + 17);
  }
  v26 = *(int *)(v46 + 24);
  v27 = *(_QWORD *)(a1 + v53 + v26);
  swift_retain();
  *(_QWORD *)(a2 + v53 + v26) = v27;
  v4 = sub_100008AC0(&qword_10008BDE0);
  memcpy((void *)(a2 + v53 + *(int *)(v4 + 36)), (const void *)(a1 + v53 + *(int *)(v4 + 36)), 0x29uLL);
  v30 = sub_100008AC0(&qword_10008BDC0);
  v29 = a2 + v53 + *(int *)(v30 + 48);
  v28 = a1 + v53 + *(int *)(v30 + 48);
  v5 = sub_100008AC0(&qword_10008BD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v29, v28);
  v32 = a2 + v53 + *(int *)(v30 + 64);
  v34 = a1 + v53 + *(int *)(v30 + 64);
  *(_QWORD *)v32 = *(_QWORD *)v34;
  v31 = *(_QWORD *)(v34 + 8);
  swift_bridgeObjectRetain(v31);
  *(_QWORD *)(v32 + 8) = v31;
  v33 = *(_QWORD *)(v34 + 16);
  swift_bridgeObjectRetain(v33);
  *(_QWORD *)(v32 + 16) = v33;
  if (*(_QWORD *)(v34 + 32) <= 5uLL)
  {
    *(_OWORD *)(v32 + 24) = *(_OWORD *)(v34 + 24);
  }
  else
  {
    *(_QWORD *)(v32 + 24) = *(_QWORD *)(v34 + 24);
    v25 = *(_QWORD *)(v34 + 32);
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v32 + 32) = v25;
  }
  __dst = (void *)(v32 + *(int *)(v39 + 28));
  __src = (void *)(v34 + *(int *)(v39 + 28));
  if (v44())
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v43 + 16))(__dst, __src, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
  }
  v21 = v32 + *(int *)(v36 + 20);
  v22 = (uint64_t *)(v34 + *(int *)(v36 + 20));
  if ((unint64_t)*v22 < 2)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_WORD *)(v21 + 16) = *((_WORD *)v22 + 8);
  }
  else
  {
    v20 = *v22;
    swift_bridgeObjectRetain(*v22);
    *(_QWORD *)v21 = v20;
    *(_QWORD *)(v21 + 8) = v22[1];
    *(_BYTE *)(v21 + 16) = *((_BYTE *)v22 + 16);
    *(_BYTE *)(v21 + 17) = *((_BYTE *)v22 + 17);
  }
  v16 = type metadata accessor for MessageListView(0);
  v17 = (_QWORD *)(v32 + *(int *)(v16 + 20));
  v18 = (uint64_t *)(v34 + *(int *)(v16 + 20));
  v19 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(v17, v18);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    v15 = *v18;
    swift_retain();
    *v17 = v15;
    swift_storeEnumTagMultiPayload(v17, v19, 0);
  }
  v13 = (_QWORD *)(v32 + *(int *)(v16 + 24));
  v8 = (_QWORD *)(v34 + *(int *)(v16 + 24));
  *v13 = *v8;
  v14 = v8[1];
  swift_retain();
  v13[1] = v14;
  v9 = sub_100008AC0(&qword_10008BD88);
  memcpy((void *)(a2 + *(int *)(v9 + 36)), (const void *)(a1 + *(int *)(v9 + 36)), 0x29uLL);
  v10 = sub_100008AC0(&qword_10008BD90);
  memcpy((void *)(a2 + *(int *)(v10 + 36)), (const void *)(a1 + *(int *)(v10 + 36)), 0x29uLL);
  v11 = sub_100008AC0(&qword_10008BD98);
  memcpy((void *)(a2 + *(int *)(v11 + 36)), (const void *)(a1 + *(int *)(v11 + 36)), 0x29uLL);
  return a2;
}

uint64_t sub_10004734C()
{
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_1000743B0);
  Environment.init(_:)(KeyPath);
  return v2;
}

double sub_100047384()
{
  return 0.0;
}

uint64_t sub_10004738C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v14;

  sub_10001C04C(a1, a4);
  v12 = type metadata accessor for MessagesContentView(0);
  KeyPath = swift_getKeyPath(&unk_1000744B8);
  Environment.init(_:)(KeyPath);
  v6 = a4 + *(int *)(v12 + 24);
  *(_QWORD *)v6 = a2;
  *(_BYTE *)(v6 + 8) = a3 & 1;
  v14 = *(int *)(v12 + 28);
  result = sub_10003B220(a5);
  v8 = (_QWORD *)(a4 + v14);
  *v8 = v9;
  v8[1] = result;
  return result;
}

uint64_t sub_100047440@<X0>(uint64_t a1@<X8>)
{
  return sub_100045548(a1);
}

uint64_t sub_100047454@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v12 = a2;
  v10 = a1;
  v14 = type metadata accessor for EnvironmentValues(0);
  v13 = *(_QWORD *)(v14 - 8);
  v11 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v14);
  v15 = (char *)&v10 - v11;
  v3 = (*(uint64_t (**)(char *))(v2 + 16))((char *)&v10 - v11);
  v4 = EnvironmentValues.showsWidgetBackground.getter(v3);
  v5 = v13;
  v6 = v14;
  v7 = v4;
  v8 = v15;
  *v12 = v7 & 1;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v6);
}

uint64_t sub_100047500@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100047454(a1, a2);
}

uint64_t sub_100047514(_BYTE *a1)
{
  return EnvironmentValues.showsWidgetBackground.setter(*a1 & 1);
}

uint64_t sub_10004753C(_BYTE *a1)
{
  return sub_100047514(a1);
}

unint64_t sub_100047550(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v34;

  v34 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v34 & 0x20000) != 0)
  {
    v29 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v29;
    return *(_QWORD *)a1 + ((v34 + 16) & ~(unint64_t)v34);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v27 = a2[1];
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(a1 + 8) = v27;
    v28 = a2[2];
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(a1 + 16) = v28;
    if ((unint64_t)a2[4] <= 5)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = a2[3];
      v26 = a2[4];
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(a1 + 32) = v26;
    }
    v3 = type metadata accessor for Mailbox(0);
    v22 = (void *)(a1 + *(int *)(v3 + 28));
    v23 = (char *)a2 + *(int *)(v3 + 28);
    v24 = type metadata accessor for URL(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v25 + 48))(v23, 1))
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v5 = type metadata accessor for Snapshot(0);
    v20 = a1 + *(int *)(v5 + 20);
    v21 = (uint64_t *)((char *)a2 + *(int *)(v5 + 20));
    if ((unint64_t)*v21 < 2)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_WORD *)(v20 + 16) = *((_WORD *)v21 + 8);
    }
    else
    {
      v19 = *v21;
      swift_bridgeObjectRetain(*v21);
      *(_QWORD *)v20 = v19;
      *(_QWORD *)(v20 + 8) = v21[1];
      *(_BYTE *)(v20 + 16) = *((_BYTE *)v21 + 16);
      *(_BYTE *)(v20 + 17) = *((_BYTE *)v21 + 17);
    }
    v16 = (_QWORD *)(a1 + a3[5]);
    v17 = (uint64_t *)((char *)a2 + a3[5]);
    v18 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v6 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v6 - 8) + 16))(v16, v17);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      v15 = *v17;
      swift_retain();
      *v16 = v15;
      swift_storeEnumTagMultiPayload(v16, v18, 0);
    }
    v12 = a1 + a3[6];
    v7 = (uint64_t)a2 + a3[6];
    v10 = *(_QWORD *)v7;
    v11 = *(_BYTE *)(v7 + 8);
    sub_1000454B4(*(_QWORD *)v7, v11 & 1);
    *(_QWORD *)v12 = v10;
    *(_BYTE *)(v12 + 8) = v11 & 1;
    v8 = a3[7];
    v13 = a1 + v8;
    *(_QWORD *)(a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v14 = *(uint64_t *)((char *)a2 + v8 + 8);
    swift_retain();
    *(_QWORD *)(v13 + 8) = v14;
    return a1;
  }
}

uint64_t sub_100047934(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v7 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v9 + 48))(v7, 1))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v6 >= 2uLL)
    swift_bridgeObjectRelease(*v6);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v2 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *))(*(_QWORD *)(v3 - 8) + 8))(v5);
  }
  else
  {
    swift_release();
  }
  sub_100045518(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8) & 1);
  return swift_release();
}

uint64_t sub_100047AFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v28 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v28);
  *(_QWORD *)(a1 + 8) = v28;
  v30 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v30);
  *(_QWORD *)(a1 + 16) = v30;
  if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v26 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)(a1 + 32) = v26;
  }
  v3 = type metadata accessor for Mailbox(0);
  v22 = (void *)(a1 + *(int *)(v3 + 28));
  v23 = (const void *)(a2 + *(int *)(v3 + 28));
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v25 + 48))(v23, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v5 = type metadata accessor for Snapshot(0);
  v20 = a1 + *(int *)(v5 + 20);
  v21 = (uint64_t *)(a2 + *(int *)(v5 + 20));
  if ((unint64_t)*v21 < 2)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_WORD *)(v20 + 16) = *((_WORD *)v21 + 8);
  }
  else
  {
    v19 = *v21;
    swift_bridgeObjectRetain(*v21);
    *(_QWORD *)v20 = v19;
    *(_QWORD *)(v20 + 8) = v21[1];
    *(_BYTE *)(v20 + 16) = *((_BYTE *)v21 + 16);
    *(_BYTE *)(v20 + 17) = *((_BYTE *)v21 + 17);
  }
  v16 = (_QWORD *)(a1 + a3[5]);
  v17 = (uint64_t *)(a2 + a3[5]);
  v18 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v6 - 8) + 16))(v16, v17);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    v15 = *v17;
    swift_retain();
    *v16 = v15;
    swift_storeEnumTagMultiPayload(v16, v18, 0);
  }
  v12 = a1 + a3[6];
  v7 = a2 + a3[6];
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  sub_1000454B4(*(_QWORD *)v7, v11 & 1);
  *(_QWORD *)v12 = v10;
  *(_BYTE *)(v12 + 8) = v11 & 1;
  v8 = a3[7];
  v13 = a1 + v8;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v14 = *(_QWORD *)(a2 + v8 + 8);
  swift_retain();
  result = a1;
  *(_QWORD *)(v13 + 8) = v14;
  return result;
}

uint64_t sub_100047E74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v37 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v37);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v37;
  swift_bridgeObjectRelease(v3);
  v39 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v40);
  *(_QWORD *)(a1 + 16) = v40;
  swift_bridgeObjectRelease(v39);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 32) <= 5uLL)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v34 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(a1 + 32) = v34;
    }
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v35 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v35);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v35;
    swift_bridgeObjectRelease(v4);
  }
  v5 = type metadata accessor for Mailbox(0);
  v30 = (void *)(a1 + *(int *)(v5 + 28));
  v29 = (const void *)(a2 + *(int *)(v5 + 28));
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
  if (((unsigned int (*)(void *, uint64_t))v33)(v30, 1))
  {
    if (v33(v29, 1, v31))
    {
      v7 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v30, v29, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v30, v29, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    }
  }
  else if (v33(v29, 1, v31))
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v30, v31);
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v30, v29, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 24))(v30, v29, v31);
  }
  v8 = type metadata accessor for Snapshot(0);
  v27 = (uint64_t *)(a1 + *(int *)(v8 + 20));
  v28 = (uint64_t *)(a2 + *(int *)(v8 + 20));
  if ((unint64_t)*v27 < 2)
  {
    if ((unint64_t)*v28 < 2)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_WORD *)v27 + 8) = *((_WORD *)v28 + 8);
    }
    else
    {
      v25 = *v28;
      swift_bridgeObjectRetain(*v28);
      *v27 = v25;
      v27[1] = v28[1];
      *((_BYTE *)v27 + 16) = *((_BYTE *)v28 + 16);
      *((_BYTE *)v27 + 17) = *((_BYTE *)v28 + 17);
    }
  }
  else if ((unint64_t)*v28 < 2)
  {
    sub_10000A004(v27);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_WORD *)v27 + 8) = *((_WORD *)v28 + 8);
  }
  else
  {
    v26 = *v28;
    swift_bridgeObjectRetain(*v28);
    v9 = *v27;
    *v27 = v26;
    swift_bridgeObjectRelease(v9);
    v27[1] = v28[1];
    *((_BYTE *)v27 + 16) = *((_BYTE *)v28 + 16);
    *((_BYTE *)v27 + 17) = *((_BYTE *)v28 + 17) & 1;
  }
  v23 = (uint64_t *)(a1 + a3[5]);
  v24 = (uint64_t *)(a2 + a3[5]);
  if (v23 != v24)
  {
    sub_10003B1A8((uint64_t)v23);
    v22 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v24, v22) == 1)
    {
      v10 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v10 - 8) + 16))(v23, v24);
      swift_storeEnumTagMultiPayload(v23, v22, 1);
    }
    else
    {
      v21 = *v24;
      swift_retain();
      *v23 = v21;
      swift_storeEnumTagMultiPayload(v23, v22, 0);
    }
  }
  v18 = a1 + a3[6];
  v11 = a2 + a3[6];
  v16 = *(_QWORD *)v11;
  v17 = *(_BYTE *)(v11 + 8);
  sub_1000454B4(*(_QWORD *)v11, v17 & 1);
  v12 = *(_QWORD *)v18;
  v13 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = v16;
  *(_BYTE *)(v18 + 8) = v17 & 1;
  sub_100045518(v12, v13 & 1);
  v19 = (_QWORD *)(a1 + a3[7]);
  v14 = (_QWORD *)(a2 + a3[7]);
  *v19 = *v14;
  v20 = v14[1];
  swift_retain();
  v19[1] = v20;
  swift_release();
  return a1;
}

__n128 sub_10004844C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  void *v10;
  void *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__dst;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v3 + 28));
  v16 = (const void *)(a2 + *(int *)(v3 + 28));
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v18 + 48))(v16, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(__dst, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v5 = type metadata accessor for Snapshot(0);
  v13 = a1 + *(int *)(v5 + 20);
  v14 = a2 + *(int *)(v5 + 20);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_WORD *)(v13 + 16) = *(_WORD *)(v14 + 16);
  v10 = (void *)(a1 + a3[5]);
  __src = (void *)(a2 + a3[5]);
  v12 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(__src, v12) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, void *))(*(_QWORD *)(v6 - 8) + 32))(v10, __src);
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v7 = a1 + a3[6];
  v8 = a2 + a3[6];
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  result = *(__n128 *)(a2 + a3[7]);
  *(__n128 *)(a1 + a3[7]) = result;
  return result;
}

uint64_t sub_1000486F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  void *__dst;
  void *__src;
  uint64_t *v24;
  uint64_t *v25;
  const void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(const void *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  v27 = (void *)(a1 + *(int *)(v7 + 28));
  v26 = (const void *)(a2 + *(int *)(v7 + 28));
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
  if (((unsigned int (*)(void *, uint64_t))v30)(v27, 1))
  {
    if (v30(v26, 1, v28))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v27, v26, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v27, v26, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
    }
  }
  else if (v30(v26, 1, v28))
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v27, v28);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v27, v26, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v27, v26, v28);
  }
  v10 = type metadata accessor for Snapshot(0);
  v24 = (uint64_t *)(a1 + *(int *)(v10 + 20));
  v25 = (uint64_t *)(a2 + *(int *)(v10 + 20));
  if ((unint64_t)*v24 < 2)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_WORD *)v24 + 8) = *((_WORD *)v25 + 8);
  }
  else if ((unint64_t)*v25 < 2)
  {
    sub_10000A004(v24);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_WORD *)v24 + 8) = *((_WORD *)v25 + 8);
  }
  else
  {
    v11 = *v24;
    *v24 = *v25;
    swift_bridgeObjectRelease(v11);
    v24[1] = v25[1];
    *((_BYTE *)v24 + 16) = *((_BYTE *)v25 + 16);
    *((_BYTE *)v24 + 17) = *((_BYTE *)v25 + 17) & 1;
  }
  __dst = (void *)(a1 + a3[5]);
  __src = (void *)(a2 + a3[5]);
  if (__dst != __src)
  {
    sub_10003B1A8((uint64_t)__dst);
    v21 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(__src, v21) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, void *))(*(_QWORD *)(v12 - 8) + 32))(__dst, __src);
      swift_storeEnumTagMultiPayload(__dst, v21, 1);
    }
    else
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v13 = a1 + a3[6];
  v14 = a2 + a3[6];
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  v17 = *(_QWORD *)v13;
  LOBYTE(v14) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v16 & 1;
  sub_100045518(v17, v14 & 1);
  v18 = (_QWORD *)(a1 + a3[7]);
  v19 = (_QWORD *)(a2 + a3[7]);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_release();
  return a1;
}

uint64_t sub_100048C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048C20);
}

uint64_t sub_100048C20(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for Snapshot(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (a2 == *(_DWORD *)(v13 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))(a1, a2, v12);
  }
  else
  {
    v6 = sub_100008AC0(&qword_10008BAD8);
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
    }
    else if (a2 == 2147483646)
    {
      v5 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 28) + 8) < (unint64_t)&_mh_execute_header)
        v5 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
      v3 = v5 - 1;
      if (v5 - 1 < 0)
        v3 = -1;
      return (v3 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v8;
}

uint64_t sub_100048D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048D90);
}

uint64_t sub_100048D90(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for Snapshot(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = sub_100008AC0(&qword_10008BAD8);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 2147483646)
    *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  else
    __break(1u);
  return result;
}

uint64_t sub_100048EA4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v6 = type metadata accessor for Snapshot(319);
  v7 = v6;
  if (v1 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v6 - 8) + 64;
    v2 = sub_10004392C(319);
    v7 = v2;
    if (v3 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v2 - 8) + 64;
      v8[2] = "\t";
      v8[3] = &unk_100074410;
      swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      return 0;
    }
  }
  return v7;
}

unint64_t sub_100048FA8()
{
  return sub_100046AF8();
}

uint64_t sub_100048FBC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D45C, 1);
}

uint64_t sub_100048FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100052630(a1, a2);
}

unint64_t sub_100048FF4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008BE80;
  if (!qword_10008BE80)
  {
    v2 = sub_100008DF0(&qword_10008BDE0);
    sub_100036338();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BE80);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10004907C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BE88;
  if (!qword_10008BE88)
  {
    v0 = type metadata accessor for MessageListView(255);
    WitnessTable = swift_getWitnessTable(&unk_1000742E4, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BE88);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_1000490EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *__dst;
  char *__src;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v26;

  v26 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v26) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v26, 1);
  }
  else
  {
    v23 = *a1;
    swift_retain();
    *a2 = v23;
    swift_storeEnumTagMultiPayload(a2, v26, 0);
  }
  v18 = type metadata accessor for MessageListHeaderView(0);
  v20 = (char *)a2 + *(int *)(v18 + 20);
  v22 = (char *)a1 + *(int *)(v18 + 20);
  *(_QWORD *)v20 = *(_QWORD *)v22;
  v19 = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain(v19);
  *((_QWORD *)v20 + 1) = v19;
  v21 = *((_QWORD *)v22 + 2);
  swift_bridgeObjectRetain(v21);
  *((_QWORD *)v20 + 2) = v21;
  if (*((_QWORD *)v22 + 4) <= 5uLL)
  {
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v22 + 24);
  }
  else
  {
    *((_QWORD *)v20 + 3) = *((_QWORD *)v22 + 3);
    v17 = *((_QWORD *)v22 + 4);
    swift_bridgeObjectRetain(v17);
    *((_QWORD *)v20 + 4) = v17;
  }
  v3 = type metadata accessor for Mailbox(0);
  __dst = &v20[*(int *)(v3 + 28)];
  __src = &v22[*(int *)(v3 + 28)];
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, __src, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v5 = type metadata accessor for Snapshot(0);
  v11 = &v20[*(int *)(v5 + 20)];
  v12 = &v22[*(int *)(v5 + 20)];
  if (*(_QWORD *)v12 < 2uLL)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_WORD *)v11 + 8) = *((_WORD *)v12 + 8);
  }
  else
  {
    v10 = *(_QWORD *)v12;
    swift_bridgeObjectRetain(*(_QWORD *)v12);
    *(_QWORD *)v11 = v10;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
    v11[16] = v12[16];
    v11[17] = v12[17];
  }
  v8 = *(int *)(v18 + 24);
  v9 = *(uint64_t *)((char *)a1 + v8);
  swift_retain();
  *(_QWORD *)((char *)a2 + v8) = v9;
  v6 = sub_100008AC0(&qword_10008BDE0);
  memcpy((char *)a2 + *(int *)(v6 + 36), (char *)a1 + *(int *)(v6 + 36), 0x29uLL);
  return a2;
}

id sub_100049438(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return sub_10004A190(a1);
}

uint64_t sub_100049470(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  void *v10;
  uint64_t v12;
  void **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  char v33;
  _BYTE v34[24];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v26 = a1;
  v25 = a2;
  v23 = a3;
  v24 = a4;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v32 = 0;
  v27 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v28 = (uint64_t *)((char *)&v12 - v27);
  v39 = __chkstk_darwin(v26);
  v38 = v5 & 1;
  v36 = v6;
  v37 = v7;
  v35 = v4;
  v29 = OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList;
  v30 = (_QWORD *)(v4 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  swift_beginAccess(v4 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  if (*v30)
  {
    v21 = *(id *)&v22[v29];
    v8 = v21;
    swift_endAccess(v34);
    v9 = v22;
    objc_msgSend(v21, "stopObserving:", v22);
    swift_unknownObjectRelease();

  }
  else
  {
    swift_endAccess(v34);
  }
  v13 = (void **)&v22[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList];
  v14 = &v33;
  v16 = 33;
  v17 = 0;
  swift_beginAccess(&v22[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList]);
  v10 = *v13;
  v15 = 0;
  *v13 = 0;

  swift_endAccess(v14);
  type metadata accessor for MessagesDataSource.ResultHandler(v15);
  sub_10000D0CC(v26, (uint64_t)v28);
  swift_retain();
  v19 = sub_1000496EC(v28, v23, v24);
  v32 = v19;
  swift_retain();
  v18 = &v22[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler];
  v20 = &v31;
  swift_beginAccess(&v22[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler]);
  *(_QWORD *)v18 = v19;
  swift_release();
  swift_endAccess(v20);
  if ((v25 & 1) != 0)
    sub_10004A2F4(v26);
  else
    sub_10004A564(v26, v19);
  return swift_release();
}

uint64_t sub_1000496EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return sub_100049744(a1, a2, a3);
}

uint64_t sub_100049744(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (**v15)(uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a1;
  v26 = a2;
  v28 = a3;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v19 = 0;
  v21 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v18 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = (uint64_t)&v17 - v18;
  v34 = __chkstk_darwin(v29);
  v32 = v4;
  v33 = v5;
  v31 = v3;
  v20 = OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs;
  v6 = sub_100008AC0(&qword_10008BF20);
  v7 = _allocateUninitializedArray<A>(_:)(v19, v6);
  v8 = v24;
  v9 = v7;
  v10 = v29;
  *(_QWORD *)(v3 + v20) = v9;
  sub_10000D0CC((uint64_t)v10, v8);
  sub_10000D3B8(v24, v3 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_mailbox);
  sub_10000D0CC((uint64_t)v29, v24);
  swift_retain();
  v11 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v11 + 16) & ~v11;
  v25 = (v23 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_100083DA8, v25 + 16, v11 | 7);
  sub_10000D3B8(v24, v27 + v23);
  v12 = v27;
  v13 = v28;
  v14 = (_QWORD *)(v27 + v25);
  *v14 = v26;
  v14[1] = v13;
  v15 = (void (**)(uint64_t, uint64_t))(v3
                                               + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion);
  *v15 = sub_10004A8C0;
  v15[1] = (void (*)(uint64_t, uint64_t))v12;
  swift_release();
  sub_1000133D4(v29);
  return v30;
}

void sub_100049904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  id v43;
  void **aBlock;
  int v45;
  int v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  uint64_t (*v49)();
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v27 = a1;
  v28 = a2;
  v24 = a3;
  v32 = a4;
  v33 = a5;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v35 = 0;
  v38 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v38 - 8);
  v21 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = __chkstk_darwin(0);
  v37 = (char *)&v21 - v21;
  v41 = type metadata accessor for DispatchQoS(v5);
  v39 = *(_QWORD *)(v41 - 8);
  v22 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v35);
  v40 = (char *)&v21 - v22;
  v25 = *(_QWORD *)(type metadata accessor for Mailbox(v6) - 8);
  v26 = *(_QWORD *)(v25 + 64);
  v23 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v35);
  v30 = (uint64_t)&v21 - v23;
  v55 = v7;
  v54 = v8;
  v53 = v9;
  v51 = v10;
  v52 = v11;
  sub_100008CF0();
  v43 = (id)static OS_dispatch_queue.main.getter();
  swift_bridgeObjectRetain(v27);
  swift_errorRetain(v28);
  sub_10000D0CC(v24, v30);
  swift_retain();
  v12 = *(unsigned __int8 *)(v25 + 80);
  v29 = (v12 + 32) & ~v12;
  v31 = (v29 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_100084450, v31 + 16, v12 | 7);
  v14 = v28;
  v15 = v29;
  v16 = v13;
  v17 = v30;
  v34 = v16;
  *(_QWORD *)(v16 + 16) = v27;
  *(_QWORD *)(v16 + 24) = v14;
  sub_10000D3B8(v17, v16 + v15);
  v18 = v33;
  v19 = v34;
  v20 = (_QWORD *)(v34 + v31);
  *v20 = v32;
  v20[1] = v18;
  v49 = sub_100050F3C;
  v50 = v19;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = 0;
  v47 = sub_10000A4EC;
  v48 = &unk_100084468;
  v42 = _Block_copy(&aBlock);
  swift_release();
  sub_100006E48();
  sub_100006E5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v35, v40, v37, v42);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  _Block_release(v42);

}

uint64_t sub_100049C00(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v40 = a1;
  v39 = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v43 = 0;
  v33 = 0;
  v41 = 0;
  v37 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v38 = (uint64_t *)((char *)&v19 - v37);
  v49 = __chkstk_darwin(v40);
  v48 = v5;
  v47 = v6;
  v45 = v7;
  v46 = v8;
  swift_bridgeObjectRetain(v49);
  swift_errorRetain(v39);
  if (!v40)
  {
    if (v39)
    {
      v23 = v39;
      v22 = v39;
      swift_errorRetain(v39);
      v44 = v22;
      swift_retain();
      swift_errorRetain(v22);
      v21 = 1;
      v35(v22);
      sub_100011994(v22, v21 & 1);
      swift_release();
      swift_errorRelease(v22);
      swift_bridgeObjectRelease(v40);
      return swift_errorRelease(v39);
    }
    goto LABEL_8;
  }
  v32 = v40;
  v31 = v40;
  if (v39)
  {
LABEL_8:
    swift_retain();
    v13 = sub_1000125A4();
    v20 = 1;
    v14 = swift_allocError(&unk_100081B08, v13, 0, 0);
    v15 = v35;
    v19 = v14;
    v17 = v16;
    v18 = v20;
    *v17 = 0;
    ((void (*)(uint64_t, uint64_t))v15)(v14, v18);
    sub_100011994(v19, v20 & 1);
    swift_release();
    swift_bridgeObjectRelease(v40);
    return swift_errorRelease(v39);
  }
  v9 = v33;
  swift_bridgeObjectRetain(v31);
  v43 = v31;
  v42 = v31;
  sub_10000D0CC(v34, (uint64_t)v38);
  v26 = &v19;
  __chkstk_darwin(&v19);
  v27 = &v19 - 4;
  *(&v19 - 2) = v10;
  v28 = sub_100008AC0(&qword_10008B1B0);
  v29 = type metadata accessor for Message(0);
  v11 = sub_100051014();
  result = Sequence.compactMap<A>(_:)(sub_100050FF0, v27, v28, v29, v11);
  v30 = result;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    v25 = v30;
    sub_1000133D4(v38);
    v41 = v25;
    swift_retain();
    swift_bridgeObjectRetain(v25);
    v24 = 0;
    v35(v25);
    sub_100011994(v25, v24 & 1);
    swift_release();
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v40);
    return swift_errorRelease(v39);
  }
  return result;
}

char *sub_100049F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v10 = a3;
  v7 = a1;
  v9 = a2;
  v14 = 0;
  v13 = 0;
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Mailbox(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (uint64_t *)((char *)&v6 - v8);
  v12 = *(void **)__chkstk_darwin(v7);
  v14 = v12;
  v13 = v3;
  v4 = v12;
  sub_10000D0CC(v9, (uint64_t)v11);
  return sub_10002C71C(v12, v11, v10);
}

uint64_t sub_10004A024()
{
  uint64_t v0;
  uint64_t v2;

  sub_1000133D4((_QWORD *)(v0 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_mailbox));
  sub_10000A004((_QWORD *)(v0 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs));
  swift_release();
  return v2;
}

uint64_t sub_10004A080()
{
  uint64_t v0;

  v0 = sub_10004A024();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004A0C0()
{
  uint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  sub_100003474(v2, qword_10008BE90);
  sub_1000034E4(v2, (uint64_t)qword_10008BE90);
  v0 = type metadata accessor for MessagesDataSource();
  return sub_100014544(v0, v0);
}

uint64_t sub_10004A124()
{
  uint64_t v0;

  if (qword_10008AAB0 != -1)
    swift_once(&qword_10008AAB0, sub_10004A0C0);
  v0 = type metadata accessor for Logger(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008BE90);
}

void *sub_10004A184()
{
  return &unk_1000744F0;
}

id sub_10004A190(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  id v5;
  id v6;
  objc_class *ObjectType;
  id v10;
  objc_super v11;
  void *v12;
  id v13;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v12 = a1;
  v2 = v1;
  v3 = v1;
  v4 = v1;
  v13 = v1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList] = 0;

  *(_QWORD *)&v1[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler] = 0;
  v5 = a1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageRepository] = a1;

  v11.receiver = v13;
  v11.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v11, "init");
  v6 = v10;
  v13 = v10;

  return v10;
}

uint64_t type metadata accessor for MessagesDataSource.ResultHandler(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008BFF0;
  if (!qword_10008BFF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessagesDataSource.ResultHandler);
  return v2;
}

void sub_10004A2F4(uint64_t a1)
{
  _QWORD *v1;
  Swift::String v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char *v7;
  id v8;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  id v15;
  char *v16;
  void **v17;
  id v18;
  uint64_t v19;
  char *v20;
  _BYTE v21[24];
  char v22[24];
  id v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = a1;
  sub_100008AC0((uint64_t *)&unk_10008BF30);
  v14 = sub_1000143B0();
  sub_10001B688();
  v12 = sub_1000684D0(a1);
  v10 = sub_10001AB38();
  v11 = _allocateUninitializedArray<A>(_:)(1, v10);
  *v1 = objc_msgSend((id)objc_opt_self(EMMessageListItemPredicates), "sortDescriptorForDateAscending:", 0);
  sub_1000073C4();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Widget.DaemonDataSource.ThreadedMessages", 0x28uLL, 1);
  v15 = sub_10001F67C(v14, v12, v11, 8, v2._countAndFlagsBits, (uint64_t)v2._object);
  v23 = v15;
  sub_100008AC0((uint64_t *)&unk_10008BF50);
  v3 = v15;
  v13 = *(void **)&v16[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageRepository];
  v4 = v13;
  v18 = sub_10004A94C(v15, v13);
  v17 = (void **)&v16[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList];
  swift_beginAccess(&v16[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList]);
  v5 = *v17;
  *v17 = v18;

  swift_endAccess(v22);
  v19 = OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList;
  v20 = &v16[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList];
  swift_beginAccess(&v16[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList]);
  if (*(_QWORD *)v20)
  {
    v8 = *(id *)&v16[v19];
    v6 = v8;
    swift_endAccess(v21);
    v7 = v16;
    objc_msgSend(v8, "beginObserving:", v16);
    swift_unknownObjectRelease();

  }
  else
  {
    swift_endAccess(v21);
  }

}

uint64_t sub_10004A564(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  Swift::String v3;
  id v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  id v10;
  uint64_t v11;
  const void *v13;
  id v14;
  id v15;
  void **aBlock;
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, void *, void *);
  void *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = 0;
  v27 = a1;
  v26 = a2;
  v6 = sub_10001AB38();
  v7 = _allocateUninitializedArray<A>(_:)(1, v6);
  *v2 = objc_msgSend((id)objc_opt_self(EMMessageListItemPredicates), "sortDescriptorForDateAscending:", 0);
  sub_1000073C4();
  v24 = v7;
  sub_100008AC0((uint64_t *)&unk_10008BF30);
  v9 = sub_1000142E8();
  sub_10001B688();
  v10 = sub_1000684D0(a1);
  swift_bridgeObjectRetain(v7);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Widget.DaemonDataSource.NonThreadedMessages", 0x2BuLL, 1);
  v15 = sub_10001F67C(v9, v10, v7, 8, v3._countAndFlagsBits, (uint64_t)v3._object);
  v23 = v15;
  v14 = *(id *)(v11 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageRepository);
  v4 = v14;
  swift_retain();
  v21 = sub_10004ABA4;
  v22 = a2;
  aBlock = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = 0;
  v19 = sub_10004AD38;
  v20 = &unk_100083DC0;
  v13 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v14, "performQuery:limit:completionHandler:", v15, 4, v13);
  _Block_release(v13);

  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10004A774()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = ((v8 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 16));
  if (*(_QWORD *)(v0 + v8 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v8 + 32));
  v3 = v6 + v8 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();
  return swift_deallocObject(v6, v9);
}

void sub_10004A8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v2 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100049904(a1, a2, v2 + v4, *v5, v5[1]);
}

uint64_t type metadata accessor for MessagesDataSource()
{
  return objc_opt_self(_TtC19MailWidgetExtension18MessagesDataSource);
}

id sub_10004A94C(void *a1, void *a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_10004EC0C(a1, a2);
}

void sub_10004A99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void **aBlock;
  int v27;
  int v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v17 = 0;
  v20 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v20 - 8);
  v12 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(0);
  v19 = (char *)&v11 - v12;
  v23 = type metadata accessor for DispatchQoS(v3);
  v21 = *(_QWORD *)(v23 - 8);
  v13 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v17);
  v22 = (char *)&v11 - v13;
  v35 = v4;
  v34 = v5;
  v33 = v6;
  sub_100008CF0();
  v25 = (id)static OS_dispatch_queue.main.getter();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  swift_errorRetain(v15);
  v7 = swift_allocObject(&unk_100084400, 40, 7);
  v8 = v15;
  v9 = (_QWORD *)v7;
  v10 = v16;
  v9[2] = v14;
  v9[3] = v10;
  v9[4] = v8;
  v31 = sub_100050D70;
  v32 = v9;
  aBlock = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = 0;
  v29 = sub_10000A4EC;
  v30 = &unk_100084418;
  v24 = _Block_copy(&aBlock);
  swift_release();
  sub_100006E48();
  sub_100006E5C();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v17, v22, v19, v24);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
  _Block_release(v24);

}

void sub_10004ABA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10004A99C(a1, a2, v2);
}

uint64_t sub_10004ABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(void (**)(uint64_t, uint64_t))(a1
                                               + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion + 8);
  swift_retain(v7);
  v6(a2, a3);
  return swift_release(v7);
}

uint64_t sub_10004AC28()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  if (!"MailWidgetExtension.MessagesDataSource")
  {
    v1 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v1, 136, 0);
    __break(1u);
  }
  result = sub_10004F064((uint64_t)"MailWidgetExtension.MessagesDataSource", 38, (unint64_t)"init()", 6, 2, (unint64_t)"MailWidgetExtension/MessagesDataSource.swift", 44, 2, v2, 0xAuLL, 0xDuLL);
  __break(1u);
  return result;
}

uint64_t sub_10004AD38(uint64_t a1, void *a2, void *a3)
{
  id v3;
  id v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t);

  v10 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3 = a2;
  if (a2)
  {
    sub_1000142E8();
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2);

    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v4 = a3;
  if (a3)
    v6 = a3;
  else
    v6 = 0;
  v10(v8);
  swift_errorRelease(v6);
  swift_bridgeObjectRelease(v8);
  return swift_release();
}

uint64_t sub_10004AE58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_10004AE9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004AF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t *v79;
  _BYTE **v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint32_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  _BYTE **v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint32_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  NSObject *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  char *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint32_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  v135 = a1;
  v134 = a2;
  v132 = a3;
  v162 = 0;
  v161 = 0;
  v160 = 0;
  v159 = 0;
  v133 = 0;
  v131 = 0;
  v152 = 0;
  v136 = type metadata accessor for Logger(0);
  v137 = *(_QWORD *)(v136 - 8);
  v138 = (*(_QWORD *)(v137 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v135);
  v139 = (char *)&v70 - v138;
  v140 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v141 = (char *)&v70 - v140;
  v162 = v6;
  v161 = v7;
  v160 = v8;
  v159 = v3;
  v142 = (uint64_t *)(v3 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  v143 = (char *)&v158 + 4;
  swift_beginAccess(v3 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  v144 = *v142;
  swift_retain();
  swift_endAccess(v143);
  if (v144)
  {
    v130 = v144;
    v9 = v141;
    v105 = v144;
    v152 = v144;
    v10 = sub_10004A124();
    (*(void (**)(char *, uint64_t, uint64_t))(v137 + 16))(v9, v10, v136);
    swift_bridgeObjectRetain(v134);
    v106 = 24;
    v116 = 7;
    v11 = swift_allocObject(&unk_100083DF8, 24, 7);
    v12 = v132;
    v111 = v11;
    *(_QWORD *)(v11 + 16) = v134;
    swift_unknownObjectRetain(v12);
    v13 = swift_allocObject(&unk_100083E20, v106, v116);
    v117 = v13;
    *(_QWORD *)(v13 + 16) = v132;
    v128 = Logger.logObject.getter(v13);
    v129 = static os_log_type_t.default.getter();
    v109 = &v150;
    v150 = 22;
    v107 = sub_1000079AC();
    v108 = sub_100007A14();
    v14 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v151, v109, &type metadata for UInt32, &type metadata for Int, v107, v108, v14);
    v110 = v151;
    v113 = 17;
    v15 = swift_allocObject(&unk_100083E48, 17, v116);
    v16 = v113;
    v17 = v116;
    v119 = v15;
    *(_BYTE *)(v15 + 16) = 0;
    v18 = swift_allocObject(&unk_100083E70, v16, v17);
    v19 = v116;
    v120 = v18;
    v114 = 8;
    *(_BYTE *)(v18 + 16) = 8;
    v115 = 32;
    v20 = swift_allocObject(&unk_100083E98, 32, v19);
    v21 = v115;
    v22 = v116;
    v23 = v20;
    v24 = v111;
    v112 = v23;
    *(_QWORD *)(v23 + 16) = sub_10004ECA4;
    *(_QWORD *)(v23 + 24) = v24;
    v25 = swift_allocObject(&unk_100083EC0, v21, v22);
    v26 = v113;
    v27 = v116;
    v28 = v25;
    v29 = v112;
    v121 = v28;
    *(_QWORD *)(v28 + 16) = sub_10000A290;
    *(_QWORD *)(v28 + 24) = v29;
    v30 = swift_allocObject(&unk_100083EE8, v26, v27);
    v31 = v113;
    v32 = v116;
    v122 = v30;
    *(_BYTE *)(v30 + 16) = 32;
    v33 = swift_allocObject(&unk_100083F10, v31, v32);
    v34 = v115;
    v35 = v116;
    v123 = v33;
    *(_BYTE *)(v33 + 16) = v114;
    v36 = swift_allocObject(&unk_100083F38, v34, v35);
    v37 = v115;
    v38 = v116;
    v39 = v36;
    v40 = v117;
    v118 = v39;
    *(_QWORD *)(v39 + 16) = sub_10004ECE8;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = swift_allocObject(&unk_100083F60, v37, v38);
    v42 = v118;
    v125 = v41;
    *(_QWORD *)(v41 + 16) = sub_100008A6C;
    *(_QWORD *)(v41 + 24) = v42;
    v127 = sub_100008AC0(&qword_10008AB20);
    v124 = _allocateUninitializedArray<A>(_:)(6, v127);
    v126 = v43;
    swift_retain();
    v44 = v119;
    v45 = v126;
    *v126 = sub_100008A00;
    v45[1] = v44;
    swift_retain();
    v46 = v120;
    v47 = v126;
    v126[2] = sub_100008A00;
    v47[3] = v46;
    swift_retain();
    v48 = v121;
    v49 = v126;
    v126[4] = sub_10000A2D8;
    v49[5] = v48;
    swift_retain();
    v50 = v122;
    v51 = v126;
    v126[6] = sub_100008A00;
    v51[7] = v50;
    swift_retain();
    v52 = v123;
    v53 = v126;
    v126[8] = sub_100008A00;
    v53[9] = v52;
    swift_retain();
    v54 = v124;
    v55 = v125;
    v56 = v126;
    v126[10] = sub_100008AB4;
    v56[11] = v55;
    sub_1000073C4();
    swift_bridgeObjectRelease(v54);
    if (os_log_type_enabled(v128, (os_log_type_t)v129))
    {
      v57 = v131;
      v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
      v96 = sub_100008AC0(&qword_10008AB30);
      v98 = sub_1000076F4(0, v96, v96);
      v99 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v101 = &v149;
      v149 = v97;
      v102 = &v148;
      v148 = v98;
      v103 = &v147;
      v147 = v99;
      v100 = 2;
      sub_10000774C(2, &v149);
      sub_10000774C(v100, v101);
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v146 = v119;
      sub_100007760(&v145, (uint64_t)v101, (uint64_t)v102, (uint64_t)v103);
      v104 = v57;
      if (v57)
      {
        __break(1u);
      }
      else
      {
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v120;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v95 = 0;
        v58 = v95;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
        v146 = v121;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v94 = v58;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v122;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v93 = 0;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v123;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v92 = 0;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v146 = v125;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "Added %ld item IDs, before %s", v97, v110);
        sub_1000077A4(v98, 0);
        sub_1000077A4(v99, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v137 + 8))(v141, v136);
    swift_unknownObjectRetain(v132);
    v91 = 0;
    sub_10004BDE0(v134, v132, 0);
    sub_10004FF80(v132);
    return swift_release();
  }
  else
  {
    v60 = v139;
    v61 = sub_10004A124();
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 16))(v60, v61, v136);
    v89 = Logger.logObject.getter(v62);
    v88 = static os_log_type_t.error.getter();
    v86 = &v157;
    v157 = 2;
    v84 = sub_1000079AC();
    v85 = sub_100007A14();
    v63 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v158, v86, &type metadata for UInt32, &type metadata for Int, v84, v85, v63);
    v87 = v158;
    v64 = sub_100008AC0(&qword_10008AB20);
    v90 = _allocateUninitializedArray<A>(_:)(0, v64);
    if (os_log_type_enabled(v89, (os_log_type_t)v88))
    {
      v65 = v131;
      v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v72 = sub_100008AC0(&qword_10008AB30);
      v73 = 0;
      v75 = sub_1000076F4(0, v72, v72);
      v76 = sub_1000076F4(v73, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v80 = &v156;
      v156 = v74;
      v81 = &v155;
      v155 = v75;
      v78 = &v154;
      v154 = v76;
      v77 = 0;
      sub_10000774C(0, &v156);
      sub_10000774C(v77, v80);
      v153 = v90;
      v79 = &v70;
      __chkstk_darwin(&v70);
      v66 = v81;
      v67 = &v70 - 6;
      v82 = &v70 - 6;
      v67[2] = (uint64_t)v80;
      v67[3] = (uint64_t)v66;
      v67[4] = v68;
      v83 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v69 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v82, v83, v69);
      if (v65)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "Collection added item ids before itemID but there is no result handler", v74, v87);
        v71 = 0;
        sub_1000077A4(v75, 0);
        sub_1000077A4(v76, v71);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v90);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v90);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v139, v136);
  }
}

uint64_t sub_10004BD64(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008BF20);
  return Array.count.getter(a1, v1);
}

uint64_t sub_10004BD98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  swift_unknownObjectRetain(a1);
  v4 = a1;
  v1 = sub_100008AC0((uint64_t *)&unk_10008C0E8);
  return String.init<A>(describing:)(&v4, v1);
}

uint64_t sub_10004BDE0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  _QWORD v44[3];
  char v45;
  uint64_t v46;

  v28 = a1;
  v29 = a2;
  v30 = a3;
  v44[1] = 0;
  v42 = 0;
  v32 = 0;
  v37 = 0;
  v46 = a1;
  v44[2] = a2;
  v45 = a3 & 1;
  v33 = sub_10004EAB0(a2);
  if (!v33)
    goto LABEL_12;
  v27 = v33;
  v22 = v33;
  v42 = v33;
  v19 = (uint64_t *)(v31 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
  v20 = v39;
  swift_beginAccess(v31 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
  v21 = *v19;
  swift_bridgeObjectRetain(v21);
  swift_endAccess(v39);
  v38 = v21;
  swift_unknownObjectRetain(v33);
  v23 = &v9;
  __chkstk_darwin(&v9);
  v24 = v8;
  v8[2] = v3;
  v25 = sub_100008AC0(&qword_10008BF60);
  v26 = sub_100050054();
  Collection.firstIndex(where:)(&v40, sub_10005002C, v24, v25);
  swift_unknownObjectRelease();
  sub_10000A004(&v38);
  v18 = v40;
  if ((v41 & 1) != 0)
  {
    swift_unknownObjectRelease();
LABEL_12:
    swift_bridgeObjectRetain(v28);
    v11 = v44;
    v44[0] = v28;
    v12 = &v43;
    swift_beginAccess(v31 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    v10 = sub_100008AC0(&qword_10008BF60);
    v7 = sub_10004FFBC();
    Array.append<A>(contentsOf:)(v11, v10, v10, v7);
    return swift_endAccess(v12);
  }
  v17 = v18;
  v15 = v18;
  v37 = v18;
  swift_bridgeObjectRetain(v28);
  v36 = v28;
  result = sub_10004EBBC(v29, v30 & 1);
  v16 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
  }
  else
  {
    v13 = &v35;
    v35 = v16;
    v14 = &v34;
    swift_beginAccess(v31 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    v6 = sub_1000500C4();
    RangeReplaceableCollection.insert<A>(contentsOf:at:)(&v36, v13, v25, v25, v6, v26);
    swift_endAccess(v14);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10004C21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t *v79;
  _BYTE **v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint32_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  _BYTE **v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint32_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  NSObject *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  char *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint32_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  v135 = a1;
  v134 = a2;
  v132 = a3;
  v162 = 0;
  v161 = 0;
  v160 = 0;
  v159 = 0;
  v133 = 0;
  v131 = 0;
  v152 = 0;
  v136 = type metadata accessor for Logger(0);
  v137 = *(_QWORD *)(v136 - 8);
  v138 = (*(_QWORD *)(v137 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v135);
  v139 = (char *)&v70 - v138;
  v140 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v141 = (char *)&v70 - v140;
  v162 = v6;
  v161 = v7;
  v160 = v8;
  v159 = v3;
  v142 = (uint64_t *)(v3 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  v143 = (char *)&v158 + 4;
  swift_beginAccess(v3 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  v144 = *v142;
  swift_retain();
  swift_endAccess(v143);
  if (v144)
  {
    v130 = v144;
    v9 = v141;
    v105 = v144;
    v152 = v144;
    v10 = sub_10004A124();
    (*(void (**)(char *, uint64_t, uint64_t))(v137 + 16))(v9, v10, v136);
    swift_bridgeObjectRetain(v134);
    v106 = 24;
    v116 = 7;
    v11 = swift_allocObject(&unk_100083F88, 24, 7);
    v12 = v132;
    v111 = v11;
    *(_QWORD *)(v11 + 16) = v134;
    swift_unknownObjectRetain(v12);
    v13 = swift_allocObject(&unk_100083FB0, v106, v116);
    v117 = v13;
    *(_QWORD *)(v13 + 16) = v132;
    v128 = Logger.logObject.getter(v13);
    v129 = static os_log_type_t.default.getter();
    v109 = &v150;
    v150 = 22;
    v107 = sub_1000079AC();
    v108 = sub_100007A14();
    v14 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v151, v109, &type metadata for UInt32, &type metadata for Int, v107, v108, v14);
    v110 = v151;
    v113 = 17;
    v15 = swift_allocObject(&unk_100083FD8, 17, v116);
    v16 = v113;
    v17 = v116;
    v119 = v15;
    *(_BYTE *)(v15 + 16) = 0;
    v18 = swift_allocObject(&unk_100084000, v16, v17);
    v19 = v116;
    v120 = v18;
    v114 = 8;
    *(_BYTE *)(v18 + 16) = 8;
    v115 = 32;
    v20 = swift_allocObject(&unk_100084028, 32, v19);
    v21 = v115;
    v22 = v116;
    v23 = v20;
    v24 = v111;
    v112 = v23;
    *(_QWORD *)(v23 + 16) = sub_10004ECA4;
    *(_QWORD *)(v23 + 24) = v24;
    v25 = swift_allocObject(&unk_100084050, v21, v22);
    v26 = v113;
    v27 = v116;
    v28 = v25;
    v29 = v112;
    v121 = v28;
    *(_QWORD *)(v28 + 16) = sub_10000A290;
    *(_QWORD *)(v28 + 24) = v29;
    v30 = swift_allocObject(&unk_100084078, v26, v27);
    v31 = v113;
    v32 = v116;
    v122 = v30;
    *(_BYTE *)(v30 + 16) = 32;
    v33 = swift_allocObject(&unk_1000840A0, v31, v32);
    v34 = v115;
    v35 = v116;
    v123 = v33;
    *(_BYTE *)(v33 + 16) = v114;
    v36 = swift_allocObject(&unk_1000840C8, v34, v35);
    v37 = v115;
    v38 = v116;
    v39 = v36;
    v40 = v117;
    v118 = v39;
    *(_QWORD *)(v39 + 16) = sub_10004ECE8;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = swift_allocObject(&unk_1000840F0, v37, v38);
    v42 = v118;
    v125 = v41;
    *(_QWORD *)(v41 + 16) = sub_100008A6C;
    *(_QWORD *)(v41 + 24) = v42;
    v127 = sub_100008AC0(&qword_10008AB20);
    v124 = _allocateUninitializedArray<A>(_:)(6, v127);
    v126 = v43;
    swift_retain();
    v44 = v119;
    v45 = v126;
    *v126 = sub_100008A00;
    v45[1] = v44;
    swift_retain();
    v46 = v120;
    v47 = v126;
    v126[2] = sub_100008A00;
    v47[3] = v46;
    swift_retain();
    v48 = v121;
    v49 = v126;
    v126[4] = sub_10000A2D8;
    v49[5] = v48;
    swift_retain();
    v50 = v122;
    v51 = v126;
    v126[6] = sub_100008A00;
    v51[7] = v50;
    swift_retain();
    v52 = v123;
    v53 = v126;
    v126[8] = sub_100008A00;
    v53[9] = v52;
    swift_retain();
    v54 = v124;
    v55 = v125;
    v56 = v126;
    v126[10] = sub_100008AB4;
    v56[11] = v55;
    sub_1000073C4();
    swift_bridgeObjectRelease(v54);
    if (os_log_type_enabled(v128, (os_log_type_t)v129))
    {
      v57 = v131;
      v97 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22, &type metadata for UInt8);
      v96 = sub_100008AC0(&qword_10008AB30);
      v98 = sub_1000076F4(0, v96, v96);
      v99 = sub_1000076F4(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v101 = &v149;
      v149 = v97;
      v102 = &v148;
      v148 = v98;
      v103 = &v147;
      v147 = v99;
      v100 = 2;
      sub_10000774C(2, &v149);
      sub_10000774C(v100, v101);
      v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v146 = v119;
      sub_100007760(&v145, (uint64_t)v101, (uint64_t)v102, (uint64_t)v103);
      v104 = v57;
      if (v57)
      {
        __break(1u);
      }
      else
      {
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v120;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v95 = 0;
        v58 = v95;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A2D8;
        v146 = v121;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v94 = v58;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v122;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v93 = 0;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v146 = v123;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        v92 = 0;
        v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008AB4;
        v146 = v125;
        sub_100007760(&v145, (uint64_t)&v149, (uint64_t)&v148, (uint64_t)&v147);
        _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "Added %ld item IDs, after %s", v97, v110);
        sub_1000077A4(v98, 0);
        sub_1000077A4(v99, 1);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v137 + 8))(v141, v136);
    swift_unknownObjectRetain(v132);
    v91 = 1;
    sub_10004BDE0(v134, v132, 1);
    sub_10004FF80(v132);
    return swift_release();
  }
  else
  {
    v60 = v139;
    v61 = sub_10004A124();
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 16))(v60, v61, v136);
    v89 = Logger.logObject.getter(v62);
    v88 = static os_log_type_t.error.getter();
    v86 = &v157;
    v157 = 2;
    v84 = sub_1000079AC();
    v85 = sub_100007A14();
    v63 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v158, v86, &type metadata for UInt32, &type metadata for Int, v84, v85, v63);
    v87 = v158;
    v64 = sub_100008AC0(&qword_10008AB20);
    v90 = _allocateUninitializedArray<A>(_:)(0, v64);
    if (os_log_type_enabled(v89, (os_log_type_t)v88))
    {
      v65 = v131;
      v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v72 = sub_100008AC0(&qword_10008AB30);
      v73 = 0;
      v75 = sub_1000076F4(0, v72, v72);
      v76 = sub_1000076F4(v73, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v80 = &v156;
      v156 = v74;
      v81 = &v155;
      v155 = v75;
      v78 = &v154;
      v154 = v76;
      v77 = 0;
      sub_10000774C(0, &v156);
      sub_10000774C(v77, v80);
      v153 = v90;
      v79 = &v70;
      __chkstk_darwin(&v70);
      v66 = v81;
      v67 = &v70 - 6;
      v82 = &v70 - 6;
      v67[2] = (uint64_t)v80;
      v67[3] = (uint64_t)v66;
      v67[4] = v68;
      v83 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v69 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v82, v83, v69);
      if (v65)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "Collection added item ids after itemID but there is no result handler", v74, v87);
        v71 = 0;
        sub_1000077A4(v75, 0);
        sub_1000077A4(v76, v71);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v90);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v90);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v139, v136);
  }
}

void sub_10004D0F4(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  _BYTE **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint32_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint32_t v48;
  uint64_t v49;
  uint64_t v50;

  v30 = a1;
  v50 = 0;
  v49 = 0;
  v28 = 0;
  v39 = 0;
  v34 = type metadata accessor for Logger(0);
  v33 = *(_QWORD *)(v34 - 8);
  v31 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v30);
  v1 = (char *)&v15 - v31;
  v32 = (char *)&v15 - v31;
  v50 = v2;
  v49 = v3;
  v4 = sub_10004A124();
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 16))(v1, v4, v34);
  v41 = Logger.logObject.getter(v5);
  v40 = static os_log_type_t.default.getter();
  v37 = &v47;
  v47 = 2;
  v35 = sub_1000079AC();
  v36 = sub_100007A14();
  v6 = sub_100007A7C();
  UnsignedInteger<>.init<A>(_:)(&v48, v37, &type metadata for UInt32, &type metadata for Int, v35, v36, v6);
  v38 = v48;
  v7 = sub_100008AC0(&qword_10008AB20);
  v42 = _allocateUninitializedArray<A>(_:)(v39, v7);
  if (os_log_type_enabled(v41, (os_log_type_t)v40))
  {
    v8 = v28;
    v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
    v16 = sub_100008AC0(&qword_10008AB30);
    v17 = 0;
    v19 = sub_1000076F4(0, v16, v16);
    v20 = sub_1000076F4(v17, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v24 = &v46;
    v46 = v18;
    v25 = &v45;
    v45 = v19;
    v22 = &v44;
    v44 = v20;
    v21 = 0;
    sub_10000774C(0, &v46);
    sub_10000774C(v21, v24);
    v43 = v42;
    v23 = &v15;
    __chkstk_darwin(&v15);
    v9 = v25;
    v10 = &v15 - 6;
    v26 = &v15 - 6;
    v10[2] = (uint64_t)v24;
    v10[3] = (uint64_t)v9;
    v10[4] = v11;
    v27 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
    v12 = sub_100008D80();
    Sequence.forEach(_:)(sub_100008D54, v26, v27, v12);
    if (v8)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "Did finish initial load", v18, v38);
      v15 = 0;
      sub_1000077A4(v19, 0);
      sub_1000077A4(v20, v15);
      UnsafeMutablePointer.deallocate()();
      swift_bridgeObjectRelease(v42);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v42);
  }
  v13 = v29;

  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
  swift_getObjectType(v30);
  v14 = v13;
  objc_msgSend(v30, "stopObserving:", v13);
  swift_unknownObjectRelease();
  sub_10004D4A4();
}

void sub_10004D4A4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, uint64_t);
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint32_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  NSObject *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  Class isa;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t *v154;
  uint64_t *v155;
  _BYTE **v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint32_t v163;
  int v164;
  NSObject *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  id v173;
  char *v174;
  char *v175;
  uint64_t v176;
  id v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  id *v187;
  char *v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint32_t v195;
  void **aBlock;
  int v197;
  int v198;
  uint64_t (*v199)(uint64_t, void *, void *);
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  id v206;
  uint64_t (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE v212[24];
  uint64_t v213;
  _QWORD v214[3];
  uint64_t v215;

  v215 = 0;
  v180 = 0;
  v179 = 0;
  v206 = 0;
  v204 = 0;
  v181 = type metadata accessor for Logger(0);
  v182 = *(_QWORD *)(v181 - 8);
  v183 = (*(_QWORD *)(v182 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v181);
  v184 = (char *)&v90 - v183;
  v185 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v90 - v183);
  v186 = (char *)&v90 - v185;
  v215 = v0;
  v187 = (id *)(v0 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  v188 = (char *)v214 + 4;
  swift_beginAccess(v0 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  v189 = *v187;
  v2 = v189;
  swift_endAccess(v188);
  if (!v189)
  {
LABEL_16:
    v15 = v184;
    v16 = sub_10004A124();
    (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v15, v16, v181);
    v17 = v178;
    v110 = 24;
    v124 = 7;
    v18 = swift_allocObject(&unk_100084118, 24, 7);
    v19 = v178;
    v115 = v18;
    *(_QWORD *)(v18 + 16) = v178;
    v20 = v19;
    v21 = swift_allocObject(&unk_100084140, v110, v124);
    v121 = v21;
    *(_QWORD *)(v21 + 16) = v178;
    v136 = Logger.logObject.getter(v21);
    v137 = static os_log_type_t.error.getter();
    v113 = &v213;
    v213 = 14;
    v111 = sub_1000079AC();
    v112 = sub_100007A14();
    v22 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(v214, v113, &type metadata for UInt32, &type metadata for Int, v111, v112, v22);
    v114 = v214[0];
    v119 = 17;
    v23 = swift_allocObject(&unk_100084168, 17, v124);
    v24 = v119;
    v25 = v124;
    v127 = v23;
    *(_BYTE *)(v23 + 16) = 0;
    v26 = swift_allocObject(&unk_100084190, v24, v25);
    v27 = v124;
    v128 = v26;
    v120 = 4;
    *(_BYTE *)(v26 + 16) = 4;
    v123 = 32;
    v28 = swift_allocObject(&unk_1000841B8, 32, v27);
    v29 = v123;
    v30 = v124;
    v31 = v28;
    v32 = v115;
    v116 = v31;
    *(_QWORD *)(v31 + 16) = sub_100050378;
    *(_QWORD *)(v31 + 24) = v32;
    v33 = swift_allocObject(&unk_1000841E0, v29, v30);
    v34 = v123;
    v35 = v124;
    v36 = v33;
    v37 = v116;
    v117 = v36;
    *(_QWORD *)(v36 + 16) = sub_100011DE4;
    *(_QWORD *)(v36 + 24) = v37;
    v38 = swift_allocObject(&unk_100084208, v34, v35);
    v39 = v123;
    v40 = v124;
    v41 = v38;
    v42 = v117;
    v118 = v41;
    *(_QWORD *)(v41 + 16) = sub_100008A6C;
    *(_QWORD *)(v41 + 24) = v42;
    v43 = swift_allocObject(&unk_100084230, v39, v40);
    v44 = v119;
    v45 = v124;
    v46 = v43;
    v47 = v118;
    v129 = v46;
    *(_QWORD *)(v46 + 16) = sub_100011E68;
    *(_QWORD *)(v46 + 24) = v47;
    v48 = swift_allocObject(&unk_100084258, v44, v45);
    v49 = v119;
    v50 = v124;
    v130 = v48;
    *(_BYTE *)(v48 + 16) = 0;
    v51 = swift_allocObject(&unk_100084280, v49, v50);
    v52 = v123;
    v53 = v124;
    v131 = v51;
    *(_BYTE *)(v51 + 16) = v120;
    v54 = swift_allocObject(&unk_1000842A8, v52, v53);
    v55 = v123;
    v56 = v124;
    v57 = v54;
    v58 = v121;
    v122 = v57;
    *(_QWORD *)(v57 + 16) = sub_1000503BC;
    *(_QWORD *)(v57 + 24) = v58;
    v59 = swift_allocObject(&unk_1000842D0, v55, v56);
    v60 = v123;
    v61 = v124;
    v62 = v59;
    v63 = v122;
    v125 = v62;
    *(_QWORD *)(v62 + 16) = sub_100011DE4;
    *(_QWORD *)(v62 + 24) = v63;
    v64 = swift_allocObject(&unk_1000842F8, v60, v61);
    v65 = v123;
    v66 = v124;
    v67 = v64;
    v68 = v125;
    v126 = v67;
    *(_QWORD *)(v67 + 16) = sub_100008A6C;
    *(_QWORD *)(v67 + 24) = v68;
    v69 = swift_allocObject(&unk_100084320, v65, v66);
    v70 = v126;
    v133 = v69;
    *(_QWORD *)(v69 + 16) = sub_100011E68;
    *(_QWORD *)(v69 + 24) = v70;
    v135 = sub_100008AC0(&qword_10008AB20);
    v132 = _allocateUninitializedArray<A>(_:)(6, v135);
    v134 = v71;
    swift_retain();
    v72 = v127;
    v73 = v134;
    *v134 = sub_100008A00;
    v73[1] = v72;
    swift_retain();
    v74 = v128;
    v75 = v134;
    v134[2] = sub_100008A00;
    v75[3] = v74;
    swift_retain();
    v76 = v129;
    v77 = v134;
    v134[4] = sub_100011EB0;
    v77[5] = v76;
    swift_retain();
    v78 = v130;
    v79 = v134;
    v134[6] = sub_100008A00;
    v79[7] = v78;
    swift_retain();
    v80 = v131;
    v81 = v134;
    v134[8] = sub_100008A00;
    v81[9] = v80;
    swift_retain();
    v82 = v132;
    v83 = v133;
    v84 = v134;
    v134[10] = sub_100011EB0;
    v84[11] = v83;
    sub_1000073C4();
    swift_bridgeObjectRelease(v82);
    if (os_log_type_enabled(v136, (os_log_type_t)v137))
    {
      v85 = v179;
      v103 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(14, &type metadata for UInt8);
      v101 = sub_100008AC0(&qword_10008AB30);
      v102 = 0;
      v104 = sub_1000076F4(0, v101, v101);
      v105 = sub_1000076F4(v102, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v106 = &v211;
      v211 = v103;
      v107 = &v210;
      v210 = v104;
      v108 = &v209;
      v209 = v105;
      sub_10000774C(0, &v211);
      sub_10000774C(2, v106);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
      v208 = v127;
      sub_100007760(&v207, (uint64_t)v106, (uint64_t)v107, (uint64_t)v108);
      v109 = v85;
      if (v85)
      {
        __break(1u);
      }
      else
      {
        v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v208 = v128;
        sub_100007760(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
        v100 = 0;
        v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100011EB0;
        v208 = v129;
        sub_100007760(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
        v99 = 0;
        v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v208 = v130;
        sub_100007760(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
        v98 = 0;
        v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100008A00;
        v208 = v131;
        sub_100007760(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
        v97 = 0;
        v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100011EB0;
        v208 = v133;
        sub_100007760(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
        _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v137, "Cannot fetch display messages. Valid messagesList: %{BOOL}d, resultHandler: %{BOOL}d", v103, v114);
        v96 = 0;
        sub_1000077A4(v104, 0);
        sub_1000077A4(v105, v96);
        UnsafeMutablePointer.deallocate()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v182 + 8))(v184, v181);
    v95 = &v178[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler];
    swift_beginAccess(&v178[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler]);
    if (*(_QWORD *)v95)
    {
      v91 = *(_QWORD *)v95;
      swift_retain();
      swift_endAccess(v212);
      v92 = *(void (**)(_QWORD, uint64_t))(v91
                                                   + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion);
      v94 = *(_QWORD *)(v91 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion + 8);
      swift_retain();
      swift_release();
      v86 = sub_1000125A4();
      v87 = swift_allocError(&unk_100081B08, v86, 0, 0);
      v88 = v92;
      v93 = v87;
      *v89 = 2;
      v88(0, v87);
      swift_errorRelease(v93);
      swift_release();
    }
    else
    {
      swift_endAccess(v212);
    }
    return;
  }
  v177 = v189;
  v173 = v189;
  v206 = v189;
  v174 = &v178[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler];
  v175 = &v205;
  swift_beginAccess(&v178[OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler]);
  v176 = *(_QWORD *)v174;
  swift_retain();
  swift_endAccess(v175);
  if (!v176)
  {

    goto LABEL_16;
  }
  v172 = v176;
  v167 = v176;
  v204 = v176;
  v170 = sub_10004E49C();
  swift_bridgeObjectRetain(v170);
  v169 = &v203;
  v203 = v170;
  v168 = sub_100008AC0(&qword_10008BF60);
  v3 = sub_100050054();
  v171 = Collection.isEmpty.getter(v168, v3);
  sub_10000A004(v169);
  swift_bridgeObjectRelease(v170);
  if ((v171 & 1) != 0)
  {
    v4 = v186;
    v5 = sub_10004A124();
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v182 + 16))(v4, v5, v181);
    v165 = Logger.logObject.getter(v6);
    v164 = static os_log_type_t.default.getter();
    v162 = &v194;
    v194 = 2;
    v160 = sub_1000079AC();
    v161 = sub_100007A14();
    v7 = sub_100007A7C();
    UnsignedInteger<>.init<A>(_:)(&v195, v162, &type metadata for UInt32, &type metadata for Int, v160, v161, v7);
    v163 = v195;
    v8 = sub_100008AC0(&qword_10008AB20);
    v166 = _allocateUninitializedArray<A>(_:)(0, v8);
    if (os_log_type_enabled(v165, (os_log_type_t)v164))
    {
      v9 = v179;
      v150 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2, &type metadata for UInt8);
      v148 = sub_100008AC0(&qword_10008AB30);
      v149 = 0;
      v151 = sub_1000076F4(0, v148, v148);
      v152 = sub_1000076F4(v149, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
      v156 = &v193;
      v193 = v150;
      v157 = &v192;
      v192 = v151;
      v154 = &v191;
      v191 = v152;
      v153 = 0;
      sub_10000774C(0, &v193);
      sub_10000774C(v153, v156);
      v190 = v166;
      v155 = &v90;
      __chkstk_darwin(&v90);
      v10 = v157;
      v11 = &v90 - 6;
      v158 = &v90 - 6;
      v11[2] = (uint64_t)v156;
      v11[3] = (uint64_t)v10;
      v11[4] = v12;
      v159 = sub_100008AC0((uint64_t *)&unk_10008B4F0);
      v13 = sub_100008D80();
      Sequence.forEach(_:)(sub_100008D54, v158, v159, v13);
      if (v9)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v164, "Return immediately since itemIDs to request are empty", v150, v163);
        v147 = 0;
        sub_1000077A4(v151, 0);
        sub_1000077A4(v152, v147);
        UnsafeMutablePointer.deallocate()();
        swift_bridgeObjectRelease(v166);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v166);
    }

    (*(void (**)(char *, uint64_t))(v182 + 8))(v186, v181);
    v143 = *(void (**)(uint64_t, uint64_t))(v167
                                                   + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion);
    v146 = *(_QWORD *)(v167 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion + 8);
    swift_retain();
    v144 = 0;
    v14 = sub_1000142E8();
    v145 = _allocateUninitializedArray<A>(_:)(v144, v14);
    v143(v145, v144);
    swift_bridgeObjectRelease(v145);
    swift_release();
  }
  else
  {
    v138 = sub_10004E49C();
    sub_100008AC0(&qword_10008BF20);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v138);
    v139 = *(_QWORD *)(v167 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion);
    v140 = *(_QWORD *)(v167 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_completion + 8);
    swift_retain();
    v201 = v139;
    v202 = v140;
    aBlock = _NSConcreteStackBlock;
    v197 = 1107296256;
    v198 = 0;
    v199 = sub_10004AD38;
    v200 = &unk_100084338;
    v141 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v173, "displayMessagesFromThreadsWithItemIDs:completion:", isa, v141);
    _Block_release(v141);

  }
  swift_release();

}

BOOL sub_10004E350(uint64_t a1)
{
  id v1;
  id *v3;
  id v4;
  id v5;
  _BYTE v6[24];

  v3 = (id *)(a1 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_messageList);
  v4 = *v3;
  v1 = *v3;
  swift_endAccess(v6);
  v5 = v4;
  sub_1000119D0(&v5);
  return v4 != 0;
}

BOOL sub_10004E3F4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19MailWidgetExtension18MessagesDataSource_resultHandler);
  v3 = *v2;
  swift_retain();
  swift_endAccess(v5);
  v4 = v3;
  sub_10001B7F0(&v4);
  return v3 == 0;
}

uint64_t sub_10004E49C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v25[4];
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;

  v33 = 0;
  v21 = (_QWORD *)(v0 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
  swift_beginAccess(v0 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
  v23 = *v21;
  swift_bridgeObjectRetain(*v21);
  swift_endAccess(v32);
  swift_bridgeObjectRetain(v23);
  v31 = v23;
  v22 = sub_100008AC0(&qword_10008BF60);
  v1 = sub_100050054();
  v24 = Collection.isEmpty.getter(v22, v1);
  sub_10000A004(&v31);
  swift_bridgeObjectRelease(v23);
  if ((v24 & 1) != 0)
  {
    v6 = sub_100008AC0(&qword_10008BF20);
    return _allocateUninitializedArray<A>(_:)(0, v6);
  }
  else
  {
    v15 = (_QWORD *)(v20 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    swift_beginAccess(v20 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    v17 = *v15;
    swift_bridgeObjectRetain(*v15);
    swift_endAccess(v29);
    v16 = sub_100008AC0(&qword_10008BF20);
    v18 = Array.count.getter(v17, v16);
    swift_bridgeObjectRelease(v17);
    v28 = v18;
    v27 = 4;
    min<A>(_:_:)(&v30, &v28, &v27, &type metadata for Int, &protocol witness table for Int);
    v19 = v30;
    if (v30 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
      __break(1u);
    }
    v8 = (_QWORD *)(v20 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    swift_beginAccess(v20 + OBJC_IVAR____TtCC19MailWidgetExtension18MessagesDataSource13ResultHandler_itemIDs);
    v9 = Array.subscript.getter(0, v19, *v8, v16);
    v10 = v2;
    v11 = v3;
    v12 = v4;
    swift_endAccess(v26);
    v25[0] = v9;
    v25[1] = v10;
    v25[2] = v11;
    v25[3] = v12;
    v13 = sub_100008AC0(&qword_10008BF90);
    v5 = sub_1000506A0();
    return Array.init<A>(_:)(v25, v16, v13, v5);
  }
}

uint64_t sub_10004EAB0(uint64_t a1)
{
  swift_unknownObjectRetain(a1);
  return a1;
}

uint64_t sub_10004EB40(_QWORD *a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v5;

  v3 = (id)*a1;
  swift_getObjectType(*a1);
  swift_unknownObjectRetain(a2);
  swift_getObjectType(a2);
  v5 = objc_msgSend(v3, "isEqual:", a2);
  swift_unknownObjectRelease(a2);
  return v5 & 1;
}

BOOL sub_10004EBBC(uint64_t a1, char a2)
{
  return (a2 & 1) != 0;
}

id sub_10004EC0C(void *a1, void *a2)
{
  void *v2;
  id v6;

  v6 = objc_msgSend(v2, "initWithQuery:repository:", a1);

  return v6;
}

uint64_t sub_10004EC68()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10004ECA4()
{
  uint64_t v0;

  return sub_10004BD64(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004ECAC()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_10004ECE8()
{
  uint64_t v0;

  return sub_10004BD98(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004ECF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10004ED20(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v6 = (a3 + 1);
  }
  else
  {
    v8 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v6 = (v8 | (a3 >> 6)) + 33217;
    }
    else
    {
      v7 = (v8 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v6 = (v7 | (a3 >> 12)) + 8487393;
      else
        v6 = ((a3 >> 18) | ((v7 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v5 = 4 - ((uint64_t)__clz(v6) >> 3);
  v9 = (v6 - 0x101010101010101) & ((1 << ((8 * v5) & 0x3F)) - 1);
  if (v5 >= 0)
    return a1(&v9, v5);
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 1343, 0);
  __break(1u);
LABEL_12:
  LOBYTE(v4) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v4, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004F064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t (*v14)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v15;
  uint64_t v16[2];
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v19 = a9;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v27 = a10;
  v28 = a11;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a1;
  v42 = a2;
  v43 = a10;
  v44 = a11;
  if ((a5 & 1) != 0)
  {
    if (v22 <= 0xFFFFFFFF)
    {
      v18 = v22;
      if ((v22 < 0xD800 || v18 > 0xDFFF) && v18 <= 0x10FFFF)
      {
        v17 = v16;
        __chkstk_darwin(v16);
        v14 = sub_100050CA0;
        v15 = &v37;
        sub_10004ED20((uint64_t (*)(uint64_t *, uint64_t))sub_100050CE0, (uint64_t)&v13, v11);
        return (uint64_t)v17;
      }
      LOBYTE(v13) = 2;
      _assertionFailure(_:_:file:line:flags:)(v29, 11, 2, v30, 57, 2, v31, 24, v13, 148, 0);
      __break(1u);
    }
    LOBYTE(v13) = 2;
    _assertionFailure(_:_:file:line:flags:)(v29, 11, 2, v32, 45, 2, v33, 20, v13, 3455, 0);
    __break(1u);
  }
  if (v22)
    v45 = v22;
  else
    v45 = 0;
  v16[0] = v45;
  if (!v45)
  {
    LOBYTE(v13) = 2;
    _assertionFailure(_:_:file:line:flags:)(v29, 11, 2, v30, 57, 2, v31, 24, v13, 136, 0);
    __break(1u);
  }
  if (v23 >= 0)
    return sub_10004F428(v16[0], v23, v24, v25, v26, v20, v21, v27, v19, v28);
  LOBYTE(v13) = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)(v29, 11, 2, v34, 39, 2, v35, 31, v13, 1343, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004F428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v19 = a9;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v27 = a10;
  v28 = "Fatal error";
  v29 = "Unexpectedly found nil while unwrapping an Optional value";
  v30 = "Swift/StaticString.swift";
  v31 = "Not enough bits to represent the passed value";
  v32 = "Swift/Integers.swift";
  v33 = "UnsafeBufferPointer with negative count";
  v34 = "Swift/UnsafeBufferPointer.swift";
  v35 = 0;
  v37 = a6;
  v38 = a7;
  v39 = a1;
  v40 = a2;
  v41 = a8;
  v42 = a10;
  if ((a5 & 1) != 0)
  {
    if (v22 <= 0xFFFFFFFF)
    {
      v18 = v22;
      if ((v22 < 0xD800 || v18 > 0xDFFF) && v18 <= 0x10FFFF)
      {
        v17 = &v15;
        __chkstk_darwin(&v15);
        v13 = sub_100050D08;
        v14 = &v36;
        sub_10004ED20((uint64_t (*)(uint64_t *, uint64_t))sub_100050CE0, (uint64_t)&v12, v10);
        return (uint64_t)v17;
      }
      LOBYTE(v12) = 2;
      _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 57, 2, v30, 24, v12, 148, 0);
      __break(1u);
    }
    LOBYTE(v12) = 2;
    _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v31, 45, 2, v32, 20, v12, 3455, 0);
    __break(1u);
  }
  if (v22)
    v43 = v22;
  else
    v43 = 0;
  v16 = v43;
  if (!v43)
  {
    LOBYTE(v12) = 2;
    _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 57, 2, v30, 24, v12, 136, 0);
    __break(1u);
  }
  if (v23 >= 0)
    return sub_10004F7BC(v16, v23, v24, v25, v20, v21, v26, v27);
  LOBYTE(v12) = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)(v28, 11, 2, v33, 39, 2, v34, 31, v12, 1343, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004F7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;

  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = "Fatal error";
  v29 = "Not enough bits to represent the passed value";
  v30 = "Swift/Integers.swift";
  v31 = "Not enough bits to represent a signed value";
  v32 = "Unexpectedly found nil while unwrapping an Optional value";
  v33 = "Swift/AssertCommon.swift";
  if (a3)
  {
    v19 = v22;
  }
  else
  {
    LOBYTE(v9) = 2;
    _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v32, 57, 2, v33, 24, v9, 230, 0);
    __break(1u);
  }
  v18 = v19;
  if (v23 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v23 <= 0x7FFFFFFF)
    {
      v17 = v23;
      if (v24)
      {
        v16 = v24;
      }
      else
      {
        LOBYTE(v9) = 2;
        _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v32, 57, 2, v33, 24, v9, 231, 0);
        __break(1u);
      }
      v15 = v16;
      if (v25 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v25 <= 0x7FFFFFFF)
        {
          v14 = v25;
          if (v20)
          {
            v13 = v20;
          }
          else
          {
            LOBYTE(v9) = 2;
            _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v32, 57, 2, v33, 24, v9, 232, 0);
            __break(1u);
          }
          v12 = v13;
          if (v21 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v21 <= 0x7FFFFFFF)
            {
              v11 = v21;
              if (v26 <= 0xFFFFFFFF)
              {
                v10 = v26;
                if (v27 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile(v18, v17, v15, v14, v12, v11, v10, v27, 0);
                LOBYTE(v9) = 2;
                _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 45, 2, v30, 20, v9, 3455, 0);
                __break(1u);
              }
              LOBYTE(v9) = 2;
              _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 45, 2, v30, 20, v9, 3455, 0);
              __break(1u);
            }
            LOBYTE(v9) = 2;
            _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 45, 2, v30, 20, v9, 3687, 0);
            __break(1u);
          }
          LOBYTE(v9) = 2;
          _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v31, 43, 2, v30, 20, v9, 3681, 0);
          __break(1u);
        }
        LOBYTE(v9) = 2;
        _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 45, 2, v30, 20, v9, 3687, 0);
        __break(1u);
      }
      LOBYTE(v9) = 2;
      _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v31, 43, 2, v30, 20, v9, 3681, 0);
      __break(1u);
    }
    LOBYTE(v9) = 2;
    _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v29, 45, 2, v30, 20, v9, 3687, 0);
    __break(1u);
  }
  LOBYTE(v9) = 2;
  result = _assertionFailure(_:_:file:line:flags:)(v28, 11, 2, v31, 43, 2, v30, 20, v9, 3681, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004FD04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      v1 = type metadata accessor for DispatchWorkItemFlags(0);
      v2 = static Array._allocateBufferUninitialized(minimumCapacity:)(v4, v1);
      *(_QWORD *)(v2 + 16) = v4;
      v3 = (void *)v2;
    }
    else
    {
      swift_retain(&_swiftEmptyArrayStorage);
      v3 = &_swiftEmptyArrayStorage;
    }
    type metadata accessor for DispatchWorkItemFlags(0);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_10004FDBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10004FDE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10004FE0C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10004FE40()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10004FE7C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10004FEB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10004FEE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10004FF08()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10004FF44()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10004FF80(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

unint64_t sub_10004FFBC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BF68;
  if (!qword_10008BF68)
  {
    v0 = sub_100008DF0(&qword_10008BF60);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BF68);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10005002C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10004EB40(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_100050054()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BF70;
  if (!qword_10008BF70)
  {
    v0 = sub_100008DF0(&qword_10008BF60);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BF70);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000500C4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BF78;
  if (!qword_10008BF78)
  {
    v0 = sub_100008DF0(&qword_10008BF60);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BF78);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100050134()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_100050170()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v2, 24);
}

uint64_t sub_1000501AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000501D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000501FC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050238()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050274()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10005029C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000502C4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050300()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10005033C()
{
  uint64_t v0;
  uint64_t v2;

  return swift_deallocObject(v2, 24);
}

BOOL sub_100050378()
{
  uint64_t v0;

  return sub_10004E350(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100050380()
{
  uint64_t v0;
  uint64_t v2;

  return swift_deallocObject(v2, 24);
}

BOOL sub_1000503BC()
{
  uint64_t v0;

  return sub_10004E3F4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000503C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_1000503EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100050414()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050450()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_10005048C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000504C8()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050504()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_10005052C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17);
}

uint64_t sub_100050554()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050590()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_1000505CC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050608()
{
  uint64_t v0;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v2, 32);
}

uint64_t sub_100050644(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100050688(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000506A0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008BF98;
  if (!qword_10008BF98)
  {
    v0 = sub_100008DF0(&qword_10008BF90);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008BF98);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100050710()
{
  return type metadata accessor for MessagesDataSource.ResultHandler(0);
}

uint64_t sub_100050728(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t updated;
  _QWORD v6[3];

  v1 = type metadata accessor for Mailbox(319);
  updated = v1;
  if (v2 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v1 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[2] = (char *)&value witness table for () + 64;
    updated = swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t sub_100050800(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100050850(*(_QWORD *)a2);
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100050850(uint64_t a1)
{
  return swift_unknownObjectRetain(a1);
}

uint64_t sub_10005088C(uint64_t *a1)
{
  return sub_10004FF80(*a1);
}

uint64_t sub_1000508B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100050850(*(_QWORD *)a2);
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5 & 1;
  sub_10004FF80(v2);
  return a1;
}

uint64_t sub_100050914(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t sub_100050928(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  sub_10004FF80(v4);
  return a1;
}

uint64_t sub_100050974(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 > 0xFE && *(_BYTE *)(a1 + 9))
    {
      v4 = *(_QWORD *)a1 + 254;
    }
    else
    {
      v2 = 255 - *(unsigned __int8 *)(a1 + 8);
      if (v2 >= 0xFE)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_100050ABC(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = result;
  v4 = (_BYTE *)(result + 9);
  if (a2 > 0xFE)
  {
    result = 0;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)v3 = a2 - 255;
    if (a3 >= 0xFF)
      *v4 = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *v4 = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100050C70(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) & 1;
}

uint64_t sub_100050C7C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

void *type metadata accessor for MessagesDataSource.ResultHandler.Insertion()
{
  return &unk_1000843E0;
}

uint64_t sub_100050CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_10004F428(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t sub_100050CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004ECF0(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100050D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004F7BC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100050D24()
{
  _QWORD *v0;
  uint64_t v2;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_errorRelease(v0[4]);
  return swift_deallocObject(v2, 40);
}

uint64_t sub_100050D70()
{
  uint64_t *v0;

  return sub_10004ABAC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100050D80(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100050DC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100050DDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = type metadata accessor for Mailbox(0);
  v1 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = ((v9 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  if (*(_QWORD *)(v0 + v9 + 32) > 5uLL)
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v9 + 32));
  v3 = v6 + v9 + *(int *)(v7 + 28);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();
  return swift_deallocObject(v6, v8);
}

uint64_t sub_100050F3C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Mailbox(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100049C00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(void (**)(uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
}

uint64_t sub_100050F94(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain(v5);
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_100050FD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

char *sub_100050FF0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_100049F74(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_100051014()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C0F8;
  if (!qword_10008C0F8)
  {
    v0 = sub_100008DF0(&qword_10008B1B0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C0F8);
    return WitnessTable;
  }
  return v3;
}

id *sub_100051084()
{
  id v0;
  id *result;
  id v2;
  id v3;
  id v4;
  id v5;

  v5 = 0;
  v4 = sub_100051128();
  sub_100051180();
  sub_100031764((uint64_t)&v4, (uint64_t)&unk_1000844C0, (uint64_t)&v5);
  sub_1000119D0(&v4);
  v2 = v5;
  v0 = v5;
  v3 = v2;
  static WidgetBundleBuilder.buildBlock<A>(_:)();
  sub_1000119D0(&v3);
  result = &v5;
  sub_1000119D0(&v5);
  return result;
}

id sub_100051128()
{
  id v0;
  id v2;
  id v3;

  v3 = 0;
  sub_100054FF4();
  v2 = sub_10000B018();
  v0 = v2;
  v3 = v2;
  sub_1000119D0(&v3);
  return v2;
}

unint64_t sub_100051180()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C100;
  if (!qword_10008C100)
  {
    WitnessTable = swift_getWitnessTable(&unk_1000746CC, &unk_1000844C0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C100);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1000511EC()
{
  unint64_t v0;

  v0 = sub_1000547F4();
  return static WidgetBundle.main()(&unk_1000844A0, v0);
}

uint64_t sub_100051220(uint64_t a1)
{
  return nullsub_1(a1);
}

id *sub_100051234()
{
  return sub_100051084();
}

uint64_t sub_100051248@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  const char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  const char *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  __int16 v93;
  _QWORD v94[5];
  _BYTE v95[40];
  uint64_t v96;

  v61 = a2;
  v27 = a1;
  v44 = "Title of the Mail widget displayed in the widget picker";
  v53 = "Description of the Mail widget, displayed in the widget picker";
  v96 = 0;
  v45 = sub_100008AC0(&qword_10008C108);
  v42 = *(_QWORD *)(v45 - 8);
  v24 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v45);
  v43 = (char *)&v23 - v24;
  v57 = sub_100008AC0(&qword_10008C110);
  v51 = *(_QWORD *)(v57 - 8);
  v25 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v57);
  v52 = (char *)&v23 - v25;
  v68 = sub_100008AC0(&qword_10008C118);
  v66 = *(_QWORD *)(v68 - 8);
  v26 = (*(_QWORD *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v27);
  v67 = (char *)&v23 - v26;
  v96 = v2;
  v35 = (id)MFWidgetKindMessages;
  v3 = MFWidgetKindMessages;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v30 = v4;
  v56 = 0;
  v32 = type metadata accessor for MFGetMailboxIntent();
  v28 = type metadata accessor for DaemonDataSource();
  v5 = v27;
  v6 = sub_10000AD38(v27);
  v94[3] = v28;
  v94[4] = &off_100081B18;
  v94[0] = v6;
  v31 = v95;
  sub_100029900(v94, v95);
  v33 = type metadata accessor for MailWidgetView(v56);
  v29 = sub_100051A24();
  v7 = sub_100051A94();
  IntentConfiguration.init<A>(kind:intent:provider:content:)(v34, v30, v32, v31, sub_100051810, 0, v32, v33, &unk_100083498, v29, v7);

  v40 = type metadata accessor for WidgetFamily(v56);
  v39 = _allocateUninitializedArray<A>(_:)(2, v40);
  v37 = v8;
  v36 = *(_QWORD *)(v40 - 8);
  v38 = *(void (**)(void))(v36 + 104);
  v38();
  v9 = *(_QWORD *)(v36 + 72);
  v59 = 1;
  ((void (*)(uint64_t, _QWORD, uint64_t))v38)(v37 + v9, enum case for WidgetFamily.systemLarge(_:), v40);
  v10 = v39;
  sub_1000073C4();
  v41 = v10;
  v46 = sub_100051AFC();
  WidgetConfiguration.supportedFamilies(_:)(v41, v45);
  swift_bridgeObjectRelease(v41);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v45);
  v60 = 1;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DISPLAY_NAME", 0xCuLL, 1);
  v12 = LocalizedStringKey.init(stringLiteral:)(v11._countAndFlagsBits, v11._object);
  v91 = v44;
  v92 = 55;
  v54 = 2;
  v93 = 2;
  v55 = 0;
  v87 = Text.init(_:tableName:bundle:comment:)(v12);
  v88 = v13;
  v89 = v14;
  v90 = v15;
  v47 = v87;
  v48 = v13;
  v49 = v14;
  v50 = v15;
  v86[0] = v45;
  v86[1] = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v86, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, v59);
  v82 = v47;
  v83 = v48;
  v84 = v49 & 1 & v60;
  v85 = v50;
  WidgetConfiguration.configurationDisplayName(_:)(v47, v48, v84, v50, v57);
  sub_100038EE8(v47, v48, v49 & 1);
  swift_bridgeObjectRelease(v50);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v57);
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("WIDGET_DESCRIPTION", 0x12uLL, v60 & 1);
  v17 = LocalizedStringKey.init(stringLiteral:)(v16._countAndFlagsBits, v16._object);
  v78 = v53;
  v79 = 62;
  v80 = v54;
  v81 = v55 & 1 & v60;
  v74 = Text.init(_:tableName:bundle:comment:)(v17);
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v62 = v74;
  v63 = v18;
  v64 = v19;
  v65 = v20;
  v73[0] = v57;
  v73[1] = OpaqueTypeConformance2;
  v21 = swift_getOpaqueTypeConformance2(v73, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, v59);
  v69 = v62;
  v70 = v63;
  v71 = v64 & 1 & v60;
  v72 = v65;
  WidgetConfiguration.description(_:)(v62, v63, v71, v65, v68, v21);
  sub_100038EE8(v62, v63, v64 & 1);
  swift_bridgeObjectRelease(v65);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v67, v68);
}

uint64_t sub_100051810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;

  v18 = a2;
  v13 = a1;
  v24 = 0;
  v23 = 0;
  v2 = sub_100008AC0(&qword_10008BAD8);
  v10 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v16 = (char *)&v9 - v10;
  v11 = 0;
  v12 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v11);
  v17 = (uint64_t)&v9 - v12;
  v19 = type metadata accessor for MailWidgetView(v3);
  v14 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v13);
  v21 = (char *)&v9 - v14;
  v15 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v5);
  v22 = (uint64_t *)((char *)&v9 - v15);
  v24 = (char *)&v9 - v15;
  v23 = v6;
  sub_10001BE1C(v6, v7);
  sub_100051B6C();
  sub_100051B9C(v16, v17, v21);
  v20 = sub_100051A24();
  sub_100031764((uint64_t)v21, v19, (uint64_t)v22);
  sub_100052B30((uint64_t)v21);
  sub_10005274C(v22, v21);
  sub_100031764((uint64_t)v21, v19, v18);
  sub_100052B30((uint64_t)v21);
  return sub_100052B30((uint64_t)v22);
}

uint64_t type metadata accessor for MailWidgetView(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008C1C8;
  if (!qword_10008C1C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MailWidgetView);
  return v2;
}

unint64_t sub_100051A24()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C120;
  if (!qword_10008C120)
  {
    v0 = type metadata accessor for MailWidgetView(255);
    WitnessTable = swift_getWitnessTable(&unk_10007467C, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C120);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100051A94()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C128;
  if (!qword_10008C128)
  {
    WitnessTable = swift_getWitnessTable(&unk_100073E28, &unk_100083498);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C128);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_100051AFC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C130;
  if (!qword_10008C130)
  {
    v0 = sub_100008DF0(&qword_10008C108);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C130);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100051B6C()
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100074550);
  return Environment.init(_:)(KeyPath);
}

uint64_t sub_100051B9C@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;

  sub_100054F54(a1, a3);
  v3 = type metadata accessor for MailWidgetView(0);
  return sub_10001C04C(a2, (uint64_t)a3 + *(int *)(v3 + 20));
}

uint64_t sub_100051BE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v5 = a1;
  v8 = 0;
  v6 = sub_100008AC0(&qword_10008BAD8);
  v4 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v3);
  v7 = (uint64_t)&v3 - v4;
  v8 = v1;
  sub_10003B0F8(v1, (uint64_t *)((char *)&v3 - v4));
  Environment.wrappedValue.getter(v6);
  return sub_10003B1A8(v7);
}

id sub_100051C88@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100051128();
  *a1 = result;
  return result;
}

uint64_t sub_100051CB0@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_100051248(*v1, a1);
}

uint64_t sub_100051CC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char v37;
  uint64_t v38;
  _QWORD v39[4];
  uint64_t *v40;
  char *v41;

  v31 = a1;
  v41 = 0;
  v40 = 0;
  v11 = 0;
  v24 = type metadata accessor for ContainerBackgroundPlacement();
  v22 = *(_QWORD *)(v24 - 8);
  v12 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v23 = (char *)&v11 - v12;
  v2 = type metadata accessor for MailWidgetView(v1);
  v13 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v20 = (uint64_t)&v11 - v13;
  v26 = sub_100008AC0(&qword_10008C138);
  v14 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v26);
  v25 = (uint64_t *)((char *)&v11 - v14);
  v35 = sub_100008AC0(&qword_10008C140);
  v30 = *(_QWORD *)(v35 - 8);
  v16 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v15);
  v33 = (uint64_t)&v11 - v16;
  v17 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v34 = (uint64_t)&v11 - v17;
  v41 = (char *)&v11 - v17;
  v40 = v5;
  sub_10005274C(v5, v6);
  v18 = &v37;
  v38 = v20;
  v19 = sub_100008AC0(&qword_10008C148);
  v7 = sub_100052A38();
  Group<A>.init(content:)(sub_100052A30, v18, v19, v7);
  v8 = sub_100052B30(v20);
  static ContainerBackgroundPlacement.widget.getter(v8);
  v28 = sub_100052CC4();
  v27 = &type metadata for EmptyView;
  v29 = &protocol witness table for EmptyView;
  v21 = sub_1000525E0(v26, (uint64_t)&type metadata for EmptyView);
  View.containerBackground<A>(for:alignment:content:)(v23, v21, v9, sub_100051220, 0, v26, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
  sub_100052D40(v25);
  v39[0] = v26;
  v39[1] = v27;
  v39[2] = v28;
  v39[3] = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  sub_100031764(v33, v35, v34);
  v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v36(v33, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v33, v34, v35);
  sub_100031764(v33, v35, v31);
  v36(v33, v35);
  return ((uint64_t (*)(uint64_t, uint64_t))v36)(v34, v35);
}

_QWORD *sub_10005202C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  Builtin::Word v23;
  void *object;
  int v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char *v67;

  v33 = a2;
  v34 = a1;
  v35 = "Fatal error";
  v36 = "MailWidgetExtension/MessagesWidget.swift";
  v67 = 0;
  v66 = 0;
  v65 = 0;
  v42 = 0;
  v37 = type metadata accessor for MailWidgetView(0);
  v38 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v39 = (uint64_t *)((char *)&v22 - v38);
  v40 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Snapshot(v3) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v42);
  v41 = (uint64_t)&v22 - v40;
  v43 = type metadata accessor for MessagesContentView(v4);
  v44 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v42);
  v45 = (uint64_t *)((char *)&v22 - v44);
  v46 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v47 = (uint64_t *)((char *)&v22 - v46);
  v48 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8);
  v49 = (uint64_t *)((char *)&v22 - v48);
  v67 = (char *)&v22 - v48;
  v61 = type metadata accessor for WidgetFamily(v9);
  v59 = *(_QWORD *)(v61 - 8);
  v50 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v61);
  v51 = (uint64_t)&v22 - v50;
  v52 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v22 - v50);
  v60 = (char *)&v22 - v52;
  v53 = sub_100008AC0(&qword_10008C148);
  v55 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
  v54 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v53);
  v56 = (uint64_t *)((char *)&v22 - v54);
  v57 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v22 - v54);
  v58 = (uint64_t *)((char *)&v22 - v57);
  v66 = (char *)&v22 - v57;
  v65 = a1;
  sub_100051BE8(v11);
  v62 = (*(uint64_t (**)(char *, uint64_t))(v59 + 88))(v60, v61);
  if (v62 == enum case for WidgetFamily.systemMedium(_:) || v62 == enum case for WidgetFamily.systemLarge(_:))
  {
    sub_10001BE1C((uint64_t)v34 + *(int *)(v37 + 20), v41);
    v30 = sub_10004734C();
    v31 = v12;
    v13 = sub_100047384();
    sub_10004738C(v41, v30, v31 & 1, (uint64_t)v47, v13);
    v32 = sub_100052AC0();
    sub_100031764((uint64_t)v47, v43, (uint64_t)v49);
    sub_1000463F8(v47);
    sub_100046004((uint64_t)v49, (uint64_t)v45);
    sub_100031764((uint64_t)v45, v43, (uint64_t)v47);
    sub_1000463F8(v45);
    sub_1000323CC((uint64_t)v47, v43, (uint64_t)&type metadata for Never, v32, (uint64_t)&protocol witness table for Never, (uint64_t)v56);
    sub_1000463F8(v47);
    sub_100054860(v56, v58);
    sub_1000463F8(v49);
    sub_100054B74(v58, v56);
    sub_100052A38();
    sub_100031764((uint64_t)v56, v53, v33);
    sub_100052D40(v56);
    return sub_100052D40(v58);
  }
  else
  {
    sub_10005274C(v34, v39);
    v23 = 32;
    v14 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(32);
    v27 = &v63;
    v63 = v14;
    v64 = v15;
    v25 = 1;
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Widget family is not supported: ", v23, 1);
    object = v16._object;
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease(object);
    sub_100051BE8(v51);
    v17 = sub_100029BC4();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v51, v61, v17);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v61);
    v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v25 & 1);
    v26 = v18._object;
    DefaultStringInterpolation.appendLiteral(_:)(v18);
    swift_bridgeObjectRelease(v26);
    v29 = v63;
    v28 = v64;
    swift_bridgeObjectRetain(v64);
    sub_1000090EC((uint64_t)v27);
    v19 = String.init(stringInterpolation:)(v29, v28);
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)(v35, 11, 2, v19, v20, v36, 40);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000525E0(uint64_t a1, uint64_t a2)
{
  return static Alignment.center.getter(a1, a2);
}

uint64_t sub_100052604@<X0>(uint64_t a1@<X8>)
{
  return sub_100051CC8(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000511EC();
  return 0;
}

uint64_t sub_100052630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v11 = a2;
  v8 = a1;
  v6[1] = 0;
  v13 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v13 - 8);
  v7 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v12 = (char *)v6 - v7;
  v15 = type metadata accessor for EnvironmentValues(v2);
  v14 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v15);
  v16 = (char *)v6 - v9;
  v4 = (*(uint64_t (**)(char *))(v3 + 16))((char *)v6 - v9);
  EnvironmentValues.widgetFamily.getter(v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v11, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v15);
}

uint64_t sub_100052738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100052630(a1, a2);
}

_QWORD *sub_10005274C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *__dst;
  char *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v23;

  v23 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v23) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v23, 1);
  }
  else
  {
    v20 = *a1;
    swift_retain();
    *a2 = v20;
    swift_storeEnumTagMultiPayload(a2, v23, 0);
  }
  v3 = type metadata accessor for MailWidgetView(0);
  v17 = (char *)a2 + *(int *)(v3 + 20);
  v19 = (char *)a1 + *(int *)(v3 + 20);
  *(_QWORD *)v17 = *(_QWORD *)v19;
  v16 = *((_QWORD *)v19 + 1);
  swift_bridgeObjectRetain(v16);
  *((_QWORD *)v17 + 1) = v16;
  v18 = *((_QWORD *)v19 + 2);
  swift_bridgeObjectRetain(v18);
  *((_QWORD *)v17 + 2) = v18;
  if (*((_QWORD *)v19 + 4) <= 5uLL)
  {
    *(_OWORD *)(v17 + 24) = *(_OWORD *)(v19 + 24);
  }
  else
  {
    *((_QWORD *)v17 + 3) = *((_QWORD *)v19 + 3);
    v15 = *((_QWORD *)v19 + 4);
    swift_bridgeObjectRetain(v15);
    *((_QWORD *)v17 + 4) = v15;
  }
  v4 = type metadata accessor for Mailbox(0);
  __dst = &v17[*(int *)(v4 + 28)];
  __src = &v19[*(int *)(v4 + 28)];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(__src, 1))
  {
    v5 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, __src, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v6 = type metadata accessor for Snapshot(0);
  v9 = &v17[*(int *)(v6 + 20)];
  v10 = &v19[*(int *)(v6 + 20)];
  if (*(_QWORD *)v10 < 2uLL)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_WORD *)v9 + 8) = *((_WORD *)v10 + 8);
  }
  else
  {
    v8 = *(_QWORD *)v10;
    swift_bridgeObjectRetain(*(_QWORD *)v10);
    *(_QWORD *)v9 = v8;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    v9[16] = v10[16];
    v9[17] = v10[17];
  }
  return a2;
}

_QWORD *sub_100052A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005202C(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100052A38()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C150;
  if (!qword_10008C150)
  {
    v2 = sub_100008DF0(&qword_10008C148);
    sub_100052AC0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C150);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100052AC0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C158;
  if (!qword_10008C158)
  {
    v0 = type metadata accessor for MessagesContentView(255);
    WitnessTable = swift_getWitnessTable(&unk_100074468, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C158);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100052B30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v8 = (_QWORD *)(a1 + *(int *)(type metadata accessor for MailWidgetView(0) + 20));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[2]);
  if (v8[4] > 5uLL)
    swift_bridgeObjectRelease(v8[4]);
  v5 = (char *)v8 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v7 + 48))(v5, 1))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v4 = (_QWORD *)((char *)v8 + *(int *)(type metadata accessor for Snapshot(0) + 20));
  if (*v4 >= 2uLL)
    swift_bridgeObjectRelease(*v4);
  return a1;
}

unint64_t sub_100052CC4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C160;
  if (!qword_10008C160)
  {
    v2 = sub_100008DF0(&qword_10008C138);
    sub_100052A38();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C160);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_100052D40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_100008AC0(&qword_10008C168);
  if (!swift_getEnumCaseMultiPayload(a1, v1))
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    if (a1[4] > 5uLL)
      swift_bridgeObjectRelease(a1[4]);
    v8 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t))(v10 + 48))(v8, 1))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v7 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for Snapshot(0) + 20));
    if (*v7 >= 2uLL)
      swift_bridgeObjectRelease(*v7);
    v5 = type metadata accessor for MessagesContentView(0);
    v6 = (char *)a1 + *(int *)(v5 + 20);
    v2 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v6, v2) == 1)
    {
      v3 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *))(*(_QWORD *)(v3 - 8) + 8))(v6);
    }
    else
    {
      swift_release();
    }
    sub_100045518(*(_QWORD *)((char *)a1 + *(int *)(v5 + 24)), *((_BYTE *)a1 + *(int *)(v5 + 24) + 8) & 1);
    swift_release();
  }
  return a1;
}

void *type metadata accessor for MailWidgets()
{
  return &unk_1000844A0;
}

void *type metadata accessor for MessagesWidget()
{
  return &unk_1000844C0;
}

unint64_t sub_100052F68(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *__dst;
  char *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v28;

  v28 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v28 & 0x20000) != 0)
  {
    v23 = *a2;
    swift_retain();
    *a1 = v23;
    return *a1 + ((v28 + 16) & ~(unint64_t)v28);
  }
  else
  {
    v22 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(a2, v22) == 1)
    {
      v3 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v22, 1);
    }
    else
    {
      v21 = *a2;
      swift_retain();
      *a1 = v21;
      swift_storeEnumTagMultiPayload(a1, v22, 0);
    }
    v4 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v4;
    v20 = (char *)a2 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v17 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain(v17);
    *((_QWORD *)v18 + 1) = v17;
    v19 = *((_QWORD *)v20 + 2);
    swift_bridgeObjectRetain(v19);
    *((_QWORD *)v18 + 2) = v19;
    if (*((_QWORD *)v20 + 4) <= 5uLL)
    {
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v20 + 24);
    }
    else
    {
      *((_QWORD *)v18 + 3) = *((_QWORD *)v20 + 3);
      v16 = *((_QWORD *)v20 + 4);
      swift_bridgeObjectRetain(v16);
      *((_QWORD *)v18 + 4) = v16;
    }
    v5 = type metadata accessor for Mailbox(0);
    __dst = &v18[*(int *)(v5 + 28)];
    __src = &v20[*(int *)(v5 + 28)];
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(__src, 1))
    {
      v6 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, __src, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    v7 = type metadata accessor for Snapshot(0);
    v10 = &v18[*(int *)(v7 + 20)];
    v11 = &v20[*(int *)(v7 + 20)];
    if (*(_QWORD *)v11 < 2uLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
    }
    else
    {
      v9 = *(_QWORD *)v11;
      swift_bridgeObjectRetain(*(_QWORD *)v11);
      *(_QWORD *)v10 = v9;
      *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
      v10[16] = v11[16];
      v10[17] = v11[17];
    }
    return (unint64_t)a1;
  }
}

uint64_t sub_1000532B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[2]);
  if (v9[4] > 5uLL)
    swift_bridgeObjectRelease(v9[4]);
  v6 = (char *)v9 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v8 + 48))(v6, 1))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  result = type metadata accessor for Snapshot(0);
  v5 = (_QWORD *)((char *)v9 + *(int *)(result + 20));
  if (*v5 >= 2uLL)
    return swift_bridgeObjectRelease(*v5);
  return result;
}

_QWORD *sub_100053440(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *__dst;
  char *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v25;

  v25 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a2, v25) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v25, 1);
  }
  else
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    swift_storeEnumTagMultiPayload(a1, v25, 0);
  }
  v4 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v4;
  v20 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
  v17 = *(uint64_t *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v17);
  *((_QWORD *)v18 + 1) = v17;
  v19 = *((_QWORD *)v20 + 2);
  swift_bridgeObjectRetain(v19);
  *((_QWORD *)v18 + 2) = v19;
  if (*((_QWORD *)v20 + 4) <= 5uLL)
  {
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(v20 + 24);
  }
  else
  {
    *((_QWORD *)v18 + 3) = *((_QWORD *)v20 + 3);
    v16 = *((_QWORD *)v20 + 4);
    swift_bridgeObjectRetain(v16);
    *((_QWORD *)v18 + 4) = v16;
  }
  v5 = type metadata accessor for Mailbox(0);
  __dst = &v18[*(int *)(v5 + 28)];
  __src = &v20[*(int *)(v5 + 28)];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, __src, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  v7 = type metadata accessor for Snapshot(0);
  v10 = &v18[*(int *)(v7 + 20)];
  v11 = &v20[*(int *)(v7 + 20)];
  if (*(_QWORD *)v11 < 2uLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
  }
  else
  {
    v9 = *(_QWORD *)v11;
    swift_bridgeObjectRetain(*(_QWORD *)v11);
    *(_QWORD *)v10 = v9;
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    v10[16] = v11[16];
    v10[17] = v11[17];
  }
  return a1;
}

uint64_t *sub_100053724(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *__src;
  char *__dst;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_10003B1A8((uint64_t)a1);
    v30 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(a2, v30) == 1)
    {
      v3 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v30, 1);
    }
    else
    {
      v29 = *a2;
      swift_retain();
      *a1 = v29;
      swift_storeEnumTagMultiPayload(a1, v30, 0);
    }
  }
  v4 = *(int *)(a3 + 20);
  v28 = (char *)a1 + v4;
  v25 = (char *)a2 + v4;
  *(uint64_t *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
  v24 = *(uint64_t *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v24);
  v5 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v24;
  swift_bridgeObjectRelease(v5);
  v26 = *((_QWORD *)v28 + 2);
  v27 = *((_QWORD *)v25 + 2);
  swift_bridgeObjectRetain(v27);
  *((_QWORD *)v28 + 2) = v27;
  swift_bridgeObjectRelease(v26);
  if (*((_QWORD *)v28 + 4) <= 5uLL)
  {
    if (*((_QWORD *)v25 + 4) <= 5uLL)
    {
      *(_OWORD *)(v28 + 24) = *(_OWORD *)(v25 + 24);
    }
    else
    {
      *((_QWORD *)v28 + 3) = *((_QWORD *)v25 + 3);
      v22 = *((_QWORD *)v25 + 4);
      swift_bridgeObjectRetain(v22);
      *((_QWORD *)v28 + 4) = v22;
    }
  }
  else if (*((_QWORD *)v25 + 4) <= 5uLL)
  {
    sub_1000090EC((uint64_t)(v28 + 24));
    *(_OWORD *)(v28 + 24) = *(_OWORD *)(v25 + 24);
  }
  else
  {
    *((_QWORD *)v28 + 3) = *((_QWORD *)v25 + 3);
    v23 = *((_QWORD *)v25 + 4);
    swift_bridgeObjectRetain(v23);
    v6 = *((_QWORD *)v28 + 4);
    *((_QWORD *)v28 + 4) = v23;
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  __dst = &v28[*(int *)(v7 + 28)];
  __src = &v25[*(int *)(v7 + 28)];
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (((unsigned int (*)(char *, uint64_t))v21)(__dst, 1))
  {
    if (v21(__src, 1, v19))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, __src, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
  }
  else if (v21(__src, 1, v19))
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(__dst, v19);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 24))(__dst, __src, v19);
  }
  v10 = type metadata accessor for Snapshot(0);
  v15 = &v28[*(int *)(v10 + 20)];
  v16 = &v25[*(int *)(v10 + 20)];
  if (*(_QWORD *)v15 < 2uLL)
  {
    if (*(_QWORD *)v16 < 2uLL)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_WORD *)v15 + 8) = *((_WORD *)v16 + 8);
    }
    else
    {
      v13 = *(_QWORD *)v16;
      swift_bridgeObjectRetain(*(_QWORD *)v16);
      *(_QWORD *)v15 = v13;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      v15[16] = v16[16];
      v15[17] = v16[17];
    }
  }
  else if (*(_QWORD *)v16 < 2uLL)
  {
    sub_10000A004(v15);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_WORD *)v15 + 8) = *((_WORD *)v16 + 8);
  }
  else
  {
    v14 = *(_QWORD *)v16;
    swift_bridgeObjectRetain(*(_QWORD *)v16);
    v11 = *(_QWORD *)v15;
    *(_QWORD *)v15 = v14;
    swift_bridgeObjectRelease(v11);
    *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
    v15[16] = v16[16];
    v15[17] = v16[17] & 1;
  }
  return a1;
}

char *sub_100053C44(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  char *__dst;
  char *__src;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v20;

  v20 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a2, v20) == 1)
  {
    v3 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v20, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  v4 = *(int *)(a3 + 20);
  v15 = &a1[v4];
  v16 = &a2[v4];
  *(_OWORD *)v15 = *(_OWORD *)&a2[v4];
  *((_QWORD *)v15 + 2) = *(_QWORD *)&a2[v4 + 16];
  *(_OWORD *)(v15 + 24) = *(_OWORD *)&a2[v4 + 24];
  v5 = type metadata accessor for Mailbox(0);
  __dst = &v15[*(int *)(v5 + 28)];
  __src = &v16[*(int *)(v5 + 28)];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(__src, 1))
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(__dst, __src, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v7 = type metadata accessor for Snapshot(0);
  v9 = &v15[*(int *)(v7 + 20)];
  v10 = &v16[*(int *)(v7 + 20)];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_WORD *)v9 + 8) = *((_WORD *)v10 + 8);
  return a1;
}

char *sub_100053EB0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *__src;
  char *__dst;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_10003B1A8((uint64_t)a1);
    v23 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(a2, v23) == 1)
    {
      v3 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v23, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v4 = *(int *)(a3 + 20);
  v22 = &a1[v4];
  v21 = &a2[v4];
  *(_QWORD *)v22 = *(_QWORD *)&a2[v4];
  v5 = *(_QWORD *)&a1[v4 + 8];
  *((_QWORD *)v22 + 1) = *(_QWORD *)&a2[v4 + 8];
  swift_bridgeObjectRelease(v5);
  v6 = *((_QWORD *)v22 + 2);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v21 + 2);
  swift_bridgeObjectRelease(v6);
  if (*((_QWORD *)v22 + 4) <= 5uLL)
  {
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
  }
  else if (*((_QWORD *)v21 + 4) <= 5uLL)
  {
    sub_1000090EC((uint64_t)(v22 + 24));
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
  }
  else
  {
    *((_QWORD *)v22 + 3) = *((_QWORD *)v21 + 3);
    v7 = *((_QWORD *)v22 + 4);
    *((_QWORD *)v22 + 4) = *((_QWORD *)v21 + 4);
    swift_bridgeObjectRelease(v7);
  }
  v8 = type metadata accessor for Mailbox(0);
  __dst = &v22[*(int *)(v8 + 28)];
  __src = &v21[*(int *)(v8 + 28)];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (((unsigned int (*)(char *, uint64_t))v20)(__dst, 1))
  {
    if (v20(__src, 1, v18))
    {
      v10 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, __src, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
  }
  else if (v20(__src, 1, v18))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(__dst, v18);
    v9 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 40))(__dst, __src, v18);
  }
  v11 = type metadata accessor for Snapshot(0);
  v14 = &v22[*(int *)(v11 + 20)];
  v15 = &v21[*(int *)(v11 + 20)];
  if (*(_QWORD *)v14 < 2uLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
  }
  else if (*(_QWORD *)v15 < 2uLL)
  {
    sub_10000A004(v14);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
  }
  else
  {
    v12 = *(_QWORD *)v14;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    swift_bridgeObjectRelease(v12);
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    v14[16] = v15[16];
    v14[17] = v15[17] & 1;
  }
  return a1;
}

uint64_t sub_100054344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054360);
}

uint64_t sub_100054360(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = sub_100008AC0(&qword_10008BAD8);
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else
  {
    v4 = type metadata accessor for Snapshot(0);
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 20), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t sub_100054434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054450);
}

uint64_t sub_100054450(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = sub_100008AC0(&qword_10008BAD8);
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = type metadata accessor for Snapshot(0);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  __break(1u);
  return result;
}

uint64_t sub_100054524(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v6 = sub_10004392C(319);
  v7 = v6;
  if (v1 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v6 - 8) + 64;
    v2 = type metadata accessor for Snapshot(319);
    v7 = v2;
    if (v3 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v2 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
      return 0;
    }
  }
  return v7;
}

uint64_t sub_100054610()
{
  _QWORD v1[2];

  v1[0] = &unk_1000844C0;
  v1[1] = sub_100051180();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of static WidgetBundleBuilder.buildBlock<A>(_:)>>, 1);
}

uint64_t sub_10005465C()
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];
  _QWORD v4[2];
  _QWORD v5[2];

  v2 = sub_100008DF0(&qword_10008C118);
  v1 = sub_100008DF0(&qword_10008C110);
  v5[0] = sub_100008DF0(&qword_10008C108);
  v5[1] = sub_100051AFC();
  v4[0] = v1;
  v4[1] = swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v3[0] = v2;
  v3[1] = swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_10005471C()
{
  _QWORD v1[4];

  v1[0] = sub_100008DF0(&qword_10008C138);
  v1[1] = &type metadata for EmptyView;
  v1[2] = sub_100052CC4();
  v1[3] = &protocol witness table for EmptyView;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_100054788(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D590, 1);
}

uint64_t sub_1000547AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D5F8, 1);
}

uint64_t sub_1000547D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D5C4, 1);
}

unint64_t sub_1000547F4()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C200;
  if (!qword_10008C200)
  {
    WitnessTable = swift_getWitnessTable(&unk_10007463C, &unk_1000844A0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C200);
    return WitnessTable;
  }
  return v2;
}

_OWORD *sub_100054860(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v9;
  char *__dst;
  char *__src;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;

  v21 = sub_100008AC0(&qword_10008C168);
  if (swift_getEnumCaseMultiPayload(a1, v21))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
    *(_OWORD *)((char *)a2 + 24) = *(_OWORD *)((char *)a1 + 24);
    v2 = type metadata accessor for Mailbox(0);
    v15 = (char *)a2 + *(int *)(v2 + 28);
    v16 = (char *)a1 + *(int *)(v2 + 28);
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v18 + 48))(v16, 1))
    {
      v3 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v4 = type metadata accessor for Snapshot(0);
    v13 = (char *)a2 + *(int *)(v4 + 20);
    v14 = (char *)a1 + *(int *)(v4 + 20);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_WORD *)v13 + 8) = *((_WORD *)v14 + 8);
    v9 = (int *)type metadata accessor for MessagesContentView(0);
    __dst = (char *)a2 + v9[5];
    __src = (char *)a1 + v9[5];
    v12 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(__src, v12) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 32))(__dst, __src);
      swift_storeEnumTagMultiPayload(__dst, v12, 1);
    }
    else
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v6 = (char *)a2 + v9[6];
    v7 = (char *)a1 + v9[6];
    *(_QWORD *)v6 = *(_QWORD *)v7;
    v6[8] = v7[8];
    *(_OWORD *)((char *)a2 + v9[7]) = *(_OWORD *)((char *)a1 + v9[7]);
    swift_storeEnumTagMultiPayload(a2, v21, 0);
  }
  return a2;
}

_QWORD *sub_100054B74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;

  v31 = sub_100008AC0(&qword_10008C168);
  if (swift_getEnumCaseMultiPayload(a1, v31))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v27 = a1[1];
    swift_bridgeObjectRetain(v27);
    a2[1] = v27;
    v28 = a1[2];
    swift_bridgeObjectRetain(v28);
    a2[2] = v28;
    if (a1[4] <= 5uLL)
    {
      *(_OWORD *)(a2 + 3) = *(_OWORD *)(a1 + 3);
    }
    else
    {
      a2[3] = a1[3];
      v26 = a1[4];
      swift_bridgeObjectRetain(v26);
      a2[4] = v26;
    }
    v2 = type metadata accessor for Mailbox(0);
    v22 = (char *)a2 + *(int *)(v2 + 28);
    v23 = (char *)a1 + *(int *)(v2 + 28);
    v24 = type metadata accessor for URL(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v25 + 48))(v23, 1))
    {
      v3 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v4 = type metadata accessor for Snapshot(0);
    v20 = (char *)a2 + *(int *)(v4 + 20);
    v21 = (char *)a1 + *(int *)(v4 + 20);
    if (*(_QWORD *)v21 < 2uLL)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_WORD *)v20 + 8) = *((_WORD *)v21 + 8);
    }
    else
    {
      v19 = *(_QWORD *)v21;
      swift_bridgeObjectRetain(*(_QWORD *)v21);
      *(_QWORD *)v20 = v19;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      v20[16] = v21[16];
      v20[17] = v21[17];
    }
    v15 = (int *)type metadata accessor for MessagesContentView(0);
    v16 = (_QWORD *)((char *)a2 + v15[5]);
    v17 = (_QWORD *)((char *)a1 + v15[5]);
    v18 = sub_100008AC0(&qword_10008BAE0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(v16, v17);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      v14 = *v17;
      swift_retain();
      *v16 = v14;
      swift_storeEnumTagMultiPayload(v16, v18, 0);
    }
    v11 = (char *)a2 + v15[6];
    v6 = (char *)a1 + v15[6];
    v9 = *(_QWORD *)v6;
    v10 = v6[8];
    sub_1000454B4(*(_QWORD *)v6, v10 & 1);
    *(_QWORD *)v11 = v9;
    v11[8] = v10 & 1;
    v7 = v15[7];
    v12 = (char *)a2 + v7;
    *(_QWORD *)((char *)a2 + v7) = *(_QWORD *)((char *)a1 + v7);
    v13 = *(_QWORD *)((char *)a1 + v7 + 8);
    swift_retain();
    *((_QWORD *)v12 + 1) = v13;
    swift_storeEnumTagMultiPayload(a2, v31, 0);
  }
  return a2;
}

void *sub_100054F54(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;

  v6 = sub_100008AC0(&qword_10008BAE0);
  if (swift_getEnumCaseMultiPayload(a1, v6) == 1)
  {
    v2 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v6, 1);
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  return a2;
}

unint64_t sub_100054FF4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008C208;
  if (!qword_10008C208)
  {
    v0 = objc_opt_self(EMDaemonInterface);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008C208);
    return ObjCClassMetadata;
  }
  return v3;
}

void *sub_100055058@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;

  v3 = type metadata accessor for Optional(0, a2);
  return sub_100064DDC(a1, a3, a2, v3);
}

uint64_t sub_1000550A0()
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100074720);
  return Environment.init(_:)(KeyPath);
}

uint64_t sub_1000550D0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a5;
  v32 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v40 = sub_100008AC0(&qword_10008BBD8);
  v37 = *(_QWORD *)(v40 - 8);
  v33 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v32);
  v39 = (char *)&v31 - v33;
  sub_10003856C(v5, v6);
  v45 = (int *)type metadata accessor for MessageView(0);
  sub_10002D220(v34, (char *)(v46 + v45[5]));
  v7 = v36;
  v8 = (uint64_t)v39;
  v9 = v46;
  v10 = v45;
  *(_QWORD *)(v46 + v45[6]) = v35;
  *(_BYTE *)(v9 + v10[7]) = v7 & 1;
  v38 = v10[8];
  sub_100055290(v8, 16.0);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v46 + v38, v39, v40);
  v41 = v45[9];
  v43 = 0.0;
  v11 = sub_10003B220(0.0);
  v13 = v12;
  v14 = v43;
  v15 = v11;
  v16 = v45;
  v17 = (_QWORD *)(v46 + v41);
  *v17 = v13;
  v17[1] = v15;
  v42 = v16[10];
  v18 = sub_10003B220(v14);
  v20 = v19;
  v21 = v43;
  v22 = v18;
  v23 = v45;
  v24 = (_QWORD *)(v46 + v42);
  *v24 = v20;
  v24[1] = v22;
  v44 = v23[11];
  v25 = sub_10003B220(v21);
  v26 = v45;
  v27 = (_QWORD *)(v46 + v44);
  *v27 = v28;
  v27[1] = v25;
  v47 = v26[12];
  KeyPath = swift_getKeyPath(&unk_100074B38);
  return Environment.init(_:)(KeyPath);
}

uint64_t sub_100055290@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  char *v9;
  double *v10;
  double v11;
  double v12;

  v8 = a1;
  *(double *)&v6[1] = a2;
  v12 = 0.0;
  v2 = type metadata accessor for Font.TextStyle(0);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)v6 - v7;
  v12 = __chkstk_darwin(v2);
  v10 = &v11;
  v11 = v12;
  (*(void (**)(void))(v3 + 104))();
  v4 = sub_10005C4FC();
  return ScaledMetric.init(wrappedValue:relativeTo:)(v10, v9, &type metadata for CGFloat, v4);
}

double sub_100055340()
{
  char *v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  double v10;

  v8 = sub_100008AC0(&qword_10008BBD8);
  v6 = *(_QWORD *)(v8 - 8);
  v4 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8);
  v0 = (char *)&v3 - v4;
  v7 = (char *)&v3 - v4;
  v1 = type metadata accessor for MessageView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v0, v5 + *(int *)(v1 + 32), v8);
  ScaledMetric.wrappedValue.getter(&v10, v8);
  v9 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v7, v8);
  return v9;
}

double sub_100055404()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  double v8;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 36));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = v8;
  swift_release();
  return v6;
}

double sub_100055498()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 36));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.projectedValue.getter(v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = *(double *)&v8[2];
  swift_release();
  return v6;
}

double sub_100055544()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  double v8;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 40));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = v8;
  swift_release();
  return v6;
}

double sub_1000555D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 40));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.projectedValue.getter(v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = *(double *)&v8[2];
  swift_release();
  return v6;
}

double sub_100055684()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  double v8;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 44));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = v8;
  swift_release();
  return v6;
}

double sub_100055718()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 44));
  v4 = *v1;
  v5 = v1[1];
  swift_retain();
  swift_retain();
  v7[0] = v4;
  v7[1] = v5;
  v2 = sub_100008AC0(&qword_10008BAE8);
  State.projectedValue.getter(v8, v2);
  sub_10003B2F4((uint64_t)v7);
  v6 = *(double *)&v8[2];
  swift_release();
  return v6;
}

uint64_t sub_1000557C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;

  v16 = 0;
  v7 = 0;
  v9 = type metadata accessor for MessageView(0);
  v8 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v13 = (uint64_t *)((char *)&v4 - v8);
  v11 = type metadata accessor for Message(v1);
  v10 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v9);
  v12 = (char *)&v4 - v10;
  v16 = v0;
  sub_100012B90((char *)(v0 + *(int *)(v2 + 20)), (char *)&v4 - v10);
  v15 = v12[*(int *)(v11 + 36)];
  sub_100012DE8(v12);
  sub_100040C0C(v14, v13);
  if ((v15 & 1) != 0)
    v6 = *((unsigned __int8 *)v13 + *(int *)(v9 + 28)) ^ 1;
  else
    v6 = 0;
  v5 = v6;
  sub_1000410F4((uint64_t)v13);
  return v5 & 1;
}

double sub_100055904()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _BOOL4 v26;
  double v27;
  uint64_t v28;

  v28 = 0;
  v8 = sub_100008AC0(&qword_10008BBD8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8);
  v11 = (char *)&v5 - v10;
  v19 = sub_100008AC0(&qword_10008C218);
  v12 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v19);
  v0 = (uint64_t *)((char *)&v5 - v12);
  v20 = (uint64_t)&v5 - v12;
  v13 = 0;
  v24 = type metadata accessor for ContentSizeCategory(0);
  v21 = *(_QWORD *)(v24 - 8);
  v15 = *(_QWORD *)(v21 + 64);
  v14 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v13);
  v22 = (uint64_t)&v5 - v14;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v23 = (uint64_t)&v5 - v16;
  v28 = v2;
  v18 = type metadata accessor for MessageView(v3);
  sub_10005C5C8((uint64_t *)(v17 + *(int *)(v18 + 48)), v0);
  Environment.wrappedValue.getter(v19);
  sub_10005C678(v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v22, enum case for ContentSizeCategory.extraExtraLarge(_:), v24);
  v26 = sub_100055BF8(v23, v22);
  v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v25(v22, v24);
  v25(v23, v24);
  if (v26)
    return 20.0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17 + *(int *)(v18 + 32), v8);
  ScaledMetric.wrappedValue.getter(&v27, v8);
  v6 = v27;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v6;
}

uint64_t sub_100055B58@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sub_100008AC0(&qword_10008C218);
  v5 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v8);
  v1 = (uint64_t *)((char *)&v4 - v5);
  v9 = (uint64_t)&v4 - v5;
  v2 = type metadata accessor for MessageView(0);
  sub_10005C5C8((uint64_t *)(v6 + *(int *)(v2 + 48)), v1);
  Environment.wrappedValue.getter(v8);
  return sub_10005C678(v9);
}

BOOL sub_100055BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t);
  int v21;

  v9 = a1;
  v11 = a2;
  v10 = 3;
  v18 = type metadata accessor for ContentSizeCategory(0);
  v17 = *(_QWORD *)(v18 - 8);
  v13 = *(_QWORD *)(v17 + 64);
  v12 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v18);
  v14 = (char *)&v4 - v12;
  v15 = v12;
  __chkstk_darwin((char *)&v4 - v12);
  v19 = (char *)&v4 - v15;
  v16 = *(void (**)(void))(v2 + 16);
  v16();
  v20 = *(uint64_t (**)(char *, uint64_t))(v17 + 88);
  v21 = v20(v19, v18);
  if (v21 == enum case for ContentSizeCategory.extraSmall(_:))
  {
    v8 = 0;
  }
  else if (v21 == enum case for ContentSizeCategory.small(_:))
  {
    v8 = 1;
  }
  else if (v21 == enum case for ContentSizeCategory.medium(_:))
  {
    v8 = 2;
  }
  else if (v21 == enum case for ContentSizeCategory.large(_:))
  {
    v8 = v10;
  }
  else if (v21 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    v8 = 4;
  }
  else if (v21 == enum case for ContentSizeCategory.extraExtraLarge(_:))
  {
    v8 = 5;
  }
  else if (v21 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    v8 = 6;
  }
  else if (v21 == enum case for ContentSizeCategory.accessibilityMedium(_:))
  {
    v8 = 7;
  }
  else if (v21 == enum case for ContentSizeCategory.accessibilityLarge(_:))
  {
    v8 = 8;
  }
  else if (v21 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    v8 = 9;
  }
  else if (v21 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
  {
    v8 = 10;
  }
  else if (v21 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v8 = 11;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v18);
    v8 = v10;
  }
  v6 = v8;
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, v9, v18);
  v7 = v20(v14, v18);
  if (v7 == enum case for ContentSizeCategory.extraSmall(_:))
  {
    v5 = 0;
  }
  else if (v7 == enum case for ContentSizeCategory.small(_:))
  {
    v5 = 1;
  }
  else if (v7 == enum case for ContentSizeCategory.medium(_:))
  {
    v5 = 2;
  }
  else if (v7 == enum case for ContentSizeCategory.large(_:))
  {
    v5 = v10;
  }
  else if (v7 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    v5 = 4;
  }
  else if (v7 == enum case for ContentSizeCategory.extraExtraLarge(_:))
  {
    v5 = 5;
  }
  else if (v7 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    v5 = 6;
  }
  else if (v7 == enum case for ContentSizeCategory.accessibilityMedium(_:))
  {
    v5 = 7;
  }
  else if (v7 == enum case for ContentSizeCategory.accessibilityLarge(_:))
  {
    v5 = 8;
  }
  else if (v7 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    v5 = 9;
  }
  else if (v7 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
  {
    v5 = 10;
  }
  else if (v7 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v5 = 11;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v18);
    v5 = v10;
  }
  return v6 < v5;
}

uint64_t sub_100056170@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v18 = a1;
  v27 = 0;
  v22 = &v25;
  v25 = 0;
  v26 = 0;
  v9 = *(_QWORD *)(type metadata accessor for MessageView(0) - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v8 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v7[1]);
  v12 = (char *)v7 - v8;
  v27 = v1;
  sub_100040C0C(v1, (_QWORD *)((char *)v7 - v8));
  v2 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v2 + 16) & ~v2;
  v13 = swift_allocObject(&unk_100084580, v11 + v10, v2 | 7);
  sub_10005C9A0(v12, (char *)(v13 + v11));
  v14 = sub_100008AC0(&qword_10008C220);
  v3 = sub_10005CDB4();
  v4 = GeometryReader.init(content:)(sub_10005CD68, v13, v14, v3);
  v15 = v24;
  v24[0] = v4;
  v24[1] = v5;
  v19 = sub_100008AC0(&qword_10008C240);
  v20 = sub_10005CEAC();
  sub_100031764((uint64_t)v15, v19, (uint64_t)v22);
  sub_10003B2F4((uint64_t)v15);
  v16 = v25;
  v17 = v26;
  swift_retain();
  v21 = v23;
  v23[0] = v16;
  v23[1] = v17;
  sub_100031764((uint64_t)v23, v19, v18);
  sub_10003B2F4((uint64_t)v21);
  result = (uint64_t)v22;
  sub_10003B2F4((uint64_t)v22);
  return result;
}

uint64_t sub_100056314@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;

  v35 = a3;
  v28 = a1;
  v22 = a2;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v4 = type metadata accessor for MessageView(0);
  v18 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v27 = (unint64_t *)((char *)&v18 - v18);
  v32 = sub_100008AC0(&qword_10008C238);
  v19 = (*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v32);
  v34 = (uint64_t)&v18 - v19;
  v36 = sub_100008AC0(&qword_10008C220);
  v20 = (*(_QWORD *)(*(_QWORD *)(v36 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v28);
  v38 = (uint64_t)&v18 - v20;
  v21 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = __chkstk_darwin(v6);
  v39 = (uint64_t)&v18 - v21;
  v44 = (char *)&v18 - v21;
  v43 = v8;
  v42 = a2;
  v26 = static HorizontalAlignment.leading.getter(v7);
  sub_1000565A4(v28, v9);
  v23 = v10;
  sub_100040C0C(v22, v27);
  v24 = &v40;
  v41 = v27;
  v25 = sub_100008AC0(&qword_10008C3B0);
  v11 = sub_10005FBD8();
  v31 = 0;
  VStack.init(alignment:spacing:content:)(v26, v23, 0, sub_10005FBD0, v24, v25, v11);
  v12 = sub_1000410F4((uint64_t)v27);
  v29 = GeometryProxy.size.getter(v12);
  GeometryProxy.size.getter(v13);
  v30 = v14;
  v33 = sub_10005CE3C();
  v15 = sub_10003FB18();
  View.frame(width:height:alignment:)(*(_QWORD *)&v29, v31, v30, v31, v15, v16, v32, v33);
  sub_10005FC48(v34);
  v37 = sub_10005CDB4();
  sub_100031764(v38, v36, v39);
  sub_10005FC48(v38);
  sub_100060714(v39, v38);
  sub_100031764(v38, v36, v35);
  sub_10005FC48(v38);
  return sub_10005FC48(v39);
}

uint64_t sub_1000565A4(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  double v44;
  _QWORD v45[2];
  double v46;
  _QWORD v47[2];
  double v48;
  _QWORD v49[2];
  double v50;
  uint64_t v51;
  uint64_t v52;

  v16 = a1;
  v3 = v2;
  v25 = v3;
  v52 = 0;
  v51 = 0;
  v20 = 0;
  v41 = type metadata accessor for FloatingPointRoundingRule(a2);
  v40 = *(_QWORD *)(v41 - 8);
  v18 = *(_QWORD *)(v40 + 64);
  v17 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v41);
  v42 = (char *)&v14 - v17;
  v19 = v17;
  __chkstk_darwin((char *)&v14 - v17);
  v39 = (char *)&v14 - v19;
  v52 = a1;
  v51 = v5;
  GeometryProxy.size.getter(a1);
  v6 = v25;
  v37 = v7;
  v30 = (int *)type metadata accessor for MessageView(v20);
  v8 = (uint64_t *)(v6 + v30[9]);
  v21 = *v8;
  v23 = v8[1];
  swift_retain();
  swift_retain();
  v22 = v49;
  v49[0] = v21;
  v49[1] = v23;
  v31 = sub_100008AC0(&qword_10008BAE8);
  State.wrappedValue.getter(&v50, v31);
  v9 = v25;
  sub_10003B2F4((uint64_t)v22);
  v29 = v50;
  swift_release();
  v10 = (uint64_t *)(v9 + v30[10]);
  v24 = *v10;
  v27 = v10[1];
  swift_retain();
  swift_retain();
  v26 = v47;
  v47[0] = v24;
  v47[1] = v27;
  State.wrappedValue.getter(&v48, v31);
  v11 = v25;
  sub_10003B2F4((uint64_t)v26);
  v28 = v48;
  swift_release();
  v36 = v29 + v28;
  v12 = (uint64_t *)(v11 + v30[11]);
  v32 = *v12;
  v34 = v12[1];
  swift_retain();
  swift_retain();
  v33 = v45;
  v45[0] = v32;
  v45[1] = v34;
  State.wrappedValue.getter(&v46, v31);
  sub_10003B2F4((uint64_t)v33);
  v35 = v46;
  swift_release();
  v38 = (v37 - (v36 + v35)) * 0.16;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, enum case for FloatingPointRoundingRule.down(_:), v41);
  v44 = v38;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v42, v39, v41);
  result = (*(uint64_t (**)(char *, uint64_t))(v40 + 88))(v42, v41);
  v43 = result;
  if ((_DWORD)result == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v44 = round(v38);
    goto LABEL_15;
  }
  if (v43 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v44 = rint(v38);
    goto LABEL_15;
  }
  if (v43 == enum case for FloatingPointRoundingRule.up(_:))
    goto LABEL_13;
  if (v43 == enum case for FloatingPointRoundingRule.down(_:))
  {
LABEL_14:
    v44 = floor(v38);
    goto LABEL_15;
  }
  if (v43 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    v44 = trunc(v38);
    goto LABEL_15;
  }
  if (v43 != enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    Double._roundSlowPath(_:)(v39);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
LABEL_15:
    v14 = v44;
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  }
  v15 = *(_QWORD *)&v38 >> 63;
  if (v38 >= 0.0)
  {
LABEL_13:
    v44 = ceil(v38);
    goto LABEL_15;
  }
  if (v15 == 1)
    goto LABEL_14;
  __break(1u);
  return result;
}

uint64_t sub_100056A70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t KeyPath;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD v107[4];
  _QWORD v108[3];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[3];
  _QWORD v112[3];
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[2];
  _QWORD v116[3];
  _QWORD v117[2];
  _QWORD v118[3];
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;

  v37 = a2;
  v106 = a1;
  v123 = 0;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v119 = 0;
  v38 = sub_100008AC0(&qword_10008C440);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v38);
  v41 = (uint64_t)&v24 - v40;
  v42 = sub_100008AC0(&qword_10008C438);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v42);
  v45 = (uint64_t)&v24 - v44;
  v46 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v44);
  v47 = (uint64_t)&v24 - v46;
  v123 = (char *)&v24 - v46;
  v48 = sub_100008AC0(&qword_10008C468);
  v49 = (*(_QWORD *)(*(_QWORD *)(v48 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v48);
  v50 = (char *)&v24 - v49;
  v51 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v49);
  v52 = (char *)&v24 - v51;
  v53 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v51);
  v54 = (char *)&v24 - v53;
  v122 = (char *)&v24 - v53;
  v95 = sub_100008AC0(&qword_10008C470);
  v55 = (*(_QWORD *)(*(_QWORD *)(v95 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v95);
  v99 = (uint64_t)&v24 - v55;
  v101 = sub_100008AC0(&qword_10008C430);
  v56 = (*(_QWORD *)(*(_QWORD *)(v101 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v101);
  v57 = (uint64_t)&v24 - v56;
  v58 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v56);
  v103 = (uint64_t)&v24 - v58;
  v59 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v58);
  v100 = (uint64_t)&v24 - v59;
  v121 = (char *)&v24 - v59;
  v105 = 0;
  v104 = (int *)type metadata accessor for MessageView(0);
  v60 = (*(_QWORD *)(*((_QWORD *)v104 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v104);
  v88 = (uint64_t *)((char *)&v24 - v60);
  v61 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v24 - v60);
  v70 = (uint64_t *)((char *)&v24 - v61);
  v75 = sub_100008AC0(&qword_10008C478);
  v62 = (*(_QWORD *)(*(_QWORD *)(v75 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v75);
  v79 = (uint64_t)&v24 - v62;
  v81 = sub_100008AC0(&qword_10008C408);
  v63 = (*(_QWORD *)(*(_QWORD *)(v81 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v106);
  v64 = (uint64_t)&v24 - v63;
  v65 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v9);
  v83 = (uint64_t)&v24 - v65;
  v66 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v11);
  v80 = (uint64_t)&v24 - v66;
  v120 = (char *)&v24 - v66;
  v119 = v12;
  v69 = static VerticalAlignment.firstTextBaseline.getter(v12);
  sub_100040C0C(v106, v70);
  v67 = v108;
  v108[2] = v70;
  v68 = sub_100008AC0(&qword_10008C480);
  v13 = sub_100061D5C();
  v84 = 0;
  HStack.init(alignment:spacing:content:)(v69, 0x4000000000000000, 0, sub_100061D54, v67, v68, v13);
  sub_1000410F4((uint64_t)v70);
  v89 = &unk_100074B18;
  KeyPath = swift_getKeyPath(&unk_100074B18);
  v14 = (_QWORD *)((char *)v106 + v104[9]);
  v71 = *v14;
  v73 = v14[1];
  swift_retain();
  swift_retain();
  v72 = v117;
  v117[0] = v71;
  v117[1] = v73;
  v90 = sub_100008AC0(&qword_10008BAE8);
  State.projectedValue.getter(v118, v90);
  sub_10003B2F4((uint64_t)v72);
  v76 = v118[0];
  v77 = v118[1];
  v74 = *(double *)&v118[2];
  swift_release();
  v15 = sub_100061DCC();
  sub_10006C790(KeyPath, v76, v77, v75, v15, v74);
  swift_release();
  swift_release();
  swift_release();
  sub_100061E3C(v79);
  v82 = sub_100062280();
  sub_100031764(v83, v81, v80);
  v16 = sub_10006230C(v83);
  v87 = static VerticalAlignment.firstTextBaseline.getter(v16);
  sub_100040C0C(v106, v88);
  v85 = v107;
  v107[2] = v88;
  v86 = sub_100008AC0(&qword_10008C4A0);
  v17 = sub_100062788();
  HStack.init(alignment:spacing:content:)(v87, 0x4010000000000000, v84, sub_100062780, v85, v86, v17);
  sub_1000410F4((uint64_t)v88);
  v98 = swift_getKeyPath(v89);
  v18 = (_QWORD *)((char *)v106 + v104[10]);
  v91 = *v18;
  v93 = v18[1];
  swift_retain();
  swift_retain();
  v92 = v115;
  v115[0] = v91;
  v115[1] = v93;
  State.projectedValue.getter(v116, v90);
  sub_10003B2F4((uint64_t)v92);
  v96 = v116[0];
  v97 = v116[1];
  v94 = *(double *)&v116[2];
  swift_release();
  v19 = sub_1000627F8();
  sub_10006C790(v98, v96, v97, v95, v19, v94);
  swift_release();
  swift_release();
  swift_release();
  sub_100062868(v99);
  v102 = sub_100062DE0();
  sub_100031764(v103, v101, v100);
  sub_100062E6C(v103);
  if (v105 >= *(_QWORD *)((char *)v106 + v104[6]))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v50, 1, 1, v42);
    sub_100063414();
    sub_100055058(v50, v42, v52);
    sub_1000634D8((uint64_t)v50);
    sub_10006357C(v52, v54);
  }
  else
  {
    sub_10005AEAC(v41);
    v35 = swift_getKeyPath(&unk_100074B18);
    v20 = (_QWORD *)((char *)v106 + v104[11]);
    v28 = *v20;
    v30 = v20[1];
    swift_retain();
    swift_retain();
    v29 = v110;
    v110[0] = v28;
    v110[1] = v30;
    State.projectedValue.getter(v111, v90);
    sub_10003B2F4((uint64_t)v29);
    v33 = v111[0];
    v34 = v111[1];
    v32 = *(double *)&v111[2];
    swift_release();
    v31 = sub_100008DF0(&qword_10008C2E0);
    v21 = sub_10005D680();
    v109[0] = v31;
    v109[1] = v21;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v109, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_10006C790(v35, v33, v34, v38, OpaqueTypeConformance2, v32);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
    v36 = sub_100063414();
    sub_100031764(v45, v42, v47);
    sub_100064C8C(v45);
    sub_100064D00(v47, v45);
    sub_100031764(v45, v42, (uint64_t)v50);
    sub_100064C8C(v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v50, 0, 1, v42);
    sub_100055058(v50, v42, v52);
    sub_1000634D8((uint64_t)v50);
    sub_10006357C(v52, v54);
    sub_100064C8C(v47);
  }
  sub_100063670(v80, v64);
  v27 = v114;
  v114[0] = v64;
  sub_100063FB8(v100, v57);
  v114[1] = v57;
  sub_100064AC0(v54, v52);
  v114[2] = v52;
  v25 = v113;
  v113[0] = v81;
  v113[1] = v101;
  v113[2] = v48;
  v26 = v112;
  v112[0] = v82;
  v112[1] = v102;
  v112[2] = sub_100064C10();
  sub_10003571C((uint64_t)v27, 3uLL, (uint64_t)v25, v37);
  sub_1000634D8((uint64_t)v52);
  sub_100062E6C(v57);
  sub_10006230C(v64);
  sub_1000634D8((uint64_t)v54);
  sub_100062E6C(v100);
  return sub_10006230C(v80);
}

uint64_t sub_100057480@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t OpaqueTypeConformance2;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  char v46;
  _QWORD v47[3];
  _QWORD v48[2];
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  char *v54;
  char *v55;

  v33 = a2;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v22 = &v51;
  v51 = 0;
  v52 = 0;
  v26 = sub_100008AC0(&qword_10008C400);
  v24 = *(_QWORD *)(v26 - 8);
  v11 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v26);
  v25 = (uint64_t)&v11 - v11;
  v29 = sub_100008AC0(&qword_10008C450);
  v12 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v29);
  v35 = (unint64_t *)((char *)&v11 - v12);
  v13 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v11 - v12);
  v37 = (uint64_t)&v11 - v13;
  v55 = (char *)&v11 - v13;
  v21 = 0;
  v4 = type metadata accessor for MessageView(0);
  v14 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v20 = (unint64_t *)((char *)&v11 - v14);
  v27 = sub_100008AC0(&qword_10008C4E8);
  v15 = (*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v27);
  v36 = (uint64_t)&v11 - v15;
  v16 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v11 - v15);
  v38 = (uint64_t)&v11 - v16;
  v54 = (char *)&v11 - v16;
  v53 = a1;
  v19 = static VerticalAlignment.firstTextBaseline.getter(a1);
  sub_100040C0C(a1, v20);
  v17 = &v39;
  v40 = v20;
  v18 = sub_100008AC0(&qword_10008C4F0);
  v6 = sub_100066228();
  HStack.init(alignment:spacing:content:)(v19, 0x4010000000000000, 0, sub_100066220, v17, v18, v6);
  sub_1000410F4((uint64_t)v20);
  v30 = sub_100066298();
  sub_100031764(v36, v27, v38);
  sub_100066308(v36);
  v49 = Spacer.init(minLength:)(v21, 1);
  v50 = v7 & 1;
  v28 = &type metadata for Spacer;
  v31 = &protocol witness table for Spacer;
  sub_100031764((uint64_t)&v49, (uint64_t)&type metadata for Spacer, (uint64_t)v22);
  sub_100058F1C(v25);
  v23 = sub_100008DF0(&qword_10008C2D0);
  v8 = sub_10005D564();
  v48[0] = v23;
  v48[1] = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v48, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  View.layoutPriority(_:)(v35, v26, OpaqueTypeConformance2, 0.75);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  v32 = sub_1000666D0();
  sub_100031764((uint64_t)v35, v29, v37);
  sub_100066794((uint64_t)v35);
  sub_1000667D4(v38, v36);
  v34 = v47;
  v47[0] = v36;
  v45 = v51;
  v46 = v52;
  v47[1] = &v45;
  sub_100066F40(v37, (uint64_t)v35);
  v47[2] = v35;
  v44[0] = v27;
  v44[1] = v28;
  v44[2] = v29;
  v41 = v30;
  v42 = v31;
  v43 = v32;
  sub_10003571C((uint64_t)v34, 3uLL, (uint64_t)v44, v33);
  sub_100066794((uint64_t)v35);
  sub_100066308(v36);
  sub_100066794(v37);
  return sub_100066308(v38);
}

uint64_t sub_100057938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;

  v40 = a2;
  v41 = a1;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v68 = 0;
  v42 = sub_100008AC0(&qword_10008C3F0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v42);
  v45 = (uint64_t)&v19 - v44;
  v46 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v19 - v44);
  v47 = (uint64_t)&v19 - v46;
  v77 = (char *)&v19 - v46;
  v48 = type metadata accessor for Message(0);
  v49 = (*(_QWORD *)(*(_QWORD *)(v48 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v48);
  v50 = (char *)&v19 - v49;
  v51 = sub_100008AC0(&qword_10008B888);
  v52 = (*(_QWORD *)(*(_QWORD *)(v51 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v51);
  v53 = (uint64_t)&v19 - v52;
  v54 = sub_100008AC0(&qword_10008C420);
  v55 = (*(_QWORD *)(*(_QWORD *)(v54 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v54);
  v56 = (char *)&v19 - v55;
  v57 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v19 - v55);
  v58 = (uint64_t)&v19 - v57;
  v59 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v19 - v57);
  v60 = (char *)&v19 - v59;
  v76 = (char *)&v19 - v59;
  v61 = sub_100008AC0(&qword_10008C448);
  v62 = (*(_QWORD *)(*(_QWORD *)(v61 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v61);
  v63 = (char *)&v19 - v62;
  v64 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v19 - v62);
  v65 = (uint64_t *)((char *)&v19 - v64);
  v66 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)&v19 - v64);
  v67 = (uint64_t *)((char *)&v19 - v66);
  v75 = (char *)&v19 - v66;
  v74 = a1;
  if ((sub_1000557C4() & 1) != 0)
  {
    sub_100058198(v53);
    v33 = sub_100055904();
    v34 = static Alignment.center.getter(v8, v9);
    v35 = v10;
    v11 = sub_100038BA0();
    v37 = 0;
    v38 = 1;
    View.frame(width:height:alignment:)(*(_QWORD *)&v33, 0, 0, 1, v34, v35, v51, v11);
    sub_100038C9C(v53);
    v36 = sub_100064E88();
    sub_100031764(v58, v54, (uint64_t)v60);
    sub_100038C9C(v58);
    sub_100065EF4(v60, v56);
    sub_100031764((uint64_t)v56, v54, v58);
    sub_100038C9C((uint64_t)v56);
    sub_1000323CC(v58, v54, v54, v36, v36, (uint64_t)v63);
    sub_100038C9C(v58);
    v39 = sub_100008AC0(&qword_10008C3D8);
    (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v39 - 8) + 56))(v63, v37, v38);
    sub_100066FAC();
    sub_100055058(v63, v39, v65);
    sub_100067030((uint64_t)v63);
    sub_100067378(v65, v67);
    sub_100038C9C((uint64_t)v60);
  }
  else
  {
    v12 = type metadata accessor for MessageView(0);
    sub_100012B90((char *)(v41 + *(int *)(v12 + 20)), v50);
    v32 = v50[*(int *)(v48 + 40)];
    sub_100012DE8(v50);
    if ((v32 & 1) != 0)
    {
      v68 = v60;
      sub_1000586EC(v53);
      v25 = sub_100055904();
      v26 = static Alignment.center.getter(v13, v14);
      v27 = v15;
      v16 = sub_100038BA0();
      v29 = 0;
      v30 = 1;
      View.frame(width:height:alignment:)(*(_QWORD *)&v25, 0, 0, 1, v26, v27, v51, v16);
      sub_100038C9C(v53);
      v28 = sub_100064E88();
      sub_100031764(v58, v54, (uint64_t)v60);
      sub_100038C9C(v58);
      sub_100065EF4(v60, v56);
      sub_100031764((uint64_t)v56, v54, v58);
      sub_100038C9C((uint64_t)v56);
      sub_100032490(v58, v54, v54, v28, v28, (uint64_t)v63);
      sub_100038C9C(v58);
      v31 = sub_100008AC0(&qword_10008C3D8);
      (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v31 - 8) + 56))(v63, v29, v30);
      sub_100066FAC();
      sub_100055058(v63, v31, v65);
      sub_100067030((uint64_t)v63);
      sub_100067378(v65, v67);
      sub_100038C9C((uint64_t)v60);
    }
    else
    {
      v24 = sub_100008AC0(&qword_10008C3D8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v63, 1);
      sub_100066FAC();
      sub_100055058(v63, v24, v65);
      sub_100067030((uint64_t)v63);
      sub_100067378(v65, v67);
    }
  }
  sub_100058C6C(v45);
  v19 = sub_100008DF0(&qword_10008C280);
  v17 = sub_10005D1AC();
  v73[0] = v19;
  v73[1] = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v73, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  sub_100031764(v45, v42, v47);
  v23 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v23(v45, v42);
  sub_10006788C(v67, v65);
  v22 = v72;
  v72[0] = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v47, v42);
  v72[1] = v45;
  v21 = v71;
  v71[0] = v61;
  v71[1] = v42;
  v69 = sub_100067EF0();
  v70 = OpaqueTypeConformance2;
  sub_10003571C((uint64_t)v22, 2uLL, (uint64_t)v21, v40);
  v23(v45, v42);
  sub_100067030((uint64_t)v65);
  v23(v47, v42);
  return sub_100067030((uint64_t)v67);
}

uint64_t sub_100058198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;

  v17 = a1;
  v50 = 0;
  v2 = sub_100008AC0(&qword_10008B8C0);
  v18 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v19 = (uint64_t)&v14 - v18;
  v22 = 0;
  v46 = type metadata accessor for WidgetRenderingMode(0);
  v43 = *(_QWORD *)(v46 - 8);
  v20 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v22);
  v44 = (char *)&v14 - v20;
  v21 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v45 = (char *)&v14 - v21;
  v36 = type metadata accessor for Font.Leading(v5);
  v35 = *(_QWORD *)(v36 - 8);
  v23 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v22);
  v37 = (char *)&v14 - v23;
  v33 = type metadata accessor for Image.Scale(v6);
  v31 = *(_QWORD *)(v33 - 8);
  v24 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v33);
  v32 = (char *)&v14 - v24;
  v40 = sub_100008AC0(&qword_10008B868);
  v25 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v40);
  v42 = (uint64_t)&v14 - v25;
  v26 = sub_100008AC0(&qword_10008B878);
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v26);
  v39 = (uint64_t)&v14 - v27;
  v28 = sub_100008AC0(&qword_10008B880);
  v29 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v28);
  v30 = (uint64_t)&v14 - v29;
  v50 = v1;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("star.fill", 9uLL, 1)._countAndFlagsBits;
  v8 = Image.init(systemName:)(countAndFlagsBits);
  v34 = &v49;
  v49 = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v32, enum case for Image.Scale.small(_:), v33);
  View.imageScale(_:)(v32, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  v9 = v34;
  sub_10001B7F0(v34);
  v38 = static Font.subheadline.getter(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v37, enum case for Font.Leading.tight(_:), v36);
  v41 = Font.leading(_:)(v37, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
  swift_release();
  sub_10003860C();
  View.font(_:)(v41, v40);
  swift_release();
  sub_100038704(v42);
  v10 = sub_1000306CC((uint64_t)v45);
  static WidgetRenderingMode.fullColor.getter(v10);
  v48 = static WidgetRenderingMode.== infix(_:_:)(v45, v44);
  v47 = *(void (**)(char *, uint64_t))(v43 + 8);
  v47(v44, v46);
  v47(v45, v46);
  if ((v48 & 1) != 0)
    v16 = static Color.yellow.getter();
  else
    v16 = static Color.primary.getter();
  v14 = v16;
  sub_10003878C();
  View.foregroundColor(_:)(v14, v26);
  swift_release();
  sub_100038888(v39);
  v11 = sub_1000306CC((uint64_t)v45);
  static WidgetRenderingMode.fullColor.getter(v11);
  v15 = static WidgetRenderingMode.== infix(_:_:)(v45, v44);
  v47(v44, v46);
  v47(v45, v46);
  if ((v15 & 1) != 0)
    static SymbolRenderingMode.palette.getter();
  else
    static SymbolRenderingMode.monochrome.getter();
  v12 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v19, 0, 1);
  sub_100038944();
  View.symbolRenderingMode(_:)(v19, v28);
  sub_100038A40(v19);
  return sub_100038AB0(v30);
}

uint64_t sub_1000586EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v23 = a1;
  v52 = 0;
  v2 = sub_100008AC0(&qword_10008B8C0);
  v24 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v25 = (uint64_t)&v14 - v24;
  v32 = 0;
  v26 = type metadata accessor for WidgetRenderingMode(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v32);
  v29 = (char *)&v14 - v28;
  v30 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v31 = (char *)&v14 - v30;
  v33 = type metadata accessor for Font.Leading(v5);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v32);
  v36 = (char *)&v14 - v35;
  v49 = type metadata accessor for Image.Scale(v6);
  v47 = *(_QWORD *)(v49 - 8);
  v37 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v49);
  v48 = (char *)&v14 - v37;
  v38 = sub_100008AC0(&qword_10008B868);
  v39 = (*(_QWORD *)(*(_QWORD *)(v38 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v38);
  v46 = (uint64_t)&v14 - v39;
  v40 = sub_100008AC0(&qword_10008B878);
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v40);
  v42 = (uint64_t)&v14 - v41;
  v43 = sub_100008AC0(&qword_10008B880);
  v44 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v43);
  v45 = (uint64_t)&v14 - v44;
  v52 = v1;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("circlebadge.fill", 0x10uLL, 1)._countAndFlagsBits;
  v8 = Image.init(systemName:)(countAndFlagsBits);
  v50 = &v51;
  v51 = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v48, enum case for Image.Scale.small(_:), v49);
  View.imageScale(_:)(v48, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  sub_10001B7F0(v50);
  v9 = sub_1000557C4();
  if ((v9 & 1) != 0)
    v22 = static Font.footnote.getter(v9);
  else
    v22 = static Font.subheadline.getter(v9);
  v18 = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for Font.Leading.tight(_:), v33);
  v19 = Font.leading(_:)(v36, v18);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  swift_release();
  sub_10003860C();
  View.font(_:)(v19, v38);
  swift_release();
  sub_100038704(v46);
  v10 = sub_1000306CC((uint64_t)v31);
  static WidgetRenderingMode.fullColor.getter(v10);
  v21 = static WidgetRenderingMode.== infix(_:_:)(v31, v29);
  v20 = *(void (**)(char *, uint64_t))(v27 + 8);
  v20(v29, v26);
  v20(v31, v26);
  if ((v21 & 1) != 0)
    v17 = static Color.blue.getter();
  else
    v17 = static Color.primary.getter();
  v15 = v17;
  sub_10003878C();
  View.foregroundColor(_:)(v15, v40);
  swift_release();
  sub_100038888(v42);
  v11 = sub_1000306CC((uint64_t)v31);
  static WidgetRenderingMode.fullColor.getter(v11);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v31, v29);
  v20(v29, v26);
  v20(v31, v26);
  if ((v16 & 1) != 0)
    static SymbolRenderingMode.palette.getter();
  else
    static SymbolRenderingMode.monochrome.getter();
  v12 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v25, 0, 1);
  sub_100038944();
  View.symbolRenderingMode(_:)(v25, v43);
  sub_100038A40(v25);
  return sub_100038AB0(v45);
}

uint64_t *sub_100058C6C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  char v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD v22[3];
  _QWORD v23[4];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD v35[4];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[4];
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v18 = a1;
  v57 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for MessageView(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6);
  v10 = (uint64_t)&v6 - v7;
  v57 = v1;
  sub_100040C0C(v1, (uint64_t *)((char *)&v6 - v7));
  v8 = v22;
  v22[2] = v10;
  v9 = sub_100008AC0(&qword_10008C250);
  v2 = sub_10005CF24();
  Group<A>.init(content:)(sub_10005CF1C, v8, v9, v2);
  sub_1000410F4(v10);
  v12 = v35;
  v35[0] = v37;
  v35[1] = v38;
  v35[2] = v39;
  v35[3] = v40;
  v17 = 1;
  v36 = v41 & 1;
  v11 = sub_100008AC0(&qword_10008C260);
  sub_10005CFA8();
  View.lineLimit(_:)(v42);
  v3 = sub_10005D024(v12);
  v16 = v30;
  v30[0] = v42[0];
  v30[1] = v42[1];
  v30[2] = v42[2];
  v30[3] = v42[3];
  v31 = v43 & 1 & v17;
  v32 = v44;
  v33 = v45;
  v34 = v46 & 1 & v17;
  v13 = static Font.subheadline.getter(v3);
  static Font.Weight.semibold.getter(v13);
  v15 = Font.weight(_:)(v13);
  swift_release();
  v14 = sub_100008AC0(&qword_10008C270);
  sub_10005D0D4();
  View.font(_:)(v15, v14);
  swift_release();
  sub_10005D160(v16);
  v21 = v23;
  v23[0] = v47;
  v23[1] = v48;
  v23[2] = v49;
  v23[3] = v50;
  v24 = v51 & 1 & v17;
  v25 = v52;
  v26 = v53;
  v27 = v54 & 1 & v17;
  v28 = v55;
  v29 = v56;
  v19 = sub_100008AC0(&qword_10008C280);
  v20 = sub_10005D1AC();
  v4 = sub_10003AF18();
  View.widgetAccentable(_:)(v4 & 1, v19, v20);
  return sub_10005D238(v21);
}

uint64_t sub_100058F1C@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD v61[2];
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[2];
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v30 = a1;
  v106 = 0;
  v13 = 0;
  v14 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v1 = (char *)&v13 - v14;
  v16 = (char *)&v13 - v14;
  v106 = v2;
  v4 = type metadata accessor for MessageView(v3);
  sub_100012B90((char *)(v15 + *(int *)(v4 + 20)), v1);
  v18 = sub_10002DEBC();
  v17 = v5;
  sub_100012DE8(v16);
  v19 = v72;
  v72[0] = v18;
  v72[1] = v17;
  sub_100038E3C();
  v68 = Text.init<A>(_:)(v19, &type metadata for String);
  v69 = v6;
  v70 = v7;
  v71 = v8;
  v20 = v65;
  v65[0] = v68;
  v65[1] = v6;
  v29 = 1;
  v66 = v7 & 1;
  v67 = v8;
  View.layoutPriority(_:)(v73, &type metadata for Text, &protocol witness table for Text, 1.0);
  sub_100038EA4((uint64_t)v20);
  v22 = v61;
  v61[0] = v73[0];
  v61[1] = v73[1];
  v62 = v74 & 1 & v29;
  v63 = v75;
  v64 = v76;
  v21 = sub_100008AC0(&qword_10008C290);
  sub_10005D29C();
  View.lineLimit(_:)(v77);
  v9 = sub_100038EA4((uint64_t)v22);
  v25 = v54;
  v54[0] = v77[0];
  v54[1] = v77[1];
  v55 = v78 & 1 & v29;
  v56 = v79;
  v57 = v80;
  v58 = v81;
  v59 = v82;
  v60 = v83 & 1 & v29;
  v24 = static Font.footnote.getter(v9);
  v23 = sub_100008AC0(&qword_10008C2B0);
  sub_10005D394();
  View.font(_:)(v24, v23);
  swift_release();
  v10 = sub_10005D420((uint64_t)v25);
  v28 = v45;
  v45[0] = v84;
  v45[1] = v85;
  v46 = v86 & 1 & v29;
  v47 = v87;
  v48 = v88;
  v49 = v89;
  v50 = v90;
  v51 = v91 & 1 & v29;
  v52 = v92;
  v53 = v93;
  v27 = static Color.secondary.getter(v10);
  v26 = sub_100008AC0(&qword_10008C2C0);
  sub_10005D470();
  View.foregroundColor(_:)(v27, v26);
  swift_release();
  sub_10005D4FC((uint64_t)v28);
  v33 = v34;
  v34[0] = v94;
  v34[1] = v95;
  v35 = v96 & 1 & v29;
  v36 = v97;
  v37 = v98;
  v38 = v99;
  v39 = v100;
  v40 = v101 & 1 & v29;
  v41 = v102;
  v42 = v103;
  v43 = v104;
  v44 = v105;
  v31 = sub_100008AC0(&qword_10008C2D0);
  v32 = sub_10005D564();
  v11 = sub_10003AF18();
  View.widgetAccentable(_:)(v11 & 1, v31, v32);
  return sub_10005D5F0((uint64_t)v33);
}

uint64_t sub_1000592EC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v21[2];
  _QWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  void (*v28)(uint64_t, uint64_t);
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  int *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  char *v84;
  _QWORD v85[3];
  unint64_t v86;
  unint64_t v87;
  _QWORD v88[5];
  uint64_t v89;
  char v90;
  _QWORD v91[5];
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  _QWORD v96[2];
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;

  v39 = a2;
  v81 = a1;
  v102 = 0;
  v101 = 0;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v94 = 0;
  v95 = 0;
  v84 = 0;
  v83 = 0;
  v40 = sub_100008AC0(&qword_10008C460);
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v40);
  v42 = (uint64_t *)((char *)v21 - v41);
  v102 = (char *)v21 - v41;
  v43 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v44 = (uint64_t *)((char *)v21 - v43);
  v45 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v43);
  v46 = (uint64_t *)((char *)v21 - v45);
  v47 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v45);
  v48 = (uint64_t *)((char *)v21 - v47);
  v101 = (char *)v21 - v47;
  v49 = sub_100008AC0(&qword_10008C3F0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v49);
  v52 = (uint64_t)v21 - v51;
  v53 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v51);
  v54 = (uint64_t)v21 - v53;
  v100 = (char *)v21 - v53;
  v55 = sub_100008AC0(&qword_10008B888);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v55);
  v58 = (char *)v21 - v57;
  v59 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v57);
  v60 = (char *)v21 - v59;
  v61 = sub_100008AC0(&qword_10008C420);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v61);
  v64 = (char *)v21 - v63;
  v65 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v63);
  v66 = (char *)v21 - v65;
  v99 = (char *)v21 - v65;
  v67 = 0;
  v68 = (int *)type metadata accessor for Message(0);
  v69 = (*(_QWORD *)(*((_QWORD *)v68 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v67);
  v70 = (char *)v21 - v69;
  v71 = type metadata accessor for MessageView(v10);
  v72 = (*(_QWORD *)(*(_QWORD *)(v71 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v71);
  v80 = (char *)v21 - v72;
  v73 = sub_100008AC0(&qword_10008C458);
  v74 = (*(_QWORD *)(*(_QWORD *)(v73 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v73);
  v75 = (char *)v21 - v74;
  v76 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v74);
  v77 = (uint64_t *)((char *)v21 - v76);
  v78 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin((char *)v21 - v76);
  v79 = (uint64_t *)((char *)v21 - v78);
  v98 = (char *)v21 - v78;
  v97 = a1;
  v82 = sub_1000557C4();
  sub_100040C0C(v81, v80);
  if ((v82 & 1) != 0)
  {
    sub_100012B90(&v80[*(int *)(v71 + 20)], v70);
    v37 = v70[v68[10]];
    sub_100012DE8(v70);
    v38 = v37;
  }
  else
  {
    v38 = 0;
  }
  v36 = v38;
  sub_1000410F4((uint64_t)v80);
  if ((v36 & 1) != 0)
  {
    sub_1000586EC((uint64_t)v60);
    v30 = sub_100055904();
    v31 = static Alignment.center.getter(v13, v14);
    v32 = v15;
    v16 = sub_100038BA0();
    v33 = 0;
    v34 = 1;
    View.frame(width:height:alignment:)(*(_QWORD *)&v30, 0, 0, 1, v31, v32, v55, v16);
    sub_100038C9C((uint64_t)v60);
    v35 = sub_100064E88();
    sub_100031764((uint64_t)v64, v61, (uint64_t)v66);
    sub_100038C9C((uint64_t)v64);
    sub_100065EF4(v66, v64);
    sub_100031764((uint64_t)v64, v61, (uint64_t)v75);
    sub_100038C9C((uint64_t)v64);
    (*(void (**)(char *, _QWORD, _QWORD, uint64_t))(v62 + 56))(v75, v33, v34, v61);
    sub_100055058(v75, v61, v77);
    sub_100064F10((uint64_t)v75);
    sub_1000650C8(v77, v79);
    sub_100038C9C((uint64_t)v66);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v75, 1, 1, v61);
    sub_100064E88();
    sub_100055058(v75, v61, v77);
    sub_100064F10((uint64_t)v75);
    sub_1000650C8(v77, v79);
  }
  sub_10005A150(v52);
  v26 = sub_100008DF0(&qword_10008C280);
  v17 = sub_10005D1AC();
  v96[0] = v26;
  v96[1] = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v96, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  sub_100031764(v52, v49, v54);
  v28 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v28(v52, v49);
  v92 = Spacer.init(minLength:)(0, 0);
  v93 = v18 & 1;
  sub_100031764((uint64_t)&v92, (uint64_t)&type metadata for Spacer, (uint64_t)&v94);
  sub_100012B90(&v81[*(int *)(v71 + 20)], v70);
  v29 = v70[v68[11]];
  sub_100012DE8(v70);
  if ((v29 & 1) != 0)
  {
    v83 = v60;
    sub_10005A3E4((uint64_t)v58);
    v25 = sub_100038BA0();
    sub_100031764((uint64_t)v58, v55, (uint64_t)v60);
    sub_100038C9C((uint64_t)v58);
    sub_1000399C8(v60, v58);
    sub_100031764((uint64_t)v58, v55, (uint64_t)v44);
    sub_100038C9C((uint64_t)v58);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v55);
    sub_100055058(v44, v55, v46);
    sub_100065370((uint64_t)v44);
    sub_100065524(v46, v48);
    sub_100038C9C((uint64_t)v60);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v44, 1, 1, v55);
    sub_100038BA0();
    sub_100055058(v44, v55, v46);
    sub_100065370((uint64_t)v44);
    sub_100065524(v46, v48);
  }
  sub_100012B90(&v81[*(int *)(v71 + 20)], v70);
  v24 = v70[v68[12]];
  sub_100012DE8(v70);
  if ((v24 & 1) != 0)
  {
    v84 = v60;
    sub_10005A958((uint64_t)v58);
    v23 = sub_100038BA0();
    sub_100031764((uint64_t)v58, v55, (uint64_t)v60);
    sub_100038C9C((uint64_t)v58);
    sub_1000399C8(v60, v58);
    sub_100031764((uint64_t)v58, v55, (uint64_t)v44);
    sub_100038C9C((uint64_t)v58);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v55);
    sub_100055058(v44, v55, v46);
    sub_100065370((uint64_t)v44);
    sub_100065524(v46, v42);
    sub_100038C9C((uint64_t)v60);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v44, 1, 1, v55);
    sub_100038BA0();
    sub_100055058(v44, v55, v46);
    sub_100065370((uint64_t)v44);
    sub_100065524(v46, v42);
  }
  sub_100065794(v79, v77);
  v22 = v91;
  v91[0] = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v52, v54, v49);
  v91[1] = v52;
  v89 = v94;
  v90 = v95;
  v91[2] = &v89;
  sub_100065AE0(v48, v46);
  v91[3] = v46;
  sub_100065AE0(v42, v44);
  v91[4] = v44;
  v21[0] = (uint64_t)v88;
  v88[0] = v73;
  v88[1] = v49;
  v88[2] = &type metadata for Spacer;
  v88[3] = v40;
  v88[4] = v40;
  v19 = sub_100065DFC();
  v21[1] = (uint64_t)v85;
  v85[0] = v19;
  v85[1] = OpaqueTypeConformance2;
  v85[2] = &protocol witness table for Spacer;
  v86 = sub_100065E78();
  v87 = v86;
  sub_10003571C((uint64_t)v22, 5uLL, v21[0], v39);
  sub_100065370((uint64_t)v44);
  sub_100065370((uint64_t)v46);
  v28(v52, v49);
  sub_100064F10((uint64_t)v77);
  sub_100065370((uint64_t)v42);
  sub_100065370((uint64_t)v48);
  v28(v54, v49);
  return sub_100064F10((uint64_t)v79);
}

uint64_t *sub_10005A150@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  char v4;
  _QWORD v6[2];
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD v21[3];
  _QWORD v22[4];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[4];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[4];
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v17 = a1;
  v56 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for MessageView(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v6[1]);
  v10 = (uint64_t)v6 - v7;
  v56 = v1;
  sub_100040C0C(v1, (_QWORD *)((char *)v6 - v7));
  v8 = v21;
  v21[2] = v10;
  v9 = sub_100008AC0(&qword_10008C250);
  v2 = sub_10005CF24();
  Group<A>.init(content:)(sub_10005D670, v8, v9, v2);
  sub_1000410F4(v10);
  v12 = v34;
  v34[0] = v36;
  v34[1] = v37;
  v34[2] = v38;
  v34[3] = v39;
  v16 = 1;
  v35 = v40 & 1;
  v11 = sub_100008AC0(&qword_10008C260);
  sub_10005CFA8();
  View.lineLimit(_:)(v41);
  v3 = sub_10005D024(v12);
  v15 = v29;
  v29[0] = v41[0];
  v29[1] = v41[1];
  v29[2] = v41[2];
  v29[3] = v41[3];
  v30 = v42 & 1 & v16;
  v31 = v43;
  v32 = v44;
  v33 = v45 & 1 & v16;
  v14 = static Font.footnote.getter(v3);
  v13 = sub_100008AC0(&qword_10008C270);
  sub_10005D0D4();
  View.font(_:)(v14, v13);
  swift_release();
  sub_10005D160(v15);
  v20 = v22;
  v22[0] = v46;
  v22[1] = v47;
  v22[2] = v48;
  v22[3] = v49;
  v23 = v50 & 1 & v16;
  v24 = v51;
  v25 = v52;
  v26 = v53 & 1 & v16;
  v27 = v54;
  v28 = v55;
  v18 = sub_100008AC0(&qword_10008C280);
  v19 = sub_10005D1AC();
  v4 = sub_10003AF18();
  View.widgetAccentable(_:)(v4 & 1, v18, v19);
  return sub_10005D238(v20);
}

uint64_t sub_10005A3E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;

  v18 = a1;
  v51 = 0;
  v2 = sub_100008AC0(&qword_10008B8C0);
  v19 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v20 = (uint64_t)&v15 - v19;
  v23 = 0;
  v47 = type metadata accessor for WidgetRenderingMode(0);
  v44 = *(_QWORD *)(v47 - 8);
  v21 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v23);
  v45 = (char *)&v15 - v21;
  v22 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v46 = (char *)&v15 - v22;
  v37 = type metadata accessor for Font.Leading(v5);
  v36 = *(_QWORD *)(v37 - 8);
  v24 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v23);
  v38 = (char *)&v15 - v24;
  v34 = type metadata accessor for Image.Scale(v6);
  v32 = *(_QWORD *)(v34 - 8);
  v25 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v34);
  v33 = (char *)&v15 - v25;
  v41 = sub_100008AC0(&qword_10008B868);
  v26 = (*(_QWORD *)(*(_QWORD *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v41);
  v43 = (uint64_t)&v15 - v26;
  v27 = sub_100008AC0(&qword_10008B878);
  v28 = (*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v27);
  v40 = (uint64_t)&v15 - v28;
  v29 = sub_100008AC0(&qword_10008B880);
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v29);
  v31 = (uint64_t)&v15 - v30;
  v51 = v1;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("paperclip", 9uLL, 1)._countAndFlagsBits;
  v8 = Image.init(systemName:)(countAndFlagsBits);
  v35 = &v50;
  v50 = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v33, enum case for Image.Scale.small(_:), v34);
  View.imageScale(_:)(v33, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
  v9 = v35;
  sub_10001B7F0(v35);
  v39 = static Font.footnote.getter(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v38, enum case for Font.Leading.tight(_:), v37);
  v42 = Font.leading(_:)(v38, v39);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
  swift_release();
  sub_10003860C();
  View.font(_:)(v42, v41);
  swift_release();
  sub_100038704(v43);
  v10 = sub_1000306CC((uint64_t)v46);
  static WidgetRenderingMode.fullColor.getter(v10);
  v49 = static WidgetRenderingMode.== infix(_:_:)(v46, v45);
  v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  v48(v45, v47);
  v48(v46, v47);
  if ((v49 & 1) != 0)
  {
    v11 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v17 = Color.init(_:)(v11);
  }
  else
  {
    v17 = static Color.primary.getter();
  }
  v15 = v17;
  sub_10003878C();
  View.foregroundColor(_:)(v15, v27);
  swift_release();
  sub_100038888(v40);
  v12 = sub_1000306CC((uint64_t)v46);
  static WidgetRenderingMode.fullColor.getter(v12);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v46, v45);
  v48(v45, v47);
  v48(v46, v47);
  if ((v16 & 1) != 0)
    static SymbolRenderingMode.palette.getter();
  else
    static SymbolRenderingMode.monochrome.getter();
  v13 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v20, 0, 1);
  sub_100038944();
  View.symbolRenderingMode(_:)(v20, v29);
  sub_100038A40(v20);
  return sub_100038AB0(v31);
}

uint64_t sub_10005A958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;

  v17 = a1;
  v50 = 0;
  v2 = sub_100008AC0(&qword_10008B8C0);
  v18 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v2);
  v19 = (uint64_t)&v14 - v18;
  v22 = 0;
  v46 = type metadata accessor for WidgetRenderingMode(0);
  v43 = *(_QWORD *)(v46 - 8);
  v20 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v22);
  v44 = (char *)&v14 - v20;
  v21 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v4);
  v45 = (char *)&v14 - v21;
  v36 = type metadata accessor for Font.Leading(v5);
  v35 = *(_QWORD *)(v36 - 8);
  v23 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v22);
  v37 = (char *)&v14 - v23;
  v33 = type metadata accessor for Image.Scale(v6);
  v31 = *(_QWORD *)(v33 - 8);
  v24 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v33);
  v32 = (char *)&v14 - v24;
  v40 = sub_100008AC0(&qword_10008B868);
  v25 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v40);
  v42 = (uint64_t)&v14 - v25;
  v26 = sub_100008AC0(&qword_10008B878);
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v26);
  v39 = (uint64_t)&v14 - v27;
  v28 = sub_100008AC0(&qword_10008B880);
  v29 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v28);
  v30 = (uint64_t)&v14 - v29;
  v50 = v1;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nosign", 6uLL, 1)._countAndFlagsBits;
  v8 = Image.init(systemName:)(countAndFlagsBits);
  v34 = &v49;
  v49 = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v32, enum case for Image.Scale.small(_:), v33);
  View.imageScale(_:)(v32, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  v9 = v34;
  sub_10001B7F0(v34);
  v38 = static Font.footnote.getter(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v37, enum case for Font.Leading.tight(_:), v36);
  v41 = Font.leading(_:)(v37, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
  swift_release();
  sub_10003860C();
  View.font(_:)(v41, v40);
  swift_release();
  sub_100038704(v42);
  v10 = sub_1000306CC((uint64_t)v45);
  static WidgetRenderingMode.fullColor.getter(v10);
  v48 = static WidgetRenderingMode.== infix(_:_:)(v45, v44);
  v47 = *(void (**)(char *, uint64_t))(v43 + 8);
  v47(v44, v46);
  v47(v45, v46);
  if ((v48 & 1) != 0)
    v16 = static Color.red.getter();
  else
    v16 = static Color.primary.getter();
  v14 = v16;
  sub_10003878C();
  View.foregroundColor(_:)(v14, v26);
  swift_release();
  sub_100038888(v39);
  v11 = sub_1000306CC((uint64_t)v45);
  static WidgetRenderingMode.fullColor.getter(v11);
  v15 = static WidgetRenderingMode.== infix(_:_:)(v45, v44);
  v47(v44, v46);
  v47(v45, v46);
  if ((v15 & 1) != 0)
    static SymbolRenderingMode.palette.getter();
  else
    static SymbolRenderingMode.monochrome.getter();
  v12 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v19, 0, 1);
  sub_100038944();
  View.symbolRenderingMode(_:)(v19, v28);
  sub_100038A40(v19);
  return sub_100038AB0(v30);
}

uint64_t *sub_10005AEAC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  char v4;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD v26[3];
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[4];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD v55[4];
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v22 = a1;
  v82 = 0;
  v11 = type metadata accessor for MessageView(0);
  v6 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v10);
  v9 = (uint64_t)&v6 - v6;
  v82 = v1;
  sub_100040C0C(v1, (unint64_t *)((char *)&v6 - v6));
  v7 = v26;
  v26[2] = v9;
  v8 = sub_100008AC0(&qword_10008C250);
  v2 = sub_10005CF24();
  Group<A>.init(content:)(sub_10005D678, v7, v8, v2);
  sub_1000410F4(v9);
  v14 = v48;
  v48[0] = v50;
  v48[1] = v51;
  v48[2] = v52;
  v48[3] = v53;
  v21 = 1;
  v49 = v54 & 1;
  v13 = *(_QWORD *)(v10 + *(int *)(v11 + 24));
  v12 = sub_100008AC0(&qword_10008C260);
  sub_10005CFA8();
  View.lineLimit(_:)(v55);
  v3 = sub_10005D024(v14);
  v17 = v43;
  v43[0] = v55[0];
  v43[1] = v55[1];
  v43[2] = v55[2];
  v43[3] = v55[3];
  v44 = v56 & 1 & v21;
  v45 = v57;
  v46 = v58;
  v47 = v59 & 1 & v21;
  v16 = static Font.footnote.getter(v3);
  v15 = sub_100008AC0(&qword_10008C270);
  sub_10005D0D4();
  View.font(_:)(v16, v15);
  swift_release();
  sub_10005D160(v17);
  v20 = v36;
  v36[0] = v60;
  v36[1] = v61;
  v36[2] = v62;
  v36[3] = v63;
  v37 = v64 & 1 & v21;
  v38 = v65;
  v39 = v66;
  v40 = v67 & 1 & v21;
  v41 = v68;
  v42 = v69;
  v19 = static Color.secondary.getter(v60);
  v18 = sub_100008AC0(&qword_10008C280);
  sub_10005D1AC();
  View.foregroundColor(_:)(v19, v18);
  swift_release();
  sub_10005D238(v20);
  v25 = v27;
  v27[0] = v70;
  v27[1] = v71;
  v27[2] = v72;
  v27[3] = v73;
  v28 = v74 & 1 & v21;
  v29 = v75;
  v30 = v76;
  v31 = v77 & 1 & v21;
  v32 = v78;
  v33 = v79;
  v34 = v80;
  v35 = v81;
  v23 = sub_100008AC0(&qword_10008C2E0);
  v24 = sub_10005D680();
  v4 = sub_10003AF18();
  View.widgetAccentable(_:)(v4 & 1, v23, v24);
  return sub_10005D70C(v25);
}

uint64_t *sub_10005B210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  int v31;
  __int128 *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int128 *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  __int128 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  char v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  _QWORD v66[4];
  char v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[4];
  char v81;
  _QWORD v82[2];
  char v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  _QWORD v88[2];
  char v89;
  uint64_t v90;
  _QWORD v91[4];
  char v92;
  _QWORD v93[2];
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  __int16 v102;
  __int128 v103;
  __int128 v104;
  uint64_t __b[5];
  uint64_t v106;

  v50 = &v76;
  v48 = a2;
  v53 = a1;
  v49 = "Placeholder when no sender is available for the given message";
  v106 = 0;
  memset(__b, 0, 0x21uLL);
  v103 = 0u;
  v104 = 0u;
  v78 = 0;
  v79 = 0;
  v76 = 0u;
  v77 = 0u;
  v51 = 0;
  v52 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v55 = (char *)&v14 - v52;
  v106 = v2;
  v4 = type metadata accessor for MessageView(v3);
  sub_100012B90((char *)(v53 + *(int *)(v4 + 20)), v55);
  v54 = *((_QWORD *)v55 + 2);
  v56 = *((_QWORD *)v55 + 3);
  swift_bridgeObjectRetain(v56);
  sub_100012DE8(v55);
  if (v56)
  {
    v46 = v54;
    v47 = v56;
    v45 = v56;
    v33 = v54;
    v78 = v54;
    v79 = v56;
    swift_bridgeObjectRetain(v56);
    v34 = v75;
    v75[0] = v33;
    v75[1] = v45;
    sub_100038E3C();
    v71 = Text.init<A>(_:)(v34, &type metadata for String);
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v35 = v68;
    v68[0] = v71;
    v68[1] = v5;
    v43 = 1;
    v69 = v6 & 1;
    v70 = v7;
    v44 = &v76;
    v40 = &type metadata for Text;
    v41 = &protocol witness table for Text;
    sub_100031764((uint64_t)v68, (uint64_t)&type metadata for Text, (uint64_t)&v76);
    sub_100038EA4((uint64_t)v35);
    v36 = v76;
    v37 = v77;
    v38 = *((_QWORD *)&v77 + 1);
    sub_100045354(v76, *((uint64_t *)&v76 + 1), v77 & 1);
    swift_bridgeObjectRetain(v38);
    v39 = &v60;
    v60 = v36;
    v61 = v37 & 1 & v43;
    v62 = v38;
    sub_100031764((uint64_t)&v60, (uint64_t)v40, (uint64_t)v63);
    sub_100038EA4((uint64_t)v39);
    v42 = v57;
    v57[0] = v63[0];
    v57[1] = v63[1];
    v58 = v64 & 1 & v43;
    v59 = v65;
    sub_1000323CC((uint64_t)v57, (uint64_t)v40, (uint64_t)v40, (uint64_t)v41, (uint64_t)v41, (uint64_t)v66);
    sub_100038EA4((uint64_t)v42);
    __b[0] = v66[0];
    __b[1] = v66[1];
    __b[2] = v66[2];
    __b[3] = v66[3];
    LOBYTE(__b[4]) = v67 & 1 & v43;
    sub_100038EA4((uint64_t)v44);
    swift_bridgeObjectRelease(v45);
  }
  else
  {
    v31 = 1;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_SENDER", 9uLL, 1);
    v9 = LocalizedStringKey.init(stringLiteral:)(v8._countAndFlagsBits, v8._object);
    v100 = v49;
    v101 = 61;
    v102 = 2;
    v96 = Text.init(_:tableName:bundle:comment:)(v9);
    v97 = v10;
    v98 = v11;
    v99 = v12;
    v23 = v93;
    v93[0] = v96;
    v93[1] = v10;
    v94 = v11 & 1 & v31;
    v95 = v12;
    v32 = &v103;
    v28 = &type metadata for Text;
    v29 = &protocol witness table for Text;
    sub_100031764((uint64_t)v93, (uint64_t)&type metadata for Text, (uint64_t)&v103);
    sub_100038EA4((uint64_t)v23);
    v24 = v103;
    v25 = v104;
    v26 = *((_QWORD *)&v104 + 1);
    sub_100045354(v103, *((uint64_t *)&v103 + 1), v104 & 1);
    swift_bridgeObjectRetain(v26);
    v27 = &v85;
    v85 = v24;
    v86 = v25 & 1 & v31;
    v87 = v26;
    sub_100031764((uint64_t)&v85, (uint64_t)v28, (uint64_t)v88);
    sub_100038EA4((uint64_t)v27);
    v30 = v82;
    v82[0] = v88[0];
    v82[1] = v88[1];
    v83 = v89 & 1 & v31;
    v84 = v90;
    sub_100032490((uint64_t)v82, (uint64_t)v28, (uint64_t)v28, (uint64_t)v29, (uint64_t)v29, (uint64_t)v91);
    sub_100038EA4((uint64_t)v30);
    __b[0] = v91[0];
    __b[1] = v91[1];
    __b[2] = v91[2];
    __b[3] = v91[3];
    LOBYTE(__b[4]) = v92 & 1 & v31;
    sub_100038EA4((uint64_t)v32);
  }
  v22 = __b;
  v15 = __b[0];
  v16 = __b[1];
  v17 = __b[2];
  v18 = __b[3];
  v19 = LOBYTE(__b[4]);
  sub_10005FB60(__b[0], __b[1], __b[2], __b[3]);
  v21 = v80;
  v80[0] = v15;
  v80[1] = v16;
  v80[2] = v17;
  v80[3] = v18;
  v81 = v19 & 1;
  v20 = sub_100008AC0(&qword_10008C250);
  sub_10005CF24();
  sub_100031764((uint64_t)v21, v20, v48);
  sub_10005D024(v21);
  return sub_10005D024(v22);
}

uint64_t *sub_10005B7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  int v31;
  __int128 *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int128 *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  __int128 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  char v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  _QWORD v66[4];
  char v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[4];
  char v81;
  _QWORD v82[2];
  char v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  _QWORD v88[2];
  char v89;
  uint64_t v90;
  _QWORD v91[4];
  char v92;
  _QWORD v93[2];
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  __int16 v102;
  __int128 v103;
  __int128 v104;
  uint64_t __b[5];
  uint64_t v106;

  v50 = &v76;
  v48 = a2;
  v53 = a1;
  v49 = "Placeholder when no subject is available for the given message";
  v106 = 0;
  memset(__b, 0, 0x21uLL);
  v103 = 0u;
  v104 = 0u;
  v78 = 0;
  v79 = 0;
  v76 = 0u;
  v77 = 0u;
  v51 = 0;
  v52 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v55 = (char *)&v14 - v52;
  v106 = v2;
  v4 = type metadata accessor for MessageView(v3);
  sub_100012B90((char *)(v53 + *(int *)(v4 + 20)), v55);
  v54 = *((_QWORD *)v55 + 4);
  v56 = *((_QWORD *)v55 + 5);
  swift_bridgeObjectRetain(v56);
  sub_100012DE8(v55);
  if (v56)
  {
    v46 = v54;
    v47 = v56;
    v45 = v56;
    v33 = v54;
    v78 = v54;
    v79 = v56;
    swift_bridgeObjectRetain(v56);
    v34 = v75;
    v75[0] = v33;
    v75[1] = v45;
    sub_100038E3C();
    v71 = Text.init<A>(_:)(v34, &type metadata for String);
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v35 = v68;
    v68[0] = v71;
    v68[1] = v5;
    v43 = 1;
    v69 = v6 & 1;
    v70 = v7;
    v44 = &v76;
    v40 = &type metadata for Text;
    v41 = &protocol witness table for Text;
    sub_100031764((uint64_t)v68, (uint64_t)&type metadata for Text, (uint64_t)&v76);
    sub_100038EA4((uint64_t)v35);
    v36 = v76;
    v37 = v77;
    v38 = *((_QWORD *)&v77 + 1);
    sub_100045354(v76, *((uint64_t *)&v76 + 1), v77 & 1);
    swift_bridgeObjectRetain(v38);
    v39 = &v60;
    v60 = v36;
    v61 = v37 & 1 & v43;
    v62 = v38;
    sub_100031764((uint64_t)&v60, (uint64_t)v40, (uint64_t)v63);
    sub_100038EA4((uint64_t)v39);
    v42 = v57;
    v57[0] = v63[0];
    v57[1] = v63[1];
    v58 = v64 & 1 & v43;
    v59 = v65;
    sub_1000323CC((uint64_t)v57, (uint64_t)v40, (uint64_t)v40, (uint64_t)v41, (uint64_t)v41, (uint64_t)v66);
    sub_100038EA4((uint64_t)v42);
    __b[0] = v66[0];
    __b[1] = v66[1];
    __b[2] = v66[2];
    __b[3] = v66[3];
    LOBYTE(__b[4]) = v67 & 1 & v43;
    sub_100038EA4((uint64_t)v44);
    swift_bridgeObjectRelease(v45);
  }
  else
  {
    v31 = 1;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_SUBJECT", 0xAuLL, 1);
    v9 = LocalizedStringKey.init(stringLiteral:)(v8._countAndFlagsBits, v8._object);
    v100 = v49;
    v101 = 62;
    v102 = 2;
    v96 = Text.init(_:tableName:bundle:comment:)(v9);
    v97 = v10;
    v98 = v11;
    v99 = v12;
    v23 = v93;
    v93[0] = v96;
    v93[1] = v10;
    v94 = v11 & 1 & v31;
    v95 = v12;
    v32 = &v103;
    v28 = &type metadata for Text;
    v29 = &protocol witness table for Text;
    sub_100031764((uint64_t)v93, (uint64_t)&type metadata for Text, (uint64_t)&v103);
    sub_100038EA4((uint64_t)v23);
    v24 = v103;
    v25 = v104;
    v26 = *((_QWORD *)&v104 + 1);
    sub_100045354(v103, *((uint64_t *)&v103 + 1), v104 & 1);
    swift_bridgeObjectRetain(v26);
    v27 = &v85;
    v85 = v24;
    v86 = v25 & 1 & v31;
    v87 = v26;
    sub_100031764((uint64_t)&v85, (uint64_t)v28, (uint64_t)v88);
    sub_100038EA4((uint64_t)v27);
    v30 = v82;
    v82[0] = v88[0];
    v82[1] = v88[1];
    v83 = v89 & 1 & v31;
    v84 = v90;
    sub_100032490((uint64_t)v82, (uint64_t)v28, (uint64_t)v28, (uint64_t)v29, (uint64_t)v29, (uint64_t)v91);
    sub_100038EA4((uint64_t)v30);
    __b[0] = v91[0];
    __b[1] = v91[1];
    __b[2] = v91[2];
    __b[3] = v91[3];
    LOBYTE(__b[4]) = v92 & 1 & v31;
    sub_100038EA4((uint64_t)v32);
  }
  v22 = __b;
  v15 = __b[0];
  v16 = __b[1];
  v17 = __b[2];
  v18 = __b[3];
  v19 = LOBYTE(__b[4]);
  sub_10005FB60(__b[0], __b[1], __b[2], __b[3]);
  v21 = v80;
  v80[0] = v15;
  v80[1] = v16;
  v80[2] = v17;
  v80[3] = v18;
  v81 = v19 & 1;
  v20 = sub_100008AC0(&qword_10008C250);
  sub_10005CF24();
  sub_100031764((uint64_t)v21, v20, v48);
  sub_10005D024(v21);
  return sub_10005D024(v22);
}

uint64_t *sub_10005BD80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  int v31;
  __int128 *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int128 *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  __int128 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  char v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  _QWORD v66[4];
  char v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[4];
  char v81;
  _QWORD v82[2];
  char v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  _QWORD v88[2];
  char v89;
  uint64_t v90;
  _QWORD v91[4];
  char v92;
  _QWORD v93[2];
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  __int16 v102;
  __int128 v103;
  __int128 v104;
  uint64_t __b[5];
  uint64_t v106;

  v50 = &v76;
  v48 = a2;
  v53 = a1;
  v49 = "Placeholder when no summary is available for the given message";
  v106 = 0;
  memset(__b, 0, 0x21uLL);
  v103 = 0u;
  v104 = 0u;
  v78 = 0;
  v79 = 0;
  v76 = 0u;
  v77 = 0u;
  v51 = 0;
  v52 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Message(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(0);
  v55 = (char *)&v14 - v52;
  v106 = v2;
  v4 = type metadata accessor for MessageView(v3);
  sub_100012B90((char *)(v53 + *(int *)(v4 + 20)), v55);
  v54 = *((_QWORD *)v55 + 6);
  v56 = *((_QWORD *)v55 + 7);
  swift_bridgeObjectRetain(v56);
  sub_100012DE8(v55);
  if (v56)
  {
    v46 = v54;
    v47 = v56;
    v45 = v56;
    v33 = v54;
    v78 = v54;
    v79 = v56;
    swift_bridgeObjectRetain(v56);
    v34 = v75;
    v75[0] = v33;
    v75[1] = v45;
    sub_100038E3C();
    v71 = Text.init<A>(_:)(v34, &type metadata for String);
    v72 = v5;
    v73 = v6;
    v74 = v7;
    v35 = v68;
    v68[0] = v71;
    v68[1] = v5;
    v43 = 1;
    v69 = v6 & 1;
    v70 = v7;
    v44 = &v76;
    v40 = &type metadata for Text;
    v41 = &protocol witness table for Text;
    sub_100031764((uint64_t)v68, (uint64_t)&type metadata for Text, (uint64_t)&v76);
    sub_100038EA4((uint64_t)v35);
    v36 = v76;
    v37 = v77;
    v38 = *((_QWORD *)&v77 + 1);
    sub_100045354(v76, *((uint64_t *)&v76 + 1), v77 & 1);
    swift_bridgeObjectRetain(v38);
    v39 = &v60;
    v60 = v36;
    v61 = v37 & 1 & v43;
    v62 = v38;
    sub_100031764((uint64_t)&v60, (uint64_t)v40, (uint64_t)v63);
    sub_100038EA4((uint64_t)v39);
    v42 = v57;
    v57[0] = v63[0];
    v57[1] = v63[1];
    v58 = v64 & 1 & v43;
    v59 = v65;
    sub_1000323CC((uint64_t)v57, (uint64_t)v40, (uint64_t)v40, (uint64_t)v41, (uint64_t)v41, (uint64_t)v66);
    sub_100038EA4((uint64_t)v42);
    __b[0] = v66[0];
    __b[1] = v66[1];
    __b[2] = v66[2];
    __b[3] = v66[3];
    LOBYTE(__b[4]) = v67 & 1 & v43;
    sub_100038EA4((uint64_t)v44);
    swift_bridgeObjectRelease(v45);
  }
  else
  {
    v31 = 1;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO_BODY", 7uLL, 1);
    v9 = LocalizedStringKey.init(stringLiteral:)(v8._countAndFlagsBits, v8._object);
    v100 = v49;
    v101 = 62;
    v102 = 2;
    v96 = Text.init(_:tableName:bundle:comment:)(v9);
    v97 = v10;
    v98 = v11;
    v99 = v12;
    v23 = v93;
    v93[0] = v96;
    v93[1] = v10;
    v94 = v11 & 1 & v31;
    v95 = v12;
    v32 = &v103;
    v28 = &type metadata for Text;
    v29 = &protocol witness table for Text;
    sub_100031764((uint64_t)v93, (uint64_t)&type metadata for Text, (uint64_t)&v103);
    sub_100038EA4((uint64_t)v23);
    v24 = v103;
    v25 = v104;
    v26 = *((_QWORD *)&v104 + 1);
    sub_100045354(v103, *((uint64_t *)&v103 + 1), v104 & 1);
    swift_bridgeObjectRetain(v26);
    v27 = &v85;
    v85 = v24;
    v86 = v25 & 1 & v31;
    v87 = v26;
    sub_100031764((uint64_t)&v85, (uint64_t)v28, (uint64_t)v88);
    sub_100038EA4((uint64_t)v27);
    v30 = v82;
    v82[0] = v88[0];
    v82[1] = v88[1];
    v83 = v89 & 1 & v31;
    v84 = v90;
    sub_100032490((uint64_t)v82, (uint64_t)v28, (uint64_t)v28, (uint64_t)v29, (uint64_t)v29, (uint64_t)v91);
    sub_100038EA4((uint64_t)v30);
    __b[0] = v91[0];
    __b[1] = v91[1];
    __b[2] = v91[2];
    __b[3] = v91[3];
    LOBYTE(__b[4]) = v92 & 1 & v31;
    sub_100038EA4((uint64_t)v32);
  }
  v22 = __b;
  v15 = __b[0];
  v16 = __b[1];
  v17 = __b[2];
  v18 = __b[3];
  v19 = LOBYTE(__b[4]);
  sub_10005FB60(__b[0], __b[1], __b[2], __b[3]);
  v21 = v80;
  v80[0] = v15;
  v80[1] = v16;
  v80[2] = v17;
  v80[3] = v18;
  v81 = v19 & 1;
  v20 = sub_100008AC0(&qword_10008C250);
  sub_10005CF24();
  sub_100031764((uint64_t)v21, v20, v48);
  sub_10005D024(v21);
  return sub_10005D024(v22);
}

uint64_t sub_10005C338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v11 = a2;
  v8 = a1;
  v6[1] = 0;
  v13 = type metadata accessor for ContentSizeCategory(0);
  v10 = *(_QWORD *)(v13 - 8);
  v7 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v12 = (char *)v6 - v7;
  v15 = type metadata accessor for EnvironmentValues(v2);
  v14 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v15);
  v16 = (char *)v6 - v9;
  v4 = (*(uint64_t (**)(char *))(v3 + 16))((char *)v6 - v9);
  EnvironmentValues.sizeCategory.getter(v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v11, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v15);
}

uint64_t sub_10005C440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  char *v6;

  v4[1] = a1;
  v1 = type metadata accessor for ContentSizeCategory(0);
  v5 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v1);
  v6 = (char *)v4 - v5;
  (*(void (**)(void))(v2 + 16))();
  return EnvironmentValues.sizeCategory.setter(v6);
}

uint64_t sub_10005C4C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100056170(a1);
}

uint64_t sub_10005C4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100036188(a1, a2);
}

uint64_t sub_10005C4E8(uint64_t a1)
{
  return sub_1000362A4(a1);
}

unint64_t sub_10005C4FC()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C210;
  if (!qword_10008C210)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C210);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for MessageView(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008C348;
  if (!qword_10008C348)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageView);
  return v2;
}

_QWORD *sub_10005C5C8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v7;

  v7 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(a1, v7) == 1)
  {
    v2 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v7, 1);
  }
  else
  {
    v4 = *a1;
    swift_retain();
    *a2 = v4;
    swift_storeEnumTagMultiPayload(a2, v7, 0);
  }
  return a2;
}

uint64_t sub_10005C678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(a1, v1) == 1)
  {
    v2 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  return a1;
}

uint64_t sub_10005C6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;

  v18 = (int *)type metadata accessor for MessageView(0);
  v1 = *((_QWORD *)v18 - 1);
  v20 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v19 = v20 + *(_QWORD *)(v1 + 64);
  v2 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(v0 + v20, v2) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(unint64_t))(*(_QWORD *)(v3 - 8) + 8))(v17 + v20);
  }
  else
  {
    swift_release();
  }
  v13 = (_QWORD *)(v17 + v20 + v18[5]);
  swift_bridgeObjectRelease(v13[1]);
  swift_bridgeObjectRelease(v13[3]);
  swift_bridgeObjectRelease(v13[5]);
  swift_bridgeObjectRelease(v13[7]);
  v12 = type metadata accessor for Message(0);
  v11 = (char *)v13 + *(int *)(v12 + 32);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v4 - 8) + 8))(v11);
  v14 = (char *)v13 + *(int *)(v12 + 52);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v14, 1))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  v9 = v17 + v20 + v18[8];
  v5 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(unint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9);
  swift_release();
  swift_release();
  swift_release();
  v10 = v17 + v20 + v18[12];
  v6 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(v10, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(unint64_t))(*(_QWORD *)(v7 - 8) + 8))(v10);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject(v17, v19);
}

char *sub_10005C9A0(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char *v9;
  char *__dst;
  char *__src;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  char *v16;
  int *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;

  v25 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v25) == 1)
  {
    v2 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload(a2, v25, 1);
  }
  else
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  v13 = (int *)type metadata accessor for MessageView(0);
  v16 = &a2[v13[5]];
  v18 = &a1[v13[5]];
  *(_OWORD *)v16 = *(_OWORD *)v18;
  *((_OWORD *)v16 + 1) = *((_OWORD *)v18 + 1);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v16 + 3) = *((_OWORD *)v18 + 3);
  v17 = (int *)type metadata accessor for Message(0);
  v15 = &v16[v17[8]];
  v14 = &v18[v17[8]];
  v3 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(v15, v14);
  v16[v17[9]] = v18[v17[9]];
  v16[v17[10]] = v18[v17[10]];
  v16[v17[11]] = v18[v17[11]];
  v16[v17[12]] = v18[v17[12]];
  v19 = &v16[v17[13]];
  v20 = &v18[v17[13]];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v22 + 48))(v20, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)&a2[v13[6]] = *(_QWORD *)&a1[v13[6]];
  a2[v13[7]] = a1[v13[7]];
  v9 = &a2[v13[8]];
  v8 = &a1[v13[8]];
  v5 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 32))(v9, v8);
  *(_OWORD *)&a2[v13[9]] = *(_OWORD *)&a1[v13[9]];
  *(_OWORD *)&a2[v13[10]] = *(_OWORD *)&a1[v13[10]];
  *(_OWORD *)&a2[v13[11]] = *(_OWORD *)&a1[v13[11]];
  __dst = &a2[v13[12]];
  __src = &a1[v13[12]];
  v12 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(__src, v12) == 1)
  {
    v6 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(__dst, __src);
    swift_storeEnumTagMultiPayload(__dst, v12, 1);
  }
  else
  {
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  return a2;
}

uint64_t sub_10005CD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageView(0) - 8) + 80);
  return sub_100056314(a1, (_QWORD *)(v2 + ((v3 + 16) & ~v3)), a2);
}

unint64_t sub_10005CDB4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C228;
  if (!qword_10008C228)
  {
    v2 = sub_100008DF0(&qword_10008C220);
    sub_10005CE3C();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C228);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10005CE3C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C230;
  if (!qword_10008C230)
  {
    v0 = sub_100008DF0(&qword_10008C238);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C230);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10005CEAC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C248;
  if (!qword_10008C248)
  {
    v0 = sub_100008DF0(&qword_10008C240);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C248);
    return WitnessTable;
  }
  return v3;
}

uint64_t *sub_10005CF1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005B210(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10005CF24()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C258;
  if (!qword_10008C258)
  {
    v0 = sub_100008DF0(&qword_10008C250);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C258);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10005CFA8()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C268;
  if (!qword_10008C268)
  {
    v2 = sub_100008DF0(&qword_10008C260);
    sub_10005CF24();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C268);
    return WitnessTable;
  }
  return v3;
}

uint64_t *sub_10005D024(uint64_t *a1)
{
  sub_10005D064(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_10005D064(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100038EE8(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

unint64_t sub_10005D0D4()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C278;
  if (!qword_10008C278)
  {
    v2 = sub_100008DF0(&qword_10008C270);
    sub_10005CFA8();
    sub_100038FB0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C278);
    return WitnessTable;
  }
  return v3;
}

uint64_t *sub_10005D160(uint64_t *a1)
{
  sub_10005D064(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  return a1;
}

unint64_t sub_10005D1AC()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C288;
  if (!qword_10008C288)
  {
    v2 = sub_100008DF0(&qword_10008C280);
    sub_10005D0D4();
    sub_100038818();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C288);
    return WitnessTable;
  }
  return v3;
}

uint64_t *sub_10005D238(uint64_t *a1)
{
  sub_10005D064(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_10005D29C()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C298;
  if (!qword_10008C298)
  {
    v2 = sub_100008DF0(&qword_10008C290);
    sub_10005D324();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C298);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10005D324()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C2A0;
  if (!qword_10008C2A0)
  {
    v0 = sub_100008DF0(&qword_10008C2A8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C2A0);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10005D394()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C2B8;
  if (!qword_10008C2B8)
  {
    v2 = sub_100008DF0(&qword_10008C2B0);
    sub_10005D29C();
    sub_100038FB0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C2B8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10005D420(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  return a1;
}

unint64_t sub_10005D470()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C2C8;
  if (!qword_10008C2C8)
  {
    v2 = sub_100008DF0(&qword_10008C2C0);
    sub_10005D394();
    sub_100038818();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C2C8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10005D4FC(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_10005D564()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C2D8;
  if (!qword_10008C2D8)
  {
    v2 = sub_100008DF0(&qword_10008C2D0);
    sub_10005D470();
    sub_1000389D0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C2D8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10005D5F0(uint64_t a1)
{
  sub_100038EE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16) & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t *sub_10005D670@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005B7C8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t *sub_10005D678@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005BD80(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10005D680()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C2E8;
  if (!qword_10008C2E8)
  {
    v2 = sub_100008DF0(&qword_10008C2E0);
    sub_10005D1AC();
    sub_1000389D0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C2E8);
    return WitnessTable;
  }
  return v3;
}

uint64_t *sub_10005D70C(uint64_t *a1)
{
  sub_10005D064(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_10005D788(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  int *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v45;

  v45 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v45 & 0x20000) != 0)
  {
    v40 = *a2;
    swift_retain();
    *a1 = v40;
    return *a1 + ((v45 + 16) & ~(unint64_t)v45);
  }
  else
  {
    v39 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v39) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v39, 1);
    }
    else
    {
      v38 = *a2;
      swift_retain();
      *a1 = v38;
      swift_storeEnumTagMultiPayload(a1, v39, 0);
    }
    v4 = a3[5];
    v31 = (_QWORD *)((char *)a1 + v4);
    v33 = (_QWORD *)((char *)a2 + v4);
    *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
    v25 = *(_QWORD *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain(v25);
    v31[1] = v25;
    v31[2] = v33[2];
    v26 = v33[3];
    swift_bridgeObjectRetain(v26);
    v31[3] = v26;
    v31[4] = v33[4];
    v27 = v33[5];
    swift_bridgeObjectRetain(v27);
    v31[5] = v27;
    v31[6] = v33[6];
    v28 = v33[7];
    swift_bridgeObjectRetain(v28);
    v31[7] = v28;
    v32 = (int *)type metadata accessor for Message(0);
    v30 = (char *)v31 + v32[8];
    v29 = (char *)v33 + v32[8];
    v5 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v30, v29);
    *((_BYTE *)v31 + v32[9]) = *((_BYTE *)v33 + v32[9]);
    *((_BYTE *)v31 + v32[10]) = *((_BYTE *)v33 + v32[10]);
    *((_BYTE *)v31 + v32[11]) = *((_BYTE *)v33 + v32[11]);
    *((_BYTE *)v31 + v32[12]) = *((_BYTE *)v33 + v32[12]);
    v34 = (char *)v31 + v32[13];
    v35 = (char *)v33 + v32[13];
    v36 = type metadata accessor for URL(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(v35, 1))
    {
      v6 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (char *)a1 + a3[8];
    v14 = (char *)a2 + a3[8];
    v7 = sub_100008AC0(&qword_10008BBD8);
    (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 16))(v15, v14);
    v8 = a3[9];
    v16 = (char *)a1 + v8;
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v17 = *(_QWORD *)((char *)a2 + v8 + 8);
    swift_retain();
    *((_QWORD *)v16 + 1) = v17;
    v9 = a3[10];
    v18 = (char *)a1 + v9;
    *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
    v19 = *(_QWORD *)((char *)a2 + v9 + 8);
    swift_retain();
    *((_QWORD *)v18 + 1) = v19;
    v10 = a3[11];
    v20 = (char *)a1 + v10;
    *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
    v21 = *(_QWORD *)((char *)a2 + v10 + 8);
    swift_retain();
    *((_QWORD *)v20 + 1) = v21;
    v22 = (_QWORD *)((char *)a1 + a3[12]);
    v23 = (_QWORD *)((char *)a2 + a3[12]);
    v24 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v11 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v11 - 8) + 16))(v22, v23);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      v13 = *v23;
      swift_retain();
      *v22 = v13;
      swift_storeEnumTagMultiPayload(v22, v24, 0);
    }
    return (unint64_t)a1;
  }
}

uint64_t sub_10005DCD0(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1);
  }
  else
  {
    swift_release();
  }
  v13 = (_QWORD *)(a1 + a2[5]);
  swift_bridgeObjectRelease(v13[1]);
  swift_bridgeObjectRelease(v13[3]);
  swift_bridgeObjectRelease(v13[5]);
  swift_bridgeObjectRelease(v13[7]);
  v12 = type metadata accessor for Message(0);
  v11 = (char *)v13 + *(int *)(v12 + 32);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *))(*(_QWORD *)(v4 - 8) + 8))(v11);
  v14 = (char *)v13 + *(int *)(v12 + 52);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v14, 1))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  v9 = a1 + a2[8];
  v5 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9);
  swift_release();
  swift_release();
  swift_release();
  v10 = a1 + a2[12];
  v6 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(v10, v6) != 1)
    return swift_release();
  v8 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v10);
}

_QWORD *sub_10005DF14(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  int *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v42;

  v42 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a2, v42) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v42, 1);
  }
  else
  {
    v38 = *a2;
    swift_retain();
    *a1 = v38;
    swift_storeEnumTagMultiPayload(a1, v42, 0);
  }
  v4 = a3[5];
  v31 = (_QWORD *)((char *)a1 + v4);
  v33 = (_QWORD *)((char *)a2 + v4);
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v25 = *(_QWORD *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v25);
  v31[1] = v25;
  v31[2] = v33[2];
  v26 = v33[3];
  swift_bridgeObjectRetain(v26);
  v31[3] = v26;
  v31[4] = v33[4];
  v27 = v33[5];
  swift_bridgeObjectRetain(v27);
  v31[5] = v27;
  v31[6] = v33[6];
  v28 = v33[7];
  swift_bridgeObjectRetain(v28);
  v31[7] = v28;
  v32 = (int *)type metadata accessor for Message(0);
  v30 = (char *)v31 + v32[8];
  v29 = (char *)v33 + v32[8];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v30, v29);
  *((_BYTE *)v31 + v32[9]) = *((_BYTE *)v33 + v32[9]);
  *((_BYTE *)v31 + v32[10]) = *((_BYTE *)v33 + v32[10]);
  *((_BYTE *)v31 + v32[11]) = *((_BYTE *)v33 + v32[11]);
  *((_BYTE *)v31 + v32[12]) = *((_BYTE *)v33 + v32[12]);
  v34 = (char *)v31 + v32[13];
  v35 = (char *)v33 + v32[13];
  v36 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(v35, 1))
  {
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v15 = (char *)a1 + a3[8];
  v14 = (char *)a2 + a3[8];
  v7 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 16))(v15, v14);
  v8 = a3[9];
  v16 = (char *)a1 + v8;
  *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
  v17 = *(_QWORD *)((char *)a2 + v8 + 8);
  swift_retain();
  *((_QWORD *)v16 + 1) = v17;
  v9 = a3[10];
  v18 = (char *)a1 + v9;
  *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
  v19 = *(_QWORD *)((char *)a2 + v9 + 8);
  swift_retain();
  *((_QWORD *)v18 + 1) = v19;
  v10 = a3[11];
  v20 = (char *)a1 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v21 = *(_QWORD *)((char *)a2 + v10 + 8);
  swift_retain();
  *((_QWORD *)v20 + 1) = v21;
  v22 = (_QWORD *)((char *)a1 + a3[12]);
  v23 = (_QWORD *)((char *)a2 + a3[12]);
  v24 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v11 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v11 - 8) + 16))(v22, v23);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    v13 = *v23;
    swift_retain();
    *v22 = v13;
    swift_storeEnumTagMultiPayload(v22, v24, 0);
  }
  return a1;
}

_QWORD *sub_10005E3F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  int *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    sub_10003081C((uint64_t)a1);
    v45 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v45) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v45, 1);
    }
    else
    {
      v44 = *a2;
      swift_retain();
      *a1 = v44;
      swift_storeEnumTagMultiPayload(a1, v45, 0);
    }
  }
  v4 = a3[5];
  v36 = (_QWORD *)((char *)a1 + v4);
  v38 = (_QWORD *)((char *)a2 + v4);
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v30 = *(_QWORD *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain(v30);
  v5 = v36[1];
  v36[1] = v30;
  swift_bridgeObjectRelease(v5);
  v36[2] = v38[2];
  v31 = v38[3];
  swift_bridgeObjectRetain(v31);
  v6 = v36[3];
  v36[3] = v31;
  swift_bridgeObjectRelease(v6);
  v36[4] = v38[4];
  v32 = v38[5];
  swift_bridgeObjectRetain(v32);
  v7 = v36[5];
  v36[5] = v32;
  swift_bridgeObjectRelease(v7);
  v36[6] = v38[6];
  v33 = v38[7];
  swift_bridgeObjectRetain(v33);
  v8 = v36[7];
  v36[7] = v33;
  swift_bridgeObjectRelease(v8);
  v37 = (int *)type metadata accessor for Message(0);
  v35 = (char *)v36 + v37[8];
  v34 = (char *)v38 + v37[8];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v9 - 8) + 24))(v35, v34);
  *((_BYTE *)v36 + v37[9]) = *((_BYTE *)v38 + v37[9]) & 1;
  *((_BYTE *)v36 + v37[10]) = *((_BYTE *)v38 + v37[10]) & 1;
  *((_BYTE *)v36 + v37[11]) = *((_BYTE *)v38 + v37[11]) & 1;
  *((_BYTE *)v36 + v37[12]) = *((_BYTE *)v38 + v37[12]) & 1;
  v40 = (char *)v36 + v37[13];
  v39 = (char *)v38 + v37[13];
  v41 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (((unsigned int (*)(char *, uint64_t))v43)(v40, 1))
  {
    if (v43(v39, 1, v41))
    {
      v11 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v40, v39, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v41);
    }
  }
  else if (v43(v39, 1, v41))
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
    v10 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v40, v39, v41);
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]) & 1;
  v21 = (char *)a1 + a3[8];
  v20 = (char *)a2 + a3[8];
  v12 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v12 - 8) + 24))(v21, v20);
  v22 = (_QWORD *)((char *)a1 + a3[9]);
  v13 = (_QWORD *)((char *)a2 + a3[9]);
  *v22 = *v13;
  v23 = v13[1];
  swift_retain();
  v22[1] = v23;
  swift_release();
  v24 = (_QWORD *)((char *)a1 + a3[10]);
  v14 = (_QWORD *)((char *)a2 + a3[10]);
  *v24 = *v14;
  v25 = v14[1];
  swift_retain();
  v24[1] = v25;
  swift_release();
  v26 = (_QWORD *)((char *)a1 + a3[11]);
  v15 = (_QWORD *)((char *)a2 + a3[11]);
  *v26 = *v15;
  v27 = v15[1];
  swift_retain();
  v26[1] = v27;
  swift_release();
  v28 = (_QWORD *)((char *)a1 + a3[12]);
  v29 = (_QWORD *)((char *)a2 + a3[12]);
  if (v28 != v29)
  {
    sub_10005C678((uint64_t)v28);
    v19 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(v29, v19) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v16 - 8) + 16))(v28, v29);
      swift_storeEnumTagMultiPayload(v28, v19, 1);
    }
    else
    {
      v18 = *v29;
      swift_retain();
      *v28 = v18;
      swift_storeEnumTagMultiPayload(v28, v19, 0);
    }
  }
  return a1;
}

char *sub_10005EA0C(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  char *__dst;
  char *__src;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;

  v26 = sub_100008AC0(&qword_10008B838);
  if (swift_getEnumCaseMultiPayload(a2, v26) == 1)
  {
    v3 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, v26, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  v16 = &a1[a3[5]];
  v18 = &a2[a3[5]];
  *(_OWORD *)v16 = *(_OWORD *)v18;
  *((_OWORD *)v16 + 1) = *((_OWORD *)v18 + 1);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v16 + 3) = *((_OWORD *)v18 + 3);
  v17 = (int *)type metadata accessor for Message(0);
  v15 = &v16[v17[8]];
  v14 = &v18[v17[8]];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v15, v14);
  v16[v17[9]] = v18[v17[9]];
  v16[v17[10]] = v18[v17[10]];
  v16[v17[11]] = v18[v17[11]];
  v16[v17[12]] = v18[v17[12]];
  v19 = &v16[v17[13]];
  v20 = &v18[v17[13]];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v22 + 48))(v20, 1))
  {
    v5 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  v10 = &a1[a3[8]];
  v9 = &a2[a3[8]];
  v6 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 32))(v10, v9);
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  __dst = &a1[a3[12]];
  __src = &a2[a3[12]];
  v13 = sub_100008AC0(&qword_10008BBE0);
  if (swift_getEnumCaseMultiPayload(__src, v13) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32))(__dst, __src);
    swift_storeEnumTagMultiPayload(__dst, v13, 1);
  }
  else
  {
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  return a1;
}

char *sub_10005EDCC(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  char *__dst;
  char *__src;
  char *v26;
  char *v27;
  char *v28;
  int *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;

  if (a1 != a2)
  {
    sub_10003081C((uint64_t)a1);
    v36 = sub_100008AC0(&qword_10008B838);
    if (swift_getEnumCaseMultiPayload(a2, v36) == 1)
    {
      v3 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, v36, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
  }
  v4 = a3[5];
  v28 = &a1[v4];
  v30 = &a2[v4];
  *(_QWORD *)v28 = *(_QWORD *)&a2[v4];
  v5 = *(_QWORD *)&a1[v4 + 8];
  *((_QWORD *)v28 + 1) = *(_QWORD *)&a2[v4 + 8];
  swift_bridgeObjectRelease(v5);
  *((_QWORD *)v28 + 2) = *((_QWORD *)v30 + 2);
  v6 = *((_QWORD *)v28 + 3);
  *((_QWORD *)v28 + 3) = *((_QWORD *)v30 + 3);
  swift_bridgeObjectRelease(v6);
  *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 4);
  v7 = *((_QWORD *)v28 + 5);
  *((_QWORD *)v28 + 5) = *((_QWORD *)v30 + 5);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)v28 + 6) = *((_QWORD *)v30 + 6);
  v8 = *((_QWORD *)v28 + 7);
  *((_QWORD *)v28 + 7) = *((_QWORD *)v30 + 7);
  swift_bridgeObjectRelease(v8);
  v29 = (int *)type metadata accessor for Message(0);
  v27 = &v28[v29[8]];
  v26 = &v30[v29[8]];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v9 - 8) + 40))(v27, v26);
  v28[v29[9]] = v30[v29[9]] & 1;
  v28[v29[10]] = v30[v29[10]] & 1;
  v28[v29[11]] = v30[v29[11]] & 1;
  v28[v29[12]] = v30[v29[12]] & 1;
  v32 = &v28[v29[13]];
  v31 = &v30[v29[13]];
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (((unsigned int (*)(char *, uint64_t))v35)(v32, 1))
  {
    if (v35(v31, 1, v33))
    {
      v11 = sub_100008AC0(&qword_10008B6D0);
      memcpy(v32, v31, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v32, v31, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
    }
  }
  else if (v35(v31, 1, v33))
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    v10 = sub_100008AC0(&qword_10008B6D0);
    memcpy(v32, v31, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v32, v31, v33);
  }
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[a3[7]] = a2[a3[7]] & 1;
  v23 = &a1[a3[8]];
  v22 = &a2[a3[8]];
  v12 = sub_100008AC0(&qword_10008BBD8);
  (*(void (**)(char *, char *))(*(_QWORD *)(v12 - 8) + 40))(v23, v22);
  v13 = &a1[a3[9]];
  v14 = &a2[a3[9]];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release();
  v15 = &a1[a3[10]];
  v16 = &a2[a3[10]];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release();
  v17 = &a1[a3[11]];
  v18 = &a2[a3[11]];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release();
  __dst = &a1[a3[12]];
  __src = &a2[a3[12]];
  if (__dst != __src)
  {
    sub_10005C678((uint64_t)__dst);
    v21 = sub_100008AC0(&qword_10008BBE0);
    if (swift_getEnumCaseMultiPayload(__src, v21) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 32))(__dst, __src);
      swift_storeEnumTagMultiPayload(__dst, v21, 1);
    }
    else
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005F324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F340);
}

uint64_t sub_10005F340(uint64_t a1, unsigned int a2, int *a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;

  v16 = sub_100008AC0(&qword_10008B830);
  v17 = *(_QWORD *)(v16 - 8);
  if (a2 == *(_DWORD *)(v17 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v17 + 48))(a1, a2, v16);
  }
  else
  {
    v10 = type metadata accessor for Message(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (a2 == *(_DWORD *)(v11 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1 + a3[5], a2, v10);
    }
    else
    {
      v8 = sub_100008AC0(&qword_10008BBD8);
      v9 = *(_QWORD *)(v8 - 8);
      if (a2 == *(_DWORD *)(v9 + 84))
      {
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + a3[8], a2, v8);
      }
      else if (a2 == 2147483646)
      {
        v7 = -1;
        if (*(_QWORD *)(a1 + a3[9] + 8) < (unint64_t)&_mh_execute_header)
          v7 = *(_QWORD *)(a1 + a3[9] + 8);
        v3 = v7 - 1;
        if (v7 - 1 < 0)
          v3 = -1;
        return (v3 + 1);
      }
      else
      {
        v5 = sub_100008AC0(&qword_10008C218);
        v6 = *(_QWORD *)(v5 - 8);
        if (a2 == *(_DWORD *)(v6 + 84))
          return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + a3[12], a2, v5);
        else
          __break(1u);
      }
    }
  }
  return v12;
}

uint64_t sub_10005F54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F568);
}

uint64_t sub_10005F568(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;

  v13 = sub_100008AC0(&qword_10008B830);
  v14 = *(_QWORD *)(v13 - 8);
  if (a3 == *(_DWORD *)(v14 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v14 + 56))(a1, a2, a2, v13);
  v7 = type metadata accessor for Message(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (a3 == *(_DWORD *)(v8 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v8 + 56))(a1 + a4[5], a2, a2, v7);
  result = sub_100008AC0(&qword_10008BBD8);
  v6 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v6 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(a1 + a4[8], a2, a2, result);
  if (a3 == 2147483646)
  {
    *(_QWORD *)(a1 + a4[9] + 8) = a2;
  }
  else
  {
    result = sub_100008AC0(&qword_10008C218);
    v5 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v5 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + a4[12], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t sub_10005F734(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[9];

  v10 = sub_100038340(319);
  v11 = v10;
  if (v1 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v10 - 8) + 64;
    v2 = type metadata accessor for Message(319);
    v11 = v2;
    if (v3 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v2 - 8) + 64;
      v12[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v12[3] = &unk_100074760;
      v4 = sub_10005F8D0(319);
      v11 = v4;
      if (v5 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(v4 - 8) + 64;
        v12[5] = &unk_100074778;
        v12[6] = &unk_100074778;
        v12[7] = &unk_100074778;
        v6 = sub_10005F974(319);
        v11 = v6;
        if (v7 <= 0x3F)
        {
          v12[8] = *(_QWORD *)(v6 - 8) + 64;
          swift_initStructMetadata(a1, 256, 9, v12, a1 + 16);
          return 0;
        }
      }
    }
  }
  return v11;
}

uint64_t sub_10005F8D0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008C358;
  if (!qword_10008C358)
  {
    v1 = sub_10005C4FC();
    v5 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008C358);
      return v3;
    }
  }
  return v7;
}

uint64_t sub_10005F974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;

  v7 = qword_10008C360;
  if (!qword_10008C360)
  {
    v1 = type metadata accessor for ContentSizeCategory(255);
    v5 = type metadata accessor for Environment.Content(a1, v1);
    v7 = v5;
    if (!v2)
    {
      v3 = v5;
      atomic_store(v5, (unint64_t *)&qword_10008C360);
      return v3;
    }
  }
  return v7;
}

unint64_t sub_10005FA18()
{
  return sub_10005CEAC();
}

unint64_t sub_10005FA2C()
{
  return sub_100038BA0();
}

uint64_t sub_10005FA40()
{
  _QWORD v1[2];

  v1[0] = sub_100008DF0(&qword_10008C280);
  v1[1] = sub_10005D1AC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_10005FA94()
{
  _QWORD v1[2];

  v1[0] = sub_100008DF0(&qword_10008C2E0);
  v1[1] = sub_10005D680();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_10005FAE8()
{
  _QWORD v1[2];

  v1[0] = sub_100008DF0(&qword_10008C2D0);
  v1[1] = sub_10005D564();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_10005FB3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007D654, 1);
}

uint64_t sub_10005FB60(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100045354(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_10005FBD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100056A70(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10005FBD8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C3B8;
  if (!qword_10008C3B8)
  {
    v0 = sub_100008DF0(&qword_10008C3B0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C3B8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10005FC48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = *(int *)(sub_100008AC0(&qword_10008C3C0) + 44);
  v60 = *(int *)(sub_100008AC0(&qword_10008C3C8) + 44);
  v61 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v1 = sub_100008AC0(&qword_10008C3D8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v59 + v60 + v61, 1))
  {
    v2 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v59 + v60 + v61, v2) == 1)
    {
      v47 = a1 + v59 + v60 + v61;
      swift_release();
      v45 = v47 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v46 = v45 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v46);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v48 = v47 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v49 = v48 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v50 = type metadata accessor for SymbolRenderingMode(0);
      v51 = *(_QWORD *)(v50 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v51 + 48))(v49, 1))
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    }
    else
    {
      v54 = a1 + v59 + v60 + v61;
      swift_release();
      v52 = v54 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v53 = v52 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v3 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v53);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v55 = v54 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v56 = v55 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v57 = type metadata accessor for SymbolRenderingMode(0);
      v58 = *(_QWORD *)(v57 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v58 + 48))(v56, 1))
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    }
  }
  v40 = a1 + v59 + v60;
  v37 = v40 + v61 + *(int *)(sub_100008AC0(&qword_10008C3E8) + 48);
  v38 = sub_100008AC0(&qword_10008C3F0);
  v39 = *(void (**)(uint64_t))(*(_QWORD *)(v38 - 8) + 8);
  v39(v37);
  v41 = v40 + *(int *)(sub_100008AC0(&qword_10008C3F8) + 64);
  v5 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v41);
  sub_100008AC0(&qword_10008C408);
  swift_release();
  swift_release();
  v42 = sub_100008AC0(&qword_10008C410);
  v43 = a1 + v59 + *(int *)(v42 + 48);
  v44 = v43 + *(int *)(sub_100008AC0(&qword_10008C418) + 44);
  v6 = sub_100008AC0(&qword_10008C420);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v44, 1))
  {
    swift_release();
    v31 = v44 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v32 = v31 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v7 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v32);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v33 = v44 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
    swift_release();
    v34 = v33 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v35 = type metadata accessor for SymbolRenderingMode(0);
    v36 = *(_QWORD *)(v35 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v36 + 48))(v34, 1))
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  }
  v27 = (int *)sub_100008AC0(&qword_10008C428);
  ((void (*)(uint64_t, uint64_t))v39)(v44 + v27[12], v38);
  v28 = v44 + v27[20];
  v29 = sub_100008AC0(&qword_10008B888);
  v30 = *(unsigned int (**)(void))(*(_QWORD *)(v29 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v30)(v28, 1))
  {
    swift_release();
    v21 = v28 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v22 = v21 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v8 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v22);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v23 = v28 + *(int *)(v29 + 36);
    swift_release();
    v24 = v23 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v25 = type metadata accessor for SymbolRenderingMode(0);
    v26 = *(_QWORD *)(v25 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v26 + 48))(v24, 1))
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  }
  v20 = v44 + v27[24];
  if (!v30())
  {
    swift_release();
    v14 = v20 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v15 = v14 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v9 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v15);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v16 = v20 + *(int *)(v29 + 36);
    swift_release();
    v17 = v16 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v18 = type metadata accessor for SymbolRenderingMode(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v19 + 48))(v17, 1))
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  sub_100008AC0(&qword_10008C430);
  swift_release();
  swift_release();
  v12 = a1 + v59 + *(int *)(v42 + 64);
  v13 = sub_100008AC0(&qword_10008C438);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
  {
    v10 = sub_100008AC0(&qword_10008C440);
    (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v12);
    swift_release();
    swift_release();
  }
  return a1;
}

uint64_t sub_100060714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  char *__dst;
  char *__src;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v221 = *(int *)(sub_100008AC0(&qword_10008C3C0) + 44);
  v222 = a2 + v221;
  *(_OWORD *)v222 = *(_OWORD *)(a1 + v221);
  *(_BYTE *)(v222 + 16) = *(_BYTE *)(a1 + v221 + 16);
  v223 = *(int *)(sub_100008AC0(&qword_10008C3C8) + 44);
  v225 = a1 + v221 + v223;
  v2 = a2 + v221 + v223;
  *(_OWORD *)v2 = *(_OWORD *)v225;
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(v225 + 16);
  v224 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v226 = sub_100008AC0(&qword_10008C3D8);
  v227 = *(_QWORD *)(v226 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v227 + 48))(v225 + v224, 1))
  {
    v21 = sub_100008AC0(&qword_10008C448);
    memcpy((void *)(a2 + v221 + v223 + v224), (const void *)(a1 + v221 + v223 + v224), *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v218 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v221 + v223 + v224, v218) == 1)
    {
      v186 = (uint64_t *)(a1 + v221 + v223 + v224);
      v171 = *v186;
      swift_retain();
      v185 = (_QWORD *)(a2 + v221 + v223 + v224);
      *v185 = v171;
      v12 = sub_100008AC0(&qword_10008B868);
      v173 = (_QWORD *)((char *)v185 + *(int *)(v12 + 36));
      v174 = (uint64_t *)((char *)v186 + *(int *)(v12 + 36));
      v172 = *v174;
      swift_retain();
      *v173 = v172;
      v13 = sub_100008AC0(&qword_10008B870);
      v176 = (char *)v173 + *(int *)(v13 + 28);
      v175 = (char *)v174 + *(int *)(v13 + 28);
      v14 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 16))(v176, v175);
      v15 = sub_100008AC0(&qword_10008B878);
      v179 = (_QWORD *)((char *)v185 + *(int *)(v15 + 36));
      v178 = (uint64_t *)((char *)v186 + *(int *)(v15 + 36));
      v177 = *v178;
      swift_retain();
      *v179 = v177;
      v180 = v178[1];
      swift_retain();
      v179[1] = v180;
      v16 = sub_100008AC0(&qword_10008B880);
      v183 = (_QWORD *)((char *)v185 + *(int *)(v16 + 36));
      v182 = (uint64_t *)((char *)v186 + *(int *)(v16 + 36));
      v181 = *v182;
      swift_retain();
      *v183 = v181;
      v184 = v182[1];
      swift_retain();
      v183[1] = v184;
      v17 = sub_100008AC0(&qword_10008B888);
      v188 = (_QWORD *)((char *)v185 + *(int *)(v17 + 36));
      v189 = (uint64_t *)((char *)v186 + *(int *)(v17 + 36));
      v187 = *v189;
      swift_retain();
      *v188 = v187;
      v18 = sub_100008AC0(&qword_10008B890);
      __dst = (char *)v188 + *(int *)(v18 + 28);
      __src = (char *)v189 + *(int *)(v18 + 28);
      v192 = type metadata accessor for SymbolRenderingMode(0);
      v193 = *(_QWORD *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v193 + 48))(__src, 1))
      {
        v19 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v193 + 16))(__dst, __src, v192);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(__dst, 0, 1, v192);
      }
      v20 = sub_100008AC0(&qword_10008C420);
      v170 = a2 + v221 + v223 + v224;
      memcpy((void *)(v170 + *(int *)(v20 + 36)), (const void *)(a1 + v221 + v223 + v224 + *(int *)(v20 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(v170, v218, 1);
    }
    else
    {
      v210 = (uint64_t *)(a1 + v221 + v223 + v224);
      v195 = *v210;
      swift_retain();
      v209 = (_QWORD *)(a2 + v221 + v223 + v224);
      *v209 = v195;
      v3 = sub_100008AC0(&qword_10008B868);
      v197 = (_QWORD *)((char *)v209 + *(int *)(v3 + 36));
      v198 = (uint64_t *)((char *)v210 + *(int *)(v3 + 36));
      v196 = *v198;
      swift_retain();
      *v197 = v196;
      v4 = sub_100008AC0(&qword_10008B870);
      v200 = (char *)v197 + *(int *)(v4 + 28);
      v199 = (char *)v198 + *(int *)(v4 + 28);
      v5 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v200, v199);
      v6 = sub_100008AC0(&qword_10008B878);
      v203 = (_QWORD *)((char *)v209 + *(int *)(v6 + 36));
      v202 = (uint64_t *)((char *)v210 + *(int *)(v6 + 36));
      v201 = *v202;
      swift_retain();
      *v203 = v201;
      v204 = v202[1];
      swift_retain();
      v203[1] = v204;
      v7 = sub_100008AC0(&qword_10008B880);
      v207 = (_QWORD *)((char *)v209 + *(int *)(v7 + 36));
      v206 = (uint64_t *)((char *)v210 + *(int *)(v7 + 36));
      v205 = *v206;
      swift_retain();
      *v207 = v205;
      v208 = v206[1];
      swift_retain();
      v207[1] = v208;
      v8 = sub_100008AC0(&qword_10008B888);
      v212 = (_QWORD *)((char *)v209 + *(int *)(v8 + 36));
      v213 = (uint64_t *)((char *)v210 + *(int *)(v8 + 36));
      v211 = *v213;
      swift_retain();
      *v212 = v211;
      v9 = sub_100008AC0(&qword_10008B890);
      v214 = (char *)v212 + *(int *)(v9 + 28);
      v215 = (char *)v213 + *(int *)(v9 + 28);
      v216 = type metadata accessor for SymbolRenderingMode(0);
      v217 = *(_QWORD *)(v216 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v217 + 48))(v215, 1))
      {
        v10 = sub_100008AC0(&qword_10008B8C0);
        memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v214, v215, v216);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
      }
      v11 = sub_100008AC0(&qword_10008C420);
      v194 = a2 + v221 + v223 + v224;
      memcpy((void *)(v194 + *(int *)(v11 + 36)), (const void *)(a1 + v221 + v223 + v224 + *(int *)(v11 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(v194, v218, 0);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(a2 + v221 + v223 + v224, 0, 1, v226);
  }
  v22 = sub_100008AC0(&qword_10008C3E8);
  v153 = a2 + v221 + v223;
  v150 = v153 + v224 + *(int *)(v22 + 48);
  v154 = a1 + v221 + v223;
  v149 = v154 + v224 + *(int *)(v22 + 48);
  v151 = sub_100008AC0(&qword_10008C3F0);
  v152 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16);
  v152(v150, v149);
  v23 = sub_100008AC0(&qword_10008C3F8);
  v24 = v153 + *(int *)(v23 + 48);
  v25 = v154 + *(int *)(v23 + 48);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v156 = v153 + *(int *)(v23 + 64);
  v155 = v154 + *(int *)(v23 + 64);
  v26 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v156, v155);
  v27 = sub_100008AC0(&qword_10008C450);
  *(_QWORD *)(v156 + *(int *)(v27 + 36)) = *(_QWORD *)(v155 + *(int *)(v27 + 36));
  v28 = sub_100008AC0(&qword_10008C408);
  v162 = a2 + v221 + *(int *)(v28 + 36);
  v161 = (uint64_t *)(a1 + v221 + *(int *)(v28 + 36));
  v157 = *v161;
  v158 = v161[1];
  swift_retain();
  *(_QWORD *)v162 = v157;
  *(_QWORD *)(v162 + 8) = v158;
  v159 = v161[2];
  v160 = v161[3];
  swift_retain();
  *(_QWORD *)(v162 + 16) = v159;
  *(_QWORD *)(v162 + 24) = v160;
  *(_OWORD *)(v162 + 32) = *((_OWORD *)v161 + 2);
  v163 = sub_100008AC0(&qword_10008C410);
  v164 = a2 + v221 + *(int *)(v163 + 48);
  v165 = a1 + v221 + *(int *)(v163 + 48);
  *(_OWORD *)v164 = *(_OWORD *)v165;
  *(_BYTE *)(v164 + 16) = *(_BYTE *)(v165 + 16);
  v29 = sub_100008AC0(&qword_10008C418);
  v166 = (_QWORD *)(v164 + *(int *)(v29 + 44));
  v167 = (uint64_t *)(v165 + *(int *)(v29 + 44));
  v168 = sub_100008AC0(&qword_10008C420);
  v169 = *(_QWORD *)(v168 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v169 + 48))(v167, 1))
  {
    v38 = sub_100008AC0(&qword_10008C458);
    memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v128 = *v167;
    swift_retain();
    *v166 = v128;
    v30 = sub_100008AC0(&qword_10008B868);
    v130 = (_QWORD *)((char *)v166 + *(int *)(v30 + 36));
    v131 = (uint64_t *)((char *)v167 + *(int *)(v30 + 36));
    v129 = *v131;
    swift_retain();
    *v130 = v129;
    v31 = sub_100008AC0(&qword_10008B870);
    v133 = (char *)v130 + *(int *)(v31 + 28);
    v132 = (char *)v131 + *(int *)(v31 + 28);
    v32 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v32 - 8) + 16))(v133, v132);
    v33 = sub_100008AC0(&qword_10008B878);
    v136 = (_QWORD *)((char *)v166 + *(int *)(v33 + 36));
    v135 = (uint64_t *)((char *)v167 + *(int *)(v33 + 36));
    v134 = *v135;
    swift_retain();
    *v136 = v134;
    v137 = v135[1];
    swift_retain();
    v136[1] = v137;
    v34 = sub_100008AC0(&qword_10008B880);
    v140 = (_QWORD *)((char *)v166 + *(int *)(v34 + 36));
    v139 = (uint64_t *)((char *)v167 + *(int *)(v34 + 36));
    v138 = *v139;
    swift_retain();
    *v140 = v138;
    v141 = v139[1];
    swift_retain();
    v140[1] = v141;
    v35 = sub_100008AC0(&qword_10008B888);
    v143 = (_QWORD *)((char *)v166 + *(int *)(v35 + 36));
    v144 = (uint64_t *)((char *)v167 + *(int *)(v35 + 36));
    v142 = *v144;
    swift_retain();
    *v143 = v142;
    v36 = sub_100008AC0(&qword_10008B890);
    v145 = (char *)v143 + *(int *)(v36 + 28);
    v146 = (char *)v144 + *(int *)(v36 + 28);
    v147 = type metadata accessor for SymbolRenderingMode(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v148 + 48))(v146, 1))
    {
      v37 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
    }
    memcpy((char *)v166 + *(int *)(v168 + 36), (char *)v167 + *(int *)(v168 + 36), 0x30uLL);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
  }
  v122 = (int *)sub_100008AC0(&qword_10008C428);
  ((void (*)(char *, char *, uint64_t))v152)((char *)v166 + v122[12], (char *)v167 + v122[12], v151);
  v39 = (char *)v166 + v122[16];
  v40 = (char *)v167 + v122[16];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v123 = (_QWORD *)((char *)v166 + v122[20]);
  v124 = (uint64_t *)((char *)v167 + v122[20]);
  v125 = sub_100008AC0(&qword_10008B888);
  v126 = *(_QWORD *)(v125 - 8);
  v127 = *(unsigned int (**)(void))(v126 + 48);
  if (((unsigned int (*)(uint64_t *, uint64_t))v127)(v124, 1))
  {
    v48 = sub_100008AC0(&qword_10008C460);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v101 = *v124;
    swift_retain();
    *v123 = v101;
    v41 = sub_100008AC0(&qword_10008B868);
    v103 = (_QWORD *)((char *)v123 + *(int *)(v41 + 36));
    v104 = (uint64_t *)((char *)v124 + *(int *)(v41 + 36));
    v102 = *v104;
    swift_retain();
    *v103 = v102;
    v42 = sub_100008AC0(&qword_10008B870);
    v106 = (char *)v103 + *(int *)(v42 + 28);
    v105 = (char *)v104 + *(int *)(v42 + 28);
    v43 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v43 - 8) + 16))(v106, v105);
    v44 = sub_100008AC0(&qword_10008B878);
    v109 = (_QWORD *)((char *)v123 + *(int *)(v44 + 36));
    v108 = (uint64_t *)((char *)v124 + *(int *)(v44 + 36));
    v107 = *v108;
    swift_retain();
    *v109 = v107;
    v110 = v108[1];
    swift_retain();
    v109[1] = v110;
    v45 = sub_100008AC0(&qword_10008B880);
    v113 = (_QWORD *)((char *)v123 + *(int *)(v45 + 36));
    v112 = (uint64_t *)((char *)v124 + *(int *)(v45 + 36));
    v111 = *v112;
    swift_retain();
    *v113 = v111;
    v114 = v112[1];
    swift_retain();
    v113[1] = v114;
    v116 = (_QWORD *)((char *)v123 + *(int *)(v125 + 36));
    v117 = (uint64_t *)((char *)v124 + *(int *)(v125 + 36));
    v115 = *v117;
    swift_retain();
    *v116 = v115;
    v46 = sub_100008AC0(&qword_10008B890);
    v118 = (char *)v116 + *(int *)(v46 + 28);
    v119 = (char *)v117 + *(int *)(v46 + 28);
    v120 = type metadata accessor for SymbolRenderingMode(0);
    v121 = *(_QWORD *)(v120 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v121 + 48))(v119, 1))
    {
      v47 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v118, v119, v120);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
  }
  v99 = (_QWORD *)((char *)v166 + v122[24]);
  v100 = (uint64_t *)((char *)v167 + v122[24]);
  if (v127())
  {
    v56 = sub_100008AC0(&qword_10008C460);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v78 = *v100;
    swift_retain();
    *v99 = v78;
    v49 = sub_100008AC0(&qword_10008B868);
    v80 = (_QWORD *)((char *)v99 + *(int *)(v49 + 36));
    v81 = (uint64_t *)((char *)v100 + *(int *)(v49 + 36));
    v79 = *v81;
    swift_retain();
    *v80 = v79;
    v50 = sub_100008AC0(&qword_10008B870);
    v83 = (char *)v80 + *(int *)(v50 + 28);
    v82 = (char *)v81 + *(int *)(v50 + 28);
    v51 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 16))(v83, v82);
    v52 = sub_100008AC0(&qword_10008B878);
    v86 = (_QWORD *)((char *)v99 + *(int *)(v52 + 36));
    v85 = (uint64_t *)((char *)v100 + *(int *)(v52 + 36));
    v84 = *v85;
    swift_retain();
    *v86 = v84;
    v87 = v85[1];
    swift_retain();
    v86[1] = v87;
    v53 = sub_100008AC0(&qword_10008B880);
    v90 = (_QWORD *)((char *)v99 + *(int *)(v53 + 36));
    v89 = (uint64_t *)((char *)v100 + *(int *)(v53 + 36));
    v88 = *v89;
    swift_retain();
    *v90 = v88;
    v91 = v89[1];
    swift_retain();
    v90[1] = v91;
    v93 = (_QWORD *)((char *)v99 + *(int *)(v125 + 36));
    v94 = (uint64_t *)((char *)v100 + *(int *)(v125 + 36));
    v92 = *v94;
    swift_retain();
    *v93 = v92;
    v54 = sub_100008AC0(&qword_10008B890);
    v95 = (char *)v93 + *(int *)(v54 + 28);
    v96 = (char *)v94 + *(int *)(v54 + 28);
    v97 = type metadata accessor for SymbolRenderingMode(0);
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v98 + 48))(v96, 1))
    {
      v55 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v95, v96, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v99, 0, 1, v125);
  }
  v57 = sub_100008AC0(&qword_10008C430);
  v73 = v164 + *(int *)(v57 + 36);
  v72 = (uint64_t *)(v165 + *(int *)(v57 + 36));
  v68 = *v72;
  v69 = v72[1];
  swift_retain();
  *(_QWORD *)v73 = v68;
  *(_QWORD *)(v73 + 8) = v69;
  v70 = v72[2];
  v71 = v72[3];
  swift_retain();
  *(_QWORD *)(v73 + 16) = v70;
  *(_QWORD *)(v73 + 24) = v71;
  *(_OWORD *)(v73 + 32) = *((_OWORD *)v72 + 2);
  v74 = (char *)(a2 + v221 + *(int *)(v163 + 64));
  v75 = (char *)(a1 + v221 + *(int *)(v163 + 64));
  v76 = sub_100008AC0(&qword_10008C438);
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v77 + 48))(v75, 1))
  {
    v59 = sub_100008AC0(&qword_10008C468);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    v58 = sub_100008AC0(&qword_10008C440);
    (*(void (**)(char *, char *))(*(_QWORD *)(v58 - 8) + 16))(v74, v75);
    v67 = &v74[*(int *)(v76 + 36)];
    v66 = &v75[*(int *)(v76 + 36)];
    v62 = *(_QWORD *)v66;
    v63 = *((_QWORD *)v66 + 1);
    swift_retain();
    *(_QWORD *)v67 = v62;
    *((_QWORD *)v67 + 1) = v63;
    v64 = *((_QWORD *)v66 + 2);
    v65 = *((_QWORD *)v66 + 3);
    swift_retain();
    *((_QWORD *)v67 + 2) = v64;
    *((_QWORD *)v67 + 3) = v65;
    *((_OWORD *)v67 + 2) = *((_OWORD *)v66 + 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
  }
  v60 = sub_100008AC0(&qword_10008C220);
  memcpy((void *)(a2 + *(int *)(v60 + 36)), (const void *)(a1 + *(int *)(v60 + 36)), 0x30uLL);
  return a2;
}

uint64_t sub_100061D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100057480(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_100061D5C()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C488;
  if (!qword_10008C488)
  {
    v0 = sub_100008DF0(&qword_10008C480);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C488);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100061DCC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C490;
  if (!qword_10008C490)
  {
    v0 = sub_100008DF0(&qword_10008C478);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C490);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100061E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = *(int *)(sub_100008AC0(&qword_10008C3C8) + 44);
  v25 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v1 = sub_100008AC0(&qword_10008C3D8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v24 + v25, 1))
  {
    v2 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v24 + v25, v2) == 1)
    {
      v12 = a1 + v24 + v25;
      swift_release();
      v10 = v12 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v11 = v10 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v11);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v13 = v12 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v14 = v13 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v15 = type metadata accessor for SymbolRenderingMode(0);
      v16 = *(_QWORD *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(v14, 1))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    else
    {
      v19 = a1 + v24 + v25;
      swift_release();
      v17 = v19 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v18 = v17 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v3 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v18);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v20 = v19 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v21 = v20 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v22 = type metadata accessor for SymbolRenderingMode(0);
      v23 = *(_QWORD *)(v22 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v23 + 48))(v21, 1))
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
  }
  v8 = a1 + v24 + v25 + *(int *)(sub_100008AC0(&qword_10008C3E8) + 48);
  v5 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8);
  v9 = a1 + v24 + *(int *)(sub_100008AC0(&qword_10008C3F8) + 64);
  v6 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9);
  return a1;
}

unint64_t sub_100062280()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C498;
  if (!qword_10008C498)
  {
    v2 = sub_100008DF0(&qword_10008C408);
    sub_100061DCC();
    sub_100044524();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C498);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006230C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = *(int *)(sub_100008AC0(&qword_10008C3C8) + 44);
  v25 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v1 = sub_100008AC0(&qword_10008C3D8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v24 + v25, 1))
  {
    v2 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v24 + v25, v2) == 1)
    {
      v12 = a1 + v24 + v25;
      swift_release();
      v10 = v12 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v11 = v10 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v11);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v13 = v12 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v14 = v13 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v15 = type metadata accessor for SymbolRenderingMode(0);
      v16 = *(_QWORD *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(v14, 1))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    else
    {
      v19 = a1 + v24 + v25;
      swift_release();
      v17 = v19 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v18 = v17 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v3 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v18);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v20 = v19 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v21 = v20 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v22 = type metadata accessor for SymbolRenderingMode(0);
      v23 = *(_QWORD *)(v22 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v23 + 48))(v21, 1))
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
  }
  v8 = a1 + v24 + v25 + *(int *)(sub_100008AC0(&qword_10008C3E8) + 48);
  v5 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8);
  v9 = a1 + v24 + *(int *)(sub_100008AC0(&qword_10008C3F8) + 64);
  v6 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9);
  sub_100008AC0(&qword_10008C408);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100062780@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000592EC(*(char **)(v1 + 16), a1);
}

unint64_t sub_100062788()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C4A8;
  if (!qword_10008C4A8)
  {
    v0 = sub_100008DF0(&qword_10008C4A0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4A8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_1000627F8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C4B0;
  if (!qword_10008C4B0)
  {
    v0 = sub_100008DF0(&qword_10008C470);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4B0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100062868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *(int *)(sub_100008AC0(&qword_10008C418) + 44);
  v1 = sub_100008AC0(&qword_10008C420);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v31, 1))
  {
    swift_release();
    v25 = a1 + v31 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v26 = v25 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v2 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v26);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v27 = a1 + v31 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
    swift_release();
    v28 = v27 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v29 = type metadata accessor for SymbolRenderingMode(0);
    v30 = *(_QWORD *)(v29 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v30 + 48))(v28, 1))
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  }
  v21 = (int *)sub_100008AC0(&qword_10008C428);
  v20 = a1 + v31 + v21[12];
  v3 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v20);
  v22 = a1 + v31 + v21[20];
  v23 = sub_100008AC0(&qword_10008B888);
  v24 = *(unsigned int (**)(void))(*(_QWORD *)(v23 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v24)(v22, 1))
  {
    swift_release();
    v14 = v22 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v15 = v14 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v15);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v16 = v22 + *(int *)(v23 + 36);
    swift_release();
    v17 = v16 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v18 = type metadata accessor for SymbolRenderingMode(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v19 + 48))(v17, 1))
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  v13 = a1 + v31 + v21[24];
  if (!v24())
  {
    swift_release();
    v7 = v13 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v8 = v7 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v5 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v9 = v13 + *(int *)(v23 + 36);
    swift_release();
    v10 = v9 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v11 = type metadata accessor for SymbolRenderingMode(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v10, 1))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  return a1;
}

unint64_t sub_100062DE0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C4B8;
  if (!qword_10008C4B8)
  {
    v2 = sub_100008DF0(&qword_10008C430);
    sub_1000627F8();
    sub_100044524();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4B8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100062E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *(int *)(sub_100008AC0(&qword_10008C418) + 44);
  v1 = sub_100008AC0(&qword_10008C420);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v31, 1))
  {
    swift_release();
    v25 = a1 + v31 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v26 = v25 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v2 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v26);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v27 = a1 + v31 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
    swift_release();
    v28 = v27 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v29 = type metadata accessor for SymbolRenderingMode(0);
    v30 = *(_QWORD *)(v29 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v30 + 48))(v28, 1))
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  }
  v21 = (int *)sub_100008AC0(&qword_10008C428);
  v20 = a1 + v31 + v21[12];
  v3 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v20);
  v22 = a1 + v31 + v21[20];
  v23 = sub_100008AC0(&qword_10008B888);
  v24 = *(unsigned int (**)(void))(*(_QWORD *)(v23 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v24)(v22, 1))
  {
    swift_release();
    v14 = v22 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v15 = v14 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v15);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v16 = v22 + *(int *)(v23 + 36);
    swift_release();
    v17 = v16 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v18 = type metadata accessor for SymbolRenderingMode(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v19 + 48))(v17, 1))
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  v13 = a1 + v31 + v21[24];
  if (!v24())
  {
    swift_release();
    v7 = v13 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v8 = v7 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v5 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v9 = v13 + *(int *)(v23 + 36);
    swift_release();
    v10 = v9 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v11 = type metadata accessor for SymbolRenderingMode(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(v10, 1))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  sub_100008AC0(&qword_10008C430);
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_100063414()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008C4C0;
  if (!qword_10008C4C0)
  {
    v2 = sub_100008DF0(&qword_10008C438);
    v4[0] = sub_100008DF0(&qword_10008C2E0);
    v4[1] = sub_10005D680();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_100044524();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4C0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_1000634D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v4 = sub_100008AC0(&qword_10008C438);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1))
  {
    v1 = sub_100008AC0(&qword_10008C440);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_release();
    swift_release();
  }
  return a1;
}

char *sub_10006357C(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = sub_100008AC0(&qword_10008C438);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = sub_100008AC0(&qword_10008C468);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008C440);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    memcpy(&a2[*(int *)(v7 + 36)], &a1[*(int *)(v7 + 36)], 0x30uLL);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  return a2;
}

__n128 sub_100063670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 *v39;
  __n128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  char *__dst;
  char *__src;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v92 = *(int *)(sub_100008AC0(&qword_10008C3C8) + 44);
  v2 = a2 + v92;
  *(_OWORD *)v2 = *(_OWORD *)(a1 + v92);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + v92 + 16);
  v93 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v94 = sub_100008AC0(&qword_10008C3D8);
  v95 = *(_QWORD *)(v94 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v95 + 48))(a1 + v92 + v93, 1))
  {
    v21 = sub_100008AC0(&qword_10008C448);
    memcpy((void *)(a2 + v92 + v93), (const void *)(a1 + v92 + v93), *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v89 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v92 + v93, v89) == 1)
    {
      v57 = (uint64_t *)(a1 + v92 + v93);
      v42 = *v57;
      swift_retain();
      v56 = (_QWORD *)(a2 + v92 + v93);
      *v56 = v42;
      v12 = sub_100008AC0(&qword_10008B868);
      v44 = (_QWORD *)((char *)v56 + *(int *)(v12 + 36));
      v45 = (uint64_t *)((char *)v57 + *(int *)(v12 + 36));
      v43 = *v45;
      swift_retain();
      *v44 = v43;
      v13 = sub_100008AC0(&qword_10008B870);
      v47 = (char *)v44 + *(int *)(v13 + 28);
      v46 = (char *)v45 + *(int *)(v13 + 28);
      v14 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 16))(v47, v46);
      v15 = sub_100008AC0(&qword_10008B878);
      v50 = (_QWORD *)((char *)v56 + *(int *)(v15 + 36));
      v49 = (uint64_t *)((char *)v57 + *(int *)(v15 + 36));
      v48 = *v49;
      swift_retain();
      *v50 = v48;
      v51 = v49[1];
      swift_retain();
      v50[1] = v51;
      v16 = sub_100008AC0(&qword_10008B880);
      v54 = (_QWORD *)((char *)v56 + *(int *)(v16 + 36));
      v53 = (uint64_t *)((char *)v57 + *(int *)(v16 + 36));
      v52 = *v53;
      swift_retain();
      *v54 = v52;
      v55 = v53[1];
      swift_retain();
      v54[1] = v55;
      v17 = sub_100008AC0(&qword_10008B888);
      v59 = (_QWORD *)((char *)v56 + *(int *)(v17 + 36));
      v60 = (uint64_t *)((char *)v57 + *(int *)(v17 + 36));
      v58 = *v60;
      swift_retain();
      *v59 = v58;
      v18 = sub_100008AC0(&qword_10008B890);
      __dst = (char *)v59 + *(int *)(v18 + 28);
      __src = (char *)v60 + *(int *)(v18 + 28);
      v63 = type metadata accessor for SymbolRenderingMode(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v64 + 48))(__src, 1))
      {
        v19 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(__dst, __src, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v63);
      }
      v20 = sub_100008AC0(&qword_10008C420);
      v41 = a2 + v92 + v93;
      memcpy((void *)(v41 + *(int *)(v20 + 36)), (const void *)(a1 + v92 + v93 + *(int *)(v20 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(v41, v89, 1);
    }
    else
    {
      v81 = (uint64_t *)(a1 + v92 + v93);
      v66 = *v81;
      swift_retain();
      v80 = (_QWORD *)(a2 + v92 + v93);
      *v80 = v66;
      v3 = sub_100008AC0(&qword_10008B868);
      v68 = (_QWORD *)((char *)v80 + *(int *)(v3 + 36));
      v69 = (uint64_t *)((char *)v81 + *(int *)(v3 + 36));
      v67 = *v69;
      swift_retain();
      *v68 = v67;
      v4 = sub_100008AC0(&qword_10008B870);
      v71 = (char *)v68 + *(int *)(v4 + 28);
      v70 = (char *)v69 + *(int *)(v4 + 28);
      v5 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v71, v70);
      v6 = sub_100008AC0(&qword_10008B878);
      v74 = (_QWORD *)((char *)v80 + *(int *)(v6 + 36));
      v73 = (uint64_t *)((char *)v81 + *(int *)(v6 + 36));
      v72 = *v73;
      swift_retain();
      *v74 = v72;
      v75 = v73[1];
      swift_retain();
      v74[1] = v75;
      v7 = sub_100008AC0(&qword_10008B880);
      v78 = (_QWORD *)((char *)v80 + *(int *)(v7 + 36));
      v77 = (uint64_t *)((char *)v81 + *(int *)(v7 + 36));
      v76 = *v77;
      swift_retain();
      *v78 = v76;
      v79 = v77[1];
      swift_retain();
      v78[1] = v79;
      v8 = sub_100008AC0(&qword_10008B888);
      v83 = (_QWORD *)((char *)v80 + *(int *)(v8 + 36));
      v84 = (uint64_t *)((char *)v81 + *(int *)(v8 + 36));
      v82 = *v84;
      swift_retain();
      *v83 = v82;
      v9 = sub_100008AC0(&qword_10008B890);
      v85 = (char *)v83 + *(int *)(v9 + 28);
      v86 = (char *)v84 + *(int *)(v9 + 28);
      v87 = type metadata accessor for SymbolRenderingMode(0);
      v88 = *(_QWORD *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v88 + 48))(v86, 1))
      {
        v10 = sub_100008AC0(&qword_10008B8C0);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v86, v87);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
      }
      v11 = sub_100008AC0(&qword_10008C420);
      v65 = a2 + v92 + v93;
      memcpy((void *)(v65 + *(int *)(v11 + 36)), (const void *)(a1 + v92 + v93 + *(int *)(v11 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(v65, v89, 0);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 56))(a2 + v92 + v93, 0, 1, v94);
  }
  v22 = sub_100008AC0(&qword_10008C3E8);
  v32 = a2 + v92 + v93 + *(int *)(v22 + 48);
  v31 = a1 + v92 + v93 + *(int *)(v22 + 48);
  v23 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v32, v31);
  v24 = sub_100008AC0(&qword_10008C3F8);
  v25 = a2 + v92 + *(int *)(v24 + 48);
  v26 = a1 + v92 + *(int *)(v24 + 48);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v34 = a2 + v92 + *(int *)(v24 + 64);
  v33 = a1 + v92 + *(int *)(v24 + 64);
  v27 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v34, v33);
  v28 = sub_100008AC0(&qword_10008C450);
  *(_QWORD *)(v34 + *(int *)(v28 + 36)) = *(_QWORD *)(v33 + *(int *)(v28 + 36));
  v29 = sub_100008AC0(&qword_10008C408);
  v40 = (__n128 *)(a2 + *(int *)(v29 + 36));
  v39 = (__n128 *)(a1 + *(int *)(v29 + 36));
  v35 = v39->n128_u64[0];
  v36 = v39->n128_u64[1];
  swift_retain();
  v40->n128_u64[0] = v35;
  v40->n128_u64[1] = v36;
  v37 = v39[1].n128_u64[0];
  v38 = v39[1].n128_u64[1];
  swift_retain();
  v40[1].n128_u64[0] = v37;
  v40[1].n128_u64[1] = v38;
  result = v39[2];
  v40[2] = result;
  return result;
}

__n128 sub_100063FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 *v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  char *__dst;
  char *__src;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(void);
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v112 = *(int *)(sub_100008AC0(&qword_10008C418) + 44);
  v114 = sub_100008AC0(&qword_10008C420);
  v115 = *(_QWORD *)(v114 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v115 + 48))(a1 + v112, 1))
  {
    v10 = sub_100008AC0(&qword_10008C458);
    memcpy((void *)(a2 + v112), (const void *)(a1 + v112), *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v90 = *(_QWORD *)(a1 + v112);
    swift_retain();
    *(_QWORD *)(a2 + v112) = v90;
    v2 = sub_100008AC0(&qword_10008B868);
    v92 = (_QWORD *)(a2 + v112 + *(int *)(v2 + 36));
    v93 = (uint64_t *)(a1 + v112 + *(int *)(v2 + 36));
    v91 = *v93;
    swift_retain();
    *v92 = v91;
    v3 = sub_100008AC0(&qword_10008B870);
    v95 = (char *)v92 + *(int *)(v3 + 28);
    v94 = (char *)v93 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v95, v94);
    v5 = sub_100008AC0(&qword_10008B878);
    v98 = (_QWORD *)(a2 + v112 + *(int *)(v5 + 36));
    v97 = (uint64_t *)(a1 + v112 + *(int *)(v5 + 36));
    v96 = *v97;
    swift_retain();
    *v98 = v96;
    v99 = v97[1];
    swift_retain();
    v98[1] = v99;
    v6 = sub_100008AC0(&qword_10008B880);
    v102 = (_QWORD *)(a2 + v112 + *(int *)(v6 + 36));
    v101 = (uint64_t *)(a1 + v112 + *(int *)(v6 + 36));
    v100 = *v101;
    swift_retain();
    *v102 = v100;
    v103 = v101[1];
    swift_retain();
    v102[1] = v103;
    v7 = sub_100008AC0(&qword_10008B888);
    v105 = (_QWORD *)(a2 + v112 + *(int *)(v7 + 36));
    v106 = (uint64_t *)(a1 + v112 + *(int *)(v7 + 36));
    v104 = *v106;
    swift_retain();
    *v105 = v104;
    v8 = sub_100008AC0(&qword_10008B890);
    v107 = (char *)v105 + *(int *)(v8 + 28);
    v108 = (char *)v106 + *(int *)(v8 + 28);
    v109 = type metadata accessor for SymbolRenderingMode(0);
    v110 = *(_QWORD *)(v109 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v110 + 48))(v108, 1))
    {
      v9 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v107, v108, v109);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
    }
    memcpy((void *)(a2 + v112 + *(int *)(v114 + 36)), (const void *)(a1 + v112 + *(int *)(v114 + 36)), 0x30uLL);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(a2 + v112, 0, 1, v114);
  }
  v84 = (int *)sub_100008AC0(&qword_10008C428);
  v83 = a2 + v112 + v84[12];
  v82 = a1 + v112 + v84[12];
  v11 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v83, v82);
  v12 = a2 + v112 + v84[16];
  v13 = a1 + v112 + v84[16];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v85 = (_QWORD *)(a2 + v112 + v84[20]);
  v86 = (uint64_t *)(a1 + v112 + v84[20]);
  v87 = sub_100008AC0(&qword_10008B888);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = *(unsigned int (**)(void))(v88 + 48);
  if (((unsigned int (*)(uint64_t *, uint64_t))v89)(v86, 1))
  {
    v21 = sub_100008AC0(&qword_10008C460);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v61 = *v86;
    swift_retain();
    *v85 = v61;
    v14 = sub_100008AC0(&qword_10008B868);
    v63 = (_QWORD *)((char *)v85 + *(int *)(v14 + 36));
    v64 = (uint64_t *)((char *)v86 + *(int *)(v14 + 36));
    v62 = *v64;
    swift_retain();
    *v63 = v62;
    v15 = sub_100008AC0(&qword_10008B870);
    v66 = (char *)v63 + *(int *)(v15 + 28);
    v65 = (char *)v64 + *(int *)(v15 + 28);
    v16 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v16 - 8) + 16))(v66, v65);
    v17 = sub_100008AC0(&qword_10008B878);
    v69 = (_QWORD *)((char *)v85 + *(int *)(v17 + 36));
    v68 = (uint64_t *)((char *)v86 + *(int *)(v17 + 36));
    v67 = *v68;
    swift_retain();
    *v69 = v67;
    v70 = v68[1];
    swift_retain();
    v69[1] = v70;
    v18 = sub_100008AC0(&qword_10008B880);
    v73 = (_QWORD *)((char *)v85 + *(int *)(v18 + 36));
    v72 = (uint64_t *)((char *)v86 + *(int *)(v18 + 36));
    v71 = *v72;
    swift_retain();
    *v73 = v71;
    v74 = v72[1];
    swift_retain();
    v73[1] = v74;
    v76 = (_QWORD *)((char *)v85 + *(int *)(v87 + 36));
    v77 = (uint64_t *)((char *)v86 + *(int *)(v87 + 36));
    v75 = *v77;
    swift_retain();
    *v76 = v75;
    v19 = sub_100008AC0(&qword_10008B890);
    __dst = (char *)v76 + *(int *)(v19 + 28);
    __src = (char *)v77 + *(int *)(v19 + 28);
    v80 = type metadata accessor for SymbolRenderingMode(0);
    v81 = *(_QWORD *)(v80 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v81 + 48))(__src, 1))
    {
      v20 = sub_100008AC0(&qword_10008B8C0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, __src, v80);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v80);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
  }
  v59 = (_QWORD *)(a2 + v112 + v84[24]);
  v60 = (uint64_t *)(a1 + v112 + v84[24]);
  if (v89())
  {
    v29 = sub_100008AC0(&qword_10008C460);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v38 = *v60;
    swift_retain();
    *v59 = v38;
    v22 = sub_100008AC0(&qword_10008B868);
    v40 = (_QWORD *)((char *)v59 + *(int *)(v22 + 36));
    v41 = (uint64_t *)((char *)v60 + *(int *)(v22 + 36));
    v39 = *v41;
    swift_retain();
    *v40 = v39;
    v23 = sub_100008AC0(&qword_10008B870);
    v43 = (char *)v40 + *(int *)(v23 + 28);
    v42 = (char *)v41 + *(int *)(v23 + 28);
    v24 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v24 - 8) + 16))(v43, v42);
    v25 = sub_100008AC0(&qword_10008B878);
    v46 = (_QWORD *)((char *)v59 + *(int *)(v25 + 36));
    v45 = (uint64_t *)((char *)v60 + *(int *)(v25 + 36));
    v44 = *v45;
    swift_retain();
    *v46 = v44;
    v47 = v45[1];
    swift_retain();
    v46[1] = v47;
    v26 = sub_100008AC0(&qword_10008B880);
    v50 = (_QWORD *)((char *)v59 + *(int *)(v26 + 36));
    v49 = (uint64_t *)((char *)v60 + *(int *)(v26 + 36));
    v48 = *v49;
    swift_retain();
    *v50 = v48;
    v51 = v49[1];
    swift_retain();
    v50[1] = v51;
    v53 = (_QWORD *)((char *)v59 + *(int *)(v87 + 36));
    v54 = (uint64_t *)((char *)v60 + *(int *)(v87 + 36));
    v52 = *v54;
    swift_retain();
    *v53 = v52;
    v27 = sub_100008AC0(&qword_10008B890);
    v55 = (char *)v53 + *(int *)(v27 + 28);
    v56 = (char *)v54 + *(int *)(v27 + 28);
    v57 = type metadata accessor for SymbolRenderingMode(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v58 + 48))(v56, 1))
    {
      v28 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v59, 0, 1, v87);
  }
  v30 = sub_100008AC0(&qword_10008C430);
  v37 = (__n128 *)(a2 + *(int *)(v30 + 36));
  v36 = (__n128 *)(a1 + *(int *)(v30 + 36));
  v32 = v36->n128_u64[0];
  v33 = v36->n128_u64[1];
  swift_retain();
  v37->n128_u64[0] = v32;
  v37->n128_u64[1] = v33;
  v34 = v36[1].n128_u64[0];
  v35 = v36[1].n128_u64[1];
  swift_retain();
  v37[1].n128_u64[0] = v34;
  v37[1].n128_u64[1] = v35;
  result = v36[2];
  v37[2] = result;
  return result;
}

char *sub_100064AC0(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v14;
  uint64_t v15;

  v14 = sub_100008AC0(&qword_10008C438);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(a1, 1))
  {
    v4 = sub_100008AC0(&qword_10008C468);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v2 = sub_100008AC0(&qword_10008C440);
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v3 = *(int *)(v14 + 36);
    v11 = &a2[v3];
    v10 = &a1[v3];
    v6 = *(_QWORD *)&a1[v3];
    v7 = *(_QWORD *)&a1[v3 + 8];
    swift_retain();
    *(_QWORD *)v11 = v6;
    *((_QWORD *)v11 + 1) = v7;
    v8 = *((_QWORD *)v10 + 2);
    v9 = *((_QWORD *)v10 + 3);
    swift_retain();
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v9;
    *((_OWORD *)v11 + 2) = *((_OWORD *)v10 + 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  return a2;
}

unint64_t sub_100064C10()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C4C8;
  if (!qword_10008C4C8)
  {
    v2 = sub_100008DF0(&qword_10008C468);
    sub_100063414();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4C8);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100064C8C(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008C440);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  sub_100008AC0(&qword_10008C438);
  swift_release();
  swift_release();
  return a1;
}

__n128 sub_100064D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;

  v2 = sub_100008AC0(&qword_10008C440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(sub_100008AC0(&qword_10008C438) + 36);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  swift_retain();
  v3 = (_QWORD *)(a2 + v6);
  v12 = (__n128 *)(a2 + v6);
  *v3 = v7;
  v3[1] = v8;
  v10 = *(_QWORD *)(a1 + v6 + 16);
  v11 = *(_QWORD *)(a1 + v6 + 24);
  swift_retain();
  v12[1].n128_u64[0] = v10;
  v12[1].n128_u64[1] = v11;
  result = *(__n128 *)(a1 + v6 + 32);
  v12[2] = result;
  return result;
}

void *sub_100064DDC(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

unint64_t sub_100064E88()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C4D0;
  if (!qword_10008C4D0)
  {
    v2 = sub_100008DF0(&qword_10008C420);
    sub_100038BA0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4D0);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100064F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100008AC0(&qword_10008C420);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1))
  {
    swift_release();
    v4 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v5 = v4 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v2 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v5);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v6 = a1 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
    swift_release();
    v7 = v6 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v8 = type metadata accessor for SymbolRenderingMode(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v9 + 48))(v7, 1))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  return a1;
}

_QWORD *sub_1000650C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *__dst;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;

  v24 = sub_100008AC0(&qword_10008C420);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v25 + 48))(a1, 1))
  {
    v10 = sub_100008AC0(&qword_10008C458);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = sub_100008AC0(&qword_10008B868);
    v12 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v13 = (_QWORD *)((char *)a1 + *(int *)(v2 + 36));
    *v12 = *v13;
    v3 = sub_100008AC0(&qword_10008B870);
    v15 = (char *)v12 + *(int *)(v3 + 28);
    v14 = (char *)v13 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v15, v14);
    v5 = sub_100008AC0(&qword_10008B878);
    *(_OWORD *)((char *)a2 + *(int *)(v5 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v5 + 36));
    v6 = sub_100008AC0(&qword_10008B880);
    *(_OWORD *)((char *)a2 + *(int *)(v6 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v6 + 36));
    v7 = sub_100008AC0(&qword_10008B888);
    v16 = (_QWORD *)((char *)a2 + *(int *)(v7 + 36));
    v17 = (_QWORD *)((char *)a1 + *(int *)(v7 + 36));
    *v16 = *v17;
    v8 = sub_100008AC0(&qword_10008B890);
    __dst = (char *)v16 + *(int *)(v8 + 28);
    v19 = (char *)v17 + *(int *)(v8 + 28);
    v20 = type metadata accessor for SymbolRenderingMode(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(v19, 1))
    {
      v9 = sub_100008AC0(&qword_10008B8C0);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    memcpy((char *)a2 + *(int *)(v24 + 36), (char *)a1 + *(int *)(v24 + 36), 0x30uLL);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(a2, 0, 1, v24);
  }
  return a2;
}

uint64_t sub_100065370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = sub_100008AC0(&qword_10008B888);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1, 1))
  {
    swift_release();
    v3 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
    swift_release();
    v4 = v3 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
    v1 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4);
    sub_100008AC0(&qword_10008B878);
    swift_release();
    swift_release();
    sub_100008AC0(&qword_10008B880);
    swift_release();
    swift_release();
    v5 = a1 + *(int *)(v10 + 36);
    swift_release();
    v6 = v5 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
    v7 = type metadata accessor for SymbolRenderingMode(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v6, 1))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return a1;
}

_QWORD *sub_100065524(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *__dst;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;

  v23 = sub_100008AC0(&qword_10008B888);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v24 + 48))(a1, 1))
  {
    v9 = sub_100008AC0(&qword_10008C460);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = sub_100008AC0(&qword_10008B868);
    v11 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v12 = (_QWORD *)((char *)a1 + *(int *)(v2 + 36));
    *v11 = *v12;
    v3 = sub_100008AC0(&qword_10008B870);
    v14 = (char *)v11 + *(int *)(v3 + 28);
    v13 = (char *)v12 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v14, v13);
    v5 = sub_100008AC0(&qword_10008B878);
    *(_OWORD *)((char *)a2 + *(int *)(v5 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v5 + 36));
    v6 = sub_100008AC0(&qword_10008B880);
    *(_OWORD *)((char *)a2 + *(int *)(v6 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v6 + 36));
    v15 = (_QWORD *)((char *)a2 + *(int *)(v23 + 36));
    v16 = (_QWORD *)((char *)a1 + *(int *)(v23 + 36));
    *v15 = *v16;
    v7 = sub_100008AC0(&qword_10008B890);
    __dst = (char *)v15 + *(int *)(v7 + 28);
    v18 = (char *)v16 + *(int *)(v7 + 28);
    v19 = type metadata accessor for SymbolRenderingMode(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v20 + 48))(v18, 1))
    {
      v8 = sub_100008AC0(&qword_10008B8C0);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(a2, 0, 1, v23);
  }
  return a2;
}

_QWORD *sub_100065794(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;

  v35 = sub_100008AC0(&qword_10008C420);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v36 + 48))(a1, 1))
  {
    v10 = sub_100008AC0(&qword_10008C458);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v12 = *a1;
    swift_retain();
    *a2 = v12;
    v2 = sub_100008AC0(&qword_10008B868);
    v14 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v15 = (uint64_t *)((char *)a1 + *(int *)(v2 + 36));
    v13 = *v15;
    swift_retain();
    *v14 = v13;
    v3 = sub_100008AC0(&qword_10008B870);
    v17 = (char *)v14 + *(int *)(v3 + 28);
    v16 = (char *)v15 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v17, v16);
    v5 = sub_100008AC0(&qword_10008B878);
    v20 = (_QWORD *)((char *)a2 + *(int *)(v5 + 36));
    v19 = (uint64_t *)((char *)a1 + *(int *)(v5 + 36));
    v18 = *v19;
    swift_retain();
    *v20 = v18;
    v21 = v19[1];
    swift_retain();
    v20[1] = v21;
    v6 = sub_100008AC0(&qword_10008B880);
    v24 = (_QWORD *)((char *)a2 + *(int *)(v6 + 36));
    v23 = (uint64_t *)((char *)a1 + *(int *)(v6 + 36));
    v22 = *v23;
    swift_retain();
    *v24 = v22;
    v25 = v23[1];
    swift_retain();
    v24[1] = v25;
    v7 = sub_100008AC0(&qword_10008B888);
    v27 = (_QWORD *)((char *)a2 + *(int *)(v7 + 36));
    v28 = (uint64_t *)((char *)a1 + *(int *)(v7 + 36));
    v26 = *v28;
    swift_retain();
    *v27 = v26;
    v8 = sub_100008AC0(&qword_10008B890);
    v29 = (char *)v27 + *(int *)(v8 + 28);
    v30 = (char *)v28 + *(int *)(v8 + 28);
    v31 = type metadata accessor for SymbolRenderingMode(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v32 + 48))(v30, 1))
    {
      v9 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    memcpy((char *)a2 + *(int *)(v35 + 36), (char *)a1 + *(int *)(v35 + 36), 0x30uLL);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(a2, 0, 1, v35);
  }
  return a2;
}

_QWORD *sub_100065AE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;

  v34 = sub_100008AC0(&qword_10008B888);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v35 + 48))(a1, 1))
  {
    v9 = sub_100008AC0(&qword_10008C460);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v11 = *a1;
    swift_retain();
    *a2 = v11;
    v2 = sub_100008AC0(&qword_10008B868);
    v13 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
    v14 = (uint64_t *)((char *)a1 + *(int *)(v2 + 36));
    v12 = *v14;
    swift_retain();
    *v13 = v12;
    v3 = sub_100008AC0(&qword_10008B870);
    v16 = (char *)v13 + *(int *)(v3 + 28);
    v15 = (char *)v14 + *(int *)(v3 + 28);
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v16, v15);
    v5 = sub_100008AC0(&qword_10008B878);
    v19 = (_QWORD *)((char *)a2 + *(int *)(v5 + 36));
    v18 = (uint64_t *)((char *)a1 + *(int *)(v5 + 36));
    v17 = *v18;
    swift_retain();
    *v19 = v17;
    v20 = v18[1];
    swift_retain();
    v19[1] = v20;
    v6 = sub_100008AC0(&qword_10008B880);
    v23 = (_QWORD *)((char *)a2 + *(int *)(v6 + 36));
    v22 = (uint64_t *)((char *)a1 + *(int *)(v6 + 36));
    v21 = *v22;
    swift_retain();
    *v23 = v21;
    v24 = v22[1];
    swift_retain();
    v23[1] = v24;
    v26 = (_QWORD *)((char *)a2 + *(int *)(v34 + 36));
    v27 = (uint64_t *)((char *)a1 + *(int *)(v34 + 36));
    v25 = *v27;
    swift_retain();
    *v26 = v25;
    v7 = sub_100008AC0(&qword_10008B890);
    v28 = (char *)v26 + *(int *)(v7 + 28);
    v29 = (char *)v27 + *(int *)(v7 + 28);
    v30 = type metadata accessor for SymbolRenderingMode(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v31 + 48))(v29, 1))
    {
      v8 = sub_100008AC0(&qword_10008B8C0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(a2, 0, 1, v34);
  }
  return a2;
}

unint64_t sub_100065DFC()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C4D8;
  if (!qword_10008C4D8)
  {
    v2 = sub_100008DF0(&qword_10008C458);
    sub_100064E88();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4D8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100065E78()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C4E0;
  if (!qword_10008C4E0)
  {
    v2 = sub_100008DF0(&qword_10008C460);
    sub_100038BA0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4E0);
    return WitnessTable;
  }
  return v3;
}

char *sub_100065EF4(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a1;
  swift_retain();
  *(_QWORD *)a2 = v6;
  v7 = *(int *)(sub_100008AC0(&qword_10008B868) + 36);
  v8 = *(_QWORD *)&a1[v7];
  swift_retain();
  *(_QWORD *)&a2[v7] = v8;
  v9 = *(int *)(sub_100008AC0(&qword_10008B870) + 28);
  v2 = type metadata accessor for Image.Scale(0);
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v7 + v9], &a1[v7 + v9]);
  v10 = *(int *)(sub_100008AC0(&qword_10008B878) + 36);
  v11 = *(_QWORD *)&a1[v10];
  swift_retain();
  *(_QWORD *)&a2[v10] = v11;
  v12 = *(_QWORD *)&a1[v10 + 8];
  swift_retain();
  *(_QWORD *)&a2[v10 + 8] = v12;
  v13 = *(int *)(sub_100008AC0(&qword_10008B880) + 36);
  v14 = *(_QWORD *)&a1[v13];
  swift_retain();
  *(_QWORD *)&a2[v13] = v14;
  v15 = *(_QWORD *)&a1[v13 + 8];
  swift_retain();
  *(_QWORD *)&a2[v13 + 8] = v15;
  v17 = *(int *)(sub_100008AC0(&qword_10008B888) + 36);
  v19 = *(_QWORD *)&a1[v17];
  swift_retain();
  *(_QWORD *)&a2[v17] = v19;
  v20 = *(int *)(sub_100008AC0(&qword_10008B890) + 28);
  v21 = type metadata accessor for SymbolRenderingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v22 + 48))(&a1[v17 + v20], 1))
  {
    v3 = sub_100008AC0(&qword_10008B8C0);
    memcpy(&a2[v17 + v20], &a1[v17 + v20], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v22 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(&a2[v17 + v20], 0, 1, v21);
  }
  v4 = sub_100008AC0(&qword_10008C420);
  memcpy(&a2[*(int *)(v4 + 36)], &a1[*(int *)(v4 + 36)], 0x30uLL);
  return a2;
}

uint64_t sub_100066220@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100057938(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100066228()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C4F8;
  if (!qword_10008C4F8)
  {
    v0 = sub_100008DF0(&qword_10008C4F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C4F8);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_100066298()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C500;
  if (!qword_10008C500)
  {
    v0 = sub_100008DF0(&qword_10008C4E8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C500);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100066308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v1 = sub_100008AC0(&qword_10008C3D8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1 + v20, 1))
  {
    v2 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v20, v2) == 1)
    {
      swift_release();
      v8 = a1 + v20 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v9 = v8 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v9);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v10 = a1 + v20 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v11 = v10 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v12 = type metadata accessor for SymbolRenderingMode(0);
      v13 = *(_QWORD *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(v11, 1))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    else
    {
      swift_release();
      v14 = a1 + v20 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v15 = v14 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v3 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v15);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v16 = a1 + v20 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v17 = v16 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v18 = type metadata accessor for SymbolRenderingMode(0);
      v19 = *(_QWORD *)(v18 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v19 + 48))(v17, 1))
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
  }
  v7 = a1 + v20 + *(int *)(sub_100008AC0(&qword_10008C3E8) + 48);
  v5 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7);
  return a1;
}

unint64_t sub_1000666D0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v3 = qword_10008C508;
  if (!qword_10008C508)
  {
    v2 = sub_100008DF0(&qword_10008C450);
    v4[0] = sub_100008DF0(&qword_10008C2D0);
    v4[1] = sub_10005D564();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_10005D324();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C508);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100066794(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t sub_1000667D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  char *__dst;
  char *__src;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v70 = *(int *)(sub_100008AC0(&qword_10008C3D0) + 44);
  v72 = sub_100008AC0(&qword_10008C3D8);
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v73 + 48))(a1 + v70, 1))
  {
    v20 = sub_100008AC0(&qword_10008C448);
    memcpy((void *)(a2 + v70), (const void *)(a1 + v70), *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v68 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1 + v70, v68) == 1)
    {
      v26 = *(_QWORD *)(a1 + v70);
      swift_retain();
      *(_QWORD *)(a2 + v70) = v26;
      v11 = sub_100008AC0(&qword_10008B868);
      v28 = (_QWORD *)(a2 + v70 + *(int *)(v11 + 36));
      v29 = (uint64_t *)(a1 + v70 + *(int *)(v11 + 36));
      v27 = *v29;
      swift_retain();
      *v28 = v27;
      v12 = sub_100008AC0(&qword_10008B870);
      v31 = (char *)v28 + *(int *)(v12 + 28);
      v30 = (char *)v29 + *(int *)(v12 + 28);
      v13 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 16))(v31, v30);
      v14 = sub_100008AC0(&qword_10008B878);
      v34 = (_QWORD *)(a2 + v70 + *(int *)(v14 + 36));
      v33 = (uint64_t *)(a1 + v70 + *(int *)(v14 + 36));
      v32 = *v33;
      swift_retain();
      *v34 = v32;
      v35 = v33[1];
      swift_retain();
      v34[1] = v35;
      v15 = sub_100008AC0(&qword_10008B880);
      v38 = (_QWORD *)(a2 + v70 + *(int *)(v15 + 36));
      v37 = (uint64_t *)(a1 + v70 + *(int *)(v15 + 36));
      v36 = *v37;
      swift_retain();
      *v38 = v36;
      v39 = v37[1];
      swift_retain();
      v38[1] = v39;
      v16 = sub_100008AC0(&qword_10008B888);
      v41 = (_QWORD *)(a2 + v70 + *(int *)(v16 + 36));
      v42 = (uint64_t *)(a1 + v70 + *(int *)(v16 + 36));
      v40 = *v42;
      swift_retain();
      *v41 = v40;
      v17 = sub_100008AC0(&qword_10008B890);
      __dst = (char *)v41 + *(int *)(v17 + 28);
      __src = (char *)v42 + *(int *)(v17 + 28);
      v45 = type metadata accessor for SymbolRenderingMode(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v46 + 48))(__src, 1))
      {
        v18 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(__dst, __src, v45);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
      }
      v19 = sub_100008AC0(&qword_10008C420);
      memcpy((void *)(a2 + v70 + *(int *)(v19 + 36)), (const void *)(a1 + v70 + *(int *)(v19 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2 + v70, v68, 1);
    }
    else
    {
      v47 = *(_QWORD *)(a1 + v70);
      swift_retain();
      *(_QWORD *)(a2 + v70) = v47;
      v2 = sub_100008AC0(&qword_10008B868);
      v49 = (_QWORD *)(a2 + v70 + *(int *)(v2 + 36));
      v50 = (uint64_t *)(a1 + v70 + *(int *)(v2 + 36));
      v48 = *v50;
      swift_retain();
      *v49 = v48;
      v3 = sub_100008AC0(&qword_10008B870);
      v52 = (char *)v49 + *(int *)(v3 + 28);
      v51 = (char *)v50 + *(int *)(v3 + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v52, v51);
      v5 = sub_100008AC0(&qword_10008B878);
      v55 = (_QWORD *)(a2 + v70 + *(int *)(v5 + 36));
      v54 = (uint64_t *)(a1 + v70 + *(int *)(v5 + 36));
      v53 = *v54;
      swift_retain();
      *v55 = v53;
      v56 = v54[1];
      swift_retain();
      v55[1] = v56;
      v6 = sub_100008AC0(&qword_10008B880);
      v59 = (_QWORD *)(a2 + v70 + *(int *)(v6 + 36));
      v58 = (uint64_t *)(a1 + v70 + *(int *)(v6 + 36));
      v57 = *v58;
      swift_retain();
      *v59 = v57;
      v60 = v58[1];
      swift_retain();
      v59[1] = v60;
      v7 = sub_100008AC0(&qword_10008B888);
      v62 = (_QWORD *)(a2 + v70 + *(int *)(v7 + 36));
      v63 = (uint64_t *)(a1 + v70 + *(int *)(v7 + 36));
      v61 = *v63;
      swift_retain();
      *v62 = v61;
      v8 = sub_100008AC0(&qword_10008B890);
      v64 = (char *)v62 + *(int *)(v8 + 28);
      v65 = (char *)v63 + *(int *)(v8 + 28);
      v66 = type metadata accessor for SymbolRenderingMode(0);
      v67 = *(_QWORD *)(v66 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v67 + 48))(v65, 1))
      {
        v9 = sub_100008AC0(&qword_10008B8C0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      }
      v10 = sub_100008AC0(&qword_10008C420);
      memcpy((void *)(a2 + v70 + *(int *)(v10 + 36)), (const void *)(a1 + v70 + *(int *)(v10 + 36)), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2 + v70, v68, 0);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(a2 + v70, 0, 1, v72);
  }
  v21 = sub_100008AC0(&qword_10008C3E8);
  v25 = a2 + v70 + *(int *)(v21 + 48);
  v24 = a1 + v70 + *(int *)(v21 + 48);
  v22 = sub_100008AC0(&qword_10008C3F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v25, v24);
  return a2;
}

uint64_t sub_100066F40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_100008AC0(&qword_10008C400);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v3 = sub_100008AC0(&qword_10008C450);
  result = a2;
  *(_QWORD *)(a2 + *(int *)(v3 + 36)) = *(_QWORD *)(a1 + *(int *)(v3 + 36));
  return result;
}

unint64_t sub_100066FAC()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C510;
  if (!qword_10008C510)
  {
    v2 = sub_100008DF0(&qword_10008C3D8);
    sub_100064E88();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C510);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100067030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = sub_100008AC0(&qword_10008C3D8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1))
  {
    v2 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
    {
      swift_release();
      v6 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v7 = v6 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v7);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v8 = a1 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v9 = v8 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v10 = type metadata accessor for SymbolRenderingMode(0);
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(v9, 1))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    else
    {
      swift_release();
      v12 = a1 + *(int *)(sub_100008AC0(&qword_10008B868) + 36);
      swift_release();
      v13 = v12 + *(int *)(sub_100008AC0(&qword_10008B870) + 28);
      v3 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v13);
      sub_100008AC0(&qword_10008B878);
      swift_release();
      swift_release();
      sub_100008AC0(&qword_10008B880);
      swift_release();
      swift_release();
      v14 = a1 + *(int *)(sub_100008AC0(&qword_10008B888) + 36);
      swift_release();
      v15 = v14 + *(int *)(sub_100008AC0(&qword_10008B890) + 28);
      v16 = type metadata accessor for SymbolRenderingMode(0);
      v17 = *(_QWORD *)(v16 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v17 + 48))(v15, 1))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    }
  }
  return a1;
}

_QWORD *sub_100067378(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *__dst;
  char *__src;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;

  v45 = sub_100008AC0(&qword_10008C3D8);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v46 + 48))(a1, 1))
  {
    v20 = sub_100008AC0(&qword_10008C448);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v42 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1, v42) == 1)
    {
      *a2 = *a1;
      v11 = sub_100008AC0(&qword_10008B868);
      v22 = (_QWORD *)((char *)a2 + *(int *)(v11 + 36));
      v23 = (_QWORD *)((char *)a1 + *(int *)(v11 + 36));
      *v22 = *v23;
      v12 = sub_100008AC0(&qword_10008B870);
      v25 = (char *)v22 + *(int *)(v12 + 28);
      v24 = (char *)v23 + *(int *)(v12 + 28);
      v13 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32))(v25, v24);
      v14 = sub_100008AC0(&qword_10008B878);
      *(_OWORD *)((char *)a2 + *(int *)(v14 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v14 + 36));
      v15 = sub_100008AC0(&qword_10008B880);
      *(_OWORD *)((char *)a2 + *(int *)(v15 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v15 + 36));
      v16 = sub_100008AC0(&qword_10008B888);
      v26 = (_QWORD *)((char *)a2 + *(int *)(v16 + 36));
      v27 = (_QWORD *)((char *)a1 + *(int *)(v16 + 36));
      *v26 = *v27;
      v17 = sub_100008AC0(&qword_10008B890);
      __dst = (char *)v26 + *(int *)(v17 + 28);
      __src = (char *)v27 + *(int *)(v17 + 28);
      v30 = type metadata accessor for SymbolRenderingMode(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v31 + 48))(__src, 1))
      {
        v18 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(__dst, __src, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
      }
      v19 = sub_100008AC0(&qword_10008C420);
      memcpy((char *)a2 + *(int *)(v19 + 36), (char *)a1 + *(int *)(v19 + 36), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2, v42, 1);
    }
    else
    {
      *a2 = *a1;
      v2 = sub_100008AC0(&qword_10008B868);
      v32 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
      v33 = (_QWORD *)((char *)a1 + *(int *)(v2 + 36));
      *v32 = *v33;
      v3 = sub_100008AC0(&qword_10008B870);
      v35 = (char *)v32 + *(int *)(v3 + 28);
      v34 = (char *)v33 + *(int *)(v3 + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v35, v34);
      v5 = sub_100008AC0(&qword_10008B878);
      *(_OWORD *)((char *)a2 + *(int *)(v5 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v5 + 36));
      v6 = sub_100008AC0(&qword_10008B880);
      *(_OWORD *)((char *)a2 + *(int *)(v6 + 36)) = *(_OWORD *)((char *)a1 + *(int *)(v6 + 36));
      v7 = sub_100008AC0(&qword_10008B888);
      v36 = (_QWORD *)((char *)a2 + *(int *)(v7 + 36));
      v37 = (_QWORD *)((char *)a1 + *(int *)(v7 + 36));
      *v36 = *v37;
      v8 = sub_100008AC0(&qword_10008B890);
      v38 = (char *)v36 + *(int *)(v8 + 28);
      v39 = (char *)v37 + *(int *)(v8 + 28);
      v40 = type metadata accessor for SymbolRenderingMode(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v41 + 48))(v39, 1))
      {
        v9 = sub_100008AC0(&qword_10008B8C0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      v10 = sub_100008AC0(&qword_10008C420);
      memcpy((char *)a2 + *(int *)(v10 + 36), (char *)a1 + *(int *)(v10 + 36), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2, v42, 0);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(a2, 0, 1, v45);
  }
  return a2;
}

_QWORD *sub_10006788C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  char *__dst;
  char *__src;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;

  v67 = sub_100008AC0(&qword_10008C3D8);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v68 + 48))(a1, 1))
  {
    v20 = sub_100008AC0(&qword_10008C448);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v64 = sub_100008AC0(&qword_10008C3E0);
    if (swift_getEnumCaseMultiPayload(a1, v64) == 1)
    {
      v22 = *a1;
      swift_retain();
      *a2 = v22;
      v11 = sub_100008AC0(&qword_10008B868);
      v24 = (_QWORD *)((char *)a2 + *(int *)(v11 + 36));
      v25 = (uint64_t *)((char *)a1 + *(int *)(v11 + 36));
      v23 = *v25;
      swift_retain();
      *v24 = v23;
      v12 = sub_100008AC0(&qword_10008B870);
      v27 = (char *)v24 + *(int *)(v12 + 28);
      v26 = (char *)v25 + *(int *)(v12 + 28);
      v13 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 16))(v27, v26);
      v14 = sub_100008AC0(&qword_10008B878);
      v30 = (_QWORD *)((char *)a2 + *(int *)(v14 + 36));
      v29 = (uint64_t *)((char *)a1 + *(int *)(v14 + 36));
      v28 = *v29;
      swift_retain();
      *v30 = v28;
      v31 = v29[1];
      swift_retain();
      v30[1] = v31;
      v15 = sub_100008AC0(&qword_10008B880);
      v34 = (_QWORD *)((char *)a2 + *(int *)(v15 + 36));
      v33 = (uint64_t *)((char *)a1 + *(int *)(v15 + 36));
      v32 = *v33;
      swift_retain();
      *v34 = v32;
      v35 = v33[1];
      swift_retain();
      v34[1] = v35;
      v16 = sub_100008AC0(&qword_10008B888);
      v37 = (_QWORD *)((char *)a2 + *(int *)(v16 + 36));
      v38 = (uint64_t *)((char *)a1 + *(int *)(v16 + 36));
      v36 = *v38;
      swift_retain();
      *v37 = v36;
      v17 = sub_100008AC0(&qword_10008B890);
      __dst = (char *)v37 + *(int *)(v17 + 28);
      __src = (char *)v38 + *(int *)(v17 + 28);
      v41 = type metadata accessor for SymbolRenderingMode(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v42 + 48))(__src, 1))
      {
        v18 = sub_100008AC0(&qword_10008B8C0);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, __src, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
      }
      v19 = sub_100008AC0(&qword_10008C420);
      memcpy((char *)a2 + *(int *)(v19 + 36), (char *)a1 + *(int *)(v19 + 36), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2, v64, 1);
    }
    else
    {
      v43 = *a1;
      swift_retain();
      *a2 = v43;
      v2 = sub_100008AC0(&qword_10008B868);
      v45 = (_QWORD *)((char *)a2 + *(int *)(v2 + 36));
      v46 = (uint64_t *)((char *)a1 + *(int *)(v2 + 36));
      v44 = *v46;
      swift_retain();
      *v45 = v44;
      v3 = sub_100008AC0(&qword_10008B870);
      v48 = (char *)v45 + *(int *)(v3 + 28);
      v47 = (char *)v46 + *(int *)(v3 + 28);
      v4 = type metadata accessor for Image.Scale(0);
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(v48, v47);
      v5 = sub_100008AC0(&qword_10008B878);
      v51 = (_QWORD *)((char *)a2 + *(int *)(v5 + 36));
      v50 = (uint64_t *)((char *)a1 + *(int *)(v5 + 36));
      v49 = *v50;
      swift_retain();
      *v51 = v49;
      v52 = v50[1];
      swift_retain();
      v51[1] = v52;
      v6 = sub_100008AC0(&qword_10008B880);
      v55 = (_QWORD *)((char *)a2 + *(int *)(v6 + 36));
      v54 = (uint64_t *)((char *)a1 + *(int *)(v6 + 36));
      v53 = *v54;
      swift_retain();
      *v55 = v53;
      v56 = v54[1];
      swift_retain();
      v55[1] = v56;
      v7 = sub_100008AC0(&qword_10008B888);
      v58 = (_QWORD *)((char *)a2 + *(int *)(v7 + 36));
      v59 = (uint64_t *)((char *)a1 + *(int *)(v7 + 36));
      v57 = *v59;
      swift_retain();
      *v58 = v57;
      v8 = sub_100008AC0(&qword_10008B890);
      v60 = (char *)v58 + *(int *)(v8 + 28);
      v61 = (char *)v59 + *(int *)(v8 + 28);
      v62 = type metadata accessor for SymbolRenderingMode(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v63 + 48))(v61, 1))
      {
        v9 = sub_100008AC0(&qword_10008B8C0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      v10 = sub_100008AC0(&qword_10008C420);
      memcpy((char *)a2 + *(int *)(v10 + 36), (char *)a1 + *(int *)(v10 + 36), 0x30uLL);
      swift_storeEnumTagMultiPayload(a2, v64, 0);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(a2, 0, 1, v67);
  }
  return a2;
}

unint64_t sub_100067EF0()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C518;
  if (!qword_10008C518)
  {
    v2 = sub_100008DF0(&qword_10008C448);
    sub_100066FAC();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C518);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100067F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005C338(a1, a2);
}

uint64_t sub_100067F80(uint64_t a1)
{
  return sub_10005C440(a1);
}

uint64_t sub_100067F94()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[2];
  uint64_t v15;
  void *v16;

  v15 = 0;
  v16 = v0;
  v13 = objc_msgSend(v0, "serializedRepresentations");
  if (v13)
  {
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  if (v12)
  {
    v15 = v12;
    v14[1] = v12;
    v10 = sub_100008AC0(&qword_10008B100);
    v1 = sub_1000681F8();
    v14[0] = Sequence.compactMap<A>(_:)(sub_100068194, 0, v10, &type metadata for Data, v1);
    v6 = sub_100008AC0(&qword_10008C528);
    v7 = sub_1000134A4();
    v2 = sub_1000682E0();
    v9 = sub_10001990C((void (*)(char *, char *))sub_100068268, 0, v6, v7, (uint64_t)&type metadata for Never, v2, (uint64_t)&protocol witness table for Never, v8);
    sub_10000A004(v14);
    swift_bridgeObjectRelease(v12);
    return v9;
  }
  else
  {
    v3 = sub_1000134A4();
    return _allocateUninitializedArray<A>(_:)(0, v3);
  }
}

uint64_t sub_100068194@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *a1;
  v5 = a1[1];
  v2 = variable initialization expression of MFGetAccountsIntentResponse.code();
  result = Data.init(base64Encoded:options:)(v6, v5, v2);
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t sub_1000681F8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C520;
  if (!qword_10008C520)
  {
    v0 = sub_100008DF0(&qword_10008B100);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C520);
    return WitnessTable;
  }
  return v3;
}

id sub_100068268@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  sub_1000134A4();
  sub_100068350(v3, v4);
  result = sub_1000683D8(v3, v4);
  *a2 = result;
  return result;
}

unint64_t sub_1000682E0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C530;
  if (!qword_10008C530)
  {
    v0 = sub_100008DF0(&qword_10008C528);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C530);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_100068350(uint64_t result, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1)
    return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain(result);
    return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

id sub_1000683D8(uint64_t a1, unint64_t a2)
{
  Class isa;
  id v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "objectIDFromSerializedRepresentation:", isa);

  sub_100068448(a1, a2);
  return v6;
}

uint64_t sub_100068448(uint64_t result, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1)
    return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release(result);
    return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

id sub_1000684D0(uint64_t a1)
{
  id v2;
  id v3;
  void *v5;
  unint64_t v6;

  v6 = *(_QWORD *)(a1 + 32);
  sub_10001335C(*(_QWORD *)(a1 + 24), v6);
  if (v6 <= 5)
    __asm { BR              X8 }
  v5 = (void *)sub_1000173B4();
  if (v5)
  {
    v3 = objc_msgSend((id)objc_opt_self(EMMessageListItemPredicates), "predicateForMessagesInMailboxWithObjectID:", v5);

    swift_bridgeObjectRelease(v6);
    return v3;
  }
  else
  {
    sub_10001B688();
    v2 = sub_100068AB8(0);
    swift_bridgeObjectRelease(v6);
    return v2;
  }
}

id sub_100068AB8(char a1)
{
  uint64_t v1;

  return objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "predicateWithValue:", a1 & 1);
}

id sub_100068AF4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[2] = 0;
  v23[3] = a1;
  v17 = (id)objc_opt_self(EMMessageListItemPredicates);
  sub_100021AC4();
  v23[1] = a1;
  KeyPath = swift_getKeyPath(&unk_100074B98);
  swift_retain();
  v20 = sub_100008AC0(&qword_10008C540);
  v1 = sub_1000691BC();
  v22 = sub_10001990C((void (*)(char *, char *))sub_10006918C, KeyPath, v20, (uint64_t)&type metadata for Int, (uint64_t)&type metadata for Never, v1, (uint64_t)&protocol witness table for Never, v21);
  swift_release();
  swift_release();
  v23[0] = v22;
  v13 = sub_100008AC0(&qword_10008C550);
  v14 = sub_10006922C();
  v2 = sub_100069290();
  v15 = sub_10001990C((void (*)(char *, char *))sub_100069074, 0, v13, v14, (uint64_t)&type metadata for Never, v2, (uint64_t)&protocol witness table for Never, v21);
  sub_10000A004(v23);
  v7 = sub_100069108(v15, 1);
  v11 = objc_msgSend(v17, "predicateForMessagesWithMailboxScope:");

  sub_10001B624();
  v9 = sub_10001B688();
  v10 = _allocateUninitializedArray<A>(_:)(2, v9);
  v8 = v3;
  v4 = v16;
  *v8 = v16;
  v5 = v11;
  v8[1] = v11;
  sub_1000073C4();
  v12 = sub_10001F604(v10);

  return v12;
}

id sub_100068D54(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[2] = 0;
  v23[3] = a1;
  v17 = (id)objc_opt_self(EMMessageListItemPredicates);
  sub_100021AC4();
  v23[1] = a1;
  KeyPath = swift_getKeyPath(&unk_100074B98);
  swift_retain();
  v20 = sub_100008AC0(&qword_10008C540);
  v1 = sub_1000691BC();
  v22 = sub_10001990C((void (*)(char *, char *))sub_10006918C, KeyPath, v20, (uint64_t)&type metadata for Int, (uint64_t)&type metadata for Never, v1, (uint64_t)&protocol witness table for Never, v21);
  swift_release();
  swift_release();
  v23[0] = v22;
  v13 = sub_100008AC0(&qword_10008C550);
  v14 = sub_10006922C();
  v2 = sub_100069290();
  v15 = sub_10001990C((void (*)(char *, char *))sub_100069074, 0, v13, v14, (uint64_t)&type metadata for Never, v2, (uint64_t)&protocol witness table for Never, v21);
  sub_10000A004(v23);
  v7 = sub_100069108(v15, 0);
  v11 = objc_msgSend(v17, "predicateForMessagesWithMailboxScope:");

  sub_10001B624();
  v9 = sub_10001B688();
  v10 = _allocateUninitializedArray<A>(_:)(2, v9);
  v8 = v3;
  v4 = v16;
  *v8 = v16;
  v5 = v11;
  v8[1] = v11;
  sub_1000073C4();
  v12 = sub_10001F604(v10);

  return v12;
}

unint64_t sub_100068FB4()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008C538;
  if (!qword_10008C538)
  {
    v0 = objc_opt_self(EMObjectID);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008C538);
    return ObjCClassMetadata;
  }
  return v3;
}

uint64_t sub_100069018(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  swift_retain(a2);
  v5 = v3;
  swift_getAtKeyPath(&v5, a2);
  return swift_release(a2);
}

id sub_100069074@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v3;

  v3 = *a1;
  sub_10006922C();
  result = sub_1000690CC(v3);
  *a2 = result;
  return result;
}

id sub_1000690CC(uint64_t a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_100069300(a1);
}

id sub_100069108(uint64_t a1, char a2)
{
  Class isa;
  id v6;

  sub_10006922C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "mailboxScopeForMailboxTypes:forExclusion:", isa, a2 & 1);

  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_10006918C(uint64_t *a1)
{
  uint64_t v2;

  return sub_100069018(a1, v2);
}

unint64_t sub_1000691BC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C548;
  if (!qword_10008C548)
  {
    v0 = sub_100008DF0(&qword_10008C540);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C548);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10006922C()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008C558;
  if (!qword_10008C558)
  {
    v0 = objc_opt_self(NSNumber);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008C558);
    return ObjCClassMetadata;
  }
  return v3;
}

unint64_t sub_100069290()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C560;
  if (!qword_10008C560)
  {
    v0 = sub_100008DF0(&qword_10008C550);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C560);
    return WitnessTable;
  }
  return v3;
}

id sub_100069300(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, "initWithInteger:", a1);
}

uint64_t sub_100069324(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

uint64_t sub_100069358@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t *v27;
  int v28;
  void (*v29)(char *, uint64_t);
  unsigned int v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char *v71;

  v39 = a1;
  v71 = 0;
  v70 = 0;
  v68 = 0;
  v40 = 0;
  v66 = 0;
  v64 = 0;
  v51 = 0;
  v41 = type metadata accessor for Calendar.Component();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v44 = (char *)&v20 - v43;
  v45 = type metadata accessor for Calendar(v2);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v45);
  v48 = (char *)&v20 - v47;
  v49 = (*(_QWORD *)(*(_QWORD *)(sub_100008AC0(&qword_10008C568) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = __chkstk_darwin(v51);
  v50 = (uint64_t)&v20 - v49;
  v52 = type metadata accessor for Date(v3);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v51);
  v55 = (char *)&v20 - v54;
  v56 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = __chkstk_darwin(v4);
  v57 = (char *)&v20 - v56;
  v58 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = __chkstk_darwin(v6);
  v59 = (char *)&v20 - v58;
  v71 = (char *)&v20 - v58;
  v70 = v1;
  v60 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Snapshot(v8) + 20));
  sub_10002BF3C(v60);
  if (v60 < 2)
  {
    v20 = sub_10006C450();
    v21 = &v69;
    swift_beginAccess(v20);
    v19 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v39, v20);
    return swift_endAccess(v21);
  }
  v38 = v60;
  v9 = v40;
  v33 = v60;
  v68 = v60;
  v67 = v60;
  v34 = sub_100008AC0(&qword_10008B0F0);
  v35 = sub_10006A2EC();
  result = Sequence.contains(where:)(sub_10006A214, 0, v34);
  v36 = v9;
  v37 = result;
  if (v9)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v66 = v37 & 1;
  if ((v37 & 1) != 0)
  {
    v31 = sub_10006C5B4();
    v32 = &v61;
    swift_beginAccess(v31);
    v11 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v39, v31);
    swift_endAccess(v32);
    return swift_bridgeObjectRelease(v33);
  }
  static Calendar.current.getter();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v42 + 104))(v44, enum case for Calendar.Component.hour(_:), v41);
  Date.init()(v12);
  v13 = sub_1000356B4();
  v30 = 1;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v44, -1, v57, v13 & 1);
  v29 = *(void (**)(char *, uint64_t))(v53 + 8);
  v29(v57, v52);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v53 + 48))(v50, v30, v52) == 1)
  {
    Date.init(timeIntervalSinceNow:)(-3600.0);
    sub_10006A35C(v50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v59, v50, v52);
  }
  v14 = v36;
  v65 = v33;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v55, v59, v52);
  v27 = &v20;
  __chkstk_darwin(&v20);
  *(&v20 - 2) = v15;
  result = Sequence.contains(where:)(sub_10006A5B4, &v20 - 4, v16);
  v28 = result;
  if (v14)
    goto LABEL_15;
  v26 = v28;
  v29(v55, v52);
  v64 = v26 & 1;
  if ((v26 & 1) != 0)
  {
    v24 = sub_10006C614();
    v25 = &v62;
    swift_beginAccess(v24);
    v17 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v39, v24);
    swift_endAccess(v25);
  }
  else
  {
    v22 = sub_10006C450();
    v23 = &v63;
    swift_beginAccess(v22);
    v18 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v39, v22);
    swift_endAccess(v23);
  }
  v29(v59, v52);
  return swift_bridgeObjectRelease(v33);
}

uint64_t type metadata accessor for Snapshot(uint64_t a1)
{
  uint64_t v2;

  v2 = qword_10008C5E0;
  if (!qword_10008C5E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Snapshot);
  return v2;
}

uint64_t sub_100069ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v6;

  sub_10000D3B8(a1, a5);
  result = type metadata accessor for Snapshot(0);
  v6 = a5 + *(int *)(result + 20);
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_WORD *)(v6 + 16) = a4;
  return result;
}

uint64_t sub_100069B3C(unint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  int v4;

  if (a1 < 2)
    LOBYTE(v4) = 0;
  else
    v4 = HIBYTE(a3);
  return v4 & 1;
}

uint64_t sub_100069BD0(unint64_t a1, uint64_t a2)
{
  if (a1 < 2)
    return 0;
  return a2;
}

unint64_t sub_100069C84(unint64_t a1)
{
  if (a1 < 2)
    return 0;
  swift_bridgeObjectRetain(a1);
  return a1;
}

BOOL sub_100069D18(unint64_t a1, uint64_t a2, __int16 a3)
{
  return sub_100069DA4(a1, a2, a3, 0, 0, 0);
}

BOOL sub_100069D5C(unint64_t a1, uint64_t a2, __int16 a3)
{
  return sub_100069DA4(a1, a2, a3, 1uLL, 0, 0);
}

BOOL sub_100069DA4(unint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, uint64_t a5, __int16 a6)
{
  unint64_t v6;
  BOOL v9;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;

  v25 = a1;
  v26 = a2;
  v27 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  sub_10002BF3C(a1);
  sub_10002BF3C(a4);
  if (!a1)
  {
    if (!a4)
    {
      sub_100039164(0);
      sub_100039164(0);
      return 1;
    }
LABEL_22:
    sub_100039164(a1);
    sub_100039164(a4);
    return 0;
  }
  if (a1 == 1)
  {
    if (a4 == 1)
    {
      sub_100039164(1uLL);
      sub_100039164(1uLL);
      return 1;
    }
    goto LABEL_22;
  }
  if (a4 < 2)
    goto LABEL_22;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a4);
  v10 = type metadata accessor for Message(0);
  v6 = sub_10006C354();
  if ((static Array<A>.== infix(_:_:)(a1, a4, v10, v6) & 1) == 0)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a1);
    sub_100039164(a1);
    sub_100039164(a4);
    return 0;
  }
  v18 = a2;
  v19 = a3 & 1;
  v20 = a5;
  v21 = a6 & 1;
  if ((a3 & 1) == 0)
  {
    sub_10006C3C4((uint64_t)&v18, (uint64_t)&v17);
    if ((v21 & 1) == 0)
    {
      v9 = v17 == v20;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((v21 & 1) == 0)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_11;
  }
  v9 = 1;
LABEL_11:
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a1);
  sub_100039164(a1);
  sub_100039164(a4);
  return v9 && (HIBYTE(a3) & 1) == (HIBYTE(a6) & 1);
}

BOOL sub_10006A1DC(uint64_t a1, uint64_t a2)
{
  return sub_100069DA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_WORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_WORD *)(a2 + 16));
}

uint64_t sub_10006A214(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;

  v5 = a1;
  v10 = 0;
  v6 = type metadata accessor for Message(0);
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (char *)&v3 - v7;
  v10 = (char *)__chkstk_darwin(v5);
  v9 = v10[*(int *)(v1 + 36)];
  sub_100012B90(v10, (char *)&v3 - v7);
  if ((v9 & 1) != 0)
    v4 = v8[*(int *)(v6 + 40)];
  else
    v4 = 0;
  v3 = v4;
  sub_100012DE8(v8);
  return v3 & 1;
}

unint64_t sub_10006A2EC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C570;
  if (!qword_10008C570)
  {
    v0 = sub_100008DF0(&qword_10008B0F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C570);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006A35C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_10006A3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[12];
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  char *v29;

  v18 = a1;
  v23 = a2;
  v29 = 0;
  v28 = 0;
  v14 = 0;
  v24 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v24 - 8);
  v15 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = __chkstk_darwin(0);
  v16 = &v10[-v15];
  v17 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = __chkstk_darwin(v2);
  v25 = &v10[-v17];
  v19 = type metadata accessor for Message(v4);
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (char *)__chkstk_darwin(v18);
  v21 = &v10[-v20];
  v29 = v5;
  v28 = v23;
  v27 = v5[*(int *)(v6 + 40)];
  sub_100012B90(v5, &v10[-v20]);
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v22 + 16);
  v26(v25, v23, v24);
  if ((v27 & 1) != 0)
  {
    v7 = v24;
    v26(v16, (uint64_t)&v21[*(int *)(v19 + 32)], v24);
    v8 = sub_10006C3E0();
    v12 = static Comparable.>= infix(_:_:)(v16, v25, v7, v8);
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v16, v24);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v11 = v13;
  sub_100012DE8(v21);
  (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v25, v24);
  return v11 & 1;
}

uint64_t sub_10006A5B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10006A3CC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10006A5DC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  Swift::String v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v22[2];
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v31 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v32 = a1;
  v33 = a2;
  v34 = a3;
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Empty", 5uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error", 5uLL, 1)._countAndFlagsBits;
  swift_bridgeObjectRetain(a1);
  v31 = a1;
  v29 = a2;
  v30 = a3 & 1;
  v28 = HIBYTE(a3) & 1;
  v26 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(32);
  v27 = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Content: messages:", 0x12uLL, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease(object);
  v25 = a1;
  v12 = sub_100008AC0(&qword_10008B0F0);
  v5 = sub_10006A8DC();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v25, v12, v5);
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", unreadCount:", 0xEuLL, 1);
  v13 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease(v13);
  v23 = a2;
  v24 = a3 & 1;
  v7 = sub_100008AC0(&qword_10008C580);
  v22[0] = String.init<A>(describing:)(&v23, v7);
  v22[1] = v8;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v22);
  sub_1000090EC((uint64_t)v22);
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v14 = v9._object;
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease(v14);
  v16 = v26;
  v15 = v27;
  swift_bridgeObjectRetain(v27);
  sub_1000090EC((uint64_t)&v26);
  v17 = String.init(stringInterpolation:)(v16, v15);
  swift_bridgeObjectRelease(a1);
  return v17;
}

unint64_t sub_10006A8DC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C578;
  if (!qword_10008C578)
  {
    v0 = sub_100008DF0(&qword_10008B0F0);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C578);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006A94C()
{
  uint64_t v0;

  return sub_10006A5DC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_WORD *)(v0 + 16));
}

unint64_t sub_10006A96C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *__dst;
  char *__src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v21;

  v21 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v21 & 0x20000) != 0)
  {
    v16 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v16;
    return *(_QWORD *)a1 + ((v21 + 16) & ~(unint64_t)v21);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v14 = a2[1];
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(a1 + 8) = v14;
    v15 = a2[2];
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(a1 + 16) = v15;
    if ((unint64_t)a2[4] <= 5)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = a2[3];
      v13 = a2[4];
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(a1 + 32) = v13;
    }
    v3 = type metadata accessor for Mailbox(0);
    __dst = (void *)(a1 + *(int *)(v3 + 28));
    __src = (char *)a2 + *(int *)(v3 + 28);
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 48))(__src, 1))
    {
      v4 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(__dst, __src, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v7 = a1 + *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    if ((unint64_t)*v8 < 2)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    }
    else
    {
      v6 = *v8;
      swift_bridgeObjectRetain(*v8);
      *(_QWORD *)v7 = v6;
      *(_QWORD *)(v7 + 8) = v8[1];
      *(_BYTE *)(v7 + 16) = *((_BYTE *)v8 + 16);
      *(_BYTE *)(v7 + 17) = *((_BYTE *)v8 + 17);
    }
    return a1;
  }
}

uint64_t sub_10006AC08(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  if (a1[4] > 5uLL)
    swift_bridgeObjectRelease(a1[4]);
  v4 = (char *)a1 + *(int *)(type metadata accessor for Mailbox(0) + 28);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 48))(v4, 1);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v3 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  if (*v3 >= 2uLL)
    return swift_bridgeObjectRelease(*v3);
  return result;
}

uint64_t sub_10006AD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *__dst;
  void *__src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v15 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v15);
  *(_QWORD *)(a1 + 8) = v15;
  v17 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v17);
  *(_QWORD *)(a1 + 16) = v17;
  if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(a1 + 32) = v13;
  }
  v3 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v3 + 28));
  __src = (void *)(a2 + *(int *)(v3 + 28));
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v12 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 16))(__dst, __src, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v7 = a1 + *(int *)(a3 + 20);
  v8 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  if ((unint64_t)*v8 < 2)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
  }
  else
  {
    v6 = *v8;
    swift_bridgeObjectRetain(*v8);
    *(_QWORD *)v7 = v6;
    *(_QWORD *)(v7 + 8) = v8[1];
    *(_BYTE *)(v7 + 16) = *((_BYTE *)v8 + 16);
    *(_BYTE *)(v7 + 17) = *((_BYTE *)v8 + 17);
  }
  return a1;
}

uint64_t sub_10006AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *__src;
  void *__dst;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v22 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(v22);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v22;
  swift_bridgeObjectRelease(v3);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v25);
  *(_QWORD *)(a1 + 16) = v25;
  swift_bridgeObjectRelease(v24);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    if (*(_QWORD *)(a2 + 32) <= 5uLL)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v19 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(a1 + 32) = v19;
    }
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v20);
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v20;
    swift_bridgeObjectRelease(v4);
  }
  v5 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v5 + 28));
  __src = (void *)(a2 + *(int *)(v5 + 28));
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(void *, uint64_t))v18)(__dst, 1))
  {
    if (v18(__src, 1, v16))
    {
      v7 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(__dst, __src, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
  }
  else if (v18(__src, 1, v16))
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(__dst, v16);
    v6 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v17 + 24))(__dst, __src, v16);
  }
  v12 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v13 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  if ((unint64_t)*v12 < 2)
  {
    if ((unint64_t)*v13 < 2)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    }
    else
    {
      v10 = *v13;
      swift_bridgeObjectRetain(*v13);
      *v12 = v10;
      v12[1] = v13[1];
      *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
      *((_BYTE *)v12 + 17) = *((_BYTE *)v13 + 17);
    }
  }
  else if ((unint64_t)*v13 < 2)
  {
    sub_10000A004(v12);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  }
  else
  {
    v11 = *v13;
    swift_bridgeObjectRetain(*v13);
    v8 = *v12;
    *v12 = v11;
    swift_bridgeObjectRelease(v8);
    v12[1] = v13[1];
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    *((_BYTE *)v12 + 17) = *((_BYTE *)v13 + 17) & 1;
  }
  return a1;
}

uint64_t sub_10006B3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *__dst;
  void *__src;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v3 + 28));
  __src = (void *)(a2 + *(int *)(v3 + 28));
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v11 + 48))(__src, 1))
  {
    v4 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 32))(__dst, __src, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  v6 = a1 + *(int *)(a3 + 20);
  v7 = a2 + *(int *)(a3 + 20);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_WORD *)(v6 + 16) = *(_WORD *)(v7 + 16);
  return a1;
}

uint64_t sub_10006B56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  void *__src;
  void *__dst;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(void *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  if (*(_QWORD *)(a1 + 32) <= 5uLL)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else if (*(_QWORD *)(a2 + 32) <= 5uLL)
  {
    sub_1000090EC(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRelease(v6);
  }
  v7 = type metadata accessor for Mailbox(0);
  __dst = (void *)(a1 + *(int *)(v7 + 28));
  __src = (void *)(a2 + *(int *)(v7 + 28));
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(void *, uint64_t))v18)(__dst, 1))
  {
    if (v18(__src, 1, v16))
    {
      v9 = sub_100008AC0(&qword_10008B6D0);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(__dst, __src, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
  }
  else if (v18(__src, 1, v16))
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(__dst, v16);
    v8 = sub_100008AC0(&qword_10008B6D0);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v17 + 40))(__dst, __src, v16);
  }
  v12 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v13 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  if ((unint64_t)*v12 < 2)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  }
  else if ((unint64_t)*v13 < 2)
  {
    sub_10000A004(v12);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  }
  else
  {
    v10 = *v12;
    *v12 = *v13;
    swift_bridgeObjectRelease(v10);
    v12[1] = v13[1];
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    *((_BYTE *)v12 + 17) = *((_BYTE *)v13 + 17) & 1;
  }
  return a1;
}

uint64_t sub_10006B940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B95C);
}

uint64_t sub_10006B95C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for Mailbox(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 2147483645)
  {
    v5 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < (unint64_t)&_mh_execute_header)
      v5 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    v3 = v5 - 2;
    if (v5 - 2 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t sub_10006BA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006BA70);
}

uint64_t sub_10006BA70(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Mailbox(0);
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 2147483645)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  else
    __break(1u);
  return result;
}

uint64_t sub_10006BB28(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v4 = type metadata accessor for Mailbox(319);
  v5 = v4;
  if (v1 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v4 - 8) + 64;
    v6[1] = &unk_100074BF0;
    swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    return 0;
  }
  return v5;
}

uint64_t sub_10006BBE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((unint64_t)*a2 < 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v3 = *a2;
    swift_bridgeObjectRetain(*a2);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  }
  return a1;
}

_QWORD *sub_10006BC88(_QWORD *result)
{
  if (*result >= 2uLL)
    return (_QWORD *)swift_bridgeObjectRelease(*result);
  return result;
}

uint64_t *sub_10006BCE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if ((unint64_t)*a1 < 2)
  {
    if ((unint64_t)*a2 < 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
    }
    else
    {
      v4 = *a2;
      swift_bridgeObjectRetain(*a2);
      *a1 = v4;
      a1[1] = a2[1];
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
    }
  }
  else if ((unint64_t)*a2 < 2)
  {
    sub_10000A004(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    swift_bridgeObjectRetain(*a2);
    v2 = *a1;
    *a1 = v5;
    swift_bridgeObjectRelease(v2);
    a1[1] = a2[1];
    *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17) & 1;
  }
  return a1;
}

__n128 sub_10006BE58(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  return result;
}

uint64_t *sub_10006BE6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  if ((unint64_t)*a1 < 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  }
  else if ((unint64_t)*a2 < 2)
  {
    sub_10000A004(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  }
  else
  {
    v2 = *a1;
    *a1 = *a2;
    swift_bridgeObjectRelease(v2);
    a1[1] = a2[1];
    *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17) & 1;
  }
  return a1;
}

uint64_t sub_10006BFB8(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 18))
    {
      v5 = *(_DWORD *)a1 + 2147483645;
    }
    else
    {
      v4 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v4 = *(_QWORD *)a1;
      v2 = v4 - 2;
      if (v4 - 2 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10006C0EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 18);
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    *(_WORD *)(result + 16) = 0;
    if (a3 >= 0x7FFFFFFE)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *v3 = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_10006C2B8(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100008AC0(&qword_10008C618);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 2);
}

uint64_t sub_10006C2F8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = sub_100008AC0(&qword_10008C618);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, a2, 2);
}

void *type metadata accessor for Snapshot.State()
{
  return &unk_100084660;
}

unint64_t sub_10006C354()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C620;
  if (!qword_10008C620)
  {
    v0 = type metadata accessor for Message(255);
    WitnessTable = swift_getWitnessTable(&unk_100073F20, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C620);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006C3C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

unint64_t sub_10006C3E0()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C628;
  if (!qword_10008C628)
  {
    v0 = type metadata accessor for Date(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Date, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C628);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006C450()
{
  uint64_t v0;

  if (qword_10008AAC0 != -1)
    swift_once(&qword_10008AAC0, sub_10006C674);
  v0 = type metadata accessor for TimelineEntryRelevance(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008DF08);
}

uint64_t sub_10006C4B0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(0);
  v11 = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  object = v1._object;
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  v2 = swift_bridgeObjectRelease(object);
  v9 = TimelineEntryRelevance.score.getter(v2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v9);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v6 = v3._object;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease(v6);
  v8 = v10;
  v7 = v11;
  swift_bridgeObjectRetain(v11);
  sub_1000090EC((uint64_t)&v10);
  return String.init(stringInterpolation:)(v8, v7);
}

uint64_t sub_10006C5B4()
{
  uint64_t v0;

  if (qword_10008AAD0 != -1)
    swift_once(&qword_10008AAD0, sub_10006C724);
  v0 = type metadata accessor for TimelineEntryRelevance(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008DF38);
}

uint64_t sub_10006C614()
{
  uint64_t v0;

  if (qword_10008AAC8 != -1)
    swift_once(&qword_10008AAC8, sub_10006C6CC);
  v0 = type metadata accessor for TimelineEntryRelevance(0);
  return sub_1000034E4(v0, (uint64_t)qword_10008DF20);
}

uint64_t sub_10006C674()
{
  double v0;
  uint64_t v2;

  v2 = type metadata accessor for TimelineEntryRelevance(0);
  sub_100003474(v2, qword_10008DF08);
  sub_1000034E4(v2, (uint64_t)qword_10008DF08);
  v0 = sub_100047384();
  return TimelineEntryRelevance.init(score:duration:)(0.0, v0);
}

uint64_t sub_10006C6CC()
{
  double v0;
  uint64_t v2;

  v2 = type metadata accessor for TimelineEntryRelevance(0);
  sub_100003474(v2, qword_10008DF20);
  sub_1000034E4(v2, (uint64_t)qword_10008DF20);
  v0 = sub_100047384();
  return TimelineEntryRelevance.init(score:duration:)(0.5, v0);
}

uint64_t sub_10006C724()
{
  double v0;
  uint64_t v2;

  v2 = type metadata accessor for TimelineEntryRelevance(0);
  sub_100003474(v2, qword_10008DF38);
  sub_1000034E4(v2, (uint64_t)qword_10008DF38);
  v0 = sub_100047384();
  return TimelineEntryRelevance.init(score:duration:)(1.0, v0);
}

uint64_t sub_10006C77C()
{
  return sub_10006C4B0();
}

uint64_t sub_10006C790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v24;
  _QWORD v25[4];
  _QWORD v26[2];
  _QWORD v27[10];

  v27[4] = 0;
  v27[9] = a4;
  v27[8] = a1;
  v27[5] = a2;
  v27[6] = a3;
  *(double *)&v27[7] = a6;
  v12 = sub_100008AC0(&qword_10008C640);
  v6 = sub_10006CC90();
  v26[0] = GeometryReader.init(content:)(sub_10006CB44, 0, v12, v6);
  v26[1] = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  v20 = swift_allocObject(&unk_1000846B8, 48, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  *(double *)(v20 + 32) = a6;
  *(_QWORD *)(v20 + 40) = a1;
  v17 = sub_100008AC0(&qword_10008C660);
  v18 = sub_10006CEEC();
  v19 = sub_10006CF5C();
  v8 = sub_10006CFC8();
  View.onPreferenceChange<A>(_:perform:)(v27, &unk_1000846E0, sub_10006CED8, v20, v17, &unk_1000846E0, v18, v19, v8);
  swift_release();
  sub_10003B2F4((uint64_t)v26);
  v25[0] = v27[0];
  v25[1] = v27[1];
  v25[2] = v27[2];
  v25[3] = v27[3];
  v22 = sub_100008AC0(&qword_10008C680);
  v24 = sub_10006D038();
  v9 = sub_1000525E0(a4, v22);
  View.background<A>(_:alignment:)(v25, v9, v10, a4, v22, a5, v24);
  return sub_10006D134((uint64_t)v25);
}

void sub_10006C990()
{
  qword_10008C630 = sub_10006D168(0);
  qword_10008C638 = qword_10008C630;
}

uint64_t *sub_10006C9BC()
{
  if (qword_10008AAD8 != -1)
    swift_once(&qword_10008AAD8, sub_10006C990);
  return &qword_10008C630;
}

double sub_10006CA10()
{
  return *(double *)sub_10006C9BC();
}

uint64_t sub_10006CA2C(uint64_t a1, double (*a2)(void))
{
  double v2;
  uint64_t result;
  uint64_t v4;

  v2 = a2();
  result = a1;
  *(double *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

void sub_10006CA80(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(double *)a1 = sub_10006CA10();
  *(_QWORD *)(a1 + 8) = v1;
}

uint64_t sub_10006CAAC(uint64_t a1)
{
  return sub_10006CA2C(a1, sub_10006D170);
}

double sub_10006CAE0(void (*a1)(double *__return_ptr))
{
  double v2;

  a1(&v2);
  return v2;
}

uint64_t sub_10006CB14()
{
  return static PreferenceKey._includesRemovedValues.getter() & 1;
}

uint64_t sub_10006CB2C()
{
  return static PreferenceKey._isReadableByHost.getter() & 1;
}

_QWORD *sub_10006CB44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = a1;
  v13 = static Color.clear.getter();
  v12[0] = GeometryProxy.size.getter();
  v12[1] = v2;
  v3 = sub_10006CF5C();
  View.preference<A>(key:value:)(v14, &unk_1000846E0, v12, &type metadata for Color, &unk_1000846E0, &protocol witness table for Color, v3);
  sub_10001B7F0(&v13);
  v11[0] = v14[0];
  v11[1] = v14[1];
  v11[2] = v14[2];
  v9 = sub_100008AC0(&qword_10008C640);
  sub_10006CC90();
  sub_100031764((uint64_t)v11, v9, (uint64_t)v15);
  sub_10001B7F0(v11);
  v5 = v15[0];
  v6 = v15[1];
  v7 = v15[2];
  swift_retain();
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  sub_100031764((uint64_t)v10, v9, a2);
  sub_10001B7F0(v10);
  result = v15;
  sub_10001B7F0(v15);
  return result;
}

unint64_t sub_10006CC90()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C648;
  if (!qword_10008C648)
  {
    v2 = sub_100008DF0(&qword_10008C640);
    sub_10006CD18();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C648);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10006CD18()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C650;
  if (!qword_10008C650)
  {
    v0 = sub_100008DF0(&qword_10008C658);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C650);
    return WitnessTable;
  }
  return v3;
}

_QWORD *sub_10006CD88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0.0;
  v16 = 0;
  v11 = a1[1];
  v20 = *a1;
  v10 = v20;
  v21 = v11;
  v17 = a2;
  v18 = a3;
  v19 = a5;
  v16 = a4;
  swift_retain();
  swift_retain();
  v15[0] = a2;
  v15[1] = a3;
  *(double *)&v15[2] = a5;
  swift_retain();
  v14[0] = v10;
  v14[1] = v11;
  swift_getAtKeyPath(v14, a4);
  v13[0] = v13[1];
  v5 = sub_100008AC0(&qword_10008C6A0);
  Binding.wrappedValue.setter(v13, v5);
  swift_release();
  return sub_10006D204(v15);
}

uint64_t sub_10006CE8C()
{
  _QWORD *v0;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v2, 48);
}

_QWORD *sub_10006CED8(uint64_t *a1)
{
  uint64_t v1;

  return sub_10006CD88(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), *(double *)(v1 + 32));
}

unint64_t sub_10006CEEC()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C668;
  if (!qword_10008C668)
  {
    v0 = sub_100008DF0(&qword_10008C660);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C668);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10006CF5C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C670;
  if (!qword_10008C670)
  {
    WitnessTable = swift_getWitnessTable(&unk_100074D64, &unk_1000846E0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C670);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_10006CFC8()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C678;
  if (!qword_10008C678)
  {
    v0 = type metadata accessor for CGSize(255);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CGSize, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C678);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10006D038()
{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v3;

  v3 = qword_10008C688;
  if (!qword_10008C688)
  {
    v2 = sub_100008DF0(&qword_10008C680);
    sub_10006CEEC();
    sub_10006D0C4();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C688);
    return WitnessTable;
  }
  return v3;
}

unint64_t sub_10006D0C4()
{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;

  v3 = qword_10008C690;
  if (!qword_10008C690)
  {
    v0 = sub_100008DF0(&qword_10008C698);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v0);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C690);
    return WitnessTable;
  }
  return v3;
}

uint64_t sub_10006D134(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));
  return a1;
}

double sub_10006D168(uint64_t a1)
{
  return (double)a1;
}

double sub_10006D170()
{
  uint64_t v0;

  return sub_10006CAE0(*(void (**)(double *__return_ptr))(v0 + 16));
}

void *type metadata accessor for SyncedSizePreferenceKey()
{
  return &unk_1000846E0;
}

uint64_t sub_10006D190(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v1 = sub_100008DF0(&qword_10008BD58);
  v4 = type metadata accessor for ModifiedContent(255, v3, v1);
  sub_100044524();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
}

_QWORD *sub_10006D204(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return a1;
}

id MFGetAccountsIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id MFGetMailboxIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for MFGetMailboxIntent();
  v2 = objc_msgSendSuper2(&v3, "init");
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for MFGetMailboxIntent()
{
  return objc_opt_self(MFGetMailboxIntent);
}

id MFGetAccountsIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v4;
}

id MFGetMailboxIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MFGetMailboxIntent();
  v5 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  NSString v6;
  void *v7;
  id v10;

  v10 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v10, "initWithIdentifier:backingStore:");

  return v5;
}

id MFGetMailboxIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  NSString v6;
  void *v7;
  objc_super v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = 0;
  v12 = a1;
  v13 = a2;
  v11 = a3;
  swift_bridgeObjectRetain(a2);
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v10.receiver = 0;
  v10.super_class = (Class)type metadata accessor for MFGetMailboxIntent();
  v5 = objc_msgSendSuper2(&v10, "initWithIdentifier:backingStore:", v7, a3);

  v3 = v5;
  v14 = v5;

  swift_bridgeObjectRelease(a2);
  return v5;
}

id MFGetAccountsIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v12;
  NSString v14;
  NSString v16;

  v12 = objc_allocWithZone(v5);
  v14 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
    v6 = objc_msgSend(v12, "initWithDomain:verb:parametersByName:", v14, v16, isa);
  }
  else
  {
    v6 = objc_msgSend(v12, "initWithDomain:verb:parametersByName:", v14, v16, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);
  return v9;
}

id MFGetMailboxIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  NSString v11;
  NSString v13;
  objc_super v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v21 = 0;
  v19 = a1;
  v20 = a2;
  v17 = a3;
  v18 = a4;
  v16 = a5;
  swift_bridgeObjectRetain(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(a4);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a5);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v15.receiver = 0;
  v15.super_class = (Class)type metadata accessor for MFGetMailboxIntent();
  v7 = objc_msgSendSuper2(&v15, "initWithDomain:verb:parametersByName:", v11, v13, v9);

  v5 = v7;
  v21 = v7;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);

  return v7;
}

id MFGetMailboxIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFGetMailboxIntent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t MFGetAccountsIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
  }
  return 0;
}

uint64_t sub_10006DC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006E99C();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for Int) & 1;
}

uint64_t sub_10006DCE4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_10006E99C();
  return RawRepresentable<>.hashValue.getter(a1, a2, v2, &protocol witness table for Int);
}

uint64_t sub_10006DD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006E99C();
  return RawRepresentable<>.hash(into:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_10006DD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006E99C();
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_10006DDA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = MFGetAccountsIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void sub_10006DDE0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  MFGetAccountsIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t MFGetMailboxIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = 0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR___MFGetMailboxIntentResponse_code);
  swift_beginAccess(v0 + OBJC_IVAR___MFGetMailboxIntentResponse_code);
  v3 = *v2;
  swift_endAccess(v4);
  return v3;
}

uint64_t sub_10006DEF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a1;
  v3 = (_QWORD *)(v1 + OBJC_IVAR___MFGetMailboxIntentResponse_code);
  swift_beginAccess(v1 + OBJC_IVAR___MFGetMailboxIntentResponse_code);
  *v3 = a1;
  return swift_endAccess(v5);
}

uint64_t (*sub_10006DF60())(uint64_t a1)
{
  uint64_t v0;

  swift_beginAccess(v0 + OBJC_IVAR___MFGetMailboxIntentResponse_code);
  return sub_10006DFB0;
}

uint64_t sub_10006DFB0(uint64_t a1)
{
  return swift_endAccess(a1);
}

void sub_10006DFEC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = MFGetMailboxIntentResponse.code.getter();

}

void sub_10006E044(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  sub_10006DEF8(v4);

}

char *MFGetMailboxIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return MFGetMailboxIntentResponse.init(code:userActivity:)(a1, a2);
}

char *MFGetMailboxIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  char v10[24];
  void *v11;
  uint64_t v12;
  id v13;

  v12 = a1;
  v11 = a2;
  v9 = (char *)objc_msgSend(v13, "init");
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v13 = v9;
  v6 = &v9[OBJC_IVAR___MFGetMailboxIntentResponse_code];
  swift_beginAccess(&v9[OBJC_IVAR___MFGetMailboxIntentResponse_code]);
  *(_QWORD *)v6 = a1;
  swift_endAccess(v10);

  objc_msgSend(v9, "setUserActivity:", a2);
  return v9;
}

id MFGetMailboxIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___MFGetMailboxIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for MFGetMailboxIntentResponse();
  v4 = objc_msgSendSuper2(&v5, "init");
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for MFGetMailboxIntentResponse()
{
  return objc_opt_self(MFGetMailboxIntentResponse);
}

id MFGetMailboxIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetMailboxIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for MFGetMailboxIntentResponse();
  v7 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithBackingStore:", a1);

  return v4;
}

id MFGetMailboxIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetMailboxIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for MFGetMailboxIntentResponse();
  v7 = objc_msgSendSuper2(&v8, "initWithBackingStore:", a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v2 = objc_msgSend(v8, "initWithPropertiesByName:", isa);
  }
  else
  {
    v2 = objc_msgSend(v8, "initWithPropertiesByName:", 0);
  }
  v5 = v2;

  return v5;
}

id MFGetMailboxIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetMailboxIntentResponse_code] = 0;

  swift_bridgeObjectRetain(a1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for MFGetMailboxIntentResponse();
  v6 = objc_msgSendSuper2(&v10, "initWithPropertiesByName:", v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease(a1);

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    return 0;
  }
}

id MFGetMailboxIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFGetMailboxIntentResponse();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_10006E8E0()
{
  return sub_10006E8F4();
}

unint64_t sub_10006E8F4()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C6B0;
  if (!qword_10008C6B0)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFGetMailboxIntentResponseCode, &type metadata for MFGetMailboxIntentResponseCode);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C6B0);
    return WitnessTable;
  }
  return v2;
}

void sub_10006E960(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10006DFEC(a1, a2);
}

void sub_10006E974(uint64_t *a1, id *a2)
{
  sub_10006E044(a1, a2);
}

ValueMetadata *type metadata accessor for MFGetMailboxIntentResponseCode()
{
  return &type metadata for MFGetMailboxIntentResponseCode;
}

unint64_t sub_10006E99C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C708;
  if (!qword_10008C708)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFGetMailboxIntentResponseCode, &type metadata for MFGetMailboxIntentResponseCode);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C708);
    return WitnessTable;
  }
  return v2;
}

id MFGetAccountsIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for MFGetAccountsIntent();
  v2 = objc_msgSendSuper2(&v3, "init");
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for MFGetAccountsIntent()
{
  return objc_opt_self(MFGetAccountsIntent);
}

id MFGetAccountsIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MFGetAccountsIntent();
  v5 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  NSString v6;
  void *v7;
  objc_super v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = 0;
  v12 = a1;
  v13 = a2;
  v11 = a3;
  swift_bridgeObjectRetain(a2);
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v10.receiver = 0;
  v10.super_class = (Class)type metadata accessor for MFGetAccountsIntent();
  v5 = objc_msgSendSuper2(&v10, "initWithIdentifier:backingStore:", v7, a3);

  v3 = v5;
  v14 = v5;

  swift_bridgeObjectRelease(a2);
  return v5;
}

id MFGetAccountsIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  NSString v11;
  NSString v13;
  objc_super v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v21 = 0;
  v19 = a1;
  v20 = a2;
  v17 = a3;
  v18 = a4;
  v16 = a5;
  swift_bridgeObjectRetain(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(a4);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a5);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v15.receiver = 0;
  v15.super_class = (Class)type metadata accessor for MFGetAccountsIntent();
  v7 = objc_msgSendSuper2(&v15, "initWithDomain:verb:parametersByName:", v11, v13, v9);

  v5 = v7;
  v21 = v7;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);

  return v7;
}

id MFGetAccountsIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFGetAccountsIntent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006F0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006FC08();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for Int) & 1;
}

uint64_t sub_10006F100(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_10006FC08();
  return RawRepresentable<>.hashValue.getter(a1, a2, v2, &protocol witness table for Int);
}

uint64_t sub_10006F13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006FC08();
  return RawRepresentable<>.hash(into:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_10006F180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_10006FC08();
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t MFGetAccountsIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  v5 = 0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR___MFGetAccountsIntentResponse_code);
  swift_beginAccess(v0 + OBJC_IVAR___MFGetAccountsIntentResponse_code);
  v3 = *v2;
  swift_endAccess(v4);
  return v3;
}

uint64_t sub_10006F2B0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a1;
  v3 = (_QWORD *)(v1 + OBJC_IVAR___MFGetAccountsIntentResponse_code);
  swift_beginAccess(v1 + OBJC_IVAR___MFGetAccountsIntentResponse_code);
  *v3 = a1;
  return swift_endAccess(v5);
}

uint64_t (*sub_10006F318())(uint64_t a1)
{
  uint64_t v0;

  swift_beginAccess(v0 + OBJC_IVAR___MFGetAccountsIntentResponse_code);
  return sub_10006DFB0;
}

void sub_10006F368(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = MFGetAccountsIntentResponse.code.getter();

}

void sub_10006F3C0(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  sub_10006F2B0(v4);

}

char *MFGetAccountsIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return MFGetAccountsIntentResponse.init(code:userActivity:)(a1, a2);
}

char *MFGetAccountsIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  char v10[24];
  void *v11;
  uint64_t v12;
  id v13;

  v12 = a1;
  v11 = a2;
  v9 = (char *)objc_msgSend(v13, "init");
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v13 = v9;
  v6 = &v9[OBJC_IVAR___MFGetAccountsIntentResponse_code];
  swift_beginAccess(&v9[OBJC_IVAR___MFGetAccountsIntentResponse_code]);
  *(_QWORD *)v6 = a1;
  swift_endAccess(v10);

  objc_msgSend(v9, "setUserActivity:", a2);
  return v9;
}

id MFGetAccountsIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___MFGetAccountsIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for MFGetAccountsIntentResponse();
  v4 = objc_msgSendSuper2(&v5, "init");
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for MFGetAccountsIntentResponse()
{
  return objc_opt_self(MFGetAccountsIntentResponse);
}

id MFGetAccountsIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetAccountsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for MFGetAccountsIntentResponse();
  v7 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetAccountsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for MFGetAccountsIntentResponse();
  v7 = objc_msgSendSuper2(&v8, "initWithBackingStore:", a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id MFGetAccountsIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___MFGetAccountsIntentResponse_code] = 0;

  swift_bridgeObjectRetain(a1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for MFGetAccountsIntentResponse();
  v6 = objc_msgSendSuper2(&v10, "initWithPropertiesByName:", v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease(a1);

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    return 0;
  }
}

id MFGetAccountsIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFGetAccountsIntentResponse();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_10006FB4C()
{
  return sub_10006FB60();
}

unint64_t sub_10006FB60()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C718;
  if (!qword_10008C718)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFGetAccountsIntentResponseCode, &type metadata for MFGetAccountsIntentResponseCode);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C718);
    return WitnessTable;
  }
  return v2;
}

void sub_10006FBCC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10006F368(a1, a2);
}

void sub_10006FBE0(uint64_t *a1, id *a2)
{
  sub_10006F3C0(a1, a2);
}

ValueMetadata *type metadata accessor for MFGetAccountsIntentResponseCode()
{
  return &type metadata for MFGetAccountsIntentResponseCode;
}

unint64_t sub_10006FC08()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C770;
  if (!qword_10008C770)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFGetAccountsIntentResponseCode, &type metadata for MFGetAccountsIntentResponseCode);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C770);
    return WitnessTable;
  }
  return v2;
}

uint64_t MFIntentMailboxKind.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 7:
      return 7;
  }
  return 0;
}

uint64_t sub_10006FDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_1000703BC();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for Int) & 1;
}

uint64_t sub_10006FE20(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_1000703BC();
  return RawRepresentable<>.hashValue.getter(a1, a2, v2, &protocol witness table for Int);
}

uint64_t sub_10006FE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_1000703BC();
  return RawRepresentable<>.hash(into:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_10006FEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = sub_1000703BC();
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, v3, &protocol witness table for Int);
}

uint64_t sub_10006FEE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = MFIntentMailboxKind.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

id static MFIntentMailboxKindResolutionResult.success(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  MFGetAccountsIntentResponseCode.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, "successWithResolvedValue:", v0);
}

id static MFIntentMailboxKindResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  MFGetAccountsIntentResponseCode.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, "confirmationRequiredWithValueToConfirm:", v0);
}

id MFIntentMailboxKindResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v4;
  Class isa;
  id v8;

  v4 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v4, "initWithJSONDictionary:forIntent:");

  swift_bridgeObjectRelease(a1);
  return v8;
}

id MFIntentMailboxKindResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v8;
  objc_super v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = 0;
  v11 = a1;
  v10 = a2;
  swift_bridgeObjectRetain(a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = 0;
  v9.super_class = (Class)type metadata accessor for MFIntentMailboxKindResolutionResult();
  v8 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  if (v8)
  {
    v2 = v8;
    v12 = v8;

    swift_bridgeObjectRelease(a1);
    return v8;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    return 0;
  }
}

uint64_t type metadata accessor for MFIntentMailboxKindResolutionResult()
{
  return objc_opt_self(MFIntentMailboxKindResolutionResult);
}

id MFIntentMailboxKindResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFIntentMailboxKindResolutionResult();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_100070328()
{
  return sub_10007033C();
}

unint64_t sub_10007033C()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C778;
  if (!qword_10008C778)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFIntentMailboxKind, &type metadata for MFIntentMailboxKind);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C778);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for MFIntentMailboxKind()
{
  return &type metadata for MFIntentMailboxKind;
}

unint64_t sub_1000703BC()
{
  unint64_t WitnessTable;
  uint64_t v2;

  v2 = qword_10008C7A8;
  if (!qword_10008C7A8)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MFIntentMailboxKind, &type metadata for MFIntentMailboxKind);
    atomic_store(WitnessTable, (unint64_t *)&qword_10008C7A8);
    return WitnessTable;
  }
  return v2;
}

uint64_t static MFIntentMailbox.supportsSecureCoding.getter()
{
  return 1;
}

id MFIntentMailbox.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v8;
  NSString v9;
  void *v10;
  NSString v11;
  NSString v12;
  void *v13;
  id v17;

  v17 = objc_allocWithZone(v6);
  if (a2)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  if (a6)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v8 = objc_msgSend(v17, "initWithIdentifier:displayString:pronunciationHint:", v13, v11);

  swift_bridgeObjectRelease(a4);
  return v8;
}

id MFIntentMailbox.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  id v8;
  NSString v9;
  void *v10;
  NSString v11;
  NSString v12;
  void *v13;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = 0;
  v22 = a1;
  v23 = a2;
  v20 = a3;
  v21 = a4;
  v18 = a5;
  v19 = a6;
  swift_bridgeObjectRetain(a2);
  if (a2)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRetain(a4);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a6);
  if (a6)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for MFIntentMailbox();
  v8 = objc_msgSendSuper2(&v17, "initWithIdentifier:displayString:pronunciationHint:", v13, v11, v10);

  v6 = v8;
  v24 = v8;
  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);

  return v8;
}

uint64_t type metadata accessor for MFIntentMailbox()
{
  return objc_opt_self(MFIntentMailbox);
}

id MFIntentMailbox.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MFIntentMailbox();
  v5 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MFIntentMailbox.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFIntentMailbox();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static MFIntentMailboxResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___MFIntentMailboxResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static MFIntentMailboxResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  Class isa;
  id v8;
  objc_super v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain(a1);
  v3 = type metadata accessor for MFIntentMailbox();
  sub_100070C84();
  v4 = _arrayForceCast<A, B>(_:)(a1, v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1);
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MFIntentMailboxResolutionResult;
  v8 = objc_msgSendSuper2(&v9, "disambiguationWithObjectsToDisambiguate:", isa);

  return v8;
}

unint64_t sub_100070C84()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008C7D8;
  if (!qword_10008C7D8)
  {
    v0 = objc_opt_self(INObject);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008C7D8);
    return ObjCClassMetadata;
  }
  return v3;
}

id static MFIntentMailboxResolutionResult.confirmationRequired(with:)(void *a1)
{
  uint64_t v1;
  id v2;
  id v4;
  id v5;
  void *v6;
  void *ObjCClassFromMetadata;
  objc_super v9;
  uint64_t v10;
  void *v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v2 = a1;
  if (a1)
    v6 = a1;
  else
    v6 = 0;
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MFIntentMailboxResolutionResult;
  v5 = objc_msgSendSuper2(&v9, "confirmationRequiredWithObjectToConfirm:", v6);

  return v5;
}

void static MFIntentMailboxResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentMailbox.swift", 41);
  __break(1u);
}

id sub_100070F4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

void static MFIntentMailboxResolutionResult.disambiguation(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentMailbox.swift", 41);
  __break(1u);
}

id sub_100071040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  ((void (*)())swift_bridgeObjectRelease)();

  return a1;
}

void static MFIntentMailboxResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentMailbox.swift", 41);
  __break(1u);
}

id sub_100071120(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

id MFIntentMailboxResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v8;
  objc_super v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = 0;
  v11 = a1;
  v10 = a2;
  swift_bridgeObjectRetain(a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = 0;
  v9.super_class = (Class)type metadata accessor for MFIntentMailboxResolutionResult();
  v8 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  if (v8)
  {
    v2 = v8;
    v12 = v8;

    swift_bridgeObjectRelease(a1);
    return v8;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    return 0;
  }
}

id MFIntentMailboxResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFIntentMailboxResolutionResult();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100071340()
{
  swift_bridgeObjectRetain(0xE000000000000000);
  return 0;
}

uint64_t type metadata accessor for MFIntentMailboxResolutionResult()
{
  return objc_opt_self(MFIntentMailboxResolutionResult);
}

id MFIntentAccount.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  id v8;
  NSString v9;
  void *v10;
  NSString v11;
  NSString v12;
  void *v13;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = 0;
  v22 = a1;
  v23 = a2;
  v20 = a3;
  v21 = a4;
  v18 = a5;
  v19 = a6;
  swift_bridgeObjectRetain(a2);
  if (a2)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRetain(a4);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRetain(a6);
  if (a6)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for MFIntentAccount();
  v8 = objc_msgSendSuper2(&v17, "initWithIdentifier:displayString:pronunciationHint:", v13, v11, v10);

  v6 = v8;
  v24 = v8;
  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);

  return v8;
}

uint64_t type metadata accessor for MFIntentAccount()
{
  return objc_opt_self(MFIntentAccount);
}

id MFIntentAccount.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MFIntentAccount();
  v5 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MFIntentAccount.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFIntentAccount();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static MFIntentAccountResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___MFIntentAccountResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static MFIntentAccountResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  Class isa;
  id v8;
  objc_super v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain(a1);
  v3 = type metadata accessor for MFIntentAccount();
  sub_100070C84();
  v4 = _arrayForceCast<A, B>(_:)(a1, v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1);
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MFIntentAccountResolutionResult;
  v8 = objc_msgSendSuper2(&v9, "disambiguationWithObjectsToDisambiguate:", isa);

  return v8;
}

id static MFIntentAccountResolutionResult.confirmationRequired(with:)(void *a1)
{
  uint64_t v1;
  id v2;
  id v4;
  id v5;
  void *v6;
  void *ObjCClassFromMetadata;
  objc_super v9;
  uint64_t v10;
  void *v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v1);
  v2 = a1;
  if (a1)
    v6 = a1;
  else
    v6 = 0;
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MFIntentAccountResolutionResult;
  v5 = objc_msgSendSuper2(&v9, "confirmationRequiredWithObjectToConfirm:", v6);

  return v5;
}

void static MFIntentAccountResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentAccount.swift", 41);
  __break(1u);
}

id sub_100071CDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

void static MFIntentAccountResolutionResult.disambiguation(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentAccount.swift", 41);
  __break(1u);
}

id sub_100071DD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  ((void (*)())swift_bridgeObjectRelease)();

  return a1;
}

void static MFIntentAccountResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100071340();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0, v1, "MailWidgetExtension/MFIntentAccount.swift", 41);
  __break(1u);
}

id sub_100071EB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

id MFIntentAccountResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v8;
  objc_super v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = 0;
  v11 = a1;
  v10 = a2;
  swift_bridgeObjectRetain(a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = 0;
  v9.super_class = (Class)type metadata accessor for MFIntentAccountResolutionResult();
  v8 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  if (v8)
  {
    v2 = v8;
    v12 = v8;

    swift_bridgeObjectRelease(a1);
    return v8;
  }
  else
  {

    swift_bridgeObjectRelease(a1);
    return 0;
  }
}

id MFIntentAccountResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MFIntentAccountResolutionResult();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MFIntentAccountResolutionResult()
{
  return objc_opt_self(MFIntentAccountResolutionResult);
}

uint64_t sub_1000720F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100072118()
{
  uint64_t v0;

  v0 = sub_1000720F4();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100072154()
{
  uint64_t v0;

  swift_allocObject(v0, 16, 7);
  return sub_1000720F4();
}

id sub_10007218C()
{
  id result;

  sub_10007228C();
  type metadata accessor for ResourceBundleClass();
  result = sub_1000721D0();
  qword_10008C858 = (uint64_t)result;
  return result;
}

id sub_1000721D0()
{
  uint64_t ObjCClassFromMetadata;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), "bundleForClass:", ObjCClassFromMetadata);
}

uint64_t *sub_100072214()
{
  if (qword_10008AAE0 != -1)
    swift_once(&qword_10008AAE0, sub_10007218C);
  return &qword_10008C858;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC19MailWidgetExtensionP33_0002A707952FD05A383A61F25ABB685719ResourceBundleClass);
}

unint64_t sub_10007228C()
{
  uint64_t v0;
  unint64_t ObjCClassMetadata;
  uint64_t v3;

  v3 = qword_10008C8F8;
  if (!qword_10008C8F8)
  {
    v0 = objc_opt_self(NSBundle);
    ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_10008C8F8);
    return ObjCClassMetadata;
  }
  return v3;
}
